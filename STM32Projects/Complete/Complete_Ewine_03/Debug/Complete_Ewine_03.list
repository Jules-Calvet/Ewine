
Complete_Ewine_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021f8c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011fc  080220d0  080220d0  000320d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080232cc  080232cc  000332cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080232d4  080232d4  000332d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080232d8  080232d8  000332d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000260  20000008  080232dc  00040008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000097c0  20000268  0802353c  00040268  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20009a28  0802353c  00049a28  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00040268  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006d0af  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008160  00000000  00000000  000ad347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003950  00000000  00000000  000b54a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000035f0  00000000  00000000  000b8df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030f2a  00000000  00000000  000bc3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043e39  00000000  00000000  000ed312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011dbf5  00000000  00000000  0013114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024ed40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010930  00000000  00000000  0024ed90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000268 	.word	0x20000268
 800015c:	00000000 	.word	0x00000000
 8000160:	080220b4 	.word	0x080220b4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000026c 	.word	0x2000026c
 800017c:	080220b4 	.word	0x080220b4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9bf 	b.w	8000ef8 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f20:	68fb      	ldr	r3, [r7, #12]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f32:	2004      	movs	r0, #4
 8000f34:	f7ff ffe2 	bl	8000efc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ffdf 	bl	8000efc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	200b      	movs	r0, #11
 8000f44:	f017 f9b9 	bl	80182ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f48:	200b      	movs	r0, #11
 8000f4a:	f017 f9d0 	bl	80182ee <HAL_NVIC_EnableIRQ>

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f98:	2004      	movs	r0, #4
 8000f9a:	f7ff ffda 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f7ff ffd7 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ffd4 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2008      	movs	r0, #8
 8000fac:	f7ff ffd1 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f017 ff4c 	bl	8018e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2123      	movs	r1, #35	; 0x23
 8000fc0:	482a      	ldr	r0, [pc, #168]	; (800106c <MX_GPIO_Init+0xe8>)
 8000fc2:	f017 ff47 	bl	8018e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f017 fcd3 	bl	8018988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481e      	ldr	r0, [pc, #120]	; (8001070 <MX_GPIO_Init+0xec>)
 8000ff6:	f017 fcc7 	bl	8018988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ffa:	2323      	movs	r3, #35	; 0x23
 8000ffc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <MX_GPIO_Init+0xe8>)
 8001010:	f017 fcba 	bl	8018988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001014:	2301      	movs	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4813      	ldr	r0, [pc, #76]	; (8001074 <MX_GPIO_Init+0xf0>)
 8001028:	f017 fcae 	bl	8018988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 800102c:	2302      	movs	r3, #2
 800102e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001034:	2301      	movs	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0xf0>)
 800103e:	f017 fca3 	bl	8018988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2006      	movs	r0, #6
 8001048:	f017 f937 	bl	80182ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800104c:	2006      	movs	r0, #6
 800104e:	f017 f94e 	bl	80182ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200a      	movs	r0, #10
 8001058:	f017 f92f 	bl	80182ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800105c:	200a      	movs	r0, #10
 800105e:	f017 f946 	bl	80182ee <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800
 8001074:	48000c00 	.word	0x48000c00

08001078 <LL_AHB2_GRP1_EnableClock>:
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001084:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f2:	4013      	ands	r3, r2
 80010f4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_I2C3_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <MX_I2C3_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_I2C3_Init+0x74>)
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <MX_I2C3_Init+0x7c>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_I2C3_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_I2C3_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_I2C3_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_I2C3_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C3_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C3_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C3_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <MX_I2C3_Init+0x74>)
 8001140:	f017 fed2 	bl	8018ee8 <HAL_I2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 f9cd 	bl	80014e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <MX_I2C3_Init+0x74>)
 8001152:	f018 fe93 	bl	8019e7c <HAL_I2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 f9c4 	bl	80014e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_I2C3_Init+0x74>)
 8001164:	f018 fed5 	bl	8019f12 <HAL_I2CEx_ConfigDigitalFilter>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 f9bb 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000284 	.word	0x20000284
 800117c:	40005c00 	.word	0x40005c00
 8001180:	00707cbb 	.word	0x00707cbb

08001184 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09c      	sub	sp, #112	; 0x70
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2250      	movs	r2, #80	; 0x50
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f01e f9a1 	bl	801f4ec <memset>
  if(i2cHandle->Instance==I2C3)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_I2C_MspInit+0xb0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d13a      	bne.n	800122a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011b4:	2308      	movs	r3, #8
 80011b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011b8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4618      	mov	r0, r3
 80011c4:	f01a fb48 	bl	801b858 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011ce:	f000 f98b 	bl	80014e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff ff50 	bl	8001078 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff ff4d 	bl	8001078 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e2:	2312      	movs	r3, #18
 80011e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ee:	2304      	movs	r3, #4
 80011f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f017 fbc4 	bl	8018988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001204:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001206:	2312      	movs	r3, #18
 8001208:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001212:	2304      	movs	r3, #4
 8001214:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800121a:	4619      	mov	r1, r3
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <HAL_I2C_MspInit+0xb4>)
 800121e:	f017 fbb3 	bl	8018988 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001222:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001226:	f7ff ff40 	bl	80010aa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	; 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005c00 	.word	0x40005c00
 8001238:	48000400 	.word	0x48000400

0800123c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_I2C_MspDeInit+0x38>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10d      	bne.n	800126a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800124e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001252:	f7ff ff43 	bl	80010dc <LL_APB1_GRP1_DisableClock>

    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125c:	f017 fd04 	bl	8018c68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <HAL_I2C_MspDeInit+0x3c>)
 8001266:	f017 fcff 	bl	8018c68 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40005c00 	.word	0x40005c00
 8001278:	48000400 	.word	0x48000400

0800127c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001284:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001288:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001294:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001298:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800129c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012a4:	e000      	b.n	80012a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f9      	beq.n	80012a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	f023 0218 	bic.w	r2, r3, #24
 80012de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f016 fe59 	bl	8017fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 f81b 	bl	8001338 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001302:	f000 f88f 	bl	8001424 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f7ff fe3d 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f7ff fe10 	bl	8000f2e <MX_DMA_Init>
  MX_USB_PCD_Init();
 800130e:	f002 fce7 	bl	8003ce0 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8001312:	f002 fbdd 	bl	8003ad0 <MX_LPUART1_UART_Init>
  MX_TIM17_Init();
 8001316:	f002 fb6d 	bl	80039f4 <MX_TIM17_Init>
  MX_I2C3_Init();
 800131a:	f7ff fef3 	bl	8001104 <MX_I2C3_Init>
  MX_TOF_Init();
 800131e:	f01d fcf3 	bl	801ed08 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */

  IR_Init();
 8001322:	f01d facb 	bl	801e8bc <IR_Init>
  wifi_init();
 8001326:	f01c fb19 	bl	801d95c <wifi_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 800132a:	f01d fcf3 	bl	801ed14 <MX_TOF_Process>
    /* USER CODE BEGIN 3 */
	  IR_Process();
 800132e:	f01d faf3 	bl	801e918 <IR_Process>
	 wifi_process();
 8001332:	f01c fb3f 	bl	801d9b4 <wifi_process>
  MX_TOF_Process();
 8001336:	e7f8      	b.n	800132a <main+0x34>

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b09a      	sub	sp, #104	; 0x68
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2248      	movs	r2, #72	; 0x48
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01e f8d0 	bl	801f4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f023 0303 	bic.w	r3, r3, #3
 8001378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001382:	f018 ff15 	bl	801a1b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff9f 	bl	80012ca <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <SystemClock_Config+0xe8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <SystemClock_Config+0xe8>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <SystemClock_Config+0xe8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80013a8:	2327      	movs	r3, #39	; 0x27
 80013aa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013b2:	2301      	movs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013c8:	2360      	movs	r3, #96	; 0x60
 80013ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4618      	mov	r0, r3
 80013d6:	f019 fa7f 	bl	801a8d8 <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013e0:	f000 f882 	bl	80014e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80013e4:	236f      	movs	r3, #111	; 0x6f
 80013e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f019 fddb 	bl	801afc0 <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001410:	f000 f86a 	bl	80014e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001414:	f01a fb96 	bl	801bb44 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001418:	bf00      	nop
 800141a:	3768      	adds	r7, #104	; 0x68
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58000400 	.word	0x58000400

08001424 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142a:	463b      	mov	r3, r7
 800142c:	2250      	movs	r2, #80	; 0x50
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f01e f85b 	bl	801f4ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800143c:	2300      	movs	r3, #0
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001440:	2300      	movs	r3, #0
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4618      	mov	r0, r3
 8001448:	f01a fa06 	bl	801b858 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001452:	f000 f849 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001456:	bf00      	nop
 8001458:	3750      	adds	r7, #80	; 0x50
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	printf("CALLBACK LPUART\n");
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <HAL_UART_RxCpltCallback+0x18>)
 800146a:	f01e fe2d 	bl	80200c8 <puts>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	080220d0 	.word	0x080220d0

0800147c <_write>:

int _write(int file, char *ptr, int len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e009      	b.n	80014a2 <_write+0x26>
	{
	//__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fef0 	bl	800127c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbf1      	blt.n	800148e <_write+0x12>
	}
	return len;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d005      	beq.n	80014d0 <HAL_GPIO_EXTI_Callback+0x1c>
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d107      	bne.n	80014d8 <HAL_GPIO_EXTI_Callback+0x24>
	{
	case B1_Pin:
		button_pushed = B1;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	801a      	strh	r2, [r3, #0]
		break;
 80014ce:	e003      	b.n	80014d8 <HAL_GPIO_EXTI_Callback+0x24>
	case B2_Pin:
		button_pushed = B2;
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	801a      	strh	r2, [r3, #0]
		break;
 80014d6:	bf00      	nop
	}
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	20008978 	.word	0x20008978

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <serialize_int>:

static char *parson_float_format = NULL;

// +BCH
int serialize_int(double num, char *buf)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80014fe:	6078      	str	r0, [r7, #4]
	if(buf == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <serialize_int+0x18>
		return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e00a      	b.n	8001522 <serialize_int+0x2e>

	return sprintf(buf,"%d",(int)num);
 800150c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001510:	f7ff fafa 	bl	8000b08 <__aeabi_d2iz>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4904      	ldr	r1, [pc, #16]	; (800152c <serialize_int+0x38>)
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f01e fdec 	bl	80200f8 <siprintf>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	080220e0 	.word	0x080220e0

08001530 <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <parson_strndup+0x40>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	3201      	adds	r2, #1
 8001542:	4610      	mov	r0, r2
 8001544:	4798      	blx	r3
 8001546:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <parson_strndup+0x22>
        return NULL;
 800154e:	2300      	movs	r3, #0
 8001550:	e00a      	b.n	8001568 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f01d ff9b 	bl	801f49c <memcpy>
    return output_string;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000008 	.word	0x20000008

08001574 <parson_strdup>:

static char * parson_strdup(const char *string) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7fe fdff 	bl	8000180 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffd2 	bl	8001530 <parson_strndup>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <hash_string>:
        }
    }
    return PARSON_TRUE;
}

static unsigned long hash_string(const char *string, size_t n) {
 8001596:	b480      	push	{r7}
 8001598:	b087      	sub	sp, #28
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 80015a0:	f241 5305 	movw	r3, #5381	; 0x1505
 80015a4:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	e011      	b.n	80015d4 <hash_string+0x3e>
        c = string[i];
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	441a      	add	r2, r3
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	3301      	adds	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3e9      	bcc.n	80015b0 <hash_string+0x1a>
 80015dc:	e000      	b.n	80015e0 <hash_string+0x4a>
            break;
 80015de:	bf00      	nop
    }
    return hash;
 80015e0:	697b      	ldr	r3, [r7, #20]
#endif
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <json_object_make+0x50>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2024      	movs	r0, #36	; 0x24
 8001604:	4798      	blx	r3
 8001606:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <json_object_make+0x22>
        return NULL;
 800160e:	2300      	movs	r3, #0
 8001610:	e011      	b.n	8001636 <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8001618:	2100      	movs	r1, #0
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f000 f814 	bl	8001648 <json_object_init>
 8001620:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <json_object_make+0x44>
        parson_free(new_obj);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <json_object_make+0x54>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	4798      	blx	r3
        return NULL;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <json_object_make+0x46>
    }
    return new_obj;
 8001634:	68bb      	ldr	r3, [r7, #8]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	2000000c 	.word	0x2000000c

08001648 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80017a8 <json_object_init+0x160>
 800168e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001696:	ee17 2a90 	vmov	r2, s15
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <json_object_init+0x60>
        return JSONSuccess;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e07b      	b.n	80017a0 <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 80016a8:	4b40      	ldr	r3, [pc, #256]	; (80017ac <json_object_init+0x164>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6a12      	ldr	r2, [r2, #32]
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4610      	mov	r0, r2
 80016b4:	4798      	blx	r3
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <json_object_init+0x164>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	69d2      	ldr	r2, [r2, #28]
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4610      	mov	r0, r2
 80016c8:	4798      	blx	r3
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <json_object_init+0x164>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	69d2      	ldr	r2, [r2, #28]
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4610      	mov	r0, r2
 80016dc:	4798      	blx	r3
 80016de:	4602      	mov	r2, r0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <json_object_init+0x164>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	69d2      	ldr	r2, [r2, #28]
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4610      	mov	r0, r2
 80016f0:	4798      	blx	r3
 80016f2:	4602      	mov	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <json_object_init+0x164>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	69d2      	ldr	r2, [r2, #28]
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	4610      	mov	r0, r2
 8001704:	4798      	blx	r3
 8001706:	4602      	mov	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d024      	beq.n	800175e <json_object_init+0x116>
        || object->names == NULL
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <json_object_init+0x116>
        || object->values == NULL
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01c      	beq.n	800175e <json_object_init+0x116>
        || object->cell_ixs == NULL
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d018      	beq.n	800175e <json_object_init+0x116>
        || object->hashes == NULL) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d014      	beq.n	800175e <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e00a      	b.n	8001750 <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3ef      	bcc.n	800173a <json_object_init+0xf2>
    }
    return JSONSuccess;
 800175a:	2300      	movs	r3, #0
 800175c:	e020      	b.n	80017a0 <json_object_init+0x158>
        goto error;
 800175e:	bf00      	nop
error:
    parson_free(object->cells);
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <json_object_init+0x168>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6852      	ldr	r2, [r2, #4]
 8001768:	4610      	mov	r0, r2
 800176a:	4798      	blx	r3
    parson_free(object->names);
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <json_object_init+0x168>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	68d2      	ldr	r2, [r2, #12]
 8001774:	4610      	mov	r0, r2
 8001776:	4798      	blx	r3
    parson_free(object->values);
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <json_object_init+0x168>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6912      	ldr	r2, [r2, #16]
 8001780:	4610      	mov	r0, r2
 8001782:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <json_object_init+0x168>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6952      	ldr	r2, [r2, #20]
 800178c:	4610      	mov	r0, r2
 800178e:	4798      	blx	r3
    parson_free(object->hashes);
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <json_object_init+0x168>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6892      	ldr	r2, [r2, #8]
 8001798:	4610      	mov	r0, r2
 800179a:	4798      	blx	r3
    return JSONFailure;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	3f333333 	.word	0x3f333333
 80017ac:	20000008 	.word	0x20000008
 80017b0:	2000000c 	.word	0x2000000c

080017b4 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e01b      	b.n	8001802 <json_object_deinit+0x4e>
        if (free_keys) {
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <json_object_deinit+0xcc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	68d1      	ldr	r1, [r2, #12]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	440a      	add	r2, r1
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	4610      	mov	r0, r2
 80017e2:	4798      	blx	r3
        }
        if (free_values) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 fb92 	bl	8002f20 <json_value_free>
    for (i = 0; i < object->count; i++) {
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	d3de      	bcc.n	80017ca <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <json_object_deinit+0xcc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	6852      	ldr	r2, [r2, #4]
 8001826:	4610      	mov	r0, r2
 8001828:	4798      	blx	r3
    parson_free(object->names);
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <json_object_deinit+0xcc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	68d2      	ldr	r2, [r2, #12]
 8001832:	4610      	mov	r0, r2
 8001834:	4798      	blx	r3
    parson_free(object->values);
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <json_object_deinit+0xcc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	6912      	ldr	r2, [r2, #16]
 800183e:	4610      	mov	r0, r2
 8001840:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <json_object_deinit+0xcc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	6952      	ldr	r2, [r2, #20]
 800184a:	4610      	mov	r0, r2
 800184c:	4798      	blx	r3
    parson_free(object->hashes);
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <json_object_deinit+0xcc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6892      	ldr	r2, [r2, #8]
 8001856:	4610      	mov	r0, r2
 8001858:	4798      	blx	r3

    object->cells = NULL;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000000c 	.word	0x2000000c

08001884 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b092      	sub	sp, #72	; 0x48
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 800188c:	2300      	movs	r3, #0
 800188e:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 8001894:	2300      	movs	r3, #0
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	bf38      	it	cc
 80018a6:	2310      	movcc	r3, #16
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fec9 	bl	8001648 <json_object_init>
 80018b6:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e046      	b.n	8001952 <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f001 fa52 	bl	8002d6e <json_object_get_wrapping_value>
 80018ca:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 80018cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ce:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
 80018d4:	e028      	b.n	8001928 <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f897 	bl	8001a2e <json_object_add>
 8001900:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 8001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001904:	2b00      	cmp	r3, #0
 8001906:	d009      	beq.n	800191c <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff4f 	bl	80017b4 <json_object_deinit>
            return JSONFailure;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	e01a      	b.n	8001952 <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 800191c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001920:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 8001922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001924:	3301      	adds	r3, #1
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800192e:	429a      	cmp	r2, r3
 8001930:	d3d1      	bcc.n	80018d6 <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff3c 	bl	80017b4 <json_object_deinit>
    *object = new_object;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	461d      	mov	r5, r3
 8001940:	f107 040c 	add.w	r4, r7, #12
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3748      	adds	r7, #72	; 0x48
 8001956:	46bd      	mov	sp, r7
 8001958:	bdb0      	pop	{r4, r5, r7, pc}

0800195a <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b08c      	sub	sp, #48	; 0x30
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	3b01      	subs	r3, #1
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	4013      	ands	r3, r2
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 800198c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001996:	e03f      	b.n	8001a18 <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 8001998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	441a      	add	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d101      	bne.n	80019c2 <json_object_get_cell_ix+0x68>
            return ix;
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	e031      	b.n	8001a26 <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d11b      	bne.n	8001a10 <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 80019e6:	69b8      	ldr	r0, [r7, #24]
 80019e8:	f7fe fbca 	bl	8000180 <strlen>
 80019ec:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d10d      	bne.n	8001a12 <json_object_get_cell_ix+0xb8>
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f01e fbdf 	bl	80201be <strncmp>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
            return ix;
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	e00a      	b.n	8001a26 <json_object_get_cell_ix+0xcc>
            continue;
 8001a10:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	3301      	adds	r3, #1
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3ba      	bcc.n	8001998 <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3730      	adds	r7, #48	; 0x30
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b08a      	sub	sp, #40	; 0x28
 8001a32:	af02      	add	r7, sp, #8
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <json_object_add+0x30>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <json_object_add+0x30>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <json_object_add+0x36>
        return JSONFailure;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e06e      	b.n	8001b42 <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f7fe fb8b 	bl	8000180 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68b8      	ldr	r0, [r7, #8]
 8001a70:	f7ff fd91 	bl	8001596 <hash_string>
 8001a74:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8001a7a:	68b8      	ldr	r0, [r7, #8]
 8001a7c:	f7fe fb80 	bl	8000180 <strlen>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff ff64 	bl	800195a <json_object_get_cell_ix>
 8001a92:	61f8      	str	r0, [r7, #28]
    if (found) {
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <json_object_add+0x72>
        return JSONFailure;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e050      	b.n	8001b42 <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d316      	bcc.n	8001ada <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff fee9 	bl	8001884 <json_object_grow_and_rehash>
 8001ab2:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <json_object_add+0x92>
            return JSONFailure;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e040      	b.n	8001b42 <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8001ac0:	68b8      	ldr	r0, [r7, #8]
 8001ac2:	f7fe fb5d 	bl	8000180 <strlen>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff ff41 	bl	800195a <json_object_get_cell_ix>
 8001ad8:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	6992      	ldr	r2, [r2, #24]
 8001af8:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	601a      	str	r2, [r3, #0]
    object->count++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f001 f91a 	bl	8002d6e <json_object_get_wrapping_value>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2101      	movs	r1, #1
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fe2b 	bl	80017b4 <json_object_deinit>
    parson_free(object);
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <json_object_free+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <json_array_free>:
    array->items = new_items;
    array->capacity = new_capacity;
    return JSONSuccess;
}

static void json_array_free(JSON_Array *array) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e00b      	b.n	8001b9a <json_array_free+0x26>
        json_value_free(array->items[i]);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 f9c6 	bl	8002f20 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d3ee      	bcc.n	8001b82 <json_array_free+0xe>
    }
    parson_free(array->items);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <json_array_free+0x4c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6852      	ldr	r2, [r2, #4]
 8001bac:	4610      	mov	r0, r2
 8001bae:	4798      	blx	r3
    parson_free(array);
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <json_array_free+0x4c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <json_serialize_to_buffer_r>:
                                    APPEND_STRING(PARSON_INDENT_STR);\
                                }\
                            } while (0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b098      	sub	sp, #96	; 0x60
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Value *temp_value = NULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Array *array = NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Object *object = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t i = 0, count = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	657b      	str	r3, [r7, #84]	; 0x54
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    double num = 0.0;
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8001c00:	2300      	movs	r3, #0
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t len = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f001 f8ed 	bl	8002de8 <json_value_get_type>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	3301      	adds	r3, #1
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	f200 8355 	bhi.w	80022c2 <json_serialize_to_buffer_r+0x6fe>
 8001c18:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <json_serialize_to_buffer_r+0x5c>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	080022bd 	.word	0x080022bd
 8001c24:	080022c3 	.word	0x080022c3
 8001c28:	08002289 	.word	0x08002289
 8001c2c:	0800214f 	.word	0x0800214f
 8001c30:	0800220f 	.word	0x0800220f
 8001c34:	08001e6d 	.word	0x08001e6d
 8001c38:	08001c41 	.word	0x08001c41
 8001c3c:	0800219d 	.word	0x0800219d
        case JSONArray:
            array = json_value_get_array(value);
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f001 f8f5 	bl	8002e30 <json_value_get_array>
 8001c46:	62f8      	str	r0, [r7, #44]	; 0x2c
            count = json_array_get_count(array);
 8001c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c4a:	f001 f8bc 	bl	8002dc6 <json_array_get_count>
 8001c4e:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("[");
 8001c50:	2301      	movs	r3, #1
 8001c52:	653b      	str	r3, [r7, #80]	; 0x50
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00e      	beq.n	8001c78 <json_serialize_to_buffer_r+0xb4>
 8001c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	497e      	ldr	r1, [pc, #504]	; (8001e58 <json_serialize_to_buffer_r+0x294>)
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f01d fc1b 	bl	801f49c <memcpy>
 8001c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	4413      	add	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7c:	4413      	add	r3, r2
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01a      	beq.n	8001cbc <json_serialize_to_buffer_r+0xf8>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d017      	beq.n	8001cbc <json_serialize_to_buffer_r+0xf8>
                APPEND_STRING("\n");
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00e      	beq.n	8001cb4 <json_serialize_to_buffer_r+0xf0>
 8001c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4970      	ldr	r1, [pc, #448]	; (8001e5c <json_serialize_to_buffer_r+0x298>)
 8001c9c:	68b8      	ldr	r0, [r7, #8]
 8001c9e:	f01d fbfd 	bl	801f49c <memcpy>
 8001ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb8:	4413      	add	r3, r2
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc0:	e081      	b.n	8001dc6 <json_serialize_to_buffer_r+0x202>
                if (is_pretty) {
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d023      	beq.n	8001d10 <json_serialize_to_buffer_r+0x14c>
                    APPEND_INDENT(level+1);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ccc:	2300      	movs	r3, #0
 8001cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cd0:	e01a      	b.n	8001d08 <json_serialize_to_buffer_r+0x144>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	653b      	str	r3, [r7, #80]	; 0x50
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00e      	beq.n	8001cfa <json_serialize_to_buffer_r+0x136>
 8001cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cde:	461a      	mov	r2, r3
 8001ce0:	495f      	ldr	r1, [pc, #380]	; (8001e60 <json_serialize_to_buffer_r+0x29c>)
 8001ce2:	68b8      	ldr	r0, [r7, #8]
 8001ce4:	f01d fbda 	bl	801f49c <memcpy>
 8001ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cfe:	4413      	add	r3, r2
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d04:	3301      	adds	r3, #1
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dae0      	bge.n	8001cd2 <json_serialize_to_buffer_r+0x10e>
                }
                temp_value = json_array_get_value(array, i);
 8001d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d14:	f001 f83c 	bl	8002d90 <json_array_get_value>
 8001d18:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d28:	f7ff ff4c 	bl	8001bc4 <json_serialize_to_buffer_r>
 8001d2c:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8001d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da02      	bge.n	8001d3a <json_serialize_to_buffer_r+0x176>
                    return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e2c5      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <json_serialize_to_buffer_r+0x184>
                    buf += written;
 8001d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8001d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4c:	4413      	add	r3, r2
 8001d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d217      	bcs.n	8001d8a <json_serialize_to_buffer_r+0x1c6>
                    APPEND_STRING(",");
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00e      	beq.n	8001d82 <json_serialize_to_buffer_r+0x1be>
 8001d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d66:	461a      	mov	r2, r3
 8001d68:	493e      	ldr	r1, [pc, #248]	; (8001e64 <json_serialize_to_buffer_r+0x2a0>)
 8001d6a:	68b8      	ldr	r0, [r7, #8]
 8001d6c:	f01d fb96 	bl	801f49c <memcpy>
 8001d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	4413      	add	r3, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d86:	4413      	add	r3, r2
 8001d88:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d017      	beq.n	8001dc0 <json_serialize_to_buffer_r+0x1fc>
                    APPEND_STRING("\n");
 8001d90:	2301      	movs	r3, #1
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00e      	beq.n	8001db8 <json_serialize_to_buffer_r+0x1f4>
 8001d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	492f      	ldr	r1, [pc, #188]	; (8001e5c <json_serialize_to_buffer_r+0x298>)
 8001da0:	68b8      	ldr	r0, [r7, #8]
 8001da2:	f01d fb7b 	bl	801f49c <memcpy>
 8001da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	4413      	add	r3, r2
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4413      	add	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dbc:	4413      	add	r3, r2
 8001dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8001dc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	f4ff af79 	bcc.w	8001cc2 <json_serialize_to_buffer_r+0xfe>
                }
            }
            if (count > 0 && is_pretty) {
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d026      	beq.n	8001e24 <json_serialize_to_buffer_r+0x260>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d023      	beq.n	8001e24 <json_serialize_to_buffer_r+0x260>
                APPEND_INDENT(level);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
 8001de4:	e01a      	b.n	8001e1c <json_serialize_to_buffer_r+0x258>
 8001de6:	2304      	movs	r3, #4
 8001de8:	653b      	str	r3, [r7, #80]	; 0x50
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <json_serialize_to_buffer_r+0x24a>
 8001df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df2:	461a      	mov	r2, r3
 8001df4:	491a      	ldr	r1, [pc, #104]	; (8001e60 <json_serialize_to_buffer_r+0x29c>)
 8001df6:	68b8      	ldr	r0, [r7, #8]
 8001df8:	f01d fb50 	bl	801f49c <memcpy>
 8001dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	4413      	add	r3, r2
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e12:	4413      	add	r3, r2
 8001e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e18:	3301      	adds	r3, #1
 8001e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbe0      	blt.n	8001de6 <json_serialize_to_buffer_r+0x222>
            }
            APPEND_STRING("]");
 8001e24:	2301      	movs	r3, #1
 8001e26:	653b      	str	r3, [r7, #80]	; 0x50
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00e      	beq.n	8001e4c <json_serialize_to_buffer_r+0x288>
 8001e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e30:	461a      	mov	r2, r3
 8001e32:	490d      	ldr	r1, [pc, #52]	; (8001e68 <json_serialize_to_buffer_r+0x2a4>)
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f01d fb31 	bl	801f49c <memcpy>
 8001e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	4413      	add	r3, r2
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e50:	4413      	add	r3, r2
 8001e52:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8001e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e56:	e236      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
 8001e58:	08022108 	.word	0x08022108
 8001e5c:	0802210c 	.word	0x0802210c
 8001e60:	08022110 	.word	0x08022110
 8001e64:	08022118 	.word	0x08022118
 8001e68:	0802211c 	.word	0x0802211c
        case JSONObject:
            object = json_value_get_object(value);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 ffcd 	bl	8002e0c <json_value_get_object>
 8001e72:	62b8      	str	r0, [r7, #40]	; 0x28
            count  = json_object_get_count(object);
 8001e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e76:	f000 ff33 	bl	8002ce0 <json_object_get_count>
 8001e7a:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("{");
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00e      	beq.n	8001ea4 <json_serialize_to_buffer_r+0x2e0>
 8001e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e88:	461a      	mov	r2, r3
 8001e8a:	498e      	ldr	r1, [pc, #568]	; (80020c4 <json_serialize_to_buffer_r+0x500>)
 8001e8c:	68b8      	ldr	r0, [r7, #8]
 8001e8e:	f01d fb05 	bl	801f49c <memcpy>
 8001e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	4413      	add	r3, r2
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea8:	4413      	add	r3, r2
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d01a      	beq.n	8001ee8 <json_serialize_to_buffer_r+0x324>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <json_serialize_to_buffer_r+0x324>
                APPEND_STRING("\n");
 8001eb8:	2301      	movs	r3, #1
 8001eba:	653b      	str	r3, [r7, #80]	; 0x50
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00e      	beq.n	8001ee0 <json_serialize_to_buffer_r+0x31c>
 8001ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4980      	ldr	r1, [pc, #512]	; (80020c8 <json_serialize_to_buffer_r+0x504>)
 8001ec8:	68b8      	ldr	r0, [r7, #8]
 8001eca:	f01d fae7 	bl	801f49c <memcpy>
 8001ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4413      	add	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee4:	4413      	add	r3, r2
 8001ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8001ee8:	2300      	movs	r3, #0
 8001eea:	657b      	str	r3, [r7, #84]	; 0x54
 8001eec:	e0da      	b.n	80020a4 <json_serialize_to_buffer_r+0x4e0>
                key = json_object_get_name(object, i);
 8001eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ef2:	f000 ff06 	bl	8002d02 <json_object_get_name>
 8001ef6:	63b8      	str	r0, [r7, #56]	; 0x38
                if (key == NULL) {
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <json_serialize_to_buffer_r+0x340>
                    return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e1e0      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
                }
                if (is_pretty) {
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d023      	beq.n	8001f52 <json_serialize_to_buffer_r+0x38e>
                    APPEND_INDENT(level+1);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f0e:	2300      	movs	r3, #0
 8001f10:	643b      	str	r3, [r7, #64]	; 0x40
 8001f12:	e01a      	b.n	8001f4a <json_serialize_to_buffer_r+0x386>
 8001f14:	2304      	movs	r3, #4
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00e      	beq.n	8001f3c <json_serialize_to_buffer_r+0x378>
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f20:	461a      	mov	r2, r3
 8001f22:	496a      	ldr	r1, [pc, #424]	; (80020cc <json_serialize_to_buffer_r+0x508>)
 8001f24:	68b8      	ldr	r0, [r7, #8]
 8001f26:	f01d fab9 	bl	801f49c <memcpy>
 8001f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	4413      	add	r3, r2
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f40:	4413      	add	r3, r2
 8001f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f46:	3301      	adds	r3, #1
 8001f48:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dae0      	bge.n	8001f14 <json_serialize_to_buffer_r+0x350>
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 8001f52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f54:	f7fe f914 	bl	8000180 <strlen>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f60:	f000 f9c6 	bl	80022f0 <json_serialize_string>
 8001f64:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8001f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da02      	bge.n	8001f72 <json_serialize_to_buffer_r+0x3ae>
                    return -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	e1a9      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <json_serialize_to_buffer_r+0x3bc>
                    buf += written;
 8001f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8001f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f84:	4413      	add	r3, r2
 8001f86:	64fb      	str	r3, [r7, #76]	; 0x4c
                APPEND_STRING(":");
 8001f88:	2301      	movs	r3, #1
 8001f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00e      	beq.n	8001fb0 <json_serialize_to_buffer_r+0x3ec>
 8001f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f94:	461a      	mov	r2, r3
 8001f96:	494e      	ldr	r1, [pc, #312]	; (80020d0 <json_serialize_to_buffer_r+0x50c>)
 8001f98:	68b8      	ldr	r0, [r7, #8]
 8001f9a:	f01d fa7f 	bl	801f49c <memcpy>
 8001f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb4:	4413      	add	r3, r2
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (is_pretty) {
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d017      	beq.n	8001fee <json_serialize_to_buffer_r+0x42a>
                    APPEND_STRING(" ");
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00e      	beq.n	8001fe6 <json_serialize_to_buffer_r+0x422>
 8001fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4941      	ldr	r1, [pc, #260]	; (80020d4 <json_serialize_to_buffer_r+0x510>)
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f01d fa64 	bl	801f49c <memcpy>
 8001fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4413      	add	r3, r2
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fea:	4413      	add	r3, r2
 8001fec:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                temp_value = json_object_get_value_at(object, i);
 8001fee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff2:	f000 fea1 	bl	8002d38 <json_object_get_value_at>
 8001ff6:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002006:	f7ff fddd 	bl	8001bc4 <json_serialize_to_buffer_r>
 800200a:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 800200c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	da02      	bge.n	8002018 <json_serialize_to_buffer_r+0x454>
                    return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e156      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <json_serialize_to_buffer_r+0x462>
                    buf += written;
 800201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	4413      	add	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8002026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800202a:	4413      	add	r3, r2
 800202c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	3b01      	subs	r3, #1
 8002032:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002034:	429a      	cmp	r2, r3
 8002036:	d217      	bcs.n	8002068 <json_serialize_to_buffer_r+0x4a4>
                    APPEND_STRING(",");
 8002038:	2301      	movs	r3, #1
 800203a:	653b      	str	r3, [r7, #80]	; 0x50
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00e      	beq.n	8002060 <json_serialize_to_buffer_r+0x49c>
 8002042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002044:	461a      	mov	r2, r3
 8002046:	4924      	ldr	r1, [pc, #144]	; (80020d8 <json_serialize_to_buffer_r+0x514>)
 8002048:	68b8      	ldr	r0, [r7, #8]
 800204a:	f01d fa27 	bl	801f49c <memcpy>
 800204e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	4413      	add	r3, r2
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4413      	add	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002064:	4413      	add	r3, r2
 8002066:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d017      	beq.n	800209e <json_serialize_to_buffer_r+0x4da>
                    APPEND_STRING("\n");
 800206e:	2301      	movs	r3, #1
 8002070:	653b      	str	r3, [r7, #80]	; 0x50
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <json_serialize_to_buffer_r+0x4d2>
 8002078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207a:	461a      	mov	r2, r3
 800207c:	4912      	ldr	r1, [pc, #72]	; (80020c8 <json_serialize_to_buffer_r+0x504>)
 800207e:	68b8      	ldr	r0, [r7, #8]
 8002080:	f01d fa0c 	bl	801f49c <memcpy>
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4413      	add	r3, r2
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	4413      	add	r3, r2
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209a:	4413      	add	r3, r2
 800209c:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 800209e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a0:	3301      	adds	r3, #1
 80020a2:	657b      	str	r3, [r7, #84]	; 0x54
 80020a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f4ff af20 	bcc.w	8001eee <json_serialize_to_buffer_r+0x32a>
                }
            }
            if (count > 0 && is_pretty) {
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d032      	beq.n	800211a <json_serialize_to_buffer_r+0x556>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02f      	beq.n	800211a <json_serialize_to_buffer_r+0x556>
                APPEND_INDENT(level);
 80020ba:	2300      	movs	r3, #0
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020be:	2300      	movs	r3, #0
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c2:	e026      	b.n	8002112 <json_serialize_to_buffer_r+0x54e>
 80020c4:	08022120 	.word	0x08022120
 80020c8:	0802210c 	.word	0x0802210c
 80020cc:	08022110 	.word	0x08022110
 80020d0:	08022124 	.word	0x08022124
 80020d4:	08022128 	.word	0x08022128
 80020d8:	08022118 	.word	0x08022118
 80020dc:	2304      	movs	r3, #4
 80020de:	653b      	str	r3, [r7, #80]	; 0x50
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00e      	beq.n	8002104 <json_serialize_to_buffer_r+0x540>
 80020e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e8:	461a      	mov	r2, r3
 80020ea:	4979      	ldr	r1, [pc, #484]	; (80022d0 <json_serialize_to_buffer_r+0x70c>)
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f01d f9d5 	bl	801f49c <memcpy>
 80020f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	4413      	add	r3, r2
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4413      	add	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002108:	4413      	add	r3, r2
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	3301      	adds	r3, #1
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	dbe0      	blt.n	80020dc <json_serialize_to_buffer_r+0x518>
            }
            APPEND_STRING("}");
 800211a:	2301      	movs	r3, #1
 800211c:	653b      	str	r3, [r7, #80]	; 0x50
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00e      	beq.n	8002142 <json_serialize_to_buffer_r+0x57e>
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	461a      	mov	r2, r3
 8002128:	496a      	ldr	r1, [pc, #424]	; (80022d4 <json_serialize_to_buffer_r+0x710>)
 800212a:	68b8      	ldr	r0, [r7, #8]
 800212c:	f01d f9b6 	bl	801f49c <memcpy>
 8002130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4413      	add	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4413      	add	r3, r2
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002146:	4413      	add	r3, r2
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 800214a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214c:	e0bb      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
        case JSONString:
            string = json_value_get_string(value);
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fe92 	bl	8002e78 <json_value_get_string>
 8002154:	6378      	str	r0, [r7, #52]	; 0x34
            if (string == NULL) {
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <json_serialize_to_buffer_r+0x59e>
                return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	e0b1      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
            }
            len = json_value_get_string_len(value);
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fe9b 	bl	8002e9e <json_value_get_string_len>
 8002168:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002170:	f000 f8be 	bl	80022f0 <json_serialize_string>
 8002174:	6538      	str	r0, [r7, #80]	; 0x50
            if (written < 0) {
 8002176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002178:	2b00      	cmp	r3, #0
 800217a:	da02      	bge.n	8002182 <json_serialize_to_buffer_r+0x5be>
                return -1;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	e0a1      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <json_serialize_to_buffer_r+0x5cc>
                buf += written;
 8002188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8002190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002194:	4413      	add	r3, r2
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8002198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219a:	e094      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 feac 	bl	8002efa <json_value_get_boolean>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d018      	beq.n	80021da <json_serialize_to_buffer_r+0x616>
                APPEND_STRING("true");
 80021a8:	2304      	movs	r3, #4
 80021aa:	653b      	str	r3, [r7, #80]	; 0x50
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00e      	beq.n	80021d0 <json_serialize_to_buffer_r+0x60c>
 80021b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b4:	461a      	mov	r2, r3
 80021b6:	4948      	ldr	r1, [pc, #288]	; (80022d8 <json_serialize_to_buffer_r+0x714>)
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f01d f96f 	bl	801f49c <memcpy>
 80021be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	4413      	add	r3, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d4:	4413      	add	r3, r2
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d8:	e017      	b.n	800220a <json_serialize_to_buffer_r+0x646>
            } else {
                APPEND_STRING("false");
 80021da:	2305      	movs	r3, #5
 80021dc:	653b      	str	r3, [r7, #80]	; 0x50
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <json_serialize_to_buffer_r+0x63e>
 80021e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e6:	461a      	mov	r2, r3
 80021e8:	493c      	ldr	r1, [pc, #240]	; (80022dc <json_serialize_to_buffer_r+0x718>)
 80021ea:	68b8      	ldr	r0, [r7, #8]
 80021ec:	f01d f956 	bl	801f49c <memcpy>
 80021f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	4413      	add	r3, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	4413      	add	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002206:	4413      	add	r3, r2
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            return written_total;
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220c:	e05b      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
        case JSONNumber:
            num = json_value_get_number(value);
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fe58 	bl	8002ec4 <json_value_get_number>
 8002214:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <json_serialize_to_buffer_r+0x65e>
                num_buf = buf;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	663b      	str	r3, [r7, #96]	; 0x60
            }
            if (parson_number_serialization_function) {
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <json_serialize_to_buffer_r+0x71c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <json_serialize_to_buffer_r+0x676>
                written = parson_number_serialization_function(num, num_buf);
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <json_serialize_to_buffer_r+0x71c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002230:	ed97 0b06 	vldr	d0, [r7, #24]
 8002234:	4798      	blx	r3
 8002236:	6538      	str	r0, [r7, #80]	; 0x50
 8002238:	e013      	b.n	8002262 <json_serialize_to_buffer_r+0x69e>
            } else if (parson_float_format) {
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <json_serialize_to_buffer_r+0x720>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <json_serialize_to_buffer_r+0x690>
                written = sprintf(num_buf, parson_float_format, num);
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <json_serialize_to_buffer_r+0x720>)
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800224c:	f01d ff54 	bl	80200f8 <siprintf>
 8002250:	6538      	str	r0, [r7, #80]	; 0x50
 8002252:	e006      	b.n	8002262 <json_serialize_to_buffer_r+0x69e>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 8002254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002258:	4923      	ldr	r1, [pc, #140]	; (80022e8 <json_serialize_to_buffer_r+0x724>)
 800225a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800225c:	f01d ff4c 	bl	80200f8 <siprintf>
 8002260:	6538      	str	r0, [r7, #80]	; 0x50
            }
            if (written < 0) {
 8002262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002264:	2b00      	cmp	r3, #0
 8002266:	da02      	bge.n	800226e <json_serialize_to_buffer_r+0x6aa>
                return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	e02b      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <json_serialize_to_buffer_r+0x6b8>
                buf += written;
 8002274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 800227c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800227e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002280:	4413      	add	r3, r2
 8002282:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8002284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002286:	e01e      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
        case JSONNull:
            APPEND_STRING("null");
 8002288:	2304      	movs	r3, #4
 800228a:	653b      	str	r3, [r7, #80]	; 0x50
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00e      	beq.n	80022b0 <json_serialize_to_buffer_r+0x6ec>
 8002292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002294:	461a      	mov	r2, r3
 8002296:	4915      	ldr	r1, [pc, #84]	; (80022ec <json_serialize_to_buffer_r+0x728>)
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f01d f8ff 	bl	801f49c <memcpy>
 800229e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	4413      	add	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b4:	4413      	add	r3, r2
 80022b6:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80022b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ba:	e004      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
        case JSONError:
            return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	e001      	b.n	80022c6 <json_serialize_to_buffer_r+0x702>
        default:
            return -1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3758      	adds	r7, #88	; 0x58
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	08022110 	.word	0x08022110
 80022d4:	0802212c 	.word	0x0802212c
 80022d8:	080220f0 	.word	0x080220f0
 80022dc:	080220f8 	.word	0x080220f8
 80022e0:	20000014 	.word	0x20000014
 80022e4:	200002f0 	.word	0x200002f0
 80022e8:	08022130 	.word	0x08022130
 80022ec:	08022100 	.word	0x08022100

080022f0 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 8002300:	2300      	movs	r3, #0
 8002302:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
    // +BCH
    //APPEND_STRING("\"");
    APPEND_STRING("\\\"");
 800230e:	2302      	movs	r3, #2
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00e      	beq.n	8002336 <json_serialize_string+0x46>
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	461a      	mov	r2, r3
 800231c:	49b8      	ldr	r1, [pc, #736]	; (8002600 <json_serialize_string+0x310>)
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f01d f8bc 	bl	801f49c <memcpy>
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	f000 bc9b 	b.w	8002c7c <json_serialize_string+0x98c>
        c = string[i];
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b5c      	cmp	r3, #92	; 0x5c
 8002354:	f200 8482 	bhi.w	8002c5c <json_serialize_string+0x96c>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <json_serialize_string+0x70>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	0800264b 	.word	0x0800264b
 8002364:	0800267d 	.word	0x0800267d
 8002368:	080026af 	.word	0x080026af
 800236c:	080026e1 	.word	0x080026e1
 8002370:	08002713 	.word	0x08002713
 8002374:	08002745 	.word	0x08002745
 8002378:	08002777 	.word	0x08002777
 800237c:	080027a9 	.word	0x080027a9
 8002380:	08002539 	.word	0x08002539
 8002384:	08002619 	.word	0x08002619
 8002388:	0800259d 	.word	0x0800259d
 800238c:	080027db 	.word	0x080027db
 8002390:	0800256b 	.word	0x0800256b
 8002394:	080025cf 	.word	0x080025cf
 8002398:	0800280d 	.word	0x0800280d
 800239c:	0800283f 	.word	0x0800283f
 80023a0:	080028a1 	.word	0x080028a1
 80023a4:	080028d3 	.word	0x080028d3
 80023a8:	08002905 	.word	0x08002905
 80023ac:	08002937 	.word	0x08002937
 80023b0:	08002969 	.word	0x08002969
 80023b4:	0800299b 	.word	0x0800299b
 80023b8:	080029cd 	.word	0x080029cd
 80023bc:	080029ff 	.word	0x080029ff
 80023c0:	08002a31 	.word	0x08002a31
 80023c4:	08002a63 	.word	0x08002a63
 80023c8:	08002a95 	.word	0x08002a95
 80023cc:	08002ac7 	.word	0x08002ac7
 80023d0:	08002b29 	.word	0x08002b29
 80023d4:	08002b5b 	.word	0x08002b5b
 80023d8:	08002b8d 	.word	0x08002b8d
 80023dc:	08002bbf 	.word	0x08002bbf
 80023e0:	08002c5d 	.word	0x08002c5d
 80023e4:	08002c5d 	.word	0x08002c5d
 80023e8:	080024d5 	.word	0x080024d5
 80023ec:	08002c5d 	.word	0x08002c5d
 80023f0:	08002c5d 	.word	0x08002c5d
 80023f4:	08002c5d 	.word	0x08002c5d
 80023f8:	08002c5d 	.word	0x08002c5d
 80023fc:	08002c5d 	.word	0x08002c5d
 8002400:	08002c5d 	.word	0x08002c5d
 8002404:	08002c5d 	.word	0x08002c5d
 8002408:	08002c5d 	.word	0x08002c5d
 800240c:	08002c5d 	.word	0x08002c5d
 8002410:	08002c5d 	.word	0x08002c5d
 8002414:	08002c5d 	.word	0x08002c5d
 8002418:	08002c5d 	.word	0x08002c5d
 800241c:	08002bf1 	.word	0x08002bf1
 8002420:	08002c5d 	.word	0x08002c5d
 8002424:	08002c5d 	.word	0x08002c5d
 8002428:	08002c5d 	.word	0x08002c5d
 800242c:	08002c5d 	.word	0x08002c5d
 8002430:	08002c5d 	.word	0x08002c5d
 8002434:	08002c5d 	.word	0x08002c5d
 8002438:	08002c5d 	.word	0x08002c5d
 800243c:	08002c5d 	.word	0x08002c5d
 8002440:	08002c5d 	.word	0x08002c5d
 8002444:	08002c5d 	.word	0x08002c5d
 8002448:	08002c5d 	.word	0x08002c5d
 800244c:	08002c5d 	.word	0x08002c5d
 8002450:	08002c5d 	.word	0x08002c5d
 8002454:	08002c5d 	.word	0x08002c5d
 8002458:	08002c5d 	.word	0x08002c5d
 800245c:	08002c5d 	.word	0x08002c5d
 8002460:	08002c5d 	.word	0x08002c5d
 8002464:	08002c5d 	.word	0x08002c5d
 8002468:	08002c5d 	.word	0x08002c5d
 800246c:	08002c5d 	.word	0x08002c5d
 8002470:	08002c5d 	.word	0x08002c5d
 8002474:	08002c5d 	.word	0x08002c5d
 8002478:	08002c5d 	.word	0x08002c5d
 800247c:	08002c5d 	.word	0x08002c5d
 8002480:	08002c5d 	.word	0x08002c5d
 8002484:	08002c5d 	.word	0x08002c5d
 8002488:	08002c5d 	.word	0x08002c5d
 800248c:	08002c5d 	.word	0x08002c5d
 8002490:	08002c5d 	.word	0x08002c5d
 8002494:	08002c5d 	.word	0x08002c5d
 8002498:	08002c5d 	.word	0x08002c5d
 800249c:	08002c5d 	.word	0x08002c5d
 80024a0:	08002c5d 	.word	0x08002c5d
 80024a4:	08002c5d 	.word	0x08002c5d
 80024a8:	08002c5d 	.word	0x08002c5d
 80024ac:	08002c5d 	.word	0x08002c5d
 80024b0:	08002c5d 	.word	0x08002c5d
 80024b4:	08002c5d 	.word	0x08002c5d
 80024b8:	08002c5d 	.word	0x08002c5d
 80024bc:	08002c5d 	.word	0x08002c5d
 80024c0:	08002c5d 	.word	0x08002c5d
 80024c4:	08002c5d 	.word	0x08002c5d
 80024c8:	08002c5d 	.word	0x08002c5d
 80024cc:	08002c5d 	.word	0x08002c5d
 80024d0:	08002507 	.word	0x08002507
        	case '\"': APPEND_STRING("\\\""); break;
 80024d4:	2302      	movs	r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00e      	beq.n	80024fc <json_serialize_string+0x20c>
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4947      	ldr	r1, [pc, #284]	; (8002600 <json_serialize_string+0x310>)
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f01c ffd9 	bl	801f49c <memcpy>
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	4413      	add	r3, r2
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e3b7      	b.n	8002c76 <json_serialize_string+0x986>
            case '\\': APPEND_STRING("\\\\"); break;
 8002506:	2302      	movs	r3, #2
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00e      	beq.n	800252e <json_serialize_string+0x23e>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	461a      	mov	r2, r3
 8002514:	493b      	ldr	r1, [pc, #236]	; (8002604 <json_serialize_string+0x314>)
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f01c ffc0 	bl	801f49c <memcpy>
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	e39e      	b.n	8002c76 <json_serialize_string+0x986>
            case '\b': APPEND_STRING("\\b"); break;
 8002538:	2302      	movs	r3, #2
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00e      	beq.n	8002560 <json_serialize_string+0x270>
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	461a      	mov	r2, r3
 8002546:	4930      	ldr	r1, [pc, #192]	; (8002608 <json_serialize_string+0x318>)
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f01c ffa7 	bl	801f49c <memcpy>
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e385      	b.n	8002c76 <json_serialize_string+0x986>
            case '\f': APPEND_STRING("\\f"); break;
 800256a:	2302      	movs	r3, #2
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <json_serialize_string+0x2a2>
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	461a      	mov	r2, r3
 8002578:	4924      	ldr	r1, [pc, #144]	; (800260c <json_serialize_string+0x31c>)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f01c ff8e 	bl	801f49c <memcpy>
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e36c      	b.n	8002c76 <json_serialize_string+0x986>
            case '\n': APPEND_STRING("\\n"); break;
 800259c:	2302      	movs	r3, #2
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00e      	beq.n	80025c4 <json_serialize_string+0x2d4>
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4919      	ldr	r1, [pc, #100]	; (8002610 <json_serialize_string+0x320>)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f01c ff75 	bl	801f49c <memcpy>
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e353      	b.n	8002c76 <json_serialize_string+0x986>
            case '\r': APPEND_STRING("\\r"); break;
 80025ce:	2302      	movs	r3, #2
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <json_serialize_string+0x306>
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	461a      	mov	r2, r3
 80025dc:	490d      	ldr	r1, [pc, #52]	; (8002614 <json_serialize_string+0x324>)
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f01c ff5c 	bl	801f49c <memcpy>
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	e33a      	b.n	8002c76 <json_serialize_string+0x986>
 8002600:	08022138 	.word	0x08022138
 8002604:	0802213c 	.word	0x0802213c
 8002608:	08022140 	.word	0x08022140
 800260c:	08022144 	.word	0x08022144
 8002610:	08022148 	.word	0x08022148
 8002614:	0802214c 	.word	0x0802214c
            case '\t': APPEND_STRING("\\t"); break;
 8002618:	2302      	movs	r3, #2
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00e      	beq.n	8002640 <json_serialize_string+0x350>
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	461a      	mov	r2, r3
 8002626:	4992      	ldr	r1, [pc, #584]	; (8002870 <json_serialize_string+0x580>)
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f01c ff37 	bl	801f49c <memcpy>
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e315      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x00': APPEND_STRING("\\u0000"); break;
 800264a:	2306      	movs	r3, #6
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <json_serialize_string+0x382>
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	461a      	mov	r2, r3
 8002658:	4986      	ldr	r1, [pc, #536]	; (8002874 <json_serialize_string+0x584>)
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f01c ff1e 	bl	801f49c <memcpy>
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e2fc      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x01': APPEND_STRING("\\u0001"); break;
 800267c:	2306      	movs	r3, #6
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00e      	beq.n	80026a4 <json_serialize_string+0x3b4>
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	461a      	mov	r2, r3
 800268a:	497b      	ldr	r1, [pc, #492]	; (8002878 <json_serialize_string+0x588>)
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f01c ff05 	bl	801f49c <memcpy>
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	e2e3      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x02': APPEND_STRING("\\u0002"); break;
 80026ae:	2306      	movs	r3, #6
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <json_serialize_string+0x3e6>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	461a      	mov	r2, r3
 80026bc:	496f      	ldr	r1, [pc, #444]	; (800287c <json_serialize_string+0x58c>)
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f01c feec 	bl	801f49c <memcpy>
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e2ca      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x03': APPEND_STRING("\\u0003"); break;
 80026e0:	2306      	movs	r3, #6
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00e      	beq.n	8002708 <json_serialize_string+0x418>
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4964      	ldr	r1, [pc, #400]	; (8002880 <json_serialize_string+0x590>)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f01c fed3 	bl	801f49c <memcpy>
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	e2b1      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x04': APPEND_STRING("\\u0004"); break;
 8002712:	2306      	movs	r3, #6
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00e      	beq.n	800273a <json_serialize_string+0x44a>
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	461a      	mov	r2, r3
 8002720:	4958      	ldr	r1, [pc, #352]	; (8002884 <json_serialize_string+0x594>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f01c feba 	bl	801f49c <memcpy>
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e298      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8002744:	2306      	movs	r3, #6
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00e      	beq.n	800276c <json_serialize_string+0x47c>
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	461a      	mov	r2, r3
 8002752:	494d      	ldr	r1, [pc, #308]	; (8002888 <json_serialize_string+0x598>)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f01c fea1 	bl	801f49c <memcpy>
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	e27f      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8002776:	2306      	movs	r3, #6
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00e      	beq.n	800279e <json_serialize_string+0x4ae>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	461a      	mov	r2, r3
 8002784:	4941      	ldr	r1, [pc, #260]	; (800288c <json_serialize_string+0x59c>)
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f01c fe88 	bl	801f49c <memcpy>
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	e266      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x07': APPEND_STRING("\\u0007"); break;
 80027a8:	2306      	movs	r3, #6
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00e      	beq.n	80027d0 <json_serialize_string+0x4e0>
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4936      	ldr	r1, [pc, #216]	; (8002890 <json_serialize_string+0x5a0>)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f01c fe6f 	bl	801f49c <memcpy>
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e24d      	b.n	8002c76 <json_serialize_string+0x986>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 80027da:	2306      	movs	r3, #6
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <json_serialize_string+0x512>
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	461a      	mov	r2, r3
 80027e8:	492a      	ldr	r1, [pc, #168]	; (8002894 <json_serialize_string+0x5a4>)
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f01c fe56 	bl	801f49c <memcpy>
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e234      	b.n	8002c76 <json_serialize_string+0x986>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 800280c:	2306      	movs	r3, #6
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00e      	beq.n	8002834 <json_serialize_string+0x544>
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	461a      	mov	r2, r3
 800281a:	491f      	ldr	r1, [pc, #124]	; (8002898 <json_serialize_string+0x5a8>)
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f01c fe3d 	bl	801f49c <memcpy>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e21b      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 800283e:	2306      	movs	r3, #6
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <json_serialize_string+0x576>
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	461a      	mov	r2, r3
 800284c:	4913      	ldr	r1, [pc, #76]	; (800289c <json_serialize_string+0x5ac>)
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f01c fe24 	bl	801f49c <memcpy>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	e202      	b.n	8002c76 <json_serialize_string+0x986>
 8002870:	08022150 	.word	0x08022150
 8002874:	08022154 	.word	0x08022154
 8002878:	0802215c 	.word	0x0802215c
 800287c:	08022164 	.word	0x08022164
 8002880:	0802216c 	.word	0x0802216c
 8002884:	08022174 	.word	0x08022174
 8002888:	0802217c 	.word	0x0802217c
 800288c:	08022184 	.word	0x08022184
 8002890:	0802218c 	.word	0x0802218c
 8002894:	08022194 	.word	0x08022194
 8002898:	0802219c 	.word	0x0802219c
 800289c:	080221a4 	.word	0x080221a4
            case '\x10': APPEND_STRING("\\u0010"); break;
 80028a0:	2306      	movs	r3, #6
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00e      	beq.n	80028c8 <json_serialize_string+0x5d8>
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4992      	ldr	r1, [pc, #584]	; (8002af8 <json_serialize_string+0x808>)
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f01c fdf3 	bl	801f49c <memcpy>
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e1d1      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x11': APPEND_STRING("\\u0011"); break;
 80028d2:	2306      	movs	r3, #6
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00e      	beq.n	80028fa <json_serialize_string+0x60a>
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	461a      	mov	r2, r3
 80028e0:	4986      	ldr	r1, [pc, #536]	; (8002afc <json_serialize_string+0x80c>)
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f01c fdda 	bl	801f49c <memcpy>
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e1b8      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x12': APPEND_STRING("\\u0012"); break;
 8002904:	2306      	movs	r3, #6
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <json_serialize_string+0x63c>
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	461a      	mov	r2, r3
 8002912:	497b      	ldr	r1, [pc, #492]	; (8002b00 <json_serialize_string+0x810>)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f01c fdc1 	bl	801f49c <memcpy>
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e19f      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8002936:	2306      	movs	r3, #6
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <json_serialize_string+0x66e>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	461a      	mov	r2, r3
 8002944:	496f      	ldr	r1, [pc, #444]	; (8002b04 <json_serialize_string+0x814>)
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f01c fda8 	bl	801f49c <memcpy>
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e186      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x14': APPEND_STRING("\\u0014"); break;
 8002968:	2306      	movs	r3, #6
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00e      	beq.n	8002990 <json_serialize_string+0x6a0>
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	461a      	mov	r2, r3
 8002976:	4964      	ldr	r1, [pc, #400]	; (8002b08 <json_serialize_string+0x818>)
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f01c fd8f 	bl	801f49c <memcpy>
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	e16d      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x15': APPEND_STRING("\\u0015"); break;
 800299a:	2306      	movs	r3, #6
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <json_serialize_string+0x6d2>
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4958      	ldr	r1, [pc, #352]	; (8002b0c <json_serialize_string+0x81c>)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f01c fd76 	bl	801f49c <memcpy>
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e154      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x16': APPEND_STRING("\\u0016"); break;
 80029cc:	2306      	movs	r3, #6
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <json_serialize_string+0x704>
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	461a      	mov	r2, r3
 80029da:	494d      	ldr	r1, [pc, #308]	; (8002b10 <json_serialize_string+0x820>)
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f01c fd5d 	bl	801f49c <memcpy>
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e13b      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x17': APPEND_STRING("\\u0017"); break;
 80029fe:	2306      	movs	r3, #6
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <json_serialize_string+0x736>
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4941      	ldr	r1, [pc, #260]	; (8002b14 <json_serialize_string+0x824>)
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f01c fd44 	bl	801f49c <memcpy>
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e122      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x18': APPEND_STRING("\\u0018"); break;
 8002a30:	2306      	movs	r3, #6
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <json_serialize_string+0x768>
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4936      	ldr	r1, [pc, #216]	; (8002b18 <json_serialize_string+0x828>)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f01c fd2b 	bl	801f49c <memcpy>
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e109      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x19': APPEND_STRING("\\u0019"); break;
 8002a62:	2306      	movs	r3, #6
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <json_serialize_string+0x79a>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	492a      	ldr	r1, [pc, #168]	; (8002b1c <json_serialize_string+0x82c>)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f01c fd12 	bl	801f49c <memcpy>
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e0f0      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8002a94:	2306      	movs	r3, #6
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <json_serialize_string+0x7cc>
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	491f      	ldr	r1, [pc, #124]	; (8002b20 <json_serialize_string+0x830>)
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f01c fcf9 	bl	801f49c <memcpy>
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	e0d7      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00e      	beq.n	8002aee <json_serialize_string+0x7fe>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4913      	ldr	r1, [pc, #76]	; (8002b24 <json_serialize_string+0x834>)
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f01c fce0 	bl	801f49c <memcpy>
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e0be      	b.n	8002c76 <json_serialize_string+0x986>
 8002af8:	080221ac 	.word	0x080221ac
 8002afc:	080221b4 	.word	0x080221b4
 8002b00:	080221bc 	.word	0x080221bc
 8002b04:	080221c4 	.word	0x080221c4
 8002b08:	080221cc 	.word	0x080221cc
 8002b0c:	080221d4 	.word	0x080221d4
 8002b10:	080221dc 	.word	0x080221dc
 8002b14:	080221e4 	.word	0x080221e4
 8002b18:	080221ec 	.word	0x080221ec
 8002b1c:	080221f4 	.word	0x080221f4
 8002b20:	080221fc 	.word	0x080221fc
 8002b24:	08022204 	.word	0x08022204
            case '\x1c': APPEND_STRING("\\u001c"); break;
 8002b28:	2306      	movs	r3, #6
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00e      	beq.n	8002b50 <json_serialize_string+0x860>
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4962      	ldr	r1, [pc, #392]	; (8002cc0 <json_serialize_string+0x9d0>)
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f01c fcaf 	bl	801f49c <memcpy>
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e08d      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00e      	beq.n	8002b82 <json_serialize_string+0x892>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	461a      	mov	r2, r3
 8002b68:	4956      	ldr	r1, [pc, #344]	; (8002cc4 <json_serialize_string+0x9d4>)
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f01c fc96 	bl	801f49c <memcpy>
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	e074      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 8002b8c:	2306      	movs	r3, #6
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <json_serialize_string+0x8c4>
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	494b      	ldr	r1, [pc, #300]	; (8002cc8 <json_serialize_string+0x9d8>)
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f01c fc7d 	bl	801f49c <memcpy>
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e05b      	b.n	8002c76 <json_serialize_string+0x986>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00e      	beq.n	8002be6 <json_serialize_string+0x8f6>
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	493f      	ldr	r1, [pc, #252]	; (8002ccc <json_serialize_string+0x9dc>)
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f01c fc64 	bl	801f49c <memcpy>
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	e042      	b.n	8002c76 <json_serialize_string+0x986>
            case '/':
                if (parson_escape_slashes) {
 8002bf0:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <json_serialize_string+0x9e0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d018      	beq.n	8002c2a <json_serialize_string+0x93a>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00e      	beq.n	8002c20 <json_serialize_string+0x930>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4933      	ldr	r1, [pc, #204]	; (8002cd4 <json_serialize_string+0x9e4>)
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f01c fc47 	bl	801f49c <memcpy>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 8002c28:	e025      	b.n	8002c76 <json_serialize_string+0x986>
                    APPEND_STRING("/");
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <json_serialize_string+0x962>
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4927      	ldr	r1, [pc, #156]	; (8002cd8 <json_serialize_string+0x9e8>)
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f01c fc2e 	bl	801f49c <memcpy>
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
                break;
 8002c5a:	e00c      	b.n	8002c76 <json_serialize_string+0x986>
            default:
                if (buf != NULL) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <json_serialize_string+0x97e>
                    buf[0] = c;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7dfa      	ldrb	r2, [r7, #23]
 8002c66:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61bb      	str	r3, [r7, #24]
                break;
 8002c74:	bf00      	nop
    for (i = 0; i < len; i++) {
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f4ff ab60 	bcc.w	8002346 <json_serialize_string+0x56>
        }
    }
    // +BCH
	//APPEND_STRING("\"");
	APPEND_STRING("\\\"");
 8002c86:	2302      	movs	r3, #2
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <json_serialize_string+0x9be>
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4911      	ldr	r1, [pc, #68]	; (8002cdc <json_serialize_string+0x9ec>)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f01c fc00 	bl	801f49c <memcpy>
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
    return written_total;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	0802220c 	.word	0x0802220c
 8002cc4:	08022214 	.word	0x08022214
 8002cc8:	0802221c 	.word	0x0802221c
 8002ccc:	08022224 	.word	0x08022224
 8002cd0:	20000010 	.word	0x20000010
 8002cd4:	0802222c 	.word	0x0802222c
 8002cd8:	08022230 	.word	0x08022230
 8002cdc:	08022138 	.word	0x08022138

08002ce0 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <json_object_get_count+0x14>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	e000      	b.n	8002cf6 <json_object_get_count+0x16>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <json_object_get_name+0x1e>
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffe4 	bl	8002ce0 <json_object_get_count>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d301      	bcc.n	8002d24 <json_object_get_name+0x22>
        return NULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e005      	b.n	8002d30 <json_object_get_name+0x2e>
    }
    return object->names[index];
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <json_object_get_value_at+0x1e>
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ffc9 	bl	8002ce0 <json_object_get_count>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d301      	bcc.n	8002d5a <json_object_get_value_at+0x22>
        return NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e005      	b.n	8002d66 <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	681b      	ldr	r3, [r3, #0]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
    if (!object) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <json_object_get_wrapping_value+0x12>
        return NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e001      	b.n	8002d84 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <json_array_get_value+0x1e>
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f810 	bl	8002dc6 <json_array_get_count>
 8002da6:	4602      	mov	r2, r0
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d301      	bcc.n	8002db2 <json_array_get_value+0x22>
        return NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e005      	b.n	8002dbe <json_array_get_value+0x2e>
    }
    return array->items[index];
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	681b      	ldr	r3, [r3, #0]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <json_array_get_count+0x14>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	e000      	b.n	8002ddc <json_array_get_count+0x16>
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <json_value_get_type>:
    }
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <json_value_get_type+0x14>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	e001      	b.n	8002e00 <json_value_get_type+0x18>
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe7 	bl	8002de8 <json_value_get_type>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d102      	bne.n	8002e26 <json_value_get_object+0x1a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	e000      	b.n	8002e28 <json_value_get_object+0x1c>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffd5 	bl	8002de8 <json_value_get_type>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d102      	bne.n	8002e4a <json_value_get_array+0x1a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	e000      	b.n	8002e4c <json_value_get_array+0x1c>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffc3 	bl	8002de8 <json_value_get_type>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d102      	bne.n	8002e6e <json_value_get_string_desc+0x1a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	e000      	b.n	8002e70 <json_value_get_string_desc+0x1c>
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ffe7 	bl	8002e54 <json_value_get_string_desc>
 8002e86:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <json_value_get_string+0x1c>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	e000      	b.n	8002e96 <json_value_get_string+0x1e>
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffd4 	bl	8002e54 <json_value_get_string_desc>
 8002eac:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <json_value_get_string_len+0x1c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	e000      	b.n	8002ebc <json_value_get_string_len+0x1e>
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff8b 	bl	8002de8 <json_value_get_type>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d103      	bne.n	8002ee0 <json_value_get_number+0x1c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ede:	e003      	b.n	8002ee8 <json_value_get_number+0x24>
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	ec43 2b17 	vmov	d7, r2, r3
}
 8002eec:	eeb0 0a47 	vmov.f32	s0, s14
 8002ef0:	eef0 0a67 	vmov.f32	s1, s15
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff70 	bl	8002de8 <json_value_get_type>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d102      	bne.n	8002f14 <json_value_get_boolean+0x1a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	e001      	b.n	8002f18 <json_value_get_boolean+0x1e>
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff5d 	bl	8002de8 <json_value_get_type>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d012      	beq.n	8002f5a <json_value_free+0x3a>
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	dc16      	bgt.n	8002f66 <json_value_free+0x46>
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d007      	beq.n	8002f4c <json_value_free+0x2c>
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d112      	bne.n	8002f66 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fe01 	bl	8001b4c <json_object_free>
            break;
 8002f4a:	e00d      	b.n	8002f68 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <json_value_free+0x58>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	4610      	mov	r0, r2
 8002f56:	4798      	blx	r3
            break;
 8002f58:	e006      	b.n	8002f68 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fe08 	bl	8001b74 <json_array_free>
            break;
 8002f64:	e000      	b.n	8002f68 <json_value_free+0x48>
        default:
            break;
 8002f66:	bf00      	nop
    }
    parson_free(value);
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <json_value_free+0x58>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <json_value_init_object+0x50>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2010      	movs	r0, #16
 8002f88:	4798      	blx	r3
 8002f8a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <json_value_init_object+0x1a>
        return NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e016      	b.n	8002fc4 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe fb24 	bl	80015f0 <json_object_make>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <json_value_init_object+0x46>
        parson_free(new_value);
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <json_value_init_object+0x54>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
        return NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <json_value_init_object+0x48>
    }
    return new_value;
 8002fc2:	687b      	ldr	r3, [r7, #4]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000008 	.word	0x20000008
 8002fd0:	2000000c 	.word	0x2000000c

08002fd4 <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 8002fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 8002fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fea:	f7fd fd77 	bl	8000adc <__aeabi_dcmpun>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d121      	bne.n	8003038 <json_value_init_number+0x64>
 8002ff4:	683c      	ldr	r4, [r7, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	461e      	mov	r6, r3
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <json_value_init_number+0x9c>)
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd fd67 	bl	8000adc <__aeabi_dcmpun>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <json_value_init_number+0x58>
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <json_value_init_number+0x9c>)
 800301a:	4620      	mov	r0, r4
 800301c:	4629      	mov	r1, r5
 800301e:	f7fd fd3f 	bl	8000aa0 <__aeabi_dcmple>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <json_value_init_number+0x58>
 8003028:	2300      	movs	r3, #0
 800302a:	461e      	mov	r6, r3
 800302c:	b2f3      	uxtb	r3, r6
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <json_value_init_number+0x68>
        return NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	e015      	b.n	8003068 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <json_value_init_number+0xa0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2010      	movs	r0, #16
 8003042:	4798      	blx	r3
 8003044:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <json_value_init_number+0x7c>
        return NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	e00b      	b.n	8003068 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2203      	movs	r2, #3
 800305a:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003062:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003070:	7fefffff 	.word	0x7fefffff
 8003074:	20000008 	.word	0x20000008

08003078 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b096      	sub	sp, #88	; 0x58
 800307c:	af02      	add	r7, sp, #8
 800307e:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	2200      	movs	r2, #0
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fe fd99 	bl	8001bc4 <json_serialize_to_buffer_r>
 8003092:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	2b00      	cmp	r3, #0
 8003098:	db02      	blt.n	80030a0 <json_serialization_size+0x28>
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	3301      	adds	r3, #1
 800309e:	e000      	b.n	80030a2 <json_serialization_size+0x2a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3750      	adds	r7, #80	; 0x50
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b088      	sub	sp, #32
 80030ae:	af02      	add	r7, sp, #8
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
    int written = -1;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff ffdb 	bl	8003078 <json_serialization_size>
 80030c2:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <json_serialize_to_buffer+0x28>
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d202      	bcs.n	80030d8 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	e00f      	b.n	80030f8 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 80030d8:	2300      	movs	r3, #0
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	2200      	movs	r2, #0
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7fe fd6e 	bl	8001bc4 <json_serialize_to_buffer_r>
 80030e8:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da02      	bge.n	80030f6 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
 80030f4:	e000      	b.n	80030f8 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffb2 	bl	8003078 <json_serialization_size>
 8003114:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <json_serialize_to_string+0x24>
        return NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	e018      	b.n	8003156 <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <json_serialize_to_string+0x60>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6938      	ldr	r0, [r7, #16]
 800312a:	4798      	blx	r3
 800312c:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <json_serialize_to_string+0x38>
        return NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	e00e      	b.n	8003156 <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ffb4 	bl	80030aa <json_serialize_to_buffer>
 8003142:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f80a 	bl	8003164 <json_free_serialized_string>
        return NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <json_serialize_to_string+0x56>
    }
    return buf;
 8003154:	68fb      	ldr	r3, [r7, #12]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000008 	.word	0x20000008

08003164 <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
    parson_free(string);
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <json_free_serialized_string+0x18>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	2000000c 	.word	0x2000000c

08003180 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b08e      	sub	sp, #56	; 0x38
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <json_object_set_value+0x3e>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <json_object_set_value+0x3e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <json_object_set_value+0x3e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <json_object_set_value+0x44>
        return JSONFailure;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	e095      	b.n	80032f0 <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 80031c4:	68b8      	ldr	r0, [r7, #8]
 80031c6:	f7fc ffdb 	bl	8000180 <strlen>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4619      	mov	r1, r3
 80031ce:	68b8      	ldr	r0, [r7, #8]
 80031d0:	f7fe f9e1 	bl	8001596 <hash_string>
 80031d4:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80031da:	68b8      	ldr	r0, [r7, #8]
 80031dc:	f7fc ffd0 	bl	8000180 <strlen>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7fe fbb4 	bl	800195a <json_object_get_cell_ix>
 80031f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01f      	beq.n	800323a <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 8003216:	6a38      	ldr	r0, [r7, #32]
 8003218:	f7ff fe82 	bl	8002f20 <json_value_free>
        object->values[item_ix] = value;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fd9f 	bl	8002d6e <json_object_get_wrapping_value>
 8003230:	4602      	mov	r2, r0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 8003236:	2300      	movs	r3, #0
 8003238:	e05a      	b.n	80032f0 <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	429a      	cmp	r2, r3
 8003244:	d316      	bcc.n	8003274 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7fe fb1c 	bl	8001884 <json_object_grow_and_rehash>
 800324c:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <json_object_set_value+0xda>
            return JSONFailure;
 8003254:	f04f 33ff 	mov.w	r3, #4294967295
 8003258:	e04a      	b.n	80032f0 <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800325a:	68b8      	ldr	r0, [r7, #8]
 800325c:	f7fc ff90 	bl	8000180 <strlen>
 8003260:	4602      	mov	r2, r0
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7fe fb74 	bl	800195a <json_object_get_cell_ix>
 8003272:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 8003274:	68b8      	ldr	r0, [r7, #8]
 8003276:	f7fe f97d 	bl	8001574 <parson_strdup>
 800327a:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <json_object_set_value+0x108>
        return JSONFailure;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
 8003286:	e033      	b.n	80032f0 <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	6992      	ldr	r2, [r2, #24]
 80032a6:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c6:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d6:	601a      	str	r2, [r3, #0]
    object->count++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff fd43 	bl	8002d6e <json_object_get_wrapping_value>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3730      	adds	r7, #48	; 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 8003306:	ed97 0b00 	vldr	d0, [r7]
 800330a:	f7ff fe63 	bl	8002fd4 <json_value_init_number>
 800330e:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff ff33 	bl	8003180 <json_object_set_value>
 800331a:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <json_object_set_number+0x30>
        json_value_free(value);
 8003322:	6978      	ldr	r0, [r7, #20]
 8003324:	f7ff fdfc 	bl	8002f20 <json_value_free>
    }
    return status;
 8003328:	693b      	ldr	r3, [r7, #16]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <NMI_Handler+0x4>

08003346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <HardFault_Handler+0x4>

0800334c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003350:	e7fe      	b.n	8003350 <MemManage_Handler+0x4>

08003352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003356:	e7fe      	b.n	8003356 <BusFault_Handler+0x4>

08003358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335c:	e7fe      	b.n	800335c <UsageFault_Handler+0x4>

0800335e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800338c:	f014 fe6a 	bl	8018064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}

08003394 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003398:	2001      	movs	r0, #1
 800339a:	f015 fd8d 	bl	8018eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033a6:	2010      	movs	r0, #16
 80033a8:	f015 fd86 	bl	8018eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <DMA1_Channel1_IRQHandler+0x10>)
 80033b6:	f015 f996 	bl	80186e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000430 	.word	0x20000430

080033c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 80033ce:	4b27      	ldr	r3, [pc, #156]	; (800346c <LPUART1_IRQHandler+0xa8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET)) {
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d039      	beq.n	800345e <LPUART1_IRQHandler+0x9a>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <LPUART1_IRQHandler+0xa8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	621a      	str	r2, [r3, #32]
		temp = hlpuart1.Instance->ISR;
 80033f2:	4b1e      	ldr	r3, [pc, #120]	; (800346c <LPUART1_IRQHandler+0xa8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	603b      	str	r3, [r7, #0]
		temp = hlpuart1.Instance->RDR;
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <LPUART1_IRQHandler+0xa8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	603b      	str	r3, [r7, #0]
		//HAL_UART_DMAStop(&hlpuart1);
		temp = hlpuart1.hdmarx->Instance->CNDTR;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <LPUART1_IRQHandler+0xa8>)
 8003404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	603b      	str	r3, [r7, #0]
		// reset index dma buffer to 1024 (countdown)
		__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <LPUART1_IRQHandler+0xa8>)
 8003410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <LPUART1_IRQHandler+0xa8>)
 800341a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
		hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <LPUART1_IRQHandler+0xa8>)
 8003428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003432:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 8003434:	4b0d      	ldr	r3, [pc, #52]	; (800346c <LPUART1_IRQHandler+0xa8>)
 8003436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <LPUART1_IRQHandler+0xa8>)
 8003440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
		UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	425b      	negs	r3, r3
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <LPUART1_IRQHandler+0xac>)
 8003456:	701a      	strb	r2, [r3, #0]
		UART_ESP32_RecvEndFlag = 1;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <LPUART1_IRQHandler+0xb0>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800345e:	4803      	ldr	r0, [pc, #12]	; (800346c <LPUART1_IRQHandler+0xa8>)
 8003460:	f018 fe8c 	bl	801c17c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000039c 	.word	0x2000039c
 8003470:	2000997c 	.word	0x2000997c
 8003474:	2000997d 	.word	0x2000997d

08003478 <LL_AHB2_GRP1_EnableClock>:
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4313      	orrs	r3, r2
 800348e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800349c:	68fb      	ldr	r3, [r7, #12]
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_APB1_GRP1_EnableClock>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80034b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4313      	orrs	r3, r2
 80034c0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4013      	ands	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034ce:	68fb      	ldr	r3, [r7, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_APB1_GRP1_DisableClock>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80034e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f2:	4013      	ands	r3, r2
 80034f4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <BSP_I2C1_Init+0x70>)
 8003510:	4a19      	ldr	r2, [pc, #100]	; (8003578 <BSP_I2C1_Init+0x74>)
 8003512:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <BSP_I2C1_Init+0x78>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	4918      	ldr	r1, [pc, #96]	; (800357c <BSP_I2C1_Init+0x78>)
 800351c:	600a      	str	r2, [r1, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d122      	bne.n	8003568 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003522:	4814      	ldr	r0, [pc, #80]	; (8003574 <BSP_I2C1_Init+0x70>)
 8003524:	f016 f9a9 	bl	801987a <HAL_I2C_GetState>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11c      	bne.n	8003568 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800352e:	4811      	ldr	r0, [pc, #68]	; (8003574 <BSP_I2C1_Init+0x70>)
 8003530:	f000 f8ee 	bl	8003710 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800353a:	480e      	ldr	r0, [pc, #56]	; (8003574 <BSP_I2C1_Init+0x70>)
 800353c:	f000 f8a4 	bl	8003688 <MX_I2C1_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003546:	f06f 0307 	mvn.w	r3, #7
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	e00c      	b.n	8003568 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800354e:	2100      	movs	r1, #0
 8003550:	4808      	ldr	r0, [pc, #32]	; (8003574 <BSP_I2C1_Init+0x70>)
 8003552:	f016 fc93 	bl	8019e7c <HAL_I2CEx_ConfigAnalogFilter>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800355c:	f06f 0307 	mvn.w	r3, #7
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	e001      	b.n	8003568 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003564:	2300      	movs	r3, #0
 8003566:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200002f4 	.word	0x200002f4
 8003578:	40005400 	.word	0x40005400
 800357c:	20000348 	.word	0x20000348

08003580 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <BSP_I2C1_DeInit+0x48>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d014      	beq.n	80035bc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <BSP_I2C1_DeInit+0x48>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <BSP_I2C1_DeInit+0x48>)
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <BSP_I2C1_DeInit+0x48>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80035a4:	4809      	ldr	r0, [pc, #36]	; (80035cc <BSP_I2C1_DeInit+0x4c>)
 80035a6:	f000 f8f7 	bl	8003798 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80035aa:	4808      	ldr	r0, [pc, #32]	; (80035cc <BSP_I2C1_DeInit+0x4c>)
 80035ac:	f015 fd2b 	bl	8019006 <HAL_I2C_DeInit>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80035b6:	f06f 0307 	mvn.w	r3, #7
 80035ba:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80035bc:	687b      	ldr	r3, [r7, #4]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000348 	.word	0x20000348
 80035cc:	200002f4 	.word	0x200002f4

080035d0 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	4603      	mov	r3, r0
 80035d8:	6039      	str	r1, [r7, #0]
 80035da:	80fb      	strh	r3, [r7, #6]
 80035dc:	4613      	mov	r3, r2
 80035de:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80035e4:	88bb      	ldrh	r3, [r7, #4]
 80035e6:	88f9      	ldrh	r1, [r7, #6]
 80035e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	480b      	ldr	r0, [pc, #44]	; (8003620 <BSP_I2C1_Send+0x50>)
 80035f2:	f015 fd37 	bl	8019064 <HAL_I2C_Master_Transmit>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00c      	beq.n	8003616 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80035fc:	4808      	ldr	r0, [pc, #32]	; (8003620 <BSP_I2C1_Send+0x50>)
 80035fe:	f016 f94a 	bl	8019896 <HAL_I2C_GetError>
 8003602:	4603      	mov	r3, r0
 8003604:	2b04      	cmp	r3, #4
 8003606:	d003      	beq.n	8003610 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003608:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e002      	b.n	8003616 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003610:	f06f 0303 	mvn.w	r3, #3
 8003614:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200002f4 	.word	0x200002f4

08003624 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	80fb      	strh	r3, [r7, #6]
 8003630:	4613      	mov	r3, r2
 8003632:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003638:	88bb      	ldrh	r3, [r7, #4]
 800363a:	88f9      	ldrh	r1, [r7, #6]
 800363c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003640:	9200      	str	r2, [sp, #0]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	480b      	ldr	r0, [pc, #44]	; (8003674 <BSP_I2C1_Recv+0x50>)
 8003646:	f015 fe01 	bl	801924c <HAL_I2C_Master_Receive>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8003650:	4808      	ldr	r0, [pc, #32]	; (8003674 <BSP_I2C1_Recv+0x50>)
 8003652:	f016 f920 	bl	8019896 <HAL_I2C_GetError>
 8003656:	4603      	mov	r3, r0
 8003658:	2b04      	cmp	r3, #4
 800365a:	d003      	beq.n	8003664 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800365c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e002      	b.n	800366a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003664:	f06f 0303 	mvn.w	r3, #3
 8003668:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800366a:	68fb      	ldr	r3, [r7, #12]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	200002f4 	.word	0x200002f4

08003678 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800367c:	f014 fd06 	bl	801808c <HAL_GetTick>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <MX_I2C1_Init+0x80>)
 8003698:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <MX_I2C1_Init+0x84>)
 800369e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f015 fc0c 	bl	8018ee8 <HAL_I2C_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036da:	2100      	movs	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f016 fbcd 	bl	8019e7c <HAL_I2CEx_ConfigAnalogFilter>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80036ec:	2100      	movs	r1, #0
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f016 fc0f 	bl	8019f12 <HAL_I2CEx_ConfigDigitalFilter>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40005400 	.word	0x40005400
 800370c:	00707cbb 	.word	0x00707cbb

08003710 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b09c      	sub	sp, #112	; 0x70
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	2250      	movs	r2, #80	; 0x50
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f01b fee3 	bl	801f4ec <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003726:	2304      	movs	r3, #4
 8003728:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800372a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	4618      	mov	r0, r3
 8003736:	f018 f88f 	bl	801b858 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	2002      	movs	r0, #2
 800373c:	f7ff fe9c 	bl	8003478 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003744:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003746:	2312      	movs	r3, #18
 8003748:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003752:	2304      	movs	r3, #4
 8003754:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003756:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800375a:	4619      	mov	r1, r3
 800375c:	480d      	ldr	r0, [pc, #52]	; (8003794 <I2C1_MspInit+0x84>)
 800375e:	f015 f913 	bl	8018988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003766:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003768:	2312      	movs	r3, #18
 800376a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003770:	2300      	movs	r3, #0
 8003772:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003774:	2304      	movs	r3, #4
 8003776:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003778:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800377c:	4619      	mov	r1, r3
 800377e:	4805      	ldr	r0, [pc, #20]	; (8003794 <I2C1_MspInit+0x84>)
 8003780:	f015 f902 	bl	8018988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003784:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003788:	f7ff fe8f 	bl	80034aa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800378c:	bf00      	nop
 800378e:	3770      	adds	r7, #112	; 0x70
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	48000400 	.word	0x48000400

08003798 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80037a0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80037a4:	f7ff fe9a 	bl	80034dc <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80037a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ac:	4805      	ldr	r0, [pc, #20]	; (80037c4 <I2C1_MspDeInit+0x2c>)
 80037ae:	f015 fa5b 	bl	8018c68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80037b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037b6:	4803      	ldr	r0, [pc, #12]	; (80037c4 <I2C1_MspDeInit+0x2c>)
 80037b8:	f015 fa56 	bl	8018c68 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	48000400 	.word	0x48000400

080037c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return 1;
 80037cc:	2301      	movs	r3, #1
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_kill>:

int _kill(int pid, int sig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037e2:	f01b fc01 	bl	801efe8 <__errno>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2216      	movs	r2, #22
 80037ea:	601a      	str	r2, [r3, #0]
  return -1;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_exit>:

void _exit (int status)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003800:	f04f 31ff 	mov.w	r1, #4294967295
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ffe7 	bl	80037d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800380a:	e7fe      	b.n	800380a <_exit+0x12>

0800380c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e00a      	b.n	8003834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800381e:	f3af 8000 	nop.w
 8003822:	4601      	mov	r1, r0
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	60ba      	str	r2, [r7, #8]
 800382a:	b2ca      	uxtb	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	dbf0      	blt.n	800381e <_read+0x12>
  }

  return len;
 800383c:	687b      	ldr	r3, [r7, #4]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800386e:	605a      	str	r2, [r3, #4]
  return 0;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <_isatty>:

int _isatty(int file)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003886:	2301      	movs	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <_sbrk+0x5c>)
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <_sbrk+0x60>)
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <_sbrk+0x64>)
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <_sbrk+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d207      	bcs.n	80038f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e0:	f01b fb82 	bl	801efe8 <__errno>
 80038e4:	4603      	mov	r3, r0
 80038e6:	220c      	movs	r2, #12
 80038e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e009      	b.n	8003904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <_sbrk+0x64>)
 8003900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20030000 	.word	0x20030000
 8003910:	00000400 	.word	0x00000400
 8003914:	2000034c 	.word	0x2000034c
 8003918:	20009a28 	.word	0x20009a28

0800391c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003920:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <SystemInit+0x98>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <SystemInit+0x98>)
 8003928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800392c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003948:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <SystemInit+0x9c>)
 8003956:	4013      	ands	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800395a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003966:	f023 0305 	bic.w	r3, r3, #5
 800396a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	4a0d      	ldr	r2, [pc, #52]	; (80039bc <SystemInit+0xa0>)
 8003988:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <SystemInit+0xa0>)
 8003990:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800399c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00
 80039b8:	faf6fefb 	.word	0xfaf6fefb
 80039bc:	22041000 	.word	0x22041000

080039c0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <MX_TIM17_Init+0x48>)
 80039fa:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <MX_TIM17_Init+0x4c>)
 80039fc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <MX_TIM17_Init+0x48>)
 8003a00:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003a04:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <MX_TIM17_Init+0x48>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 30000;
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <MX_TIM17_Init+0x48>)
 8003a0e:	f247 5230 	movw	r2, #30000	; 0x7530
 8003a12:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <MX_TIM17_Init+0x48>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <MX_TIM17_Init+0x48>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <MX_TIM17_Init+0x48>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a26:	4805      	ldr	r0, [pc, #20]	; (8003a3c <MX_TIM17_Init+0x48>)
 8003a28:	f018 f9a3 	bl	801bd72 <HAL_TIM_Base_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8003a32:	f7fd fd59 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000350 	.word	0x20000350
 8003a40:	40014800 	.word	0x40014800

08003a44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <HAL_TIM_Base_MspInit+0x24>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d103      	bne.n	8003a5e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a56:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003a5a:	f7ff ffb1 	bl	80039c0 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40014800 	.word	0x40014800

08003a6c <LL_AHB2_GRP1_EnableClock>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a90:	68fb      	ldr	r3, [r7, #12]
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_APB1_GRP2_EnableClock>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <MX_LPUART1_UART_Init+0xb0>)
 8003ad8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003ada:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ae0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003b18:	4818      	ldr	r0, [pc, #96]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b1a:	f018 fa05 	bl	801bf28 <HAL_UART_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b24:	f7fd fce0 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4814      	ldr	r0, [pc, #80]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b2c:	f019 fd2a 	bl	801d584 <HAL_UARTEx_SetTxFifoThreshold>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b36:	f7fd fcd7 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	480f      	ldr	r0, [pc, #60]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b3e:	f019 fd5f 	bl	801d600 <HAL_UARTEx_SetRxFifoThreshold>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b48:	f7fd fcce 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003b4c:	480b      	ldr	r0, [pc, #44]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b4e:	f019 fce0 	bl	801d512 <HAL_UARTEx_DisableFifoMode>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b58:	f7fd fcc6 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0210 	orr.w	r2, r2, #16
 8003b6a:	601a      	str	r2, [r3, #0]
      	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8003b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b70:	4904      	ldr	r1, [pc, #16]	; (8003b84 <MX_LPUART1_UART_Init+0xb4>)
 8003b72:	4802      	ldr	r0, [pc, #8]	; (8003b7c <MX_LPUART1_UART_Init+0xac>)
 8003b74:	f018 fab6 	bl	801c0e4 <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000039c 	.word	0x2000039c
 8003b80:	40008000 	.word	0x40008000
 8003b84:	2000917c 	.word	0x2000917c

08003b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b09c      	sub	sp, #112	; 0x70
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	2250      	movs	r2, #80	; 0x50
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f01b fc9f 	bl	801f4ec <memset>
  if(uartHandle->Instance==LPUART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <HAL_UART_MspInit+0xe4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d155      	bne.n	8003c64 <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f017 fe47 	bl	801b858 <HAL_RCCEx_PeriphCLKConfig>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bd0:	f7fd fc8a 	bl	80014e8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f7ff ff62 	bl	8003a9e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bda:	2004      	movs	r0, #4
 8003bdc:	f7ff ff46 	bl	8003a6c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8003be0:	2303      	movs	r3, #3
 8003be2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	481d      	ldr	r0, [pc, #116]	; (8003c70 <HAL_UART_MspInit+0xe8>)
 8003bfc:	f014 fec4 	bl	8018988 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003c00:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c02:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <HAL_UART_MspInit+0xf0>)
 8003c04:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c08:	2210      	movs	r2, #16
 8003c0a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003c36:	480f      	ldr	r0, [pc, #60]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c38:	f014 fb74 	bl	8018324 <HAL_DMA_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8003c42:	f7fd fc51 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <HAL_UART_MspInit+0xec>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	2100      	movs	r1, #0
 8003c58:	2025      	movs	r0, #37	; 0x25
 8003c5a:	f014 fb2e 	bl	80182ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003c5e:	2025      	movs	r0, #37	; 0x25
 8003c60:	f014 fb45 	bl	80182ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003c64:	bf00      	nop
 8003c66:	3770      	adds	r7, #112	; 0x70
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40008000 	.word	0x40008000
 8003c70:	48000800 	.word	0x48000800
 8003c74:	20000430 	.word	0x20000430
 8003c78:	40020008 	.word	0x40020008

08003c7c <LL_AHB2_GRP1_EnableClock>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <LL_APB1_GRP1_EnableClock>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003ce6:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <MX_USB_PCD_Init+0x4c>)
 8003ce8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003cec:	2208      	movs	r2, #8
 8003cee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003d14:	4804      	ldr	r0, [pc, #16]	; (8003d28 <MX_USB_PCD_Init+0x48>)
 8003d16:	f016 f948 	bl	8019faa <HAL_PCD_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003d20:	f7fd fbe2 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000490 	.word	0x20000490
 8003d2c:	40006800 	.word	0x40006800

08003d30 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b09c      	sub	sp, #112	; 0x70
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d48:	f107 030c 	add.w	r3, r7, #12
 8003d4c:	2250      	movs	r2, #80	; 0x50
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f01b fbcb 	bl	801f4ec <memset>
  if(pcdHandle->Instance==USB)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_PCD_MspInit+0xa8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d136      	bne.n	8003dce <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8003d66:	2318      	movs	r3, #24
 8003d68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003d76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003d7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d80:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d86:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f017 fd63 	bl	801b858 <HAL_RCCEx_PeriphCLKConfig>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8003d98:	f7fd fba6 	bl	80014e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7ff ff6d 	bl	8003c7c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003da2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003da6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da8:	2302      	movs	r3, #2
 8003daa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db0:	2300      	movs	r3, #0
 8003db2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003db4:	230a      	movs	r3, #10
 8003db6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc2:	f014 fde1 	bl	8018988 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003dc6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003dca:	f7ff ff70 	bl	8003cae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003dce:	bf00      	nop
 8003dd0:	3770      	adds	r7, #112	; 0x70
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40006800 	.word	0x40006800

08003ddc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003ddc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dde:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de0:	3304      	adds	r3, #4

08003de2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003de6:	d3f9      	bcc.n	8003ddc <CopyDataInit>
  bx lr
 8003de8:	4770      	bx	lr

08003dea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003dea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003dec:	3004      	adds	r0, #4

08003dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003dee:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003df0:	d3fb      	bcc.n	8003dea <FillZerobss>
  bx lr
 8003df2:	4770      	bx	lr

08003df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003df4:	480c      	ldr	r0, [pc, #48]	; (8003e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003df6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003df8:	f7ff fd90 	bl	800391c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003dfc:	480b      	ldr	r0, [pc, #44]	; (8003e2c <LoopForever+0x6>)
 8003dfe:	490c      	ldr	r1, [pc, #48]	; (8003e30 <LoopForever+0xa>)
 8003e00:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <LoopForever+0xe>)
 8003e02:	2300      	movs	r3, #0
 8003e04:	f7ff ffed 	bl	8003de2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003e08:	480b      	ldr	r0, [pc, #44]	; (8003e38 <LoopForever+0x12>)
 8003e0a:	490c      	ldr	r1, [pc, #48]	; (8003e3c <LoopForever+0x16>)
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <LoopForever+0x1a>)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f7ff ffe7 	bl	8003de2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003e14:	480b      	ldr	r0, [pc, #44]	; (8003e44 <LoopForever+0x1e>)
 8003e16:	490c      	ldr	r1, [pc, #48]	; (8003e48 <LoopForever+0x22>)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f7ff ffe8 	bl	8003dee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e1e:	f01b faa1 	bl	801f364 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003e22:	f7fd fa68 	bl	80012f6 <main>

08003e26 <LoopForever>:

LoopForever:
  b LoopForever
 8003e26:	e7fe      	b.n	8003e26 <LoopForever>
  ldr   r0, =_estack
 8003e28:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003e2c:	20000008 	.word	0x20000008
 8003e30:	20000268 	.word	0x20000268
 8003e34:	080232dc 	.word	0x080232dc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003e38:	20030000 	.word	0x20030000
 8003e3c:	20030000 	.word	0x20030000
 8003e40:	0802353c 	.word	0x0802353c
  INIT_BSS _sbss, _ebss
 8003e44:	20000268 	.word	0x20000268
 8003e48:	20009a28 	.word	0x20009a28

08003e4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e4c:	e7fe      	b.n	8003e4c <ADC1_IRQHandler>

08003e4e <LL_AHB2_GRP1_EnableClock>:
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <VL53L1A2_Init+0xe4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	4934      	ldr	r1, [pc, #208]	; (8003f64 <VL53L1A2_Init+0xe4>)
 8003e92:	600a      	str	r2, [r1, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d154      	bne.n	8003f42 <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8003e98:	f000 f8d4 	bl	8004044 <_I2cFailRecover>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 8003ea4:	f7ff fb2e 	bl	8003504 <BSP_I2C1_Init>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d147      	bne.n	8003f46 <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8003eb6:	463a      	mov	r2, r7
 8003eb8:	2302      	movs	r3, #2
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2086      	movs	r0, #134	; 0x86
 8003ebe:	f000 f953 	bl	8004168 <_ExpanderRd>
 8003ec2:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d13f      	bne.n	8003f4a <VL53L1A2_Init+0xca>
 8003eca:	783b      	ldrb	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d13c      	bne.n	8003f4a <VL53L1A2_Init+0xca>
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b16      	cmp	r3, #22
 8003ed4:	d139      	bne.n	8003f4a <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8003ed6:	463a      	mov	r2, r7
 8003ed8:	2302      	movs	r3, #2
 8003eda:	2100      	movs	r1, #0
 8003edc:	2084      	movs	r0, #132	; 0x84
 8003ede:	f000 f943 	bl	8004168 <_ExpanderRd>
 8003ee2:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d131      	bne.n	8003f4e <VL53L1A2_Init+0xce>
 8003eea:	783b      	ldrb	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d12e      	bne.n	8003f4e <VL53L1A2_Init+0xce>
 8003ef0:	787b      	ldrb	r3, [r7, #1]
 8003ef2:	2b16      	cmp	r3, #22
 8003ef4:	d12b      	bne.n	8003f4e <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <VL53L1A2_Init+0xe8>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8003efc:	23ff      	movs	r3, #255	; 0xff
 8003efe:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8003f00:	23ff      	movs	r3, #255	; 0xff
 8003f02:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8003f04:	463a      	mov	r2, r7
 8003f06:	2302      	movs	r3, #2
 8003f08:	2114      	movs	r1, #20
 8003f0a:	2086      	movs	r0, #134	; 0x86
 8003f0c:	f000 f95e 	bl	80041cc <_ExpanderWR>
 8003f10:	6078      	str	r0, [r7, #4]

	  if (status)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11c      	bne.n	8003f52 <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8003f18:	23ff      	movs	r3, #255	; 0xff
 8003f1a:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8003f1c:	23bf      	movs	r3, #191	; 0xbf
 8003f1e:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8003f20:	463a      	mov	r2, r7
 8003f22:	2302      	movs	r3, #2
 8003f24:	2114      	movs	r1, #20
 8003f26:	2084      	movs	r0, #132	; 0x84
 8003f28:	f000 f950 	bl	80041cc <_ExpanderWR>
 8003f2c:	6078      	str	r0, [r7, #4]

	  if (status)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <VL53L1A2_Init+0xe8>)
 8003f36:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8003f3a:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8003f3c:	f000 f8f4 	bl	8004128 <_ExpandersSetAllIO>
 8003f40:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8003f42:	bf00      	nop
 8003f44:	e008      	b.n	8003f58 <VL53L1A2_Init+0xd8>
      goto done_err;
 8003f46:	bf00      	nop
 8003f48:	e006      	b.n	8003f58 <VL53L1A2_Init+0xd8>
      goto done_err;
 8003f4a:	bf00      	nop
 8003f4c:	e004      	b.n	8003f58 <VL53L1A2_Init+0xd8>
		  goto done_err;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <VL53L1A2_Init+0xd8>
		goto done_err;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <VL53L1A2_Init+0xd8>
		goto done_err;
 8003f56:	bf00      	nop
  return status;
 8003f58:	687b      	ldr	r3, [r7, #4]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000784 	.word	0x20000784
 8003f68:	20000788 	.word	0x20000788

08003f6c <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	460a      	mov	r2, r1
 8003f76:	71fb      	strb	r3, [r7, #7]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d037      	beq.n	8003ff2 <VL53L1A2_ResetId+0x86>
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	dc4e      	bgt.n	8004024 <VL53L1A2_ResetId+0xb8>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01a      	beq.n	8003fc0 <VL53L1A2_ResetId+0x54>
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d14a      	bne.n	8004024 <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003f90:	78db      	ldrb	r3, [r3, #3]
 8003f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	4b27      	ldr	r3, [pc, #156]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003f9a:	70da      	strb	r2, [r3, #3]

      if (state)
 8003f9c:	79bb      	ldrb	r3, [r7, #6]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d006      	beq.n	8003fb0 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003fa4:	78db      	ldrb	r3, [r3, #3]
 8003fa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b22      	ldr	r3, [pc, #136]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003fae:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4a22      	ldr	r2, [pc, #136]	; (800403c <VL53L1A2_ResetId+0xd0>)
 8003fb4:	2113      	movs	r1, #19
 8003fb6:	2084      	movs	r0, #132	; 0x84
 8003fb8:	f000 f908 	bl	80041cc <_ExpanderWR>
 8003fbc:	60f8      	str	r0, [r7, #12]
      break;
 8003fbe:	e035      	b.n	800402c <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003fcc:	705a      	strb	r2, [r3, #1]

      if (state)
 8003fce:	79bb      	ldrb	r3, [r7, #6]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d006      	beq.n	8003fe2 <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8003fd4:	4b18      	ldr	r3, [pc, #96]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b16      	ldr	r3, [pc, #88]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003fe0:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4a16      	ldr	r2, [pc, #88]	; (8004040 <VL53L1A2_ResetId+0xd4>)
 8003fe6:	2113      	movs	r1, #19
 8003fe8:	2086      	movs	r0, #134	; 0x86
 8003fea:	f000 f8ef 	bl	80041cc <_ExpanderWR>
 8003fee:	60f8      	str	r0, [r7, #12]
      break;
 8003ff0:	e01c      	b.n	800402c <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8003ffe:	705a      	strb	r2, [r3, #1]

      if (state)
 8004000:	79bb      	ldrb	r3, [r7, #6]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <VL53L1A2_ResetId+0xcc>)
 8004012:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8004014:	2301      	movs	r3, #1
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <VL53L1A2_ResetId+0xd4>)
 8004018:	2113      	movs	r1, #19
 800401a:	2086      	movs	r0, #134	; 0x86
 800401c:	f000 f8d6 	bl	80041cc <_ExpanderWR>
 8004020:	60f8      	str	r0, [r7, #12]
      break;
 8004022:	e003      	b.n	800402c <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8004024:	f04f 33ff 	mov.w	r3, #4294967295
 8004028:	60fb      	str	r3, [r7, #12]
      goto done;
 800402a:	e000      	b.n	800402e <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 800402c:	bf00      	nop
  return status;
 800402e:	68fb      	ldr	r3, [r7, #12]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000788 	.word	0x20000788
 800403c:	2000078b 	.word	0x2000078b
 8004040:	20000789 	.word	0x20000789

08004044 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800404e:	4b34      	ldr	r3, [pc, #208]	; (8004120 <_I2cFailRecover+0xdc>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8004056:	2300      	movs	r3, #0
 8004058:	e05e      	b.n	8004118 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800405a:	2002      	movs	r0, #2
 800405c:	f7ff fef7 	bl	8003e4e <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 8004060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004064:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004066:	2311      	movs	r3, #17
 8004068:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800406a:	2301      	movs	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 800406e:	463b      	mov	r3, r7
 8004070:	4619      	mov	r1, r3
 8004072:	482c      	ldr	r0, [pc, #176]	; (8004124 <_I2cFailRecover+0xe0>)
 8004074:	f014 fc88 	bl	8018988 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8004078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800407c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800407e:	2311      	movs	r3, #17
 8004080:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004082:	2301      	movs	r3, #1
 8004084:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004086:	463b      	mov	r3, r7
 8004088:	4619      	mov	r1, r3
 800408a:	4826      	ldr	r0, [pc, #152]	; (8004124 <_I2cFailRecover+0xe0>)
 800408c:	f014 fc7c 	bl	8018988 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8004090:	2201      	movs	r2, #1
 8004092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004096:	4823      	ldr	r0, [pc, #140]	; (8004124 <_I2cFailRecover+0xe0>)
 8004098:	f014 fedc 	bl	8018e54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 800409c:	2201      	movs	r2, #1
 800409e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040a2:	4820      	ldr	r0, [pc, #128]	; (8004124 <_I2cFailRecover+0xe0>)
 80040a4:	f014 fed6 	bl	8018e54 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	75fb      	strb	r3, [r7, #23]
 80040ac:	e014      	b.n	80040d8 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80040ae:	2200      	movs	r2, #0
 80040b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040b4:	481b      	ldr	r0, [pc, #108]	; (8004124 <_I2cFailRecover+0xe0>)
 80040b6:	f014 fecd 	bl	8018e54 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f013 fffe 	bl	80180bc <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80040c0:	2201      	movs	r2, #1
 80040c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c6:	4817      	ldr	r0, [pc, #92]	; (8004124 <_I2cFailRecover+0xe0>)
 80040c8:	f014 fec4 	bl	8018e54 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80040cc:	2001      	movs	r0, #1
 80040ce:	f013 fff5 	bl	80180bc <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	3301      	adds	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	2b09      	cmp	r3, #9
 80040dc:	d9e7      	bls.n	80040ae <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 80040de:	7dbb      	ldrb	r3, [r7, #22]
 80040e0:	3301      	adds	r3, #1
 80040e2:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80040e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040e8:	480e      	ldr	r0, [pc, #56]	; (8004124 <_I2cFailRecover+0xe0>)
 80040ea:	f014 fe9b 	bl	8018e24 <HAL_GPIO_ReadPin>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <_I2cFailRecover+0xb6>
 80040f4:	7dbb      	ldrb	r3, [r7, #22]
 80040f6:	2b06      	cmp	r3, #6
 80040f8:	d9d6      	bls.n	80040a8 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80040fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040fe:	4809      	ldr	r0, [pc, #36]	; (8004124 <_I2cFailRecover+0xe0>)
 8004100:	f014 fe90 	bl	8018e24 <HAL_GPIO_ReadPin>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 800410a:	f06f 0304 	mvn.w	r3, #4
 800410e:	e003      	b.n	8004118 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <_I2cFailRecover+0xdc>)
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	2000078c 	.word	0x2000078c
 8004124:	48000400 	.word	0x48000400

08004128 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800412e:	2302      	movs	r3, #2
 8004130:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <_ExpandersSetAllIO+0x38>)
 8004132:	2112      	movs	r1, #18
 8004134:	2086      	movs	r0, #134	; 0x86
 8004136:	f000 f849 	bl	80041cc <_ExpanderWR>
 800413a:	6078      	str	r0, [r7, #4]

  if (status)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 8004142:	2302      	movs	r3, #2
 8004144:	4a07      	ldr	r2, [pc, #28]	; (8004164 <_ExpandersSetAllIO+0x3c>)
 8004146:	2112      	movs	r1, #18
 8004148:	2084      	movs	r0, #132	; 0x84
 800414a:	f000 f83f 	bl	80041cc <_ExpanderWR>
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	e000      	b.n	8004154 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 8004152:	bf00      	nop

done_err:
  return status;
 8004154:	687b      	ldr	r3, [r7, #4]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000788 	.word	0x20000788
 8004164:	2000078a 	.word	0x2000078a

08004168 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	b299      	uxth	r1, r3
 8004180:	f107 0213 	add.w	r2, r7, #19
 8004184:	2364      	movs	r3, #100	; 0x64
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2301      	movs	r3, #1
 800418a:	480f      	ldr	r0, [pc, #60]	; (80041c8 <_ExpanderRd+0x60>)
 800418c:	f014 ff6a 	bl	8019064 <HAL_I2C_Master_Transmit>
 8004190:	4603      	mov	r3, r0
 8004192:	617b      	str	r3, [r7, #20]

    if (status)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d110      	bne.n	80041bc <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	b299      	uxth	r1, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2064      	movs	r0, #100	; 0x64
 80041a6:	fb00 f303 	mul.w	r3, r0, r3
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4805      	ldr	r0, [pc, #20]	; (80041c8 <_ExpanderRd+0x60>)
 80041b2:	f015 f84b 	bl	801924c <HAL_I2C_Master_Receive>
 80041b6:	4603      	mov	r3, r0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e000      	b.n	80041be <_ExpanderRd+0x56>
      break;
 80041bc:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 80041be:	697b      	ldr	r3, [r7, #20]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200002f4 	.word	0x200002f4

080041cc <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	3301      	adds	r3, #1
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f01b f956 	bl	801f49c <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	b299      	uxth	r1, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3301      	adds	r3, #1
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f107 0214 	add.w	r2, r7, #20
 8004200:	2064      	movs	r0, #100	; 0x64
 8004202:	9000      	str	r0, [sp, #0]
 8004204:	4804      	ldr	r0, [pc, #16]	; (8004218 <_ExpanderWR+0x4c>)
 8004206:	f014 ff2d 	bl	8019064 <HAL_I2C_Master_Transmit>
 800420a:	4603      	mov	r3, r0
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004210:	4618      	mov	r0, r3
 8004212:	3728      	adds	r7, #40	; 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	200002f4 	.word	0x200002f4

0800421c <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d903      	bls.n	8004232 <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800422a:	f06f 0301 	mvn.w	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e014      	b.n	800425c <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 8004232:	f7ff fe25 	bl	8003e80 <VL53L1A2_Init>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800423c:	f06f 0303 	mvn.w	r3, #3
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e00b      	b.n	800425c <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8004244:	2101      	movs	r1, #1
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8fc 	bl	8004444 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 800424c:	2100      	movs	r1, #0
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8f8 	bl	8004444 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f935 	bl	80044c4 <VL53L1CB_Probe>
 800425a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d903      	bls.n	8004280 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004278:	f06f 0301 	mvn.w	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e012      	b.n	80042a6 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	490b      	ldr	r1, [pc, #44]	; (80042b4 <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800428e:	6839      	ldr	r1, [r7, #0]
 8004290:	4610      	mov	r0, r2
 8004292:	4798      	blx	r3
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	da03      	bge.n	80042a2 <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800429a:	f06f 0304 	mvn.w	r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e001      	b.n	80042a6 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	2000079c 	.word	0x2000079c
 80042b4:	20000790 	.word	0x20000790

080042b8 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d903      	bls.n	80042d0 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042c8:	f06f 0301 	mvn.w	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e012      	b.n	80042f6 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	490b      	ldr	r1, [pc, #44]	; (8004304 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	4610      	mov	r0, r2
 80042e2:	4798      	blx	r3
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	da03      	bge.n	80042f2 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80042ea:	f06f 0304 	mvn.w	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e001      	b.n	80042f6 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	2000079c 	.word	0x2000079c
 8004304:	20000790 	.word	0x20000790

08004308 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d903      	bls.n	8004320 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004318:	f06f 0301 	mvn.w	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	e012      	b.n	8004346 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	490b      	ldr	r1, [pc, #44]	; (8004354 <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	4610      	mov	r0, r2
 8004332:	4798      	blx	r3
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	da03      	bge.n	8004342 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800433a:	f06f 0304 	mvn.w	r3, #4
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e001      	b.n	8004346 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	2000079c 	.word	0x2000079c
 8004354:	20000790 	.word	0x20000790

08004358 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d903      	bls.n	8004370 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004368:	f06f 0301 	mvn.w	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e012      	b.n	8004396 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	490b      	ldr	r1, [pc, #44]	; (80043a4 <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800437e:	6839      	ldr	r1, [r7, #0]
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	da03      	bge.n	8004392 <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800438a:	f06f 0304 	mvn.w	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e001      	b.n	8004396 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	2000079c 	.word	0x2000079c
 80043a4:	20000790 	.word	0x20000790

080043a8 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d903      	bls.n	80043be <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043b6:	f06f 0301 	mvn.w	r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e011      	b.n	80043e2 <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	490a      	ldr	r1, [pc, #40]	; (80043f0 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80043cc:	4610      	mov	r0, r2
 80043ce:	4798      	blx	r3
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da03      	bge.n	80043de <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043d6:	f06f 0304 	mvn.w	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e001      	b.n	80043e2 <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80043e2:	68fb      	ldr	r3, [r7, #12]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	2000079c 	.word	0x2000079c
 80043f0:	20000790 	.word	0x20000790

080043f4 <VL53L1A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d903      	bls.n	800440c <VL53L1A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004404:	f06f 0301 	mvn.w	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e012      	b.n	8004432 <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <VL53L1A2_RANGING_SENSOR_SetAddress+0x48>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	490b      	ldr	r1, [pc, #44]	; (8004440 <VL53L1A2_RANGING_SENSOR_SetAddress+0x4c>)
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	4610      	mov	r0, r2
 800441e:	4798      	blx	r3
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	da03      	bge.n	800442e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004426:	f06f 0304 	mvn.w	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e001      	b.n	8004432 <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2000079c 	.word	0x2000079c
 8004440:	20000790 	.word	0x20000790

08004444 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d903      	bls.n	800445c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004454:	f06f 0301 	mvn.w	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e02e      	b.n	80044ba <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d112      	bne.n	8004488 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2101      	movs	r1, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fd7f 	bl	8003f6c <VL53L1A2_ResetId>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	da03      	bge.n	800447c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004474:	f06f 0303 	mvn.w	r3, #3
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e01e      	b.n	80044ba <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 800447c:	2002      	movs	r0, #2
 800447e:	f013 fe1d 	bl	80180bc <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e018      	b.n	80044ba <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d112      	bne.n	80044b4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fd69 	bl	8003f6c <VL53L1A2_ResetId>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	da03      	bge.n	80044a8 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80044a0:	f06f 0303 	mvn.w	r3, #3
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e008      	b.n	80044ba <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 80044a8:	2002      	movs	r0, #2
 80044aa:	f013 fe07 	bl	80180bc <HAL_Delay>
      ret = BSP_ERROR_NONE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e002      	b.n	80044ba <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80044b4:	f06f 0301 	mvn.w	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 80044cc:	2352      	movs	r3, #82	; 0x52
 80044ce:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 80044d0:	4b38      	ldr	r3, [pc, #224]	; (80045b4 <VL53L1CB_Probe+0xf0>)
 80044d2:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 80044d4:	4b38      	ldr	r3, [pc, #224]	; (80045b8 <VL53L1CB_Probe+0xf4>)
 80044d6:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 80044d8:	4b38      	ldr	r3, [pc, #224]	; (80045bc <VL53L1CB_Probe+0xf8>)
 80044da:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 80044dc:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <VL53L1CB_Probe+0xfc>)
 80044de:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 80044e0:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <VL53L1CB_Probe+0x100>)
 80044e2:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f642 2290 	movw	r2, #10896	; 0x2a90
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	4a36      	ldr	r2, [pc, #216]	; (80045c8 <VL53L1CB_Probe+0x104>)
 80044f0:	4413      	add	r3, r2
 80044f2:	f107 020c 	add.w	r2, r7, #12
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f013 f824 	bl	8017546 <VL53L1CB_RegisterBusIO>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004504:	f06f 0304 	mvn.w	r3, #4
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	e04d      	b.n	80045a8 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <VL53L1CB_Probe+0x104>)
 8004518:	4413      	add	r3, r2
 800451a:	f107 0208 	add.w	r2, r7, #8
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f013 f8cc 	bl	80176be <VL53L1CB_ReadID>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800452c:	f06f 0304 	mvn.w	r3, #4
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e039      	b.n	80045a8 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800453e:	f06f 0306 	mvn.w	r3, #6
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	e030      	b.n	80045a8 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8004546:	4b21      	ldr	r3, [pc, #132]	; (80045cc <VL53L1CB_Probe+0x108>)
 8004548:	4a21      	ldr	r2, [pc, #132]	; (80045d0 <VL53L1CB_Probe+0x10c>)
 800454a:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <VL53L1CB_Probe+0x104>)
 8004558:	441a      	add	r2, r3
 800455a:	491e      	ldr	r1, [pc, #120]	; (80045d4 <VL53L1CB_Probe+0x110>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <VL53L1CB_Probe+0x108>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	491a      	ldr	r1, [pc, #104]	; (80045d4 <VL53L1CB_Probe+0x110>)
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004570:	4610      	mov	r0, r2
 8004572:	4798      	blx	r3
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800457a:	f06f 0304 	mvn.w	r3, #4
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
 8004580:	e012      	b.n	80045a8 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <VL53L1CB_Probe+0x108>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4912      	ldr	r1, [pc, #72]	; (80045d4 <VL53L1CB_Probe+0x110>)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004590:	4911      	ldr	r1, [pc, #68]	; (80045d8 <VL53L1CB_Probe+0x114>)
 8004592:	4610      	mov	r0, r2
 8004594:	4798      	blx	r3
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800459c:	f06f 0304 	mvn.w	r3, #4
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e001      	b.n	80045a8 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3728      	adds	r7, #40	; 0x28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	08003505 	.word	0x08003505
 80045b8:	08003581 	.word	0x08003581
 80045bc:	080035d1 	.word	0x080035d1
 80045c0:	08003625 	.word	0x08003625
 80045c4:	08003679 	.word	0x08003679
 80045c8:	200007b0 	.word	0x200007b0
 80045cc:	2000079c 	.word	0x2000079c
 80045d0:	20000048 	.word	0x20000048
 80045d4:	20000790 	.word	0x20000790
 80045d8:	200007a0 	.word	0x200007a0

080045dc <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80045e8:	793b      	ldrb	r3, [r7, #4]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d808      	bhi.n	8004600 <CheckValidRectRoi+0x24>
 80045ee:	797b      	ldrb	r3, [r7, #5]
 80045f0:	2b0f      	cmp	r3, #15
 80045f2:	d805      	bhi.n	8004600 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80045f4:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80045f6:	2b0f      	cmp	r3, #15
 80045f8:	d802      	bhi.n	8004600 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	2b0f      	cmp	r3, #15
 80045fe:	d901      	bls.n	8004604 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004600:	23fc      	movs	r3, #252	; 0xfc
 8004602:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8004604:	793a      	ldrb	r2, [r7, #4]
 8004606:	79bb      	ldrb	r3, [r7, #6]
 8004608:	429a      	cmp	r2, r3
 800460a:	d803      	bhi.n	8004614 <CheckValidRectRoi+0x38>
 800460c:	797a      	ldrb	r2, [r7, #5]
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	429a      	cmp	r2, r3
 8004612:	d201      	bcs.n	8004618 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004614:	23fc      	movs	r3, #252	; 0xfc
 8004616:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004634:	2300      	movs	r3, #0
 8004636:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3318      	adds	r3, #24
 800463c:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004644:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	2101      	movs	r1, #1
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f012 fd7d 	bl	8017150 <VL53L1_WrByte>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800466a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800468a:	2101      	movs	r1, #1
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f002 fc56 	bl	8006f3e <VL53L1_data_init>
 8004692:	4603      	mov	r3, r0
 8004694:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3318      	adds	r3, #24
 80046a2:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80046aa:	3308      	adds	r3, #8
 80046ac:	220c      	movs	r2, #12
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f01a ff1b 	bl	801f4ec <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 80046b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80046ca:	2300      	movs	r3, #0
 80046cc:	73bb      	strb	r3, [r7, #14]
 80046ce:	e012      	b.n	80046f6 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 80046d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d112      	bne.n	80046fe <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80046d8:	7bbb      	ldrb	r3, [r7, #14]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2201      	movs	r2, #1
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fc90 	bl	8005006 <VL53L1_SetLimitCheckEnable>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	3301      	adds	r3, #1
 80046f4:	73bb      	strb	r3, [r7, #14]
 80046f6:	7bbb      	ldrb	r3, [r7, #14]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d9e9      	bls.n	80046d0 <VL53L1_DataInit+0x5a>
 80046fc:	e000      	b.n	8004700 <VL53L1_DataInit+0x8a>
		else
			break;
 80046fe:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8004700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8004708:	2102      	movs	r1, #2
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f005 faef 	bl	8009cee <VL53L1_set_dmax_mode>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004732:	2203      	movs	r2, #3
 8004734:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004738:	2320      	movs	r3, #32
 800473a:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7bba      	ldrb	r2, [r7, #14]
 8004740:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8004742:	2101      	movs	r1, #1
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f947 	bl	80049d8 <VL53L1_SetPresetMode>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 800474e:	2102      	movs	r1, #2
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f98b 	bl	8004a6c <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8004762:	2100      	movs	r1, #0
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 fe69 	bl	800643c <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 800476a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8004782:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f011 ffa1 	bl	80166ce <VL53L1_poll_for_boot_completion>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800479c:	b480      	push	{r7}
 800479e:	b089      	sub	sp, #36	; 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	603a      	str	r2, [r7, #0]
 80047a6:	71fb      	strb	r3, [r7, #7]
 80047a8:	460b      	mov	r3, r1
 80047aa:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80047b0:	4a48      	ldr	r2, [pc, #288]	; (80048d4 <ComputeDevicePresetMode+0x138>)
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	4611      	mov	r1, r2
 80047ba:	8019      	strh	r1, [r3, #0]
 80047bc:	3302      	adds	r3, #2
 80047be:	0c12      	lsrs	r2, r2, #16
 80047c0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 80047c2:	4a45      	ldr	r2, [pc, #276]	; (80048d8 <ComputeDevicePresetMode+0x13c>)
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	4611      	mov	r1, r2
 80047cc:	8019      	strh	r1, [r3, #0]
 80047ce:	3302      	adds	r3, #2
 80047d0:	0c12      	lsrs	r2, r2, #16
 80047d2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 80047d4:	4a41      	ldr	r2, [pc, #260]	; (80048dc <ComputeDevicePresetMode+0x140>)
 80047d6:	f107 0310 	add.w	r3, r7, #16
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	4611      	mov	r1, r2
 80047de:	8019      	strh	r1, [r3, #0]
 80047e0:	3302      	adds	r3, #2
 80047e2:	0c12      	lsrs	r2, r2, #16
 80047e4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 80047e6:	4a3e      	ldr	r2, [pc, #248]	; (80048e0 <ComputeDevicePresetMode+0x144>)
 80047e8:	f107 030c 	add.w	r3, r7, #12
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4611      	mov	r1, r2
 80047f0:	8019      	strh	r1, [r3, #0]
 80047f2:	3302      	adds	r3, #2
 80047f4:	0c12      	lsrs	r2, r2, #16
 80047f6:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80047f8:	4a3a      	ldr	r2, [pc, #232]	; (80048e4 <ComputeDevicePresetMode+0x148>)
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	4611      	mov	r1, r2
 8004802:	8019      	strh	r1, [r3, #0]
 8004804:	3302      	adds	r3, #2
 8004806:	0c12      	lsrs	r2, r2, #16
 8004808:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8004810:	79bb      	ldrb	r3, [r7, #6]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d002      	beq.n	800481c <ComputeDevicePresetMode+0x80>
 8004816:	2b02      	cmp	r3, #2
 8004818:	d003      	beq.n	8004822 <ComputeDevicePresetMode+0x86>
 800481a:	e005      	b.n	8004828 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	77bb      	strb	r3, [r7, #30]
		break;
 8004820:	e004      	b.n	800482c <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	77bb      	strb	r3, [r7, #30]
		break;
 8004826:	e001      	b.n	800482c <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8004828:	2302      	movs	r3, #2
 800482a:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	3b01      	subs	r3, #1
 8004830:	2b08      	cmp	r3, #8
 8004832:	d845      	bhi.n	80048c0 <ComputeDevicePresetMode+0x124>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <ComputeDevicePresetMode+0xa0>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004871 	.word	0x08004871
 8004840:	08004881 	.word	0x08004881
 8004844:	08004891 	.word	0x08004891
 8004848:	08004861 	.word	0x08004861
 800484c:	080048c1 	.word	0x080048c1
 8004850:	080048c1 	.word	0x080048c1
 8004854:	080048b1 	.word	0x080048b1
 8004858:	080048a1 	.word	0x080048a1
 800485c:	080048b9 	.word	0x080048b9
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8004860:	7fbb      	ldrb	r3, [r7, #30]
 8004862:	3320      	adds	r3, #32
 8004864:	443b      	add	r3, r7
 8004866:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	701a      	strb	r2, [r3, #0]
		break;
 800486e:	e029      	b.n	80048c4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8004870:	7fbb      	ldrb	r3, [r7, #30]
 8004872:	3320      	adds	r3, #32
 8004874:	443b      	add	r3, r7
 8004876:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	701a      	strb	r2, [r3, #0]
		break;
 800487e:	e021      	b.n	80048c4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8004880:	7fbb      	ldrb	r3, [r7, #30]
 8004882:	3320      	adds	r3, #32
 8004884:	443b      	add	r3, r7
 8004886:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	701a      	strb	r2, [r3, #0]
		break;
 800488e:	e019      	b.n	80048c4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8004890:	7fbb      	ldrb	r3, [r7, #30]
 8004892:	3320      	adds	r3, #32
 8004894:	443b      	add	r3, r7
 8004896:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	701a      	strb	r2, [r3, #0]
		break;
 800489e:	e011      	b.n	80048c4 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80048a0:	7fbb      	ldrb	r3, [r7, #30]
 80048a2:	3320      	adds	r3, #32
 80048a4:	443b      	add	r3, r7
 80048a6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	701a      	strb	r2, [r3, #0]
		break;
 80048ae:	e009      	b.n	80048c4 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2211      	movs	r2, #17
 80048b4:	701a      	strb	r2, [r3, #0]
		break;
 80048b6:	e005      	b.n	80048c4 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2227      	movs	r2, #39	; 0x27
 80048bc:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 80048be:	e001      	b.n	80048c4 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80048c0:	23f8      	movs	r3, #248	; 0xf8
 80048c2:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 80048c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3724      	adds	r7, #36	; 0x24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	08022270 	.word	0x08022270
 80048d8:	08022274 	.word	0x08022274
 80048dc:	08022278 	.word	0x08022278
 80048e0:	0802227c 	.word	0x0802227c
 80048e4:	08022280 	.word	0x08022280

080048e8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af04      	add	r7, sp, #16
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	72fb      	strb	r3, [r7, #11]
 80048f6:	4613      	mov	r3, r2
 80048f8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004910:	7afb      	ldrb	r3, [r7, #11]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d002      	beq.n	800491c <SetPresetMode+0x34>
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d103      	bne.n	8004924 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800491c:	2340      	movs	r3, #64	; 0x40
 800491e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004922:	e002      	b.n	800492a <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004924:	2320      	movs	r3, #32
 8004926:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800492a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800492e:	7ab9      	ldrb	r1, [r7, #10]
 8004930:	7afb      	ldrb	r3, [r7, #11]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ff32 	bl	800479c <ComputeDevicePresetMode>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800493e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004942:	2b00      	cmp	r3, #0
 8004944:	d112      	bne.n	800496c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8004946:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800494a:	f107 001c 	add.w	r0, r7, #28
 800494e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	f107 0318 	add.w	r3, r7, #24
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4603      	mov	r3, r0
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f002 ffaf 	bl	80078c4 <VL53L1_get_preset_mode_timing_cfg>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800496c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004970:	2b00      	cmp	r3, #0
 8004972:	d112      	bne.n	800499a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8004974:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8004978:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800497a:	69fd      	ldr	r5, [r7, #28]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	9102      	str	r1, [sp, #8]
 8004984:	9201      	str	r2, [sp, #4]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	462b      	mov	r3, r5
 800498a:	4622      	mov	r2, r4
 800498c:	4601      	mov	r1, r0
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f003 f8ee 	bl	8007b70 <VL53L1_set_preset_mode>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800499a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80049a8:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 80049aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80049b8:	461a      	mov	r2, r3
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 80049cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bdb0      	pop	{r4, r5, r7, pc}

080049d8 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 80049e8:	2303      	movs	r3, #3
 80049ea:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f00c f94a 	bl	8010c86 <VL53L1_low_power_auto_data_init>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	2b09      	cmp	r3, #9
 80049fa:	d101      	bne.n	8004a00 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8004a00:	7bba      	ldrb	r2, [r7, #14]
 8004a02:	78f9      	ldrb	r1, [r7, #3]
 8004a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff ff6d 	bl	80048e8 <SetPresetMode>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d117      	bne.n	8004a4a <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d005      	beq.n	8004a2c <VL53L1_SetPresetMode+0x54>
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d002      	beq.n	8004a2c <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d107      	bne.n	8004a3c <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004a2c:	f24a 0128 	movw	r1, #41000	; 0xa028
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f8a9 	bl	8004b88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	e006      	b.n	8004a4a <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004a3c:	f248 2135 	movw	r1, #33333	; 0x8235
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8a1 	bl	8004b88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8004a52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa68 	bl	8004f2c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b0a2      	sub	sp, #136	; 0x88
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a90:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004a94:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8004a98:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	d105      	bne.n	8004aac <VL53L1_SetDistanceMode+0x40>
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d002      	beq.n	8004aac <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8004aa6:	f06f 0303 	mvn.w	r3, #3
 8004aaa:	e069      	b.n	8004b80 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d008      	beq.n	8004ac4 <VL53L1_SetDistanceMode+0x58>
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d005      	beq.n	8004ac4 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d002      	beq.n	8004ac4 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8004abe:	f06f 0303 	mvn.w	r3, #3
 8004ac2:	e05d      	b.n	8004b80 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8004ac4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d108      	bne.n	8004ade <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8004acc:	f107 0308 	add.w	r3, r7, #8
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f002 fede 	bl	8007894 <VL53L1_get_zone_config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8004ae6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8004aee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004af2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004af6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f002 fd8a 	bl	8007614 <VL53L1_get_timeouts_us>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8004b06:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8004b0e:	78fa      	ldrb	r2, [r7, #3]
 8004b10:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8004b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fee5 	bl	80048e8 <SetPresetMode>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8004b24:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b32:	461a      	mov	r2, r3
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004b3a:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004b42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004b44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f002 fd2a 	bl	80075a2 <VL53L1_set_timeouts_us>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8004b54:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8004b5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004b62:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f002 fe4c 	bl	800780e <VL53L1_set_zone_config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8004b7c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3788      	adds	r7, #136	; 0x88
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08c      	sub	sp, #48	; 0x30
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004bac:	4b75      	ldr	r3, [pc, #468]	; (8004d84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8004bae:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4a75      	ldr	r2, [pc, #468]	; (8004d88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d902      	bls.n	8004bbe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004bb8:	23fc      	movs	r3, #252	; 0xfc
 8004bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8004bbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004bc6:	f107 031a 	add.w	r3, r7, #26
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2105      	movs	r1, #5
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fb9a 	bl	8005308 <VL53L1_GetSequenceStepEnable>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004bda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004be2:	f107 0319 	add.w	r3, r7, #25
 8004be6:	461a      	mov	r2, r3
 8004be8:	2106      	movs	r1, #6
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb8c 	bl	8005308 <VL53L1_GetSequenceStepEnable>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004bf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	f107 0210 	add.w	r2, r7, #16
 8004c06:	f107 010c 	add.w	r1, r7, #12
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f002 fd02 	bl	8007614 <VL53L1_get_timeouts_us>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8004c16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 80a0 	bne.w	8004d60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004c26:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004c2a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8004c34:	7efb      	ldrb	r3, [r7, #27]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d861      	bhi.n	8004d00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004ce9 	.word	0x08004ce9
 8004c48:	08004ce9 	.word	0x08004ce9
 8004c4c:	08004c85 	.word	0x08004c85
 8004c50:	08004c69 	.word	0x08004c69
 8004c54:	08004d01 	.word	0x08004d01
 8004c58:	08004d01 	.word	0x08004d01
 8004c5c:	08004cf5 	.word	0x08004cf5
 8004c60:	08004cab 	.word	0x08004cab
 8004c64:	08004ce9 	.word	0x08004ce9
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004c68:	7ebb      	ldrb	r3, [r7, #26]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d002      	beq.n	8004c74 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8004c6e:	7e7b      	ldrb	r3, [r7, #25]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d103      	bne.n	8004c7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8004c74:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8004c7a:	e044      	b.n	8004d06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8004c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004c82:	e040      	b.n	8004d06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004c8a:	7ebb      	ldrb	r3, [r7, #26]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d002      	beq.n	8004c96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8004c90:	7e7b      	ldrb	r3, [r7, #25]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d103      	bne.n	8004c9e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8004c96:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9c:	e002      	b.n	8004ca4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8004c9e:	f245 4360 	movw	r3, #21600	; 0x5460
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8004ca8:	e02d      	b.n	8004d06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004cb0:	23f5      	movs	r3, #245	; 0xf5
 8004cb2:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8004cb4:	f107 0308 	add.w	r3, r7, #8
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f248 0188 	movw	r1, #32904	; 0x8088
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f005 f88c 	bl	8009ddc <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dd07      	ble.n	8004cda <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	22f5      	movs	r2, #245	; 0xf5
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8004ce6:	e00e      	b.n	8004d06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8004ce8:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8004cee:	2306      	movs	r3, #6
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8004cf2:	e008      	b.n	8004d06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004cfe:	e002      	b.n	8004d06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004d00:	23f8      	movs	r3, #248	; 0xf8
 8004d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d803      	bhi.n	8004d16 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004d0e:	23fc      	movs	r3, #252	; 0xfc
 8004d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d14:	e003      	b.n	8004d1e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8004d1c:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8004d1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11c      	bne.n	8004d60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d203      	bcs.n	8004d36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004d2e:	23fc      	movs	r3, #252	; 0xfc
 8004d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d34:	e00d      	b.n	8004d52 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f002 fc2b 	bl	80075a2 <VL53L1_set_timeouts_us>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8004d52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8004d60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004d6e:	461a      	mov	r2, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3730      	adds	r7, #48	; 0x30
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	00086470 	.word	0x00086470
 8004d88:	00989680 	.word	0x00989680

08004d8c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08c      	sub	sp, #48	; 0x30
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8004dba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004dc2:	f107 031b 	add.w	r3, r7, #27
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2105      	movs	r1, #5
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa9c 	bl	8005308 <VL53L1_GetSequenceStepEnable>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004dd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004dde:	f107 031a 	add.w	r3, r7, #26
 8004de2:	461a      	mov	r2, r3
 8004de4:	2106      	movs	r1, #6
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa8e 	bl	8005308 <VL53L1_GetSequenceStepEnable>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004df2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8004dfa:	f107 0310 	add.w	r3, r7, #16
 8004dfe:	f107 0214 	add.w	r2, r7, #20
 8004e02:	f107 010c 	add.w	r1, r7, #12
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f002 fc04 	bl	8007614 <VL53L1_get_timeouts_us>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8004e12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d179      	bne.n	8004f0e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004e20:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8004e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d869      	bhi.n	8004f06 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004ee5 	.word	0x08004ee5
 8004e3c:	08004ee5 	.word	0x08004ee5
 8004e40:	08004e7f 	.word	0x08004e7f
 8004e44:	08004e5d 	.word	0x08004e5d
 8004e48:	08004f07 	.word	0x08004f07
 8004e4c:	08004f07 	.word	0x08004f07
 8004e50:	08004ef7 	.word	0x08004ef7
 8004e54:	08004ea7 	.word	0x08004ea7
 8004e58:	08004ee5 	.word	0x08004ee5
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004e5c:	7efb      	ldrb	r3, [r7, #27]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d002      	beq.n	8004e68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 8004e62:	7ebb      	ldrb	r3, [r7, #26]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004e6e:	3308      	adds	r3, #8
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8004e72:	e04d      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004e7c:	e048      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004e7e:	7efb      	ldrb	r3, [r7, #27]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d002      	beq.n	8004e8a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8004e84:	7ebb      	ldrb	r3, [r7, #26]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d106      	bne.n	8004e98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8004e90:	3334      	adds	r3, #52	; 0x34
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8004e96:	e03b      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8004e9e:	3330      	adds	r3, #48	; 0x30
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004ea4:	e034      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004ea6:	23f5      	movs	r3, #245	; 0xf5
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8004eaa:	f107 0308 	add.w	r3, r7, #8
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f248 0188 	movw	r1, #32904	; 0x8088
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f004 ff91 	bl	8009ddc <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	dd07      	ble.n	8004ed0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	22f5      	movs	r2, #245	; 0xf5
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	4413      	add	r3, r2
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8004ed6:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004ee2:	e015      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8004ef2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004ef4:	e00c      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004f00:	3308      	adds	r3, #8
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004f04:	e004      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004f06:	23f8      	movs	r3, #248	; 0xf8
 8004f08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004f0c:	e000      	b.n	8004f10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 8004f0e:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8004f10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004f1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3730      	adds	r7, #48	; 0x30
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop

08004f2c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	019b      	lsls	r3, r3, #6
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	099b      	lsrs	r3, r3, #6
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f002 facc 	bl	80074f0 <VL53L1_set_inter_measurement_period_ms>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8004f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	10624dd3 	.word	0x10624dd3

08004f6c <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f002 fae3 	bl	800754c <VL53L1_get_inter_measurement_period_ms>
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	019b      	lsls	r3, r3, #6
 8004f90:	4907      	ldr	r1, [pc, #28]	; (8004fb0 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8004f92:	fba1 1303 	umull	r1, r3, r1, r3
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 8004fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	10624dd3 	.word	0x10624dd3

08004fb4 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004fc6:	897b      	ldrh	r3, [r7, #10]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <SetLimitValue+0x1e>
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d009      	beq.n	8004fe4 <SetLimitValue+0x30>
 8004fd0:	e011      	b.n	8004ff6 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0b9b      	lsrs	r3, r3, #14
 8004fd6:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004fd8:	8abb      	ldrh	r3, [r7, #20]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f003 f988 	bl	80082f2 <VL53L1_set_lite_sigma_threshold>
		break;
 8004fe2:	e00a      	b.n	8004ffa <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	0a5b      	lsrs	r3, r3, #9
 8004fe8:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004fea:	8abb      	ldrh	r3, [r7, #20]
 8004fec:	4619      	mov	r1, r3
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f003 f9ad 	bl	800834e <VL53L1_set_lite_min_count_rate>
		break;
 8004ff4:	e001      	b.n	8004ffa <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004ff6:	23fc      	movs	r3, #252	; 0xfc
 8004ff8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	807b      	strh	r3, [r7, #2]
 8005012:	4613      	mov	r3, r2
 8005014:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800501e:	887b      	ldrh	r3, [r7, #2]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d902      	bls.n	800502a <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005024:	23fc      	movs	r3, #252	; 0xfc
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	e015      	b.n	8005056 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 800502a:	787b      	ldrb	r3, [r7, #1]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	e007      	b.n	8005046 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffb1 	bl	8004fb4 <SetLimitValue>
 8005052:	4603      	mov	r3, r0
 8005054:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8005056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10e      	bne.n	800507c <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800505e:	787b      	ldrb	r3, [r7, #1]
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2da      	uxtb	r2, r3
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	4611      	mov	r1, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4413      	add	r3, r2
 8005072:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8005076:	3334      	adds	r3, #52	; 0x34
 8005078:	460a      	mov	r2, r1
 800507a:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800507c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	460b      	mov	r3, r1
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d905      	bls.n	80050ac <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80050a0:	23fc      	movs	r3, #252	; 0xfc
 80050a2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e00a      	b.n	80050c2 <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80050ac:	897b      	ldrh	r3, [r7, #10]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80050b6:	3334      	adds	r3, #52	; 0x34
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7dba      	ldrb	r2, [r7, #22]
 80050c0:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80050c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b088      	sub	sp, #32
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	460b      	mov	r3, r1
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80050e8:	897b      	ldrh	r3, [r7, #10]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <VL53L1_GetLimitCheckValue+0x22>
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d00c      	beq.n	800510c <VL53L1_GetLimitCheckValue+0x3a>
 80050f2:	e017      	b.n	8005124 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	4619      	mov	r1, r3
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f003 f8e2 	bl	80082c4 <VL53L1_get_lite_sigma_threshold>
 8005100:	4603      	mov	r3, r0
 8005102:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8005104:	8abb      	ldrh	r3, [r7, #20]
 8005106:	039b      	lsls	r3, r3, #14
 8005108:	61bb      	str	r3, [r7, #24]
		break;
 800510a:	e00d      	b.n	8005128 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800510c:	f107 0316 	add.w	r3, r7, #22
 8005110:	4619      	mov	r1, r3
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f003 f904 	bl	8008320 <VL53L1_get_lite_min_count_rate>
 8005118:	4603      	mov	r3, r0
 800511a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800511c:	8afb      	ldrh	r3, [r7, #22]
 800511e:	025b      	lsls	r3, r3, #9
 8005120:	61bb      	str	r3, [r7, #24]
		break;
 8005122:	e001      	b.n	8005128 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005124:	23fc      	movs	r3, #252	; 0xfc
 8005126:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8005128:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d129      	bne.n	8005184 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8005136:	897b      	ldrh	r3, [r7, #10]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800514c:	897b      	ldrh	r3, [r7, #10]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8005156:	3334      	adds	r3, #52	; 0x34
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e012      	b.n	8005184 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005164:	897b      	ldrh	r3, [r7, #10]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005174:	897b      	ldrh	r3, [r7, #10]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800517e:	3334      	adds	r3, #52	; 0x34
 8005180:	2201      	movs	r2, #1
 8005182:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8005184:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0a0      	sub	sp, #128	; 0x80
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800519a:	2300      	movs	r3, #0
 800519c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051ac:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80051b0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 80051b4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d102      	bne.n	80051c2 <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 80051bc:	2310      	movs	r3, #16
 80051be:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d303      	bcc.n	80051d6 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80051d6:	23fc      	movs	r3, #252	; 0xfc
 80051d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 80051dc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d17e      	bne.n	80052e2 <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80051e4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80051e8:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80051fa:	e06a      	b.n	80052d2 <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80051fc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	f107 0208 	add.w	r2, r7, #8
 800520a:	3301      	adds	r3, #1
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 8005210:	68b8      	ldr	r0, [r7, #8]
 8005212:	f7ff f9e3 	bl	80045dc <CheckValidRectRoi>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 800521c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d15d      	bne.n	80052e0 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8005224:	7abb      	ldrb	r3, [r7, #10]
 8005226:	461a      	mov	r2, r3
 8005228:	7a3b      	ldrb	r3, [r7, #8]
 800522a:	4413      	add	r3, r2
 800522c:	3301      	adds	r3, #1
					/ 2;
 800522e:	0fda      	lsrs	r2, r3, #31
 8005230:	4413      	add	r3, r2
 8005232:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8005234:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8005238:	7a7b      	ldrb	r3, [r7, #9]
 800523a:	461a      	mov	r2, r3
 800523c:	7afb      	ldrb	r3, [r7, #11]
 800523e:	4413      	add	r3, r2
 8005240:	3301      	adds	r3, #1
					/ 2;
 8005242:	0fda      	lsrs	r2, r3, #31
 8005244:	4413      	add	r3, r2
 8005246:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8005248:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 800524c:	7aba      	ldrb	r2, [r7, #10]
 800524e:	7a3b      	ldrb	r3, [r7, #8]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8005256:	7a7a      	ldrb	r2, [r7, #9]
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8005260:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005264:	2b02      	cmp	r3, #2
 8005266:	d903      	bls.n	8005270 <VL53L1_SetROI+0xe0>
 8005268:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800526c:	2b02      	cmp	r3, #2
 800526e:	d803      	bhi.n	8005278 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8005270:	23fc      	movs	r3, #252	; 0xfc
 8005272:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8005276:	e034      	b.n	80052e2 <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8005278:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800527c:	3306      	adds	r3, #6
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	3380      	adds	r3, #128	; 0x80
 8005282:	443b      	add	r3, r7
 8005284:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8005288:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 800528c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8005290:	3306      	adds	r3, #6
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	3380      	adds	r3, #128	; 0x80
 8005296:	443b      	add	r3, r7
 8005298:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 800529c:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 80052a0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80052a4:	3306      	adds	r3, #6
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	3380      	adds	r3, #128	; 0x80
 80052aa:	443b      	add	r3, r7
 80052ac:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80052b0:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 80052b4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80052b8:	3306      	adds	r3, #6
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	3380      	adds	r3, #128	; 0x80
 80052be:	443b      	add	r3, r7
 80052c0:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80052c4:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80052c8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80052cc:	3301      	adds	r3, #1
 80052ce:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80052da:	429a      	cmp	r2, r3
 80052dc:	d38e      	bcc.n	80051fc <VL53L1_SetROI+0x6c>
 80052de:	e000      	b.n	80052e2 <VL53L1_SetROI+0x152>
				break;
 80052e0:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 80052e2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d108      	bne.n	80052fc <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 80052ea:	f107 030c 	add.w	r3, r7, #12
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f002 fa8c 	bl	800780e <VL53L1_set_zone_config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 80052fc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8005300:	4618      	mov	r0, r3
 8005302:	3780      	adds	r7, #128	; 0x80
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	460b      	mov	r3, r1
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	4619      	mov	r1, r3
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f002 f9e3 	bl	80076ec <VL53L1_get_sequence_config_bit>
 8005326:	4603      	mov	r3, r0
 8005328:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800532a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005340:	2300      	movs	r3, #0
 8005342:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3318      	adds	r3, #24
 8005348:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7edb      	ldrb	r3, [r3, #27]
 800534e:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d002      	beq.n	800535c <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fc8e 	bl	8006c78 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800535c:	2300      	movs	r3, #0
 800535e:	77bb      	strb	r3, [r7, #30]
 8005360:	e01a      	b.n	8005398 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8005362:	7fbb      	ldrb	r3, [r7, #30]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800536a:	330c      	adds	r3, #12
 800536c:	2100      	movs	r1, #0
 800536e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8005372:	7fbb      	ldrb	r3, [r7, #30]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4413      	add	r3, r2
 8005378:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800537c:	3320      	adds	r3, #32
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8005382:	7fbb      	ldrb	r3, [r7, #30]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4413      	add	r3, r2
 8005388:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800538c:	3324      	adds	r3, #36	; 0x24
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8005392:	7fbb      	ldrb	r3, [r7, #30]
 8005394:	3301      	adds	r3, #1
 8005396:	77bb      	strb	r3, [r7, #30]
 8005398:	7fbb      	ldrb	r3, [r7, #30]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d9e1      	bls.n	8005362 <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053bc:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 80053c0:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 80053c2:	7dbb      	ldrb	r3, [r7, #22]
 80053c4:	2b63      	cmp	r3, #99	; 0x63
 80053c6:	dc12      	bgt.n	80053ee <VL53L1_StartMeasurement+0xb6>
 80053c8:	2b62      	cmp	r3, #98	; 0x62
 80053ca:	da0d      	bge.n	80053e8 <VL53L1_StartMeasurement+0xb0>
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	dc0e      	bgt.n	80053ee <VL53L1_StartMeasurement+0xb6>
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	da09      	bge.n	80053e8 <VL53L1_StartMeasurement+0xb0>
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	dc02      	bgt.n	80053de <VL53L1_StartMeasurement+0xa6>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da05      	bge.n	80053e8 <VL53L1_StartMeasurement+0xb0>
 80053dc:	e007      	b.n	80053ee <VL53L1_StartMeasurement+0xb6>
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d105      	bne.n	80053ee <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	77fb      	strb	r3, [r7, #31]
		break;
 80053e6:	e004      	b.n	80053f2 <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80053e8:	23f2      	movs	r3, #242	; 0xf2
 80053ea:	77fb      	strb	r3, [r7, #31]
		break;
 80053ec:	e001      	b.n	80053f2 <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80053ee:	23fd      	movs	r3, #253	; 0xfd
 80053f0:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 80053f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d11f      	bne.n	800543a <VL53L1_StartMeasurement+0x102>
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d11c      	bne.n	800543a <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005400:	f107 0310 	add.w	r3, r7, #16
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fcc0 	bl	8004d8c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800540c:	4603      	mov	r3, r0
 800540e:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4a18      	ldr	r2, [pc, #96]	; (8005474 <VL53L1_StartMeasurement+0x13c>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fda2 	bl	8004f6c <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8005428:	4603      	mov	r3, r0
 800542a:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	429a      	cmp	r2, r3
 8005434:	d901      	bls.n	800543a <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8005436:	23fc      	movs	r3, #252	; 0xfc
 8005438:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 800543a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d107      	bne.n	8005452 <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2206      	movs	r2, #6
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f002 ff97 	bl	800837c <VL53L1_init_and_start_range>
 800544e:	4603      	mov	r3, r0
 8005450:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8005452:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005460:	2204      	movs	r2, #4
 8005462:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8005466:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	10624dd3 	.word	0x10624dd3

08005478 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005480:	2300      	movs	r3, #0
 8005482:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f003 fa47 	bl	8008918 <VL53L1_stop_range>
 800548a:	4603      	mov	r3, r0
 800548c:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	7edb      	ldrb	r3, [r3, #27]
 8005492:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8005494:	7bbb      	ldrb	r3, [r7, #14]
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d002      	beq.n	80054a0 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fd1a 	bl	8006ed4 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 80054a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054ae:	2203      	movs	r2, #3
 80054b0:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 80054b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7edb      	ldrb	r3, [r3, #27]
 80054d0:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 80054d2:	7bbb      	ldrb	r3, [r7, #14]
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f003 ff4b 	bl	8009372 <VL53L1_clear_interrupt_and_enable_next_range>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80054e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f011 f8ac 	bl	801665a <VL53L1_is_new_data_ready>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	4603      	mov	r3, r0
 800551a:	603a      	str	r2, [r7, #0]
 800551c:	80fb      	strh	r3, [r7, #6]
 800551e:	460b      	mov	r3, r1
 8005520:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8005522:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005526:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8005528:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800552c:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 800552e:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8005532:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8005534:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005538:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 800553a:	797b      	ldrb	r3, [r7, #5]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d002      	beq.n	8005546 <GenNewPresetMode+0x34>
 8005540:	2b02      	cmp	r3, #2
 8005542:	d012      	beq.n	800556a <GenNewPresetMode+0x58>
 8005544:	e023      	b.n	800558e <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8005546:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800554a:	893b      	ldrh	r3, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	dd03      	ble.n	8005558 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2203      	movs	r2, #3
 8005554:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8005556:	e02c      	b.n	80055b2 <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8005558:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800555c:	89bb      	ldrh	r3, [r7, #12]
 800555e:	429a      	cmp	r2, r3
 8005560:	dd27      	ble.n	80055b2 <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2202      	movs	r2, #2
 8005566:	701a      	strb	r2, [r3, #0]
		break;
 8005568:	e023      	b.n	80055b2 <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 800556a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800556e:	893b      	ldrh	r3, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	dd03      	ble.n	800557c <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2203      	movs	r2, #3
 8005578:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 800557a:	e01c      	b.n	80055b6 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 800557c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005580:	89fb      	ldrh	r3, [r7, #14]
 8005582:	429a      	cmp	r2, r3
 8005584:	da17      	bge.n	80055b6 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
		break;
 800558c:	e013      	b.n	80055b6 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 800558e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005592:	89fb      	ldrh	r3, [r7, #14]
 8005594:	429a      	cmp	r2, r3
 8005596:	da03      	bge.n	80055a0 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 800559e:	e00c      	b.n	80055ba <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 80055a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	da07      	bge.n	80055ba <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2202      	movs	r2, #2
 80055ae:	701a      	strb	r2, [r3, #0]
		break;
 80055b0:	e003      	b.n	80055ba <GenNewPresetMode+0xa8>
		break;
 80055b2:	bf00      	nop
 80055b4:	e002      	b.n	80055bc <GenNewPresetMode+0xaa>
		break;
 80055b6:	bf00      	nop
 80055b8:	e000      	b.n	80055bc <GenNewPresetMode+0xaa>
		break;
 80055ba:	bf00      	nop
	}
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	7ddb      	ldrb	r3, [r3, #23]
 80055dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 80055e0:	4b28      	ldr	r3, [pc, #160]	; (8005684 <CheckAndChangeDistanceMode+0xbc>)
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3318      	adds	r3, #24
 80055ea:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 80055ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055f0:	2bff      	cmp	r3, #255	; 0xff
 80055f2:	d042      	beq.n	800567a <CheckAndChangeDistanceMode+0xb2>
 80055f4:	2bff      	cmp	r3, #255	; 0xff
 80055f6:	dc07      	bgt.n	8005608 <CheckAndChangeDistanceMode+0x40>
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	dc02      	bgt.n	8005602 <CheckAndChangeDistanceMode+0x3a>
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	da3c      	bge.n	800567a <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8005600:	e002      	b.n	8005608 <CheckAndChangeDistanceMode+0x40>
 8005602:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8005604:	2b02      	cmp	r3, #2
 8005606:	d938      	bls.n	800567a <CheckAndChangeDistanceMode+0xb2>
		break;
 8005608:	bf00      	nop
	}

	DmaxValid = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8005616:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	429a      	cmp	r2, r3
 800561e:	db03      	blt.n	8005628 <CheckAndChangeDistanceMode+0x60>
 8005620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005634:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8005638:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	7dfa      	ldrb	r2, [r7, #23]
 800563e:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8005640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005644:	2b00      	cmp	r3, #0
 8005646:	d108      	bne.n	800565a <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800564e:	7df9      	ldrb	r1, [r7, #23]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff ff5d 	bl	8005512 <GenNewPresetMode>
 8005658:	e010      	b.n	800567c <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 800565a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8005662:	7df9      	ldrb	r1, [r7, #23]
 8005664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff ff51 	bl	8005512 <GenNewPresetMode>
 8005670:	e004      	b.n	800567c <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2203      	movs	r2, #3
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e000      	b.n	800567c <CheckAndChangeDistanceMode+0xb4>
		return;
 800567a:	bf00      	nop
	}
}
 800567c:	3728      	adds	r7, #40	; 0x28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000001c 	.word	0x2000001c

08005688 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8005688:	b480      	push	{r7}
 800568a:	b08d      	sub	sp, #52	; 0x34
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	603a      	str	r2, [r7, #0]
 8005692:	71fb      	strb	r3, [r7, #7]
 8005694:	460b      	mov	r3, r1
 8005696:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8005698:	2396      	movs	r3, #150	; 0x96
 800569a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 800569c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80056a0:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 80056a2:	231e      	movs	r3, #30
 80056a4:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <ComputeRQL+0x104>)
 80056a8:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 80056aa:	4b39      	ldr	r3, [pc, #228]	; (8005790 <ComputeRQL+0x108>)
 80056ac:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 80056ae:	f641 139a 	movw	r3, #6554	; 0x199a
 80056b2:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <ComputeRQL+0x3a>
		returnvalue = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056c0:	e05b      	b.n	800577a <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80056c8:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 80056d0:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 80056d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 80056d6:	429a      	cmp	r2, r3
 80056d8:	da02      	bge.n	80056e0 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 80056da:	79bb      	ldrb	r3, [r7, #6]
 80056dc:	2b07      	cmp	r3, #7
 80056de:	d103      	bne.n	80056e8 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 80056e0:	2332      	movs	r3, #50	; 0x32
 80056e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056e6:	e048      	b.n	800577a <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80056ee:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80056f2:	429a      	cmp	r2, r3
 80056f4:	dd03      	ble.n	80056fe <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 80056f6:	8c3b      	ldrh	r3, [r7, #32]
 80056f8:	041b      	lsls	r3, r3, #16
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fc:	e007      	b.n	800570e <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005704:	461a      	mov	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d020      	beq.n	8005756 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005718:	461a      	mov	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	fb02 f303 	mul.w	r3, r2, r3
 8005720:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	085b      	lsrs	r3, r3, #1
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	429a      	cmp	r2, r3
 8005742:	d804      	bhi.n	800574e <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
 800574c:	e006      	b.n	800575c <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 800574e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
 8005754:	e002      	b.n	800575c <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8005756:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b32      	cmp	r3, #50	; 0x32
 8005766:	d905      	bls.n	8005774 <ComputeRQL+0xec>
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	bf28      	it	cs
 800576e:	2364      	movcs	r3, #100	; 0x64
 8005770:	b2db      	uxtb	r3, r3
 8005772:	e000      	b.n	8005776 <ComputeRQL+0xee>
 8005774:	2332      	movs	r3, #50	; 0x32
 8005776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800577a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800577e:	4618      	mov	r0, r3
 8005780:	3734      	adds	r7, #52	; 0x34
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	0075b333 	.word	0x0075b333
 8005790:	0030cccd 	.word	0x0030cccd

08005794 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d83d      	bhi.n	8005822 <ConvertStatusLite+0x8e>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <ConvertStatusLite+0x18>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057ff 	.word	0x080057ff
 80057b0:	080057f9 	.word	0x080057f9
 80057b4:	08005805 	.word	0x08005805
 80057b8:	0800580b 	.word	0x0800580b
 80057bc:	08005817 	.word	0x08005817
 80057c0:	0800581d 	.word	0x0800581d
 80057c4:	08005823 	.word	0x08005823
 80057c8:	08005823 	.word	0x08005823
 80057cc:	08005811 	.word	0x08005811
 80057d0:	08005823 	.word	0x08005823
 80057d4:	08005823 	.word	0x08005823
 80057d8:	08005823 	.word	0x08005823
 80057dc:	08005823 	.word	0x08005823
 80057e0:	08005823 	.word	0x08005823
 80057e4:	080057ed 	.word	0x080057ed
 80057e8:	080057f3 	.word	0x080057f3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80057ec:	230a      	movs	r3, #10
 80057ee:	73fb      	strb	r3, [r7, #15]
		break;
 80057f0:	e019      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80057f2:	2306      	movs	r3, #6
 80057f4:	73fb      	strb	r3, [r7, #15]
		break;
 80057f6:	e016      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80057f8:	2304      	movs	r3, #4
 80057fa:	73fb      	strb	r3, [r7, #15]
		break;
 80057fc:	e013      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80057fe:	2302      	movs	r3, #2
 8005800:	73fb      	strb	r3, [r7, #15]
		break;
 8005802:	e010      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
		break;
 8005808:	e00d      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800580a:	2307      	movs	r3, #7
 800580c:	73fb      	strb	r3, [r7, #15]
		break;
 800580e:	e00a      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8005810:	2309      	movs	r3, #9
 8005812:	73fb      	strb	r3, [r7, #15]
		break;
 8005814:	e007      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8005816:	2303      	movs	r3, #3
 8005818:	73fb      	strb	r3, [r7, #15]
		break;
 800581a:	e004      	b.n	8005826 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
		break;
 8005820:	e001      	b.n	8005826 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8005822:	23ff      	movs	r3, #255	; 0xff
 8005824:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	3b05      	subs	r3, #5
 8005842:	2b12      	cmp	r3, #18
 8005844:	d840      	bhi.n	80058c8 <ConvertStatusHisto+0x94>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <ConvertStatusHisto+0x18>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005899 	.word	0x08005899
 8005850:	0800589f 	.word	0x0800589f
 8005854:	080058ab 	.word	0x080058ab
 8005858:	080058c9 	.word	0x080058c9
 800585c:	080058c3 	.word	0x080058c3
 8005860:	080058c9 	.word	0x080058c9
 8005864:	080058c9 	.word	0x080058c9
 8005868:	080058c9 	.word	0x080058c9
 800586c:	080058c9 	.word	0x080058c9
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058c9 	.word	0x080058c9
 8005878:	080058c9 	.word	0x080058c9
 800587c:	080058c9 	.word	0x080058c9
 8005880:	080058c9 	.word	0x080058c9
 8005884:	080058a5 	.word	0x080058a5
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058c9 	.word	0x080058c9
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058b1 	.word	0x080058b1
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8005898:	2304      	movs	r3, #4
 800589a:	73fb      	strb	r3, [r7, #15]
		break;
 800589c:	e016      	b.n	80058cc <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800589e:	2301      	movs	r3, #1
 80058a0:	73fb      	strb	r3, [r7, #15]
		break;
 80058a2:	e013      	b.n	80058cc <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80058a4:	2306      	movs	r3, #6
 80058a6:	73fb      	strb	r3, [r7, #15]
		break;
 80058a8:	e010      	b.n	80058cc <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80058aa:	2307      	movs	r3, #7
 80058ac:	73fb      	strb	r3, [r7, #15]
		break;
 80058ae:	e00d      	b.n	80058cc <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 80058b0:	230c      	movs	r3, #12
 80058b2:	73fb      	strb	r3, [r7, #15]
		break;
 80058b4:	e00a      	b.n	80058cc <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80058b6:	2307      	movs	r3, #7
 80058b8:	73fb      	strb	r3, [r7, #15]
		break;
 80058ba:	e007      	b.n	80058cc <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 80058bc:	230b      	movs	r3, #11
 80058be:	73fb      	strb	r3, [r7, #15]
		break;
 80058c0:	e004      	b.n	80058cc <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
		break;
 80058c6:	e001      	b.n	80058cc <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80058c8:	23ff      	movs	r3, #255	; 0xff
 80058ca:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop

080058dc <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b092      	sub	sp, #72	; 0x48
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	4608      	mov	r0, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	461a      	mov	r2, r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	70fb      	strb	r3, [r7, #3]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70bb      	strb	r3, [r7, #2]
 80058f2:	4613      	mov	r3, r2
 80058f4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3318      	adds	r3, #24
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005908:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800590e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005910:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800591c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff feaf 	bl	8005688 <ComputeRQL>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005930:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005934:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005936:	025b      	lsls	r3, r3, #9
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800593a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005942:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005944:	025b      	lsls	r3, r3, #9
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8005948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800594a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594c:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800594e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005950:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005952:	025b      	lsls	r3, r3, #9
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8005956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595a:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800595c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800595e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005964:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8005966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005968:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800596c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800596e:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8005970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005972:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8005976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005978:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 800597a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800597c:	2200      	movs	r2, #0
 800597e:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8005980:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005984:	2b11      	cmp	r3, #17
 8005986:	d009      	beq.n	800599c <SetTargetData+0xc0>
 8005988:	2b11      	cmp	r3, #17
 800598a:	dc0f      	bgt.n	80059ac <SetTargetData+0xd0>
 800598c:	2b03      	cmp	r3, #3
 800598e:	dc02      	bgt.n	8005996 <SetTargetData+0xba>
 8005990:	2b00      	cmp	r3, #0
 8005992:	dc03      	bgt.n	800599c <SetTargetData+0xc0>
 8005994:	e00a      	b.n	80059ac <SetTargetData+0xd0>
 8005996:	2b0d      	cmp	r3, #13
 8005998:	d004      	beq.n	80059a4 <SetTargetData+0xc8>
 800599a:	e007      	b.n	80059ac <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800599c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800599e:	2205      	movs	r2, #5
 80059a0:	75da      	strb	r2, [r3, #23]
		break;
 80059a2:	e006      	b.n	80059b2 <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80059a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059a6:	220d      	movs	r2, #13
 80059a8:	75da      	strb	r2, [r3, #23]
		break;
 80059aa:	e002      	b.n	80059b2 <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80059ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ae:	2200      	movs	r2, #0
 80059b0:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80059b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059b4:	7ddb      	ldrb	r3, [r3, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d117      	bne.n	80059ea <SetTargetData+0x10e>
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d114      	bne.n	80059ea <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 80059c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c2:	22ff      	movs	r2, #255	; 0xff
 80059c4:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 80059c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c8:	2200      	movs	r2, #0
 80059ca:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 80059cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ce:	2200      	movs	r2, #0
 80059d0:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 80059d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059d4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80059d8:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 80059da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059dc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80059e0:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 80059e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80059e8:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80059ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ec:	7ddb      	ldrb	r3, [r3, #23]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d125      	bne.n	8005a3e <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059f8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80059fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8005a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d007      	beq.n	8005a18 <SetTargetData+0x13c>
 8005a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8005a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d109      	bne.n	8005a2c <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8005a18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff ff09 	bl	8005834 <ConvertStatusHisto>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8005a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a28:	75da      	strb	r2, [r3, #23]
 8005a2a:	e008      	b.n	8005a3e <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8005a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff feaf 	bl	8005794 <ConvertStatusLite>
 8005a36:	4603      	mov	r3, r0
 8005a38:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8005a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a3c:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005a42:	025b      	lsls	r3, r3, #9
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a56:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005a58:	025b      	lsls	r3, r3, #9
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a62:	461a      	mov	r2, r3
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8005a6a:	f107 0310 	add.w	r3, r7, #16
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2100      	movs	r1, #0
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fb2d 	bl	80050d2 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8005a78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8005a86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8005a8a:	f107 0315 	add.w	r3, r7, #21
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2100      	movs	r1, #0
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff faf8 	bl	8005088 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8005a98:	7d7b      	ldrb	r3, [r7, #21]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d105      	bne.n	8005aaa <SetTargetData+0x1ce>
 8005a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <SetTargetData+0x1ce>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <SetTargetData+0x1d0>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005abc:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8005ac0:	f107 0310 	add.w	r3, r7, #16
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fb02 	bl	80050d2 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8005ace:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8005adc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8005ae0:	f107 0315 	add.w	r3, r7, #21
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff facd 	bl	8005088 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8005aee:	7d7b      	ldrb	r3, [r7, #21]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d105      	bne.n	8005b00 <SetTargetData+0x224>
 8005af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <SetTargetData+0x224>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <SetTargetData+0x226>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b12:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8005b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b18:	8a9b      	ldrh	r3, [r3, #20]
 8005b1a:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8005b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b1e:	7ddb      	ldrb	r3, [r3, #23]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d110      	bne.n	8005b46 <SetTargetData+0x26a>
 8005b24:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da0c      	bge.n	8005b46 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8005b2c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005b30:	4ba3      	ldr	r3, [pc, #652]	; (8005dc0 <SetTargetData+0x4e4>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	da03      	bge.n	8005b40 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8005b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3a:	220e      	movs	r2, #14
 8005b3c:	75da      	strb	r2, [r3, #23]
 8005b3e:	e002      	b.n	8005b46 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8005b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b42:	2200      	movs	r2, #0
 8005b44:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8005b46:	f107 0308 	add.w	r3, r7, #8
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f248 01be 	movw	r1, #32958	; 0x80be
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f004 f943 	bl	8009ddc <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8005b5a:	787b      	ldrb	r3, [r7, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8005b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b62:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d107      	bne.n	8005b78 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8005b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b6a:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d902      	bls.n	8005b78 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 8005b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b74:	220c      	movs	r2, #12
 8005b76:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f248 0191 	movw	r1, #32913	; 0x8091
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f004 f92a 	bl	8009ddc <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8005b88:	78bb      	ldrb	r3, [r7, #2]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8005b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b98:	8a9b      	ldrh	r3, [r3, #20]
 8005b9a:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 8005ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d106      	bne.n	8005bbc <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8005bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bb4:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d001      	beq.n	8005bc0 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8250 	beq.w	8006068 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8005bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bca:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8005bcc:	2b07      	cmp	r3, #7
 8005bce:	d004      	beq.n	8005bda <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8005bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd2:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	f040 8247 	bne.w	8006068 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8005bda:	787b      	ldrb	r3, [r7, #1]
 8005bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005be4:	3320      	adds	r3, #32
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	d01c      	beq.n	8005c26 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8005bec:	787b      	ldrb	r3, [r7, #1]
 8005bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005bf6:	3320      	adds	r3, #32
 8005bf8:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d013      	beq.n	8005c26 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8005bfe:	787b      	ldrb	r3, [r7, #1]
 8005c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005c08:	3320      	adds	r3, #32
 8005c0a:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f040 822b 	bne.w	8006068 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8005c12:	787b      	ldrb	r3, [r7, #1]
 8005c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005c1c:	3324      	adds	r3, #36	; 0x24
 8005c1e:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	f040 8221 	bne.w	8006068 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 8005c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c2c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8005c30:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8005c38:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d00c      	beq.n	8005c58 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c44:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8005c48:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8005c50:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8005c52:	429a      	cmp	r2, r3
 8005c54:	f040 81dc 	bne.w	8006010 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8005c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c5a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005c5e:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8005c60:	787b      	ldrb	r3, [r7, #1]
 8005c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c64:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8005c68:	330c      	adds	r3, #12
 8005c6a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8005c6e:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b21      	cmp	r3, #33	; 0x21
 8005c82:	d008      	beq.n	8005c96 <SetTargetData+0x3ba>
 8005c84:	2b21      	cmp	r3, #33	; 0x21
 8005c86:	f300 81bf 	bgt.w	8006008 <SetTargetData+0x72c>
 8005c8a:	2b1b      	cmp	r3, #27
 8005c8c:	f000 8113 	beq.w	8005eb6 <SetTargetData+0x5da>
 8005c90:	2b1e      	cmp	r3, #30
 8005c92:	d004      	beq.n	8005c9e <SetTargetData+0x3c2>
 8005c94:	e1b8      	b.n	8006008 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005c9c:	e1b9      	b.n	8006012 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8005ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	dd0f      	ble.n	8005ccc <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8005cb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	da08      	bge.n	8005ccc <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8005cba:	7efb      	ldrb	r3, [r7, #27]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d105      	bne.n	8005ccc <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8005cc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cca:	e0f3      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8005ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8005cd6:	425b      	negs	r3, r3
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	da10      	bge.n	8005cfe <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8005cdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8005ce6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	dd08      	ble.n	8005cfe <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8005cec:	7efb      	ldrb	r3, [r7, #27]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d105      	bne.n	8005cfe <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8005cf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cfc:	e0da      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8005d04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	dd0f      	ble.n	8005d2c <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8005d12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	da08      	bge.n	8005d2c <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8005d1a:	7efb      	ldrb	r3, [r7, #27]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8005d26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d2a:	e0c3      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8005d2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8005d36:	425b      	negs	r3, r3
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	da10      	bge.n	8005d5e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8005d3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8005d46:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	dd08      	ble.n	8005d5e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8005d4c:	7efb      	ldrb	r3, [r7, #27]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d105      	bne.n	8005d5e <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8005d58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d5c:	e0aa      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8005d64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	dd0f      	ble.n	8005d8c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8005d72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	da08      	bge.n	8005d8c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8005d7a:	7efb      	ldrb	r3, [r7, #27]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d105      	bne.n	8005d8c <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005d86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d8a:	e093      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8005d8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8005d96:	425b      	negs	r3, r3
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	da13      	bge.n	8005dc4 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8005d9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8005da6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8005da8:	429a      	cmp	r2, r3
 8005daa:	dd0b      	ble.n	8005dc4 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8005dac:	7efb      	ldrb	r3, [r7, #27]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8005db8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005dbc:	e07a      	b.n	8005eb4 <SetTargetData+0x5d8>
 8005dbe:	bf00      	nop
 8005dc0:	2000001c 	.word	0x2000001c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8005dca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	dd0f      	ble.n	8005df2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8005dd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	da08      	bge.n	8005df2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8005de0:	7efb      	ldrb	r3, [r7, #27]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005dec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005df0:	e060      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8005df2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	da10      	bge.n	8005e24 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8005e02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8005e0c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	dd08      	ble.n	8005e24 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8005e12:	7efb      	ldrb	r3, [r7, #27]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d105      	bne.n	8005e24 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8005e1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e22:	e047      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8005e2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	da0c      	bge.n	8005e4c <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8005e38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	dd05      	ble.n	8005e4c <SetTargetData+0x570>
					AddOffset =
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005e46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e4a:	e033      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8005e52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	dd0f      	ble.n	8005e7a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8005e60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	da08      	bge.n	8005e7a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8005e68:	7efb      	ldrb	r3, [r7, #27]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d105      	bne.n	8005e7a <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8005e74:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e78:	e01c      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8005e7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8005e84:	425b      	negs	r3, r3
 8005e86:	429a      	cmp	r2, r3
 8005e88:	da10      	bge.n	8005eac <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8005e8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8005e94:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8005e96:	429a      	cmp	r2, r3
 8005e98:	dd08      	ble.n	8005eac <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8005e9a:	7efb      	ldrb	r3, [r7, #27]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005ea6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005eaa:	e003      	b.n	8005eb4 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005eb2:	e0ae      	b.n	8006012 <SetTargetData+0x736>
 8005eb4:	e0ad      	b.n	8006012 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8005ebc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	dd0f      	ble.n	8005ee4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8005eca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	da08      	bge.n	8005ee4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8005ed2:	7efb      	ldrb	r3, [r7, #27]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005ede:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ee2:	e090      	b.n	8006006 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8005ee4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8005eee:	425b      	negs	r3, r3
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	da10      	bge.n	8005f16 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8005ef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8005efe:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8005f00:	429a      	cmp	r2, r3
 8005f02:	dd08      	ble.n	8005f16 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8005f04:	7efb      	ldrb	r3, [r7, #27]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d105      	bne.n	8005f16 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8005f10:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f14:	e077      	b.n	8006006 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8005f1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	dd0f      	ble.n	8005f44 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8005f2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	da08      	bge.n	8005f44 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8005f32:	7efb      	ldrb	r3, [r7, #27]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d105      	bne.n	8005f44 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8005f3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f42:	e060      	b.n	8006006 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8005f44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8005f4e:	425b      	negs	r3, r3
 8005f50:	429a      	cmp	r2, r3
 8005f52:	da10      	bge.n	8005f76 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8005f54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8005f5e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8005f60:	429a      	cmp	r2, r3
 8005f62:	dd08      	ble.n	8005f76 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8005f64:	7efb      	ldrb	r3, [r7, #27]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8005f70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f74:	e047      	b.n	8006006 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8005f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	da0c      	bge.n	8005f9e <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8005f8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	dd05      	ble.n	8005f9e <SetTargetData+0x6c2>
					AddOffset =
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8005f98:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f9c:	e033      	b.n	8006006 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8005fa4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	dd0f      	ble.n	8005fcc <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8005fb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	da08      	bge.n	8005fcc <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8005fba:	7efb      	ldrb	r3, [r7, #27]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d105      	bne.n	8005fcc <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8005fc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005fca:	e01c      	b.n	8006006 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8005fcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8005fd6:	425b      	negs	r3, r3
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	da10      	bge.n	8005ffe <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8005fdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8005fe6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	dd08      	ble.n	8005ffe <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8005fec:	7efb      	ldrb	r3, [r7, #27]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8005ff8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ffc:	e003      	b.n	8006006 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8006004:	e005      	b.n	8006012 <SetTargetData+0x736>
 8006006:	e004      	b.n	8006012 <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800600e:	e000      	b.n	8006012 <SetTargetData+0x736>
			}
		}
 8006010:	bf00      	nop

		if (uwr_status) {
 8006012:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006016:	2b00      	cmp	r3, #0
 8006018:	d026      	beq.n	8006068 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 800601a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800601c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006026:	4413      	add	r3, r2
 8006028:	b29b      	uxth	r3, r3
 800602a:	b21a      	sxth	r2, r3
 800602c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800602e:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8006030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006032:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006036:	b29a      	uxth	r2, r3
 8006038:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800603c:	4413      	add	r3, r2
 800603e:	b29b      	uxth	r3, r3
 8006040:	b21a      	sxth	r2, r3
 8006042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006044:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8006046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800604c:	b29a      	uxth	r2, r3
 800604e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006052:	4413      	add	r3, r2
 8006054:	b29b      	uxth	r3, r3
 8006056:	b21a      	sxth	r2, r3
 8006058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800605a:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 800605c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800605e:	2201      	movs	r2, #1
 8006060:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 8006062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006064:	2200      	movs	r2, #0
 8006066:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8006068:	787b      	ldrb	r3, [r7, #1]
 800606a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800606c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8006070:	330c      	adds	r3, #12
 8006072:	8b39      	ldrh	r1, [r7, #24]
 8006074:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8006078:	787b      	ldrb	r3, [r7, #1]
 800607a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800607c:	7dd1      	ldrb	r1, [r2, #23]
 800607e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006080:	4413      	add	r3, r2
 8006082:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006086:	3320      	adds	r3, #32
 8006088:	460a      	mov	r2, r1
 800608a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 800608c:	787b      	ldrb	r3, [r7, #1]
 800608e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006090:	7e11      	ldrb	r1, [r2, #24]
 8006092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006094:	4413      	add	r3, r2
 8006096:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800609a:	3324      	adds	r3, #36	; 0x24
 800609c:	460a      	mov	r2, r1
 800609e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80060a6:	461a      	mov	r2, r3
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 80060ae:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3748      	adds	r7, #72	; 0x48
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop

080060bc <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80060bc:	b590      	push	{r4, r7, lr}
 80060be:	b091      	sub	sp, #68	; 0x44
 80060c0:	af04      	add	r7, sp, #16
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3318      	adds	r3, #24
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	7c9a      	ldrb	r2, [r3, #18]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	789a      	ldrb	r2, [r3, #2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006106:	4293      	cmp	r3, r2
 8006108:	bfa8      	it	ge
 800610a:	4613      	movge	r3, r2
 800610c:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006112:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	78da      	ldrb	r2, [r3, #3]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800612a:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	7c9b      	ldrb	r3, [r3, #18]
 8006138:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 800613c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006140:	2b00      	cmp	r3, #0
 8006142:	d103      	bne.n	800614c <SetMeasurementData+0x90>

		iteration = 1;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800614a:	e003      	b.n	8006154 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 800614c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006150:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8006154:	2300      	movs	r3, #0
 8006156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800615a:	e048      	b.n	80061ee <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 800615c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006160:	4613      	mov	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	3308      	adds	r3, #8
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8006170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006174:	224c      	movs	r2, #76	; 0x4c
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	3310      	adds	r3, #16
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	4413      	add	r3, r2
 8006180:	3304      	adds	r3, #4
 8006182:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8006184:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8006188:	2b00      	cmp	r3, #0
 800618a:	d114      	bne.n	80061b6 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	7918      	ldrb	r0, [r3, #4]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	7c1b      	ldrb	r3, [r3, #16]
 8006194:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8006198:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	9202      	str	r2, [sp, #8]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	9201      	str	r2, [sp, #4]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	4623      	mov	r3, r4
 80061a8:	4602      	mov	r2, r0
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fb96 	bl	80058dc <SetTargetData>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	7ddb      	ldrb	r3, [r3, #23]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10d      	bne.n	80061e4 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80061ce:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80061d2:	429a      	cmp	r2, r3
 80061d4:	da06      	bge.n	80061e4 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	8a9b      	ldrh	r3, [r3, #20]
 80061da:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 80061dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80061e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061e8:	3301      	adds	r3, #1
 80061ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80061ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80061f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d3b0      	bcc.n	800615c <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006206:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800620a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800620e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006212:	e01f      	b.n	8006254 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8006214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800621e:	330c      	adds	r3, #12
 8006220:	2100      	movs	r1, #0
 8006222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8006226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	4413      	add	r3, r2
 800622e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006232:	3320      	adds	r3, #32
 8006234:	22ff      	movs	r2, #255	; 0xff
 8006236:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8006238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800623c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623e:	4413      	add	r3, r2
 8006240:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006244:	3324      	adds	r3, #36	; 0x24
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800624a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800624e:	3301      	adds	r3, #1
 8006250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006258:	2b03      	cmp	r3, #3
 800625a:	d9db      	bls.n	8006214 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 800625c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11b      	bne.n	800629c <SetMeasurementData+0x1e0>
 8006264:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006268:	2b00      	cmp	r3, #0
 800626a:	d017      	beq.n	800629c <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 800626c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3308      	adds	r3, #8
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8006280:	2304      	movs	r3, #4
 8006282:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8006284:	7efb      	ldrb	r3, [r7, #27]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4413      	add	r3, r2
 800628c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	337e      	adds	r3, #126	; 0x7e
 8006294:	69f9      	ldr	r1, [r7, #28]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff f996 	bl	80055c8 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 800629c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3734      	adds	r7, #52	; 0x34
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd90      	pop	{r4, r7, pc}

080062a8 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3318      	adds	r3, #24
 80062ba:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80062c2:	3308      	adds	r3, #8
 80062c4:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80062c6:	2280      	movs	r2, #128	; 0x80
 80062c8:	21ff      	movs	r1, #255	; 0xff
 80062ca:	6838      	ldr	r0, [r7, #0]
 80062cc:	f019 f90e 	bl	801f4ec <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	2102      	movs	r1, #2
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f002 fc2e 	bl	8008b36 <VL53L1_get_device_results>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 80062de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d118      	bne.n	8006318 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2b07      	cmp	r3, #7
 80062ec:	d002      	beq.n	80062f4 <VL53L1_GetMultiRangingData+0x4c>
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d004      	beq.n	80062fc <VL53L1_GetMultiRangingData+0x54>
 80062f2:	e007      	b.n	8006304 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2201      	movs	r2, #1
 80062f8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 80062fa:	e006      	b.n	800630a <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2202      	movs	r2, #2
 8006300:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8006302:	e002      	b.n	800630a <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2200      	movs	r2, #0
 8006308:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff fed4 	bl	80060bc <SetMeasurementData>
 8006314:	4603      	mov	r3, r0
 8006316:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b090      	sub	sp, #64	; 0x40
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800632c:	2300      	movs	r3, #0
 800632e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8006332:	f240 3305 	movw	r3, #773	; 0x305
 8006336:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3318      	adds	r3, #24
 800633c:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	3348      	adds	r3, #72	; 0x48
 8006342:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8006344:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11c      	bne.n	8006386 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006352:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8006356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 800635a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f8e3 	bl	800652c <VL53L1_run_ref_spad_char>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 800636c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8006374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fe fb2c 	bl	80049d8 <VL53L1_SetPresetMode>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8006386:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800638a:	f113 0f1d 	cmn.w	r3, #29
 800638e:	d14e      	bne.n	800642e <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8006390:	f107 0310 	add.w	r3, r7, #16
 8006394:	2206      	movs	r2, #6
 8006396:	2128      	movs	r1, #40	; 0x28
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f00e fbf6 	bl	8014b8a <VL53L1_read_nvm_raw_data>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 80063a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 80063ac:	f107 020c 	add.w	r2, r7, #12
 80063b0:	2302      	movs	r3, #2
 80063b2:	2114      	movs	r1, #20
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f010 fe5f 	bl	8017078 <VL53L1_WriteMulti>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 80063c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80063c8:	7b3a      	ldrb	r2, [r7, #12]
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063cc:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80063ce:	7b7a      	ldrb	r2, [r7, #13]
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80063d4:	f107 0310 	add.w	r3, r7, #16
 80063d8:	3310      	adds	r3, #16
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 80063dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 80063e4:	2306      	movs	r3, #6
 80063e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e8:	210d      	movs	r1, #13
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f010 fe44 	bl	8017078 <VL53L1_WriteMulti>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 80063f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d117      	bne.n	800642e <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	785a      	ldrb	r2, [r3, #1]
 800640a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640c:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	789a      	ldrb	r2, [r3, #2]
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	78da      	ldrb	r2, [r3, #3]
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	791a      	ldrb	r2, [r3, #4]
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	795a      	ldrb	r2, [r3, #5]
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 800642e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006432:	4618      	mov	r0, r3
 8006434:	3740      	adds	r7, #64	; 0x40
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 800644c:	2300      	movs	r3, #0
 800644e:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8006450:	2300      	movs	r3, #0
 8006452:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8006454:	2300      	movs	r3, #0
 8006456:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d84a      	bhi.n	80064f4 <VL53L1_SmudgeCorrectionEnable+0xb8>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <VL53L1_SmudgeCorrectionEnable+0x28>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006475 	.word	0x08006475
 8006468:	08006495 	.word	0x08006495
 800646c:	080064b5 	.word	0x080064b5
 8006470:	080064d5 	.word	0x080064d5
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f004 fbee 	bl	800ac56 <VL53L1_dynamic_xtalk_correction_disable>
 800647a:	4603      	mov	r3, r0
 800647c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f004 fc17 	bl	800acb2 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8006484:	4603      	mov	r3, r0
 8006486:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f004 fc40 	bl	800ad0e <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800648e:	4603      	mov	r3, r0
 8006490:	733b      	strb	r3, [r7, #12]
		break;
 8006492:	e032      	b.n	80064fa <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f004 fbc7 	bl	800ac28 <VL53L1_dynamic_xtalk_correction_enable>
 800649a:	4603      	mov	r3, r0
 800649c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f004 fbf0 	bl	800ac84 <VL53L1_dynamic_xtalk_correction_apply_enable>
 80064a4:	4603      	mov	r3, r0
 80064a6:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f004 fc30 	bl	800ad0e <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80064ae:	4603      	mov	r3, r0
 80064b0:	733b      	strb	r3, [r7, #12]
		break;
 80064b2:	e022      	b.n	80064fa <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f004 fbb7 	bl	800ac28 <VL53L1_dynamic_xtalk_correction_enable>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f004 fbe0 	bl	800ac84 <VL53L1_dynamic_xtalk_correction_apply_enable>
 80064c4:	4603      	mov	r3, r0
 80064c6:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f004 fc09 	bl	800ace0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 80064ce:	4603      	mov	r3, r0
 80064d0:	733b      	strb	r3, [r7, #12]
		break;
 80064d2:	e012      	b.n	80064fa <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f004 fba7 	bl	800ac28 <VL53L1_dynamic_xtalk_correction_enable>
 80064da:	4603      	mov	r3, r0
 80064dc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f004 fbe7 	bl	800acb2 <VL53L1_dynamic_xtalk_correction_apply_disable>
 80064e4:	4603      	mov	r3, r0
 80064e6:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f004 fc10 	bl	800ad0e <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80064ee:	4603      	mov	r3, r0
 80064f0:	733b      	strb	r3, [r7, #12]
		break;
 80064f2:	e002      	b.n	80064fa <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80064f4:	23fc      	movs	r3, #252	; 0xfc
 80064f6:	73fb      	strb	r3, [r7, #15]
		break;
 80064f8:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 80064fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8006506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 800650e:	7b7b      	ldrb	r3, [r7, #13]
 8006510:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8006512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 800651a:	7b3b      	ldrb	r3, [r7, #12]
 800651c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800651e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop

0800652c <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 800652c:	b5b0      	push	{r4, r5, r7, lr}
 800652e:	b08c      	sub	sp, #48	; 0x30
 8006530:	af04      	add	r7, sp, #16
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006536:	2300      	movs	r3, #0
 8006538:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3318      	adds	r3, #24
 800653e:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006546:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006548:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f007 fc99 	bl	800de88 <VL53L1_enable_powerforce>
 8006556:	4603      	mov	r3, r0
 8006558:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 800655a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d117      	bne.n	8006592 <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	7858      	ldrb	r0, [r3, #1]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	685c      	ldr	r4, [r3, #4]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	891d      	ldrh	r5, [r3, #8]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	899b      	ldrh	r3, [r3, #12]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	8952      	ldrh	r2, [r2, #10]
 8006576:	69b9      	ldr	r1, [r7, #24]
 8006578:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 800657c:	9102      	str	r1, [sp, #8]
 800657e:	9201      	str	r2, [sp, #4]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	462b      	mov	r3, r5
 8006584:	4622      	mov	r2, r4
 8006586:	4601      	mov	r1, r0
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f009 fbda 	bl	800fd42 <VL53L1_set_ref_spad_char_config>
 800658e:	4603      	mov	r3, r0
 8006590:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8006592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d107      	bne.n	80065aa <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f891 	bl	80066c8 <VL53L1_run_device_test>
 80065a6:	4603      	mov	r3, r0
 80065a8:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 80065aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d108      	bne.n	80065c4 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 80065b2:	f107 020c 	add.w	r2, r7, #12
 80065b6:	2302      	movs	r3, #2
 80065b8:	21d9      	movs	r1, #217	; 0xd9
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f010 fd92 	bl	80170e4 <VL53L1_ReadMulti>
 80065c0:	4603      	mov	r3, r0
 80065c2:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 80065c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80065cc:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d4:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80065d8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 80065e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d108      	bne.n	80065fe <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 80065ec:	f107 020c 	add.w	r2, r7, #12
 80065f0:	2302      	movs	r3, #2
 80065f2:	2114      	movs	r1, #20
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f010 fd3f 	bl	8017078 <VL53L1_WriteMulti>
 80065fa:	4603      	mov	r3, r0
 80065fc:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 80065fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8006606:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 800660e:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8006616:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 800661e:	f107 020c 	add.w	r2, r7, #12
 8006622:	2306      	movs	r3, #6
 8006624:	21ac      	movs	r1, #172	; 0xac
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f010 fd5c 	bl	80170e4 <VL53L1_ReadMulti>
 800662c:	4603      	mov	r3, r0
 800662e:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8006630:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d108      	bne.n	800664a <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8006638:	f107 020c 	add.w	r2, r7, #12
 800663c:	2306      	movs	r3, #6
 800663e:	210d      	movs	r1, #13
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f010 fd19 	bl	8017078 <VL53L1_WriteMulti>
 8006646:	4603      	mov	r3, r0
 8006648:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 800664a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d117      	bne.n	8006682 <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8006652:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 800665a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8006662:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 800666a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8006672:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 800667a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8006682:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d114      	bne.n	80066b4 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8006690:	2b10      	cmp	r3, #16
 8006692:	d00c      	beq.n	80066ae <VL53L1_run_ref_spad_char+0x182>
 8006694:	2b10      	cmp	r3, #16
 8006696:	dc0e      	bgt.n	80066b6 <VL53L1_run_ref_spad_char+0x18a>
 8006698:	2b0e      	cmp	r3, #14
 800669a:	d002      	beq.n	80066a2 <VL53L1_run_ref_spad_char+0x176>
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d003      	beq.n	80066a8 <VL53L1_run_ref_spad_char+0x17c>
 80066a0:	e009      	b.n	80066b6 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 80066a2:	23e4      	movs	r3, #228	; 0xe4
 80066a4:	77fb      	strb	r3, [r7, #31]
			break;
 80066a6:	e006      	b.n	80066b6 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 80066a8:	23e3      	movs	r3, #227	; 0xe3
 80066aa:	77fb      	strb	r3, [r7, #31]
			break;
 80066ac:	e003      	b.n	80066b6 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 80066ae:	23e2      	movs	r3, #226	; 0xe2
 80066b0:	77fb      	strb	r3, [r7, #31]
			break;
 80066b2:	e000      	b.n	80066b6 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 80066b4:	bf00      	nop



	*pcal_status = status;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	7ffa      	ldrb	r2, [r7, #31]
 80066ba:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80066bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bdb0      	pop	{r4, r5, r7, pc}

080066c8 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3318      	adds	r3, #24
 80066dc:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 80066e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 80066ea:	f107 030b 	add.w	r3, r7, #11
 80066ee:	461a      	mov	r2, r3
 80066f0:	2130      	movs	r1, #48	; 0x30
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f010 fd88 	bl	8017208 <VL53L1_RdByte>
 80066f8:	4603      	mov	r3, r0
 80066fa:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 80066fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8006704:	7afa      	ldrb	r2, [r7, #11]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 800670c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d106      	bne.n	8006722 <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f007 fb39 	bl	800dd90 <VL53L1_start_test>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8006722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f00f ff5c 	bl	80165e8 <VL53L1_wait_for_test_completion>
 8006730:	4603      	mov	r3, r0
 8006732:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8006734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d108      	bne.n	800674e <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 800673c:	f107 020c 	add.w	r2, r7, #12
 8006740:	2302      	movs	r3, #2
 8006742:	2189      	movs	r1, #137	; 0x89
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f010 fccd 	bl	80170e4 <VL53L1_ReadMulti>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 800674e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8006756:	7b3a      	ldrb	r2, [r7, #12]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 800675e:	7b7a      	ldrb	r2, [r7, #13]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	b2da      	uxtb	r2, r3
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8006778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d108      	bne.n	8006792 <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8006780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f007 fba1 	bl	800ded0 <VL53L1_clear_interrupt>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8006792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d105      	bne.n	80067a6 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 800679a:	2100      	movs	r1, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f007 faf7 	bl	800dd90 <VL53L1_start_test>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 80067a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	2b21      	cmp	r3, #33	; 0x21
 80067c6:	d006      	beq.n	80067d6 <select_offset_per_vcsel+0x24>
 80067c8:	2b21      	cmp	r3, #33	; 0x21
 80067ca:	dc2b      	bgt.n	8006824 <select_offset_per_vcsel+0x72>
 80067cc:	2b1b      	cmp	r3, #27
 80067ce:	d01c      	beq.n	800680a <select_offset_per_vcsel+0x58>
 80067d0:	2b1e      	cmp	r3, #30
 80067d2:	d00d      	beq.n	80067f0 <select_offset_per_vcsel+0x3e>
 80067d4:	e026      	b.n	8006824 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067dc:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 80067e0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e8:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 80067ec:	817b      	strh	r3, [r7, #10]
		break;
 80067ee:	e02b      	b.n	8006848 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f6:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 80067fa:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006802:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8006806:	817b      	strh	r3, [r7, #10]
		break;
 8006808:	e01e      	b.n	8006848 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006810:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8006814:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681c:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8006820:	817b      	strh	r3, [r7, #10]
		break;
 8006822:	e011      	b.n	8006848 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682a:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 800682e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006836:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 800683a:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800683c:	23fc      	movs	r3, #252	; 0xfc
 800683e:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	801a      	strh	r2, [r3, #0]
		break;
 8006846:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800684e:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8006850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8006858:	7a7b      	ldrb	r3, [r7, #9]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <select_offset_per_vcsel+0xb6>
 8006862:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006866:	e001      	b.n	800686c <select_offset_per_vcsel+0xba>
 8006868:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	8013      	strh	r3, [r2, #0]

	return status;
 8006870:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8006880:	b490      	push	{r4, r7}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4611      	mov	r1, r2
 800688c:	461a      	mov	r2, r3
 800688e:	460b      	mov	r3, r1
 8006890:	71fb      	strb	r3, [r7, #7]
 8006892:	4613      	mov	r3, r2
 8006894:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068b2:	e021      	b.n	80068f8 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 80068b4:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	461a      	mov	r2, r3
 80068c0:	0052      	lsls	r2, r2, #1
 80068c2:	441a      	add	r2, r3
 80068c4:	00d3      	lsls	r3, r2, #3
 80068c6:	461a      	mov	r2, r3
 80068c8:	460b      	mov	r3, r1
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	440b      	add	r3, r1
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4413      	add	r3, r2
 80068d2:	4423      	add	r3, r4
 80068d4:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80068d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80068dc:	6a3a      	ldr	r2, [r7, #32]
 80068de:	4413      	add	r3, r2
 80068e0:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80068e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	3206      	adds	r2, #6
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80068f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068f4:	3301      	adds	r3, #1
 80068f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068f8:	79bb      	ldrb	r3, [r7, #6]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068fe:	429a      	cmp	r2, r3
 8006900:	d3d8      	bcc.n	80068b4 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d047      	beq.n	8006998 <vl53l1_diff_histo_stddev+0x118>
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d044      	beq.n	8006998 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	b29b      	uxth	r3, r3
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006916:	e03a      	b.n	800698e <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8006918:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	461a      	mov	r2, r3
 8006924:	0052      	lsls	r2, r2, #1
 8006926:	441a      	add	r2, r3
 8006928:	00d3      	lsls	r3, r2, #3
 800692a:	461a      	mov	r2, r3
 800692c:	460b      	mov	r3, r1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	440b      	add	r3, r1
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	4413      	add	r3, r2
 8006936:	4423      	add	r3, r4
 8006938:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800693c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006940:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006948:	fb03 f202 	mul.w	r2, r3, r2
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006952:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8006954:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	3206      	adds	r2, #6
 800695a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006962:	fb03 f202 	mul.w	r2, r3, r2
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	fb92 f3f3 	sdiv	r3, r2, r3
 800696c:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	69b9      	ldr	r1, [r7, #24]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8006978:	69b8      	ldr	r0, [r7, #24]
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	441a      	add	r2, r3
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8006988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800698a:	3301      	adds	r3, #1
 800698c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800698e:	79bb      	ldrb	r3, [r7, #6]
 8006990:	b29b      	uxth	r3, r3
 8006992:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006994:	429a      	cmp	r2, r3
 8006996:	d3bf      	bcc.n	8006918 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8006998:	bf00      	nop
 800699a:	3728      	adds	r7, #40	; 0x28
 800699c:	46bd      	mov	sp, r7
 800699e:	bc90      	pop	{r4, r7}
 80069a0:	4770      	bx	lr

080069a2 <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 80069a2:	b5b0      	push	{r4, r5, r7, lr}
 80069a4:	b08c      	sub	sp, #48	; 0x30
 80069a6:	af02      	add	r7, sp, #8
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3318      	adds	r3, #24
 80069b0:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80069d2:	2318      	movs	r3, #24
 80069d4:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80069d6:	f107 0314 	add.w	r3, r7, #20
 80069da:	461a      	mov	r2, r3
 80069dc:	f248 018f 	movw	r1, #32911	; 0x808f
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f003 f9fb 	bl	8009ddc <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80069e6:	f107 0310 	add.w	r3, r7, #16
 80069ea:	461a      	mov	r2, r3
 80069ec:	f248 018e 	movw	r1, #32910	; 0x808e
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f003 f9f3 	bl	8009ddc <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fc:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f040 811b 	bne.w	8006c3c <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8006a20:	7efb      	ldrb	r3, [r7, #27]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	7eba      	ldrb	r2, [r7, #26]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a32:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a40:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006a44:	3b01      	subs	r3, #1
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e004      	b.n	8006a56 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8006a56:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8006a5a:	7efb      	ldrb	r3, [r7, #27]
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	0052      	lsls	r2, r2, #1
 8006a62:	441a      	add	r2, r3
 8006a64:	0153      	lsls	r3, r2, #5
 8006a66:	461a      	mov	r2, r3
 8006a68:	460b      	mov	r3, r1
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	440b      	add	r3, r1
 8006a6e:	019b      	lsls	r3, r3, #6
 8006a70:	4413      	add	r3, r2
 8006a72:	4403      	add	r3, r0
 8006a74:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8006a78:	3308      	adds	r3, #8
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dd0c      	ble.n	8006a9a <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8006a80:	7e79      	ldrb	r1, [r7, #25]
 8006a82:	7efa      	ldrb	r2, [r7, #27]
 8006a84:	f107 030c 	add.w	r3, r7, #12
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	460b      	mov	r3, r1
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	69f8      	ldr	r0, [r7, #28]
 8006a96:	f7ff fef3 	bl	8006880 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	db23      	blt.n	8006aea <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f018 fd1b 	bl	801f4ec <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8006ac8:	7efb      	ldrb	r3, [r7, #27]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad4:	2206      	movs	r2, #6
 8006ad6:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8006ada:	e034      	b.n	8006b46 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae2:	2207      	movs	r2, #7
 8006ae4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8006ae8:	e02d      	b.n	8006b46 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af0:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006af4:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006afc:	e01e      	b.n	8006b3c <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8006afe:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8006b02:	7e39      	ldrb	r1, [r7, #24]
 8006b04:	7efb      	ldrb	r3, [r7, #27]
 8006b06:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	3006      	adds	r0, #6
 8006b0e:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8006b12:	69f8      	ldr	r0, [r7, #28]
 8006b14:	461a      	mov	r2, r3
 8006b16:	0052      	lsls	r2, r2, #1
 8006b18:	441a      	add	r2, r3
 8006b1a:	00d3      	lsls	r3, r2, #3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	460b      	mov	r3, r1
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	440b      	add	r3, r1
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	4413      	add	r3, r2
 8006b28:	442b      	add	r3, r5
 8006b2a:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8006b2e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8006b32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006b36:	3301      	adds	r3, #1
 8006b38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006b3c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006b40:	7ebb      	ldrb	r3, [r7, #26]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d3db      	bcc.n	8006afe <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006b50:	461a      	mov	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d109      	bne.n	8006b6e <vl53l1_histo_merge+0x1cc>
 8006b5a:	7efb      	ldrb	r3, [r7, #27]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d106      	bne.n	8006b6e <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8006b6c:	e00e      	b.n	8006b8c <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 8006b6e:	7efb      	ldrb	r3, [r7, #27]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10b      	bne.n	8006b8c <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006b7e:	3301      	adds	r3, #1
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b88:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8006b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d102      	bne.n	8006b9a <vl53l1_histo_merge+0x1f8>
 8006b94:	7efb      	ldrb	r3, [r7, #27]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d069      	beq.n	8006c6e <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba0:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d162      	bne.n	8006c6e <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bac:	e008      	b.n	8006bc0 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8006bae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	3206      	adds	r2, #6
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8006bba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bc0:	7ebb      	ldrb	r3, [r7, #26]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d3f1      	bcc.n	8006bae <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8006bca:	2300      	movs	r3, #0
 8006bcc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bce:	e02f      	b.n	8006c30 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006bd6:	e023      	b.n	8006c20 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8006bd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	3206      	adds	r2, #6
 8006bde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8006be2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006be6:	7efb      	ldrb	r3, [r7, #27]
 8006be8:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8006bea:	69fc      	ldr	r4, [r7, #28]
 8006bec:	461a      	mov	r2, r3
 8006bee:	0052      	lsls	r2, r2, #1
 8006bf0:	441a      	add	r2, r3
 8006bf2:	00d3      	lsls	r3, r2, #3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	440b      	add	r3, r1
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	4413      	add	r3, r2
 8006c00:	442b      	add	r3, r5
 8006c02:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8006c06:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8006c0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c0c:	18c1      	adds	r1, r0, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	3206      	adds	r2, #6
 8006c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8006c16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006c20:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	dbd6      	blt.n	8006bd8 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8006c2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c30:	7ebb      	ldrb	r3, [r7, #26]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d3ca      	bcc.n	8006bd0 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8006c3a:	e018      	b.n	8006c6e <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c42:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c5a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8006c5e:	2bff      	cmp	r3, #255	; 0xff
 8006c60:	d105      	bne.n	8006c6e <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 8006c6e:	bf00      	nop
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c78 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b0c6      	sub	sp, #280	; 0x118
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c86:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8006c94:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8006c9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ca0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2185      	movs	r1, #133	; 0x85
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f010 fa51 	bl	8017150 <VL53L1_WrByte>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8006cb4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8006cbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006cc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	f007 f8df 	bl	800de88 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8006cca:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8006cce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006cd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006cd6:	f248 018c 	movw	r1, #32908	; 0x808c
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	f003 f87e 	bl	8009ddc <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8006ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d81b      	bhi.n	8006d20 <VL53L1_load_patch+0xa8>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <VL53L1_load_patch+0x78>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d09 	.word	0x08006d09
 8006cf8:	08006d11 	.word	0x08006d11
 8006cfc:	08006d19 	.word	0x08006d19
	case 0:
		patch_power = 0x00;
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006d06:	e00e      	b.n	8006d26 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006d0e:	e00a      	b.n	8006d26 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8006d10:	2320      	movs	r3, #32
 8006d12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006d16:	e006      	b.n	8006d26 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006d1e:	e002      	b.n	8006d26 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 8006d26:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d134      	bne.n	8006d98 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8006d2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d36:	2229      	movs	r2, #41	; 0x29
 8006d38:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8006d3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d42:	22c9      	movs	r2, #201	; 0xc9
 8006d44:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8006d46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d4e:	220e      	movs	r2, #14
 8006d50:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8006d52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d5a:	2240      	movs	r2, #64	; 0x40
 8006d5c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8006d5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d66:	2228      	movs	r2, #40	; 0x28
 8006d68:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8006d6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d78:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8006d7a:	f107 020c 	add.w	r2, r7, #12
 8006d7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d82:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006d86:	2306      	movs	r3, #6
 8006d88:	f240 4176 	movw	r1, #1142	; 0x476
 8006d8c:	6800      	ldr	r0, [r0, #0]
 8006d8e:	f010 f973 	bl	8017078 <VL53L1_WriteMulti>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006d98:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d132      	bne.n	8006e06 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8006da0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006da4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006da8:	2203      	movs	r2, #3
 8006daa:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8006dac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006db0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006db4:	226d      	movs	r2, #109	; 0x6d
 8006db6:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8006db8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006dbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8006dc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006dc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dcc:	226f      	movs	r2, #111	; 0x6f
 8006dce:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8006dd0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006dd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dd8:	2207      	movs	r2, #7
 8006dda:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8006ddc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006de0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006de4:	2229      	movs	r2, #41	; 0x29
 8006de6:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8006de8:	f107 020c 	add.w	r2, r7, #12
 8006dec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006df0:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006df4:	2306      	movs	r3, #6
 8006df6:	f240 4196 	movw	r1, #1174	; 0x496
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	f010 f93c 	bl	8017078 <VL53L1_WriteMulti>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006e06:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d11a      	bne.n	8006e44 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8006e0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8006e1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e22:	2207      	movs	r2, #7
 8006e24:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8006e26:	f107 020c 	add.w	r2, r7, #12
 8006e2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e2e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006e32:	2302      	movs	r3, #2
 8006e34:	f240 4172 	movw	r1, #1138	; 0x472
 8006e38:	6800      	ldr	r0, [r0, #0]
 8006e3a:	f010 f91d 	bl	8017078 <VL53L1_WriteMulti>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006e44:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d11a      	bne.n	8006e82 <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8006e4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8006e58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e60:	2207      	movs	r2, #7
 8006e62:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8006e64:	f107 020c 	add.w	r2, r7, #12
 8006e68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e6c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006e70:	2302      	movs	r3, #2
 8006e72:	f240 4174 	movw	r1, #1140	; 0x474
 8006e76:	6800      	ldr	r0, [r0, #0]
 8006e78:	f010 f8fe 	bl	8017078 <VL53L1_WriteMulti>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 8006e82:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10c      	bne.n	8006ea4 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8006e8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e92:	2201      	movs	r2, #1
 8006e94:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f010 f959 	bl	8017150 <VL53L1_WrByte>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8006ea4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8006eac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006eb0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2185      	movs	r1, #133	; 0x85
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f010 f949 	bl	8017150 <VL53L1_WrByte>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8006ec4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop

08006ed4 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8006ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d106      	bne.n	8006ef6 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2185      	movs	r1, #133	; 0x85
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f010 f92f 	bl	8017150 <VL53L1_WrByte>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8006ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f006 ffd4 	bl	800deac <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 8006f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d107      	bne.n	8006f1c <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f010 f91c 	bl	8017150 <VL53L1_WrByte>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8006f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 8006f24:	2201      	movs	r2, #1
 8006f26:	2185      	movs	r1, #133	; 0x85
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f010 f911 	bl	8017150 <VL53L1_WrByte>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8006f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8006f3e:	b5b0      	push	{r4, r5, r7, lr}
 8006f40:	b08a      	sub	sp, #40	; 0x28
 8006f42:	af04      	add	r7, sp, #16
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3318      	adds	r3, #24
 8006f52:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 8006f62:	2162      	movs	r1, #98	; 0x62
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f006 f810 	bl	800cf8a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2210      	movs	r2, #16
 8006f7a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006f86:	2300      	movs	r3, #0
 8006f88:	75bb      	strb	r3, [r7, #22]
 8006f8a:	e01b      	b.n	8006fc4 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8006f8c:	7dba      	ldrb	r2, [r7, #22]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006fbe:	7dbb      	ldrb	r3, [r7, #22]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	75bb      	strb	r3, [r7, #22]
 8006fc4:	7dbb      	ldrb	r3, [r7, #22]
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	d9e0      	bls.n	8006f8c <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2210      	movs	r2, #16
 8006fde:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006fea:	2300      	movs	r3, #0
 8006fec:	75bb      	strb	r3, [r7, #22]
 8006fee:	e039      	b.n	8007064 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8006ff0:	7dba      	ldrb	r2, [r7, #22]
 8006ff2:	68f9      	ldr	r1, [r7, #12]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 8007006:	7dba      	ldrb	r2, [r7, #22]
 8007008:	68f9      	ldr	r1, [r7, #12]
 800700a:	4613      	mov	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 800701c:	7dba      	ldrb	r2, [r7, #22]
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	4613      	mov	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 8007032:	7dba      	ldrb	r2, [r7, #22]
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	4613      	mov	r3, r2
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8007048:	7dba      	ldrb	r2, [r7, #22]
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	4613      	mov	r3, r2
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	1a9b      	subs	r3, r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	440b      	add	r3, r1
 8007056:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800705e:	7dbb      	ldrb	r3, [r7, #22]
 8007060:	3301      	adds	r3, #1
 8007062:	75bb      	strb	r3, [r7, #22]
 8007064:	7dbb      	ldrb	r3, [r7, #22]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d9c2      	bls.n	8006ff0 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2201      	movs	r2, #1
 8007074:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2200      	movs	r2, #0
 800707a:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2200      	movs	r2, #0
 8007080:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2201      	movs	r2, #1
 8007086:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2201      	movs	r2, #1
 800708c:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2201      	movs	r2, #1
 8007092:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800709a:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80070a2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80070aa:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2264      	movs	r2, #100	; 0x64
 80070b0:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80070b8:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c8:	2203      	movs	r2, #3
 80070ca:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f240 72db 	movw	r2, #2011	; 0x7db
 80070e0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80070ea:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f005 ff2e 	bl	800cf50 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80070fa:	3318      	adds	r3, #24
 80070fc:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f018 f9f2 	bl	801f4ec <memset>
	pdev->bin_rec_pos = 0;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <VL53L1_data_init+0x1fa>
 8007126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d104      	bne.n	8007138 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f8b8 	bl	80072a4 <VL53L1_read_p2p_data>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8007138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d107      	bne.n	8007150 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8007146:	4618      	mov	r0, r3
 8007148:	f003 fdf8 	bl	800ad3c <VL53L1_init_refspadchar_config_struct>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8007150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d107      	bne.n	8007168 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800715e:	4618      	mov	r0, r3
 8007160:	f003 fe10 	bl	800ad84 <VL53L1_init_ssc_config_struct>
 8007164:	4603      	mov	r3, r0
 8007166:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f003 fe21 	bl	800adc6 <VL53L1_init_xtalk_config_struct>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d107      	bne.n	80071a0 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8007196:	4618      	mov	r0, r3
 8007198:	f003 fe89 	bl	800aeae <VL53L1_init_xtalk_extract_config_struct>
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 80071a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80071ae:	4618      	mov	r0, r3
 80071b0:	f003 feac 	bl	800af0c <VL53L1_init_offset_cal_config_struct>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80071b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d107      	bne.n	80071d0 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80071c6:	4618      	mov	r0, r3
 80071c8:	f003 fec7 	bl	800af5a <VL53L1_init_zone_cal_config_struct>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80071d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f003 fedb 	bl	800afa2 <VL53L1_init_hist_post_process_config_struct>
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80071f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d107      	bne.n	8007208 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80071fe:	4618      	mov	r0, r3
 8007200:	f004 f8f6 	bl	800b3f0 <VL53L1_init_hist_gen3_dmax_config_struct>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d107      	bne.n	8007220 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007216:	4618      	mov	r0, r3
 8007218:	f003 ff32 	bl	800b080 <VL53L1_init_tuning_parm_storage_struct>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 8007220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d116      	bne.n	8007256 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	7858      	ldrb	r0, [r3, #1]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	8b1c      	ldrh	r4, [r3, #24]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	689d      	ldr	r5, [r3, #8]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	6912      	ldr	r2, [r2, #16]
 800723c:	6939      	ldr	r1, [r7, #16]
 800723e:	6949      	ldr	r1, [r1, #20]
 8007240:	9102      	str	r1, [sp, #8]
 8007242:	9201      	str	r2, [sp, #4]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	462b      	mov	r3, r5
 8007248:	4622      	mov	r2, r4
 800724a:	4601      	mov	r1, r0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc8f 	bl	8007b70 <VL53L1_set_preset_mode>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800725c:	461a      	mov	r2, r3
 800725e:	2118      	movs	r1, #24
 8007260:	2000      	movs	r0, #0
 8007262:	f00a fa90 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800726c:	461a      	mov	r2, r3
 800726e:	2118      	movs	r1, #24
 8007270:	2000      	movs	r0, #0
 8007272:	f00a fa88 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800727c:	461a      	mov	r2, r3
 800727e:	210c      	movs	r1, #12
 8007280:	2000      	movs	r0, #0
 8007282:	f006 fc26 	bl	800dad2 <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f009 fcd2 	bl	8010c30 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f009 fbd1 	bl	8010a34 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f009 fcf7 	bl	8010c86 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8007298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bdb0      	pop	{r4, r5, r7, pc}

080072a4 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80072a4:	b590      	push	{r4, r7, lr}
 80072a6:	b091      	sub	sp, #68	; 0x44
 80072a8:	af04      	add	r7, sp, #16
 80072aa:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3318      	adds	r3, #24
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	3348      	adds	r3, #72	; 0x48
 80072c4:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	339c      	adds	r3, #156	; 0x9c
 80072ca:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80072cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d109      	bne.n	80072e8 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f00d fdd1 	bl	8014e84 <VL53L1_get_static_nvm_managed>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80072e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d108      	bne.n	8007302 <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	3348      	adds	r3, #72	; 0x48
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f00d ff02 	bl	8015100 <VL53L1_get_customer_nvm_managed>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8007302:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007306:	2b00      	cmp	r3, #0
 8007308:	d117      	bne.n	800733a <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f00e fdda 	bl	8015ecc <VL53L1_get_nvm_copy_data>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 800731e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8007332:	4619      	mov	r1, r3
 8007334:	4610      	mov	r0, r2
 8007336:	f006 f921 	bl	800d57c <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 800733a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10e      	bne.n	8007360 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	895b      	ldrh	r3, [r3, #10]
 8007346:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8007360:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	33c0      	adds	r3, #192	; 0xc0
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f00d fc3c 	bl	8014bec <VL53L1_read_nvm_optical_centre>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 800737a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800737e:	2b00      	cmp	r3, #0
 8007380:	d108      	bne.n	8007394 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	3360      	adds	r3, #96	; 0x60
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f00d fc52 	bl	8014c32 <VL53L1_read_nvm_cal_peak_rate_map>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8007394:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007398:	2b00      	cmp	r3, #0
 800739a:	d12d      	bne.n	80073f8 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	339c      	adds	r3, #156	; 0x9c
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f00d fc6b 	bl	8014c7e <VL53L1_read_nvm_additional_offset_cal_data>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	889b      	ldrh	r3, [r3, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d120      	bne.n	80073f8 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11c      	bne.n	80073f8 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2280      	movs	r2, #128	; 0x80
 80073c2:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80073ca:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	69f9      	ldr	r1, [r7, #28]
 80073e2:	3102      	adds	r1, #2
 80073e4:	9103      	str	r1, [sp, #12]
 80073e6:	9202      	str	r2, [sp, #8]
 80073e8:	2238      	movs	r2, #56	; 0x38
 80073ea:	9201      	str	r2, [sp, #4]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	23ff      	movs	r3, #255	; 0xff
 80073f0:	22c7      	movs	r2, #199	; 0xc7
 80073f2:	4621      	mov	r1, r4
 80073f4:	f008 f934 	bl	800f660 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 80073f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d12f      	bne.n	8007460 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8007400:	f107 030c 	add.w	r3, r7, #12
 8007404:	461a      	mov	r2, r3
 8007406:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f00d fc5a 	bl	8014cc4 <VL53L1_read_nvm_fmt_range_results_data>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8007416:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800741a:	2b00      	cmp	r3, #0
 800741c:	d120      	bne.n	8007460 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 800741e:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8007426:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 800742e:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800743c:	2b00      	cmp	r3, #0
 800743e:	d006      	beq.n	800744e <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800744c:	e003      	b.n	8007456 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	2214      	movs	r2, #20
 8007452:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800745c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8007460:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800746e:	3308      	adds	r3, #8
 8007470:	461a      	mov	r2, r3
 8007472:	21de      	movs	r1, #222	; 0xde
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f00f fefb 	bl	8017270 <VL53L1_RdWord>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	d204      	bcs.n	8007496 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8007492:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8007496:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800749a:	2b00      	cmp	r3, #0
 800749c:	d108      	bne.n	80074b0 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	33bc      	adds	r3, #188	; 0xbc
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f97d 	bl	80077a4 <VL53L1_get_mode_mitigation_roi>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d114      	bne.n	80074e4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10f      	bne.n	80074e4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80074e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3734      	adds	r7, #52	; 0x34
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd90      	pop	{r4, r7, pc}

080074f0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3318      	adds	r3, #24
 8007502:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750a:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8007512:	23f1      	movs	r3, #241	; 0xf1
 8007514:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8007516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10e      	bne.n	800753c <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752a:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 800752e:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 800753c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3318      	adds	r3, #24
 800755e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007566:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800756e:	23f1      	movs	r3, #241	; 0xf1
 8007570:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8007572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007586:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 800758a:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8007592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b088      	sub	sp, #32
 80075a6:	af02      	add	r7, sp, #8
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3318      	adds	r3, #24
 80075b8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80075c4:	23f1      	movs	r3, #241	; 0xf1
 80075c6:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80075c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d11b      	bne.n	8007608 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f203 3362 	addw	r3, r3, #866	; 0x362
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	f502 725e 	add.w	r2, r2, #888	; 0x378
 80075f4:	9201      	str	r2, [sp, #4]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	460b      	mov	r3, r1
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	68b8      	ldr	r0, [r7, #8]
 8007600:	f006 fe0b 	bl	800e21a <VL53L1_calc_timeout_register_values>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8007608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007622:	2300      	movs	r3, #0
 8007624:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3318      	adds	r3, #24
 800762a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800763e:	23f1      	movs	r3, #241	; 0xf1
 8007640:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8007642:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d14a      	bne.n	80076e0 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f006 fc56 	bl	800df0a <VL53L1_calc_macro_period_us>
 800765e:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8007666:	6979      	ldr	r1, [r7, #20]
 8007668:	4618      	mov	r0, r3
 800766a:	f006 fd14 	bl	800e096 <VL53L1_calc_timeout_us>
 800766e:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 800767a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800767c:	8a7b      	ldrh	r3, [r7, #18]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8007688:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800768a:	4413      	add	r3, r2
 800768c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800768e:	8a7b      	ldrh	r3, [r7, #18]
 8007690:	6979      	ldr	r1, [r7, #20]
 8007692:	4618      	mov	r0, r3
 8007694:	f006 fd66 	bl	800e164 <VL53L1_calc_decoded_timeout_us>
 8007698:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 80076a4:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80076a6:	8a7b      	ldrh	r3, [r7, #18]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 80076b2:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80076b4:	4413      	add	r3, r2
 80076b6:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80076b8:	8a7b      	ldrh	r3, [r7, #18]
 80076ba:	6979      	ldr	r1, [r7, #20]
 80076bc:	4618      	mov	r0, r3
 80076be:	f006 fd51 	bl	800e164 <VL53L1_calc_decoded_timeout_us>
 80076c2:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80076e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	460b      	mov	r3, r1
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3318      	adds	r3, #24
 8007702:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8007704:	2301      	movs	r3, #1
 8007706:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	2b07      	cmp	r3, #7
 800770c:	d81c      	bhi.n	8007748 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	2201      	movs	r2, #1
 8007718:	fa02 f303 	lsl.w	r3, r2, r3
 800771c:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8007724:	7dbb      	ldrb	r3, [r7, #22]
 8007726:	4013      	ands	r3, r2
 8007728:	b2da      	uxtb	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	fa42 f303 	asr.w	r3, r2, r3
 8007740:	b2da      	uxtb	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	e001      	b.n	800774c <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007748:	23fc      	movs	r3, #252	; 0xfc
 800774a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800774c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007750:	4618      	mov	r0, r3
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3318      	adds	r3, #24
 800776e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	7858      	ldrb	r0, [r3, #1]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	7819      	ldrb	r1, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f203 339f 	addw	r3, r3, #927	; 0x39f
 800777e:	461a      	mov	r2, r3
 8007780:	f007 fdeb 	bl	800f35a <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	7898      	ldrb	r0, [r3, #2]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	78d9      	ldrb	r1, [r3, #3]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8007792:	461a      	mov	r2, r3
 8007794:	f007 fe20 	bl	800f3d8 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8007798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3318      	adds	r3, #24
 80077b6:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80077ca:	f107 020e 	add.w	r2, r7, #14
 80077ce:	f107 010d 	add.w	r1, r7, #13
 80077d2:	4618      	mov	r0, r3
 80077d4:	f00a f880 	bl	80118d8 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 80077d8:	7bba      	ldrb	r2, [r7, #14]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 80077de:	7b7a      	ldrb	r2, [r7, #13]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 80077ea:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	091b      	lsrs	r3, r3, #4
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8007802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3318      	adds	r3, #24
 8007820:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	331c      	adds	r3, #28
 800782c:	2240      	movs	r2, #64	; 0x40
 800782e:	4619      	mov	r1, r3
 8007830:	f017 fe34 	bl	801f49c <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	785a      	ldrb	r2, [r3, #1]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	33c2      	adds	r3, #194	; 0xc2
 800784c:	4618      	mov	r0, r3
 800784e:	f00f fbce 	bl	8016fee <VL53L1_init_zone_config_histogram_bins>
 8007852:	4603      	mov	r3, r0
 8007854:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d104      	bne.n	8007868 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8007866:	e00f      	b.n	8007888 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b0f      	cmp	r3, #15
 800786e:	d807      	bhi.n	8007880 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	3301      	adds	r3, #1
 8007876:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800787e:	e003      	b.n	8007888 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2211      	movs	r2, #17
 8007884:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8007888:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3318      	adds	r3, #24
 80078a6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	33c2      	adds	r3, #194	; 0xc2
 80078ac:	226c      	movs	r2, #108	; 0x6c
 80078ae:	4619      	mov	r1, r3
 80078b0:	6838      	ldr	r0, [r7, #0]
 80078b2:	f017 fdf3 	bl	801f49c <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 80078b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	460b      	mov	r3, r1
 80078d2:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3318      	adds	r3, #24
 80078dc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b26      	cmp	r3, #38	; 0x26
 80078e4:	f200 8139 	bhi.w	8007b5a <VL53L1_get_preset_mode_timing_cfg+0x296>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	0800798d 	.word	0x0800798d
 80078f4:	0800798d 	.word	0x0800798d
 80078f8:	0800798d 	.word	0x0800798d
 80078fc:	0800798d 	.word	0x0800798d
 8007900:	0800798d 	.word	0x0800798d
 8007904:	080079b7 	.word	0x080079b7
 8007908:	080079b7 	.word	0x080079b7
 800790c:	080079b7 	.word	0x080079b7
 8007910:	08007b5b 	.word	0x08007b5b
 8007914:	08007b5b 	.word	0x08007b5b
 8007918:	08007a0b 	.word	0x08007a0b
 800791c:	08007ab3 	.word	0x08007ab3
 8007920:	08007a0b 	.word	0x08007a0b
 8007924:	08007b5b 	.word	0x08007b5b
 8007928:	08007b5b 	.word	0x08007b5b
 800792c:	08007b5b 	.word	0x08007b5b
 8007930:	0800798d 	.word	0x0800798d
 8007934:	080079b7 	.word	0x080079b7
 8007938:	08007a0b 	.word	0x08007a0b
 800793c:	08007a0b 	.word	0x08007a0b
 8007940:	08007a0b 	.word	0x08007a0b
 8007944:	08007a0b 	.word	0x08007a0b
 8007948:	08007a0b 	.word	0x08007a0b
 800794c:	08007a35 	.word	0x08007a35
 8007950:	08007a5f 	.word	0x08007a5f
 8007954:	08007a89 	.word	0x08007a89
 8007958:	08007a0b 	.word	0x08007a0b
 800795c:	08007a0b 	.word	0x08007a0b
 8007960:	08007a0b 	.word	0x08007a0b
 8007964:	08007add 	.word	0x08007add
 8007968:	08007add 	.word	0x08007add
 800796c:	08007add 	.word	0x08007add
 8007970:	08007b07 	.word	0x08007b07
 8007974:	08007b07 	.word	0x08007b07
 8007978:	08007b07 	.word	0x08007b07
 800797c:	080079e1 	.word	0x080079e1
 8007980:	080079e1 	.word	0x080079e1
 8007984:	080079e1 	.word	0x080079e1
 8007988:	08007b31 	.word	0x08007b31
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	601a      	str	r2, [r3, #0]
	break;
 80079b4:	e0d4      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	601a      	str	r2, [r3, #0]
	break;
 80079de:	e0bf      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	601a      	str	r2, [r3, #0]
	break;
 8007a08:	e0aa      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	601a      	str	r2, [r3, #0]

	break;
 8007a32:	e095      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	601a      	str	r2, [r3, #0]
	break;
 8007a5c:	e080      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	601a      	str	r2, [r3, #0]
	break;
 8007a86:	e06b      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	601a      	str	r2, [r3, #0]
	break;
 8007ab0:	e056      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	601a      	str	r2, [r3, #0]
	break;
 8007ada:	e041      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	601a      	str	r2, [r3, #0]
	break;
 8007b04:	e02c      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	601a      	str	r2, [r3, #0]
	break;
 8007b2e:	e017      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	601a      	str	r2, [r3, #0]
	break;
 8007b58:	e002      	b.n	8007b60 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007b5a:	23fc      	movs	r3, #252	; 0xfc
 8007b5c:	75fb      	strb	r3, [r7, #23]
		break;
 8007b5e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b098      	sub	sp, #96	; 0x60
 8007b74:	af06      	add	r7, sp, #24
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	607b      	str	r3, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	72fb      	strb	r3, [r7, #11]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3318      	adds	r3, #24
 8007b8c:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007b94:	3308      	adds	r3, #8
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8007b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007b9e:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8007ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba2:	f203 3342 	addw	r3, r3, #834	; 0x342
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8007ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007baa:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8007bae:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8007bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb2:	f203 3362 	addw	r3, r3, #866	; 0x362
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bba:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8007bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8007bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bca:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8007bce:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8007bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd2:	33c2      	adds	r3, #194	; 0xc2
 8007bd4:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007bdc:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8007bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8007be4:	3318      	adds	r3, #24
 8007be6:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8007be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bea:	7afa      	ldrb	r2, [r7, #11]
 8007bec:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8007bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bf2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bf8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8007bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bfe:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8007c00:	2103      	movs	r1, #3
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f005 f9c1 	bl	800cf8a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	2b26      	cmp	r3, #38	; 0x26
 8007c0e:	f200 8321 	bhi.w	8008254 <VL53L1_set_preset_mode+0x6e4>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <VL53L1_set_preset_mode+0xa8>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007cb5 	.word	0x08007cb5
 8007c1c:	08007cd9 	.word	0x08007cd9
 8007c20:	08007cfd 	.word	0x08007cfd
 8007c24:	08007d21 	.word	0x08007d21
 8007c28:	08007d45 	.word	0x08007d45
 8007c2c:	08007d69 	.word	0x08007d69
 8007c30:	08007d8d 	.word	0x08007d8d
 8007c34:	08007db1 	.word	0x08007db1
 8007c38:	08008255 	.word	0x08008255
 8007c3c:	08008255 	.word	0x08008255
 8007c40:	08007dd5 	.word	0x08007dd5
 8007c44:	08007f3d 	.word	0x08007f3d
 8007c48:	080080cd 	.word	0x080080cd
 8007c4c:	080080f5 	.word	0x080080f5
 8007c50:	0800811d 	.word	0x0800811d
 8007c54:	08008145 	.word	0x08008145
 8007c58:	0800816d 	.word	0x0800816d
 8007c5c:	08008191 	.word	0x08008191
 8007c60:	08007f15 	.word	0x08007f15
 8007c64:	08007dfd 	.word	0x08007dfd
 8007c68:	08007e25 	.word	0x08007e25
 8007c6c:	08007e4d 	.word	0x08007e4d
 8007c70:	08007e75 	.word	0x08007e75
 8007c74:	08007e9d 	.word	0x08007e9d
 8007c78:	08007ec5 	.word	0x08007ec5
 8007c7c:	08007eed 	.word	0x08007eed
 8007c80:	08007f65 	.word	0x08007f65
 8007c84:	08007f8d 	.word	0x08007f8d
 8007c88:	08007fb5 	.word	0x08007fb5
 8007c8c:	08007fdd 	.word	0x08007fdd
 8007c90:	08008005 	.word	0x08008005
 8007c94:	0800802d 	.word	0x0800802d
 8007c98:	08008055 	.word	0x08008055
 8007c9c:	0800807d 	.word	0x0800807d
 8007ca0:	080080a5 	.word	0x080080a5
 8007ca4:	080081b5 	.word	0x080081b5
 8007ca8:	080081dd 	.word	0x080081dd
 8007cac:	08008205 	.word	0x08008205
 8007cb0:	0800822d 	.word	0x0800822d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	9303      	str	r3, [sp, #12]
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	9302      	str	r3, [sp, #8]
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ccc:	f003 fbc6 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007cd6:	e2c1      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cf0:	f003 fd2d 	bl	800b74e <VL53L1_preset_mode_standard_ranging_short_range>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007cfa:	e2af      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	9303      	str	r3, [sp, #12]
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	9302      	str	r3, [sp, #8]
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d14:	f003 fd60 	bl	800b7d8 <VL53L1_preset_mode_standard_ranging_long_range>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d1e:	e29d      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	9303      	str	r3, [sp, #12]
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	9302      	str	r3, [sp, #8]
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d38:	f003 fd93 	bl	800b862 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d42:	e28b      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	9303      	str	r3, [sp, #12]
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	9302      	str	r3, [sp, #8]
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d5c:	f003 fdaa 	bl	800b8b4 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d66:	e279      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	9303      	str	r3, [sp, #12]
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	9302      	str	r3, [sp, #8]
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d80:	f003 fdc1 	bl	800b906 <VL53L1_preset_mode_timed_ranging>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d8a:	e267      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	9303      	str	r3, [sp, #12]
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	9302      	str	r3, [sp, #8]
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007da2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007da4:	f003 fded 	bl	800b982 <VL53L1_preset_mode_timed_ranging_short_range>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007dae:	e255      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007dc8:	f003 fe19 	bl	800b9fe <VL53L1_preset_mode_timed_ranging_long_range>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007dd2:	e243      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	9303      	str	r3, [sp, #12]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007df0:	f003 fefb 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007dfa:	e22f      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e18:	f003 ff7c 	bl	800bd14 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e22:	e21b      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e40:	f003 ffcc 	bl	800bddc <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e4a:	e207      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e68:	f003 ffe0 	bl	800be2c <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e72:	e1f3      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	9302      	str	r3, [sp, #8]
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e90:	f004 f830 	bl	800bef4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e9a:	e1df      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	9303      	str	r3, [sp, #12]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	9302      	str	r3, [sp, #8]
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007eb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eb8:	f004 fe25 	bl	800cb06 <VL53L1_preset_mode_histogram_multizone>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007ec2:	e1cb      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	9303      	str	r3, [sp, #12]
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	9302      	str	r3, [sp, #8]
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007edc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ede:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ee0:	f004 fe63 	bl	800cbaa <VL53L1_preset_mode_histogram_multizone_short_range>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007eea:	e1b7      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f08:	f004 fea1 	bl	800cc4e <VL53L1_preset_mode_histogram_multizone_long_range>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f12:	e1a3      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f30:	f004 ffde 	bl	800cef0 <VL53L1_preset_mode_histogram_ranging_ref>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f3a:	e18f      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	9304      	str	r3, [sp, #16]
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f58:	f003 fff4 	bl	800bf44 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f62:	e17b      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f80:	f004 f86c 	bl	800c05c <VL53L1_preset_mode_histogram_long_range>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f8a:	e167      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	9303      	str	r3, [sp, #12]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	9302      	str	r3, [sp, #8]
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fa8:	f004 f8f6 	bl	800c198 <VL53L1_preset_mode_histogram_long_range_mm1>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007fb2:	e153      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	9302      	str	r3, [sp, #8]
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fd0:	f004 f943 	bl	800c25a <VL53L1_preset_mode_histogram_long_range_mm2>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007fda:	e13f      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	9302      	str	r3, [sp, #8]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ff8:	f004 f957 	bl	800c2aa <VL53L1_preset_mode_histogram_medium_range>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8008002:	e12b      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800801e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008020:	f004 f9e1 	bl	800c3e6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800802a:	e117      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	9304      	str	r3, [sp, #16]
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	9303      	str	r3, [sp, #12]
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	9302      	str	r3, [sp, #8]
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008044:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008046:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008048:	f004 fa2e 	bl	800c4a8 <VL53L1_preset_mode_histogram_medium_range_mm2>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8008052:	e103      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	9303      	str	r3, [sp, #12]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	9302      	str	r3, [sp, #8]
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800806e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008070:	f004 fa42 	bl	800c4f8 <VL53L1_preset_mode_histogram_short_range>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800807a:	e0ef      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	9303      	str	r3, [sp, #12]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	9302      	str	r3, [sp, #8]
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008094:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008096:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008098:	f004 fb4c 	bl	800c734 <VL53L1_preset_mode_histogram_short_range_mm1>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80080a2:	e0db      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	9304      	str	r3, [sp, #16]
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	9302      	str	r3, [sp, #8]
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080c0:	f004 fb99 	bl	800c7f6 <VL53L1_preset_mode_histogram_short_range_mm2>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80080ca:	e0c7      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	9303      	str	r3, [sp, #12]
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080e8:	f004 fbad 	bl	800c846 <VL53L1_preset_mode_histogram_characterisation>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80080f2:	e0b3      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	9304      	str	r3, [sp, #16]
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	9302      	str	r3, [sp, #8]
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800810e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008110:	f004 fbca 	bl	800c8a8 <VL53L1_preset_mode_histogram_xtalk_planar>
 8008114:	4603      	mov	r3, r0
 8008116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800811a:	e09f      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	9303      	str	r3, [sp, #12]
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008134:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008136:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008138:	f004 fc2d 	bl	800c996 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8008142:	e08b      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	9302      	str	r3, [sp, #8]
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	9301      	str	r3, [sp, #4]
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800815e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008160:	f004 fcad 	bl	800cabe <VL53L1_preset_mode_histogram_xtalk_mm2>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800816a:	e077      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	9303      	str	r3, [sp, #12]
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	9302      	str	r3, [sp, #8]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008182:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008184:	f004 fdb5 	bl	800ccf2 <VL53L1_preset_mode_olt>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800818e:	e065      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081a8:	f003 fce5 	bl	800bb76 <VL53L1_preset_mode_singleshot_ranging>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80081b2:	e053      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	9303      	str	r3, [sp, #12]
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	9302      	str	r3, [sp, #8]
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081d0:	f003 fc7d 	bl	800bace <VL53L1_preset_mode_low_power_auto_short_ranging>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80081da:	e03f      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	9303      	str	r3, [sp, #12]
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	9302      	str	r3, [sp, #8]
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081f8:	f003 fc3f 	bl	800ba7a <VL53L1_preset_mode_low_power_auto_ranging>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8008202:	e02b      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	9303      	str	r3, [sp, #12]
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	9302      	str	r3, [sp, #8]
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800821c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800821e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008220:	f003 fc7f 	bl	800bb22 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800822a:	e017      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	9302      	str	r3, [sp, #8]
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008244:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008246:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008248:	f004 f9f4 	bl	800c634 <VL53L1_preset_mode_special_histogram_short_range>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 8008252:	e003      	b.n	800825c <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008254:	23fc      	movs	r3, #252	; 0xfc
 8008256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 800825a:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 800825c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8008264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008266:	893a      	ldrh	r2, [r7, #8]
 8008268:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800826a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826c:	893a      	ldrh	r2, [r7, #8]
 800826e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8008270:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008274:	2b00      	cmp	r3, #0
 8008276:	d108      	bne.n	800828a <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8008278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800827a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff f98f 	bl	80075a2 <VL53L1_set_timeouts_us>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800828a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800828e:	2b00      	cmp	r3, #0
 8008290:	d106      	bne.n	80082a0 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8008292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff f92b 	bl	80074f0 <VL53L1_set_inter_measurement_period_ms>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80082a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80082a6:	3301      	adds	r3, #1
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ac:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80082b0:	4619      	mov	r1, r3
 80082b2:	4610      	mov	r0, r2
 80082b4:	f005 fa82 	bl	800d7bc <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 80082b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3748      	adds	r7, #72	; 0x48
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3318      	adds	r3, #24
 80082d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80082e2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3318      	adds	r3, #24
 8008306:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	887a      	ldrh	r2, [r7, #2]
 800830c:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8008310:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3318      	adds	r3, #24
 8008332:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800833e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3318      	adds	r3, #24
 8008362:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	887a      	ldrh	r2, [r7, #2]
 8008368:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800836c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b0d2      	sub	sp, #328	; 0x148
 8008380:	af00      	add	r7, sp, #0
 8008382:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008386:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800838a:	6018      	str	r0, [r3, #0]
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008394:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8008398:	4602      	mov	r2, r0
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80083a0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80083a4:	460a      	mov	r2, r1
 80083a6:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80083a8:	2300      	movs	r3, #0
 80083aa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80083ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80083b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3318      	adds	r3, #24
 80083ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 80083be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80083c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80083cc:	3308      	adds	r3, #8
 80083ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80083d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083d6:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80083da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80083de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083e2:	3348      	adds	r3, #72	; 0x48
 80083e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80083e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083ec:	f203 3342 	addw	r3, r3, #834	; 0x342
 80083f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80083f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083f8:	f203 3362 	addw	r3, r3, #866	; 0x362
 80083fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8008400:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008404:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8008408:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800840c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008410:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008414:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8008418:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800841c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8008420:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8008424:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008428:	332c      	adds	r3, #44	; 0x2c
 800842a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800842e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008432:	3348      	adds	r3, #72	; 0x48
 8008434:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8008438:	f107 030c 	add.w	r3, r7, #12
 800843c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8008458:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800845c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008460:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8008464:	7812      	ldrb	r2, [r2, #0]
 8008466:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8008468:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800846c:	791b      	ldrb	r3, [r3, #4]
 800846e:	b25b      	sxtb	r3, r3
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008476:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800847a:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 800847e:	f993 3000 	ldrsb.w	r3, [r3]
 8008482:	4313      	orrs	r3, r2
 8008484:	b25b      	sxtb	r3, r3
 8008486:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8008488:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800848c:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 800848e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008492:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8008496:	3336      	adds	r3, #54	; 0x36
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800849e:	4413      	add	r3, r2
 80084a0:	1d9a      	adds	r2, r3, #6
 80084a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80084a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80084aa:	4611      	mov	r1, r2
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f7ff f955 	bl	800775c <VL53L1_set_user_zone>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 80084b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084bc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d019      	beq.n	80084f8 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 80084c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80084cc:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80084da:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084de:	4413      	add	r3, r2
 80084e0:	1c9a      	adds	r2, r3, #2
 80084e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80084e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80084ea:	4611      	mov	r1, r2
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	f001 fbd7 	bl	8009ca0 <VL53L1_set_zone_dss_config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 80084f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084fc:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10d      	bne.n	8008524 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8008508:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800850c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8008510:	2b01      	cmp	r3, #1
 8008512:	d107      	bne.n	8008524 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8008514:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008518:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800851c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008520:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8008524:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852c:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8008530:	2bff      	cmp	r3, #255	; 0xff
 8008532:	d106      	bne.n	8008542 <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8008534:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800853c:	2200      	movs	r2, #0
 800853e:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008542:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800854a:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 800854e:	2b01      	cmp	r3, #1
 8008550:	d139      	bne.n	80085c6 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8008552:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800855e:	2b00      	cmp	r3, #0
 8008560:	d131      	bne.n	80085c6 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8008562:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008566:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 800856a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800856e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008572:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8008576:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800857a:	2220      	movs	r2, #32
 800857c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8008580:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008584:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8008588:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800858c:	2b00      	cmp	r3, #0
 800858e:	d109      	bne.n	80085a4 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8008590:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008594:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008598:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 800859a:	b21a      	sxth	r2, r3
 800859c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80085a0:	825a      	strh	r2, [r3, #18]
 80085a2:	e003      	b.n	80085ac <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 80085a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80085a8:	2200      	movs	r2, #0
 80085aa:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 80085ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80085b0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d805      	bhi.n	80085c6 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80085ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80085be:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80085c2:	2205      	movs	r2, #5
 80085c4:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80085c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ce:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d117      	bne.n	8008606 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80085d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085de:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d10f      	bne.n	8008606 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80085e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ee:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 80085f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085f6:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80085fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80085fe:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008602:	2206      	movs	r2, #6
 8008604:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8008606:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 800860e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008612:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	f007 f98c 	bl	800f934 <VL53L1_save_cfg_data>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8008622:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008626:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	3b01      	subs	r3, #1
 800862e:	2b05      	cmp	r3, #5
 8008630:	d826      	bhi.n	8008680 <VL53L1_init_and_start_range+0x304>
 8008632:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <VL53L1_init_and_start_range+0x2bc>)
 8008634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008638:	08008679 	.word	0x08008679
 800863c:	08008671 	.word	0x08008671
 8008640:	08008669 	.word	0x08008669
 8008644:	08008661 	.word	0x08008661
 8008648:	08008659 	.word	0x08008659
 800864c:	08008651 	.word	0x08008651
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8008650:	2301      	movs	r3, #1
 8008652:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008656:	e017      	b.n	8008688 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8008658:	230d      	movs	r3, #13
 800865a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800865e:	e013      	b.n	8008688 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8008660:	2324      	movs	r3, #36	; 0x24
 8008662:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008666:	e00f      	b.n	8008688 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8008668:	2344      	movs	r3, #68	; 0x44
 800866a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800866e:	e00b      	b.n	8008688 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8008670:	235a      	movs	r3, #90	; 0x5a
 8008672:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008676:	e007      	b.n	8008688 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8008678:	2371      	movs	r3, #113	; 0x71
 800867a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800867e:	e003      	b.n	8008688 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8008680:	2383      	movs	r3, #131	; 0x83
 8008682:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008686:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8008688:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800868c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8008690:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8008694:	f107 030c 	add.w	r3, r7, #12
 8008698:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800869c:	2300      	movs	r3, #0
 800869e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80086a2:	e00b      	b.n	80086bc <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 80086a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80086b2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80086bc:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80086c0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d3ed      	bcc.n	80086a4 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80086c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80086cc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d917      	bls.n	8008706 <VL53L1_init_and_start_range+0x38a>
 80086d6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d113      	bne.n	8008706 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80086de:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80086e2:	f1c3 0301 	rsb	r3, r3, #1
 80086e6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80086ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 80086ee:	f107 020c 	add.w	r2, r7, #12
 80086f2:	4413      	add	r3, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	210b      	movs	r1, #11
 80086f8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80086fc:	f00c fb0d 	bl	8014d1a <VL53L1_i2c_encode_static_nvm_managed>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8008706:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800870a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b04      	cmp	r3, #4
 8008712:	d917      	bls.n	8008744 <VL53L1_init_and_start_range+0x3c8>
 8008714:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008718:	2b00      	cmp	r3, #0
 800871a:	d113      	bne.n	8008744 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800871c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8008720:	f1c3 030d 	rsb	r3, r3, #13
 8008724:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8008728:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800872c:	f107 020c 	add.w	r2, r7, #12
 8008730:	4413      	add	r3, r2
 8008732:	461a      	mov	r2, r3
 8008734:	2117      	movs	r1, #23
 8008736:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800873a:	f00c fbca 	bl	8014ed2 <VL53L1_i2c_encode_customer_nvm_managed>
 800873e:	4603      	mov	r3, r0
 8008740:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8008744:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008748:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b03      	cmp	r3, #3
 8008750:	d917      	bls.n	8008782 <VL53L1_init_and_start_range+0x406>
 8008752:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008756:	2b00      	cmp	r3, #0
 8008758:	d113      	bne.n	8008782 <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800875a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800875e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8008762:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8008766:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800876a:	f107 020c 	add.w	r2, r7, #12
 800876e:	4413      	add	r3, r2
 8008770:	461a      	mov	r2, r3
 8008772:	2120      	movs	r1, #32
 8008774:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8008778:	f00c fce9 	bl	801514e <VL53L1_i2c_encode_static_config>
 800877c:	4603      	mov	r3, r0
 800877e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8008782:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008786:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d917      	bls.n	80087c0 <VL53L1_init_and_start_range+0x444>
 8008790:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008794:	2b00      	cmp	r3, #0
 8008796:	d113      	bne.n	80087c0 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008798:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800879c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80087a0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80087a4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 80087a8:	f107 020c 	add.w	r2, r7, #12
 80087ac:	4413      	add	r3, r2
 80087ae:	461a      	mov	r2, r3
 80087b0:	2116      	movs	r1, #22
 80087b2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80087b6:	f00c fdad 	bl	8015314 <VL53L1_i2c_encode_general_config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80087c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80087c4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d917      	bls.n	80087fe <VL53L1_init_and_start_range+0x482>
 80087ce:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d113      	bne.n	80087fe <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80087d6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80087da:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80087de:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80087e2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 80087e6:	f107 020c 	add.w	r2, r7, #12
 80087ea:	4413      	add	r3, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	2117      	movs	r1, #23
 80087f0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80087f4:	f00c fe12 	bl	801541c <VL53L1_i2c_encode_timing_config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80087fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008802:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d036      	beq.n	800887a <VL53L1_init_and_start_range+0x4fe>
 800880c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008810:	2b00      	cmp	r3, #0
 8008812:	d132      	bne.n	800887a <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008814:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8008818:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800881c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8008820:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b00      	cmp	r3, #0
 800882c:	d017      	beq.n	800885e <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008832:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	b2da      	uxtb	r2, r3
 800883a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800883e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008844:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	b2da      	uxtb	r2, r3
 800884c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008850:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008856:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8008858:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800885c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800885e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8008862:	f107 020c 	add.w	r2, r7, #12
 8008866:	4413      	add	r3, r2
 8008868:	461a      	mov	r2, r3
 800886a:	2112      	movs	r1, #18
 800886c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008870:	f00c fe56 	bl	8015520 <VL53L1_i2c_encode_dynamic_config>
 8008874:	4603      	mov	r3, r0
 8008876:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 800887a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800887e:	2b00      	cmp	r3, #0
 8008880:	d113      	bne.n	80088aa <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8008882:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8008886:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800888a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800888e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8008892:	f107 020c 	add.w	r2, r7, #12
 8008896:	4413      	add	r3, r2
 8008898:	461a      	mov	r2, r3
 800889a:	2105      	movs	r1, #5
 800889c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80088a0:	f00c fec3 	bl	801562a <VL53L1_i2c_encode_system_control>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 80088aa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10f      	bne.n	80088d2 <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 80088b2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80088b6:	f107 020c 	add.w	r2, r7, #12
 80088ba:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 80088be:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80088c2:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 80088c6:	6800      	ldr	r0, [r0, #0]
 80088c8:	f00e fbd6 	bl	8017078 <VL53L1_WriteMulti>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 80088d2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d109      	bne.n	80088ee <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80088da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80088de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	f004 fb82 	bl	800cfec <VL53L1_update_ll_driver_rd_state>
 80088e8:	4603      	mov	r3, r0
 80088ea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 80088ee:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d109      	bne.n	800890a <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80088f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80088fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	f004 fd15 	bl	800d32e <VL53L1_update_ll_driver_cfg_state>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 800890a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800890e:	4618      	mov	r0, r3
 8008910:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008920:	2300      	movs	r3, #0
 8008922:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3318      	adds	r3, #24
 8008928:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008930:	3308      	adds	r3, #8
 8008932:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800893a:	b25b      	sxtb	r3, r3
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008946:	b25b      	sxtb	r3, r3
 8008948:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f00c fea1 	bl	80156a0 <VL53L1_set_system_control>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8008968:	f003 030f 	and.w	r3, r3, #15
 800896c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8008974:	2103      	movs	r1, #3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f004 fb07 	bl	800cf8a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8008982:	3301      	adds	r3, #1
 8008984:	b2da      	uxtb	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f004 ff14 	bl	800d7bc <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f004 ff46 	bl	800d826 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a0:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d102      	bne.n	80089ae <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f008 f9b4 	bl	8010d16 <VL53L1_low_power_auto_data_stop_range>

	return status;
 80089ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b0c8      	sub	sp, #288	; 0x120
 80089be:	af00      	add	r7, sp, #0
 80089c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80089c8:	6018      	str	r0, [r3, #0]
 80089ca:	460a      	mov	r2, r1
 80089cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089d0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80089d4:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80089dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80089e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3318      	adds	r3, #24
 80089e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80089ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80089f0:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80089f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80089f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80089fc:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8008a00:	331c      	adds	r3, #28
 8008a02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8008a06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008a0a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8008a0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8008a12:	2388      	movs	r3, #136	; 0x88
 8008a14:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8008a24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a28:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d008      	beq.n	8008a44 <VL53L1_get_measurement_results+0x8a>
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d10d      	bne.n	8008a52 <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8008a36:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8008a3a:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8008a3e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8008a42:	e00a      	b.n	8008a5a <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8008a44:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8008a48:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8008a4c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8008a50:	e003      	b.n	8008a5a <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8008a52:	232c      	movs	r3, #44	; 0x2c
 8008a54:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8008a58:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8008a5a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10f      	bne.n	8008a82 <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8008a62:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8008a66:	f107 0208 	add.w	r2, r7, #8
 8008a6a:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8008a6e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008a72:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8008a76:	6800      	ldr	r0, [r0, #0]
 8008a78:	f00e fb34 	bl	80170e4 <VL53L1_ReadMulti>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8008a82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a86:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d917      	bls.n	8008ac0 <VL53L1_get_measurement_results+0x106>
 8008a90:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d113      	bne.n	8008ac0 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008a98:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8008a9c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8008aa0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8008aa4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8008aa8:	f107 0208 	add.w	r2, r7, #8
 8008aac:	4413      	add	r3, r2
 8008aae:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	2038      	movs	r0, #56	; 0x38
 8008ab6:	f00c ff71 	bl	801599c <VL53L1_i2c_decode_debug_results>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8008ac0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ac4:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d017      	beq.n	8008afe <VL53L1_get_measurement_results+0x144>
 8008ace:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d113      	bne.n	8008afe <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008ad6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8008ada:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8008ade:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8008ae2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8008ae6:	f107 0208 	add.w	r2, r7, #8
 8008aea:	4413      	add	r3, r2
 8008aec:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008af0:	4619      	mov	r1, r3
 8008af2:	2021      	movs	r0, #33	; 0x21
 8008af4:	f00c fef1 	bl	80158da <VL53L1_i2c_decode_core_results>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8008afe:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d110      	bne.n	8008b28 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8008b0c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8008b10:	f107 0208 	add.w	r2, r7, #8
 8008b14:	4413      	add	r3, r2
 8008b16:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	202c      	movs	r0, #44	; 0x2c
 8008b1e:	f00c fde6 	bl	80156ee <VL53L1_i2c_decode_system_results>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008b28:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8008b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3a:	b0a0      	sub	sp, #128	; 0x80
 8008b3c:	af06      	add	r7, sp, #24
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	460b      	mov	r3, r1
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3318      	adds	r3, #24
 8008b50:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008b58:	3308      	adds	r3, #8
 8008b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8008b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b5e:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8008b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b62:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008b66:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8008b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b6a:	332c      	adds	r3, #44	; 0x2c
 8008b6c:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 8008b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b70:	33c2      	adds	r3, #194	; 0xc2
 8008b72:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8008b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b76:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8008b7a:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8008b7c:	f107 0314 	add.w	r3, r7, #20
 8008b80:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8008b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b84:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008b88:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8008b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b8c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8008b90:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8008b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b94:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8008b98:	3318      	adds	r3, #24
 8008b9a:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8008b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8008ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ba6:	3348      	adds	r3, #72	; 0x48
 8008ba8:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8008baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bac:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8008bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb4:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8008bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8008bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bbc:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d108      	bne.n	8008bd6 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008bca:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <VL53L1_get_device_results+0xa0>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e000      	b.n	8008bd8 <VL53L1_get_device_results+0xa2>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8008bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bde:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 82a9 	beq.w	800913e <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8008bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fbd7 	bl	80093a8 <VL53L1_get_histogram_bin_data>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8008c00:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d118      	bne.n	8008c3a <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8008c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0a:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d114      	bne.n	8008c3a <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8008c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8008c1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c22:	4413      	add	r3, r2
 8008c24:	1d1a      	adds	r2, r3, #4
 8008c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c28:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f005 fb6c 	bl	800e30c <VL53L1_hist_copy_and_scale_ambient_info>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8008c3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f040 8220 	bne.w	8009084 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8008c44:	f107 0313 	add.w	r3, r7, #19
 8008c48:	4619      	mov	r1, r3
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f008 f91a 	bl	8010e84 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8008c50:	7cfb      	ldrb	r3, [r7, #19]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8008c5a:	7cfb      	ldrb	r3, [r7, #19]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 8008c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8008c6a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	3202      	adds	r2, #2
 8008c72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8008c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c78:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8008c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c7c:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8008c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c82:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8008c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f005 fa41 	bl	800e118 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8008c96:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8008c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8008ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca4:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8008cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cae:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8008cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb2:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8008cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cb6:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8008cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cbc:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8008cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cc0:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8008cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc6:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8008cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cca:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8008cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd0:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8008cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd6:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8008cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cdc:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8008ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ce2:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8008cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cee:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8008cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8008cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf8:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8008cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d00:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8008d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d08:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8008d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d0c:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8008d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d12:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f004 fc2f 	bl	800d57c <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8008d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d20:	795b      	ldrb	r3, [r3, #5]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d048      	beq.n	8008db8 <VL53L1_get_device_results+0x282>
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	dc56      	bgt.n	8008dd8 <VL53L1_get_device_results+0x2a2>
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d002      	beq.n	8008d34 <VL53L1_get_device_results+0x1fe>
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d02e      	beq.n	8008d90 <VL53L1_get_device_results+0x25a>
 8008d32:	e051      	b.n	8008dd8 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8008d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d36:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8008d3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8008d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d4c:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8008d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d52:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8008d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5e:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8008d62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d64:	319c      	adds	r1, #156	; 0x9c
 8008d66:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008d68:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8008d6c:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8008d70:	b2a4      	uxth	r4, r4
 8008d72:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8008d74:	351c      	adds	r5, #28
 8008d76:	9505      	str	r5, [sp, #20]
 8008d78:	9404      	str	r4, [sp, #16]
 8008d7a:	9003      	str	r0, [sp, #12]
 8008d7c:	9102      	str	r1, [sp, #8]
 8008d7e:	9201      	str	r2, [sp, #4]
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	4643      	mov	r3, r8
 8008d84:	4672      	mov	r2, lr
 8008d86:	4661      	mov	r1, ip
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f006 fa36 	bl	800f1fa <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8008d8e:	e027      	b.n	8008de0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8008d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8008d9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d9e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008dae:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8008db0:	b21a      	sxth	r2, r3
 8008db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db4:	839a      	strh	r2, [r3, #28]
		break;
 8008db6:	e013      	b.n	8008de0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8008db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dba:	331c      	adds	r3, #28
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008dc0:	f7fd fcf7 	bl	80067b2 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8008dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	b21a      	sxth	r2, r3
 8008dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd4:	839a      	strh	r2, [r3, #28]
		break;
 8008dd6:	e003      	b.n	8008de0 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8008dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dda:	2200      	movs	r2, #0
 8008ddc:	839a      	strh	r2, [r3, #28]
		break;
 8008dde:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8008de0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f040 814f 	bne.w	8009088 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8008dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dec:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8008df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008df8:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8008dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dfe:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 8008e02:	b29c      	uxth	r4, r3
 8008e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e06:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	f006 fb99 	bl	800f544 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 8008e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e14:	7999      	ldrb	r1, [r3, #6]
 8008e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e18:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 ff7b 	bl	8009d1a <VL53L1_get_dmax_calibration_data>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8008e2a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f040 812c 	bne.w	800908c <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 8008e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e36:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8008e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e3c:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8008e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e42:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8008e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e48:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8008e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e4e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8008e52:	3308      	adds	r3, #8
				pdev->wArea2,
 8008e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e56:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8008e5a:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8008e5c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8008e5e:	9405      	str	r4, [sp, #20]
 8008e60:	f107 0413 	add.w	r4, r7, #19
 8008e64:	9404      	str	r4, [sp, #16]
 8008e66:	9203      	str	r2, [sp, #12]
 8008e68:	9302      	str	r3, [sp, #8]
 8008e6a:	9001      	str	r0, [sp, #4]
 8008e6c:	9100      	str	r1, [sp, #0]
 8008e6e:	4633      	mov	r3, r6
 8008e70:	462a      	mov	r2, r5
 8008e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f00e fb45 	bl	8017504 <VL53L1_ipp_hist_process_data>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8008e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d050      	beq.n	8008f2a <VL53L1_get_device_results+0x3f4>
 8008e88:	7cfb      	ldrb	r3, [r7, #19]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d94d      	bls.n	8008f2a <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008e94:	e045      	b.n	8008f22 <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8008e96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008e9a:	224c      	movs	r2, #76	; 0x4c
 8008e9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ea0:	3310      	adds	r3, #16
 8008ea2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	7cfa      	ldrb	r2, [r7, #19]
 8008eb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	7cfa      	ldrb	r2, [r7, #19]
 8008ebe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eca:	7cfa      	ldrb	r2, [r7, #19]
 8008ecc:	fb93 f2f2 	sdiv	r2, r3, r2
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008ed8:	461a      	mov	r2, r3
 8008eda:	7cfb      	ldrb	r3, [r7, #19]
 8008edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eea:	461a      	mov	r2, r3
 8008eec:	7cfb      	ldrb	r3, [r7, #19]
 8008eee:	fb92 f3f3 	sdiv	r3, r2, r3
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008efc:	461a      	mov	r2, r3
 8008efe:	7cfb      	ldrb	r3, [r7, #19]
 8008f00:	fb92 f3f3 	sdiv	r3, r2, r3
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0e:	7cfa      	ldrb	r2, [r7, #19]
 8008f10:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8008f18:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008f22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d9b5      	bls.n	8008e96 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8008f2a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f040 80ae 	bne.w	8009090 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 8008f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f36:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8008f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f3c:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8008f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f42:	330e      	adds	r3, #14
 8008f44:	461a      	mov	r2, r3
 8008f46:	f006 f922 	bl	800f18e <VL53L1_hist_wrap_dmax>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8008f50:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 809d 	bne.w	8009094 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8008f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8008f64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6c:	4413      	add	r3, r2
 8008f6e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8008f70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8008f74:	4613      	mov	r3, r2
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008f80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f82:	4413      	add	r3, r2
 8008f84:	f103 0208 	add.w	r2, r3, #8
 8008f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f005 fc1d 	bl	800e7ca <VL53L1_hist_phase_consistency_check>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 8008f96:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d17c      	bne.n	8009098 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8008f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8008fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fb0:	4413      	add	r3, r2
 8008fb2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8008fb4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8008fb8:	4613      	mov	r3, r2
 8008fba:	011b      	lsls	r3, r3, #4
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008fc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f103 0208 	add.w	r2, r3, #8
 8008fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f006 f883 	bl	800f0de <VL53L1_hist_xmonitor_consistency_check>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 8008fde:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d15a      	bne.n	800909c <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8008fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	2210      	movs	r2, #16
 8008ff4:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8008ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ff8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8009004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009006:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800900a:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 800900c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800900e:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 8009012:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009016:	429a      	cmp	r2, r3
 8009018:	d222      	bcs.n	8009060 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 800901a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009022:	4413      	add	r3, r2
 8009024:	3304      	adds	r3, #4
 8009026:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8009028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902a:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 800902c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800902e:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8009030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009032:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8009034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009036:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8009038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800903e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009040:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8009048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904a:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8009052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009054:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 800905c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800905e:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 8009060:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11b      	bne.n	80090a0 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8009068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800906a:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800906e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009070:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 8009074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009076:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800907a:	331c      	adds	r3, #28
 800907c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800907e:	f006 fbbe 	bl	800f7fe <VL53L1_hist_copy_results_to_sys_and_core>
 8009082:	e00e      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8009084:	bf00      	nop
 8009086:	e00c      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8009088:	bf00      	nop
 800908a:	e00a      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800908c:	bf00      	nop
 800908e:	e008      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8009090:	bf00      	nop
 8009092:	e006      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8009094:	bf00      	nop
 8009096:	e004      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8009098:	bf00      	nop
 800909a:	e002      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80090a0:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80090a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d036      	beq.n	8009118 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 80090aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ac:	79db      	ldrb	r3, [r3, #7]
 80090ae:	2b06      	cmp	r3, #6
 80090b0:	d00a      	beq.n	80090c8 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 80090b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 80090ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f006 fc73 	bl	800f9a8 <VL53L1_dynamic_zone_update>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80090ce:	e015      	b.n	80090fc <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80090d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 80090d6:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <VL53L1_get_device_results+0x5ac>
 80090de:	2103      	movs	r1, #3
 80090e0:	e000      	b.n	80090e4 <VL53L1_get_device_results+0x5ae>
 80090e2:	2101      	movs	r1, #1
 80090e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80090e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090ea:	4413      	add	r3, r2
 80090ec:	460a      	mov	r2, r1
 80090ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80090f2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80090f6:	3301      	adds	r3, #1
 80090f8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80090fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009100:	2b0f      	cmp	r3, #15
 8009102:	d9e5      	bls.n	80090d0 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 8009104:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009108:	2b00      	cmp	r3, #0
 800910a:	d105      	bne.n	8009118 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f006 fcc6 	bl	800fa9e <VL53L1_multizone_hist_bins_update>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8009118:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800911c:	2b00      	cmp	r3, #0
 800911e:	d105      	bne.n	800912c <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f007 f9d3 	bl	80104cc <VL53L1_dynamic_xtalk_correction_corrector>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 800912c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009130:	2b00      	cmp	r3, #0
 8009132:	d043      	beq.n	80091bc <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8009138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	e03e      	b.n	80091bc <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 800913e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009142:	2b00      	cmp	r3, #0
 8009144:	d107      	bne.n	8009156 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	4619      	mov	r1, r3
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff fc35 	bl	80089ba <VL53L1_get_measurement_results>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8009156:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10d      	bne.n	800917a <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800915e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009160:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8009164:	4618      	mov	r0, r3
 8009166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009168:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 800916c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800916e:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 8009172:	321c      	adds	r2, #28
 8009174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009176:	f000 fc1f 	bl	80099b8 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d11c      	bne.n	80091bc <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 8009182:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10d      	bne.n	80091a6 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 800918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918c:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f007 fe24 	bl	8010de0 <VL53L1_low_power_auto_setup_manual_calibration>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	2201      	movs	r2, #1
 80091a2:	709a      	strb	r2, [r3, #2]
 80091a4:	e00a      	b.n	80091bc <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 80091a6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d102      	bne.n	80091bc <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	2202      	movs	r2, #2
 80091ba:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80091bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091be:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80091c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091c4:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80091c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091c8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80091cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091ce:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80091d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091d2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80091d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091d8:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 80091da:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f040 80b0 	bne.w	8009344 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80091e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e6:	2210      	movs	r2, #16
 80091e8:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80091ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091ee:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80091f2:	3301      	adds	r3, #1
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f8:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80091fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009202:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 8009206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009208:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800920c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009210:	429a      	cmp	r2, r3
 8009212:	f080 8097 	bcs.w	8009344 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 8009216:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 800921a:	4613      	mov	r3, r2
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8009226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009228:	4413      	add	r3, r2
 800922a:	3308      	adds	r3, #8
 800922c:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800922e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009230:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8009232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009234:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8009236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009238:	785a      	ldrb	r2, [r3, #1]
 800923a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800923c:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800923e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009240:	789a      	ldrb	r2, [r3, #2]
 8009242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009244:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8009246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009248:	78da      	ldrb	r2, [r3, #3]
 800924a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800924c:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800924e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009250:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8009254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009256:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8009258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800925a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800925e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009260:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 8009262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009264:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8009268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800926a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800926e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009270:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8009274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 800927a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800927c:	7c5a      	ldrb	r2, [r3, #17]
 800927e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009280:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8009282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009284:	7c9a      	ldrb	r2, [r3, #18]
 8009286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009288:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 800928a:	2300      	movs	r3, #0
 800928c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8009290:	e052      	b.n	8009338 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8009292:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8009296:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800929a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800929c:	204c      	movs	r0, #76	; 0x4c
 800929e:	fb00 f303 	mul.w	r3, r0, r3
 80092a2:	440b      	add	r3, r1
 80092a4:	3338      	adds	r3, #56	; 0x38
 80092a6:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80092a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80092aa:	4613      	mov	r3, r2
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4403      	add	r3, r0
 80092b4:	3308      	adds	r3, #8
 80092b6:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80092b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80092bc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80092c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092c2:	204c      	movs	r0, #76	; 0x4c
 80092c4:	fb00 f303 	mul.w	r3, r0, r3
 80092c8:	440b      	add	r3, r1
 80092ca:	333c      	adds	r3, #60	; 0x3c
 80092cc:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80092ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80092d0:	4613      	mov	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4403      	add	r3, r0
 80092da:	330c      	adds	r3, #12
 80092dc:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80092de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80092e2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80092e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092e8:	204c      	movs	r0, #76	; 0x4c
 80092ea:	fb00 f303 	mul.w	r3, r0, r3
 80092ee:	440b      	add	r3, r1
 80092f0:	3354      	adds	r3, #84	; 0x54
 80092f2:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80092f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092f6:	4613      	mov	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	3310      	adds	r3, #16
 8009302:	4602      	mov	r2, r0
 8009304:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8009306:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 800930a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 800930e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009310:	204c      	movs	r0, #76	; 0x4c
 8009312:	fb00 f303 	mul.w	r3, r0, r3
 8009316:	440b      	add	r3, r1
 8009318:	335e      	adds	r3, #94	; 0x5e
 800931a:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 800931c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800931e:	4613      	mov	r3, r2
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	440b      	add	r3, r1
 8009328:	3312      	adds	r3, #18
 800932a:	4602      	mov	r2, r0
 800932c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 800932e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009332:	3301      	adds	r3, #1
 8009334:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8009338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800933a:	7c9b      	ldrb	r3, [r3, #18]
 800933c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009340:	429a      	cmp	r2, r3
 8009342:	d3a6      	bcc.n	8009292 <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8009344:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009348:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f016 f8a6 	bl	801f49c <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8009350:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f003 ff35 	bl	800d1c8 <VL53L1_check_ll_driver_rd_state>
 800935e:	4603      	mov	r3, r0
 8009360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8009364:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8009368:	4618      	mov	r0, r3
 800936a:	3768      	adds	r7, #104	; 0x68
 800936c:	46bd      	mov	sp, r7
 800936e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009372 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8009382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d107      	bne.n	800939a <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	2203      	movs	r2, #3
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fe fff3 	bl	800837c <VL53L1_init_and_start_range>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800939a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b0d2      	sub	sp, #328	; 0x148
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80093b6:	6018      	str	r0, [r3, #0]
 80093b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80093c0:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 80093c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3318      	adds	r3, #24
 80093d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80093d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093dc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80093e6:	3308      	adds	r3, #8
 80093e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80093ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093f0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80093f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80093f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093fc:	f203 3342 	addw	r3, r3, #834	; 0x342
 8009400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8009404:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009408:	f203 3362 	addw	r3, r3, #866	; 0x362
 800940c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8009410:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009414:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8009418:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 800941c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009420:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8009424:	f107 030c 	add.w	r3, r7, #12
 8009428:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 800942c:	2300      	movs	r3, #0
 800942e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8009456:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800945a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8009462:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10d      	bne.n	8009486 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 800946a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800946e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8009472:	2353      	movs	r3, #83	; 0x53
 8009474:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8009478:	2188      	movs	r1, #136	; 0x88
 800947a:	6800      	ldr	r0, [r0, #0]
 800947c:	f00d fe32 	bl	80170e4 <VL53L1_ReadMulti>
 8009480:	4603      	mov	r3, r0
 8009482:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8009486:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009490:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 800949a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800949e:	785a      	ldrb	r2, [r3, #1]
 80094a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 80094ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094b2:	789a      	ldrb	r2, [r3, #2]
 80094b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80094c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094c6:	78da      	ldrb	r2, [r3, #3]
 80094c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 80094d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094da:	3304      	adds	r3, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	2002      	movs	r0, #2
 80094e0:	f004 fb75 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80094e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 80094f6:	234e      	movs	r3, #78	; 0x4e
 80094f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80094fc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8009500:	f107 020c 	add.w	r2, r7, #12
 8009504:	4413      	add	r3, r2
 8009506:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 800950a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800950e:	2002      	movs	r0, #2
 8009510:	f004 fb5d 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8009514:	4603      	mov	r3, r0
 8009516:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8009518:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800951c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8009526:	2350      	movs	r3, #80	; 0x50
 8009528:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 800952c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8009530:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009534:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8009538:	5cd2      	ldrb	r2, [r2, r3]
 800953a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800953e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8009548:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800954c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8009556:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800955a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955e:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8009562:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009566:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8009570:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009578:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 800957c:	2351      	movs	r3, #81	; 0x51
 800957e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8009582:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8009586:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800958a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800958e:	5cd3      	ldrb	r3, [r2, r3]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8009596:	2352      	movs	r3, #82	; 0x52
 8009598:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 800959c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80095a0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80095a4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80095a8:	5cd2      	ldrb	r2, [r2, r3]
 80095aa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80095ae:	4413      	add	r3, r2
 80095b0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 80095b4:	234d      	movs	r3, #77	; 0x4d
 80095b6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 80095ba:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80095be:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80095c2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80095c6:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 80095ca:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 80095cc:	2306      	movs	r3, #6
 80095ce:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80095d2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80095d6:	f107 020c 	add.w	r2, r7, #12
 80095da:	4413      	add	r3, r2
 80095dc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 80095e0:	2300      	movs	r3, #0
 80095e2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80095e6:	e01a      	b.n	800961e <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 80095e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80095ec:	2003      	movs	r0, #3
 80095ee:	f004 fb8d 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 80095f2:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 80095f4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 80095f8:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 80095fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095fe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3206      	adds	r2, #6
 8009606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 800960a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800960e:	3303      	adds	r3, #3
 8009610:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8009614:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8009618:	3301      	adds	r3, #1
 800961a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800961e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8009622:	2b17      	cmp	r3, #23
 8009624:	d9e0      	bls.n	80095e8 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8009626:	f107 0208 	add.w	r2, r7, #8
 800962a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800962e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009632:	f248 018d 	movw	r1, #32909	; 0x808d
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	f000 fbd0 	bl	8009ddc <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 800963c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009640:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800964a:	2b00      	cmp	r3, #0
 800964c:	d118      	bne.n	8009680 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800964e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009652:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8009656:	3318      	adds	r3, #24
 8009658:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f015 ff44 	bl	801f4ec <memset>
		pdev->bin_rec_pos = 0;
 8009664:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8009672:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8009680:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009684:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d10b      	bne.n	80096a6 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 800968e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009692:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8009696:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800969a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800969e:	6811      	ldr	r1, [r2, #0]
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f7fd f97e 	bl	80069a2 <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80096a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096aa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80096ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096b2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 80096ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096be:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2200      	movs	r2, #0
 80096c6:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80096c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2218      	movs	r2, #24
 80096d4:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80096d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2218      	movs	r2, #24
 80096e2:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 80096e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80096e8:	78da      	ldrb	r2, [r3, #3]
 80096ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096ee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80096f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80096fc:	799b      	ldrb	r3, [r3, #6]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8009704:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009708:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8009712:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009716:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8009720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009724:	7c1b      	ldrb	r3, [r3, #16]
 8009726:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8009728:	4413      	add	r3, r2
 800972a:	b29a      	uxth	r2, r3
 800972c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009730:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 800973a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800973e:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8009740:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009744:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 800974e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009752:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8009756:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800975a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800975e:	6811      	ldr	r1, [r2, #0]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	f004 fed4 	bl	800e50e <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8009766:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800976a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800976e:	2b00      	cmp	r3, #0
 8009770:	d117      	bne.n	80097a2 <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8009772:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009776:	791b      	ldrb	r3, [r3, #4]
 8009778:	b29b      	uxth	r3, r3
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 800977e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009782:	795b      	ldrb	r3, [r3, #5]
 8009784:	b29b      	uxth	r3, r3
		encoded_timeout =
 8009786:	4413      	add	r3, r2
 8009788:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 800978c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009790:	799a      	ldrb	r2, [r3, #6]
 8009792:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009796:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80097a0:	e016      	b.n	80097d0 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 80097a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097a6:	79db      	ldrb	r3, [r3, #7]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80097ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097b2:	7a1b      	ldrb	r3, [r3, #8]
 80097b4:	b29b      	uxth	r3, r3
		encoded_timeout =
 80097b6:	4413      	add	r3, r2
 80097b8:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 80097bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097c0:	7a5a      	ldrb	r2, [r3, #9]
 80097c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097c6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80097d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2200      	movs	r2, #0
 80097dc:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 80097de:	2300      	movs	r3, #0
 80097e0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80097e4:	e01f      	b.n	8009826 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80097e6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80097ea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80097ee:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80097f2:	6812      	ldr	r2, [r2, #0]
 80097f4:	4413      	add	r3, r2
 80097f6:	7b1b      	ldrb	r3, [r3, #12]
 80097f8:	f003 0307 	and.w	r3, r3, #7
 80097fc:	2b07      	cmp	r3, #7
 80097fe:	d10d      	bne.n	800981c <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8009800:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009804:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	7adb      	ldrb	r3, [r3, #11]
 800980c:	3304      	adds	r3, #4
 800980e:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8009810:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009814:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800981c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8009820:	3301      	adds	r3, #1
 8009822:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8009826:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800982a:	2b05      	cmp	r3, #5
 800982c:	d9db      	bls.n	80097e6 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 800982e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009832:	4618      	mov	r0, r3
 8009834:	f004 fcdb 	bl	800e1ee <VL53L1_decode_timeout>
 8009838:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 800983a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800983e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8009848:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800984c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009856:	4618      	mov	r0, r3
 8009858:	f007 fb54 	bl	8010f04 <VL53L1_calc_pll_period_us>
 800985c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8009860:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009864:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986e:	3301      	adds	r3, #1
 8009870:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8009874:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009878:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8009882:	4619      	mov	r1, r3
 8009884:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800988c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8009890:	f007 fb4f 	bl	8010f32 <VL53L1_duration_maths>
 8009894:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8009896:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800989a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80098a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 80098b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	f007 fc5e 	bl	801117e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 80098c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098c6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098ca:	6818      	ldr	r0, [r3, #0]
 80098cc:	f008 f875 	bl	80119ba <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80098d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098d4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80098d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80098e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80098ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 80098f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	789b      	ldrb	r3, [r3, #2]
 8009904:	461a      	mov	r2, r3
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009912:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009916:	4413      	add	r3, r2
 8009918:	3302      	adds	r3, #2
 800991a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800991e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009922:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8009924:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009928:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8009932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009936:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8009938:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800993c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800994a:	2200      	movs	r2, #0
 800994c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800994e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009952:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	2b11      	cmp	r3, #17
 8009962:	bf8c      	ite	hi
 8009964:	2201      	movhi	r2, #1
 8009966:	2200      	movls	r2, #0
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	2a00      	cmp	r2, #0
 800996c:	d11b      	bne.n	80099a6 <VL53L1_get_histogram_bin_data+0x5fe>
 800996e:	2201      	movs	r2, #1
 8009970:	409a      	lsls	r2, r3
 8009972:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <VL53L1_get_histogram_bin_data+0x60c>)
 8009974:	4013      	ands	r3, r2
 8009976:	2b00      	cmp	r3, #0
 8009978:	bf14      	ite	ne
 800997a:	2301      	movne	r3, #1
 800997c:	2300      	moveq	r3, #0
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b00      	cmp	r3, #0
 8009982:	d010      	beq.n	80099a6 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8009984:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009988:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8009992:	f003 031f 	and.w	r3, r3, #31
 8009996:	b2da      	uxtb	r2, r3
 8009998:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800999c:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 800999e:	23fa      	movs	r3, #250	; 0xfa
 80099a0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 80099a4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80099a6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	0002200e 	.word	0x0002200e

080099b8 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b08b      	sub	sp, #44	; 0x2c
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	78da      	ldrb	r2, [r3, #3]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2200      	movs	r2, #0
 80099e6:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2204      	movs	r2, #4
 80099ec:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2201      	movs	r2, #1
 80099f2:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	8a1b      	ldrh	r3, [r3, #16]
 80099f8:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	8a9b      	ldrh	r3, [r3, #20]
 80099fe:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	8a5b      	ldrh	r3, [r3, #18]
 8009a04:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8009a06:	2300      	movs	r3, #0
 8009a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a0c:	e00b      	b.n	8009a26 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8009a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	4413      	add	r3, r2
 8009a18:	2200      	movs	r2, #0
 8009a1a:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8009a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a20:	3301      	adds	r3, #1
 8009a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d9ef      	bls.n	8009a0e <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	3314      	adds	r3, #20
 8009a32:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a3a:	e0fe      	b.n	8009c3a <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a42:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	2200      	movs	r2, #0
 8009a48:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	78db      	ldrb	r3, [r3, #3]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	785b      	ldrb	r3, [r3, #1]
 8009a56:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8009a5a:	2b09      	cmp	r3, #9
 8009a5c:	d104      	bne.n	8009a68 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	2213      	movs	r2, #19
 8009a62:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8009a66:	e007      	b.n	8009a78 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	f003 031f 	and.w	r3, r3, #31
 8009a70:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	2200      	movs	r2, #0
 8009a82:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	2200      	movs	r2, #0
 8009a88:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	2200      	movs	r2, #0
 8009a94:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8009a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d05c      	beq.n	8009b62 <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8009aa8:	e0a8      	b.n	8009bfc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	789b      	ldrb	r3, [r3, #2]
 8009aae:	2b07      	cmp	r3, #7
 8009ab0:	d103      	bne.n	8009aba <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	8a7a      	ldrh	r2, [r7, #18]
 8009ab6:	82da      	strh	r2, [r3, #22]
 8009ab8:	e00b      	b.n	8009ad2 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	789b      	ldrb	r3, [r3, #2]
 8009abe:	2b08      	cmp	r3, #8
 8009ac0:	d103      	bne.n	8009aca <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	8aba      	ldrh	r2, [r7, #20]
 8009ac6:	82da      	strh	r2, [r3, #22]
 8009ac8:	e003      	b.n	8009ad2 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	8afa      	ldrh	r2, [r7, #22]
 8009ad6:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	895b      	ldrh	r3, [r3, #10]
 8009aec:	015b      	lsls	r3, r3, #5
 8009aee:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af6:	d302      	bcc.n	8009afe <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8009af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009afc:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8009b14:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b26:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	da01      	bge.n	8009b32 <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8009b2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009b32:	12db      	asrs	r3, r3, #11
 8009b34:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	b21a      	sxth	r2, r3
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8009b60:	e04c      	b.n	8009bfc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b78:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	8bdb      	ldrh	r3, [r3, #30]
 8009b86:	015b      	lsls	r3, r3, #5
 8009b88:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b90:	d302      	bcc.n	8009b98 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8009b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b96:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8009bae:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	fb02 f303 	mul.w	r3, r2, r3
 8009bb8:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bc0:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	da01      	bge.n	8009bcc <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8009bc8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009bcc:	12db      	asrs	r3, r3, #11
 8009bce:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	b21a      	sxth	r2, r3
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8009bfa:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	334c      	adds	r3, #76	; 0x4c
 8009c2e:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8009c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c34:	3301      	adds	r3, #1
 8009c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	f67f aefc 	bls.w	8009a3c <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	2b11      	cmp	r3, #17
 8009c54:	bf8c      	ite	hi
 8009c56:	2201      	movhi	r2, #1
 8009c58:	2200      	movls	r2, #0
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	2a00      	cmp	r2, #0
 8009c5e:	d116      	bne.n	8009c8e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8009c60:	2201      	movs	r2, #1
 8009c62:	409a      	lsls	r2, r3
 8009c64:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf14      	ite	ne
 8009c6c:	2301      	movne	r3, #1
 8009c6e:	2300      	moveq	r3, #0
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	f003 031f 	and.w	r3, r3, #31
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8009c8c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8009c8e:	bf00      	nop
 8009c90:	372c      	adds	r7, #44	; 0x2c
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	0002200e 	.word	0x0002200e

08009ca0 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3318      	adds	r3, #24
 8009cb2:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	332c      	adds	r3, #44	; 0x2c
 8009cb8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b05      	cmp	r3, #5
 8009cc0:	d109      	bne.n	8009cd6 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 8009cd4:	e003      	b.n	8009cde <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8009cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3318      	adds	r3, #24
 8009d02:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	78fa      	ldrb	r2, [r7, #3]
 8009d08:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8009d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b088      	sub	sp, #32
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	607b      	str	r3, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	72fb      	strb	r3, [r7, #11]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3318      	adds	r3, #24
 8009d34:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d006      	beq.n	8009d54 <VL53L1_get_dmax_calibration_data+0x3a>
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	dc3e      	bgt.n	8009dc8 <VL53L1_get_dmax_calibration_data+0xae>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d034      	beq.n	8009db8 <VL53L1_get_dmax_calibration_data+0x9e>
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d02a      	beq.n	8009da8 <VL53L1_get_dmax_calibration_data+0x8e>
 8009d52:	e039      	b.n	8009dc8 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8009d54:	7aba      	ldrb	r2, [r7, #10]
 8009d56:	6979      	ldr	r1, [r7, #20]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	1a9b      	subs	r3, r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	440b      	add	r3, r1
 8009d62:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 8009d6e:	7aba      	ldrb	r2, [r7, #10]
 8009d70:	6979      	ldr	r1, [r7, #20]
 8009d72:	4613      	mov	r3, r2
 8009d74:	00db      	lsls	r3, r3, #3
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 8009d8e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009da4:	811a      	strh	r2, [r3, #8]
	break;
 8009da6:	e012      	b.n	8009dce <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8009dac:	220a      	movs	r2, #10
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f015 fb73 	bl	801f49c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8009db6:	e00a      	b.n	8009dce <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f015 fb6b 	bl	801f49c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8009dc6:	e002      	b.n	8009dce <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009dc8:	23fc      	movs	r3, #252	; 0xfc
 8009dca:	77fb      	strb	r3, [r7, #31]
	break;
 8009dcc:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3720      	adds	r7, #32
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b089      	sub	sp, #36	; 0x24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	460b      	mov	r3, r1
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3318      	adds	r3, #24
 8009df2:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009dfa:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8009e02:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8009e04:	897b      	ldrh	r3, [r7, #10]
 8009e06:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009e0a:	2bbe      	cmp	r3, #190	; 0xbe
 8009e0c:	f200 86fc 	bhi.w	800ac08 <VL53L1_get_tuning_parm+0xe2c>
 8009e10:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <VL53L1_get_tuning_parm+0x3c>)
 8009e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e16:	bf00      	nop
 8009e18:	0800a115 	.word	0x0800a115
 8009e1c:	0800a125 	.word	0x0800a125
 8009e20:	0800a135 	.word	0x0800a135
 8009e24:	0800a145 	.word	0x0800a145
 8009e28:	0800a153 	.word	0x0800a153
 8009e2c:	0800a161 	.word	0x0800a161
 8009e30:	0800a16f 	.word	0x0800a16f
 8009e34:	0800a17d 	.word	0x0800a17d
 8009e38:	0800a18b 	.word	0x0800a18b
 8009e3c:	0800a199 	.word	0x0800a199
 8009e40:	0800a1a7 	.word	0x0800a1a7
 8009e44:	0800a1b3 	.word	0x0800a1b3
 8009e48:	0800a1c1 	.word	0x0800a1c1
 8009e4c:	0800a1cf 	.word	0x0800a1cf
 8009e50:	0800a1db 	.word	0x0800a1db
 8009e54:	0800a1e9 	.word	0x0800a1e9
 8009e58:	0800a1f7 	.word	0x0800a1f7
 8009e5c:	0800a207 	.word	0x0800a207
 8009e60:	0800a217 	.word	0x0800a217
 8009e64:	0800a225 	.word	0x0800a225
 8009e68:	0800a235 	.word	0x0800a235
 8009e6c:	0800a243 	.word	0x0800a243
 8009e70:	0800a253 	.word	0x0800a253
 8009e74:	0800a263 	.word	0x0800a263
 8009e78:	0800a273 	.word	0x0800a273
 8009e7c:	0800a283 	.word	0x0800a283
 8009e80:	0800a293 	.word	0x0800a293
 8009e84:	0800a2a3 	.word	0x0800a2a3
 8009e88:	0800a2b3 	.word	0x0800a2b3
 8009e8c:	0800a2c3 	.word	0x0800a2c3
 8009e90:	0800a2d3 	.word	0x0800a2d3
 8009e94:	0800a2e1 	.word	0x0800a2e1
 8009e98:	0800a2f1 	.word	0x0800a2f1
 8009e9c:	0800a301 	.word	0x0800a301
 8009ea0:	0800a311 	.word	0x0800a311
 8009ea4:	0800a321 	.word	0x0800a321
 8009ea8:	0800a331 	.word	0x0800a331
 8009eac:	0800a341 	.word	0x0800a341
 8009eb0:	0800a351 	.word	0x0800a351
 8009eb4:	0800a361 	.word	0x0800a361
 8009eb8:	0800a371 	.word	0x0800a371
 8009ebc:	0800a381 	.word	0x0800a381
 8009ec0:	0800a391 	.word	0x0800a391
 8009ec4:	0800a3a1 	.word	0x0800a3a1
 8009ec8:	0800a3b1 	.word	0x0800a3b1
 8009ecc:	0800a3c1 	.word	0x0800a3c1
 8009ed0:	0800a3d1 	.word	0x0800a3d1
 8009ed4:	0800a3e1 	.word	0x0800a3e1
 8009ed8:	0800a3f1 	.word	0x0800a3f1
 8009edc:	0800a401 	.word	0x0800a401
 8009ee0:	0800a411 	.word	0x0800a411
 8009ee4:	0800a41f 	.word	0x0800a41f
 8009ee8:	0800a42d 	.word	0x0800a42d
 8009eec:	0800a43b 	.word	0x0800a43b
 8009ef0:	0800a449 	.word	0x0800a449
 8009ef4:	0800a457 	.word	0x0800a457
 8009ef8:	0800a465 	.word	0x0800a465
 8009efc:	0800a473 	.word	0x0800a473
 8009f00:	0800a481 	.word	0x0800a481
 8009f04:	0800a48f 	.word	0x0800a48f
 8009f08:	0800a49d 	.word	0x0800a49d
 8009f0c:	0800a4ab 	.word	0x0800a4ab
 8009f10:	0800a4b9 	.word	0x0800a4b9
 8009f14:	0800a4c7 	.word	0x0800a4c7
 8009f18:	0800a4d5 	.word	0x0800a4d5
 8009f1c:	0800a4e3 	.word	0x0800a4e3
 8009f20:	0800a4f1 	.word	0x0800a4f1
 8009f24:	0800a4ff 	.word	0x0800a4ff
 8009f28:	0800a50d 	.word	0x0800a50d
 8009f2c:	0800a51b 	.word	0x0800a51b
 8009f30:	0800a529 	.word	0x0800a529
 8009f34:	0800a537 	.word	0x0800a537
 8009f38:	0800a545 	.word	0x0800a545
 8009f3c:	0800a553 	.word	0x0800a553
 8009f40:	0800a55f 	.word	0x0800a55f
 8009f44:	0800a56d 	.word	0x0800a56d
 8009f48:	0800a57b 	.word	0x0800a57b
 8009f4c:	0800a587 	.word	0x0800a587
 8009f50:	0800a593 	.word	0x0800a593
 8009f54:	0800a59f 	.word	0x0800a59f
 8009f58:	0800a5ab 	.word	0x0800a5ab
 8009f5c:	0800a5b7 	.word	0x0800a5b7
 8009f60:	0800a5c3 	.word	0x0800a5c3
 8009f64:	0800a5d1 	.word	0x0800a5d1
 8009f68:	0800a5df 	.word	0x0800a5df
 8009f6c:	0800a5ed 	.word	0x0800a5ed
 8009f70:	0800a5fb 	.word	0x0800a5fb
 8009f74:	0800a609 	.word	0x0800a609
 8009f78:	0800a617 	.word	0x0800a617
 8009f7c:	0800a625 	.word	0x0800a625
 8009f80:	0800a633 	.word	0x0800a633
 8009f84:	0800a641 	.word	0x0800a641
 8009f88:	0800a64f 	.word	0x0800a64f
 8009f8c:	0800a65d 	.word	0x0800a65d
 8009f90:	0800a66b 	.word	0x0800a66b
 8009f94:	0800a679 	.word	0x0800a679
 8009f98:	0800a687 	.word	0x0800a687
 8009f9c:	0800a695 	.word	0x0800a695
 8009fa0:	0800a6a3 	.word	0x0800a6a3
 8009fa4:	0800a6b1 	.word	0x0800a6b1
 8009fa8:	0800a6bf 	.word	0x0800a6bf
 8009fac:	0800a6cd 	.word	0x0800a6cd
 8009fb0:	0800a6db 	.word	0x0800a6db
 8009fb4:	0800a6e9 	.word	0x0800a6e9
 8009fb8:	0800a6f7 	.word	0x0800a6f7
 8009fbc:	0800a705 	.word	0x0800a705
 8009fc0:	0800a713 	.word	0x0800a713
 8009fc4:	0800a721 	.word	0x0800a721
 8009fc8:	0800a72f 	.word	0x0800a72f
 8009fcc:	0800a73d 	.word	0x0800a73d
 8009fd0:	0800a74b 	.word	0x0800a74b
 8009fd4:	0800a759 	.word	0x0800a759
 8009fd8:	0800a767 	.word	0x0800a767
 8009fdc:	0800a775 	.word	0x0800a775
 8009fe0:	0800a783 	.word	0x0800a783
 8009fe4:	0800a791 	.word	0x0800a791
 8009fe8:	0800a79f 	.word	0x0800a79f
 8009fec:	0800a7ad 	.word	0x0800a7ad
 8009ff0:	0800a7bb 	.word	0x0800a7bb
 8009ff4:	0800a7cd 	.word	0x0800a7cd
 8009ff8:	0800a7df 	.word	0x0800a7df
 8009ffc:	0800a7f1 	.word	0x0800a7f1
 800a000:	0800a803 	.word	0x0800a803
 800a004:	0800a815 	.word	0x0800a815
 800a008:	0800a827 	.word	0x0800a827
 800a00c:	0800a839 	.word	0x0800a839
 800a010:	0800a84b 	.word	0x0800a84b
 800a014:	0800a85d 	.word	0x0800a85d
 800a018:	0800a86f 	.word	0x0800a86f
 800a01c:	0800a881 	.word	0x0800a881
 800a020:	0800a893 	.word	0x0800a893
 800a024:	0800a8a5 	.word	0x0800a8a5
 800a028:	0800a8b7 	.word	0x0800a8b7
 800a02c:	0800a8c9 	.word	0x0800a8c9
 800a030:	0800a8db 	.word	0x0800a8db
 800a034:	0800a8ed 	.word	0x0800a8ed
 800a038:	0800a8ff 	.word	0x0800a8ff
 800a03c:	0800a911 	.word	0x0800a911
 800a040:	0800a91f 	.word	0x0800a91f
 800a044:	0800a92d 	.word	0x0800a92d
 800a048:	0800a93b 	.word	0x0800a93b
 800a04c:	0800a949 	.word	0x0800a949
 800a050:	0800a957 	.word	0x0800a957
 800a054:	0800a965 	.word	0x0800a965
 800a058:	0800a973 	.word	0x0800a973
 800a05c:	0800a985 	.word	0x0800a985
 800a060:	0800a993 	.word	0x0800a993
 800a064:	0800a9a1 	.word	0x0800a9a1
 800a068:	0800a9af 	.word	0x0800a9af
 800a06c:	0800a9bd 	.word	0x0800a9bd
 800a070:	0800a9cb 	.word	0x0800a9cb
 800a074:	0800a9d9 	.word	0x0800a9d9
 800a078:	0800a9e7 	.word	0x0800a9e7
 800a07c:	0800a9f5 	.word	0x0800a9f5
 800a080:	0800aa03 	.word	0x0800aa03
 800a084:	0800aa11 	.word	0x0800aa11
 800a088:	0800aa1f 	.word	0x0800aa1f
 800a08c:	0800aa2d 	.word	0x0800aa2d
 800a090:	0800aa3b 	.word	0x0800aa3b
 800a094:	0800aa49 	.word	0x0800aa49
 800a098:	0800aa57 	.word	0x0800aa57
 800a09c:	0800aa65 	.word	0x0800aa65
 800a0a0:	0800aa73 	.word	0x0800aa73
 800a0a4:	0800aa81 	.word	0x0800aa81
 800a0a8:	0800aa8f 	.word	0x0800aa8f
 800a0ac:	0800aa9d 	.word	0x0800aa9d
 800a0b0:	0800aaab 	.word	0x0800aaab
 800a0b4:	0800aab9 	.word	0x0800aab9
 800a0b8:	0800aac7 	.word	0x0800aac7
 800a0bc:	0800aad5 	.word	0x0800aad5
 800a0c0:	0800aae3 	.word	0x0800aae3
 800a0c4:	0800aaf1 	.word	0x0800aaf1
 800a0c8:	0800aaff 	.word	0x0800aaff
 800a0cc:	0800ab0d 	.word	0x0800ab0d
 800a0d0:	0800ab1b 	.word	0x0800ab1b
 800a0d4:	0800ab29 	.word	0x0800ab29
 800a0d8:	0800ab37 	.word	0x0800ab37
 800a0dc:	0800ab45 	.word	0x0800ab45
 800a0e0:	0800ab53 	.word	0x0800ab53
 800a0e4:	0800ab61 	.word	0x0800ab61
 800a0e8:	0800ab6f 	.word	0x0800ab6f
 800a0ec:	0800ab7d 	.word	0x0800ab7d
 800a0f0:	0800ab8b 	.word	0x0800ab8b
 800a0f4:	0800ab99 	.word	0x0800ab99
 800a0f8:	0800aba7 	.word	0x0800aba7
 800a0fc:	0800abb5 	.word	0x0800abb5
 800a100:	0800abc3 	.word	0x0800abc3
 800a104:	0800abd1 	.word	0x0800abd1
 800a108:	0800abdf 	.word	0x0800abdf
 800a10c:	0800abed 	.word	0x0800abed
 800a110:	0800abfb 	.word	0x0800abfb

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 800a11a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	601a      	str	r2, [r3, #0]
	break;
 800a120:	f000 bd79 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 800a12a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	601a      	str	r2, [r3, #0]
	break;
 800a130:	f000 bd71 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 800a13a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	601a      	str	r2, [r3, #0]
	break;
 800a140:	f000 bd69 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
	break;
 800a14e:	f000 bd62 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	601a      	str	r2, [r3, #0]
	break;
 800a15c:	f000 bd5b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	789b      	ldrb	r3, [r3, #2]
 800a164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	601a      	str	r2, [r3, #0]
	break;
 800a16a:	f000 bd54 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	78db      	ldrb	r3, [r3, #3]
 800a172:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	601a      	str	r2, [r3, #0]
	break;
 800a178:	f000 bd4d 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	791b      	ldrb	r3, [r3, #4]
 800a180:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
	break;
 800a186:	f000 bd46 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	795b      	ldrb	r3, [r3, #5]
 800a18e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	601a      	str	r2, [r3, #0]
	break;
 800a194:	f000 bd3f 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	799b      	ldrb	r3, [r3, #6]
 800a19c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	601a      	str	r2, [r3, #0]
	break;
 800a1a2:	f000 bd38 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
	break;
 800a1ae:	f000 bd32 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	891b      	ldrh	r3, [r3, #8]
 800a1b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	601a      	str	r2, [r3, #0]
	break;
 800a1bc:	f000 bd2b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	8a1b      	ldrh	r3, [r3, #16]
 800a1c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	601a      	str	r2, [r3, #0]
	break;
 800a1ca:	f000 bd24 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	601a      	str	r2, [r3, #0]
	break;
 800a1d6:	f000 bd1e 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	7e1b      	ldrb	r3, [r3, #24]
 800a1de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	601a      	str	r2, [r3, #0]
	break;
 800a1e4:	f000 bd17 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	8b5b      	ldrh	r3, [r3, #26]
 800a1ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
	break;
 800a1f2:	f000 bd10 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800a1fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	601a      	str	r2, [r3, #0]
	break;
 800a202:	f000 bd08 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a20c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	601a      	str	r2, [r3, #0]
	break;
 800a212:	f000 bd00 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a21a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	601a      	str	r2, [r3, #0]
	break;
 800a220:	f000 bcf9 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a22a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	601a      	str	r2, [r3, #0]
	break;
 800a230:	f000 bcf1 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a238:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]
	break;
 800a23e:	f000 bcea 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800a248:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	601a      	str	r2, [r3, #0]
	break;
 800a24e:	f000 bce2 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800a258:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]
	break;
 800a25e:	f000 bcda 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800a268:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
	break;
 800a26e:	f000 bcd2 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800a278:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
	break;
 800a27e:	f000 bcca 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800a288:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
	break;
 800a28e:	f000 bcc2 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 800a298:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	601a      	str	r2, [r3, #0]
	break;
 800a29e:	f000 bcba 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	601a      	str	r2, [r3, #0]
	break;
 800a2ae:	f000 bcb2 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	601a      	str	r2, [r3, #0]
	break;
 800a2be:	f000 bcaa 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800a2c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	601a      	str	r2, [r3, #0]
	break;
 800a2ce:	f000 bca2 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
	break;
 800a2dc:	f000 bc9b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	601a      	str	r2, [r3, #0]
	break;
 800a2ec:	f000 bc93 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	601a      	str	r2, [r3, #0]
	break;
 800a2fc:	f000 bc8b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 800a306:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	601a      	str	r2, [r3, #0]
	break;
 800a30c:	f000 bc83 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800a316:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	601a      	str	r2, [r3, #0]
	break;
 800a31c:	f000 bc7b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800a326:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	601a      	str	r2, [r3, #0]
	break;
 800a32c:	f000 bc73 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800a336:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]
	break;
 800a33c:	f000 bc6b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800a346:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	601a      	str	r2, [r3, #0]
	break;
 800a34c:	f000 bc63 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 800a356:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	601a      	str	r2, [r3, #0]
	break;
 800a35c:	f000 bc5b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800a366:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	601a      	str	r2, [r3, #0]
	break;
 800a36c:	f000 bc53 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800a376:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	601a      	str	r2, [r3, #0]
	break;
 800a37c:	f000 bc4b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800a386:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	601a      	str	r2, [r3, #0]
	break;
 800a38c:	f000 bc43 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	601a      	str	r2, [r3, #0]
	break;
 800a39c:	f000 bc3b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800a3a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	601a      	str	r2, [r3, #0]
	break;
 800a3ac:	f000 bc33 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	601a      	str	r2, [r3, #0]
	break;
 800a3bc:	f000 bc2b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a3c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	601a      	str	r2, [r3, #0]
	break;
 800a3cc:	f000 bc23 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a3d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	601a      	str	r2, [r3, #0]
	break;
 800a3dc:	f000 bc1b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a3e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
	break;
 800a3ec:	f000 bc13 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800a3f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
	break;
 800a3fc:	f000 bc0b 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800a406:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	601a      	str	r2, [r3, #0]
	break;
 800a40c:	f000 bc03 	b.w	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800a416:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	601a      	str	r2, [r3, #0]
	break;
 800a41c:	e3fb      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800a424:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
	break;
 800a42a:	e3f4      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 800a432:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
	break;
 800a438:	e3ed      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800a440:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	601a      	str	r2, [r3, #0]
	break;
 800a446:	e3e6      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800a44e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	601a      	str	r2, [r3, #0]
	break;
 800a454:	e3df      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800a45c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	601a      	str	r2, [r3, #0]
	break;
 800a462:	e3d8      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800a46a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	601a      	str	r2, [r3, #0]
	break;
 800a470:	e3d1      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a478:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
	break;
 800a47e:	e3ca      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800a486:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	601a      	str	r2, [r3, #0]
	break;
 800a48c:	e3c3      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800a494:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	601a      	str	r2, [r3, #0]
	break;
 800a49a:	e3bc      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800a4a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	601a      	str	r2, [r3, #0]
	break;
 800a4a8:	e3b5      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 800a4b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	601a      	str	r2, [r3, #0]
	break;
 800a4b6:	e3ae      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 800a4be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	601a      	str	r2, [r3, #0]
	break;
 800a4c4:	e3a7      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800a4cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	601a      	str	r2, [r3, #0]
	break;
 800a4d2:	e3a0      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 800a4da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	601a      	str	r2, [r3, #0]
	break;
 800a4e0:	e399      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800a4e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
	break;
 800a4ee:	e392      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800a4f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	601a      	str	r2, [r3, #0]
	break;
 800a4fc:	e38b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800a504:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	601a      	str	r2, [r3, #0]
	break;
 800a50a:	e384      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 800a512:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	601a      	str	r2, [r3, #0]
	break;
 800a518:	e37d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800a520:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	601a      	str	r2, [r3, #0]
	break;
 800a526:	e376      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800a52e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	601a      	str	r2, [r3, #0]
	break;
 800a534:	e36f      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800a53c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	601a      	str	r2, [r3, #0]
	break;
 800a542:	e368      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800a54a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]
	break;
 800a550:	e361      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	7c1b      	ldrb	r3, [r3, #16]
 800a556:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	601a      	str	r2, [r3, #0]
	break;
 800a55c:	e35b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a564:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	601a      	str	r2, [r3, #0]
	break;
 800a56a:	e354      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a572:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	601a      	str	r2, [r3, #0]
	break;
 800a578:	e34d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]
	break;
 800a584:	e347      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	601a      	str	r2, [r3, #0]
	break;
 800a590:	e341      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	8adb      	ldrh	r3, [r3, #22]
 800a596:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	601a      	str	r2, [r3, #0]
	break;
 800a59c:	e33b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	8b1b      	ldrh	r3, [r3, #24]
 800a5a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	601a      	str	r2, [r3, #0]
	break;
 800a5a8:	e335      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	601a      	str	r2, [r3, #0]
	break;
 800a5b4:	e32f      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	601a      	str	r2, [r3, #0]
	break;
 800a5c0:	e329      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 800a5c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
	break;
 800a5ce:	e322      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a5d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	601a      	str	r2, [r3, #0]
	break;
 800a5dc:	e31b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a5e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	601a      	str	r2, [r3, #0]
	break;
 800a5ea:	e314      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800a5f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	601a      	str	r2, [r3, #0]
	break;
 800a5f8:	e30d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a600:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	601a      	str	r2, [r3, #0]
	break;
 800a606:	e306      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 800a60e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	601a      	str	r2, [r3, #0]
	break;
 800a614:	e2ff      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 800a61c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
	break;
 800a622:	e2f8      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 800a62a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	601a      	str	r2, [r3, #0]
	break;
 800a630:	e2f1      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800a638:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	601a      	str	r2, [r3, #0]
	break;
 800a63e:	e2ea      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a646:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	601a      	str	r2, [r3, #0]
	break;
 800a64c:	e2e3      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 800a654:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	601a      	str	r2, [r3, #0]
	break;
 800a65a:	e2dc      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800a662:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	601a      	str	r2, [r3, #0]
	break;
 800a668:	e2d5      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 800a670:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	601a      	str	r2, [r3, #0]
	break;
 800a676:	e2ce      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800a67e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	601a      	str	r2, [r3, #0]
	break;
 800a684:	e2c7      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 800a68c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	601a      	str	r2, [r3, #0]
	break;
 800a692:	e2c0      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 800a69a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	601a      	str	r2, [r3, #0]
	break;
 800a6a0:	e2b9      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 800a6a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
	break;
 800a6ae:	e2b2      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800a6b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	601a      	str	r2, [r3, #0]
	break;
 800a6bc:	e2ab      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a6c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	601a      	str	r2, [r3, #0]
	break;
 800a6ca:	e2a4      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a6d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]
	break;
 800a6d8:	e29d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a6e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]
	break;
 800a6e6:	e296      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a6ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]
	break;
 800a6f4:	e28f      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800a6fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	601a      	str	r2, [r3, #0]
	break;
 800a702:	e288      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a70a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	601a      	str	r2, [r3, #0]
	break;
 800a710:	e281      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800a718:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	601a      	str	r2, [r3, #0]
	break;
 800a71e:	e27a      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800a726:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	601a      	str	r2, [r3, #0]
	break;
 800a72c:	e273      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800a734:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	601a      	str	r2, [r3, #0]
	break;
 800a73a:	e26c      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800a742:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]
	break;
 800a748:	e265      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a750:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
	break;
 800a756:	e25e      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800a75e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	601a      	str	r2, [r3, #0]
	break;
 800a764:	e257      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800a76c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	601a      	str	r2, [r3, #0]
	break;
 800a772:	e250      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800a77a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	601a      	str	r2, [r3, #0]
	break;
 800a780:	e249      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a788:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	601a      	str	r2, [r3, #0]
	break;
 800a78e:	e242      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a796:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	601a      	str	r2, [r3, #0]
	break;
 800a79c:	e23b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a7a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	601a      	str	r2, [r3, #0]
	break;
 800a7aa:	e234      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a7b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	601a      	str	r2, [r3, #0]
	break;
 800a7b8:	e22d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c0:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 800a7c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	601a      	str	r2, [r3, #0]
	break;
 800a7ca:	e224      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	601a      	str	r2, [r3, #0]
	break;
 800a7dc:	e21b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800a7e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	601a      	str	r2, [r3, #0]
	break;
 800a7ee:	e212      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800a7fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	601a      	str	r2, [r3, #0]
	break;
 800a800:	e209      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a808:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800a80c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
	break;
 800a812:	e200      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a81a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800a81e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
	break;
 800a824:	e1f7      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82c:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800a830:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	601a      	str	r2, [r3, #0]
	break;
 800a836:	e1ee      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800a842:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]
	break;
 800a848:	e1e5      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a850:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a854:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	601a      	str	r2, [r3, #0]
	break;
 800a85a:	e1dc      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a862:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 800a866:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	601a      	str	r2, [r3, #0]
	break;
 800a86c:	e1d3      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a874:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 800a878:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]
	break;
 800a87e:	e1ca      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a886:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a88a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	601a      	str	r2, [r3, #0]
	break;
 800a890:	e1c1      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a898:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 800a89c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	601a      	str	r2, [r3, #0]
	break;
 800a8a2:	e1b8      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8aa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
	break;
 800a8b4:	e1af      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a8c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	601a      	str	r2, [r3, #0]
	break;
 800a8c6:	e1a6      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a8d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	601a      	str	r2, [r3, #0]
	break;
 800a8d8:	e19d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a8e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	601a      	str	r2, [r3, #0]
	break;
 800a8ea:	e194      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800a8f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
	break;
 800a8fc:	e18b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a904:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800a908:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	601a      	str	r2, [r3, #0]
	break;
 800a90e:	e182      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a916:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]
	break;
 800a91c:	e17b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a924:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
	break;
 800a92a:	e174      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a932:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	601a      	str	r2, [r3, #0]
	break;
 800a938:	e16d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a940:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	601a      	str	r2, [r3, #0]
	break;
 800a946:	e166      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800a94e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	601a      	str	r2, [r3, #0]
	break;
 800a954:	e15f      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800a95c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	601a      	str	r2, [r3, #0]
	break;
 800a962:	e158      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800a96a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	601a      	str	r2, [r3, #0]
	break;
 800a970:	e151      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a978:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800a97c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	601a      	str	r2, [r3, #0]
	break;
 800a982:	e148      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800a98a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	601a      	str	r2, [r3, #0]
	break;
 800a990:	e141      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800a998:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	601a      	str	r2, [r3, #0]
	break;
 800a99e:	e13a      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 800a9a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	601a      	str	r2, [r3, #0]
	break;
 800a9ac:	e133      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800a9b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
	break;
 800a9ba:	e12c      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800a9c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	601a      	str	r2, [r3, #0]
	break;
 800a9c8:	e125      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800a9d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	601a      	str	r2, [r3, #0]
	break;
 800a9d6:	e11e      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 800a9de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	601a      	str	r2, [r3, #0]
	break;
 800a9e4:	e117      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800a9ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	601a      	str	r2, [r3, #0]
	break;
 800a9f2:	e110      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 800a9fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	601a      	str	r2, [r3, #0]
	break;
 800aa00:	e109      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800aa08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	601a      	str	r2, [r3, #0]
	break;
 800aa0e:	e102      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800aa16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	601a      	str	r2, [r3, #0]
	break;
 800aa1c:	e0fb      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800aa24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	601a      	str	r2, [r3, #0]
	break;
 800aa2a:	e0f4      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800aa32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	601a      	str	r2, [r3, #0]
	break;
 800aa38:	e0ed      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800aa40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	601a      	str	r2, [r3, #0]
	break;
 800aa46:	e0e6      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 800aa4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	601a      	str	r2, [r3, #0]
	break;
 800aa54:	e0df      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 800aa5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	601a      	str	r2, [r3, #0]
	break;
 800aa62:	e0d8      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 800aa6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	601a      	str	r2, [r3, #0]
	break;
 800aa70:	e0d1      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 800aa78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	601a      	str	r2, [r3, #0]
	break;
 800aa7e:	e0ca      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 800aa86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	601a      	str	r2, [r3, #0]
	break;
 800aa8c:	e0c3      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800aa94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	601a      	str	r2, [r3, #0]
	break;
 800aa9a:	e0bc      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800aaa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	601a      	str	r2, [r3, #0]
	break;
 800aaa8:	e0b5      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800aab0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	601a      	str	r2, [r3, #0]
	break;
 800aab6:	e0ae      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 800aabe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
	break;
 800aac4:	e0a7      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 800aacc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	601a      	str	r2, [r3, #0]
	break;
 800aad2:	e0a0      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 800aada:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	601a      	str	r2, [r3, #0]
	break;
 800aae0:	e099      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 800aae8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	601a      	str	r2, [r3, #0]
	break;
 800aaee:	e092      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800aaf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	601a      	str	r2, [r3, #0]
	break;
 800aafc:	e08b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800ab04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	601a      	str	r2, [r3, #0]
	break;
 800ab0a:	e084      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800ab12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]
	break;
 800ab18:	e07d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800ab20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	601a      	str	r2, [r3, #0]
	break;
 800ab26:	e076      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 800ab2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]
	break;
 800ab34:	e06f      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 800ab3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	601a      	str	r2, [r3, #0]
	break;
 800ab42:	e068      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 800ab4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	601a      	str	r2, [r3, #0]
	break;
 800ab50:	e061      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 800ab58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	601a      	str	r2, [r3, #0]
	break;
 800ab5e:	e05a      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 800ab66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	601a      	str	r2, [r3, #0]
	break;
 800ab6c:	e053      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800ab74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	601a      	str	r2, [r3, #0]
	break;
 800ab7a:	e04c      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800ab82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	601a      	str	r2, [r3, #0]
	break;
 800ab88:	e045      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800ab90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
	break;
 800ab96:	e03e      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800ab9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	601a      	str	r2, [r3, #0]
	break;
 800aba4:	e037      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 800abac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	601a      	str	r2, [r3, #0]
	break;
 800abb2:	e030      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 800abba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	601a      	str	r2, [r3, #0]
	break;
 800abc0:	e029      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 800abc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	601a      	str	r2, [r3, #0]
	break;
 800abce:	e022      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800abd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	601a      	str	r2, [r3, #0]
	break;
 800abdc:	e01b      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 800abe4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	601a      	str	r2, [r3, #0]
	break;
 800abea:	e014      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800abf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	601a      	str	r2, [r3, #0]
	break;
 800abf8:	e00d      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
	break;
 800ac06:	e006      	b.n	800ac16 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ac0e:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800ac10:	23fc      	movs	r3, #252	; 0xfc
 800ac12:	77fb      	strb	r3, [r7, #31]
	break;
 800ac14:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800ac16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3724      	adds	r7, #36	; 0x24
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop

0800ac28 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3318      	adds	r3, #24
 800ac38:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800ac46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b085      	sub	sp, #20
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3318      	adds	r3, #24
 800ac66:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800ac74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	3318      	adds	r3, #24
 800ac94:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800aca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3318      	adds	r3, #24
 800acc2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acca:	2200      	movs	r2, #0
 800accc:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800acd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	3318      	adds	r3, #24
 800acf0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800acfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3318      	adds	r3, #24
 800ad1e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800ad2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2208      	movs	r2, #8
 800ad4c:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	220b      	movs	r2, #11
 800ad52:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad5a:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ad62:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800ad6a:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ad72:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ad74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2212      	movs	r2, #18
 800ad9a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	220f      	movs	r2, #15
 800ada0:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2202      	movs	r2, #2
 800ada6:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800adae:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	220c      	movs	r2, #12
 800adb4:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800adb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800add0:	2300      	movs	r3, #0
 800add2:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	895b      	ldrh	r3, [r3, #10]
 800add8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	895b      	ldrh	r3, [r3, #10]
 800adf6:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae16:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2240      	movs	r2, #64	; 0x40
 800ae22:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10d      	bne.n	800ae48 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d108      	bne.n	800ae48 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d103      	bne.n	800ae48 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2200      	movs	r2, #0
 800ae44:	741a      	strb	r2, [r3, #16]
 800ae46:	e002      	b.n	800ae4e <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800ae4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d114      	bne.n	800ae80 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d110      	bne.n	800ae80 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	7d9b      	ldrb	r3, [r3, #22]
 800ae72:	f003 f879 	bl	800df68 <VL53L1_calc_range_ignore_threshold>
 800ae76:	4603      	mov	r3, r0
 800ae78:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	831a      	strh	r2, [r3, #24]
 800ae7e:	e002      	b.n	800ae86 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2200      	movs	r2, #0
 800ae84:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800ae8c:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2232      	movs	r2, #50	; 0x32
 800ae92:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800ae9a:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	228c      	movs	r2, #140	; 0x8c
 800aea0:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800aea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800aec0:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aec8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2207      	movs	r2, #7
 800aece:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f643 2298 	movw	r2, #15000	; 0x3a98
 800aed6:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f242 7210 	movw	r2, #10000	; 0x2710
 800aede:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800aee6:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2246      	movs	r2, #70	; 0x46
 800aeec:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800aef4:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	228c      	movs	r2, #140	; 0x8c
 800aefa:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800aefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800af1e:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f643 2298 	movw	r2, #15000	; 0x3a98
 800af26:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800af2e:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800af36:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2208      	movs	r2, #8
 800af3c:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2228      	movs	r2, #40	; 0x28
 800af42:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2209      	movs	r2, #9
 800af48:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800af4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b085      	sub	sp, #20
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800af6c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f643 2298 	movw	r2, #15000	; 0x3a98
 800af74:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af7c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af84:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2210      	movs	r2, #16
 800af8a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2208      	movs	r2, #8
 800af90:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800af92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b085      	sub	sp, #20
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	4603      	mov	r3, r0
 800afaa:	6039      	str	r1, [r7, #0]
 800afac:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800afae:	2300      	movs	r3, #0
 800afb0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	2204      	movs	r2, #4
 800afb6:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	2201      	movs	r2, #1
 800afbc:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2201      	movs	r2, #1
 800afc2:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2202      	movs	r2, #2
 800afc8:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2201      	movs	r2, #1
 800afce:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	2250      	movs	r2, #80	; 0x50
 800afd4:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2270      	movs	r2, #112	; 0x70
 800afda:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	f241 023d 	movw	r2, #4157	; 0x103d
 800afe2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2210      	movs	r2, #16
 800afe8:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2232      	movs	r2, #50	; 0x32
 800afee:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2264      	movs	r2, #100	; 0x64
 800aff4:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2201      	movs	r2, #1
 800affa:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	22a0      	movs	r2, #160	; 0xa0
 800b000:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2200      	movs	r2, #0
 800b006:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800b00e:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	2208      	movs	r2, #8
 800b014:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2288      	movs	r2, #136	; 0x88
 800b01c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2208      	movs	r2, #8
 800b024:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b036:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	22fa      	movs	r2, #250	; 0xfa
 800b03c:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	79fa      	ldrb	r2, [r7, #7]
 800b042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800b04c:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2232      	movs	r2, #50	; 0x32
 800b052:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800b05a:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	228c      	movs	r2, #140	; 0x8c
 800b060:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2250      	movs	r2, #80	; 0x50
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2232      	movs	r2, #50	; 0x32
 800b06e:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800b070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b088:	2300      	movs	r3, #0
 800b08a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	220e      	movs	r2, #14
 800b096:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f642 7294 	movw	r2, #12180	; 0x2f94
 800b09e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	220e      	movs	r2, #14
 800b0a4:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2206      	movs	r2, #6
 800b0b0:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	220e      	movs	r2, #14
 800b0b6:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	220a      	movs	r2, #10
 800b0bc:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2206      	movs	r2, #6
 800b0c2:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2209      	movs	r2, #9
 800b0c8:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2205      	movs	r2, #5
 800b0ce:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2203      	movs	r2, #3
 800b0d4:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2206      	movs	r2, #6
 800b0da:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2206      	movs	r2, #6
 800b0e0:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2206      	movs	r2, #6
 800b0e6:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2221      	movs	r2, #33	; 0x21
 800b0f2:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	223c      	movs	r2, #60	; 0x3c
 800b104:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	223c      	movs	r2, #60	; 0x3c
 800b10a:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	223c      	movs	r2, #60	; 0x3c
 800b110:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2280      	movs	r2, #128	; 0x80
 800b116:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2280      	movs	r2, #128	; 0x80
 800b11c:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2280      	movs	r2, #128	; 0x80
 800b122:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2208      	movs	r2, #8
 800b128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2210      	movs	r2, #16
 800b130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b162:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b16a:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b172:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b17a:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b182:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b18a:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f242 3228 	movw	r2, #9000	; 0x2328
 800b192:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f241 7270 	movw	r2, #6000	; 0x1770
 800b19a:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b1a2:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f242 3228 	movw	r2, #9000	; 0x2328
 800b1aa:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f241 7270 	movw	r2, #6000	; 0x1770
 800b1b2:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1ba:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1c2:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1ca:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1d2:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1da:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f24f 6218 	movw	r2, #63000	; 0xf618
 800b1e2:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b1ea:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b1f2:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b1fa:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b208:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b210:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f242 7210 	movw	r2, #10000	; 0x2710
 800b228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2206      	movs	r2, #6
 800b230:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b242:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f640 22be 	movw	r2, #2750	; 0xabe
 800b24c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	22fa      	movs	r2, #250	; 0xfa
 800b254:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b25e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b268:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800b272:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b27c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800b286:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f64f 7238 	movw	r2, #65336	; 0xff38
 800b290:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	22c8      	movs	r2, #200	; 0xc8
 800b298:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	22fa      	movs	r2, #250	; 0xfa
 800b2a0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b2aa:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f640 1206 	movw	r2, #2310	; 0x906
 800b2b4:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f640 1206 	movw	r2, #2310	; 0x906
 800b2c6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b2d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800b2da:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b2e4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800b2ee:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f641 022e 	movw	r2, #6190	; 0x182e
 800b2f8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f641 3230 	movw	r2, #6960	; 0x1b30
 800b312:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f641 022e 	movw	r2, #6190	; 0x182e
 800b31c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	22fa      	movs	r2, #250	; 0xfa
 800b324:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b32e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800b338:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f241 1294 	movw	r2, #4500	; 0x1194
 800b342:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f64f 7238 	movw	r2, #65336	; 0xff38
 800b34c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	22c8      	movs	r2, #200	; 0xc8
 800b354:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f640 3222 	movw	r2, #2850	; 0xb22
 800b35e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f640 42e4 	movw	r2, #3300	; 0xce4
 800b368:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f640 721e 	movw	r2, #3870	; 0xf1e
 800b382:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f241 222a 	movw	r2, #4650	; 0x122a
 800b38c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f640 720a 	movw	r2, #3850	; 0xf0a
 800b396:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f641 6214 	movw	r2, #7700	; 0x1e14
 800b3b8:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800b3c2:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f641 1288 	movw	r2, #6536	; 0x1988
 800b3dc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 800b3e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b402:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2238      	movs	r2, #56	; 0x38
 800b408:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2270      	movs	r2, #112	; 0x70
 800b414:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2210      	movs	r2, #16
 800b41a:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2264      	movs	r2, #100	; 0x64
 800b420:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b428:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	220f      	movs	r2, #15
 800b42e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2234      	movs	r2, #52	; 0x34
 800b434:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	22c8      	movs	r2, #200	; 0xc8
 800b43a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b442:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b44a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b44c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b46a:	2300      	movs	r3, #0
 800b46c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b474:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2211      	movs	r2, #17
 800b4b6:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2200      	movs	r2, #0
 800b504:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	22ff      	movs	r2, #255	; 0xff
 800b510:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51c:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2220      	movs	r2, #32
 800b544:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	220b      	movs	r2, #11
 800b54a:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2202      	movs	r2, #2
 800b558:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	220d      	movs	r2, #13
 800b55e:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800b586:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2238      	movs	r2, #56	; 0x38
 800b592:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	22ff      	movs	r2, #255	; 0xff
 800b598:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	221a      	movs	r2, #26
 800b5aa:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2220      	movs	r2, #32
 800b5b6:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	22cc      	movs	r2, #204	; 0xcc
 800b5c2:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	220b      	movs	r2, #11
 800b5c8:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	22f5      	movs	r2, #245	; 0xf5
 800b5d4:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2209      	movs	r2, #9
 800b5da:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2208      	movs	r2, #8
 800b5f0:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2278      	movs	r2, #120	; 0x78
 800b5f6:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2200      	movs	r2, #0
 800b602:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2207      	movs	r2, #7
 800b608:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2221      	movs	r2, #33	; 0x21
 800b60e:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	2243      	movs	r2, #67	; 0x43
 800b614:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2210      	movs	r2, #16
 800b61a:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2232      	movs	r2, #50	; 0x32
 800b620:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2254      	movs	r2, #84	; 0x54
 800b626:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2207      	movs	r2, #7
 800b62c:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2221      	movs	r2, #33	; 0x21
 800b632:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2243      	movs	r2, #67	; 0x43
 800b638:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2210      	movs	r2, #16
 800b63e:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2202      	movs	r2, #2
 800b644:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2243      	movs	r2, #67	; 0x43
 800b64a:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2205      	movs	r2, #5
 800b650:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2200      	movs	r2, #0
 800b656:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2207      	movs	r2, #7
 800b65c:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2221      	movs	r2, #33	; 0x21
 800b662:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2243      	movs	r2, #67	; 0x43
 800b668:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2210      	movs	r2, #16
 800b66e:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2232      	movs	r2, #50	; 0x32
 800b674:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2254      	movs	r2, #84	; 0x54
 800b67a:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b682:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b68a:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	2210      	movs	r2, #16
 800b696:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	2200      	movs	r2, #0
 800b69c:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	220f      	movs	r2, #15
 800b6a2:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	220f      	movs	r2, #15
 800b6a8:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	2208      	movs	r2, #8
 800b6ae:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b2:	2208      	movs	r2, #8
 800b6b4:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	220b      	movs	r2, #11
 800b6dc:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	2209      	movs	r2, #9
 800b6e2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800b6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	22c7      	movs	r2, #199	; 0xc7
 800b712:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	22ff      	movs	r2, #255	; 0xff
 800b718:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	22db      	movs	r2, #219	; 0xdb
 800b71e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	2202      	movs	r2, #2
 800b724:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	2200      	movs	r2, #0
 800b72a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	2201      	movs	r2, #1
 800b730:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	2201      	movs	r2, #1
 800b736:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	2221      	movs	r2, #33	; 0x21
 800b73c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800b73e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b742:	4618      	mov	r0, r3
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b08a      	sub	sp, #40	; 0x28
 800b752:	af04      	add	r7, sp, #16
 800b754:	60f8      	str	r0, [r7, #12]
 800b756:	60b9      	str	r1, [r7, #8]
 800b758:	607a      	str	r2, [r7, #4]
 800b75a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b75c:	2300      	movs	r3, #0
 800b75e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	9303      	str	r3, [sp, #12]
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	9302      	str	r3, [sp, #8]
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	9301      	str	r3, [sp, #4]
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	68b9      	ldr	r1, [r7, #8]
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f7ff fe70 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800b77c:	4603      	mov	r3, r0
 800b77e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d121      	bne.n	800b7cc <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2207      	movs	r2, #7
 800b78c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2205      	movs	r2, #5
 800b792:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	2208      	movs	r2, #8
 800b7a8:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2238      	movs	r2, #56	; 0x38
 800b7ae:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	2207      	movs	r2, #7
 800b7b4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	2205      	movs	r2, #5
 800b7ba:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af04      	add	r7, sp, #16
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ec:	9303      	str	r3, [sp, #12]
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	9301      	str	r3, [sp, #4]
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7ff fe2b 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800b806:	4603      	mov	r3, r0
 800b808:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d121      	bne.n	800b856 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	220f      	movs	r2, #15
 800b816:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	220d      	movs	r2, #13
 800b81c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2208      	movs	r2, #8
 800b832:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	22b8      	movs	r2, #184	; 0xb8
 800b838:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	220f      	movs	r2, #15
 800b83e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	220d      	movs	r2, #13
 800b844:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800b846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b848:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b850:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b08a      	sub	sp, #40	; 0x28
 800b866:	af04      	add	r7, sp, #16
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b870:	2300      	movs	r3, #0
 800b872:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	9303      	str	r3, [sp, #12]
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	68b9      	ldr	r1, [r7, #8]
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7ff fde6 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800b890:	4603      	mov	r3, r0
 800b892:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d105      	bne.n	800b8a8 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	223b      	movs	r2, #59	; 0x3b
 800b8a6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b8a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08a      	sub	sp, #40	; 0x28
 800b8b8:	af04      	add	r7, sp, #16
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	9303      	str	r3, [sp, #12]
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	9302      	str	r3, [sp, #8]
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff fdbd 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b8e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d105      	bne.n	800b8fa <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	225b      	movs	r2, #91	; 0x5b
 800b8f8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b08a      	sub	sp, #40	; 0x28
 800b90a:	af04      	add	r7, sp, #16
 800b90c:	60f8      	str	r0, [r7, #12]
 800b90e:	60b9      	str	r1, [r7, #8]
 800b910:	607a      	str	r2, [r7, #4]
 800b912:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b914:	2300      	movs	r3, #0
 800b916:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91a:	9303      	str	r3, [sp, #12]
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	9302      	str	r3, [sp, #8]
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	68b9      	ldr	r1, [r7, #8]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f7ff fd94 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800b934:	4603      	mov	r3, r0
 800b936:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d11a      	bne.n	800b976 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	2200      	movs	r2, #0
 800b944:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2200      	movs	r2, #0
 800b94a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	22b1      	movs	r2, #177	; 0xb1
 800b950:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2200      	movs	r2, #0
 800b956:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	22d4      	movs	r2, #212	; 0xd4
 800b95c:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b964:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	2240      	movs	r2, #64	; 0x40
 800b974:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3718      	adds	r7, #24
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b08a      	sub	sp, #40	; 0x28
 800b986:	af04      	add	r7, sp, #16
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b990:	2300      	movs	r3, #0
 800b992:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	9303      	str	r3, [sp, #12]
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	9302      	str	r3, [sp, #8]
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	68b9      	ldr	r1, [r7, #8]
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7ff fecf 	bl	800b74e <VL53L1_preset_mode_standard_ranging_short_range>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b9b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d11a      	bne.n	800b9f2 <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2284      	movs	r2, #132	; 0x84
 800b9cc:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	22b1      	movs	r2, #177	; 0xb1
 800b9d8:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b9e0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	2240      	movs	r2, #64	; 0x40
 800b9f0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b9f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b08a      	sub	sp, #40	; 0x28
 800ba02:	af04      	add	r7, sp, #16
 800ba04:	60f8      	str	r0, [r7, #12]
 800ba06:	60b9      	str	r1, [r7, #8]
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 800ba10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba12:	9303      	str	r3, [sp, #12]
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	9302      	str	r3, [sp, #8]
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	68b9      	ldr	r1, [r7, #8]
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff fed6 	bl	800b7d8 <VL53L1_preset_mode_standard_ranging_long_range>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ba30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d11a      	bne.n	800ba6e <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800ba38:	6a3b      	ldr	r3, [r7, #32]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2200      	movs	r2, #0
 800ba42:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2297      	movs	r2, #151	; 0x97
 800ba48:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	22b1      	movs	r2, #177	; 0xb1
 800ba54:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ba5c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ba5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba60:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	2240      	movs	r2, #64	; 0x40
 800ba6c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b08a      	sub	sp, #40	; 0x28
 800ba7e:	af04      	add	r7, sp, #16
 800ba80:	60f8      	str	r0, [r7, #12]
 800ba82:	60b9      	str	r1, [r7, #8]
 800ba84:	607a      	str	r2, [r7, #4]
 800ba86:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	9303      	str	r3, [sp, #12]
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	9302      	str	r3, [sp, #8]
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	9301      	str	r3, [sp, #4]
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	68b9      	ldr	r1, [r7, #8]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff ff2f 	bl	800b906 <VL53L1_preset_mode_timed_ranging>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800baac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d106      	bne.n	800bac2 <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800bab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab6:	6a39      	ldr	r1, [r7, #32]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f005 f978 	bl	8010dae <VL53L1_config_low_power_auto_mode>
 800babe:	4603      	mov	r3, r0
 800bac0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b08a      	sub	sp, #40	; 0x28
 800bad2:	af04      	add	r7, sp, #16
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	607a      	str	r2, [r7, #4]
 800bada:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800badc:	2300      	movs	r3, #0
 800bade:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 800bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae2:	9303      	str	r3, [sp, #12]
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	68b9      	ldr	r1, [r7, #8]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff ff43 	bl	800b982 <VL53L1_preset_mode_timed_ranging_short_range>
 800bafc:	4603      	mov	r3, r0
 800bafe:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bb00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d106      	bne.n	800bb16 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800bb08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb0a:	6a39      	ldr	r1, [r7, #32]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f005 f94e 	bl	8010dae <VL53L1_config_low_power_auto_mode>
 800bb12:	4603      	mov	r3, r0
 800bb14:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b08a      	sub	sp, #40	; 0x28
 800bb26:	af04      	add	r7, sp, #16
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	607a      	str	r2, [r7, #4]
 800bb2e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb30:	2300      	movs	r3, #0
 800bb32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb36:	9303      	str	r3, [sp, #12]
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	9302      	str	r3, [sp, #8]
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	68b9      	ldr	r1, [r7, #8]
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7ff ff57 	bl	800b9fe <VL53L1_preset_mode_timed_ranging_long_range>
 800bb50:	4603      	mov	r3, r0
 800bb52:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bb54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d106      	bne.n	800bb6a <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800bb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb5e:	6a39      	ldr	r1, [r7, #32]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f005 f924 	bl	8010dae <VL53L1_config_low_power_auto_mode>
 800bb66:	4603      	mov	r3, r0
 800bb68:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b08a      	sub	sp, #40	; 0x28
 800bb7a:	af04      	add	r7, sp, #16
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	60b9      	str	r1, [r7, #8]
 800bb80:	607a      	str	r2, [r7, #4]
 800bb82:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb84:	2300      	movs	r3, #0
 800bb86:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800bb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8a:	9303      	str	r3, [sp, #12]
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	9302      	str	r3, [sp, #8]
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	68b9      	ldr	r1, [r7, #8]
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff fc5c 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800bba4:	4603      	mov	r3, r0
 800bba6:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d116      	bne.n	800bbde <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	22b1      	movs	r2, #177	; 0xb1
 800bbc0:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	22d4      	movs	r2, #212	; 0xd4
 800bbcc:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbda:	2210      	movs	r2, #16
 800bbdc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b090      	sub	sp, #64	; 0x40
 800bbee:	af0a      	add	r7, sp, #40	; 0x28
 800bbf0:	60f8      	str	r0, [r7, #12]
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	9303      	str	r3, [sp, #12]
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	9302      	str	r3, [sp, #8]
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	6879      	ldr	r1, [r7, #4]
 800bc12:	68b8      	ldr	r0, [r7, #8]
 800bc14:	f7ff fc22 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bc1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d171      	bne.n	800bd08 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800bc2a:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	9308      	str	r3, [sp, #32]
 800bc30:	2305      	movs	r3, #5
 800bc32:	9307      	str	r3, [sp, #28]
 800bc34:	2304      	movs	r3, #4
 800bc36:	9306      	str	r3, [sp, #24]
 800bc38:	2303      	movs	r3, #3
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	9304      	str	r3, [sp, #16]
 800bc40:	2301      	movs	r3, #1
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	2300      	movs	r3, #0
 800bc46:	9302      	str	r3, [sp, #8]
 800bc48:	2304      	movs	r3, #4
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	2302      	movs	r3, #2
 800bc52:	2201      	movs	r2, #1
 800bc54:	2100      	movs	r1, #0
 800bc56:	2007      	movs	r0, #7
 800bc58:	f001 fe1b 	bl	800d892 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	3302      	adds	r3, #2
 800bc60:	9308      	str	r3, [sp, #32]
 800bc62:	2305      	movs	r3, #5
 800bc64:	9307      	str	r3, [sp, #28]
 800bc66:	2304      	movs	r3, #4
 800bc68:	9306      	str	r3, [sp, #24]
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	9305      	str	r3, [sp, #20]
 800bc6e:	2302      	movs	r3, #2
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	2301      	movs	r3, #1
 800bc74:	9303      	str	r3, [sp, #12]
 800bc76:	2300      	movs	r3, #0
 800bc78:	9302      	str	r3, [sp, #8]
 800bc7a:	2304      	movs	r3, #4
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	2303      	movs	r3, #3
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	2302      	movs	r3, #2
 800bc84:	2201      	movs	r2, #1
 800bc86:	2100      	movs	r1, #0
 800bc88:	2007      	movs	r0, #7
 800bc8a:	f001 fe92 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	2209      	movs	r2, #9
 800bc92:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	220b      	movs	r2, #11
 800bc98:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	2209      	movs	r2, #9
 800bc9e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	220b      	movs	r2, #11
 800bca4:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800bcb8:	6a3b      	ldr	r3, [r7, #32]
 800bcba:	221a      	movs	r2, #26
 800bcbc:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	2228      	movs	r2, #40	; 0x28
 800bcc8:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	2200      	movs	r2, #0
 800bcce:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	2221      	movs	r2, #33	; 0x21
 800bcd4:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	22f5      	movs	r2, #245	; 0xf5
 800bcda:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2208      	movs	r2, #8
 800bce0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2288      	movs	r2, #136	; 0x88
 800bce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 f821 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	229b      	movs	r2, #155	; 0x9b
 800bd00:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	2226      	movs	r2, #38	; 0x26
 800bd06:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b090      	sub	sp, #64	; 0x40
 800bd18:	af0a      	add	r7, sp, #40	; 0x28
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	9303      	str	r3, [sp, #12]
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	9302      	str	r3, [sp, #8]
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	9301      	str	r3, [sp, #4]
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	68b9      	ldr	r1, [r7, #8]
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f7ff ff52 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bd4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d13e      	bne.n	800bdd0 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	9308      	str	r3, [sp, #32]
 800bd56:	2305      	movs	r3, #5
 800bd58:	9307      	str	r3, [sp, #28]
 800bd5a:	2304      	movs	r3, #4
 800bd5c:	9306      	str	r3, [sp, #24]
 800bd5e:	2303      	movs	r3, #3
 800bd60:	9305      	str	r3, [sp, #20]
 800bd62:	230a      	movs	r3, #10
 800bd64:	9304      	str	r3, [sp, #16]
 800bd66:	2309      	movs	r3, #9
 800bd68:	9303      	str	r3, [sp, #12]
 800bd6a:	2308      	movs	r3, #8
 800bd6c:	9302      	str	r3, [sp, #8]
 800bd6e:	2304      	movs	r3, #4
 800bd70:	9301      	str	r3, [sp, #4]
 800bd72:	2303      	movs	r3, #3
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	2302      	movs	r3, #2
 800bd78:	2201      	movs	r2, #1
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	2007      	movs	r0, #7
 800bd7e:	f001 fd88 	bl	800d892 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	3302      	adds	r3, #2
 800bd86:	9308      	str	r3, [sp, #32]
 800bd88:	2305      	movs	r3, #5
 800bd8a:	9307      	str	r3, [sp, #28]
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	9306      	str	r3, [sp, #24]
 800bd90:	2303      	movs	r3, #3
 800bd92:	9305      	str	r3, [sp, #20]
 800bd94:	230a      	movs	r3, #10
 800bd96:	9304      	str	r3, [sp, #16]
 800bd98:	2309      	movs	r3, #9
 800bd9a:	9303      	str	r3, [sp, #12]
 800bd9c:	2308      	movs	r3, #8
 800bd9e:	9302      	str	r3, [sp, #8]
 800bda0:	2304      	movs	r3, #4
 800bda2:	9301      	str	r3, [sp, #4]
 800bda4:	2303      	movs	r3, #3
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	2302      	movs	r3, #2
 800bdaa:	2201      	movs	r2, #1
 800bdac:	2100      	movs	r1, #0
 800bdae:	2007      	movs	r0, #7
 800bdb0:	f001 fdff 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	68b9      	ldr	r1, [r7, #8]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 ffbd 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	22bb      	movs	r2, #187	; 0xbb
 800bdc8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	2226      	movs	r2, #38	; 0x26
 800bdce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bdd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08c      	sub	sp, #48	; 0x30
 800bde0:	af06      	add	r7, sp, #24
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bdea:	2300      	movs	r3, #0
 800bdec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	9303      	str	r3, [sp, #12]
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	9302      	str	r3, [sp, #8]
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f7ff ff83 	bl	800bd14 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800be0e:	4603      	mov	r3, r0
 800be10:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800be12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d102      	bne.n	800be20 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	22db      	movs	r2, #219	; 0xdb
 800be1e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800be20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b090      	sub	sp, #64	; 0x40
 800be30:	af0a      	add	r7, sp, #40	; 0x28
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	9303      	str	r3, [sp, #12]
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	9302      	str	r3, [sp, #8]
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	68b9      	ldr	r1, [r7, #8]
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f7ff fec6 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800be5e:	4603      	mov	r3, r0
 800be60:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800be62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d13e      	bne.n	800bee8 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	9308      	str	r3, [sp, #32]
 800be6e:	230d      	movs	r3, #13
 800be70:	9307      	str	r3, [sp, #28]
 800be72:	230c      	movs	r3, #12
 800be74:	9306      	str	r3, [sp, #24]
 800be76:	230b      	movs	r3, #11
 800be78:	9305      	str	r3, [sp, #20]
 800be7a:	230a      	movs	r3, #10
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	2309      	movs	r3, #9
 800be80:	9303      	str	r3, [sp, #12]
 800be82:	2308      	movs	r3, #8
 800be84:	9302      	str	r3, [sp, #8]
 800be86:	230c      	movs	r3, #12
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	230b      	movs	r3, #11
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	230a      	movs	r3, #10
 800be90:	2209      	movs	r2, #9
 800be92:	2108      	movs	r1, #8
 800be94:	2007      	movs	r0, #7
 800be96:	f001 fcfc 	bl	800d892 <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	3302      	adds	r3, #2
 800be9e:	9308      	str	r3, [sp, #32]
 800bea0:	230d      	movs	r3, #13
 800bea2:	9307      	str	r3, [sp, #28]
 800bea4:	230c      	movs	r3, #12
 800bea6:	9306      	str	r3, [sp, #24]
 800bea8:	230b      	movs	r3, #11
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	230a      	movs	r3, #10
 800beae:	9304      	str	r3, [sp, #16]
 800beb0:	2309      	movs	r3, #9
 800beb2:	9303      	str	r3, [sp, #12]
 800beb4:	2308      	movs	r3, #8
 800beb6:	9302      	str	r3, [sp, #8]
 800beb8:	230c      	movs	r3, #12
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	230b      	movs	r3, #11
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	230a      	movs	r3, #10
 800bec2:	2209      	movs	r2, #9
 800bec4:	2108      	movs	r1, #8
 800bec6:	2007      	movs	r0, #7
 800bec8:	f001 fd73 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	68b9      	ldr	r1, [r7, #8]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 ff31 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2202      	movs	r2, #2
 800bee0:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800bee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee4:	22bb      	movs	r2, #187	; 0xbb
 800bee6:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800bee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08c      	sub	sp, #48	; 0x30
 800bef8:	af06      	add	r7, sp, #24
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf10:	9302      	str	r3, [sp, #8]
 800bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	68b9      	ldr	r1, [r7, #8]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f7ff ff83 	bl	800be2c <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800bf26:	4603      	mov	r3, r0
 800bf28:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 800bf2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d102      	bne.n	800bf38 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	22db      	movs	r2, #219	; 0xdb
 800bf36:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800bf38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b090      	sub	sp, #64	; 0x40
 800bf48:	af0a      	add	r7, sp, #40	; 0x28
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf52:	2300      	movs	r3, #0
 800bf54:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	9303      	str	r3, [sp, #12]
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	9302      	str	r3, [sp, #8]
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	68b9      	ldr	r1, [r7, #8]
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fe3a 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bf7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d166      	bne.n	800c050 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800bf88:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	9308      	str	r3, [sp, #32]
 800bf8e:	2304      	movs	r3, #4
 800bf90:	9307      	str	r3, [sp, #28]
 800bf92:	2303      	movs	r3, #3
 800bf94:	9306      	str	r3, [sp, #24]
 800bf96:	2302      	movs	r3, #2
 800bf98:	9305      	str	r3, [sp, #20]
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9303      	str	r3, [sp, #12]
 800bfa2:	2307      	movs	r3, #7
 800bfa4:	9302      	str	r3, [sp, #8]
 800bfa6:	2304      	movs	r3, #4
 800bfa8:	9301      	str	r3, [sp, #4]
 800bfaa:	2303      	movs	r3, #3
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	2302      	movs	r3, #2
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	2007      	movs	r0, #7
 800bfb6:	f001 fc6c 	bl	800d892 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	9308      	str	r3, [sp, #32]
 800bfc0:	2304      	movs	r3, #4
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	9306      	str	r3, [sp, #24]
 800bfc8:	2302      	movs	r3, #2
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	2301      	movs	r3, #1
 800bfce:	9304      	str	r3, [sp, #16]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9303      	str	r3, [sp, #12]
 800bfd4:	2307      	movs	r3, #7
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	2304      	movs	r3, #4
 800bfda:	9301      	str	r3, [sp, #4]
 800bfdc:	2303      	movs	r3, #3
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	2302      	movs	r3, #2
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	2007      	movs	r0, #7
 800bfe8:	f001 fce3 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	68b9      	ldr	r1, [r7, #8]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fea1 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	2204      	movs	r2, #4
 800c000:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	2203      	movs	r2, #3
 800c006:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	2242      	movs	r2, #66	; 0x42
 800c012:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	2200      	movs	r2, #0
 800c018:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	2242      	movs	r2, #66	; 0x42
 800c01e:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	2200      	movs	r2, #0
 800c024:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	2252      	movs	r2, #82	; 0x52
 800c02a:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	2200      	movs	r2, #0
 800c030:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	2266      	movs	r2, #102	; 0x66
 800c036:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	2204      	movs	r2, #4
 800c03c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	22a4      	movs	r2, #164	; 0xa4
 800c042:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	229b      	movs	r2, #155	; 0x9b
 800c048:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	2226      	movs	r2, #38	; 0x26
 800c04e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b090      	sub	sp, #64	; 0x40
 800c060:	af0a      	add	r7, sp, #40	; 0x28
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c06a:	2300      	movs	r3, #0
 800c06c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c074:	9303      	str	r3, [sp, #12]
 800c076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c078:	9302      	str	r3, [sp, #8]
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	68b9      	ldr	r1, [r7, #8]
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7ff fdae 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800c08e:	4603      	mov	r3, r0
 800c090:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c092:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d178      	bne.n	800c18c <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	9308      	str	r3, [sp, #32]
 800c09e:	2305      	movs	r3, #5
 800c0a0:	9307      	str	r3, [sp, #28]
 800c0a2:	2304      	movs	r3, #4
 800c0a4:	9306      	str	r3, [sp, #24]
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	9305      	str	r3, [sp, #20]
 800c0aa:	2302      	movs	r3, #2
 800c0ac:	9304      	str	r3, [sp, #16]
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	9303      	str	r3, [sp, #12]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	9302      	str	r3, [sp, #8]
 800c0b6:	2304      	movs	r3, #4
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	2302      	movs	r3, #2
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	2007      	movs	r0, #7
 800c0c6:	f001 fbe4 	bl	800d892 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	3302      	adds	r3, #2
 800c0ce:	9308      	str	r3, [sp, #32]
 800c0d0:	2305      	movs	r3, #5
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	2304      	movs	r3, #4
 800c0d6:	9306      	str	r3, [sp, #24]
 800c0d8:	2303      	movs	r3, #3
 800c0da:	9305      	str	r3, [sp, #20]
 800c0dc:	2302      	movs	r3, #2
 800c0de:	9304      	str	r3, [sp, #16]
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	9302      	str	r3, [sp, #8]
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	2007      	movs	r0, #7
 800c0f8:	f001 fc5b 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	6a3b      	ldr	r3, [r7, #32]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	68b9      	ldr	r1, [r7, #8]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fe19 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800c10c:	6a3b      	ldr	r3, [r7, #32]
 800c10e:	2209      	movs	r2, #9
 800c110:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	220b      	movs	r2, #11
 800c116:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	2200      	movs	r2, #0
 800c11c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	2221      	movs	r2, #33	; 0x21
 800c122:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	2200      	movs	r2, #0
 800c128:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800c12a:	6a3b      	ldr	r3, [r7, #32]
 800c12c:	221b      	movs	r2, #27
 800c12e:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	2200      	movs	r2, #0
 800c134:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	2229      	movs	r2, #41	; 0x29
 800c13a:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	2200      	movs	r2, #0
 800c140:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	2222      	movs	r2, #34	; 0x22
 800c146:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	2209      	movs	r2, #9
 800c14c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	22f5      	movs	r2, #245	; 0xf5
 800c152:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	2209      	movs	r2, #9
 800c158:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	220b      	movs	r2, #11
 800c15e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c162:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2208      	movs	r2, #8
 800c174:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2288      	movs	r2, #136	; 0x88
 800c17c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	229b      	movs	r2, #155	; 0x9b
 800c184:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c188:	2226      	movs	r2, #38	; 0x26
 800c18a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c18c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b090      	sub	sp, #64	; 0x40
 800c19c:	af0a      	add	r7, sp, #40	; 0x28
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	9303      	str	r3, [sp, #12]
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	9302      	str	r3, [sp, #8]
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	68b9      	ldr	r1, [r7, #8]
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f7ff ff49 	bl	800c05c <VL53L1_preset_mode_histogram_long_range>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c1ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d13b      	bne.n	800c24e <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	9308      	str	r3, [sp, #32]
 800c1da:	2305      	movs	r3, #5
 800c1dc:	9307      	str	r3, [sp, #28]
 800c1de:	2304      	movs	r3, #4
 800c1e0:	9306      	str	r3, [sp, #24]
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	9305      	str	r3, [sp, #20]
 800c1e6:	230a      	movs	r3, #10
 800c1e8:	9304      	str	r3, [sp, #16]
 800c1ea:	2309      	movs	r3, #9
 800c1ec:	9303      	str	r3, [sp, #12]
 800c1ee:	2308      	movs	r3, #8
 800c1f0:	9302      	str	r3, [sp, #8]
 800c1f2:	2304      	movs	r3, #4
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	2100      	movs	r1, #0
 800c200:	2007      	movs	r0, #7
 800c202:	f001 fb46 	bl	800d892 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	3302      	adds	r3, #2
 800c20a:	9308      	str	r3, [sp, #32]
 800c20c:	2305      	movs	r3, #5
 800c20e:	9307      	str	r3, [sp, #28]
 800c210:	2304      	movs	r3, #4
 800c212:	9306      	str	r3, [sp, #24]
 800c214:	2303      	movs	r3, #3
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	230a      	movs	r3, #10
 800c21a:	9304      	str	r3, [sp, #16]
 800c21c:	2309      	movs	r3, #9
 800c21e:	9303      	str	r3, [sp, #12]
 800c220:	2308      	movs	r3, #8
 800c222:	9302      	str	r3, [sp, #8]
 800c224:	2304      	movs	r3, #4
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	2303      	movs	r3, #3
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	2302      	movs	r3, #2
 800c22e:	2201      	movs	r2, #1
 800c230:	2100      	movs	r1, #0
 800c232:	2007      	movs	r0, #7
 800c234:	f001 fbbd 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	68b9      	ldr	r1, [r7, #8]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fd7b 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	22bb      	movs	r2, #187	; 0xbb
 800c24c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b08c      	sub	sp, #48	; 0x30
 800c25e:	af06      	add	r7, sp, #24
 800c260:	60f8      	str	r0, [r7, #12]
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	607a      	str	r2, [r7, #4]
 800c266:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c268:	2300      	movs	r3, #0
 800c26a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	9304      	str	r3, [sp, #16]
 800c270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c272:	9303      	str	r3, [sp, #12]
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	9302      	str	r3, [sp, #8]
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f7ff ff86 	bl	800c198 <VL53L1_preset_mode_histogram_long_range_mm1>
 800c28c:	4603      	mov	r3, r0
 800c28e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c290:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	22db      	movs	r2, #219	; 0xdb
 800c29c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c29e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3718      	adds	r7, #24
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b090      	sub	sp, #64	; 0x40
 800c2ae:	af0a      	add	r7, sp, #40	; 0x28
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	9304      	str	r3, [sp, #16]
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	9303      	str	r3, [sp, #12]
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	9302      	str	r3, [sp, #8]
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff fc87 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d178      	bne.n	800c3da <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	9308      	str	r3, [sp, #32]
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	9306      	str	r3, [sp, #24]
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	9305      	str	r3, [sp, #20]
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	9304      	str	r3, [sp, #16]
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	9303      	str	r3, [sp, #12]
 800c300:	2300      	movs	r3, #0
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	2302      	movs	r3, #2
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	2302      	movs	r3, #2
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	2301      	movs	r3, #1
 800c30e:	2201      	movs	r2, #1
 800c310:	2100      	movs	r1, #0
 800c312:	2007      	movs	r0, #7
 800c314:	f001 fabd 	bl	800d892 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	3302      	adds	r3, #2
 800c31c:	9308      	str	r3, [sp, #32]
 800c31e:	2303      	movs	r3, #3
 800c320:	9307      	str	r3, [sp, #28]
 800c322:	2302      	movs	r3, #2
 800c324:	9306      	str	r3, [sp, #24]
 800c326:	2301      	movs	r3, #1
 800c328:	9305      	str	r3, [sp, #20]
 800c32a:	2302      	movs	r3, #2
 800c32c:	9304      	str	r3, [sp, #16]
 800c32e:	2301      	movs	r3, #1
 800c330:	9303      	str	r3, [sp, #12]
 800c332:	2300      	movs	r3, #0
 800c334:	9302      	str	r3, [sp, #8]
 800c336:	2302      	movs	r3, #2
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	2302      	movs	r3, #2
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	2301      	movs	r3, #1
 800c340:	2201      	movs	r2, #1
 800c342:	2100      	movs	r1, #0
 800c344:	2007      	movs	r0, #7
 800c346:	f001 fb34 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	683a      	ldr	r2, [r7, #0]
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fcf2 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	2205      	movs	r2, #5
 800c35e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	2207      	movs	r2, #7
 800c364:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	2236      	movs	r2, #54	; 0x36
 800c370:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	2200      	movs	r2, #0
 800c376:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	2228      	movs	r2, #40	; 0x28
 800c37c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	2200      	movs	r2, #0
 800c382:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	2244      	movs	r2, #68	; 0x44
 800c388:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	2200      	movs	r2, #0
 800c38e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	2233      	movs	r2, #51	; 0x33
 800c394:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2205      	movs	r2, #5
 800c39a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	22f5      	movs	r2, #245	; 0xf5
 800c3a0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	2205      	movs	r2, #5
 800c3a6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	2207      	movs	r2, #7
 800c3ac:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b8:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2208      	movs	r2, #8
 800c3c2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2248      	movs	r2, #72	; 0x48
 800c3ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	229b      	movs	r2, #155	; 0x9b
 800c3d2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	2226      	movs	r2, #38	; 0x26
 800c3d8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b090      	sub	sp, #64	; 0x40
 800c3ea:	af0a      	add	r7, sp, #40	; 0x28
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	607a      	str	r2, [r7, #4]
 800c3f2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fe:	9303      	str	r3, [sp, #12]
 800c400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c402:	9302      	str	r3, [sp, #8]
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7ff ff49 	bl	800c2aa <VL53L1_preset_mode_histogram_medium_range>
 800c418:	4603      	mov	r3, r0
 800c41a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c41c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d13b      	bne.n	800c49c <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	9308      	str	r3, [sp, #32]
 800c428:	2303      	movs	r3, #3
 800c42a:	9307      	str	r3, [sp, #28]
 800c42c:	2302      	movs	r3, #2
 800c42e:	9306      	str	r3, [sp, #24]
 800c430:	2301      	movs	r3, #1
 800c432:	9305      	str	r3, [sp, #20]
 800c434:	230a      	movs	r3, #10
 800c436:	9304      	str	r3, [sp, #16]
 800c438:	2309      	movs	r3, #9
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	2308      	movs	r3, #8
 800c43e:	9302      	str	r3, [sp, #8]
 800c440:	2302      	movs	r3, #2
 800c442:	9301      	str	r3, [sp, #4]
 800c444:	2302      	movs	r3, #2
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	2301      	movs	r3, #1
 800c44a:	2201      	movs	r2, #1
 800c44c:	2100      	movs	r1, #0
 800c44e:	2007      	movs	r0, #7
 800c450:	f001 fa1f 	bl	800d892 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	3302      	adds	r3, #2
 800c458:	9308      	str	r3, [sp, #32]
 800c45a:	2303      	movs	r3, #3
 800c45c:	9307      	str	r3, [sp, #28]
 800c45e:	2302      	movs	r3, #2
 800c460:	9306      	str	r3, [sp, #24]
 800c462:	2301      	movs	r3, #1
 800c464:	9305      	str	r3, [sp, #20]
 800c466:	230a      	movs	r3, #10
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	2309      	movs	r3, #9
 800c46c:	9303      	str	r3, [sp, #12]
 800c46e:	2308      	movs	r3, #8
 800c470:	9302      	str	r3, [sp, #8]
 800c472:	2302      	movs	r3, #2
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	2302      	movs	r3, #2
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	2301      	movs	r3, #1
 800c47c:	2201      	movs	r2, #1
 800c47e:	2100      	movs	r1, #0
 800c480:	2007      	movs	r0, #7
 800c482:	f001 fa96 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fc54 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800c496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c498:	22bb      	movs	r2, #187	; 0xbb
 800c49a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c49c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08c      	sub	sp, #48	; 0x30
 800c4ac:	af06      	add	r7, sp, #24
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4bc:	9304      	str	r3, [sp, #16]
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	9303      	str	r3, [sp, #12]
 800c4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c4:	9302      	str	r3, [sp, #8]
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	9301      	str	r3, [sp, #4]
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	68b9      	ldr	r1, [r7, #8]
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f7ff ff86 	bl	800c3e6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c4de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e8:	22db      	movs	r2, #219	; 0xdb
 800c4ea:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3718      	adds	r7, #24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b090      	sub	sp, #64	; 0x40
 800c4fc:	af0a      	add	r7, sp, #40	; 0x28
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c506:	2300      	movs	r3, #0
 800c508:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	9304      	str	r3, [sp, #16]
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	9303      	str	r3, [sp, #12]
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	9302      	str	r3, [sp, #8]
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	9301      	str	r3, [sp, #4]
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7ff fb60 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c52e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d178      	bne.n	800c628 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	9308      	str	r3, [sp, #32]
 800c53a:	2302      	movs	r3, #2
 800c53c:	9307      	str	r3, [sp, #28]
 800c53e:	2302      	movs	r3, #2
 800c540:	9306      	str	r3, [sp, #24]
 800c542:	2301      	movs	r3, #1
 800c544:	9305      	str	r3, [sp, #20]
 800c546:	2301      	movs	r3, #1
 800c548:	9304      	str	r3, [sp, #16]
 800c54a:	2301      	movs	r3, #1
 800c54c:	9303      	str	r3, [sp, #12]
 800c54e:	2300      	movs	r3, #0
 800c550:	9302      	str	r3, [sp, #8]
 800c552:	2301      	movs	r3, #1
 800c554:	9301      	str	r3, [sp, #4]
 800c556:	2301      	movs	r3, #1
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	2301      	movs	r3, #1
 800c55c:	2200      	movs	r2, #0
 800c55e:	2107      	movs	r1, #7
 800c560:	2007      	movs	r0, #7
 800c562:	f001 f996 	bl	800d892 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	3302      	adds	r3, #2
 800c56a:	9308      	str	r3, [sp, #32]
 800c56c:	2302      	movs	r3, #2
 800c56e:	9307      	str	r3, [sp, #28]
 800c570:	2302      	movs	r3, #2
 800c572:	9306      	str	r3, [sp, #24]
 800c574:	2301      	movs	r3, #1
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	2301      	movs	r3, #1
 800c57a:	9304      	str	r3, [sp, #16]
 800c57c:	2301      	movs	r3, #1
 800c57e:	9303      	str	r3, [sp, #12]
 800c580:	2300      	movs	r3, #0
 800c582:	9302      	str	r3, [sp, #8]
 800c584:	2301      	movs	r3, #1
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	2301      	movs	r3, #1
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	2301      	movs	r3, #1
 800c58e:	2200      	movs	r2, #0
 800c590:	2107      	movs	r1, #7
 800c592:	2007      	movs	r0, #7
 800c594:	f001 fa0d 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	6a3b      	ldr	r3, [r7, #32]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	68b9      	ldr	r1, [r7, #8]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fbcb 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800c5a8:	6a3b      	ldr	r3, [r7, #32]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	2252      	movs	r2, #82	; 0x52
 800c5be:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	2237      	movs	r2, #55	; 0x37
 800c5ca:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	2266      	movs	r2, #102	; 0x66
 800c5d6:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c5d8:	6a3b      	ldr	r3, [r7, #32]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	2244      	movs	r2, #68	; 0x44
 800c5e2:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2203      	movs	r2, #3
 800c5e8:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	22f5      	movs	r2, #245	; 0xf5
 800c5ee:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	2203      	movs	r2, #3
 800c5f4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f8:	2205      	movs	r2, #5
 800c5fa:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c606:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60a:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2208      	movs	r2, #8
 800c610:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2228      	movs	r2, #40	; 0x28
 800c618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	22bb      	movs	r2, #187	; 0xbb
 800c620:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c624:	2226      	movs	r2, #38	; 0x26
 800c626:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3718      	adds	r7, #24
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b090      	sub	sp, #64	; 0x40
 800c638:	af0a      	add	r7, sp, #40	; 0x28
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
 800c640:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c642:	2300      	movs	r3, #0
 800c644:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64c:	9303      	str	r3, [sp, #12]
 800c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c650:	9302      	str	r3, [sp, #8]
 800c652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	68b9      	ldr	r1, [r7, #8]
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff ff49 	bl	800c4f8 <VL53L1_preset_mode_histogram_short_range>
 800c666:	4603      	mov	r3, r0
 800c668:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c66a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d15a      	bne.n	800c728 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	9308      	str	r3, [sp, #32]
 800c676:	2301      	movs	r3, #1
 800c678:	9307      	str	r3, [sp, #28]
 800c67a:	2301      	movs	r3, #1
 800c67c:	9306      	str	r3, [sp, #24]
 800c67e:	2301      	movs	r3, #1
 800c680:	9305      	str	r3, [sp, #20]
 800c682:	2300      	movs	r3, #0
 800c684:	9304      	str	r3, [sp, #16]
 800c686:	2300      	movs	r3, #0
 800c688:	9303      	str	r3, [sp, #12]
 800c68a:	2300      	movs	r3, #0
 800c68c:	9302      	str	r3, [sp, #8]
 800c68e:	2301      	movs	r3, #1
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	2301      	movs	r3, #1
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	2300      	movs	r3, #0
 800c698:	2200      	movs	r2, #0
 800c69a:	2107      	movs	r1, #7
 800c69c:	2007      	movs	r0, #7
 800c69e:	f001 f8f8 	bl	800d892 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	3302      	adds	r3, #2
 800c6a6:	9308      	str	r3, [sp, #32]
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	9307      	str	r3, [sp, #28]
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	9306      	str	r3, [sp, #24]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	9303      	str	r3, [sp, #12]
 800c6bc:	2300      	movs	r3, #0
 800c6be:	9302      	str	r3, [sp, #8]
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	9301      	str	r3, [sp, #4]
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2107      	movs	r1, #7
 800c6ce:	2007      	movs	r0, #7
 800c6d0:	f001 f96f 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	68b9      	ldr	r1, [r7, #8]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fb2d 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 800c6e4:	6a3b      	ldr	r3, [r7, #32]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2231      	movs	r2, #49	; 0x31
 800c6fa:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	2202      	movs	r2, #2
 800c700:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	2203      	movs	r2, #3
 800c706:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c712:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c716:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2210      	movs	r2, #16
 800c71c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2218      	movs	r2, #24
 800c724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 800c728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b090      	sub	sp, #64	; 0x40
 800c738:	af0a      	add	r7, sp, #40	; 0x28
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c742:	2300      	movs	r3, #0
 800c744:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	9302      	str	r3, [sp, #8]
 800c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	68b9      	ldr	r1, [r7, #8]
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7ff fec9 	bl	800c4f8 <VL53L1_preset_mode_histogram_short_range>
 800c766:	4603      	mov	r3, r0
 800c768:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c76a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d13b      	bne.n	800c7ea <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	9308      	str	r3, [sp, #32]
 800c776:	2302      	movs	r3, #2
 800c778:	9307      	str	r3, [sp, #28]
 800c77a:	2302      	movs	r3, #2
 800c77c:	9306      	str	r3, [sp, #24]
 800c77e:	2301      	movs	r3, #1
 800c780:	9305      	str	r3, [sp, #20]
 800c782:	2301      	movs	r3, #1
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	2309      	movs	r3, #9
 800c788:	9303      	str	r3, [sp, #12]
 800c78a:	2308      	movs	r3, #8
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	2301      	movs	r3, #1
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	2301      	movs	r3, #1
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	2301      	movs	r3, #1
 800c798:	2200      	movs	r2, #0
 800c79a:	2107      	movs	r1, #7
 800c79c:	2007      	movs	r0, #7
 800c79e:	f001 f878 	bl	800d892 <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	3302      	adds	r3, #2
 800c7a6:	9308      	str	r3, [sp, #32]
 800c7a8:	2302      	movs	r3, #2
 800c7aa:	9307      	str	r3, [sp, #28]
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	9306      	str	r3, [sp, #24]
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	9305      	str	r3, [sp, #20]
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	9304      	str	r3, [sp, #16]
 800c7b8:	2309      	movs	r3, #9
 800c7ba:	9303      	str	r3, [sp, #12]
 800c7bc:	2308      	movs	r3, #8
 800c7be:	9302      	str	r3, [sp, #8]
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	9301      	str	r3, [sp, #4]
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2107      	movs	r1, #7
 800c7ce:	2007      	movs	r0, #7
 800c7d0:	f001 f8ef 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	68b9      	ldr	r1, [r7, #8]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 faad 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	22bb      	movs	r2, #187	; 0xbb
 800c7e8:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b08c      	sub	sp, #48	; 0x30
 800c7fa:	af06      	add	r7, sp, #24
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c804:	2300      	movs	r3, #0
 800c806:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	9304      	str	r3, [sp, #16]
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	9303      	str	r3, [sp, #12]
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	9302      	str	r3, [sp, #8]
 800c814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c816:	9301      	str	r3, [sp, #4]
 800c818:	6a3b      	ldr	r3, [r7, #32]
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f7ff ff86 	bl	800c734 <VL53L1_preset_mode_histogram_short_range_mm1>
 800c828:	4603      	mov	r3, r0
 800c82a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c82c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d102      	bne.n	800c83a <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	22db      	movs	r2, #219	; 0xdb
 800c838:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c83a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b08c      	sub	sp, #48	; 0x30
 800c84a:	af06      	add	r7, sp, #24
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	60b9      	str	r1, [r7, #8]
 800c850:	607a      	str	r2, [r7, #4]
 800c852:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c854:	2300      	movs	r3, #0
 800c856:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	9304      	str	r3, [sp, #16]
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	68b9      	ldr	r1, [r7, #8]
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f7ff f9b9 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800c878:	4603      	mov	r3, r0
 800c87a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c87c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10b      	bne.n	800c89c <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2201      	movs	r2, #1
 800c888:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800c88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88c:	2201      	movs	r2, #1
 800c88e:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	2283      	movs	r2, #131	; 0x83
 800c894:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	222e      	movs	r2, #46	; 0x2e
 800c89a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c89c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3718      	adds	r7, #24
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b090      	sub	sp, #64	; 0x40
 800c8ac:	af0a      	add	r7, sp, #40	; 0x28
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c0:	9303      	str	r3, [sp, #12]
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	9302      	str	r3, [sp, #8]
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	6a3b      	ldr	r3, [r7, #32]
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f000 f9ba 	bl	800cc4e <VL53L1_preset_mode_histogram_multizone_long_range>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c8de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d151      	bne.n	800c98a <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800c8e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8e8:	6838      	ldr	r0, [r7, #0]
 800c8ea:	f00a fb1c 	bl	8016f26 <VL53L1_zone_preset_xtalk_planar>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	2209      	movs	r2, #9
 800c8f6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	2209      	movs	r2, #9
 800c8fc:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	9308      	str	r3, [sp, #32]
 800c902:	2304      	movs	r3, #4
 800c904:	9307      	str	r3, [sp, #28]
 800c906:	2303      	movs	r3, #3
 800c908:	9306      	str	r3, [sp, #24]
 800c90a:	2302      	movs	r3, #2
 800c90c:	9305      	str	r3, [sp, #20]
 800c90e:	2301      	movs	r3, #1
 800c910:	9304      	str	r3, [sp, #16]
 800c912:	2300      	movs	r3, #0
 800c914:	9303      	str	r3, [sp, #12]
 800c916:	2307      	movs	r3, #7
 800c918:	9302      	str	r3, [sp, #8]
 800c91a:	2304      	movs	r3, #4
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	2303      	movs	r3, #3
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	2302      	movs	r3, #2
 800c924:	2201      	movs	r2, #1
 800c926:	2100      	movs	r1, #0
 800c928:	2007      	movs	r0, #7
 800c92a:	f000 ffb2 	bl	800d892 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	3302      	adds	r3, #2
 800c932:	9308      	str	r3, [sp, #32]
 800c934:	2304      	movs	r3, #4
 800c936:	9307      	str	r3, [sp, #28]
 800c938:	2303      	movs	r3, #3
 800c93a:	9306      	str	r3, [sp, #24]
 800c93c:	2302      	movs	r3, #2
 800c93e:	9305      	str	r3, [sp, #20]
 800c940:	2301      	movs	r3, #1
 800c942:	9304      	str	r3, [sp, #16]
 800c944:	2300      	movs	r3, #0
 800c946:	9303      	str	r3, [sp, #12]
 800c948:	2307      	movs	r3, #7
 800c94a:	9302      	str	r3, [sp, #8]
 800c94c:	2304      	movs	r3, #4
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	2303      	movs	r3, #3
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	2302      	movs	r3, #2
 800c956:	2201      	movs	r2, #1
 800c958:	2100      	movs	r1, #0
 800c95a:	2007      	movs	r0, #7
 800c95c:	f001 f829 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800c960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d108      	bne.n	800c97a <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	3302      	adds	r3, #2
 800c96c:	461a      	mov	r2, r3
 800c96e:	6879      	ldr	r1, [r7, #4]
 800c970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c972:	f003 f97d 	bl	800fc70 <VL53L1_set_histogram_multizone_initial_bin_config>
 800c976:	4603      	mov	r3, r0
 800c978:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	683a      	ldr	r2, [r7, #0]
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 f9da 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c98a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b090      	sub	sp, #64	; 0x40
 800c99a:	af0a      	add	r7, sp, #40	; 0x28
 800c99c:	60f8      	str	r0, [r7, #12]
 800c99e:	60b9      	str	r1, [r7, #8]
 800c9a0:	607a      	str	r2, [r7, #4]
 800c9a2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	9302      	str	r3, [sp, #8]
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	9301      	str	r3, [sp, #4]
 800c9b8:	6a3b      	ldr	r3, [r7, #32]
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	68b9      	ldr	r1, [r7, #8]
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f7ff f911 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800c9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d16e      	bne.n	800cab2 <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	9308      	str	r3, [sp, #32]
 800c9d8:	230c      	movs	r3, #12
 800c9da:	9307      	str	r3, [sp, #28]
 800c9dc:	230b      	movs	r3, #11
 800c9de:	9306      	str	r3, [sp, #24]
 800c9e0:	230a      	movs	r3, #10
 800c9e2:	9305      	str	r3, [sp, #20]
 800c9e4:	2309      	movs	r3, #9
 800c9e6:	9304      	str	r3, [sp, #16]
 800c9e8:	2308      	movs	r3, #8
 800c9ea:	9303      	str	r3, [sp, #12]
 800c9ec:	230f      	movs	r3, #15
 800c9ee:	9302      	str	r3, [sp, #8]
 800c9f0:	230c      	movs	r3, #12
 800c9f2:	9301      	str	r3, [sp, #4]
 800c9f4:	230b      	movs	r3, #11
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	230a      	movs	r3, #10
 800c9fa:	2209      	movs	r2, #9
 800c9fc:	2108      	movs	r1, #8
 800c9fe:	200f      	movs	r0, #15
 800ca00:	f000 ff47 	bl	800d892 <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	3302      	adds	r3, #2
 800ca08:	9308      	str	r3, [sp, #32]
 800ca0a:	230c      	movs	r3, #12
 800ca0c:	9307      	str	r3, [sp, #28]
 800ca0e:	230b      	movs	r3, #11
 800ca10:	9306      	str	r3, [sp, #24]
 800ca12:	230a      	movs	r3, #10
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	2309      	movs	r3, #9
 800ca18:	9304      	str	r3, [sp, #16]
 800ca1a:	2308      	movs	r3, #8
 800ca1c:	9303      	str	r3, [sp, #12]
 800ca1e:	230f      	movs	r3, #15
 800ca20:	9302      	str	r3, [sp, #8]
 800ca22:	230c      	movs	r3, #12
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	230b      	movs	r3, #11
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	230a      	movs	r3, #10
 800ca2c:	2209      	movs	r2, #9
 800ca2e:	2108      	movs	r1, #8
 800ca30:	200f      	movs	r0, #15
 800ca32:	f000 ffbe 	bl	800d9b2 <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	68b9      	ldr	r1, [r7, #8]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f97c 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	2209      	movs	r2, #9
 800ca4a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	2209      	movs	r2, #9
 800ca50:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	2200      	movs	r2, #0
 800ca56:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800ca58:	6a3b      	ldr	r3, [r7, #32]
 800ca5a:	2221      	movs	r2, #33	; 0x21
 800ca5c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	2200      	movs	r2, #0
 800ca62:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	2221      	movs	r2, #33	; 0x21
 800ca68:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800ca6a:	6a3b      	ldr	r3, [r7, #32]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	2229      	movs	r2, #41	; 0x29
 800ca74:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	2229      	movs	r2, #41	; 0x29
 800ca80:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2209      	movs	r2, #9
 800ca86:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	22f5      	movs	r2, #245	; 0xf5
 800ca8c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca90:	2209      	movs	r2, #9
 800ca92:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	2209      	movs	r2, #9
 800ca98:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9c:	2209      	movs	r2, #9
 800ca9e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	2206      	movs	r2, #6
 800caa4:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	22bb      	movs	r2, #187	; 0xbb
 800caaa:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	2226      	movs	r2, #38	; 0x26
 800cab0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b08c      	sub	sp, #48	; 0x30
 800cac2:	af06      	add	r7, sp, #24
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cacc:	2300      	movs	r3, #0
 800cace:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	9304      	str	r3, [sp, #16]
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	9303      	str	r3, [sp, #12]
 800cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	68b9      	ldr	r1, [r7, #8]
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f7ff ff53 	bl	800c996 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800caf0:	4603      	mov	r3, r0
 800caf2:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	22db      	movs	r2, #219	; 0xdb
 800caf8:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800cafa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b08c      	sub	sp, #48	; 0x30
 800cb0a:	af06      	add	r7, sp, #24
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	9303      	str	r3, [sp, #12]
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	9302      	str	r3, [sp, #8]
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	6a3b      	ldr	r3, [r7, #32]
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7ff fbb9 	bl	800c2aa <VL53L1_preset_mode_histogram_medium_range>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cb3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d12c      	bne.n	800cb9e <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	9304      	str	r3, [sp, #16]
 800cb48:	2307      	movs	r3, #7
 800cb4a:	9303      	str	r3, [sp, #12]
 800cb4c:	2307      	movs	r3, #7
 800cb4e:	9302      	str	r3, [sp, #8]
 800cb50:	2302      	movs	r3, #2
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	2308      	movs	r3, #8
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	2304      	movs	r3, #4
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	2108      	movs	r1, #8
 800cb5e:	2004      	movs	r0, #4
 800cb60:	f00a f96c 	bl	8016e3c <VL53L1_init_zone_config_structure>
 800cb64:	4603      	mov	r3, r0
 800cb66:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800cb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6a:	785b      	ldrb	r3, [r3, #1]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800cb74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d108      	bne.n	800cb8e <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7e:	3302      	adds	r3, #2
 800cb80:	461a      	mov	r2, r3
 800cb82:	6879      	ldr	r1, [r7, #4]
 800cb84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb86:	f003 f873 	bl	800fc70 <VL53L1_set_histogram_multizone_initial_bin_config>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	6a3b      	ldr	r3, [r7, #32]
 800cb94:	683a      	ldr	r2, [r7, #0]
 800cb96:	68b9      	ldr	r1, [r7, #8]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 f8d0 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cb9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b08c      	sub	sp, #48	; 0x30
 800cbae:	af06      	add	r7, sp, #24
 800cbb0:	60f8      	str	r0, [r7, #12]
 800cbb2:	60b9      	str	r1, [r7, #8]
 800cbb4:	607a      	str	r2, [r7, #4]
 800cbb6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	9304      	str	r3, [sp, #16]
 800cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc2:	9303      	str	r3, [sp, #12]
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	9302      	str	r3, [sp, #8]
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	68b9      	ldr	r1, [r7, #8]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff fc8e 	bl	800c4f8 <VL53L1_preset_mode_histogram_short_range>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cbe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d12c      	bne.n	800cc42 <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	9304      	str	r3, [sp, #16]
 800cbec:	2307      	movs	r3, #7
 800cbee:	9303      	str	r3, [sp, #12]
 800cbf0:	2307      	movs	r3, #7
 800cbf2:	9302      	str	r3, [sp, #8]
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	9301      	str	r3, [sp, #4]
 800cbf8:	2308      	movs	r3, #8
 800cbfa:	9300      	str	r3, [sp, #0]
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	2202      	movs	r2, #2
 800cc00:	2108      	movs	r1, #8
 800cc02:	2004      	movs	r0, #4
 800cc04:	f00a f91a 	bl	8016e3c <VL53L1_init_zone_config_structure>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	785b      	ldrb	r3, [r3, #1]
 800cc10:	3301      	adds	r3, #1
 800cc12:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800cc18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d108      	bne.n	800cc32 <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	3302      	adds	r3, #2
 800cc24:	461a      	mov	r2, r3
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc2a:	f003 f821 	bl	800fc70 <VL53L1_set_histogram_multizone_initial_bin_config>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	68b9      	ldr	r1, [r7, #8]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f87e 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b08c      	sub	sp, #48	; 0x30
 800cc52:	af06      	add	r7, sp, #24
 800cc54:	60f8      	str	r0, [r7, #12]
 800cc56:	60b9      	str	r1, [r7, #8]
 800cc58:	607a      	str	r2, [r7, #4]
 800cc5a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	9304      	str	r3, [sp, #16]
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	9303      	str	r3, [sp, #12]
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	9302      	str	r3, [sp, #8]
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff f9ee 	bl	800c05c <VL53L1_preset_mode_histogram_long_range>
 800cc80:	4603      	mov	r3, r0
 800cc82:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cc84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d12c      	bne.n	800cce6 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8e:	9304      	str	r3, [sp, #16]
 800cc90:	2307      	movs	r3, #7
 800cc92:	9303      	str	r3, [sp, #12]
 800cc94:	2307      	movs	r3, #7
 800cc96:	9302      	str	r3, [sp, #8]
 800cc98:	2302      	movs	r3, #2
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	2308      	movs	r3, #8
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	2304      	movs	r3, #4
 800cca2:	2202      	movs	r2, #2
 800cca4:	2108      	movs	r1, #8
 800cca6:	2004      	movs	r0, #4
 800cca8:	f00a f8c8 	bl	8016e3c <VL53L1_init_zone_config_structure>
 800ccac:	4603      	mov	r3, r0
 800ccae:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	785b      	ldrb	r3, [r3, #1]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800ccbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d108      	bne.n	800ccd6 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	3302      	adds	r3, #2
 800ccc8:	461a      	mov	r2, r3
 800ccca:	6879      	ldr	r1, [r7, #4]
 800cccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccce:	f002 ffcf 	bl	800fc70 <VL53L1_set_histogram_multizone_initial_bin_config>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	683a      	ldr	r2, [r7, #0]
 800ccde:	68b9      	ldr	r1, [r7, #8]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f82c 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3718      	adds	r7, #24
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b08a      	sub	sp, #40	; 0x28
 800ccf6:	af04      	add	r7, sp, #16
 800ccf8:	60f8      	str	r0, [r7, #12]
 800ccfa:	60b9      	str	r1, [r7, #8]
 800ccfc:	607a      	str	r2, [r7, #4]
 800ccfe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd00:	2300      	movs	r3, #0
 800cd02:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	9303      	str	r3, [sp, #12]
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	9302      	str	r3, [sp, #8]
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	68b9      	ldr	r1, [r7, #8]
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f7fe fb9e 	bl	800b45c <VL53L1_preset_mode_standard_ranging>
 800cd20:	4603      	mov	r3, r0
 800cd22:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800cd24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2e:	2201      	movs	r2, #1
 800cd30:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800cd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b085      	sub	sp, #20
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	60f8      	str	r0, [r7, #12]
 800cd46:	60b9      	str	r1, [r7, #8]
 800cd48:	607a      	str	r2, [r7, #4]
 800cd4a:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	79db      	ldrb	r3, [r3, #7]
 800cd80:	b29b      	uxth	r3, r3
				<< 8)
 800cd82:	021b      	lsls	r3, r3, #8
 800cd84:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	7a1b      	ldrb	r3, [r3, #8]
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	4413      	add	r3, r2
 800cd8e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	785b      	ldrb	r3, [r3, #1]
 800cdc8:	b29b      	uxth	r3, r3
				<< 8)
 800cdca:	021b      	lsls	r3, r3, #8
 800cdcc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	789b      	ldrb	r3, [r3, #2]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	4413      	add	r3, r2
 800cdd6:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	78db      	ldrb	r3, [r3, #3]
 800cde0:	b29b      	uxth	r3, r3
				<< 8)
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	791b      	ldrb	r3, [r3, #4]
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	4413      	add	r3, r2
 800cdee:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800ce1c:	bf00      	nop
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	79db      	ldrb	r3, [r3, #7]
 800ce68:	b29b      	uxth	r3, r3
				<< 8)
 800ce6a:	021b      	lsls	r3, r3, #8
 800ce6c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7a1b      	ldrb	r3, [r3, #8]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	4413      	add	r3, r2
 800ce76:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	785b      	ldrb	r3, [r3, #1]
 800cea8:	b29b      	uxth	r3, r3
				<< 8)
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	789b      	ldrb	r3, [r3, #2]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	4413      	add	r3, r2
 800ceb6:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	78db      	ldrb	r3, [r3, #3]
 800cec0:	b29b      	uxth	r3, r3
				<< 8)
 800cec2:	021b      	lsls	r3, r3, #8
 800cec4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	791b      	ldrb	r3, [r3, #4]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	4413      	add	r3, r2
 800cece:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800cee4:	bf00      	nop
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08c      	sub	sp, #48	; 0x30
 800cef4:	af06      	add	r7, sp, #24
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cefe:	2300      	movs	r3, #0
 800cf00:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	9304      	str	r3, [sp, #16]
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	9303      	str	r3, [sp, #12]
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	9302      	str	r3, [sp, #8]
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	68b9      	ldr	r1, [r7, #8]
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7fe fe64 	bl	800bbea <VL53L1_preset_mode_histogram_ranging>
 800cf22:	4603      	mov	r3, r0
 800cf24:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cf26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10a      	bne.n	800cf44 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	68b9      	ldr	r1, [r7, #8]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fefd 	bl	800cd3e <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cf44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3318      	adds	r3, #24
 800cf5c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2230      	movs	r2, #48	; 0x30
 800cf72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800cf7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cf7e:	bf00      	nop
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	b085      	sub	sp, #20
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	460b      	mov	r3, r1
 800cf94:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	3318      	adds	r3, #24
 800cf9a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	332c      	adds	r3, #44	; 0x2c
 800cfa0:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	78fa      	ldrb	r2, [r7, #3]
 800cfa6:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2202      	movs	r2, #2
 800cfd0:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	735a      	strb	r2, [r3, #13]

}
 800cfde:	bf00      	nop
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
	...

0800cfec <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3318      	adds	r3, #24
 800cffc:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	332c      	adds	r3, #44	; 0x2c
 800d002:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800d00a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d115      	bne.n	800d03e <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2203      	movs	r2, #3
 800d016:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2202      	movs	r2, #2
 800d02e:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	735a      	strb	r2, [r3, #13]
 800d03c:	e0be      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	7a1b      	ldrb	r3, [r3, #8]
 800d042:	2bff      	cmp	r3, #255	; 0xff
 800d044:	d103      	bne.n	800d04e <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2280      	movs	r2, #128	; 0x80
 800d04a:	721a      	strb	r2, [r3, #8]
 800d04c:	e005      	b.n	800d05a <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	7a1b      	ldrb	r3, [r3, #8]
 800d052:	3301      	adds	r3, #1
 800d054:	b2da      	uxtb	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	7a19      	ldrb	r1, [r3, #8]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f103 0209 	add.w	r2, r3, #9
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	330a      	adds	r3, #10
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f002 fdc2 	bl	800fbf2 <VL53L1_update_internal_stream_counters>
 800d06e:	4603      	mov	r3, r0
 800d070:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	7adb      	ldrb	r3, [r3, #11]
 800d076:	f083 0302 	eor.w	r3, r3, #2
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	79db      	ldrb	r3, [r3, #7]
 800d084:	3b03      	subs	r3, #3
 800d086:	2b05      	cmp	r3, #5
 800d088:	f200 8082 	bhi.w	800d190 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800d08c:	a201      	add	r2, pc, #4	; (adr r2, 800d094 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800d08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d092:	bf00      	nop
 800d094:	0800d0ad 	.word	0x0800d0ad
 800d098:	0800d191 	.word	0x0800d191
 800d09c:	0800d191 	.word	0x0800d191
 800d0a0:	0800d0ff 	.word	0x0800d0ff
 800d0a4:	0800d135 	.word	0x0800d135
 800d0a8:	0800d15f 	.word	0x0800d15f

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800d0b2:	f003 0302 	and.w	r3, r3, #2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	dd03      	ble.n	800d0c2 <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2206      	movs	r2, #6
 800d0be:	71da      	strb	r2, [r3, #7]
 800d0c0:	e00d      	b.n	800d0de <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d303      	bcc.n	800d0d8 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2208      	movs	r2, #8
 800d0d4:	71da      	strb	r2, [r3, #7]
 800d0d6:	e002      	b.n	800d0de <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2207      	movs	r2, #7
 800d0dc:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	735a      	strb	r2, [r3, #13]

			break;
 800d0fc:	e05e      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d120:	429a      	cmp	r2, r3
 800d122:	d303      	bcc.n	800d12c <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2208      	movs	r2, #8
 800d128:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800d12a:	e047      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2207      	movs	r2, #7
 800d130:	71da      	strb	r2, [r3, #7]
			break;
 800d132:	e043      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	7b5b      	ldrb	r3, [r3, #13]
 800d138:	3301      	adds	r3, #1
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d303      	bcc.n	800d156 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2208      	movs	r2, #8
 800d152:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800d154:	e032      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2207      	movs	r2, #7
 800d15a:	71da      	strb	r2, [r3, #7]
			break;
 800d15c:	e02e      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2200      	movs	r2, #0
 800d162:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	7b1b      	ldrb	r3, [r3, #12]
 800d168:	f083 0301 	eor.w	r3, r3, #1
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d303      	bcc.n	800d188 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2208      	movs	r2, #8
 800d184:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800d186:	e019      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2207      	movs	r2, #7
 800d18c:	71da      	strb	r2, [r3, #7]
			break;
 800d18e:	e015      	b.n	800d1bc <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2203      	movs	r2, #3
 800d194:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	735a      	strb	r2, [r3, #13]
			break;
 800d1ba:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800d1bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b08d      	sub	sp, #52	; 0x34
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	3318      	adds	r3, #24
 800d1da:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d1e2:	3308      	adds	r3, #8
 800d1e4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	332c      	adds	r3, #44	; 0x2c
 800d1ea:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800d1f2:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d1fa:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d202:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800d216:	2300      	movs	r3, #0
 800d218:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800d222:	f003 031f 	and.w	r3, r3, #31
 800d226:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	78db      	ldrb	r3, [r3, #3]
 800d22c:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d230:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800d234:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bf14      	ite	ne
 800d23c:	2301      	movne	r3, #1
 800d23e:	2300      	moveq	r3, #0
 800d240:	b2db      	uxtb	r3, r3
	histogram_mode =
 800d242:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d248:	111b      	asrs	r3, r3, #4
 800d24a:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800d254:	7c7b      	ldrb	r3, [r7, #17]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d008      	beq.n	800d26c <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d260:	111b      	asrs	r3, r3, #4
 800d262:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800d264:	f003 0302 	and.w	r3, r3, #2
 800d268:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800d26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b00      	cmp	r3, #0
 800d278:	d04e      	beq.n	800d318 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	79db      	ldrb	r3, [r3, #7]
 800d27e:	2b06      	cmp	r3, #6
 800d280:	d109      	bne.n	800d296 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800d282:	7c7b      	ldrb	r3, [r7, #17]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d14a      	bne.n	800d31e <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800d288:	7cfb      	ldrb	r3, [r7, #19]
 800d28a:	2b12      	cmp	r3, #18
 800d28c:	d047      	beq.n	800d31e <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800d28e:	23ef      	movs	r3, #239	; 0xef
 800d290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d294:	e043      	b.n	800d31e <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	7a1b      	ldrb	r3, [r3, #8]
 800d29a:	7cba      	ldrb	r2, [r7, #18]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d002      	beq.n	800d2a6 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800d2a0:	23ee      	movs	r3, #238	; 0xee
 800d2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	7adb      	ldrb	r3, [r3, #11]
 800d2aa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d002      	beq.n	800d2b8 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800d2b2:	23ed      	movs	r3, #237	; 0xed
 800d2b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	7b5b      	ldrb	r3, [r3, #13]
 800d2bc:	4619      	mov	r1, r3
		expected_stream_count =
 800d2be:	697a      	ldr	r2, [r7, #20]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	440b      	add	r3, r1
 800d2c6:	005b      	lsls	r3, r3, #1
 800d2c8:	4413      	add	r3, r2
 800d2ca:	3302      	adds	r3, #2
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	7b5b      	ldrb	r3, [r3, #13]
 800d2d4:	4619      	mov	r1, r3
		expected_gph_id =
 800d2d6:	697a      	ldr	r2, [r7, #20]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	440b      	add	r3, r1
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	4413      	add	r3, r2
 800d2e2:	3303      	adds	r3, #3
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800d2e8:	7c3a      	ldrb	r2, [r7, #16]
 800d2ea:	7cbb      	ldrb	r3, [r7, #18]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d00a      	beq.n	800d306 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d102      	bne.n	800d300 <VL53L1_check_ll_driver_rd_state+0x138>
 800d2fa:	7cbb      	ldrb	r3, [r7, #18]
 800d2fc:	2bff      	cmp	r3, #255	; 0xff
 800d2fe:	d002      	beq.n	800d306 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800d300:	23ec      	movs	r3, #236	; 0xec
 800d302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800d306:	7bfa      	ldrb	r2, [r7, #15]
 800d308:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d005      	beq.n	800d31c <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800d310:	23eb      	movs	r3, #235	; 0xeb
 800d312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d316:	e002      	b.n	800d31e <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800d318:	bf00      	nop
 800d31a:	e000      	b.n	800d31e <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800d31c:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800d31e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d322:	4618      	mov	r0, r3
 800d324:	3734      	adds	r7, #52	; 0x34
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b088      	sub	sp, #32
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d336:	2300      	movs	r3, #0
 800d338:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3318      	adds	r3, #24
 800d33e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d346:	3308      	adds	r3, #8
 800d348:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	332c      	adds	r3, #44	; 0x2c
 800d34e:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d356:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800d35e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d11b      	bne.n	800d39e <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	2203      	movs	r2, #3
 800d36a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	2200      	movs	r2, #0
 800d370:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	2200      	movs	r2, #0
 800d376:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2200      	movs	r2, #0
 800d37c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2202      	movs	r2, #2
 800d382:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	2200      	movs	r2, #0
 800d388:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	2200      	movs	r2, #0
 800d38e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	773b      	strb	r3, [r7, #28]
 800d39c:	e0b1      	b.n	800d502 <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	791b      	ldrb	r3, [r3, #4]
 800d3a2:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	799b      	ldrb	r3, [r3, #6]
 800d3a8:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	785b      	ldrb	r3, [r3, #1]
 800d3ae:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	785b      	ldrb	r3, [r3, #1]
 800d3b4:	2bff      	cmp	r3, #255	; 0xff
 800d3b6:	d103      	bne.n	800d3c0 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	2280      	movs	r2, #128	; 0x80
 800d3bc:	705a      	strb	r2, [r3, #1]
 800d3be:	e005      	b.n	800d3cc <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	785b      	ldrb	r3, [r3, #1]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	7859      	ldrb	r1, [r3, #1]
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	1c9a      	adds	r2, r3, #2
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	3303      	adds	r3, #3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f002 fc0a 	bl	800fbf2 <VL53L1_update_internal_stream_counters>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	791b      	ldrb	r3, [r3, #4]
 800d3e6:	f083 0302 	eor.w	r3, r3, #2
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2b05      	cmp	r3, #5
 800d3f6:	d053      	beq.n	800d4a0 <VL53L1_update_ll_driver_cfg_state+0x172>
 800d3f8:	2b05      	cmp	r3, #5
 800d3fa:	dc69      	bgt.n	800d4d0 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800d3fc:	2b03      	cmp	r3, #3
 800d3fe:	d002      	beq.n	800d406 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800d400:	2b04      	cmp	r3, #4
 800d402:	d02d      	beq.n	800d460 <VL53L1_update_ll_driver_cfg_state+0x132>
 800d404:	e064      	b.n	800d4d0 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	2201      	movs	r2, #1
 800d40a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d416:	429a      	cmp	r2, r3
 800d418:	d909      	bls.n	800d42e <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	2200      	movs	r2, #0
 800d41e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	795b      	ldrb	r3, [r3, #5]
 800d424:	f083 0301 	eor.w	r3, r3, #1
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2201      	movs	r2, #1
 800d432:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d106      	bne.n	800d44c <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	2201      	movs	r2, #1
 800d442:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	2200      	movs	r2, #0
 800d448:	70da      	strb	r2, [r3, #3]
 800d44a:	e005      	b.n	800d458 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	2200      	movs	r2, #0
 800d450:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	2201      	movs	r2, #1
 800d456:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	2204      	movs	r2, #4
 800d45c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800d45e:	e050      	b.n	800d502 <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	799b      	ldrb	r3, [r3, #6]
 800d464:	3301      	adds	r3, #1
 800d466:	b2da      	uxtb	r2, r3
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d476:	429a      	cmp	r2, r3
 800d478:	d940      	bls.n	800d4fc <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	2200      	movs	r2, #0
 800d47e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	795b      	ldrb	r3, [r3, #5]
 800d484:	f083 0301 	eor.w	r3, r3, #1
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d031      	beq.n	800d4fc <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	2205      	movs	r2, #5
 800d49c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800d49e:	e02d      	b.n	800d4fc <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	799b      	ldrb	r3, [r3, #6]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d922      	bls.n	800d500 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	795b      	ldrb	r3, [r3, #5]
 800d4c4:	f083 0301 	eor.w	r3, r3, #1
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	715a      	strb	r2, [r3, #5]
			}
			break;
 800d4ce:	e017      	b.n	800d500 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	2203      	movs	r2, #3
 800d4d4:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2202      	movs	r2, #2
 800d4ec:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	719a      	strb	r2, [r3, #6]
			break;
 800d4fa:	e002      	b.n	800d502 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800d4fc:	bf00      	nop
 800d4fe:	e000      	b.n	800d502 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800d500:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d11d      	bne.n	800d548 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800d50c:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800d50e:	7f3b      	ldrb	r3, [r7, #28]
 800d510:	3b01      	subs	r3, #1
 800d512:	b2d8      	uxtb	r0, r3
 800d514:	68f9      	ldr	r1, [r7, #12]
 800d516:	4613      	mov	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	440b      	add	r3, r1
 800d520:	3302      	adds	r3, #2
 800d522:	4602      	mov	r2, r0
 800d524:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	7b5b      	ldrb	r3, [r3, #13]
 800d52a:	4619      	mov	r1, r3
 800d52c:	7f7b      	ldrb	r3, [r7, #29]
 800d52e:	f083 0302 	eor.w	r3, r3, #2
 800d532:	b2d8      	uxtb	r0, r3
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	460b      	mov	r3, r1
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	440b      	add	r3, r1
 800d53c:	005b      	lsls	r3, r3, #1
 800d53e:	4413      	add	r3, r2
 800d540:	3303      	adds	r3, #3
 800d542:	4602      	mov	r2, r0
 800d544:	701a      	strb	r2, [r3, #0]
 800d546:	e013      	b.n	800d570 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800d548:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800d54a:	68f9      	ldr	r1, [r7, #12]
 800d54c:	4613      	mov	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	440b      	add	r3, r1
 800d556:	3302      	adds	r3, #2
 800d558:	7f3a      	ldrb	r2, [r7, #28]
 800d55a:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800d55c:	7fba      	ldrb	r2, [r7, #30]
 800d55e:	68f9      	ldr	r1, [r7, #12]
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	005b      	lsls	r3, r3, #1
 800d568:	440b      	add	r3, r1
 800d56a:	3303      	adds	r3, #3
 800d56c:	7f7a      	ldrb	r2, [r7, #29]
 800d56e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800d570:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3720      	adds	r7, #32
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	7c1a      	ldrb	r2, [r3, #16]
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	3301      	adds	r3, #1
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	7c52      	ldrb	r2, [r2, #17]
 800d596:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	3302      	adds	r3, #2
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	7c92      	ldrb	r2, [r2, #18]
 800d5a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	3303      	adds	r3, #3
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	7cd2      	ldrb	r2, [r2, #19]
 800d5aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	7d12      	ldrb	r2, [r2, #20]
 800d5b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	3305      	adds	r3, #5
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	7d52      	ldrb	r2, [r2, #21]
 800d5be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	3306      	adds	r3, #6
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	7d92      	ldrb	r2, [r2, #22]
 800d5c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	3307      	adds	r3, #7
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	7dd2      	ldrb	r2, [r2, #23]
 800d5d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	7e12      	ldrb	r2, [r2, #24]
 800d5dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	3309      	adds	r3, #9
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	7e52      	ldrb	r2, [r2, #25]
 800d5e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	330a      	adds	r3, #10
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	7e92      	ldrb	r2, [r2, #26]
 800d5f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	330b      	adds	r3, #11
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	7ed2      	ldrb	r2, [r2, #27]
 800d5fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	330c      	adds	r3, #12
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	7f12      	ldrb	r2, [r2, #28]
 800d604:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	330d      	adds	r3, #13
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	7f52      	ldrb	r2, [r2, #29]
 800d60e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	330e      	adds	r3, #14
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	7f92      	ldrb	r2, [r2, #30]
 800d618:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	330f      	adds	r3, #15
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	7fd2      	ldrb	r2, [r2, #31]
 800d622:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	3310      	adds	r3, #16
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d62e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	3311      	adds	r3, #17
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d63a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	3312      	adds	r3, #18
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800d646:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	3313      	adds	r3, #19
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800d652:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	3314      	adds	r3, #20
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d65e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	3315      	adds	r3, #21
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d66a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	3316      	adds	r3, #22
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d676:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	3317      	adds	r3, #23
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800d682:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	3318      	adds	r3, #24
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d68e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	3319      	adds	r3, #25
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800d69a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	331a      	adds	r3, #26
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800d6a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	331b      	adds	r3, #27
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d6b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	331c      	adds	r3, #28
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d6be:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	331d      	adds	r3, #29
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d6ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	331e      	adds	r3, #30
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800d6d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	331f      	adds	r3, #31
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800d6e2:	701a      	strb	r2, [r3, #0]
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	22ff      	movs	r2, #255	; 0xff
 800d6fc:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	22ff      	movs	r2, #255	; 0xff
 800d702:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	22ff      	movs	r2, #255	; 0xff
 800d708:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	22ff      	movs	r2, #255	; 0xff
 800d70e:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d716:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d71e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d726:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d72e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d736:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d73e:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d746:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d74e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d756:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d75e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d766:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d76e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d776:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d77e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d786:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d78e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d796:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d79e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7a6:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	22ff      	movs	r2, #255	; 0xff
 800d7ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	6039      	str	r1, [r7, #0]
 800d7c6:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2210      	movs	r2, #16
 800d7d0:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	79fa      	ldrb	r2, [r7, #7]
 800d7d6:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
 800d7dc:	e017      	b.n	800d80e <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800d7de:	7bfa      	ldrb	r2, [r7, #15]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	011b      	lsls	r3, r3, #4
 800d7e4:	4413      	add	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	683a      	ldr	r2, [r7, #0]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2203      	movs	r2, #3
 800d7fa:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2204      	movs	r2, #4
 800d800:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	2200      	movs	r2, #0
 800d806:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	3301      	adds	r3, #1
 800d80c:	73fb      	strb	r3, [r7, #15]
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	7bfa      	ldrb	r2, [r7, #15]
 800d814:	429a      	cmp	r2, r3
 800d816:	d3e2      	bcc.n	800d7de <V53L1_init_zone_results_structure+0x22>
	}
}
 800d818:	bf00      	nop
 800d81a:	bf00      	nop
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800d826:	b480      	push	{r7}
 800d828:	b087      	sub	sp, #28
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d834:	3308      	adds	r3, #8
 800d836:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800d83c:	2310      	movs	r3, #16
 800d83e:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d846:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800d848:	2300      	movs	r3, #0
 800d84a:	75fb      	strb	r3, [r7, #23]
 800d84c:	e016      	b.n	800d87c <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800d84e:	7dfa      	ldrb	r2, [r7, #23]
 800d850:	68b9      	ldr	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	440b      	add	r3, r1
 800d85c:	3304      	adds	r3, #4
 800d85e:	2201      	movs	r2, #1
 800d860:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800d862:	7dfa      	ldrb	r2, [r7, #23]
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	4613      	mov	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	005b      	lsls	r3, r3, #1
 800d86e:	440b      	add	r3, r1
 800d870:	3306      	adds	r3, #6
 800d872:	2200      	movs	r2, #0
 800d874:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	3301      	adds	r3, #1
 800d87a:	75fb      	strb	r3, [r7, #23]
 800d87c:	7dfa      	ldrb	r2, [r7, #23]
 800d87e:	7bfb      	ldrb	r3, [r7, #15]
 800d880:	429a      	cmp	r2, r3
 800d882:	d3e4      	bcc.n	800d84e <V53L1_init_zone_dss_configs+0x28>
	}
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800d892:	b490      	push	{r4, r7}
 800d894:	b082      	sub	sp, #8
 800d896:	af00      	add	r7, sp, #0
 800d898:	4604      	mov	r4, r0
 800d89a:	4608      	mov	r0, r1
 800d89c:	4611      	mov	r1, r2
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4623      	mov	r3, r4
 800d8a2:	71fb      	strb	r3, [r7, #7]
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	71bb      	strb	r3, [r7, #6]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	717b      	strb	r3, [r7, #5]
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d8b0:	79bb      	ldrb	r3, [r7, #6]
 800d8b2:	011b      	lsls	r3, r3, #4
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d8c0:	793b      	ldrb	r3, [r7, #4]
 800d8c2:	011b      	lsls	r3, r3, #4
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	797b      	ldrb	r3, [r7, #5]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ce:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d8d0:	7d3b      	ldrb	r3, [r7, #20]
 800d8d2:	011b      	lsls	r3, r3, #4
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	7c3b      	ldrb	r3, [r7, #16]
 800d8d8:	4413      	add	r3, r2
 800d8da:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800d8e0:	7f3b      	ldrb	r3, [r7, #28]
 800d8e2:	011b      	lsls	r3, r3, #4
 800d8e4:	b2da      	uxtb	r2, r3
 800d8e6:	7e3b      	ldrb	r3, [r7, #24]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800d8f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8f4:	011b      	lsls	r3, r3, #4
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800d904:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d908:	011b      	lsls	r3, r3, #4
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d910:	4413      	add	r3, r2
 800d912:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d932:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800d934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d936:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d93e:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800d940:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d944:	011b      	lsls	r3, r3, #4
 800d946:	b2da      	uxtb	r2, r3
 800d948:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d94c:	4413      	add	r3, r2
 800d94e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800d950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d952:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d95a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	2200      	movs	r2, #0
 800d960:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97c:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800d982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d984:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800d986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d988:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800d992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d998:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9a0:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	701a      	strb	r2, [r3, #0]

}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bc90      	pop	{r4, r7}
 800d9b0:	4770      	bx	lr

0800d9b2 <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800d9b2:	b490      	push	{r4, r7}
 800d9b4:	b082      	sub	sp, #8
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	4608      	mov	r0, r1
 800d9bc:	4611      	mov	r1, r2
 800d9be:	461a      	mov	r2, r3
 800d9c0:	4623      	mov	r3, r4
 800d9c2:	71fb      	strb	r3, [r7, #7]
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	71bb      	strb	r3, [r7, #6]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	717b      	strb	r3, [r7, #5]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d9d0:	79bb      	ldrb	r3, [r7, #6]
 800d9d2:	011b      	lsls	r3, r3, #4
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	4413      	add	r3, r2
 800d9da:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d9e0:	793b      	ldrb	r3, [r7, #4]
 800d9e2:	011b      	lsls	r3, r3, #4
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	797b      	ldrb	r3, [r7, #5]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d9f0:	7d3b      	ldrb	r3, [r7, #20]
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	7c3b      	ldrb	r3, [r7, #16]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800da04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da06:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800da08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0a:	789a      	ldrb	r2, [r3, #2]
 800da0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0e:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	78da      	ldrb	r2, [r3, #3]
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1e:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800da20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da22:	789a      	ldrb	r2, [r3, #2]
 800da24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da26:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2a:	78da      	ldrb	r2, [r3, #3]
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	791a      	ldrb	r2, [r3, #4]
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800da3e:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800da40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da44:	011b      	lsls	r3, r3, #4
 800da46:	b2da      	uxtb	r2, r3
 800da48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da4c:	4413      	add	r3, r2
 800da4e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800da5a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	2200      	movs	r2, #0
 800da60:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800da62:	7f3b      	ldrb	r3, [r7, #28]
 800da64:	011b      	lsls	r3, r3, #4
 800da66:	b2da      	uxtb	r2, r3
 800da68:	7e3b      	ldrb	r3, [r7, #24]
 800da6a:	4413      	add	r3, r2
 800da6c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800da6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da70:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800da72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da76:	011b      	lsls	r3, r3, #4
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da7e:	4413      	add	r3, r2
 800da80:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800da86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da8a:	011b      	lsls	r3, r3, #4
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da92:	4413      	add	r3, r2
 800da94:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	7bda      	ldrb	r2, [r3, #15]
 800da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa0:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	7c1a      	ldrb	r2, [r3, #16]
 800daa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa8:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	7c5a      	ldrb	r2, [r3, #17]
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dab8:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dac0:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	2200      	movs	r2, #0
 800dac6:	701a      	strb	r2, [r3, #0]
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bc90      	pop	{r4, r7}
 800dad0:	4770      	bx	lr

0800dad2 <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800dad2:	b480      	push	{r7}
 800dad4:	b087      	sub	sp, #28
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	60f8      	str	r0, [r7, #12]
 800dada:	460b      	mov	r3, r1
 800dadc:	607a      	str	r2, [r7, #4]
 800dade:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	220c      	movs	r2, #12
 800dafa:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800dafc:	897b      	ldrh	r3, [r7, #10]
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800db32:	2300      	movs	r3, #0
 800db34:	82fb      	strh	r3, [r7, #22]
 800db36:	e015      	b.n	800db64 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800db38:	8afa      	ldrh	r2, [r7, #22]
 800db3a:	897b      	ldrh	r3, [r7, #10]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d207      	bcs.n	800db50 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800db40:	8afb      	ldrh	r3, [r7, #22]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	3302      	adds	r3, #2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	605a      	str	r2, [r3, #4]
 800db4e:	e006      	b.n	800db5e <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800db50:	8afb      	ldrh	r3, [r7, #22]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	3302      	adds	r3, #2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	2200      	movs	r2, #0
 800db5c:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800db5e:	8afb      	ldrh	r3, [r7, #22]
 800db60:	3301      	adds	r3, #1
 800db62:	82fb      	strh	r3, [r7, #22]
 800db64:	8afb      	ldrh	r3, [r7, #22]
 800db66:	2b0b      	cmp	r3, #11
 800db68:	d9e6      	bls.n	800db38 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800db6a:	bf00      	nop
 800db6c:	bf00      	nop
 800db6e:	371c      	adds	r7, #28
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	603a      	str	r2, [r7, #0]
 800db82:	80fb      	strh	r3, [r7, #6]
 800db84:	460b      	mov	r3, r1
 800db86:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800db90:	88fb      	ldrh	r3, [r7, #6]
 800db92:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800db94:	2300      	movs	r3, #0
 800db96:	81fb      	strh	r3, [r7, #14]
 800db98:	e00e      	b.n	800dbb8 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800db9a:	88ba      	ldrh	r2, [r7, #4]
 800db9c:	89fb      	ldrh	r3, [r7, #14]
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	3b01      	subs	r3, #1
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	4413      	add	r3, r2
 800dba6:	89ba      	ldrh	r2, [r7, #12]
 800dba8:	b2d2      	uxtb	r2, r2
 800dbaa:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800dbac:	89bb      	ldrh	r3, [r7, #12]
 800dbae:	0a1b      	lsrs	r3, r3, #8
 800dbb0:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800dbb2:	89fb      	ldrh	r3, [r7, #14]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	81fb      	strh	r3, [r7, #14]
 800dbb8:	89fa      	ldrh	r2, [r7, #14]
 800dbba:	88bb      	ldrh	r3, [r7, #4]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d3ec      	bcc.n	800db9a <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800dbc0:	bf00      	nop
 800dbc2:	bf00      	nop
 800dbc4:	3714      	adds	r7, #20
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dbce:	b480      	push	{r7}
 800dbd0:	b085      	sub	sp, #20
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	6039      	str	r1, [r7, #0]
 800dbd8:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800dbde:	e00a      	b.n	800dbf6 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800dbe0:	89fb      	ldrh	r3, [r7, #14]
 800dbe2:	021b      	lsls	r3, r3, #8
 800dbe4:	b21a      	sxth	r2, r3
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	1c59      	adds	r1, r3, #1
 800dbea:	6039      	str	r1, [r7, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	b21b      	sxth	r3, r3
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	b21b      	sxth	r3, r3
 800dbf4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800dbf6:	88fb      	ldrh	r3, [r7, #6]
 800dbf8:	1e5a      	subs	r2, r3, #1
 800dbfa:	80fa      	strh	r2, [r7, #6]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1ef      	bne.n	800dbe0 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800dc00:	89fb      	ldrh	r3, [r7, #14]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3714      	adds	r7, #20
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr

0800dc0e <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dc0e:	b480      	push	{r7}
 800dc10:	b085      	sub	sp, #20
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	4603      	mov	r3, r0
 800dc16:	603a      	str	r2, [r7, #0]
 800dc18:	80fb      	strh	r3, [r7, #6]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800dc26:	88fb      	ldrh	r3, [r7, #6]
 800dc28:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	81fb      	strh	r3, [r7, #14]
 800dc2e:	e00f      	b.n	800dc50 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800dc30:	88ba      	ldrh	r2, [r7, #4]
 800dc32:	89fb      	ldrh	r3, [r7, #14]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	3b01      	subs	r3, #1
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	89ba      	ldrh	r2, [r7, #12]
 800dc3e:	b2d2      	uxtb	r2, r2
 800dc40:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800dc42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc46:	121b      	asrs	r3, r3, #8
 800dc48:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800dc4a:	89fb      	ldrh	r3, [r7, #14]
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	81fb      	strh	r3, [r7, #14]
 800dc50:	89fa      	ldrh	r2, [r7, #14]
 800dc52:	88bb      	ldrh	r3, [r7, #4]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d3eb      	bcc.n	800dc30 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800dc58:	bf00      	nop
 800dc5a:	bf00      	nop
 800dc5c:	3714      	adds	r7, #20
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b085      	sub	sp, #20
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	6039      	str	r1, [r7, #0]
 800dc70:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800dc72:	2300      	movs	r3, #0
 800dc74:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	b25b      	sxtb	r3, r3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	da0e      	bge.n	800dc9e <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800dc80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc84:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800dc86:	e00a      	b.n	800dc9e <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800dc88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc8c:	021b      	lsls	r3, r3, #8
 800dc8e:	b21a      	sxth	r2, r3
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	1c59      	adds	r1, r3, #1
 800dc94:	6039      	str	r1, [r7, #0]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	b21b      	sxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800dc9e:	88fb      	ldrh	r3, [r7, #6]
 800dca0:	1e5a      	subs	r2, r3, #1
 800dca2:	80fa      	strh	r2, [r7, #6]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1ef      	bne.n	800dc88 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800dca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b087      	sub	sp, #28
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	607a      	str	r2, [r7, #4]
 800dcc4:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	82fb      	strh	r3, [r7, #22]
 800dcd6:	e00e      	b.n	800dcf6 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800dcd8:	897a      	ldrh	r2, [r7, #10]
 800dcda:	8afb      	ldrh	r3, [r7, #22]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	3b01      	subs	r3, #1
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	4413      	add	r3, r2
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	b2d2      	uxtb	r2, r2
 800dce8:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	0a1b      	lsrs	r3, r3, #8
 800dcee:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800dcf0:	8afb      	ldrh	r3, [r7, #22]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	82fb      	strh	r3, [r7, #22]
 800dcf6:	8afa      	ldrh	r2, [r7, #22]
 800dcf8:	897b      	ldrh	r3, [r7, #10]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d3ec      	bcc.n	800dcd8 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	371c      	adds	r7, #28
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	4603      	mov	r3, r0
 800dd14:	6039      	str	r1, [r7, #0]
 800dd16:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800dd1c:	e007      	b.n	800dd2e <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	021a      	lsls	r2, r3, #8
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	1c59      	adds	r1, r3, #1
 800dd26:	6039      	str	r1, [r7, #0]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	1e5a      	subs	r2, r3, #1
 800dd32:	80fa      	strh	r2, [r7, #6]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d1f2      	bne.n	800dd1e <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800dd38:	68fb      	ldr	r3, [r7, #12]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b085      	sub	sp, #20
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	6039      	str	r1, [r7, #0]
 800dd50:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800dd52:	2300      	movs	r3, #0
 800dd54:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	b25b      	sxtb	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	da0b      	bge.n	800dd78 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800dd60:	f04f 33ff 	mov.w	r3, #4294967295
 800dd64:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800dd66:	e007      	b.n	800dd78 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	021a      	lsls	r2, r3, #8
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	1c59      	adds	r1, r3, #1
 800dd70:	6039      	str	r1, [r7, #0]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800dd78:	88fb      	ldrh	r3, [r7, #6]
 800dd7a:	1e5a      	subs	r2, r3, #1
 800dd7c:	80fa      	strh	r2, [r7, #6]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1f2      	bne.n	800dd68 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800dd82:	68fb      	ldr	r3, [r7, #12]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800dda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d107      	bne.n	800ddb8 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800dda8:	78fb      	ldrb	r3, [r7, #3]
 800ddaa:	461a      	mov	r2, r3
 800ddac:	2127      	movs	r1, #39	; 0x27
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f009 f9ce 	bl	8017150 <VL53L1_WrByte>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ddb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3318      	adds	r3, #24
 800ddd8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	78fa      	ldrb	r2, [r7, #3]
 800ddde:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800dde8:	461a      	mov	r2, r3
 800ddea:	2185      	movs	r1, #133	; 0x85
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f009 f9af 	bl	8017150 <VL53L1_WrByte>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800ddf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800de0e:	2101      	movs	r1, #1
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ffd7 	bl	800ddc4 <VL53L1_set_firmware_enable_register>
 800de16:	4603      	mov	r3, r0
 800de18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800de1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800de2e:	2300      	movs	r3, #0
 800de30:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800de32:	2100      	movs	r1, #0
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7ff ffc5 	bl	800ddc4 <VL53L1_set_firmware_enable_register>
 800de3a:	4603      	mov	r3, r0
 800de3c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800de3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b084      	sub	sp, #16
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	460b      	mov	r3, r1
 800de54:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800de56:	2300      	movs	r3, #0
 800de58:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	3318      	adds	r3, #24
 800de5e:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	78fa      	ldrb	r2, [r7, #3]
 800de64:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800de6e:	461a      	mov	r2, r3
 800de70:	2183      	movs	r1, #131	; 0x83
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f009 f96c 	bl	8017150 <VL53L1_WrByte>
 800de78:	4603      	mov	r3, r0
 800de7a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800de7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800de90:	2300      	movs	r3, #0
 800de92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800de94:	2101      	movs	r1, #1
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff ffd7 	bl	800de4a <VL53L1_set_powerforce_register>
 800de9c:	4603      	mov	r3, r0
 800de9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800deb4:	2300      	movs	r3, #0
 800deb6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800deb8:	2100      	movs	r1, #0
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff ffc5 	bl	800de4a <VL53L1_set_powerforce_register>
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800ded8:	2300      	movs	r3, #0
 800deda:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3318      	adds	r3, #24
 800dee0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800def0:	461a      	mov	r2, r3
 800def2:	2186      	movs	r1, #134	; 0x86
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f009 f92b 	bl	8017150 <VL53L1_WrByte>
 800defa:	4603      	mov	r3, r0
 800defc:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800defe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b086      	sub	sp, #24
 800df0e:	af00      	add	r7, sp, #0
 800df10:	4603      	mov	r3, r0
 800df12:	460a      	mov	r2, r1
 800df14:	80fb      	strh	r3, [r7, #6]
 800df16:	4613      	mov	r3, r2
 800df18:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800df1a:	2300      	movs	r3, #0
 800df1c:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800df22:	2300      	movs	r3, #0
 800df24:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800df26:	88fb      	ldrh	r3, [r7, #6]
 800df28:	4618      	mov	r0, r3
 800df2a:	f002 ffeb 	bl	8010f04 <VL53L1_calc_pll_period_us>
 800df2e:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800df30:	797b      	ldrb	r3, [r7, #5]
 800df32:	4618      	mov	r0, r3
 800df34:	f003 fbd6 	bl	80116e4 <VL53L1_decode_vcsel_period>
 800df38:	4603      	mov	r3, r0
 800df3a:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	4613      	mov	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	4413      	add	r3, r2
 800df44:	021b      	lsls	r3, r3, #8
 800df46:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	099b      	lsrs	r3, r3, #6
 800df4c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800df4e:	7cfa      	ldrb	r2, [r7, #19]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	fb02 f303 	mul.w	r3, r2, r3
 800df56:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	099b      	lsrs	r3, r3, #6
 800df5c:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800df5e:	68fb      	ldr	r3, [r7, #12]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800df68:	b480      	push	{r7}
 800df6a:	b089      	sub	sp, #36	; 0x24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	4608      	mov	r0, r1
 800df72:	4611      	mov	r1, r2
 800df74:	461a      	mov	r2, r3
 800df76:	4603      	mov	r3, r0
 800df78:	817b      	strh	r3, [r7, #10]
 800df7a:	460b      	mov	r3, r1
 800df7c:	813b      	strh	r3, [r7, #8]
 800df7e:	4613      	mov	r3, r2
 800df80:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800df86:	2300      	movs	r3, #0
 800df88:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800df92:	2300      	movs	r3, #0
 800df94:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	011b      	lsls	r3, r3, #4
 800df9a:	4a23      	ldr	r2, [pc, #140]	; (800e028 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800df9c:	fb82 1203 	smull	r1, r2, r2, r3
 800dfa0:	1192      	asrs	r2, r2, #6
 800dfa2:	17db      	asrs	r3, r3, #31
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800dfa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	da03      	bge.n	800dfb8 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800dfb0:	897b      	ldrh	r3, [r7, #10]
 800dfb2:	425b      	negs	r3, r3
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800dfb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	da03      	bge.n	800dfc8 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800dfc0:	893b      	ldrh	r3, [r7, #8]
 800dfc2:	425b      	negs	r3, r3
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800dfc8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800dfcc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	015b      	lsls	r3, r3, #5
 800dfd4:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	4a13      	ldr	r2, [pc, #76]	; (800e028 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800dfda:	fb82 1203 	smull	r1, r2, r2, r3
 800dfde:	1192      	asrs	r2, r2, #6
 800dfe0:	17db      	asrs	r3, r3, #31
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	4413      	add	r3, r2
 800dfec:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800dfee:	79fa      	ldrb	r2, [r7, #7]
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	fb02 f303 	mul.w	r3, r2, r3
 800dff6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	3310      	adds	r3, #16
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	da00      	bge.n	800e002 <VL53L1_calc_range_ignore_threshold+0x9a>
 800e000:	331f      	adds	r3, #31
 800e002:	115b      	asrs	r3, r3, #5
 800e004:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e00c:	db03      	blt.n	800e016 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800e00e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e012:	83fb      	strh	r3, [r7, #30]
 800e014:	e001      	b.n	800e01a <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800e01a:	8bfb      	ldrh	r3, [r7, #30]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3724      	adds	r7, #36	; 0x24
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	10624dd3 	.word	0x10624dd3

0800e02c <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d102      	bne.n	800e046 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800e040:	2300      	movs	r3, #0
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	e008      	b.n	800e058 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	031a      	lsls	r2, r3, #12
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	085b      	lsrs	r3, r3, #1
 800e04e:	441a      	add	r2, r3
		timeout_mclks =
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	fbb2 f3f3 	udiv	r3, r2, r3
 800e056:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e058:	68fb      	ldr	r3, [r7, #12]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3714      	adds	r7, #20
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr

0800e066 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7ff ffd6 	bl	800e02c <VL53L1_calc_timeout_mclks>
 800e080:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f000 f887 	bl	800e196 <VL53L1_encode_timeout>
 800e088:	4603      	mov	r3, r0
 800e08a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e08c:	897b      	ldrh	r3, [r7, #10]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e096:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e09a:	b087      	sub	sp, #28
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800e0a6:	f04f 0000 	mov.w	r0, #0
 800e0aa:	f04f 0100 	mov.w	r1, #0
 800e0ae:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e0b2:	6879      	ldr	r1, [r7, #4]
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	4688      	mov	r8, r1
 800e0b8:	4681      	mov	r9, r0
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	2000      	movs	r0, #0
 800e0be:	460c      	mov	r4, r1
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	fb04 f009 	mul.w	r0, r4, r9
 800e0c6:	fb08 f105 	mul.w	r1, r8, r5
 800e0ca:	4401      	add	r1, r0
 800e0cc:	fba8 2304 	umull	r2, r3, r8, r4
 800e0d0:	4419      	add	r1, r3
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800e0d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800e0dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0e0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800e0e4:	f143 0b00 	adc.w	fp, r3, #0
 800e0e8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800e0ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0f0:	f04f 0200 	mov.w	r2, #0
 800e0f4:	f04f 0300 	mov.w	r3, #0
 800e0f8:	0b02      	lsrs	r2, r0, #12
 800e0fa:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e0fe:	0b0b      	lsrs	r3, r1, #12
 800e100:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800e108:	697b      	ldr	r3, [r7, #20]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	371c      	adds	r7, #28
 800e10e:	46bd      	mov	sp, r7
 800e110:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e114:	4770      	bx	lr
	...

0800e118 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800e124:	2300      	movs	r3, #0
 800e126:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800e12c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800e130:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800e132:	4413      	add	r3, r2
 800e134:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	da02      	bge.n	800e142 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e005      	b.n	800e14e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e148:	db01      	blt.n	800e14e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800e14a:	4b05      	ldr	r3, [pc, #20]	; (800e160 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800e14c:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800e152:	68bb      	ldr	r3, [r7, #8]

}
 800e154:	4618      	mov	r0, r3
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	0003ffff 	.word	0x0003ffff

0800e164 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	4603      	mov	r3, r0
 800e16c:	6039      	str	r1, [r7, #0]
 800e16e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e178:	88fb      	ldrh	r3, [r7, #6]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f000 f837 	bl	800e1ee <VL53L1_decode_timeout>
 800e180:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e182:	6839      	ldr	r1, [r7, #0]
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff ff86 	bl	800e096 <VL53L1_calc_timeout_us>
 800e18a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e18c:	68bb      	ldr	r3, [r7, #8]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e196:	b480      	push	{r7}
 800e198:	b087      	sub	sp, #28
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d017      	beq.n	800e1e0 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e1b6:	e005      	b.n	800e1c4 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	085b      	lsrs	r3, r3, #1
 800e1bc:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e1be:	89fb      	ldrh	r3, [r7, #14]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1f4      	bne.n	800e1b8 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e1ce:	89fb      	ldrh	r3, [r7, #14]
 800e1d0:	021b      	lsls	r3, r3, #8
 800e1d2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e1dc:	4413      	add	r3, r2
 800e1de:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e1e0:	8afb      	ldrh	r3, [r7, #22]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	371c      	adds	r7, #28
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr

0800e1ee <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e1ee:	b480      	push	{r7}
 800e1f0:	b085      	sub	sp, #20
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e1fc:	88fb      	ldrh	r3, [r7, #6]
 800e1fe:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e200:	88fa      	ldrh	r2, [r7, #6]
 800e202:	0a12      	lsrs	r2, r2, #8
 800e204:	b292      	uxth	r2, r2
 800e206:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e208:	3301      	adds	r3, #1
 800e20a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e20c:	68fb      	ldr	r3, [r7, #12]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr

0800e21a <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b088      	sub	sp, #32
 800e21e:	af00      	add	r7, sp, #0
 800e220:	60f8      	str	r0, [r7, #12]
 800e222:	60b9      	str	r1, [r7, #8]
 800e224:	607a      	str	r2, [r7, #4]
 800e226:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e228:	2300      	movs	r3, #0
 800e22a:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e230:	2300      	movs	r3, #0
 800e232:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e238:	887b      	ldrh	r3, [r7, #2]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e23e:	23f1      	movs	r3, #241	; 0xf1
 800e240:	77fb      	strb	r3, [r7, #31]
 800e242:	e05d      	b.n	800e300 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e246:	799a      	ldrb	r2, [r3, #6]
 800e248:	887b      	ldrh	r3, [r7, #2]
 800e24a:	4611      	mov	r1, r2
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff fe5c 	bl	800df0a <VL53L1_calc_macro_period_us>
 800e252:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e254:	6979      	ldr	r1, [r7, #20]
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f7ff fee8 	bl	800e02c <VL53L1_calc_timeout_mclks>
 800e25c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	2bff      	cmp	r3, #255	; 0xff
 800e262:	d901      	bls.n	800e268 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e264:	23ff      	movs	r3, #255	; 0xff
 800e266:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e270:	6979      	ldr	r1, [r7, #20]
 800e272:	68b8      	ldr	r0, [r7, #8]
 800e274:	f7ff fef7 	bl	800e066 <VL53L1_calc_encoded_timeout>
 800e278:	4603      	mov	r3, r0
 800e27a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e27c:	8a7b      	ldrh	r3, [r7, #18]
 800e27e:	0a1b      	lsrs	r3, r3, #8
 800e280:	b29b      	uxth	r3, r3
 800e282:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e288:	8a7b      	ldrh	r3, [r7, #18]
 800e28a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e290:	6979      	ldr	r1, [r7, #20]
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff fee7 	bl	800e066 <VL53L1_calc_encoded_timeout>
 800e298:	4603      	mov	r3, r0
 800e29a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e29c:	8a7b      	ldrh	r3, [r7, #18]
 800e29e:	0a1b      	lsrs	r3, r3, #8
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e2a8:	8a7b      	ldrh	r3, [r7, #18]
 800e2aa:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b2:	7a5a      	ldrb	r2, [r3, #9]
 800e2b4:	887b      	ldrh	r3, [r7, #2]
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff fe26 	bl	800df0a <VL53L1_calc_macro_period_us>
 800e2be:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e2c0:	6979      	ldr	r1, [r7, #20]
 800e2c2:	68b8      	ldr	r0, [r7, #8]
 800e2c4:	f7ff fecf 	bl	800e066 <VL53L1_calc_encoded_timeout>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e2cc:	8a7b      	ldrh	r3, [r7, #18]
 800e2ce:	0a1b      	lsrs	r3, r3, #8
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e2d8:	8a7b      	ldrh	r3, [r7, #18]
 800e2da:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e2e0:	6979      	ldr	r1, [r7, #20]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff febf 	bl	800e066 <VL53L1_calc_encoded_timeout>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e2ec:	8a7b      	ldrh	r3, [r7, #18]
 800e2ee:	0a1b      	lsrs	r3, r3, #8
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e2f8:	8a7b      	ldrh	r3, [r7, #18]
 800e2fa:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e300:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e304:	4618      	mov	r0, r3
 800e306:	3720      	adds	r7, #32
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800e30c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e310:	b09e      	sub	sp, #120	; 0x78
 800e312:	af00      	add	r7, sp, #0
 800e314:	6578      	str	r0, [r7, #84]	; 0x54
 800e316:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e318:	2300      	movs	r3, #0
 800e31a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800e31e:	f04f 0200 	mov.w	r2, #0
 800e322:	f04f 0300 	mov.w	r3, #0
 800e326:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800e32a:	f04f 0200 	mov.w	r2, #0
 800e32e:	f04f 0300 	mov.w	r3, #0
 800e332:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800e336:	f04f 0200 	mov.w	r2, #0
 800e33a:	f04f 0300 	mov.w	r3, #0
 800e33e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800e342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e344:	885b      	ldrh	r3, [r3, #2]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d103      	bne.n	800e352 <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e34a:	23f1      	movs	r3, #241	; 0xf1
 800e34c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e350:	e0d6      	b.n	800e500 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800e352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e354:	785b      	ldrb	r3, [r3, #1]
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 80d2 	beq.w	800e500 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800e35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e35e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800e360:	2b00      	cmp	r3, #0
 800e362:	f040 80cd 	bne.w	800e500 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800e366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e36c:	2200      	movs	r2, #0
 800e36e:	643b      	str	r3, [r7, #64]	; 0x40
 800e370:	647a      	str	r2, [r7, #68]	; 0x44
 800e372:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e376:	460b      	mov	r3, r1
 800e378:	3301      	adds	r3, #1
 800e37a:	623b      	str	r3, [r7, #32]
 800e37c:	4613      	mov	r3, r2
 800e37e:	f143 0300 	adc.w	r3, r3, #0
 800e382:	627b      	str	r3, [r7, #36]	; 0x24
 800e384:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e388:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800e38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e38e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e392:	b29b      	uxth	r3, r3
 800e394:	2200      	movs	r2, #0
 800e396:	64bb      	str	r3, [r7, #72]	; 0x48
 800e398:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800e39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e39c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	fb02 f203 	mul.w	r2, r2, r3
 800e3a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3a8:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800e3ac:	fb01 f303 	mul.w	r3, r1, r3
 800e3b0:	441a      	add	r2, r3
 800e3b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e3b6:	fba3 4501 	umull	r4, r5, r3, r1
 800e3ba:	1953      	adds	r3, r2, r5
 800e3bc:	461d      	mov	r5, r3
 800e3be:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800e3c2:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800e3c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e3d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	61bb      	str	r3, [r7, #24]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	f143 0300 	adc.w	r3, r3, #0
 800e3e0:	61fb      	str	r3, [r7, #28]
 800e3e2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e3e6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800e3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3ec:	885b      	ldrh	r3, [r3, #2]
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	633b      	str	r3, [r7, #48]	; 0x30
 800e3f4:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800e3f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	fb02 f203 	mul.w	r2, r2, r3
 800e402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e404:	4629      	mov	r1, r5
 800e406:	fb01 f303 	mul.w	r3, r1, r3
 800e40a:	441a      	add	r2, r3
 800e40c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e40e:	4621      	mov	r1, r4
 800e410:	fba3 ab01 	umull	sl, fp, r3, r1
 800e414:	eb02 030b 	add.w	r3, r2, fp
 800e418:	469b      	mov	fp, r3
 800e41a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800e41e:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800e422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	17da      	asrs	r2, r3, #31
 800e428:	62bb      	str	r3, [r7, #40]	; 0x28
 800e42a:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800e42c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e42e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e432:	4622      	mov	r2, r4
 800e434:	fb02 f203 	mul.w	r2, r2, r3
 800e438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e43a:	4629      	mov	r1, r5
 800e43c:	fb01 f303 	mul.w	r3, r1, r3
 800e440:	4413      	add	r3, r2
 800e442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e444:	4621      	mov	r1, r4
 800e446:	fba2 8901 	umull	r8, r9, r2, r1
 800e44a:	444b      	add	r3, r9
 800e44c:	4699      	mov	r9, r3
 800e44e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800e452:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800e456:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e45a:	0fd9      	lsrs	r1, r3, #31
 800e45c:	2000      	movs	r0, #0
 800e45e:	6139      	str	r1, [r7, #16]
 800e460:	6178      	str	r0, [r7, #20]
 800e462:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e466:	4621      	mov	r1, r4
 800e468:	1889      	adds	r1, r1, r2
 800e46a:	60b9      	str	r1, [r7, #8]
 800e46c:	4629      	mov	r1, r5
 800e46e:	eb43 0101 	adc.w	r1, r3, r1
 800e472:	60f9      	str	r1, [r7, #12]
 800e474:	f04f 0200 	mov.w	r2, #0
 800e478:	f04f 0300 	mov.w	r3, #0
 800e47c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e480:	4621      	mov	r1, r4
 800e482:	084a      	lsrs	r2, r1, #1
 800e484:	4629      	mov	r1, r5
 800e486:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e48a:	4629      	mov	r1, r5
 800e48c:	104b      	asrs	r3, r1, #1
 800e48e:	4610      	mov	r0, r2
 800e490:	4619      	mov	r1, r3
 800e492:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e496:	1814      	adds	r4, r2, r0
 800e498:	603c      	str	r4, [r7, #0]
 800e49a:	414b      	adcs	r3, r1
 800e49c:	607b      	str	r3, [r7, #4]
 800e49e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e4a2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800e4a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	d009      	beq.n	800e4c2 <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800e4ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e4b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e4b6:	f7f2 fb4f 	bl	8000b58 <__aeabi_ldivmod>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	460b      	mov	r3, r1
 800e4be:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800e4c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800e4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800e4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800e4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800e4dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4de:	7852      	ldrb	r2, [r2, #1]
 800e4e0:	0852      	lsrs	r2, r2, #1
 800e4e2:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800e4e4:	441a      	add	r2, r3
 800e4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800e4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800e4f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4f4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800e4f6:	fb93 f2f2 	sdiv	r2, r3, r2
 800e4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800e500:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e504:	4618      	mov	r0, r3
 800e506:	3778      	adds	r7, #120	; 0x78
 800e508:	46bd      	mov	sp, r7
 800e50a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e50e <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e50e:	b480      	push	{r7}
 800e510:	b087      	sub	sp, #28
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
 800e516:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3318      	adds	r3, #24
 800e51c:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800e526:	2300      	movs	r3, #0
 800e528:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800e530:	029b      	lsls	r3, r3, #10
 800e532:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800e53a:	029b      	lsls	r3, r3, #10
 800e53c:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f040 8095 	bne.w	800e678 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800e554:	091b      	lsrs	r3, r3, #4
 800e556:	b2da      	uxtb	r2, r3
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800e562:	f003 030f 	and.w	r3, r3, #15
 800e566:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800e572:	091b      	lsrs	r3, r3, #4
 800e574:	b2da      	uxtb	r2, r3
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800e580:	f003 030f 	and.w	r3, r3, #15
 800e584:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800e590:	091b      	lsrs	r3, r3, #4
 800e592:	b2da      	uxtb	r2, r3
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800e59e:	f003 030f 	and.w	r3, r3, #15
 800e5a2:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	da2c      	bge.n	800e60e <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800e5ba:	091b      	lsrs	r3, r3, #4
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800e5c8:	f003 030f 	and.w	r3, r3, #15
 800e5cc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800e5d8:	091b      	lsrs	r3, r3, #4
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800e5e6:	f003 030f 	and.w	r3, r3, #15
 800e5ea:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800e5f6:	091b      	lsrs	r3, r3, #4
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	429a      	cmp	r2, r3
 800e618:	f340 80c2 	ble.w	800e7a0 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800e622:	091b      	lsrs	r3, r3, #4
 800e624:	b2da      	uxtb	r2, r3
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800e630:	f003 030f 	and.w	r3, r3, #15
 800e634:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800e640:	091b      	lsrs	r3, r3, #4
 800e642:	b2da      	uxtb	r2, r3
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800e64e:	f003 030f 	and.w	r3, r3, #15
 800e652:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800e65e:	091b      	lsrs	r3, r3, #4
 800e660:	b2da      	uxtb	r2, r3
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800e66c:	f003 030f 	and.w	r3, r3, #15
 800e670:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	731a      	strb	r2, [r3, #12]
 800e676:	e093      	b.n	800e7a0 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800e67e:	f003 030f 	and.w	r3, r3, #15
 800e682:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800e68e:	f003 030f 	and.w	r3, r3, #15
 800e692:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800e69e:	091b      	lsrs	r3, r3, #4
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800e6ac:	f003 030f 	and.w	r3, r3, #15
 800e6b0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800e6bc:	091b      	lsrs	r3, r3, #4
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800e6ca:	f003 030f 	and.w	r3, r3, #15
 800e6ce:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	da2c      	bge.n	800e73a <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800e6e6:	091b      	lsrs	r3, r3, #4
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800e6f4:	f003 030f 	and.w	r3, r3, #15
 800e6f8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800e704:	091b      	lsrs	r3, r3, #4
 800e706:	b2da      	uxtb	r2, r3
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800e712:	f003 030f 	and.w	r3, r3, #15
 800e716:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800e722:	091b      	lsrs	r3, r3, #4
 800e724:	b2da      	uxtb	r2, r3
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800e730:	f003 030f 	and.w	r3, r3, #15
 800e734:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	429a      	cmp	r2, r3
 800e744:	dd2c      	ble.n	800e7a0 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800e74c:	091b      	lsrs	r3, r3, #4
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800e75a:	f003 030f 	and.w	r3, r3, #15
 800e75e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800e76a:	091b      	lsrs	r3, r3, #4
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800e778:	f003 030f 	and.w	r3, r3, #15
 800e77c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800e788:	091b      	lsrs	r3, r3, #4
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800e796:	f003 030f 	and.w	r3, r3, #15
 800e79a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	75fb      	strb	r3, [r7, #23]
 800e7a4:	e007      	b.n	800e7b6 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800e7a6:	7dfb      	ldrb	r3, [r7, #23]
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e7b0:	7dfb      	ldrb	r3, [r7, #23]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	75fb      	strb	r3, [r7, #23]
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
 800e7b8:	2b05      	cmp	r3, #5
 800e7ba:	d9f4      	bls.n	800e7a6 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800e7bc:	bf00      	nop
 800e7be:	bf00      	nop
 800e7c0:	371c      	adds	r7, #28
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800e7ca:	b590      	push	{r4, r7, lr}
 800e7cc:	b093      	sub	sp, #76	; 0x4c
 800e7ce:	af04      	add	r7, sp, #16
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	607a      	str	r2, [r7, #4]
 800e7d6:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	3318      	adds	r3, #24
 800e7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800e800:	2300      	movs	r3, #0
 800e802:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800e80a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800e814:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800e81c:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800e81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e820:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800e824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800e828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e82c:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800e82e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e830:	021b      	lsls	r3, r3, #8
 800e832:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	785b      	ldrb	r3, [r3, #1]
 800e838:	2b07      	cmp	r3, #7
 800e83a:	d006      	beq.n	800e84a <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800e840:	2b08      	cmp	r3, #8
 800e842:	d002      	beq.n	800e84a <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800e844:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e848:	e0ec      	b.n	800ea24 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800e84a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d102      	bne.n	800e856 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800e850:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e854:	e0e6      	b.n	800ea24 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800e856:	2300      	movs	r3, #0
 800e858:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e85c:	e0d9      	b.n	800ea12 <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800e85e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	214c      	movs	r1, #76	; 0x4c
 800e866:	fb01 f303 	mul.w	r3, r1, r3
 800e86a:	4413      	add	r3, r2
 800e86c:	335e      	adds	r3, #94	; 0x5e
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b09      	cmp	r3, #9
 800e872:	d00b      	beq.n	800e88c <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800e874:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e878:	683a      	ldr	r2, [r7, #0]
 800e87a:	214c      	movs	r1, #76	; 0x4c
 800e87c:	fb01 f303 	mul.w	r3, r1, r3
 800e880:	4413      	add	r3, r2
 800e882:	335e      	adds	r3, #94	; 0x5e
 800e884:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800e886:	2b13      	cmp	r3, #19
 800e888:	f040 80bd 	bne.w	800ea06 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	795b      	ldrb	r3, [r3, #5]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10a      	bne.n	800e8aa <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800e894:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	214c      	movs	r1, #76	; 0x4c
 800e89c:	fb01 f303 	mul.w	r3, r1, r3
 800e8a0:	4413      	add	r3, r2
 800e8a2:	335e      	adds	r3, #94	; 0x5e
 800e8a4:	2217      	movs	r2, #23
 800e8a6:	701a      	strb	r2, [r3, #0]
 800e8a8:	e009      	b.n	800e8be <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800e8aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8ae:	683a      	ldr	r2, [r7, #0]
 800e8b0:	214c      	movs	r1, #76	; 0x4c
 800e8b2:	fb01 f303 	mul.w	r3, r1, r3
 800e8b6:	4413      	add	r3, r2
 800e8b8:	335e      	adds	r3, #94	; 0x5e
 800e8ba:	2207      	movs	r2, #7
 800e8bc:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800e8be:	2300      	movs	r3, #0
 800e8c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e8c4:	e097      	b.n	800e9f6 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800e8c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	214c      	movs	r1, #76	; 0x4c
 800e8ce:	fb01 f303 	mul.w	r3, r1, r3
 800e8d2:	4413      	add	r3, r2
 800e8d4:	3354      	adds	r3, #84	; 0x54
 800e8d6:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800e8d8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	4413      	add	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4403      	add	r3, r0
 800e8e8:	3310      	adds	r3, #16
 800e8ea:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800e8ec:	4299      	cmp	r1, r3
 800e8ee:	d915      	bls.n	800e91c <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800e8f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	214c      	movs	r1, #76	; 0x4c
 800e8f8:	fb01 f303 	mul.w	r3, r1, r3
 800e8fc:	4413      	add	r3, r2
 800e8fe:	3354      	adds	r3, #84	; 0x54
 800e900:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800e902:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	4613      	mov	r3, r2
 800e90a:	005b      	lsls	r3, r3, #1
 800e90c:	4413      	add	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4403      	add	r3, r0
 800e912:	3310      	adds	r3, #16
 800e914:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e916:	1acb      	subs	r3, r1, r3
 800e918:	867b      	strh	r3, [r7, #50]	; 0x32
 800e91a:	e014      	b.n	800e946 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800e91c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e920:	6879      	ldr	r1, [r7, #4]
 800e922:	4613      	mov	r3, r2
 800e924:	005b      	lsls	r3, r3, #1
 800e926:	4413      	add	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	440b      	add	r3, r1
 800e92c:	3310      	adds	r3, #16
 800e92e:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800e930:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	204c      	movs	r0, #76	; 0x4c
 800e938:	fb00 f303 	mul.w	r3, r0, r3
 800e93c:	440b      	add	r3, r1
 800e93e:	3354      	adds	r3, #84	; 0x54
 800e940:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800e946:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e948:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d24e      	bcs.n	800e9ec <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800e94e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e952:	2b00      	cmp	r3, #0
 800e954:	d125      	bne.n	800e9a2 <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800e956:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800e95a:	4613      	mov	r3, r2
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	4413      	add	r3, r2
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	3308      	adds	r3, #8
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800e968:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800e96c:	224c      	movs	r2, #76	; 0x4c
 800e96e:	fb02 f303 	mul.w	r3, r2, r3
 800e972:	3310      	adds	r3, #16
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	4413      	add	r3, r2
 800e978:	3304      	adds	r3, #4
 800e97a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e97c:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800e980:	f107 0217 	add.w	r2, r7, #23
 800e984:	9203      	str	r2, [sp, #12]
 800e986:	f107 021c 	add.w	r2, r7, #28
 800e98a:	9202      	str	r2, [sp, #8]
 800e98c:	f107 0218 	add.w	r2, r7, #24
 800e990:	9201      	str	r2, [sp, #4]
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	4623      	mov	r3, r4
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	f000 f848 	bl	800ea2c <VL53L1_hist_events_consistency_check>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800e9a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d115      	bne.n	800e9d6 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800e9aa:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800e9ac:	2b09      	cmp	r3, #9
 800e9ae:	d112      	bne.n	800e9d6 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800e9b0:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800e9b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800e9b8:	224c      	movs	r2, #76	; 0x4c
 800e9ba:	fb02 f303 	mul.w	r3, r2, r3
 800e9be:	3310      	adds	r3, #16
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	f107 0217 	add.w	r2, r7, #23
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	f000 fb44 	bl	800f058 <VL53L1_hist_merged_pulse_check>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800e9d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e9da:	7df8      	ldrb	r0, [r7, #23]
 800e9dc:	683a      	ldr	r2, [r7, #0]
 800e9de:	214c      	movs	r1, #76	; 0x4c
 800e9e0:	fb01 f303 	mul.w	r3, r1, r3
 800e9e4:	4413      	add	r3, r2
 800e9e6:	335e      	adds	r3, #94	; 0x5e
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800e9ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	795b      	ldrb	r3, [r3, #5]
 800e9fa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	f4ff af61 	bcc.w	800e8c6 <VL53L1_hist_phase_consistency_check+0xfc>
 800ea04:	e000      	b.n	800ea08 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800ea06:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800ea08:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	7c9b      	ldrb	r3, [r3, #18]
 800ea16:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	f4ff af1f 	bcc.w	800e85e <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ea20:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	373c      	adds	r7, #60	; 0x3c
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd90      	pop	{r4, r7, pc}

0800ea2c <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800ea2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea30:	b0d4      	sub	sp, #336	; 0x150
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800ea38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800ea42:	460b      	mov	r3, r1
 800ea44:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800ea4e:	f04f 0200 	mov.w	r2, #0
 800ea52:	f04f 0300 	mov.w	r3, #0
 800ea56:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800ea5a:	f04f 0200 	mov.w	r2, #0
 800ea5e:	f04f 0300 	mov.w	r3, #0
 800ea62:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800ea66:	f04f 0200 	mov.w	r2, #0
 800ea6a:	f04f 0300 	mov.w	r3, #0
 800ea6e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800ea72:	f04f 0200 	mov.w	r2, #0
 800ea76:	f04f 0300 	mov.w	r3, #0
 800ea7a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800ea7e:	f04f 0200 	mov.w	r2, #0
 800ea82:	f04f 0300 	mov.w	r3, #0
 800ea86:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800ea8a:	f04f 0200 	mov.w	r2, #0
 800ea8e:	f04f 0300 	mov.w	r3, #0
 800ea92:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800ea96:	f04f 0200 	mov.w	r2, #0
 800ea9a:	f04f 0300 	mov.w	r3, #0
 800ea9e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800eaa2:	f04f 0200 	mov.w	r2, #0
 800eaa6:	f04f 0300 	mov.w	r3, #0
 800eaaa:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800eaba:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800eac2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800eac6:	2209      	movs	r2, #9
 800eac8:	701a      	strb	r2, [r3, #0]
		return status;
 800eaca:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800eace:	e2bd      	b.n	800f04c <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800ead0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eadc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800eae0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800eae4:	460b      	mov	r3, r1
 800eae6:	3301      	adds	r3, #1
 800eae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eaec:	4613      	mov	r3, r2
 800eaee:	f143 0300 	adc.w	r3, r3, #0
 800eaf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eaf6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800eafa:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800eafe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eb02:	885b      	ldrh	r3, [r3, #2]
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	2200      	movs	r2, #0
 800eb08:	469a      	mov	sl, r3
 800eb0a:	4693      	mov	fp, r2
 800eb0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800eb10:	fb0a f203 	mul.w	r2, sl, r3
 800eb14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800eb18:	fb0b f303 	mul.w	r3, fp, r3
 800eb1c:	441a      	add	r2, r3
 800eb1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800eb22:	fba3 450a 	umull	r4, r5, r3, sl
 800eb26:	1953      	adds	r3, r2, r5
 800eb28:	461d      	mov	r5, r3
 800eb2a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800eb2e:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800eb32:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eb3e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800eb42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800eb46:	460b      	mov	r3, r1
 800eb48:	3301      	adds	r3, #1
 800eb4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800eb4e:	4613      	mov	r3, r2
 800eb50:	f143 0300 	adc.w	r3, r3, #0
 800eb54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800eb58:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800eb5c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800eb60:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eb64:	8adb      	ldrh	r3, [r3, #22]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800eb6e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800eb72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb76:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	fb02 f203 	mul.w	r2, r2, r3
 800eb80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eb84:	4629      	mov	r1, r5
 800eb86:	fb01 f303 	mul.w	r3, r1, r3
 800eb8a:	441a      	add	r2, r3
 800eb8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eb90:	4621      	mov	r1, r4
 800eb92:	fba3 8901 	umull	r8, r9, r3, r1
 800eb96:	eb02 0309 	add.w	r3, r2, r9
 800eb9a:	4699      	mov	r9, r3
 800eb9c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800eba0:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800eba4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800eba8:	f04f 0000 	mov.w	r0, #0
 800ebac:	f04f 0100 	mov.w	r1, #0
 800ebb0:	0319      	lsls	r1, r3, #12
 800ebb2:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ebb6:	0310      	lsls	r0, r2, #12
 800ebb8:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800ebbc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800ebc0:	0fd9      	lsrs	r1, r3, #31
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800ebc8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800ebcc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	1889      	adds	r1, r1, r2
 800ebd4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ebd8:	4629      	mov	r1, r5
 800ebda:	eb43 0101 	adc.w	r1, r3, r1
 800ebde:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800ebe2:	f04f 0200 	mov.w	r2, #0
 800ebe6:	f04f 0300 	mov.w	r3, #0
 800ebea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800ebee:	4621      	mov	r1, r4
 800ebf0:	084a      	lsrs	r2, r1, #1
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	104b      	asrs	r3, r1, #1
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	4619      	mov	r1, r3
 800ec00:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ec04:	1814      	adds	r4, r2, r0
 800ec06:	67bc      	str	r4, [r7, #120]	; 0x78
 800ec08:	414b      	adcs	r3, r1
 800ec0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ec0c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800ec10:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800ec14:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	d009      	beq.n	800ec30 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800ec1c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800ec20:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800ec24:	f7f1 ff98 	bl	8000b58 <__aeabi_ldivmod>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800ec30:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ec34:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec38:	fb03 f102 	mul.w	r1, r3, r2
 800ec3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ec40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec44:	fb02 f303 	mul.w	r3, r2, r3
 800ec48:	18ca      	adds	r2, r1, r3
 800ec4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec4e:	fba3 1303 	umull	r1, r3, r3, r3
 800ec52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ec56:	460b      	mov	r3, r1
 800ec58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ec5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec60:	18d3      	adds	r3, r2, r3
 800ec62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ec66:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800ec6a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800ec6e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800ec72:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ec76:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ec7a:	6739      	str	r1, [r7, #112]	; 0x70
 800ec7c:	f143 0300 	adc.w	r3, r3, #0
 800ec80:	677b      	str	r3, [r7, #116]	; 0x74
 800ec82:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800ec86:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800ec8a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da08      	bge.n	800eca4 <VL53L1_hist_events_consistency_check+0x278>
 800ec92:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ec96:	1851      	adds	r1, r2, r1
 800ec98:	66b9      	str	r1, [r7, #104]	; 0x68
 800ec9a:	f143 0300 	adc.w	r3, r3, #0
 800ec9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eca0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800eca4:	f04f 0000 	mov.w	r0, #0
 800eca8:	f04f 0100 	mov.w	r1, #0
 800ecac:	0b10      	lsrs	r0, r2, #12
 800ecae:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ecb2:	1319      	asrs	r1, r3, #12
 800ecb4:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800ecb8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	663b      	str	r3, [r7, #96]	; 0x60
 800ecc2:	667a      	str	r2, [r7, #100]	; 0x64
 800ecc4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800ecc8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800eccc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ecd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ecd8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800ecdc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ece0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800ece4:	4621      	mov	r1, r4
 800ece6:	1a51      	subs	r1, r2, r1
 800ece8:	65b9      	str	r1, [r7, #88]	; 0x58
 800ecea:	4629      	mov	r1, r5
 800ecec:	eb63 0301 	sbc.w	r3, r3, r1
 800ecf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecf2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800ecf6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800ecfa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ecfe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed02:	fb03 f102 	mul.w	r1, r3, r2
 800ed06:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ed0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ed0e:	fb02 f303 	mul.w	r3, r2, r3
 800ed12:	4419      	add	r1, r3
 800ed14:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800ed18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ed20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed24:	4613      	mov	r3, r2
 800ed26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ed2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed2e:	18cb      	adds	r3, r1, r3
 800ed30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed34:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800ed38:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800ed3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800ed40:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ed44:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ed48:	6539      	str	r1, [r7, #80]	; 0x50
 800ed4a:	f143 0300 	adc.w	r3, r3, #0
 800ed4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ed50:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800ed54:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800ed58:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	da08      	bge.n	800ed72 <VL53L1_hist_events_consistency_check+0x346>
 800ed60:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ed64:	1851      	adds	r1, r2, r1
 800ed66:	64b9      	str	r1, [r7, #72]	; 0x48
 800ed68:	f143 0300 	adc.w	r3, r3, #0
 800ed6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ed72:	f04f 0000 	mov.w	r0, #0
 800ed76:	f04f 0100 	mov.w	r1, #0
 800ed7a:	0b10      	lsrs	r0, r2, #12
 800ed7c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ed80:	1319      	asrs	r1, r3, #12
 800ed82:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800ed86:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ed8a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800ed8e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ed92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed94:	2200      	movs	r2, #0
 800ed96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ed9a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ed9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800eda2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800eda6:	4622      	mov	r2, r4
 800eda8:	fb02 f203 	mul.w	r2, r2, r3
 800edac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800edb0:	4629      	mov	r1, r5
 800edb2:	fb01 f303 	mul.w	r3, r1, r3
 800edb6:	441a      	add	r2, r3
 800edb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800edbc:	4621      	mov	r1, r4
 800edbe:	fba3 1301 	umull	r1, r3, r3, r1
 800edc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800edc6:	460b      	mov	r3, r1
 800edc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800edcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edd0:	18d3      	adds	r3, r2, r3
 800edd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800edd6:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800edda:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800edde:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800ede2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ede6:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800edea:	6439      	str	r1, [r7, #64]	; 0x40
 800edec:	f143 0300 	adc.w	r3, r3, #0
 800edf0:	647b      	str	r3, [r7, #68]	; 0x44
 800edf2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800edf6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800edfa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da08      	bge.n	800ee14 <VL53L1_hist_events_consistency_check+0x3e8>
 800ee02:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ee06:	1851      	adds	r1, r2, r1
 800ee08:	63b9      	str	r1, [r7, #56]	; 0x38
 800ee0a:	f143 0300 	adc.w	r3, r3, #0
 800ee0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ee14:	f04f 0000 	mov.w	r0, #0
 800ee18:	f04f 0100 	mov.w	r1, #0
 800ee1c:	0b10      	lsrs	r0, r2, #12
 800ee1e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ee22:	1319      	asrs	r1, r3, #12
 800ee24:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800ee28:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ee2c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800ee30:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ee34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee36:	2200      	movs	r2, #0
 800ee38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ee3c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee44:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800ee48:	4622      	mov	r2, r4
 800ee4a:	fb02 f203 	mul.w	r2, r2, r3
 800ee4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ee52:	4629      	mov	r1, r5
 800ee54:	fb01 f303 	mul.w	r3, r1, r3
 800ee58:	441a      	add	r2, r3
 800ee5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ee5e:	4621      	mov	r1, r4
 800ee60:	fba3 1301 	umull	r1, r3, r3, r1
 800ee64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ee68:	460b      	mov	r3, r1
 800ee6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee72:	18d3      	adds	r3, r2, r3
 800ee74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ee78:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800ee7c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800ee80:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800ee84:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ee88:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ee8c:	6339      	str	r1, [r7, #48]	; 0x30
 800ee8e:	f143 0300 	adc.w	r3, r3, #0
 800ee92:	637b      	str	r3, [r7, #52]	; 0x34
 800ee94:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ee98:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800ee9c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800eea0:	4610      	mov	r0, r2
 800eea2:	4619      	mov	r1, r3
 800eea4:	2900      	cmp	r1, #0
 800eea6:	da08      	bge.n	800eeba <VL53L1_hist_events_consistency_check+0x48e>
 800eea8:	f640 73ff 	movw	r3, #4095	; 0xfff
 800eeac:	18c3      	adds	r3, r0, r3
 800eeae:	62bb      	str	r3, [r7, #40]	; 0x28
 800eeb0:	f141 0300 	adc.w	r3, r1, #0
 800eeb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eeb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800eeba:	f04f 0200 	mov.w	r2, #0
 800eebe:	f04f 0300 	mov.w	r3, #0
 800eec2:	0b02      	lsrs	r2, r0, #12
 800eec4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800eec8:	130b      	asrs	r3, r1, #12
 800eeca:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800eece:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800eed2:	1c91      	adds	r1, r2, #2
 800eed4:	6239      	str	r1, [r7, #32]
 800eed6:	f143 0300 	adc.w	r3, r3, #0
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
 800eedc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800eee0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800eee4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	da06      	bge.n	800eefa <VL53L1_hist_events_consistency_check+0x4ce>
 800eeec:	1cd1      	adds	r1, r2, #3
 800eeee:	61b9      	str	r1, [r7, #24]
 800eef0:	f143 0300 	adc.w	r3, r3, #0
 800eef4:	61fb      	str	r3, [r7, #28]
 800eef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eefa:	f04f 0000 	mov.w	r0, #0
 800eefe:	f04f 0100 	mov.w	r1, #0
 800ef02:	0890      	lsrs	r0, r2, #2
 800ef04:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ef08:	1099      	asrs	r1, r3, #2
 800ef0a:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800ef0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef12:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800ef14:	2200      	movs	r2, #0
 800ef16:	613b      	str	r3, [r7, #16]
 800ef18:	617a      	str	r2, [r7, #20]
 800ef1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ef1e:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800ef22:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800ef26:	1c91      	adds	r1, r2, #2
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	f143 0300 	adc.w	r3, r3, #0
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ef34:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800ef38:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	da06      	bge.n	800ef4e <VL53L1_hist_events_consistency_check+0x522>
 800ef40:	1cd1      	adds	r1, r2, #3
 800ef42:	6039      	str	r1, [r7, #0]
 800ef44:	f143 0300 	adc.w	r3, r3, #0
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef4e:	f04f 0000 	mov.w	r0, #0
 800ef52:	f04f 0100 	mov.w	r1, #0
 800ef56:	0890      	lsrs	r0, r2, #2
 800ef58:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ef5c:	1099      	asrs	r1, r3, #2
 800ef5e:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800ef62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef66:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800ef68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800ef6c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800ef6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800ef72:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800ef74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800ef78:	4413      	add	r3, r2
 800ef7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800ef7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ef82:	011b      	lsls	r3, r3, #4
 800ef84:	4618      	mov	r0, r3
 800ef86:	f002 f8c6 	bl	8011116 <VL53L1_isqrt>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	461a      	mov	r2, r3
	*pevents_tolerance =
 800ef8e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ef92:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800ef94:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800ef9e:	fb03 f202 	mul.w	r2, r3, r2
 800efa2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800efa6:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800efa8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f103 0220 	add.w	r2, r3, #32
 800efb2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800efb6:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800efb8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	da00      	bge.n	800efc4 <VL53L1_hist_events_consistency_check+0x598>
 800efc2:	333f      	adds	r3, #63	; 0x3f
 800efc4:	119b      	asrs	r3, r3, #6
 800efc6:	461a      	mov	r2, r3
 800efc8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800efcc:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800efce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800efd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	461a      	mov	r2, r3
 800efe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efe4:	1a9b      	subs	r3, r3, r2
 800efe6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800efea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800efee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800eff2:	429a      	cmp	r2, r3
 800eff4:	da08      	bge.n	800f008 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800eff6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800effa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800effe:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800f000:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	e007      	b.n	800f018 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800f008:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f00c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f010:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800f012:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800f016:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800f018:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	429a      	cmp	r2, r3
 800f026:	dd0b      	ble.n	800f040 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800f028:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f02c:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800f02e:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800f032:	429a      	cmp	r2, r3
 800f034:	d204      	bcs.n	800f040 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800f036:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800f03a:	2214      	movs	r2, #20
 800f03c:	701a      	strb	r2, [r3, #0]
 800f03e:	e003      	b.n	800f048 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800f040:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800f044:	2209      	movs	r2, #9
 800f046:	701a      	strb	r2, [r3, #0]





	return status;
 800f048:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800f052:	46bd      	mov	sp, r7
 800f054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f058 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800f058:	b480      	push	{r7}
 800f05a:	b087      	sub	sp, #28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	4603      	mov	r3, r0
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
 800f064:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800f066:	2300      	movs	r3, #0
 800f068:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f07a:	429a      	cmp	r2, r3
 800f07c:	dd0b      	ble.n	800f096 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f084:	b29a      	uxth	r2, r3
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	b29b      	uxth	r3, r3
		delta_mm =
 800f092:	82fb      	strh	r3, [r7, #22]
 800f094:	e00a      	b.n	800f0ac <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	b29b      	uxth	r3, r3
		delta_mm =
 800f0aa:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800f0ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	dd09      	ble.n	800f0c8 <VL53L1_hist_merged_pulse_check+0x70>
 800f0b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	dd03      	ble.n	800f0c8 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2216      	movs	r2, #22
 800f0c4:	701a      	strb	r2, [r3, #0]
 800f0c6:	e002      	b.n	800f0ce <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2209      	movs	r2, #9
 800f0cc:	701a      	strb	r2, [r3, #0]

	return status;
 800f0ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	371c      	adds	r7, #28
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b08e      	sub	sp, #56	; 0x38
 800f0e2:	af04      	add	r7, sp, #16
 800f0e4:	60f8      	str	r0, [r7, #12]
 800f0e6:	60b9      	str	r1, [r7, #8]
 800f0e8:	607a      	str	r2, [r7, #4]
 800f0ea:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	3318      	adds	r3, #24
 800f0f6:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800f106:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800f10e:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800f116:	2b09      	cmp	r3, #9
 800f118:	d009      	beq.n	800f12e <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800f120:	2b13      	cmp	r3, #19
 800f122:	d004      	beq.n	800f12e <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800f12a:	2b14      	cmp	r3, #20
 800f12c:	d129      	bne.n	800f182 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f134:	2b09      	cmp	r3, #9
 800f136:	d009      	beq.n	800f14c <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800f13e:	2b13      	cmp	r3, #19
 800f140:	d004      	beq.n	800f14c <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800f148:	2b14      	cmp	r3, #20
 800f14a:	d11a      	bne.n	800f182 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2209      	movs	r2, #9
 800f150:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800f15e:	8bb9      	ldrh	r1, [r7, #28]
 800f160:	7ff8      	ldrb	r0, [r7, #31]
 800f162:	9303      	str	r3, [sp, #12]
 800f164:	f107 0318 	add.w	r3, r7, #24
 800f168:	9302      	str	r3, [sp, #8]
 800f16a:	f107 0314 	add.w	r3, r7, #20
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	4613      	mov	r3, r2
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	f7ff fc58 	bl	800ea2c <VL53L1_hist_events_consistency_check>
 800f17c:	4603      	mov	r3, r0
 800f17e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800f182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f186:	4618      	mov	r0, r3
 800f188:	3728      	adds	r7, #40	; 0x28
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b088      	sub	sp, #32
 800f192:	af00      	add	r7, sp, #0
 800f194:	60f8      	str	r0, [r7, #12]
 800f196:	60b9      	str	r1, [r7, #8]
 800f198:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f19a:	2300      	movs	r3, #0
 800f19c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d019      	beq.n	800f1ee <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f002 f90f 	bl	80113e4 <VL53L1_calc_pll_period_mm>
 800f1c6:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800f1ce:	021b      	lsls	r3, r3, #8
 800f1d0:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	69ba      	ldr	r2, [r7, #24]
 800f1d6:	fb02 f303 	mul.w	r3, r2, r3
 800f1da:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f1e2:	0bdb      	lsrs	r3, r3, #15
 800f1e4:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	b21a      	sxth	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f1ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3720      	adds	r7, #32
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800f1fa:	b590      	push	{r4, r7, lr}
 800f1fc:	b08d      	sub	sp, #52	; 0x34
 800f1fe:	af04      	add	r7, sp, #16
 800f200:	4604      	mov	r4, r0
 800f202:	4608      	mov	r0, r1
 800f204:	4611      	mov	r1, r2
 800f206:	461a      	mov	r2, r3
 800f208:	4623      	mov	r3, r4
 800f20a:	80fb      	strh	r3, [r7, #6]
 800f20c:	4603      	mov	r3, r0
 800f20e:	80bb      	strh	r3, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
 800f214:	4613      	mov	r3, r2
 800f216:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800f218:	2300      	movs	r3, #0
 800f21a:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800f21c:	2300      	movs	r3, #0
 800f21e:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800f228:	2300      	movs	r3, #0
 800f22a:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800f230:	2300      	movs	r3, #0
 800f232:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800f238:	78b9      	ldrb	r1, [r7, #2]
 800f23a:	78f8      	ldrb	r0, [r7, #3]
 800f23c:	f107 030c 	add.w	r3, r7, #12
 800f240:	9303      	str	r3, [sp, #12]
 800f242:	f107 030e 	add.w	r3, r7, #14
 800f246:	9302      	str	r3, [sp, #8]
 800f248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	23ff      	movs	r3, #255	; 0xff
 800f254:	22c7      	movs	r2, #199	; 0xc7
 800f256:	f000 fa03 	bl	800f660 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800f25a:	89fb      	ldrh	r3, [r7, #14]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d050      	beq.n	800f302 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800f260:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800f262:	2b00      	cmp	r3, #0
 800f264:	d04d      	beq.n	800f302 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800f266:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800f26a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800f26e:	78b9      	ldrb	r1, [r7, #2]
 800f270:	78f8      	ldrb	r0, [r7, #3]
 800f272:	f107 0308 	add.w	r3, r7, #8
 800f276:	9303      	str	r3, [sp, #12]
 800f278:	f107 030a 	add.w	r3, r7, #10
 800f27c:	9302      	str	r3, [sp, #8]
 800f27e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f282:	9301      	str	r3, [sp, #4]
 800f284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	4623      	mov	r3, r4
 800f28a:	f000 f9e9 	bl	800f660 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800f292:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800f294:	897b      	ldrh	r3, [r7, #10]
 800f296:	461a      	mov	r2, r3
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	fb02 f303 	mul.w	r3, r2, r3
 800f29e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800f2a0:	89fb      	ldrh	r3, [r7, #14]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2aa:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ae:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800f2b0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800f2b2:	893b      	ldrh	r3, [r7, #8]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	fb02 f303 	mul.w	r3, r2, r3
 800f2bc:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800f2be:	89bb      	ldrh	r3, [r7, #12]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2c8:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800f2ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f2ce:	69ba      	ldr	r2, [r7, #24]
 800f2d0:	fb02 f303 	mul.w	r3, r2, r3
 800f2d4:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800f2d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f2da:	697a      	ldr	r2, [r7, #20]
 800f2dc:	fb02 f303 	mul.w	r3, r2, r3
 800f2e0:	69fa      	ldr	r2, [r7, #28]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800f2e6:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800f2e8:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800f2ea:	4413      	add	r3, r2
 800f2ec:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d008      	beq.n	800f306 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	009a      	lsls	r2, r3, #2
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	fb92 f3f3 	sdiv	r3, r2, r3
 800f2fe:	61fb      	str	r3, [r7, #28]
 800f300:	e002      	b.n	800f308 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800f302:	bf00      	nop
 800f304:	e000      	b.n	800f308 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800f306:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	b21a      	sxth	r2, r3
 800f30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f30e:	801a      	strh	r2, [r3, #0]

}
 800f310:	bf00      	nop
 800f312:	3724      	adds	r7, #36	; 0x24
 800f314:	46bd      	mov	sp, r7
 800f316:	bd90      	pop	{r4, r7, pc}

0800f318 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	60b9      	str	r1, [r7, #8]
 800f320:	607a      	str	r2, [r7, #4]
 800f322:	603b      	str	r3, [r7, #0]
 800f324:	4603      	mov	r3, r0
 800f326:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800f328:	7bfb      	ldrb	r3, [r7, #15]
 800f32a:	08db      	lsrs	r3, r3, #3
 800f32c:	b2da      	uxtb	r2, r3
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800f332:	7bfb      	ldrb	r3, [r7, #15]
 800f334:	f003 0307 	and.w	r3, r3, #7
 800f338:	b2da      	uxtb	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	2301      	movs	r3, #1
 800f346:	4093      	lsls	r3, r2
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	701a      	strb	r2, [r3, #0]

}
 800f34e:	bf00      	nop
 800f350:	3714      	adds	r7, #20
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr

0800f35a <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800f35a:	b480      	push	{r7}
 800f35c:	b083      	sub	sp, #12
 800f35e:	af00      	add	r7, sp, #0
 800f360:	4603      	mov	r3, r0
 800f362:	603a      	str	r2, [r7, #0]
 800f364:	71fb      	strb	r3, [r7, #7]
 800f366:	460b      	mov	r3, r1
 800f368:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	2b07      	cmp	r3, #7
 800f36e:	d90a      	bls.n	800f386 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800f370:	79bb      	ldrb	r3, [r7, #6]
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	b2da      	uxtb	r2, r3
 800f376:	79fb      	ldrb	r3, [r7, #7]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	3b71      	subs	r3, #113	; 0x71
 800f37e:	b2da      	uxtb	r2, r3
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800f384:	e00a      	b.n	800f39c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800f386:	79bb      	ldrb	r3, [r7, #6]
 800f388:	f1c3 030f 	rsb	r3, r3, #15
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	b2da      	uxtb	r2, r3
 800f392:	79fb      	ldrb	r3, [r7, #7]
 800f394:	4413      	add	r3, r2
 800f396:	b2da      	uxtb	r2, r3
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	701a      	strb	r2, [r3, #0]
}
 800f39c:	bf00      	nop
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
 800f3b4:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800f3b6:	7bfb      	ldrb	r3, [r7, #15]
 800f3b8:	091b      	lsrs	r3, r3, #4
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
 800f3c2:	f003 030f 	and.w	r3, r3, #15
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	701a      	strb	r2, [r3, #0]

}
 800f3cc:	bf00      	nop
 800f3ce:	3714      	adds	r7, #20
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	4603      	mov	r3, r0
 800f3e0:	603a      	str	r2, [r7, #0]
 800f3e2:	71fb      	strb	r3, [r7, #7]
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800f3e8:	79bb      	ldrb	r3, [r7, #6]
 800f3ea:	011b      	lsls	r3, r3, #4
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	79fb      	ldrb	r3, [r7, #7]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	701a      	strb	r2, [r3, #0]

}
 800f3f8:	bf00      	nop
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60ba      	str	r2, [r7, #8]
 800f40c:	607b      	str	r3, [r7, #4]
 800f40e:	4603      	mov	r3, r0
 800f410:	73fb      	strb	r3, [r7, #15]
 800f412:	460b      	mov	r3, r1
 800f414:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800f426:	f107 0217 	add.w	r2, r7, #23
 800f42a:	f107 0116 	add.w	r1, r7, #22
 800f42e:	7bfb      	ldrb	r3, [r7, #15]
 800f430:	4618      	mov	r0, r3
 800f432:	f002 fa51 	bl	80118d8 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800f436:	f107 0214 	add.w	r2, r7, #20
 800f43a:	f107 0115 	add.w	r1, r7, #21
 800f43e:	7bbb      	ldrb	r3, [r7, #14]
 800f440:	4618      	mov	r0, r3
 800f442:	f7ff ffb1 	bl	800f3a8 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800f446:	7dfb      	ldrb	r3, [r7, #23]
 800f448:	b29a      	uxth	r2, r3
 800f44a:	7d7b      	ldrb	r3, [r7, #21]
 800f44c:	3301      	adds	r3, #1
 800f44e:	0fd9      	lsrs	r1, r3, #31
 800f450:	440b      	add	r3, r1
 800f452:	105b      	asrs	r3, r3, #1
 800f454:	425b      	negs	r3, r3
 800f456:	b29b      	uxth	r3, r3
 800f458:	4413      	add	r3, r2
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	b21a      	sxth	r2, r3
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	da02      	bge.n	800f472 <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	2200      	movs	r2, #0
 800f470:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f478:	b29a      	uxth	r2, r3
 800f47a:	7d7b      	ldrb	r3, [r7, #21]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	4413      	add	r3, r2
 800f480:	b29b      	uxth	r3, r3
 800f482:	b21a      	sxth	r2, r3
 800f484:	6a3b      	ldr	r3, [r7, #32]
 800f486:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f48e:	2b0f      	cmp	r3, #15
 800f490:	dd02      	ble.n	800f498 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800f492:	6a3b      	ldr	r3, [r7, #32]
 800f494:	220f      	movs	r2, #15
 800f496:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800f498:	7dbb      	ldrb	r3, [r7, #22]
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	7d3b      	ldrb	r3, [r7, #20]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	0fd9      	lsrs	r1, r3, #31
 800f4a2:	440b      	add	r3, r1
 800f4a4:	105b      	asrs	r3, r3, #1
 800f4a6:	425b      	negs	r3, r3
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	4413      	add	r3, r2
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	b21a      	sxth	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	da02      	bge.n	800f4c4 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	7d3b      	ldrb	r3, [r7, #20]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	4413      	add	r3, r2
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	b21a      	sxth	r2, r3
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4e0:	2b0f      	cmp	r3, #15
 800f4e2:	dd02      	ble.n	800f4ea <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e6:	220f      	movs	r2, #15
 800f4e8:	801a      	strh	r2, [r3, #0]
}
 800f4ea:	bf00      	nop
 800f4ec:	3718      	adds	r7, #24
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b085      	sub	sp, #20
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	460a      	mov	r2, r1
 800f4fc:	71fb      	strb	r3, [r7, #7]
 800f4fe:	4613      	mov	r3, r2
 800f500:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800f506:	79fb      	ldrb	r3, [r7, #7]
 800f508:	f003 0303 	and.w	r3, r3, #3
 800f50c:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800f50e:	79bb      	ldrb	r3, [r7, #6]
 800f510:	f003 0303 	and.w	r3, r3, #3
 800f514:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800f516:	7bbb      	ldrb	r3, [r7, #14]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d104      	bne.n	800f526 <VL53L1_is_aperture_location+0x34>
 800f51c:	7b7b      	ldrb	r3, [r7, #13]
 800f51e:	2b02      	cmp	r3, #2
 800f520:	d101      	bne.n	800f526 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800f522:	2301      	movs	r3, #1
 800f524:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800f526:	7bbb      	ldrb	r3, [r7, #14]
 800f528:	2b02      	cmp	r3, #2
 800f52a:	d104      	bne.n	800f536 <VL53L1_is_aperture_location+0x44>
 800f52c:	7b7b      	ldrb	r3, [r7, #13]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d101      	bne.n	800f536 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800f532:	2301      	movs	r3, #1
 800f534:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800f536:	7bfb      	ldrb	r3, [r7, #15]
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3714      	adds	r7, #20
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b08b      	sub	sp, #44	; 0x2c
 800f548:	af02      	add	r7, sp, #8
 800f54a:	603a      	str	r2, [r7, #0]
 800f54c:	461a      	mov	r2, r3
 800f54e:	4603      	mov	r3, r0
 800f550:	71fb      	strb	r3, [r7, #7]
 800f552:	460b      	mov	r3, r1
 800f554:	71bb      	strb	r3, [r7, #6]
 800f556:	4613      	mov	r3, r2
 800f558:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800f56a:	2300      	movs	r3, #0
 800f56c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800f56e:	2300      	movs	r3, #0
 800f570:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800f57a:	2300      	movs	r3, #0
 800f57c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800f582:	2300      	movs	r3, #0
 800f584:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800f586:	f107 0416 	add.w	r4, r7, #22
 800f58a:	f107 0218 	add.w	r2, r7, #24
 800f58e:	79b9      	ldrb	r1, [r7, #6]
 800f590:	79f8      	ldrb	r0, [r7, #7]
 800f592:	f107 0312 	add.w	r3, r7, #18
 800f596:	9301      	str	r3, [sp, #4]
 800f598:	f107 0314 	add.w	r3, r7, #20
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	4623      	mov	r3, r4
 800f5a0:	f7ff ff30 	bl	800f404 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f5aa:	8afb      	ldrh	r3, [r7, #22]
 800f5ac:	83bb      	strh	r3, [r7, #28]
 800f5ae:	e04c      	b.n	800f64a <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f5b0:	8b3b      	ldrh	r3, [r7, #24]
 800f5b2:	83fb      	strh	r3, [r7, #30]
 800f5b4:	e03d      	b.n	800f632 <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800f5b6:	8bbb      	ldrh	r3, [r7, #28]
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	8bfa      	ldrh	r2, [r7, #30]
 800f5bc:	b2d1      	uxtb	r1, r2
 800f5be:	f107 0211 	add.w	r2, r7, #17
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7ff fec9 	bl	800f35a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800f5c8:	7c78      	ldrb	r0, [r7, #17]
 800f5ca:	f107 030e 	add.w	r3, r7, #14
 800f5ce:	f107 020f 	add.w	r2, r7, #15
 800f5d2:	f107 0110 	add.w	r1, r7, #16
 800f5d6:	f7ff fe9f 	bl	800f318 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800f5da:	7c3b      	ldrb	r3, [r7, #16]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	781a      	ldrb	r2, [r3, #0]
 800f5e4:	7bbb      	ldrb	r3, [r7, #14]
 800f5e6:	4013      	ands	r3, r2
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d01b      	beq.n	800f626 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800f5ee:	8bbb      	ldrh	r3, [r7, #28]
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	8bfa      	ldrh	r2, [r7, #30]
 800f5f4:	b2d2      	uxtb	r2, r2
 800f5f6:	4611      	mov	r1, r2
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7ff ff7a 	bl	800f4f2 <VL53L1_is_aperture_location>
 800f5fe:	4603      	mov	r3, r0
 800f600:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800f602:	7efb      	ldrb	r3, [r7, #27]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d007      	beq.n	800f618 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800f608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60a:	881a      	ldrh	r2, [r3, #0]
 800f60c:	88bb      	ldrh	r3, [r7, #4]
 800f60e:	4413      	add	r3, r2
 800f610:	b29a      	uxth	r2, r3
 800f612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f614:	801a      	strh	r2, [r3, #0]
 800f616:	e006      	b.n	800f626 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800f618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f620:	b29a      	uxth	r2, r3
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f626:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	3301      	adds	r3, #1
 800f62e:	b29b      	uxth	r3, r3
 800f630:	83fb      	strh	r3, [r7, #30]
 800f632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f636:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	ddbb      	ble.n	800f5b6 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f63e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f642:	b29b      	uxth	r3, r3
 800f644:	3301      	adds	r3, #1
 800f646:	b29b      	uxth	r3, r3
 800f648:	83bb      	strh	r3, [r7, #28]
 800f64a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f64e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f652:	429a      	cmp	r2, r3
 800f654:	ddac      	ble.n	800f5b0 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800f656:	bf00      	nop
 800f658:	bf00      	nop
 800f65a:	3724      	adds	r7, #36	; 0x24
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd90      	pop	{r4, r7, pc}

0800f660 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800f660:	b590      	push	{r4, r7, lr}
 800f662:	b08d      	sub	sp, #52	; 0x34
 800f664:	af02      	add	r7, sp, #8
 800f666:	4604      	mov	r4, r0
 800f668:	4608      	mov	r0, r1
 800f66a:	4611      	mov	r1, r2
 800f66c:	461a      	mov	r2, r3
 800f66e:	4623      	mov	r3, r4
 800f670:	71fb      	strb	r3, [r7, #7]
 800f672:	4603      	mov	r3, r0
 800f674:	71bb      	strb	r3, [r7, #6]
 800f676:	460b      	mov	r3, r1
 800f678:	717b      	strb	r3, [r7, #5]
 800f67a:	4613      	mov	r3, r2
 800f67c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800f67e:	2300      	movs	r3, #0
 800f680:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800f68e:	2300      	movs	r3, #0
 800f690:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800f6c0:	f107 041c 	add.w	r4, r7, #28
 800f6c4:	f107 021e 	add.w	r2, r7, #30
 800f6c8:	79b9      	ldrb	r1, [r7, #6]
 800f6ca:	79f8      	ldrb	r0, [r7, #7]
 800f6cc:	f107 0318 	add.w	r3, r7, #24
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	f107 031a 	add.w	r3, r7, #26
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	4623      	mov	r3, r4
 800f6da:	f7ff fe93 	bl	800f404 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800f6de:	f107 0414 	add.w	r4, r7, #20
 800f6e2:	f107 0216 	add.w	r2, r7, #22
 800f6e6:	7939      	ldrb	r1, [r7, #4]
 800f6e8:	7978      	ldrb	r0, [r7, #5]
 800f6ea:	f107 0310 	add.w	r3, r7, #16
 800f6ee:	9301      	str	r3, [sp, #4]
 800f6f0:	f107 0312 	add.w	r3, r7, #18
 800f6f4:	9300      	str	r3, [sp, #0]
 800f6f6:	4623      	mov	r3, r4
 800f6f8:	f7ff fe84 	bl	800f404 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800f6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6fe:	2200      	movs	r2, #0
 800f700:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800f702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f704:	2200      	movs	r2, #0
 800f706:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f708:	8abb      	ldrh	r3, [r7, #20]
 800f70a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f70c:	e06c      	b.n	800f7e8 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f70e:	8afb      	ldrh	r3, [r7, #22]
 800f710:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f712:	e05d      	b.n	800f7d0 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800f714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f716:	b2db      	uxtb	r3, r3
 800f718:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f71a:	b2d1      	uxtb	r1, r2
 800f71c:	f107 020f 	add.w	r2, r7, #15
 800f720:	4618      	mov	r0, r3
 800f722:	f7ff fe1a 	bl	800f35a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800f726:	7bf8      	ldrb	r0, [r7, #15]
 800f728:	f107 030c 	add.w	r3, r7, #12
 800f72c:	f107 020d 	add.w	r2, r7, #13
 800f730:	f107 010e 	add.w	r1, r7, #14
 800f734:	f7ff fdf0 	bl	800f318 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800f738:	7bbb      	ldrb	r3, [r7, #14]
 800f73a:	461a      	mov	r2, r3
 800f73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73e:	4413      	add	r3, r2
 800f740:	781a      	ldrb	r2, [r3, #0]
 800f742:	7b3b      	ldrb	r3, [r7, #12]
 800f744:	4013      	ands	r3, r2
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d03b      	beq.n	800f7c4 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800f74c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f752:	b2d2      	uxtb	r2, r2
 800f754:	4611      	mov	r1, r2
 800f756:	4618      	mov	r0, r3
 800f758:	f7ff fecb 	bl	800f4f2 <VL53L1_is_aperture_location>
 800f75c:	4603      	mov	r3, r0
 800f75e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800f762:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f766:	2b00      	cmp	r3, #0
 800f768:	d002      	beq.n	800f770 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800f76a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f76c:	847b      	strh	r3, [r7, #34]	; 0x22
 800f76e:	e002      	b.n	800f776 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800f770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f774:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f776:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f77a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f77e:	429a      	cmp	r2, r3
 800f780:	db19      	blt.n	800f7b6 <VL53L1_calc_mm_effective_spads+0x156>
 800f782:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f786:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f78a:	429a      	cmp	r2, r3
 800f78c:	dc13      	bgt.n	800f7b6 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f78e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f792:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f796:	429a      	cmp	r2, r3
 800f798:	db0d      	blt.n	800f7b6 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f79a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f79e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	dc07      	bgt.n	800f7b6 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800f7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7a8:	881a      	ldrh	r2, [r3, #0]
 800f7aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7ac:	4413      	add	r3, r2
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b2:	801a      	strh	r2, [r3, #0]
 800f7b4:	e006      	b.n	800f7c4 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800f7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7b8:	881a      	ldrh	r2, [r3, #0]
 800f7ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7bc:	4413      	add	r3, r2
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7c2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f7c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f7d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7d4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	dd9b      	ble.n	800f714 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f7dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f7e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f7ec:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	dd8c      	ble.n	800f70e <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800f7f4:	bf00      	nop
 800f7f6:	bf00      	nop
 800f7f8:	372c      	adds	r7, #44	; 0x2c
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd90      	pop	{r4, r7, pc}

0800f7fe <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b086      	sub	sp, #24
 800f802:	af00      	add	r7, sp, #0
 800f804:	60f8      	str	r0, [r7, #12]
 800f806:	60b9      	str	r1, [r7, #8]
 800f808:	607a      	str	r2, [r7, #4]
 800f80a:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800f80c:	2300      	movs	r3, #0
 800f80e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7fd ff6d 	bl	800d6f0 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	7c9a      	ldrb	r2, [r3, #18]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	3314      	adds	r3, #20
 800f840:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800f842:	2300      	movs	r3, #0
 800f844:	75fb      	strb	r3, [r7, #23]
 800f846:	e06b      	b.n	800f920 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800f848:	7dfb      	ldrb	r3, [r7, #23]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d002      	beq.n	800f854 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d034      	beq.n	800f8bc <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800f852:	e05f      	b.n	800f914 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f88c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	8a9a      	ldrh	r2, [r3, #20]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	601a      	str	r2, [r3, #0]

			break;
 800f8ba:	e02b      	b.n	800f914 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f8ec:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	611a      	str	r2, [r3, #16]
			break;
 800f912:	bf00      	nop
		}

		pdata++;
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	334c      	adds	r3, #76	; 0x4c
 800f918:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800f91a:	7dfb      	ldrb	r3, [r7, #23]
 800f91c:	3301      	adds	r3, #1
 800f91e:	75fb      	strb	r3, [r7, #23]
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	7c9b      	ldrb	r3, [r3, #18]
 800f924:	7dfa      	ldrb	r2, [r7, #23]
 800f926:	429a      	cmp	r2, r3
 800f928:	d38e      	bcc.n	800f848 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800f92a:	bf00      	nop
 800f92c:	bf00      	nop
 800f92e:	3718      	adds	r7, #24
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800f934:	b480      	push	{r7}
 800f936:	b089      	sub	sp, #36	; 0x24
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f93c:	2300      	movs	r3, #0
 800f93e:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3318      	adds	r3, #24
 800f944:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f94c:	3308      	adds	r3, #8
 800f94e:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800f956:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f95e:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800f960:	4613      	mov	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4413      	add	r3, r2
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f96c:	697a      	ldr	r2, [r7, #20]
 800f96e:	4413      	add	r3, r2
 800f970:	3302      	adds	r3, #2
 800f972:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800f998:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3724      	adds	r7, #36	; 0x24
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b08b      	sub	sp, #44	; 0x2c
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	3318      	adds	r3, #24
 800f9ba:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f9c2:	3308      	adds	r3, #8
 800f9c4:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f9cc:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f9d4:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800f9dc:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800f9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9e2:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800f9e4:	7bfa      	ldrb	r2, [r7, #15]
 800f9e6:	6939      	ldr	r1, [r7, #16]
 800f9e8:	4613      	mov	r3, r2
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	4413      	add	r3, r2
 800f9ee:	005b      	lsls	r3, r3, #1
 800f9f0:	440b      	add	r3, r1
 800f9f2:	3306      	adds	r3, #6
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f9fe:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800fa00:	2301      	movs	r3, #1
 800fa02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa06:	e01a      	b.n	800fa3e <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800fa08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	214c      	movs	r1, #76	; 0x4c
 800fa10:	fb01 f303 	mul.w	r3, r1, r3
 800fa14:	4413      	add	r3, r2
 800fa16:	334a      	adds	r3, #74	; 0x4a
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d209      	bcs.n	800fa34 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800fa20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800fa24:	683a      	ldr	r2, [r7, #0]
 800fa26:	214c      	movs	r1, #76	; 0x4c
 800fa28:	fb01 f303 	mul.w	r3, r1, r3
 800fa2c:	4413      	add	r3, r2
 800fa2e:	334a      	adds	r3, #74	; 0x4a
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800fa34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa38:	3301      	adds	r3, #1
 800fa3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	7c9b      	ldrb	r3, [r3, #18]
 800fa42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d3de      	bcc.n	800fa08 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800fa4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d103      	bne.n	800fa58 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800fa50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa54:	623b      	str	r3, [r7, #32]
 800fa56:	e00e      	b.n	800fa76 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800fa58:	89bb      	ldrh	r3, [r7, #12]
 800fa5a:	039b      	lsls	r3, r3, #14
 800fa5c:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800fa5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa60:	6a3a      	ldr	r2, [r7, #32]
 800fa62:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa66:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800fa68:	6a3b      	ldr	r3, [r7, #32]
 800fa6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa6e:	d302      	bcc.n	800fa76 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800fa70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa74:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800fa76:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800fa7c:	6939      	ldr	r1, [r7, #16]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4413      	add	r3, r2
 800fa84:	005b      	lsls	r3, r3, #1
 800fa86:	440b      	add	r3, r1
 800fa88:	3306      	adds	r3, #6
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800fa8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	372c      	adds	r7, #44	; 0x2c
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b08a      	sub	sp, #40	; 0x28
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800faa6:	2300      	movs	r3, #0
 800faa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	3318      	adds	r3, #24
 800fab0:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800fab2:	6a3b      	ldr	r3, [r7, #32]
 800fab4:	332c      	adds	r3, #44	; 0x2c
 800fab6:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800fab8:	6a3b      	ldr	r3, [r7, #32]
 800faba:	33c2      	adds	r3, #194	; 0xc2
 800fabc:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800fabe:	6a3b      	ldr	r3, [r7, #32]
 800fac0:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800fac4:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	3302      	adds	r3, #2
 800faca:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	785b      	ldrb	r3, [r3, #1]
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800fad6:	6a3b      	ldr	r3, [r7, #32]
 800fad8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fadc:	461a      	mov	r2, r3
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	4413      	add	r3, r2
 800fae2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d11e      	bne.n	800fb28 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800faea:	7bfb      	ldrb	r3, [r7, #15]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10b      	bne.n	800fb08 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800fb08:	7bfb      	ldrb	r3, [r7, #15]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d05d      	beq.n	800fbca <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	719a      	strb	r2, [r3, #6]
 800fb26:	e050      	b.n	800fbca <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800fb28:	6a3b      	ldr	r3, [r7, #32]
 800fb2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fb2e:	461a      	mov	r2, r3
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	4413      	add	r3, r2
 800fb34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d11e      	bne.n	800fb7a <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800fb3c:	7bfb      	ldrb	r3, [r7, #15]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10b      	bne.n	800fb5a <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d034      	beq.n	800fbca <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	719a      	strb	r2, [r3, #6]
 800fb78:	e027      	b.n	800fbca <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800fb7a:	6a3b      	ldr	r3, [r7, #32]
 800fb7c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fb80:	461a      	mov	r2, r3
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	4413      	add	r3, r2
 800fb86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d11d      	bne.n	800fbca <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10b      	bne.n	800fbac <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800fbac:	7bfb      	ldrb	r3, [r7, #15]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00b      	beq.n	800fbca <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800fbca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d109      	bne.n	800fbe6 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800fbd2:	6a3b      	ldr	r3, [r7, #32]
 800fbd4:	f203 3142 	addw	r1, r3, #834	; 0x342
 800fbd8:	6a3b      	ldr	r3, [r7, #32]
 800fbda:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800fbde:	461a      	mov	r2, r3
 800fbe0:	6978      	ldr	r0, [r7, #20]
 800fbe2:	f7fd f921 	bl	800ce28 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800fbe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3728      	adds	r7, #40	; 0x28
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b089      	sub	sp, #36	; 0x24
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	60f8      	str	r0, [r7, #12]
 800fbfa:	607a      	str	r2, [r7, #4]
 800fbfc:	603b      	str	r3, [r7, #0]
 800fbfe:	460b      	mov	r3, r1
 800fc00:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fc02:	2300      	movs	r3, #0
 800fc04:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3318      	adds	r3, #24
 800fc0a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800fc0c:	69bb      	ldr	r3, [r7, #24]
 800fc0e:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800fc12:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800fc14:	7dfb      	ldrb	r3, [r7, #23]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d103      	bne.n	800fc22 <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	7afa      	ldrb	r2, [r7, #11]
 800fc1e:	701a      	strb	r2, [r3, #0]
 800fc20:	e01e      	b.n	800fc60 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	7dfb      	ldrb	r3, [r7, #23]
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d111      	bne.n	800fc54 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	2bff      	cmp	r3, #255	; 0xff
 800fc36:	d103      	bne.n	800fc40 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2280      	movs	r2, #128	; 0x80
 800fc3c:	701a      	strb	r2, [r3, #0]
 800fc3e:	e005      	b.n	800fc4c <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	3301      	adds	r3, #1
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	701a      	strb	r2, [r3, #0]
 800fc52:	e005      	b.n	800fc60 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800fc60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3724      	adds	r7, #36	; 0x24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b087      	sub	sp, #28
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d118      	bne.n	800fcbc <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	719a      	strb	r2, [r3, #6]
 800fcba:	e03a      	b.n	800fd32 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d118      	bne.n	800fcf8 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	719a      	strb	r2, [r3, #6]
 800fcf6:	e01c      	b.n	800fd32 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fcfe:	2b03      	cmp	r3, #3
 800fd00:	d117      	bne.n	800fd32 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800fd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	371c      	adds	r7, #28
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr

0800fd42 <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800fd42:	b580      	push	{r7, lr}
 800fd44:	b08a      	sub	sp, #40	; 0x28
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	60f8      	str	r0, [r7, #12]
 800fd4a:	607a      	str	r2, [r7, #4]
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	460b      	mov	r3, r1
 800fd50:	72fb      	strb	r3, [r7, #11]
 800fd52:	4613      	mov	r3, r2
 800fd54:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fd56:	2300      	movs	r3, #0
 800fd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	3318      	adds	r3, #24
 800fd60:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800fd62:	2300      	movs	r3, #0
 800fd64:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800fd6a:	7afa      	ldrb	r2, [r7, #11]
 800fd6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fd6e:	4611      	mov	r1, r2
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fe f8ca 	bl	800df0a <VL53L1_calc_macro_period_us>
 800fd76:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800fd78:	6a3b      	ldr	r3, [r7, #32]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	031b      	lsls	r3, r3, #12
 800fd86:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800fd88:	6a3b      	ldr	r3, [r7, #32]
 800fd8a:	085b      	lsrs	r3, r3, #1
 800fd8c:	69ba      	ldr	r2, [r7, #24]
 800fd8e:	4413      	add	r3, r2
 800fd90:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800fd92:	69ba      	ldr	r2, [r7, #24]
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd9a:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	2bff      	cmp	r3, #255	; 0xff
 800fda0:	d904      	bls.n	800fdac <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	22ff      	movs	r2, #255	; 0xff
 800fda6:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800fdaa:	e004      	b.n	800fdb6 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	7afa      	ldrb	r2, [r7, #11]
 800fdba:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800fdbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d10a      	bne.n	800fddc <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800fdcc:	461a      	mov	r2, r3
 800fdce:	214b      	movs	r1, #75	; 0x4b
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f007 f9bd 	bl	8017150 <VL53L1_WrByte>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800fddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d10a      	bne.n	800fdfa <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800fdea:	461a      	mov	r2, r3
 800fdec:	2160      	movs	r1, #96	; 0x60
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f007 f9ae 	bl	8017150 <VL53L1_WrByte>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800fe00:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800fe08:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800fe0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d109      	bne.n	800fe26 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800fe12:	f107 0214 	add.w	r2, r7, #20
 800fe16:	2302      	movs	r3, #2
 800fe18:	2178      	movs	r1, #120	; 0x78
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f007 f92c 	bl	8017078 <VL53L1_WriteMulti>
 800fe20:	4603      	mov	r3, r0
 800fe22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	893a      	ldrh	r2, [r7, #8]
 800fe2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800fe2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d108      	bne.n	800fe48 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800fe36:	893b      	ldrh	r3, [r7, #8]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	211c      	movs	r1, #28
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f007 f9b1 	bl	80171a4 <VL53L1_WrWord>
 800fe42:	4603      	mov	r3, r0
 800fe44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800fe48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d108      	bne.n	800fe62 <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800fe50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fe52:	461a      	mov	r2, r3
 800fe54:	2164      	movs	r1, #100	; 0x64
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f007 f9a4 	bl	80171a4 <VL53L1_WrWord>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800fe62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d108      	bne.n	800fe7c <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800fe6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	2166      	movs	r1, #102	; 0x66
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f007 f997 	bl	80171a4 <VL53L1_WrWord>
 800fe76:	4603      	mov	r3, r0
 800fe78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800fe7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3728      	adds	r7, #40	; 0x28
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800fe88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe8c:	b0a2      	sub	sp, #136	; 0x88
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fe92:	2300      	movs	r3, #0
 800fe94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fe98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe9a:	3318      	adds	r3, #24
 800fe9c:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800fe9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fea0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800fea4:	3308      	adds	r3, #8
 800fea6:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800fea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800feaa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800feae:	3318      	adds	r3, #24
 800feb0:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800feb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800feb4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800feb8:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800feba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800febc:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800febe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fec0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fec4:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800fec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fec8:	69db      	ldr	r3, [r3, #28]
 800feca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800fece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d103      	bne.n	800fede <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800fed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800feda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800fede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800fee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800fee6:	4413      	add	r3, r2
 800fee8:	2200      	movs	r2, #0
 800feea:	461c      	mov	r4, r3
 800feec:	4615      	mov	r5, r2
 800feee:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800fef2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800fef6:	4622      	mov	r2, r4
 800fef8:	462b      	mov	r3, r5
 800fefa:	f04f 0000 	mov.w	r0, #0
 800fefe:	f04f 0100 	mov.w	r1, #0
 800ff02:	0159      	lsls	r1, r3, #5
 800ff04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ff08:	0150      	lsls	r0, r2, #5
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	ebb2 0804 	subs.w	r8, r2, r4
 800ff12:	eb63 0905 	sbc.w	r9, r3, r5
 800ff16:	f04f 0200 	mov.w	r2, #0
 800ff1a:	f04f 0300 	mov.w	r3, #0
 800ff1e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ff22:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800ff26:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800ff2a:	4690      	mov	r8, r2
 800ff2c:	4699      	mov	r9, r3
 800ff2e:	eb18 0304 	adds.w	r3, r8, r4
 800ff32:	633b      	str	r3, [r7, #48]	; 0x30
 800ff34:	eb49 0305 	adc.w	r3, r9, r5
 800ff38:	637b      	str	r3, [r7, #52]	; 0x34
 800ff3a:	f04f 0200 	mov.w	r2, #0
 800ff3e:	f04f 0300 	mov.w	r3, #0
 800ff42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ff46:	4629      	mov	r1, r5
 800ff48:	00cb      	lsls	r3, r1, #3
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ff50:	4621      	mov	r1, r4
 800ff52:	00ca      	lsls	r2, r1, #3
 800ff54:	4610      	mov	r0, r2
 800ff56:	4619      	mov	r1, r3
 800ff58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	643b      	str	r3, [r7, #64]	; 0x40
 800ff60:	647a      	str	r2, [r7, #68]	; 0x44
 800ff62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ff66:	f7f0 fe47 	bl	8000bf8 <__aeabi_uldivmod>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800ff72:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800ff76:	4622      	mov	r2, r4
 800ff78:	462b      	mov	r3, r5
 800ff7a:	f04f 0000 	mov.w	r0, #0
 800ff7e:	f04f 0100 	mov.w	r1, #0
 800ff82:	0159      	lsls	r1, r3, #5
 800ff84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ff88:	0150      	lsls	r0, r2, #5
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	ebb2 0a04 	subs.w	sl, r2, r4
 800ff92:	eb63 0b05 	sbc.w	fp, r3, r5
 800ff96:	f04f 0200 	mov.w	r2, #0
 800ff9a:	f04f 0300 	mov.w	r3, #0
 800ff9e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ffa2:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800ffa6:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800ffaa:	4692      	mov	sl, r2
 800ffac:	469b      	mov	fp, r3
 800ffae:	eb1a 0304 	adds.w	r3, sl, r4
 800ffb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffb4:	eb4b 0305 	adc.w	r3, fp, r5
 800ffb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffba:	f04f 0200 	mov.w	r2, #0
 800ffbe:	f04f 0300 	mov.w	r3, #0
 800ffc2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	00cb      	lsls	r3, r1, #3
 800ffca:	4621      	mov	r1, r4
 800ffcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	00ca      	lsls	r2, r1, #3
 800ffd4:	4610      	mov	r0, r2
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffdc:	2200      	movs	r2, #0
 800ffde:	63bb      	str	r3, [r7, #56]	; 0x38
 800ffe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ffe2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ffe6:	f7f0 fe07 	bl	8000bf8 <__aeabi_uldivmod>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800fff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fff8:	8ad2      	ldrh	r2, [r2, #22]
 800fffa:	fb02 f303 	mul.w	r3, r2, r3
 800fffe:	2200      	movs	r2, #0
 8010000:	623b      	str	r3, [r7, #32]
 8010002:	627a      	str	r2, [r7, #36]	; 0x24
 8010004:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010008:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 801000c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010010:	4313      	orrs	r3, r2
 8010012:	d105      	bne.n	8010020 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 8010014:	f04f 0201 	mov.w	r2, #1
 8010018:	f04f 0300 	mov.w	r3, #0
 801001c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 8010020:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	f04f 0400 	mov.w	r4, #0
 801002c:	f04f 0500 	mov.w	r5, #0
 8010030:	015d      	lsls	r5, r3, #5
 8010032:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8010036:	0154      	lsls	r4, r2, #5
 8010038:	4622      	mov	r2, r4
 801003a:	462b      	mov	r3, r5
 801003c:	1a14      	subs	r4, r2, r0
 801003e:	61bc      	str	r4, [r7, #24]
 8010040:	eb63 0301 	sbc.w	r3, r3, r1
 8010044:	61fb      	str	r3, [r7, #28]
 8010046:	f04f 0200 	mov.w	r2, #0
 801004a:	f04f 0300 	mov.w	r3, #0
 801004e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8010052:	464c      	mov	r4, r9
 8010054:	00a3      	lsls	r3, r4, #2
 8010056:	4644      	mov	r4, r8
 8010058:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801005c:	4644      	mov	r4, r8
 801005e:	00a2      	lsls	r2, r4, #2
 8010060:	4614      	mov	r4, r2
 8010062:	461d      	mov	r5, r3
 8010064:	4623      	mov	r3, r4
 8010066:	181b      	adds	r3, r3, r0
 8010068:	613b      	str	r3, [r7, #16]
 801006a:	462b      	mov	r3, r5
 801006c:	eb41 0303 	adc.w	r3, r1, r3
 8010070:	617b      	str	r3, [r7, #20]
 8010072:	f04f 0200 	mov.w	r2, #0
 8010076:	f04f 0300 	mov.w	r3, #0
 801007a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801007e:	4629      	mov	r1, r5
 8010080:	02cb      	lsls	r3, r1, #11
 8010082:	4621      	mov	r1, r4
 8010084:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8010088:	4621      	mov	r1, r4
 801008a:	02ca      	lsls	r2, r1, #11
 801008c:	461c      	mov	r4, r3
 801008e:	4613      	mov	r3, r2
 8010090:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 8010094:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010098:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801009c:	f7f0 fdac 	bl	8000bf8 <__aeabi_uldivmod>
 80100a0:	4602      	mov	r2, r0
 80100a2:	460b      	mov	r3, r1
 80100a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 80100a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80100ac:	4602      	mov	r2, r0
 80100ae:	460b      	mov	r3, r1
 80100b0:	f04f 0400 	mov.w	r4, #0
 80100b4:	f04f 0500 	mov.w	r5, #0
 80100b8:	015d      	lsls	r5, r3, #5
 80100ba:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80100be:	0154      	lsls	r4, r2, #5
 80100c0:	4622      	mov	r2, r4
 80100c2:	462b      	mov	r3, r5
 80100c4:	1a14      	subs	r4, r2, r0
 80100c6:	60bc      	str	r4, [r7, #8]
 80100c8:	eb63 0301 	sbc.w	r3, r3, r1
 80100cc:	60fb      	str	r3, [r7, #12]
 80100ce:	f04f 0200 	mov.w	r2, #0
 80100d2:	f04f 0300 	mov.w	r3, #0
 80100d6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80100da:	464c      	mov	r4, r9
 80100dc:	00a3      	lsls	r3, r4, #2
 80100de:	4644      	mov	r4, r8
 80100e0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80100e4:	4644      	mov	r4, r8
 80100e6:	00a2      	lsls	r2, r4, #2
 80100e8:	4614      	mov	r4, r2
 80100ea:	461d      	mov	r5, r3
 80100ec:	4623      	mov	r3, r4
 80100ee:	181b      	adds	r3, r3, r0
 80100f0:	603b      	str	r3, [r7, #0]
 80100f2:	462b      	mov	r3, r5
 80100f4:	eb41 0303 	adc.w	r3, r1, r3
 80100f8:	607b      	str	r3, [r7, #4]
 80100fa:	f04f 0200 	mov.w	r2, #0
 80100fe:	f04f 0300 	mov.w	r3, #0
 8010102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010106:	4629      	mov	r1, r5
 8010108:	02cb      	lsls	r3, r1, #11
 801010a:	4621      	mov	r1, r4
 801010c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8010110:	4621      	mov	r1, r4
 8010112:	02ca      	lsls	r2, r1, #11
 8010114:	461c      	mov	r4, r3
 8010116:	4613      	mov	r3, r2
 8010118:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 801011c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010120:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010124:	f7f0 fd68 	bl	8000bf8 <__aeabi_uldivmod>
 8010128:	4602      	mov	r2, r0
 801012a:	460b      	mov	r3, r1
 801012c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 8010130:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010134:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 8010136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	2b01      	cmp	r3, #1
 801013c:	d802      	bhi.n	8010144 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 801013e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010140:	2202      	movs	r2, #2
 8010142:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 8010144:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8010148:	4618      	mov	r0, r3
 801014a:	3788      	adds	r7, #136	; 0x88
 801014c:	46bd      	mov	sp, r7
 801014e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08010154 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b096      	sub	sp, #88	; 0x58
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
 8010160:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010162:	2300      	movs	r3, #0
 8010164:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	3318      	adds	r3, #24
 801016c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 801016e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010170:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8010174:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 8010176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010178:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 801017c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 801017e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010180:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8010184:	2b01      	cmp	r3, #1
 8010186:	d108      	bne.n	801019a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801018e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8010192:	2b01      	cmp	r3, #1
 8010194:	d101      	bne.n	801019a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 8010196:	2301      	movs	r3, #1
 8010198:	e000      	b.n	801019c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 801019a:	2300      	movs	r3, #0
 801019c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 80101a0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d107      	bne.n	80101b8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	889b      	ldrh	r3, [r3, #4]
 80101ac:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	609a      	str	r2, [r3, #8]
 80101b6:	e002      	b.n	80101be <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 80101c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c6:	899b      	ldrh	r3, [r3, #12]
 80101c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 80101cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ce:	89db      	ldrh	r3, [r3, #14]
 80101d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d004      	beq.n	80101e8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d125      	bne.n	8010234 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d021      	beq.n	8010234 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80101f0:	f107 0313 	add.w	r3, r7, #19
 80101f4:	4619      	mov	r1, r3
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f000 fe44 	bl	8010e84 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80101fc:	7cfb      	ldrb	r3, [r7, #19]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d101      	bne.n	8010206 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 8010202:	2301      	movs	r3, #1
 8010204:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 8010206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801020a:	2b00      	cmp	r3, #0
 801020c:	d103      	bne.n	8010216 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 801020e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	653b      	str	r3, [r7, #80]	; 0x50
 8010214:	e006      	b.n	8010224 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 8010216:	7cfb      	ldrb	r3, [r7, #19]
 8010218:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 801021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021c:	3202      	adds	r2, #2
 801021e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010222:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 8010224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010226:	889b      	ldrh	r3, [r3, #4]
 8010228:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 801022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022e:	88db      	ldrh	r3, [r3, #6]
 8010230:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10a      	bne.n	8010254 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 801023e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010242:	2b00      	cmp	r3, #0
 8010244:	d106      	bne.n	8010254 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	795b      	ldrb	r3, [r3, #5]
 801024a:	f043 0301 	orr.w	r3, r3, #1
 801024e:	b2da      	uxtb	r2, r3
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801025a:	2b00      	cmp	r3, #0
 801025c:	d10a      	bne.n	8010274 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 801025e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010262:	2b00      	cmp	r3, #0
 8010264:	d106      	bne.n	8010274 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	795b      	ldrb	r3, [r3, #5]
 801026a:	f043 0302 	orr.w	r3, r3, #2
 801026e:	b2da      	uxtb	r2, r3
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 8010274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010276:	2b00      	cmp	r3, #0
 8010278:	d101      	bne.n	801027e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 801027a:	2301      	movs	r3, #1
 801027c:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010284:	2b01      	cmp	r3, #1
 8010286:	d108      	bne.n	801029a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801028c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010294:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8010298:	e019      	b.n	80102ce <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 801029a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801029e:	019b      	lsls	r3, r3, #6
 80102a0:	461a      	mov	r2, r3
 80102a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80102a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80102b2:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 80102b4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80102b8:	019b      	lsls	r3, r3, #6
 80102ba:	461a      	mov	r2, r3
 80102bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102be:	fbb2 f3f3 	udiv	r3, r2, r3
 80102c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80102cc:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d12a      	bne.n	801032e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80102e0:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 80102e4:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 80102e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102e8:	119b      	asrs	r3, r3, #6
 80102ea:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 80102ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102f2:	db02      	blt.n	80102fa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 80102f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102f8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 80102fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102fc:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 801030a:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 801030e:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 8010310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010312:	119b      	asrs	r3, r3, #6
 8010314:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 8010316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801031c:	db02      	blt.n	8010324 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 801031e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010322:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 8010324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010326:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	81da      	strh	r2, [r3, #14]
 801032c:	e042      	b.n	80103b4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010334:	2b01      	cmp	r3, #1
 8010336:	d13d      	bne.n	80103b4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 801033c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801033e:	1ad3      	subs	r3, r2, r3
 8010340:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 8010342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010344:	2b00      	cmp	r3, #0
 8010346:	da00      	bge.n	801034a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 8010348:	330f      	adds	r3, #15
 801034a:	111b      	asrs	r3, r3, #4
 801034c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 801034e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 8010354:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801035a:	4413      	add	r3, r2
 801035c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 801035e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010364:	db02      	blt.n	801036c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 8010366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801036a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 801036c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801036e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 8010378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 801037e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010380:	4a51      	ldr	r2, [pc, #324]	; (80104c8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 8010382:	fb82 1203 	smull	r1, r2, r2, r3
 8010386:	1152      	asrs	r2, r2, #5
 8010388:	17db      	asrs	r3, r3, #31
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 801038e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 8010394:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801039a:	4413      	add	r3, r2
 801039c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 801039e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103a4:	db02      	blt.n	80103ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 80103a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103aa:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 80103ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103ae:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	785b      	ldrb	r3, [r3, #1]
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d177      	bne.n	80104ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 80103bc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d073      	beq.n	80104ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	2201      	movs	r2, #1
 80103c8:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80103d0:	f107 0313 	add.w	r3, r7, #19
 80103d4:	4619      	mov	r1, r3
 80103d6:	68f8      	ldr	r0, [r7, #12]
 80103d8:	f000 fd54 	bl	8010e84 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 80103dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103de:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 80103e2:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	3308      	adds	r3, #8
 80103e8:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 80103ea:	7cfb      	ldrb	r3, [r7, #19]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d041      	beq.n	8010474 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 80103f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d03d      	beq.n	8010474 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 80103f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d03a      	beq.n	8010474 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 80103fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801040a:	fb03 f202 	mul.w	r2, r3, r2
 801040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010410:	fbb2 f3f3 	udiv	r3, r2, r3
 8010414:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 8010416:	6a3b      	ldr	r3, [r7, #32]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d004      	beq.n	8010426 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 8010420:	69ba      	ldr	r2, [r7, #24]
 8010422:	429a      	cmp	r2, r3
 8010424:	d303      	bcc.n	801042e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2200      	movs	r2, #0
 801042a:	719a      	strb	r2, [r3, #6]
 801042c:	e022      	b.n	8010474 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 801042e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010430:	6a3b      	ldr	r3, [r7, #32]
 8010432:	fbb2 f3f3 	udiv	r3, r2, r3
 8010436:	617b      	str	r3, [r7, #20]
				cval = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 801043c:	2300      	movs	r3, #0
 801043e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010442:	e00e      	b.n	8010462 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 8010444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	4413      	add	r3, r2
 801044a:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 801044c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801044e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010450:	601a      	str	r2, [r3, #0]
					pcpo++;
 8010452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010454:	3304      	adds	r3, #4
 8010456:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 8010458:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801045c:	3301      	adds	r3, #1
 801045e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010462:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8010466:	6a3b      	ldr	r3, [r7, #32]
 8010468:	3b01      	subs	r3, #1
 801046a:	429a      	cmp	r2, r3
 801046c:	d3ea      	bcc.n	8010444 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 801046e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010472:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	799b      	ldrb	r3, [r3, #6]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d017      	beq.n	80104ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 8010480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010482:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 801048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8010494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010496:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	789b      	ldrb	r3, [r3, #2]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d105      	bne.n	80104ac <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 80104ac:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d002      	beq.n	80104ba <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	2201      	movs	r2, #1
 80104b8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80104ba:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3758      	adds	r7, #88	; 0x58
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	66666667 	.word	0x66666667

080104cc <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 80104cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80104d0:	b0a2      	sub	sp, #136	; 0x88
 80104d2:	af02      	add	r7, sp, #8
 80104d4:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80104d6:	2300      	movs	r3, #0
 80104d8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80104dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104de:	3318      	adds	r3, #24
 80104e0:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 80104e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80104e8:	3308      	adds	r3, #8
 80104ea:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 80104ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104ee:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80104f2:	3318      	adds	r3, #24
 80104f4:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 80104f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104f8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80104fc:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 80104fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010500:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010504:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 8010506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010508:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 801050a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801050c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8010510:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 801051e:	2300      	movs	r3, #0
 8010520:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 8010524:	2300      	movs	r3, #0
 8010526:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 801052e:	f04f 0200 	mov.w	r2, #0
 8010532:	f04f 0300 	mov.w	r3, #0
 8010536:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 801053a:	2300      	movs	r3, #0
 801053c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 8010540:	2300      	movs	r3, #0
 8010542:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 8010544:	2300      	movs	r3, #0
 8010546:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 8010548:	2300      	movs	r3, #0
 801054a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 801054c:	2300      	movs	r3, #0
 801054e:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 8010550:	2300      	movs	r3, #0
 8010552:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 801055c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801055e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8010562:	2b01      	cmp	r3, #1
 8010564:	d108      	bne.n	8010578 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8010566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010568:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801056c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8010570:	2b01      	cmp	r3, #1
 8010572:	d101      	bne.n	8010578 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 8010574:	2301      	movs	r3, #1
 8010576:	e000      	b.n	801057a <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 8010578:	2300      	movs	r3, #0
 801057a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 801057e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8010582:	4619      	mov	r1, r3
 8010584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010586:	f000 fc7d 	bl	8010e84 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 801058a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801058e:	2b00      	cmp	r3, #0
 8010590:	d003      	beq.n	801059a <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 8010592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010596:	2b00      	cmp	r3, #0
 8010598:	d102      	bne.n	80105a0 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 801059a:	2301      	movs	r3, #1
 801059c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 80105a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80105a2:	f000 fb15 	bl	8010bd0 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 80105a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00a      	beq.n	80105c4 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 80105ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80105b6:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 80105ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105bc:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d901      	bls.n	80105c8 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 80105c4:	2301      	movs	r3, #1
 80105c6:	e000      	b.n	80105ca <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 80105c8:	2300      	movs	r3, #0
 80105ca:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 80105ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d006      	beq.n	80105e4 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 80105d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105d8:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 80105dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d101      	bne.n	80105e8 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 80105e4:	2301      	movs	r3, #1
 80105e6:	e000      	b.n	80105ea <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 80105e8:	2300      	movs	r3, #0
 80105ea:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 80105ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105f0:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 80105f2:	2b01      	cmp	r3, #1
 80105f4:	d10e      	bne.n	8010614 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 80105f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00a      	beq.n	8010614 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 80105fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010600:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 8010604:	2b09      	cmp	r3, #9
 8010606:	d105      	bne.n	8010614 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 8010608:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 8010610:	2301      	movs	r3, #1
 8010612:	e000      	b.n	8010616 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 8010614:	2300      	movs	r3, #0
	run_smudge_detection =
 8010616:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 801061a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801061c:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 8010620:	2b09      	cmp	r3, #9
 8010622:	f000 80a6 	beq.w	8010772 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 8010626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010628:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 801062a:	2b01      	cmp	r3, #1
 801062c:	f040 80a1 	bne.w	8010772 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 8010630:	2302      	movs	r3, #2
 8010632:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 8010636:	2300      	movs	r3, #0
 8010638:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801063c:	e02d      	b.n	801069a <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 801063e:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8010642:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010644:	234c      	movs	r3, #76	; 0x4c
 8010646:	fb01 f303 	mul.w	r3, r1, r3
 801064a:	4413      	add	r3, r2
 801064c:	335e      	adds	r3, #94	; 0x5e
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	2b09      	cmp	r3, #9
 8010652:	d11d      	bne.n	8010690 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 8010654:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8010658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801065a:	234c      	movs	r3, #76	; 0x4c
 801065c:	fb01 f303 	mul.w	r3, r1, r3
 8010660:	4413      	add	r3, r2
 8010662:	335a      	adds	r3, #90	; 0x5a
 8010664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010668:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 801066a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801066c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 801066e:	429a      	cmp	r2, r3
 8010670:	dc03      	bgt.n	801067a <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010678:	e00a      	b.n	8010690 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 801067a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801067e:	2b02      	cmp	r3, #2
 8010680:	d106      	bne.n	8010690 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 8010682:	2301      	movs	r3, #1
 8010684:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 8010688:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801068c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 8010690:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010694:	3301      	adds	r3, #1
 8010696:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801069a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801069c:	7c9a      	ldrb	r2, [r3, #18]
 801069e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d3cb      	bcc.n	801063e <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 80106a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80106aa:	2b02      	cmp	r3, #2
 80106ac:	d102      	bne.n	80106b4 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 80106b4:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 80106b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106ba:	234c      	movs	r3, #76	; 0x4c
 80106bc:	fb01 f303 	mul.w	r3, r1, r3
 80106c0:	4413      	add	r3, r2
 80106c2:	3348      	adds	r3, #72	; 0x48
 80106c4:	881b      	ldrh	r3, [r3, #0]
 80106c6:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 80106c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d150      	bne.n	8010772 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 80106d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80106d2:	2200      	movs	r2, #0
 80106d4:	469a      	mov	sl, r3
 80106d6:	4693      	mov	fp, r2
 80106d8:	4652      	mov	r2, sl
 80106da:	465b      	mov	r3, fp
 80106dc:	f04f 0000 	mov.w	r0, #0
 80106e0:	f04f 0100 	mov.w	r1, #0
 80106e4:	0159      	lsls	r1, r3, #5
 80106e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80106ea:	0150      	lsls	r0, r2, #5
 80106ec:	4602      	mov	r2, r0
 80106ee:	460b      	mov	r3, r1
 80106f0:	ebb2 040a 	subs.w	r4, r2, sl
 80106f4:	eb63 050b 	sbc.w	r5, r3, fp
 80106f8:	f04f 0200 	mov.w	r2, #0
 80106fc:	f04f 0300 	mov.w	r3, #0
 8010700:	00ab      	lsls	r3, r5, #2
 8010702:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010706:	00a2      	lsls	r2, r4, #2
 8010708:	4614      	mov	r4, r2
 801070a:	461d      	mov	r5, r3
 801070c:	eb14 080a 	adds.w	r8, r4, sl
 8010710:	eb45 090b 	adc.w	r9, r5, fp
 8010714:	f04f 0200 	mov.w	r2, #0
 8010718:	f04f 0300 	mov.w	r3, #0
 801071c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010728:	4690      	mov	r8, r2
 801072a:	4699      	mov	r9, r3
 801072c:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 8010730:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8010734:	f04f 0200 	mov.w	r2, #0
 8010738:	f04f 0300 	mov.w	r3, #0
 801073c:	024b      	lsls	r3, r1, #9
 801073e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8010742:	0242      	lsls	r2, r0, #9
 8010744:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8010748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801074c:	2200      	movs	r2, #0
 801074e:	61bb      	str	r3, [r7, #24]
 8010750:	61fa      	str	r2, [r7, #28]
 8010752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010756:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801075a:	4621      	mov	r1, r4
 801075c:	428a      	cmp	r2, r1
 801075e:	4629      	mov	r1, r5
 8010760:	418b      	sbcs	r3, r1
 8010762:	d203      	bcs.n	801076c <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 8010764:	2301      	movs	r3, #1
 8010766:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801076a:	e002      	b.n	8010772 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 801076c:	2300      	movs	r3, #0
 801076e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 8010772:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 810b 	beq.w	8010992 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 801077c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801077e:	2200      	movs	r2, #0
 8010780:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 8010782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010784:	f7ff fb80 	bl	800fe88 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 8010788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801078a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801078e:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 8010790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 8010796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 801079c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801079e:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 80107a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80107a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a8:	1ad2      	subs	r2, r2, r3
 80107aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ac:	4413      	add	r3, r2
 80107ae:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 80107b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	da02      	bge.n	80107bc <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 80107b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107b8:	425b      	negs	r3, r3
 80107ba:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 80107bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107be:	699b      	ldr	r3, [r3, #24]
 80107c0:	461a      	mov	r2, r3
 80107c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107c4:	4293      	cmp	r3, r2
 80107c6:	dd0c      	ble.n	80107e2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 80107c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 80107ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 80107cc:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 80107ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d0:	429a      	cmp	r2, r3
 80107d2:	da03      	bge.n	80107dc <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 80107d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107d6:	2201      	movs	r2, #1
 80107d8:	709a      	strb	r2, [r3, #2]
 80107da:	e002      	b.n	80107e2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 80107dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107de:	2202      	movs	r2, #2
 80107e0:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 80107e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	1c5a      	adds	r2, r3, #1
 80107e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ea:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 80107ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ee:	681a      	ldr	r2, [r3, #0]
 80107f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107f2:	695b      	ldr	r3, [r3, #20]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d906      	bls.n	8010806 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 80107f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107fa:	2201      	movs	r2, #1
 80107fc:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 80107fe:	2302      	movs	r3, #2
 8010800:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010804:	e014      	b.n	8010830 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 8010806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010808:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801080c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801080e:	2000      	movs	r0, #0
 8010810:	6139      	str	r1, [r7, #16]
 8010812:	6178      	str	r0, [r7, #20]
 8010814:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010818:	4621      	mov	r1, r4
 801081a:	1851      	adds	r1, r2, r1
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	4629      	mov	r1, r5
 8010820:	eb43 0101 	adc.w	r1, r3, r1
 8010824:	60f9      	str	r1, [r7, #12]
 8010826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010828:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801082c:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 8010830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	429a      	cmp	r2, r3
 801083a:	d202      	bcs.n	8010842 <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 801083c:	2301      	movs	r3, #1
 801083e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 8010842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010844:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2200      	movs	r2, #0
 801084e:	603b      	str	r3, [r7, #0]
 8010850:	607a      	str	r2, [r7, #4]
 8010852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010856:	f7f0 f9cf 	bl	8000bf8 <__aeabi_uldivmod>
 801085a:	4602      	mov	r2, r0
 801085c:	460b      	mov	r3, r1
		xtalk_offset_out =
 801085e:	4613      	mov	r3, r2
 8010860:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 8010862:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010866:	1ad2      	subs	r2, r2, r3
 8010868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801086a:	4413      	add	r3, r2
 801086c:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 801086e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010870:	2b00      	cmp	r3, #0
 8010872:	da02      	bge.n	801087a <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 8010874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010876:	425b      	negs	r3, r3
 8010878:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 801087a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801087e:	2b00      	cmp	r3, #0
 8010880:	d112      	bne.n	80108a8 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 8010882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010884:	69db      	ldr	r3, [r3, #28]
 8010886:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8010888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801088a:	4293      	cmp	r3, r2
 801088c:	db0c      	blt.n	80108a8 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 801088e:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 8010890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 8010892:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 8010894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010896:	429a      	cmp	r2, r3
 8010898:	da03      	bge.n	80108a2 <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 801089a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801089c:	2201      	movs	r2, #1
 801089e:	70da      	strb	r2, [r3, #3]
 80108a0:	e002      	b.n	80108a8 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 80108a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108a4:	2202      	movs	r2, #2
 80108a6:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 80108a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d108      	bne.n	80108c2 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 80108b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108b2:	69db      	ldr	r3, [r3, #28]
 80108b4:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 80108b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108b8:	4293      	cmp	r3, r2
 80108ba:	da02      	bge.n	80108c2 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 80108bc:	2302      	movs	r3, #2
 80108be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 80108c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108c4:	2200      	movs	r2, #0
 80108c6:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 80108c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d112      	bne.n	80108f6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 80108d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108d2:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00e      	beq.n	80108f6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 80108d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108da:	6a1b      	ldr	r3, [r3, #32]
 80108dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80108e0:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 80108e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d905      	bls.n	80108f6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 80108ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108ec:	2201      	movs	r2, #1
 80108ee:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 80108f0:	2302      	movs	r3, #2
 80108f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 80108f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108f8:	7c1b      	ldrb	r3, [r3, #16]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d007      	beq.n	801090e <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 80108fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010900:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 8010902:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010904:	429a      	cmp	r2, r3
 8010906:	d902      	bls.n	801090e <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 8010908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801090a:	68db      	ldr	r3, [r3, #12]
 801090c:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 801090e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010910:	7c1b      	ldrb	r3, [r3, #16]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d107      	bne.n	8010926 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 8010916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010918:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 801091a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801091c:	429a      	cmp	r2, r3
 801091e:	d202      	bcs.n	8010926 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 8010920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 8010926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010928:	089b      	lsrs	r3, r3, #2
 801092a:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 801092c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801092e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010932:	d301      	bcc.n	8010938 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 8010934:	4b3e      	ldr	r3, [pc, #248]	; (8010a30 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 8010936:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 8010938:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801093c:	2b00      	cmp	r3, #0
 801093e:	d10d      	bne.n	801095c <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8010940:	2300      	movs	r3, #0
 8010942:	9301      	str	r3, [sp, #4]
 8010944:	2301      	movs	r3, #1
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801094c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801094e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010950:	f7ff fc00 	bl	8010154 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 8010954:	2302      	movs	r3, #2
 8010956:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801095a:	e009      	b.n	8010970 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 801095c:	2301      	movs	r3, #1
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	2301      	movs	r3, #1
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010968:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801096a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801096c:	f7ff fbf2 	bl	8010154 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 8010970:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010974:	2b02      	cmp	r3, #2
 8010976:	d10c      	bne.n	8010992 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 8010978:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801097a:	f04f 0200 	mov.w	r2, #0
 801097e:	f04f 0300 	mov.w	r3, #0
 8010982:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 8010986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 801098c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801098e:	2200      	movs	r2, #0
 8010990:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 8010992:	2300      	movs	r3, #0
 8010994:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 8010998:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801099c:	2b01      	cmp	r3, #1
 801099e:	d140      	bne.n	8010a22 <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 80109a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109a8:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 80109aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109ac:	691a      	ldr	r2, [r3, #16]
 80109ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d202      	bcs.n	80109bc <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 80109b6:	2301      	movs	r3, #1
 80109b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 80109bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c0:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 80109c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d110      	bne.n	80109ec <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 80109ca:	2300      	movs	r3, #0
 80109cc:	9301      	str	r3, [sp, #4]
 80109ce:	2300      	movs	r3, #0
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80109d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109da:	f7ff fbbb 	bl	8010154 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 80109de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109e0:	2202      	movs	r2, #2
 80109e2:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 80109e4:	2302      	movs	r3, #2
 80109e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80109ea:	e009      	b.n	8010a00 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 80109ec:	2301      	movs	r3, #1
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	2300      	movs	r3, #0
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109f8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80109fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109fc:	f7ff fbaa 	bl	8010154 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 8010a00:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010a04:	2b02      	cmp	r3, #2
 8010a06:	d10c      	bne.n	8010a22 <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 8010a08:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010a0a:	f04f 0200 	mov.w	r2, #0
 8010a0e:	f04f 0300 	mov.w	r3, #0
 8010a12:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 8010a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a18:	2200      	movs	r2, #0
 8010a1a:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 8010a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a1e:	2200      	movs	r2, #0
 8010a20:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010a22:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3780      	adds	r7, #128	; 0x80
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a30:	0003ffff 	.word	0x0003ffff

08010a34 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	3318      	adds	r3, #24
 8010a44:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8010a4c:	3308      	adds	r3, #8
 8010a4e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a56:	2201      	movs	r2, #1
 8010a58:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a62:	2201      	movs	r2, #1
 8010a64:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a7e:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a88:	461a      	mov	r2, r3
 8010a8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010a8e:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a98:	461a      	mov	r2, r3
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	23c8      	movs	r3, #200	; 0xc8
 8010ab6:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8010ac6:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ad6:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	4b3a      	ldr	r3, [pc, #232]	; (8010bcc <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 8010ae4:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010aee:	461a      	mov	r2, r3
 8010af0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8010af4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010afe:	2200      	movs	r2, #0
 8010b00:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b0e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b1c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b32:	461a      	mov	r2, r3
 8010b34:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 8010b38:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b42:	461a      	mov	r2, r3
 8010b44:	230a      	movs	r3, #10
 8010b46:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b50:	461a      	mov	r2, r3
 8010b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b56:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b60:	f44f 7261 	mov.w	r2, #900	; 0x384
 8010b64:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b6e:	461a      	mov	r2, r3
 8010b70:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010b74:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b7e:	461a      	mov	r2, r3
 8010b80:	2300      	movs	r3, #0
 8010b82:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	2300      	movs	r3, #0
 8010b90:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8010b9a:	3310      	adds	r3, #16
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	f04f 0200 	mov.w	r2, #0
 8010ba2:	f04f 0300 	mov.w	r3, #0
 8010ba6:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f000 f809 	bl	8010bd0 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 8010bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3718      	adds	r7, #24
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	000ff800 	.word	0x000ff800

08010bd0 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b085      	sub	sp, #20
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010be2:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2200      	movs	r2, #0
 8010be8:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	2200      	movs	r2, #0
 8010bee:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	2200      	movs	r2, #0
 8010c06:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	2200      	movs	r2, #0
 8010c12:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	2200      	movs	r2, #0
 8010c18:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 8010c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3714      	adds	r7, #20
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	3318      	adds	r3, #24
 8010c40:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c48:	461a      	mov	r2, r3
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c56:	2200      	movs	r2, #0
 8010c58:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c62:	2200      	movs	r2, #0
 8010c64:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8010c6e:	3308      	adds	r3, #8
 8010c70:	2218      	movs	r2, #24
 8010c72:	2100      	movs	r1, #0
 8010c74:	4618      	mov	r0, r3
 8010c76:	f00e fc39 	bl	801f4ec <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 8010c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3710      	adds	r7, #16
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8010c86:	b480      	push	{r7}
 8010c88:	b085      	sub	sp, #20
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	3318      	adds	r3, #24
 8010c96:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c9e:	2203      	movs	r2, #3
 8010ca0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010caa:	2200      	movs	r2, #0
 8010cac:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d00:	2200      	movs	r2, #0
 8010d02:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 8010d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3714      	adds	r7, #20
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr

08010d16 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8010d16:	b480      	push	{r7}
 8010d18:	b085      	sub	sp, #20
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	3318      	adds	r3, #24
 8010d26:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d2e:	22ff      	movs	r2, #255	; 0xff
 8010d30:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d46:	461a      	mov	r2, r3
 8010d48:	2300      	movs	r3, #0
 8010d4a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d54:	2200      	movs	r2, #0
 8010d56:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d60:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d007      	beq.n	8010d78 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d6e:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d7e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d007      	beq.n	8010d96 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d8c:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 8010d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8010dae:	b480      	push	{r7}
 8010db0:	b087      	sub	sp, #28
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	60f8      	str	r0, [r7, #12]
 8010db6:	60b9      	str	r1, [r7, #8]
 8010db8:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	229b      	movs	r2, #155	; 0x9b
 8010dce:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 8010dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	371c      	adds	r7, #28
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	3318      	adds	r3, #24
 8010dec:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010dee:	2300      	movs	r3, #0
 8010df0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dfe:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e0e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8010e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e1c:	b2da      	uxtb	r2, r3
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8010e2a:	f003 0303 	and.w	r3, r3, #3
 8010e2e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e36:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8010e3e:	4413      	add	r3, r2
 8010e40:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e56:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e60:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e6a:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 8010e74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3714      	adds	r7, #20
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b087      	sub	sp, #28
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	3318      	adds	r3, #24
 8010e92:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010e94:	2300      	movs	r3, #0
 8010e96:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010ea2:	2b07      	cmp	r3, #7
 8010ea4:	bf0c      	ite	eq
 8010ea6:	2301      	moveq	r3, #1
 8010ea8:	2300      	movne	r3, #0
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 8010eae:	2300      	movs	r3, #0
 8010eb0:	75fb      	strb	r3, [r7, #23]
 8010eb2:	e019      	b.n	8010ee8 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 8010eb4:	7df9      	ldrb	r1, [r7, #23]
 8010eb6:	7bbb      	ldrb	r3, [r7, #14]
 8010eb8:	6938      	ldr	r0, [r7, #16]
 8010eba:	461a      	mov	r2, r3
 8010ebc:	0052      	lsls	r2, r2, #1
 8010ebe:	441a      	add	r2, r3
 8010ec0:	0153      	lsls	r3, r2, #5
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	005b      	lsls	r3, r3, #1
 8010ec8:	440b      	add	r3, r1
 8010eca:	019b      	lsls	r3, r3, #6
 8010ecc:	4413      	add	r3, r2
 8010ece:	4403      	add	r3, r0
 8010ed0:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8010ed4:	3314      	adds	r3, #20
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dd02      	ble.n	8010ee2 <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 8010edc:	7dbb      	ldrb	r3, [r7, #22]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	75fb      	strb	r3, [r7, #23]
 8010ee8:	7dfb      	ldrb	r3, [r7, #23]
 8010eea:	2b05      	cmp	r3, #5
 8010eec:	d9e2      	bls.n	8010eb4 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	7dba      	ldrb	r2, [r7, #22]
 8010ef2:	701a      	strb	r2, [r3, #0]

	return status;
 8010ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	371c      	adds	r7, #28
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b085      	sub	sp, #20
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 8010f12:	88fb      	ldrh	r3, [r7, #6]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d005      	beq.n	8010f24 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8010f18:	88fb      	ldrh	r3, [r7, #6]
 8010f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010f1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f22:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 8010f24:	68fb      	ldr	r3, [r7, #12]
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3714      	adds	r7, #20
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 8010f32:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010f36:	b089      	sub	sp, #36	; 0x24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
 8010f40:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 8010f42:	f04f 0200 	mov.w	r2, #0
 8010f46:	f04f 0300 	mov.w	r3, #0
 8010f4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	fb02 f303 	mul.w	r3, r2, r3
 8010f5a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	0b1b      	lsrs	r3, r3, #12
 8010f60:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	2200      	movs	r2, #0
 8010f66:	469a      	mov	sl, r3
 8010f68:	4693      	mov	fp, r2
 8010f6a:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	fb02 f303 	mul.w	r3, r2, r3
 8010f76:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	091b      	lsrs	r3, r3, #4
 8010f7c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2200      	movs	r2, #0
 8010f82:	4698      	mov	r8, r3
 8010f84:	4691      	mov	r9, r2
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	fb08 f203 	mul.w	r2, r8, r3
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	fb09 f303 	mul.w	r3, r9, r3
 8010f92:	4413      	add	r3, r2
 8010f94:	69ba      	ldr	r2, [r7, #24]
 8010f96:	fba2 4508 	umull	r4, r5, r2, r8
 8010f9a:	442b      	add	r3, r5
 8010f9c:	461d      	mov	r5, r3
 8010f9e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8010fa2:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 8010fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010faa:	f04f 0200 	mov.w	r2, #0
 8010fae:	f04f 0300 	mov.w	r3, #0
 8010fb2:	0b02      	lsrs	r2, r0, #12
 8010fb4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8010fb8:	0b0b      	lsrs	r3, r1, #12
 8010fba:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 8010fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d305      	bcc.n	8010fd2 <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 8010fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010fca:	f04f 0300 	mov.w	r3, #0
 8010fce:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	617b      	str	r3, [r7, #20]

	return duration_us;
 8010fd6:	697b      	ldr	r3, [r7, #20]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3724      	adds	r7, #36	; 0x24
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010fe2:	4770      	bx	lr

08010fe4 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 8010fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010fe8:	b096      	sub	sp, #88	; 0x58
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010fee:	460b      	mov	r3, r1
 8010ff0:	627a      	str	r2, [r7, #36]	; 0x24
 8010ff2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 8010ff4:	f04f 0200 	mov.w	r2, #0
 8010ff8:	f04f 0300 	mov.w	r3, #0
 8010ffc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 8011000:	f04f 0200 	mov.w	r2, #0
 8011004:	f04f 0300 	mov.w	r3, #0
 8011008:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 801100c:	2300      	movs	r3, #0
 801100e:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 8011010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011012:	17da      	asrs	r2, r3, #31
 8011014:	469a      	mov	sl, r3
 8011016:	4693      	mov	fp, r2
 8011018:	4652      	mov	r2, sl
 801101a:	465b      	mov	r3, fp
 801101c:	f04f 0000 	mov.w	r0, #0
 8011020:	f04f 0100 	mov.w	r1, #0
 8011024:	0159      	lsls	r1, r3, #5
 8011026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801102a:	0150      	lsls	r0, r2, #5
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	ebb2 040a 	subs.w	r4, r2, sl
 8011034:	eb63 050b 	sbc.w	r5, r3, fp
 8011038:	f04f 0200 	mov.w	r2, #0
 801103c:	f04f 0300 	mov.w	r3, #0
 8011040:	00ab      	lsls	r3, r5, #2
 8011042:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011046:	00a2      	lsls	r2, r4, #2
 8011048:	4614      	mov	r4, r2
 801104a:	461d      	mov	r5, r3
 801104c:	eb14 080a 	adds.w	r8, r4, sl
 8011050:	eb45 090b 	adc.w	r9, r5, fp
 8011054:	f04f 0200 	mov.w	r2, #0
 8011058:	f04f 0300 	mov.w	r3, #0
 801105c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8011060:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 8011064:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 8011068:	4690      	mov	r8, r2
 801106a:	4699      	mov	r9, r3
 801106c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 8011070:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00d      	beq.n	8011092 <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 8011076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011078:	2200      	movs	r2, #0
 801107a:	61bb      	str	r3, [r7, #24]
 801107c:	61fa      	str	r2, [r7, #28]
 801107e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011082:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011086:	f7ef fdb7 	bl	8000bf8 <__aeabi_uldivmod>
 801108a:	4602      	mov	r2, r0
 801108c:	460b      	mov	r3, r1
 801108e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 8011092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011094:	2b00      	cmp	r3, #0
 8011096:	d02a      	beq.n	80110ee <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8011098:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801109c:	f04f 0200 	mov.w	r2, #0
 80110a0:	f04f 0300 	mov.w	r3, #0
 80110a4:	02cb      	lsls	r3, r1, #11
 80110a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80110aa:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 80110ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110ae:	0849      	lsrs	r1, r1, #1
 80110b0:	2000      	movs	r0, #0
 80110b2:	6139      	str	r1, [r7, #16]
 80110b4:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 80110b6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80110ba:	4621      	mov	r1, r4
 80110bc:	1851      	adds	r1, r2, r1
 80110be:	6039      	str	r1, [r7, #0]
 80110c0:	4629      	mov	r1, r5
 80110c2:	eb43 0101 	adc.w	r1, r3, r1
 80110c6:	6079      	str	r1, [r7, #4]
 80110c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80110cc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 80110d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d2:	2200      	movs	r2, #0
 80110d4:	60bb      	str	r3, [r7, #8]
 80110d6:	60fa      	str	r2, [r7, #12]
 80110d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80110dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80110e0:	f7ef fd8a 	bl	8000bf8 <__aeabi_uldivmod>
 80110e4:	4602      	mov	r2, r0
 80110e6:	460b      	mov	r3, r1
 80110e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80110ec:	e00b      	b.n	8011106 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 80110ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80110f2:	f04f 0200 	mov.w	r2, #0
 80110f6:	f04f 0300 	mov.w	r3, #0
 80110fa:	02cb      	lsls	r3, r1, #11
 80110fc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8011100:	02c2      	lsls	r2, r0, #11
 8011102:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 8011106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011108:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 801110a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801110c:	4618      	mov	r0, r3
 801110e:	3758      	adds	r7, #88	; 0x58
 8011110:	46bd      	mov	sp, r7
 8011112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011116 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 8011116:	b480      	push	{r7}
 8011118:	b085      	sub	sp, #20
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 801111e:	2300      	movs	r3, #0
 8011120:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8011122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011126:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 8011128:	e002      	b.n	8011130 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	089b      	lsrs	r3, r3, #2
 801112e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8011130:	68ba      	ldr	r2, [r7, #8]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	429a      	cmp	r2, r3
 8011136:	d8f8      	bhi.n	801112a <VL53L1_isqrt+0x14>

	while (bit != 0) {
 8011138:	e017      	b.n	801116a <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 801113a:	68fa      	ldr	r2, [r7, #12]
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	4413      	add	r3, r2
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d30b      	bcc.n	801115e <VL53L1_isqrt+0x48>
			num -= res + bit;
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	4413      	add	r3, r2
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	085b      	lsrs	r3, r3, #1
 8011156:	68ba      	ldr	r2, [r7, #8]
 8011158:	4413      	add	r3, r2
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	e002      	b.n	8011164 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	085b      	lsrs	r3, r3, #1
 8011162:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	089b      	lsrs	r3, r3, #2
 8011168:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1e4      	bne.n	801113a <VL53L1_isqrt+0x24>
	}

	return res;
 8011170:	68fb      	ldr	r3, [r7, #12]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3714      	adds	r7, #20
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr

0801117e <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 801117e:	b580      	push	{r7, lr}
 8011180:	b084      	sub	sp, #16
 8011182:	af00      	add	r7, sp, #0
 8011184:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 8011186:	2300      	movs	r3, #0
 8011188:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011194:	4618      	mov	r0, r3
 8011196:	f000 faa5 	bl	80116e4 <VL53L1_decode_vcsel_period>
 801119a:	4603      	mov	r3, r0
	period = 2048 *
 801119c:	02db      	lsls	r3, r3, #11
 801119e:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80111aa:	461a      	mov	r2, r3
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	4413      	add	r3, r2
 80111b0:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111b8:	02db      	lsls	r3, r3, #11
 80111ba:	68fa      	ldr	r2, [r7, #12]
 80111bc:	4413      	add	r3, r2
 80111be:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80111c6:	02db      	lsls	r3, r3, #11
 80111c8:	68fa      	ldr	r2, [r7, #12]
 80111ca:	1ad3      	subs	r3, r2, r3
 80111cc:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d009      	beq.n	80111e8 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	68ba      	ldr	r2, [r7, #8]
 80111d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80111dc:	68b9      	ldr	r1, [r7, #8]
 80111de:	fb01 f202 	mul.w	r2, r1, r2
 80111e2:	1a9b      	subs	r3, r3, r2
 80111e4:	60fb      	str	r3, [r7, #12]
 80111e6:	e001      	b.n	80111ec <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 80111e8:	2300      	movs	r3, #0
 80111ea:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 80111f6:	bf00      	nop
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b084      	sub	sp, #16
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
 8011206:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 801120c:	2300      	movs	r3, #0
 801120e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 8011210:	6838      	ldr	r0, [r7, #0]
 8011212:	f000 fb90 	bl	8011936 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801121c:	4618      	mov	r0, r3
 801121e:	f7ff ff7a 	bl	8011116 <VL53L1_isqrt>
 8011222:	4603      	mov	r3, r0
	VL53L1_p_032  =
 8011224:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	fb02 f303 	mul.w	r3, r2, r3
 801122e:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	3307      	adds	r3, #7
 8011234:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	111b      	asrs	r3, r3, #4
 801123a:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	4413      	add	r3, r2
 8011246:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2200      	movs	r2, #0
 801124c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	2200      	movs	r2, #0
 8011254:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8011258:	2300      	movs	r3, #0
 801125a:	73fb      	strb	r3, [r7, #15]
 801125c:	e01e      	b.n	801129c <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 801125e:	7bfa      	ldrb	r2, [r7, #15]
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	3206      	adds	r2, #6
 8011264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011268:	68ba      	ldr	r2, [r7, #8]
 801126a:	429a      	cmp	r2, r3
 801126c:	dd13      	ble.n	8011296 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011274:	7bf9      	ldrb	r1, [r7, #15]
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	3106      	adds	r1, #6
 801127a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801127e:	441a      	add	r2, r3
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 801128c:	3301      	adds	r3, #1
 801128e:	b2da      	uxtb	r2, r3
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8011296:	7bfb      	ldrb	r3, [r7, #15]
 8011298:	3301      	adds	r3, #1
 801129a:	73fb      	strb	r3, [r7, #15]
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	7a9b      	ldrb	r3, [r3, #10]
 80112a0:	7bfa      	ldrb	r2, [r7, #15]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d3db      	bcc.n	801125e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d01c      	beq.n	80112ea <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 80112c2:	683a      	ldr	r2, [r7, #0]
 80112c4:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 80112c8:	0852      	lsrs	r2, r2, #1
 80112ca:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 80112cc:	441a      	add	r2, r3
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 80112e0:	fb93 f2f2 	sdiv	r2, r3, r2
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 80112ea:	bf00      	nop
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 80112f2:	b480      	push	{r7}
 80112f4:	b085      	sub	sp, #20
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 80112fa:	2300      	movs	r3, #0
 80112fc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 80112fe:	2300      	movs	r3, #0
 8011300:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	7b1b      	ldrb	r3, [r3, #12]
 801130a:	f003 0307 	and.w	r3, r3, #7
 801130e:	2b07      	cmp	r3, #7
 8011310:	d13a      	bne.n	8011388 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 8011312:	2300      	movs	r3, #0
 8011314:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011316:	2300      	movs	r3, #0
 8011318:	73bb      	strb	r3, [r7, #14]
 801131a:	e01f      	b.n	801135c <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 801131c:	7bbb      	ldrb	r3, [r7, #14]
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	4413      	add	r3, r2
 8011322:	7b1b      	ldrb	r3, [r3, #12]
 8011324:	f003 0307 	and.w	r3, r3, #7
 8011328:	2b07      	cmp	r3, #7
 801132a:	d014      	beq.n	8011356 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 801132c:	7bba      	ldrb	r2, [r7, #14]
 801132e:	7b7b      	ldrb	r3, [r7, #13]
 8011330:	6879      	ldr	r1, [r7, #4]
 8011332:	440a      	add	r2, r1
 8011334:	7b11      	ldrb	r1, [r2, #12]
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	4413      	add	r3, r2
 801133a:	460a      	mov	r2, r1
 801133c:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 801133e:	7bba      	ldrb	r2, [r7, #14]
 8011340:	7b7b      	ldrb	r3, [r7, #13]
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	440a      	add	r2, r1
 8011346:	7c91      	ldrb	r1, [r2, #18]
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	4413      	add	r3, r2
 801134c:	460a      	mov	r2, r1
 801134e:	749a      	strb	r2, [r3, #18]
				i++;
 8011350:	7b7b      	ldrb	r3, [r7, #13]
 8011352:	3301      	adds	r3, #1
 8011354:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011356:	7bbb      	ldrb	r3, [r7, #14]
 8011358:	3301      	adds	r3, #1
 801135a:	73bb      	strb	r3, [r7, #14]
 801135c:	7bbb      	ldrb	r3, [r7, #14]
 801135e:	2b05      	cmp	r3, #5
 8011360:	d9dc      	bls.n	801131c <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011362:	7b7b      	ldrb	r3, [r7, #13]
 8011364:	73bb      	strb	r3, [r7, #14]
 8011366:	e00c      	b.n	8011382 <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 8011368:	7bbb      	ldrb	r3, [r7, #14]
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	4413      	add	r3, r2
 801136e:	2210      	movs	r2, #16
 8011370:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 8011372:	7bbb      	ldrb	r3, [r7, #14]
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	4413      	add	r3, r2
 8011378:	2200      	movs	r2, #0
 801137a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 801137c:	7bbb      	ldrb	r3, [r7, #14]
 801137e:	3301      	adds	r3, #1
 8011380:	73bb      	strb	r3, [r7, #14]
 8011382:	7bbb      	ldrb	r3, [r7, #14]
 8011384:	2b05      	cmp	r3, #5
 8011386:	d9ef      	bls.n	8011368 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	7adb      	ldrb	r3, [r3, #11]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d023      	beq.n	80113d8 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	7adb      	ldrb	r3, [r3, #11]
 8011394:	73fb      	strb	r3, [r7, #15]
 8011396:	e00f      	b.n	80113b8 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 8011398:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 801139a:	7bfb      	ldrb	r3, [r7, #15]
 801139c:	687a      	ldr	r2, [r7, #4]
 801139e:	7ad2      	ldrb	r2, [r2, #11]
 80113a0:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	3106      	adds	r1, #6
 80113a6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	3206      	adds	r2, #6
 80113ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 80113b2:	7bfb      	ldrb	r3, [r7, #15]
 80113b4:	3301      	adds	r3, #1
 80113b6:	73fb      	strb	r3, [r7, #15]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 80113bc:	7bfa      	ldrb	r2, [r7, #15]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d3ea      	bcc.n	8011398 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2200      	movs	r2, #0
 80113d6:	72da      	strb	r2, [r3, #11]
	}
}
 80113d8:	bf00      	nop
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	4603      	mov	r3, r0
 80113ec:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80113f6:	88fb      	ldrh	r3, [r7, #6]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff fd83 	bl	8010f04 <VL53L1_calc_pll_period_us>
 80113fe:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 8011404:	f249 2257 	movw	r2, #37463	; 0x9257
 8011408:	fb02 f303 	mul.w	r3, r2, r3
 801140c:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011414:	0c1b      	lsrs	r3, r3, #16
 8011416:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 8011418:	68bb      	ldr	r3, [r7, #8]
}
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 8011422:	b480      	push	{r7}
 8011424:	b087      	sub	sp, #28
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
 801142a:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 801142c:	2300      	movs	r3, #0
 801142e:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 8011430:	2307      	movs	r3, #7
 8011432:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 8011434:	2300      	movs	r3, #0
 8011436:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801143e:	db03      	blt.n	8011448 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 8011440:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011444:	617b      	str	r3, [r7, #20]
 8011446:	e004      	b.n	8011452 <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2b00      	cmp	r3, #0
 801144c:	dd01      	ble.n	8011452 <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011458:	dd02      	ble.n	8011460 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 801145a:	2303      	movs	r3, #3
 801145c:	613b      	str	r3, [r7, #16]
 801145e:	e001      	b.n	8011464 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 8011460:	2307      	movs	r3, #7
 8011462:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d009      	beq.n	801147e <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 801146a:	697a      	ldr	r2, [r7, #20]
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	409a      	lsls	r2, r3
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	085b      	lsrs	r3, r3, #1
 8011474:	441a      	add	r2, r3
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	fbb2 f3f3 	udiv	r3, r2, r3
 801147c:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011484:	dd02      	ble.n	801148c <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	011b      	lsls	r3, r3, #4
 801148a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011492:	d302      	bcc.n	801149a <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 8011494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011498:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 801149e:	89fb      	ldrh	r3, [r7, #14]
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	371c      	adds	r7, #28
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr

080114ac <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b087      	sub	sp, #28
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	60f8      	str	r0, [r7, #12]
 80114b4:	60b9      	str	r1, [r7, #8]
 80114b6:	603b      	str	r3, [r7, #0]
 80114b8:	4613      	mov	r3, r2
 80114ba:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 80114bc:	2300      	movs	r3, #0
 80114be:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 80114c0:	2300      	movs	r3, #0
 80114c2:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 80114c4:	88fb      	ldrh	r3, [r7, #6]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d010      	beq.n	80114ec <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	021a      	lsls	r2, r3, #8
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	fa02 f303 	lsl.w	r3, r2, r3
 80114d4:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 80114d6:	88fb      	ldrh	r3, [r7, #6]
 80114d8:	085b      	lsrs	r3, r3, #1
 80114da:	b29b      	uxth	r3, r3
 80114dc:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 80114e2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 80114e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	e004      	b.n	80114f6 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 80114ec:	68ba      	ldr	r2, [r7, #8]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	fa02 f303 	lsl.w	r3, r2, r3
 80114f4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 80114f6:	697a      	ldr	r2, [r7, #20]
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d901      	bls.n	8011502 <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 8011506:	8a7b      	ldrh	r3, [r7, #18]
}
 8011508:	4618      	mov	r0, r3
 801150a:	371c      	adds	r7, #28
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr

08011514 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 8011514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011518:	b093      	sub	sp, #76	; 0x4c
 801151a:	af00      	add	r7, sp, #0
 801151c:	461e      	mov	r6, r3
 801151e:	4603      	mov	r3, r0
 8011520:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011522:	460b      	mov	r3, r1
 8011524:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011526:	4613      	mov	r3, r2
 8011528:	857b      	strh	r3, [r7, #42]	; 0x2a
 801152a:	4633      	mov	r3, r6
 801152c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 8011530:	2300      	movs	r3, #0
 8011532:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 8011534:	f04f 0200 	mov.w	r2, #0
 8011538:	f04f 0300 	mov.w	r3, #0
 801153c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 8011540:	2300      	movs	r3, #0
 8011542:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 8011544:	2300      	movs	r3, #0
 8011546:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8011548:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801154a:	4618      	mov	r0, r3
 801154c:	f7ff fcda 	bl	8010f04 <VL53L1_calc_pll_period_us>
 8011550:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 8011552:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011554:	2200      	movs	r2, #0
 8011556:	623b      	str	r3, [r7, #32]
 8011558:	627a      	str	r2, [r7, #36]	; 0x24
 801155a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801155c:	2200      	movs	r2, #0
 801155e:	61bb      	str	r3, [r7, #24]
 8011560:	61fa      	str	r2, [r7, #28]
 8011562:	6a3b      	ldr	r3, [r7, #32]
 8011564:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011568:	4602      	mov	r2, r0
 801156a:	1a9b      	subs	r3, r3, r2
 801156c:	613b      	str	r3, [r7, #16]
 801156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011570:	460a      	mov	r2, r1
 8011572:	eb63 0302 	sbc.w	r3, r3, r2
 8011576:	617b      	str	r3, [r7, #20]
 8011578:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801157c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8011580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011582:	2200      	movs	r2, #0
 8011584:	469a      	mov	sl, r3
 8011586:	4693      	mov	fp, r2
 8011588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158a:	fb0a f203 	mul.w	r2, sl, r3
 801158e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011590:	fb0b f303 	mul.w	r3, fp, r3
 8011594:	4413      	add	r3, r2
 8011596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011598:	fba2 890a 	umull	r8, r9, r2, sl
 801159c:	444b      	add	r3, r9
 801159e:	4699      	mov	r9, r3
 80115a0:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 80115a4:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 80115a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	da08      	bge.n	80115c2 <VL53L1_range_maths+0xae>
 80115b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80115b4:	1851      	adds	r1, r2, r1
 80115b6:	60b9      	str	r1, [r7, #8]
 80115b8:	f143 0300 	adc.w	r3, r3, #0
 80115bc:	60fb      	str	r3, [r7, #12]
 80115be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80115c2:	f04f 0000 	mov.w	r0, #0
 80115c6:	f04f 0100 	mov.w	r1, #0
 80115ca:	0a50      	lsrs	r0, r2, #9
 80115cc:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80115d0:	1259      	asrs	r1, r3, #9
 80115d2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 80115d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d8:	f249 2257 	movw	r2, #37463	; 0x9257
 80115dc:	fb03 f202 	mul.w	r2, r3, r2
 80115e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e2:	2100      	movs	r1, #0
 80115e4:	fb01 f303 	mul.w	r3, r1, r3
 80115e8:	4413      	add	r3, r2
 80115ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ec:	f249 2157 	movw	r1, #37463	; 0x9257
 80115f0:	fba2 4501 	umull	r4, r5, r2, r1
 80115f4:	442b      	add	r3, r5
 80115f6:	461d      	mov	r5, r3
 80115f8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 80115fc:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8011600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011604:	2b00      	cmp	r3, #0
 8011606:	da07      	bge.n	8011618 <VL53L1_range_maths+0x104>
 8011608:	4934      	ldr	r1, [pc, #208]	; (80116dc <VL53L1_range_maths+0x1c8>)
 801160a:	1851      	adds	r1, r2, r1
 801160c:	6039      	str	r1, [r7, #0]
 801160e:	f143 0300 	adc.w	r3, r3, #0
 8011612:	607b      	str	r3, [r7, #4]
 8011614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011618:	f04f 0000 	mov.w	r0, #0
 801161c:	f04f 0100 	mov.w	r1, #0
 8011620:	0d90      	lsrs	r0, r2, #22
 8011622:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 8011626:	1599      	asrs	r1, r3, #22
 8011628:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011630:	4413      	add	r3, r2
 8011632:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 8011634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011636:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011638:	fb02 f303 	mul.w	r3, r2, r3
 801163c:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 801163e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011640:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011644:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 8011646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011648:	2b00      	cmp	r3, #0
 801164a:	da01      	bge.n	8011650 <VL53L1_range_maths+0x13c>
 801164c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8011650:	12db      	asrs	r3, r3, #11
 8011652:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 8011654:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011658:	2b00      	cmp	r3, #0
 801165a:	d130      	bne.n	80116be <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 801165c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801165e:	4613      	mov	r3, r2
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	4413      	add	r3, r2
 8011664:	005b      	lsls	r3, r3, #1
 8011666:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 8011668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166a:	2b00      	cmp	r3, #0
 801166c:	da00      	bge.n	8011670 <VL53L1_range_maths+0x15c>
 801166e:	3303      	adds	r3, #3
 8011670:	109b      	asrs	r3, r3, #2
 8011672:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 8011674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011676:	4b1a      	ldr	r3, [pc, #104]	; (80116e0 <VL53L1_range_maths+0x1cc>)
 8011678:	fb83 2301 	smull	r2, r3, r3, r1
 801167c:	109a      	asrs	r2, r3, #2
 801167e:	17cb      	asrs	r3, r1, #31
 8011680:	1ad2      	subs	r2, r2, r3
 8011682:	4613      	mov	r3, r2
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	4413      	add	r3, r2
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	1aca      	subs	r2, r1, r3
 801168c:	2a04      	cmp	r2, #4
 801168e:	dc09      	bgt.n	80116a4 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 8011690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011692:	4a13      	ldr	r2, [pc, #76]	; (80116e0 <VL53L1_range_maths+0x1cc>)
 8011694:	fb82 1203 	smull	r1, r2, r2, r3
 8011698:	1092      	asrs	r2, r2, #2
 801169a:	17db      	asrs	r3, r3, #31
 801169c:	1ad3      	subs	r3, r2, r3
 801169e:	b21b      	sxth	r3, r3
 80116a0:	647b      	str	r3, [r7, #68]	; 0x44
 80116a2:	e015      	b.n	80116d0 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 80116a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a6:	4a0e      	ldr	r2, [pc, #56]	; (80116e0 <VL53L1_range_maths+0x1cc>)
 80116a8:	fb82 1203 	smull	r1, r2, r2, r3
 80116ac:	1092      	asrs	r2, r2, #2
 80116ae:	17db      	asrs	r3, r3, #31
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	3301      	adds	r3, #1
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	b21b      	sxth	r3, r3
 80116ba:	647b      	str	r3, [r7, #68]	; 0x44
 80116bc:	e008      	b.n	80116d0 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 80116be:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d104      	bne.n	80116d0 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 80116c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116c8:	0fda      	lsrs	r2, r3, #31
 80116ca:	4413      	add	r3, r2
 80116cc:	105b      	asrs	r3, r3, #1
 80116ce:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 80116d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	374c      	adds	r7, #76	; 0x4c
 80116d6:	46bd      	mov	sp, r7
 80116d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116dc:	003fffff 	.word	0x003fffff
 80116e0:	66666667 	.word	0x66666667

080116e4 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b085      	sub	sp, #20
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	4603      	mov	r3, r0
 80116ec:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 80116f2:	79fb      	ldrb	r3, [r7, #7]
 80116f4:	3301      	adds	r3, #1
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	005b      	lsls	r3, r3, #1
 80116fa:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 80116fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3714      	adds	r7, #20
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr

0801170a <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 801170a:	b480      	push	{r7}
 801170c:	b083      	sub	sp, #12
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
 8011712:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	781a      	ldrb	r2, [r3, #0]
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	7a5a      	ldrb	r2, [r3, #9]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	685a      	ldr	r2, [r3, #4]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	605a      	str	r2, [r3, #4]
}
 801177a:	bf00      	nop
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr

08011786 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 8011786:	b480      	push	{r7}
 8011788:	b087      	sub	sp, #28
 801178a:	af00      	add	r7, sp, #0
 801178c:	60f8      	str	r0, [r7, #12]
 801178e:	460b      	mov	r3, r1
 8011790:	607a      	str	r2, [r7, #4]
 8011792:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8011794:	2300      	movs	r3, #0
 8011796:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2203      	movs	r2, #3
 801179c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2203      	movs	r2, #3
 80117a2:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2200      	movs	r2, #0
 80117a8:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2200      	movs	r2, #0
 80117ae:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2218      	movs	r2, #24
 80117ba:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 80117bc:	897b      	ldrh	r3, [r7, #10]
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2200      	movs	r2, #0
 80117d6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2200      	movs	r2, #0
 80117ee:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2200      	movs	r2, #0
 801181e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2200      	movs	r2, #0
 8011826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2200      	movs	r2, #0
 801182e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2200      	movs	r2, #0
 8011836:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2200      	movs	r2, #0
 801184e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2200      	movs	r2, #0
 8011856:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801185a:	2300      	movs	r3, #0
 801185c:	82fb      	strh	r3, [r7, #22]
 801185e:	e009      	b.n	8011874 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 8011860:	8afb      	ldrh	r3, [r7, #22]
 8011862:	8afa      	ldrh	r2, [r7, #22]
 8011864:	b2d1      	uxtb	r1, r2
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	4413      	add	r3, r2
 801186a:	460a      	mov	r2, r1
 801186c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801186e:	8afb      	ldrh	r3, [r7, #22]
 8011870:	3301      	adds	r3, #1
 8011872:	82fb      	strh	r3, [r7, #22]
 8011874:	8afb      	ldrh	r3, [r7, #22]
 8011876:	2b05      	cmp	r3, #5
 8011878:	d9f2      	bls.n	8011860 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801187a:	2300      	movs	r3, #0
 801187c:	82fb      	strh	r3, [r7, #22]
 801187e:	e007      	b.n	8011890 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 8011880:	8afb      	ldrh	r3, [r7, #22]
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	4413      	add	r3, r2
 8011886:	2201      	movs	r2, #1
 8011888:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801188a:	8afb      	ldrh	r3, [r7, #22]
 801188c:	3301      	adds	r3, #1
 801188e:	82fb      	strh	r3, [r7, #22]
 8011890:	8afb      	ldrh	r3, [r7, #22]
 8011892:	2b05      	cmp	r3, #5
 8011894:	d9f4      	bls.n	8011880 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8011896:	2300      	movs	r3, #0
 8011898:	82fb      	strh	r3, [r7, #22]
 801189a:	e013      	b.n	80118c4 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 801189c:	8afa      	ldrh	r2, [r7, #22]
 801189e:	897b      	ldrh	r3, [r7, #10]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d206      	bcs.n	80118b2 <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 80118a4:	8afa      	ldrh	r2, [r7, #22]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	3206      	adds	r2, #6
 80118aa:	68f9      	ldr	r1, [r7, #12]
 80118ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80118b0:	e005      	b.n	80118be <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 80118b2:	8afa      	ldrh	r2, [r7, #22]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	3206      	adds	r2, #6
 80118b8:	2100      	movs	r1, #0
 80118ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 80118be:	8afb      	ldrh	r3, [r7, #22]
 80118c0:	3301      	adds	r3, #1
 80118c2:	82fb      	strh	r3, [r7, #22]
 80118c4:	8afb      	ldrh	r3, [r7, #22]
 80118c6:	2b17      	cmp	r3, #23
 80118c8:	d9e8      	bls.n	801189c <VL53L1_init_histogram_bin_data_struct+0x116>


}
 80118ca:	bf00      	nop
 80118cc:	bf00      	nop
 80118ce:	371c      	adds	r7, #28
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80118d8:	b480      	push	{r7}
 80118da:	b085      	sub	sp, #20
 80118dc:	af00      	add	r7, sp, #0
 80118de:	4603      	mov	r3, r0
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
 80118e4:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 80118e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	da10      	bge.n	8011910 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80118ee:	7bfb      	ldrb	r3, [r7, #15]
 80118f0:	43db      	mvns	r3, r3
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	f003 0307 	and.w	r3, r3, #7
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	3308      	adds	r3, #8
 80118fc:	b2da      	uxtb	r2, r3
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8011902:	7bfb      	ldrb	r3, [r7, #15]
 8011904:	3b80      	subs	r3, #128	; 0x80
 8011906:	10db      	asrs	r3, r3, #3
 8011908:	b2da      	uxtb	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 801190e:	e00c      	b.n	801192a <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8011910:	7bfb      	ldrb	r3, [r7, #15]
 8011912:	f003 0307 	and.w	r3, r3, #7
 8011916:	b2da      	uxtb	r2, r3
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 801191c:	7bfb      	ldrb	r3, [r7, #15]
 801191e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8011922:	10db      	asrs	r3, r3, #3
 8011924:	b2da      	uxtb	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	701a      	strb	r2, [r3, #0]
}
 801192a:	bf00      	nop
 801192c:	3714      	adds	r7, #20
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr

08011936 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 8011936:	b480      	push	{r7}
 8011938:	b085      	sub	sp, #20
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 801193e:	2300      	movs	r3, #0
 8011940:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 8011942:	2300      	movs	r3, #0
 8011944:	73fb      	strb	r3, [r7, #15]
 8011946:	e02c      	b.n	80119a2 <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 8011948:	7bfb      	ldrb	r3, [r7, #15]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d009      	beq.n	8011962 <VL53L1_hist_find_min_max_bin_values+0x2c>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011954:	7bf9      	ldrb	r1, [r7, #15]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	3106      	adds	r1, #6
 801195a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801195e:	429a      	cmp	r2, r3
 8011960:	db07      	blt.n	8011972 <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 8011962:	7bfa      	ldrb	r2, [r7, #15]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	3206      	adds	r2, #6
 8011968:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 8011972:	7bfb      	ldrb	r3, [r7, #15]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d009      	beq.n	801198c <VL53L1_hist_find_min_max_bin_values+0x56>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801197e:	7bf9      	ldrb	r1, [r7, #15]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	3106      	adds	r1, #6
 8011984:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011988:	429a      	cmp	r2, r3
 801198a:	dc07      	bgt.n	801199c <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 801198c:	7bfa      	ldrb	r2, [r7, #15]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	3206      	adds	r2, #6
 8011992:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 801199c:	7bfb      	ldrb	r3, [r7, #15]
 801199e:	3301      	adds	r3, #1
 80119a0:	73fb      	strb	r3, [r7, #15]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	7a9b      	ldrb	r3, [r3, #10]
 80119a6:	7bfa      	ldrb	r2, [r7, #15]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d3cd      	bcc.n	8011948 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 80119ac:	bf00      	nop
 80119ae:	bf00      	nop
 80119b0:	3714      	adds	r7, #20
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr

080119ba <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 80119ba:	b480      	push	{r7}
 80119bc:	b085      	sub	sp, #20
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 80119c2:	2300      	movs	r3, #0
 80119c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	7adb      	ldrb	r3, [r3, #11]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d03a      	beq.n	8011a44 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80119e0:	2300      	movs	r3, #0
 80119e2:	73fb      	strb	r3, [r7, #15]
 80119e4:	e00e      	b.n	8011a04 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80119ec:	7bf9      	ldrb	r1, [r7, #15]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	3106      	adds	r1, #6
 80119f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119f6:	441a      	add	r2, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80119fe:	7bfb      	ldrb	r3, [r7, #15]
 8011a00:	3301      	adds	r3, #1
 8011a02:	73fb      	strb	r3, [r7, #15]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	7adb      	ldrb	r3, [r3, #11]
 8011a08:	7bfa      	ldrb	r2, [r7, #15]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d3eb      	bcc.n	80119e6 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 8011a20:	687a      	ldr	r2, [r7, #4]
 8011a22:	7ad2      	ldrb	r2, [r2, #11]
 8011a24:	0852      	lsrs	r2, r2, #1
 8011a26:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 8011a28:	441a      	add	r2, r3
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 8011a3a:	fb93 f2f2 	sdiv	r2, r3, r2
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 8011a44:	bf00      	nop
 8011a46:	3714      	adds	r7, #20
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 8011a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a54:	b0ca      	sub	sp, #296	; 0x128
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011a5c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8011a60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011a64:	4603      	mov	r3, r0
 8011a66:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 8011a70:	2300      	movs	r3, #0
 8011a72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 8011a76:	2300      	movs	r3, #0
 8011a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 8011a82:	f04f 0200 	mov.w	r2, #0
 8011a86:	f04f 0300 	mov.w	r3, #0
 8011a8a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 8011a94:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011a98:	2300      	movs	r3, #0
 8011a9a:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 8011a9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 8011aa4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 8011aac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 8011ab4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011ab8:	2300      	movs	r3, #0
 8011aba:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 8011abc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 8011ac4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011ac8:	2300      	movs	r3, #0
 8011aca:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 8011acc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 8011ad4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011ad8:	2300      	movs	r3, #0
 8011ada:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 8011adc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011ae0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	f000 80e1 	beq.w	8011cac <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 8011aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	f000 80da 	beq.w	8011cac <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 8011af8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011afc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7ff f9ff 	bl	8010f04 <VL53L1_calc_pll_period_us>
 8011b06:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 8011b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b12:	3301      	adds	r3, #1
 8011b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 8011b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b20:	2110      	movs	r1, #16
 8011b22:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8011b26:	f7ff fa04 	bl	8010f32 <VL53L1_duration_maths>
 8011b2a:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 8011b2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b30:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 8011b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b36:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8011b3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4619      	mov	r1, r3
 8011b42:	4610      	mov	r0, r2
 8011b44:	f7ff fc6d 	bl	8011422 <VL53L1_rate_maths>
 8011b48:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 8011b4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011b4e:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 8011b50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b54:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 8011b58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b5c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 8011b60:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	461a      	mov	r2, r3
 8011b68:	f7ff fa3c 	bl	8010fe4 <VL53L1_events_per_spad_maths>
 8011b6c:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 8011b6e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b72:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 8011b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b78:	8adb      	ldrh	r3, [r3, #22]
 8011b7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011b7e:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 8011b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b84:	8adb      	ldrh	r3, [r3, #22]
 8011b86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011b8a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 8011b8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b90:	695b      	ldr	r3, [r3, #20]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f000 808a 	beq.w	8011cac <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 8011b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b9c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	461c      	mov	r4, r3
 8011ba4:	4615      	mov	r5, r2
 8011ba6:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 8011baa:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011bae:	4622      	mov	r2, r4
 8011bb0:	462b      	mov	r3, r5
 8011bb2:	f04f 0000 	mov.w	r0, #0
 8011bb6:	f04f 0100 	mov.w	r1, #0
 8011bba:	0159      	lsls	r1, r3, #5
 8011bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011bc0:	0150      	lsls	r0, r2, #5
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	ebb2 0804 	subs.w	r8, r2, r4
 8011bca:	eb63 0905 	sbc.w	r9, r3, r5
 8011bce:	f04f 0200 	mov.w	r2, #0
 8011bd2:	f04f 0300 	mov.w	r3, #0
 8011bd6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011bda:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011bde:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011be2:	4690      	mov	r8, r2
 8011be4:	4699      	mov	r9, r3
 8011be6:	eb18 0a04 	adds.w	sl, r8, r4
 8011bea:	eb49 0b05 	adc.w	fp, r9, r5
 8011bee:	f04f 0200 	mov.w	r2, #0
 8011bf2:	f04f 0300 	mov.w	r3, #0
 8011bf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011bfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011c02:	4692      	mov	sl, r2
 8011c04:	469b      	mov	fp, r3
 8011c06:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 8011c0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011c0e:	f04f 0000 	mov.w	r0, #0
 8011c12:	f04f 0100 	mov.w	r1, #0
 8011c16:	0319      	lsls	r1, r3, #12
 8011c18:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8011c1c:	0310      	lsls	r0, r2, #12
 8011c1e:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 8011c22:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	085b      	lsrs	r3, r3, #1
 8011c2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 8011c2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011c32:	2200      	movs	r2, #0
 8011c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011c38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011c3c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011c40:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8011c44:	4621      	mov	r1, r4
 8011c46:	1851      	adds	r1, r2, r1
 8011c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	eb43 0101 	adc.w	r1, r3, r1
 8011c50:	65f9      	str	r1, [r7, #92]	; 0x5c
 8011c52:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8011c56:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 8011c5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c5e:	695b      	ldr	r3, [r3, #20]
 8011c60:	2200      	movs	r2, #0
 8011c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011c66:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011c6a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011c6e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011c72:	f7ee ffc1 	bl	8000bf8 <__aeabi_uldivmod>
 8011c76:	4602      	mov	r2, r0
 8011c78:	460b      	mov	r3, r1
 8011c7a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 8011c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c82:	8adb      	ldrh	r3, [r3, #22]
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	2200      	movs	r2, #0
 8011c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011c8c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8011c90:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011c94:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8011c98:	4621      	mov	r1, r4
 8011c9a:	428a      	cmp	r2, r1
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	418b      	sbcs	r3, r1
 8011ca0:	d204      	bcs.n	8011cac <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 8011ca2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8011ca6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011caa:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 8011cac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	f000 82e9 	beq.w	801228a <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 8011cb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011cbc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f000 82e2 	beq.w	801228a <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 8011cc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011cca:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f000 82dc 	beq.w	801228a <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 8011cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f000 82d5 	beq.w	801228a <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 8011ce0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ce4:	885b      	ldrh	r3, [r3, #2]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	2200      	movs	r2, #0
 8011cea:	653b      	str	r3, [r7, #80]	; 0x50
 8011cec:	657a      	str	r2, [r7, #84]	; 0x54
 8011cee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8011cf2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 8011cf6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011cfa:	4622      	mov	r2, r4
 8011cfc:	462b      	mov	r3, r5
 8011cfe:	f04f 0000 	mov.w	r0, #0
 8011d02:	f04f 0100 	mov.w	r1, #0
 8011d06:	0159      	lsls	r1, r3, #5
 8011d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011d0c:	0150      	lsls	r0, r2, #5
 8011d0e:	4602      	mov	r2, r0
 8011d10:	460b      	mov	r3, r1
 8011d12:	1b11      	subs	r1, r2, r4
 8011d14:	64b9      	str	r1, [r7, #72]	; 0x48
 8011d16:	eb63 0305 	sbc.w	r3, r3, r5
 8011d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d1c:	f04f 0200 	mov.w	r2, #0
 8011d20:	f04f 0300 	mov.w	r3, #0
 8011d24:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8011d28:	4649      	mov	r1, r9
 8011d2a:	008b      	lsls	r3, r1, #2
 8011d2c:	4641      	mov	r1, r8
 8011d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011d32:	4641      	mov	r1, r8
 8011d34:	008a      	lsls	r2, r1, #2
 8011d36:	4611      	mov	r1, r2
 8011d38:	461a      	mov	r2, r3
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	191b      	adds	r3, r3, r4
 8011d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8011d40:	4613      	mov	r3, r2
 8011d42:	eb45 0303 	adc.w	r3, r5, r3
 8011d46:	647b      	str	r3, [r7, #68]	; 0x44
 8011d48:	f04f 0200 	mov.w	r2, #0
 8011d4c:	f04f 0300 	mov.w	r3, #0
 8011d50:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011d54:	4629      	mov	r1, r5
 8011d56:	02cb      	lsls	r3, r1, #11
 8011d58:	4621      	mov	r1, r4
 8011d5a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8011d5e:	4621      	mov	r1, r4
 8011d60:	02ca      	lsls	r2, r1, #11
 8011d62:	461c      	mov	r4, r3
 8011d64:	4613      	mov	r3, r2
 8011d66:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 8011d6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011d6e:	881b      	ldrh	r3, [r3, #0]
 8011d70:	085b      	lsrs	r3, r3, #1
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 8011d78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011d82:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011d86:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011d8a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8011d8e:	4621      	mov	r1, r4
 8011d90:	1851      	adds	r1, r2, r1
 8011d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8011d94:	4629      	mov	r1, r5
 8011d96:	eb43 0101 	adc.w	r1, r3, r1
 8011d9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8011d9c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8011da0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 8011da4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011da8:	881b      	ldrh	r3, [r3, #0]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	2200      	movs	r2, #0
 8011dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011db6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8011dba:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011dbe:	f7ee ff1b 	bl	8000bf8 <__aeabi_uldivmod>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 8011dca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011dce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011dd2:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 8011dd4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	011a      	lsls	r2, r3, #4
 8011ddc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011de0:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 8011de2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2200      	movs	r2, #0
 8011dea:	633b      	str	r3, [r7, #48]	; 0x30
 8011dec:	637a      	str	r2, [r7, #52]	; 0x34
 8011dee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011df2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 8011df6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011dfa:	695b      	ldr	r3, [r3, #20]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011e02:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e0a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8011e0e:	4622      	mov	r2, r4
 8011e10:	fb02 f203 	mul.w	r2, r2, r3
 8011e14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e18:	4629      	mov	r1, r5
 8011e1a:	fb01 f303 	mul.w	r3, r1, r3
 8011e1e:	441a      	add	r2, r3
 8011e20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e24:	4621      	mov	r1, r4
 8011e26:	fba3 1301 	umull	r1, r3, r3, r1
 8011e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e2e:	460b      	mov	r3, r1
 8011e30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e38:	18d3      	adds	r3, r2, r3
 8011e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011e3e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8011e42:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011e46:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8011e4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e4e:	8b5b      	ldrh	r3, [r3, #26]
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	2200      	movs	r2, #0
 8011e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011e58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e60:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011e64:	4622      	mov	r2, r4
 8011e66:	fb02 f203 	mul.w	r2, r2, r3
 8011e6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e6e:	4629      	mov	r1, r5
 8011e70:	fb01 f303 	mul.w	r3, r1, r3
 8011e74:	441a      	add	r2, r3
 8011e76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	fba3 1301 	umull	r1, r3, r3, r1
 8011e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011e84:	460b      	mov	r3, r1
 8011e86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011e8e:	18d3      	adds	r3, r2, r3
 8011e90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011e94:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011e98:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011e9c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8011ea0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ea4:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011ea8:	62b9      	str	r1, [r7, #40]	; 0x28
 8011eaa:	f143 0300 	adc.w	r3, r3, #0
 8011eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011eb0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8011eb4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011eb8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ebc:	f04f 0000 	mov.w	r0, #0
 8011ec0:	f04f 0100 	mov.w	r1, #0
 8011ec4:	0cd0      	lsrs	r0, r2, #19
 8011ec6:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8011eca:	0cd9      	lsrs	r1, r3, #19
 8011ecc:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 8011ed0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ed4:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8011ed8:	6239      	str	r1, [r7, #32]
 8011eda:	f143 0300 	adc.w	r3, r3, #0
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
 8011ee0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011ee4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 8011ee8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011ef0:	f04f 0300 	mov.w	r3, #0
 8011ef4:	f7ee fe80 	bl	8000bf8 <__aeabi_uldivmod>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	460b      	mov	r3, r1
 8011efc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8011f00:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011f04:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011f08:	f173 0300 	sbcs.w	r3, r3, #0
 8011f0c:	d305      	bcc.n	8011f1a <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 8011f0e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8011f12:	f04f 0300 	mov.w	r3, #0
 8011f16:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 8011f1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011f1e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f22:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 8011f24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	61bb      	str	r3, [r7, #24]
 8011f2e:	61fa      	str	r2, [r7, #28]
 8011f30:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011f34:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 8011f38:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f3c:	691b      	ldr	r3, [r3, #16]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011f4c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8011f50:	4622      	mov	r2, r4
 8011f52:	fb02 f203 	mul.w	r2, r2, r3
 8011f56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011f5a:	4629      	mov	r1, r5
 8011f5c:	fb01 f303 	mul.w	r3, r1, r3
 8011f60:	441a      	add	r2, r3
 8011f62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011f66:	4621      	mov	r1, r4
 8011f68:	fba3 1301 	umull	r1, r3, r3, r1
 8011f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011f70:	460b      	mov	r3, r1
 8011f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011f7a:	18d3      	adds	r3, r2, r3
 8011f7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011f80:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8011f84:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011f88:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8011f8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f90:	8b5b      	ldrh	r3, [r3, #26]
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	2200      	movs	r2, #0
 8011f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f9a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8011f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011fa2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8011fa6:	4622      	mov	r2, r4
 8011fa8:	fb02 f203 	mul.w	r2, r2, r3
 8011fac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011fb0:	4629      	mov	r1, r5
 8011fb2:	fb01 f303 	mul.w	r3, r1, r3
 8011fb6:	441a      	add	r2, r3
 8011fb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	fba3 1301 	umull	r1, r3, r3, r1
 8011fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011fd0:	18d3      	adds	r3, r2, r3
 8011fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011fd6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8011fda:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011fde:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8011fe2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011fe6:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011fea:	6139      	str	r1, [r7, #16]
 8011fec:	f143 0300 	adc.w	r3, r3, #0
 8011ff0:	617b      	str	r3, [r7, #20]
 8011ff2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011ff6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011ffa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ffe:	f04f 0000 	mov.w	r0, #0
 8012002:	f04f 0100 	mov.w	r1, #0
 8012006:	0cd0      	lsrs	r0, r2, #19
 8012008:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 801200c:	0cd9      	lsrs	r1, r3, #19
 801200e:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 8012012:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8012016:	2200      	movs	r2, #0
 8012018:	67bb      	str	r3, [r7, #120]	; 0x78
 801201a:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 801201c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012020:	891b      	ldrh	r3, [r3, #8]
 8012022:	b29b      	uxth	r3, r3
 8012024:	2200      	movs	r2, #0
 8012026:	673b      	str	r3, [r7, #112]	; 0x70
 8012028:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 801202a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801202e:	462b      	mov	r3, r5
 8012030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8012034:	4642      	mov	r2, r8
 8012036:	fb02 f203 	mul.w	r2, r2, r3
 801203a:	464b      	mov	r3, r9
 801203c:	4621      	mov	r1, r4
 801203e:	fb01 f303 	mul.w	r3, r1, r3
 8012042:	4413      	add	r3, r2
 8012044:	4622      	mov	r2, r4
 8012046:	4641      	mov	r1, r8
 8012048:	fba2 1201 	umull	r1, r2, r2, r1
 801204c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8012050:	460a      	mov	r2, r1
 8012052:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8012056:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801205a:	4413      	add	r3, r2
 801205c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8012064:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8012068:	4622      	mov	r2, r4
 801206a:	fb02 f203 	mul.w	r2, r2, r3
 801206e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012072:	4629      	mov	r1, r5
 8012074:	fb01 f303 	mul.w	r3, r1, r3
 8012078:	4413      	add	r3, r2
 801207a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801207e:	4621      	mov	r1, r4
 8012080:	fba2 1201 	umull	r1, r2, r2, r1
 8012084:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8012088:	460a      	mov	r2, r1
 801208a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 801208e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8012092:	4413      	add	r3, r2
 8012094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012098:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 801209c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80120a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 80120a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80120a8:	88db      	ldrh	r3, [r3, #6]
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	2200      	movs	r2, #0
 80120ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80120b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80120b2:	f04f 0200 	mov.w	r2, #0
 80120b6:	f04f 0300 	mov.w	r3, #0
 80120ba:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80120be:	4629      	mov	r1, r5
 80120c0:	01cb      	lsls	r3, r1, #7
 80120c2:	4621      	mov	r1, r4
 80120c4:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 80120c8:	4621      	mov	r1, r4
 80120ca:	01ca      	lsls	r2, r1, #7
 80120cc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80120d0:	1884      	adds	r4, r0, r2
 80120d2:	60bc      	str	r4, [r7, #8]
 80120d4:	eb41 0303 	adc.w	r3, r1, r3
 80120d8:	60fb      	str	r3, [r7, #12]
 80120da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80120de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 80120e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80120e6:	88db      	ldrh	r3, [r3, #6]
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	2200      	movs	r2, #0
 80120ec:	663b      	str	r3, [r7, #96]	; 0x60
 80120ee:	667a      	str	r2, [r7, #100]	; 0x64
 80120f0:	f04f 0200 	mov.w	r2, #0
 80120f4:	f04f 0300 	mov.w	r3, #0
 80120f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80120fc:	4629      	mov	r1, r5
 80120fe:	020b      	lsls	r3, r1, #8
 8012100:	4621      	mov	r1, r4
 8012102:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8012106:	4621      	mov	r1, r4
 8012108:	020a      	lsls	r2, r1, #8
 801210a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801210e:	f7ee fd73 	bl	8000bf8 <__aeabi_uldivmod>
 8012112:	4602      	mov	r2, r0
 8012114:	460b      	mov	r3, r1
 8012116:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 801211a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801211e:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8012122:	6039      	str	r1, [r7, #0]
 8012124:	f143 0300 	adc.w	r3, r3, #0
 8012128:	607b      	str	r3, [r7, #4]
 801212a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801212e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 8012132:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8012136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801213a:	f04f 0300 	mov.w	r3, #0
 801213e:	f7ee fd5b 	bl	8000bf8 <__aeabi_uldivmod>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 801214a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801214e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8012152:	f173 0300 	sbcs.w	r3, r3, #0
 8012156:	d305      	bcc.n	8012164 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 8012158:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801215c:	f04f 0300 	mov.w	r3, #0
 8012160:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 8012164:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8012168:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801216c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 801216e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012172:	69db      	ldr	r3, [r3, #28]
 8012174:	021b      	lsls	r3, r3, #8
 8012176:	4618      	mov	r0, r3
 8012178:	f7fe ffcd 	bl	8011116 <VL53L1_isqrt>
 801217c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 8012180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012184:	785b      	ldrb	r3, [r3, #1]
 8012186:	461a      	mov	r2, r3
 8012188:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801218c:	fb02 f303 	mul.w	r3, r2, r3
 8012190:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 8012194:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012198:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 801219a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801219e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 80121a0:	4293      	cmp	r3, r2
 80121a2:	d218      	bcs.n	80121d6 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 80121a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 80121ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80121b0:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 80121b2:	1ad3      	subs	r3, r2, r3
 80121b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 80121b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80121bc:	021b      	lsls	r3, r3, #8
 80121be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 80121c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80121c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d203      	bcs.n	80121d6 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 80121ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80121d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 80121d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80121da:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 80121dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80121e0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 80121e2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 80121e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80121e8:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 80121ea:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80121ee:	f000 f854 	bl	801229a <VL53L1_f_002>
 80121f2:	4603      	mov	r3, r0
 80121f4:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 80121f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80121fa:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 80121fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012200:	6a1b      	ldr	r3, [r3, #32]
 8012202:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 8012206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801220a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 801220e:	461a      	mov	r2, r3
 8012210:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012214:	fb02 f303 	mul.w	r3, r2, r3
 8012218:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 801221c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012220:	3308      	adds	r3, #8
 8012222:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 8012226:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801222a:	091b      	lsrs	r3, r3, #4
 801222c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 8012230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012234:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 8012236:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 8012238:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801223c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 801223e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8012240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012244:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8012246:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801224a:	f000 f826 	bl	801229a <VL53L1_f_002>
 801224e:	4603      	mov	r3, r0
 8012250:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 8012252:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012256:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 8012258:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801225c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8012260:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012264:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012268:	429a      	cmp	r2, r3
 801226a:	da07      	bge.n	801227c <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 801226c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012270:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8012274:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012278:	801a      	strh	r2, [r3, #0]
 801227a:	e006      	b.n	801228a <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 801227c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012280:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8012284:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012288:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 801228a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 801228e:	4618      	mov	r0, r3
 8012290:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8012294:	46bd      	mov	sp, r7
 8012296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801229a <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b086      	sub	sp, #24
 801229e:	af00      	add	r7, sp, #0
 80122a0:	60f8      	str	r0, [r7, #12]
 80122a2:	60b9      	str	r1, [r7, #8]
 80122a4:	607a      	str	r2, [r7, #4]
 80122a6:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 80122a8:	2300      	movs	r3, #0
 80122aa:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 80122ac:	2300      	movs	r3, #0
 80122ae:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	fb03 f303 	mul.w	r3, r3, r3
 80122bc:	693a      	ldr	r2, [r7, #16]
 80122be:	4413      	add	r3, r2
 80122c0:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 80122c2:	6938      	ldr	r0, [r7, #16]
 80122c4:	f7fe ff27 	bl	8011116 <VL53L1_isqrt>
 80122c8:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 80122ca:	693a      	ldr	r2, [r7, #16]
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	4413      	add	r3, r2
 80122d0:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	011b      	lsls	r3, r3, #4
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fe ff1d 	bl	8011116 <VL53L1_isqrt>
 80122dc:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	fb02 f303 	mul.w	r3, r2, r3
 80122e6:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d009      	beq.n	8012302 <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 80122ee:	697a      	ldr	r2, [r7, #20]
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	4413      	add	r3, r2
 80122f4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	005b      	lsls	r3, r3, #1
 80122fa:	697a      	ldr	r2, [r7, #20]
 80122fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012300:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 8012302:	697b      	ldr	r3, [r7, #20]

}
 8012304:	4618      	mov	r0, r3
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 8012314:	2300      	movs	r3, #0
 8012316:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2218      	movs	r2, #24
 801231c:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2200      	movs	r2, #0
 8012322:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2200      	movs	r2, #0
 8012328:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	73fb      	strb	r3, [r7, #15]
 8012342:	e01f      	b.n	8012384 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 8012344:	7bfb      	ldrb	r3, [r7, #15]
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	4413      	add	r3, r2
 801234a:	2200      	movs	r2, #0
 801234c:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 801234e:	7bfb      	ldrb	r3, [r7, #15]
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	4413      	add	r3, r2
 8012354:	2200      	movs	r2, #0
 8012356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 801235a:	7bfb      	ldrb	r3, [r7, #15]
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	4413      	add	r3, r2
 8012360:	2200      	movs	r2, #0
 8012362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 8012366:	7bfa      	ldrb	r2, [r7, #15]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	322e      	adds	r2, #46	; 0x2e
 801236c:	2100      	movs	r1, #0
 801236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 8012372:	7bfa      	ldrb	r2, [r7, #15]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	3246      	adds	r2, #70	; 0x46
 8012378:	2100      	movs	r1, #0
 801237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 801237e:	7bfb      	ldrb	r3, [r7, #15]
 8012380:	3301      	adds	r3, #1
 8012382:	73fb      	strb	r3, [r7, #15]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	785b      	ldrb	r3, [r3, #1]
 8012388:	7bfa      	ldrb	r2, [r7, #15]
 801238a:	429a      	cmp	r2, r3
 801238c:	d3da      	bcc.n	8012344 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2208      	movs	r2, #8
 801239a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2200      	movs	r2, #0
 80123a2:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80123ac:	461a      	mov	r2, r3
 80123ae:	2118      	movs	r1, #24
 80123b0:	2000      	movs	r0, #0
 80123b2:	f7ff f9e8 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80123bc:	461a      	mov	r2, r3
 80123be:	2118      	movs	r1, #24
 80123c0:	2000      	movs	r0, #0
 80123c2:	f7ff f9e0 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80123cc:	461a      	mov	r2, r3
 80123ce:	2118      	movs	r1, #24
 80123d0:	2000      	movs	r0, #0
 80123d2:	f7ff f9d8 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80123dc:	461a      	mov	r2, r3
 80123de:	2118      	movs	r1, #24
 80123e0:	2000      	movs	r0, #0
 80123e2:	f7ff f9d0 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80123ec:	461a      	mov	r2, r3
 80123ee:	2118      	movs	r1, #24
 80123f0:	2000      	movs	r0, #0
 80123f2:	f7ff f9c8 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 80123f6:	bf00      	nop
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80123fe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012402:	b090      	sub	sp, #64	; 0x40
 8012404:	af00      	add	r7, sp, #0
 8012406:	61b9      	str	r1, [r7, #24]
 8012408:	617a      	str	r2, [r7, #20]
 801240a:	461a      	mov	r2, r3
 801240c:	4603      	mov	r3, r0
 801240e:	83fb      	strh	r3, [r7, #30]
 8012410:	4613      	mov	r3, r2
 8012412:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012414:	2300      	movs	r3, #0
 8012416:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 8012426:	f04f 0200 	mov.w	r2, #0
 801242a:	f04f 0300 	mov.w	r3, #0
 801242e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 8012432:	2300      	movs	r3, #0
 8012434:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 8012436:	2300      	movs	r3, #0
 8012438:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 801243a:	2300      	movs	r3, #0
 801243c:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 801243e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012440:	7a5a      	ldrb	r2, [r3, #9]
 8012442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012444:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 8012446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012448:	7a1a      	ldrb	r2, [r3, #8]
 801244a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801244c:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 801244e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012450:	7a9a      	ldrb	r2, [r3, #10]
 8012452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012454:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 8012456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012458:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801245c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801245e:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8012460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012462:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012466:	4618      	mov	r0, r3
 8012468:	f7ff f93c 	bl	80116e4 <VL53L1_decode_vcsel_period>
 801246c:	4603      	mov	r3, r0
 801246e:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 8012470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012472:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 8012474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012476:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801247a:	17da      	asrs	r2, r3, #31
 801247c:	60bb      	str	r3, [r7, #8]
 801247e:	60fa      	str	r2, [r7, #12]
 8012480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012484:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 8012488:	8bfb      	ldrh	r3, [r7, #30]
 801248a:	2200      	movs	r2, #0
 801248c:	4698      	mov	r8, r3
 801248e:	4691      	mov	r9, r2
 8012490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012492:	fb08 f203 	mul.w	r2, r8, r3
 8012496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012498:	fb09 f303 	mul.w	r3, r9, r3
 801249c:	4413      	add	r3, r2
 801249e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124a0:	fba2 4508 	umull	r4, r5, r2, r8
 80124a4:	442b      	add	r3, r5
 80124a6:	461d      	mov	r5, r3
 80124a8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 80124ac:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 80124b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80124b4:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 80124b8:	f143 0b00 	adc.w	fp, r3, #0
 80124bc:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 80124c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	da08      	bge.n	80124da <VL53L1_f_018+0xdc>
 80124c8:	f640 71ff 	movw	r1, #4095	; 0xfff
 80124cc:	1851      	adds	r1, r2, r1
 80124ce:	6039      	str	r1, [r7, #0]
 80124d0:	f143 0300 	adc.w	r3, r3, #0
 80124d4:	607b      	str	r3, [r7, #4]
 80124d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80124da:	f04f 0000 	mov.w	r0, #0
 80124de:	f04f 0100 	mov.w	r1, #0
 80124e2:	0b10      	lsrs	r0, r2, #12
 80124e4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80124e8:	1319      	asrs	r1, r3, #12
 80124ea:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 80124ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f0:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 80124f2:	2300      	movs	r3, #0
 80124f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80124f8:	e062      	b.n	80125c0 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 80124fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124fe:	089b      	lsrs	r3, r3, #2
 8012500:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 8012504:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801250a:	4413      	add	r3, r2
 801250c:	7c9b      	ldrb	r3, [r3, #18]
 801250e:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 8012510:	6a3b      	ldr	r3, [r7, #32]
 8012512:	2b00      	cmp	r3, #0
 8012514:	dd4f      	ble.n	80125b6 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 8012516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012518:	7a9b      	ldrb	r3, [r3, #10]
 801251a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801251e:	429a      	cmp	r2, r3
 8012520:	d20f      	bcs.n	8012542 <VL53L1_f_018+0x144>
 8012522:	7f7b      	ldrb	r3, [r7, #29]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d00c      	beq.n	8012542 <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 8012528:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801252c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801252e:	3206      	adds	r2, #6
 8012530:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 8012534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012536:	441a      	add	r2, r3
 8012538:	6a3b      	ldr	r3, [r7, #32]
 801253a:	fb02 f303 	mul.w	r3, r2, r3
 801253e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012540:	e004      	b.n	801254c <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012546:	fb02 f303 	mul.w	r3, r2, r3
 801254a:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	4618      	mov	r0, r3
 8012550:	f7fe fde1 	bl	8011116 <VL53L1_isqrt>
 8012554:	4603      	mov	r3, r0
 8012556:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 8012558:	6a3b      	ldr	r3, [r7, #32]
 801255a:	0fda      	lsrs	r2, r3, #31
 801255c:	4413      	add	r3, r2
 801255e:	105b      	asrs	r3, r3, #1
 8012560:	461a      	mov	r2, r3
 8012562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012564:	4413      	add	r3, r2
 8012566:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 8012568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801256a:	6a3b      	ldr	r3, [r7, #32]
 801256c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012570:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 8012572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012574:	69ba      	ldr	r2, [r7, #24]
 8012576:	fb02 f303 	mul.w	r3, r2, r3
 801257a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 801257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257e:	3308      	adds	r3, #8
 8012580:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 8012582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012584:	2b00      	cmp	r3, #0
 8012586:	da00      	bge.n	801258a <VL53L1_f_018+0x18c>
 8012588:	330f      	adds	r3, #15
 801258a:	111b      	asrs	r3, r3, #4
 801258c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 801258e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012592:	4413      	add	r3, r2
 8012594:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 8012596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	429a      	cmp	r2, r3
 801259c:	da01      	bge.n	80125a2 <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 80125a2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80125a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80125a8:	3216      	adds	r2, #22
 80125aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 80125b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80125b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125b4:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 80125b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125ba:	3301      	adds	r3, #1
 80125bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80125c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125c2:	7a9b      	ldrb	r3, [r3, #10]
 80125c4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d396      	bcc.n	80124fa <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 80125cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80125ce:	2200      	movs	r2, #0
 80125d0:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 80125d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125d4:	7a1b      	ldrb	r3, [r3, #8]
 80125d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80125da:	e033      	b.n	8012644 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 80125dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80125e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125e2:	3206      	adds	r2, #6
 80125e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80125e8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80125ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80125ee:	3116      	adds	r1, #22
 80125f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	dd13      	ble.n	8012620 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 80125f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80125fe:	4413      	add	r3, r2
 8012600:	2201      	movs	r2, #1
 8012602:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 8012604:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012608:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801260a:	4413      	add	r3, r2
 801260c:	2201      	movs	r2, #1
 801260e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 8012612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012614:	791b      	ldrb	r3, [r3, #4]
 8012616:	3301      	adds	r3, #1
 8012618:	b2da      	uxtb	r2, r3
 801261a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801261c:	711a      	strb	r2, [r3, #4]
 801261e:	e00c      	b.n	801263a <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 8012620:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012624:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012626:	4413      	add	r3, r2
 8012628:	2200      	movs	r2, #0
 801262a:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 801262c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012632:	4413      	add	r3, r2
 8012634:	2200      	movs	r2, #0
 8012636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 801263a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801263e:	3301      	adds	r3, #1
 8012640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012646:	7a9b      	ldrb	r3, [r3, #10]
 8012648:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801264c:	429a      	cmp	r2, r3
 801264e:	d3c5      	bcc.n	80125dc <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012650:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8012654:	4618      	mov	r0, r3
 8012656:	3740      	adds	r7, #64	; 0x40
 8012658:	46bd      	mov	sp, r7
 801265a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801265e <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801265e:	b480      	push	{r7}
 8012660:	b085      	sub	sp, #20
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012666:	2300      	movs	r3, #0
 8012668:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8012672:	2300      	movs	r3, #0
 8012674:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2200      	movs	r2, #0
 801267a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 801267e:	2300      	movs	r3, #0
 8012680:	73fb      	strb	r3, [r7, #15]
 8012682:	e02d      	b.n	80126e0 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 8012684:	7bfb      	ldrb	r3, [r7, #15]
 8012686:	3301      	adds	r3, #1
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	78d2      	ldrb	r2, [r2, #3]
 801268c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012690:	fb01 f202 	mul.w	r2, r1, r2
 8012694:	1a9b      	subs	r3, r3, r2
 8012696:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	789b      	ldrb	r3, [r3, #2]
 801269c:	7bfa      	ldrb	r2, [r7, #15]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d21b      	bcs.n	80126da <VL53L1_f_019+0x7c>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	789b      	ldrb	r3, [r3, #2]
 80126a6:	7b3a      	ldrb	r2, [r7, #12]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d216      	bcs.n	80126da <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 80126ac:	7bfb      	ldrb	r3, [r7, #15]
 80126ae:	687a      	ldr	r2, [r7, #4]
 80126b0:	4413      	add	r3, r2
 80126b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10f      	bne.n	80126da <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 80126ba:	7b3b      	ldrb	r3, [r7, #12]
 80126bc:	687a      	ldr	r2, [r7, #4]
 80126be:	4413      	add	r3, r2
 80126c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d108      	bne.n	80126da <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 80126c8:	7bbb      	ldrb	r3, [r7, #14]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d105      	bne.n	80126da <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	7bfa      	ldrb	r2, [r7, #15]
 80126d2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 80126d6:	2301      	movs	r3, #1
 80126d8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 80126da:	7bfb      	ldrb	r3, [r7, #15]
 80126dc:	3301      	adds	r3, #1
 80126de:	73fb      	strb	r3, [r7, #15]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	78db      	ldrb	r3, [r3, #3]
 80126e4:	7bfa      	ldrb	r2, [r7, #15]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d3cc      	bcc.n	8012684 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80126ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3714      	adds	r7, #20
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr

080126fa <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80126fa:	b480      	push	{r7}
 80126fc:	b085      	sub	sp, #20
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012702:	2300      	movs	r3, #0
 8012704:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 801270a:	2300      	movs	r3, #0
 801270c:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012718:	73fb      	strb	r3, [r7, #15]
 801271a:	e05a      	b.n	80127d2 <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	78da      	ldrb	r2, [r3, #3]
 8012720:	7bfb      	ldrb	r3, [r7, #15]
 8012722:	fbb3 f1f2 	udiv	r1, r3, r2
 8012726:	fb01 f202 	mul.w	r2, r1, r2
 801272a:	1a9b      	subs	r3, r3, r2
 801272c:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 801272e:	7bfb      	ldrb	r3, [r7, #15]
 8012730:	3301      	adds	r3, #1
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	78d2      	ldrb	r2, [r2, #3]
 8012736:	fb93 f1f2 	sdiv	r1, r3, r2
 801273a:	fb01 f202 	mul.w	r2, r1, r2
 801273e:	1a9b      	subs	r3, r3, r2
 8012740:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	789b      	ldrb	r3, [r3, #2]
 8012746:	7b7a      	ldrb	r2, [r7, #13]
 8012748:	429a      	cmp	r2, r3
 801274a:	d23f      	bcs.n	80127cc <VL53L1_f_020+0xd2>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	789b      	ldrb	r3, [r3, #2]
 8012750:	7b3a      	ldrb	r2, [r7, #12]
 8012752:	429a      	cmp	r2, r3
 8012754:	d23a      	bcs.n	80127cc <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 8012756:	7b7b      	ldrb	r3, [r7, #13]
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	4413      	add	r3, r2
 801275c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012760:	2b00      	cmp	r3, #0
 8012762:	d10e      	bne.n	8012782 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 8012764:	7b3b      	ldrb	r3, [r7, #12]
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	4413      	add	r3, r2
 801276a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 801276e:	2b01      	cmp	r3, #1
 8012770:	d107      	bne.n	8012782 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012778:	3301      	adds	r3, #1
 801277a:	b2da      	uxtb	r2, r3
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801278e:	429a      	cmp	r2, r3
 8012790:	d905      	bls.n	801279e <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 801279e:	7b7b      	ldrb	r3, [r7, #13]
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	4413      	add	r3, r2
 80127a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d009      	beq.n	80127c0 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 80127ac:	7b7b      	ldrb	r3, [r7, #13]
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	4413      	add	r3, r2
 80127b8:	460a      	mov	r2, r1
 80127ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80127be:	e005      	b.n	80127cc <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 80127c0:	7b7b      	ldrb	r3, [r7, #13]
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	4413      	add	r3, r2
 80127c6:	2200      	movs	r2, #0
 80127c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 80127cc:	7bfb      	ldrb	r3, [r7, #15]
 80127ce:	3301      	adds	r3, #1
 80127d0:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 80127d2:	7bfa      	ldrb	r2, [r7, #15]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80127da:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 80127e0:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 80127e2:	429a      	cmp	r2, r3
 80127e4:	db9a      	blt.n	801271c <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 80127e6:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3714      	adds	r7, #20
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr

080127f6 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80127f6:	b480      	push	{r7}
 80127f8:	b087      	sub	sp, #28
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80127fe:	2300      	movs	r3, #0
 8012800:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 8012806:	2300      	movs	r3, #0
 8012808:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 801280a:	2300      	movs	r3, #0
 801280c:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 801280e:	2300      	movs	r3, #0
 8012810:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 8012812:	2300      	movs	r3, #0
 8012814:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	78db      	ldrb	r3, [r3, #3]
 801281a:	3b01      	subs	r3, #1
 801281c:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 801281e:	7cbb      	ldrb	r3, [r7, #18]
 8012820:	085b      	lsrs	r3, r3, #1
 8012822:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801282a:	75fb      	strb	r3, [r7, #23]
 801282c:	e0a2      	b.n	8012974 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	78da      	ldrb	r2, [r3, #3]
 8012832:	7dfb      	ldrb	r3, [r7, #23]
 8012834:	fbb3 f1f2 	udiv	r1, r3, r2
 8012838:	fb01 f202 	mul.w	r2, r1, r2
 801283c:	1a9b      	subs	r3, r3, r2
 801283e:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 8012840:	7dfb      	ldrb	r3, [r7, #23]
 8012842:	3301      	adds	r3, #1
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	78d2      	ldrb	r2, [r2, #3]
 8012848:	fb93 f1f2 	sdiv	r1, r3, r2
 801284c:	fb01 f202 	mul.w	r2, r1, r2
 8012850:	1a9b      	subs	r3, r3, r2
 8012852:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	789b      	ldrb	r3, [r3, #2]
 8012858:	7d7a      	ldrb	r2, [r7, #21]
 801285a:	429a      	cmp	r2, r3
 801285c:	f080 8087 	bcs.w	801296e <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 8012864:	7d3a      	ldrb	r2, [r7, #20]
 8012866:	429a      	cmp	r2, r3
 8012868:	f080 8081 	bcs.w	801296e <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 801286c:	7d7b      	ldrb	r3, [r7, #21]
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	4413      	add	r3, r2
 8012872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012876:	2b00      	cmp	r3, #0
 8012878:	d12f      	bne.n	80128da <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 801287a:	7d3b      	ldrb	r3, [r7, #20]
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	4413      	add	r3, r2
 8012880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8012884:	2b00      	cmp	r3, #0
 8012886:	d028      	beq.n	80128da <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8012888:	7d3b      	ldrb	r3, [r7, #20]
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	4413      	add	r3, r2
 801288e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012892:	3b01      	subs	r3, #1
 8012894:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801289c:	7cfa      	ldrb	r2, [r7, #19]
 801289e:	429a      	cmp	r2, r3
 80128a0:	d21b      	bcs.n	80128da <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80128a2:	7cfa      	ldrb	r2, [r7, #19]
 80128a4:	4613      	mov	r3, r2
 80128a6:	00db      	lsls	r3, r3, #3
 80128a8:	4413      	add	r3, r2
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	4413      	add	r3, r2
 80128b4:	3304      	adds	r3, #4
 80128b6:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	7dfa      	ldrb	r2, [r7, #23]
 80128bc:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 80128be:	7dfb      	ldrb	r3, [r7, #23]
 80128c0:	3301      	adds	r3, #1
 80128c2:	b2da      	uxtb	r2, r3
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	22ff      	movs	r2, #255	; 0xff
 80128cc:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2200      	movs	r2, #0
 80128d2:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	2200      	movs	r2, #0
 80128d8:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 80128da:	7d7b      	ldrb	r3, [r7, #21]
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	4413      	add	r3, r2
 80128e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d042      	beq.n	801296e <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 80128e8:	7d3b      	ldrb	r3, [r7, #20]
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	4413      	add	r3, r2
 80128ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d13b      	bne.n	801296e <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 80128f6:	7d7b      	ldrb	r3, [r7, #21]
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	4413      	add	r3, r2
 80128fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012900:	3b01      	subs	r3, #1
 8012902:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801290a:	7cfa      	ldrb	r2, [r7, #19]
 801290c:	429a      	cmp	r2, r3
 801290e:	d22e      	bcs.n	801296e <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012910:	7cfa      	ldrb	r2, [r7, #19]
 8012912:	4613      	mov	r3, r2
 8012914:	00db      	lsls	r3, r3, #3
 8012916:	4413      	add	r3, r2
 8012918:	009b      	lsls	r3, r3, #2
 801291a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	4413      	add	r3, r2
 8012922:	3304      	adds	r3, #4
 8012924:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	7dfa      	ldrb	r2, [r7, #23]
 801292a:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 801292c:	7dfb      	ldrb	r3, [r7, #23]
 801292e:	3301      	adds	r3, #1
 8012930:	b2da      	uxtb	r2, r3
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 801293e:	1ad3      	subs	r3, r2, r3
 8012940:	b2db      	uxtb	r3, r3
 8012942:	3301      	adds	r3, #1
 8012944:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 8012952:	1ad3      	subs	r3, r2, r3
 8012954:	b2db      	uxtb	r3, r3
 8012956:	3301      	adds	r3, #1
 8012958:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	799b      	ldrb	r3, [r3, #6]
 8012962:	7cba      	ldrb	r2, [r7, #18]
 8012964:	429a      	cmp	r2, r3
 8012966:	d202      	bcs.n	801296e <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	7cba      	ldrb	r2, [r7, #18]
 801296c:	719a      	strb	r2, [r3, #6]
		blb++) {
 801296e:	7dfb      	ldrb	r3, [r7, #23]
 8012970:	3301      	adds	r3, #1
 8012972:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 8012974:	7dfa      	ldrb	r2, [r7, #23]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801297c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 8012982:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 8012984:	429a      	cmp	r2, r3
 8012986:	f6ff af52 	blt.w	801282e <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801298a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 801298e:	4618      	mov	r0, r3
 8012990:	371c      	adds	r7, #28
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr

0801299a <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b090      	sub	sp, #64	; 0x40
 801299e:	af00      	add	r7, sp, #0
 80129a0:	4603      	mov	r3, r0
 80129a2:	6039      	str	r1, [r7, #0]
 80129a4:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80129a6:	2300      	movs	r3, #0
 80129a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 80129ac:	f107 030c 	add.w	r3, r7, #12
 80129b0:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 80129b2:	2300      	movs	r3, #0
 80129b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 80129b8:	2301      	movs	r3, #1
 80129ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d965      	bls.n	8012a94 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 80129c8:	e05f      	b.n	8012a8a <VL53L1_f_028+0xf0>

		swapped = 0;
 80129ca:	2300      	movs	r3, #0
 80129cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80129d0:	2301      	movs	r3, #1
 80129d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80129d6:	e051      	b.n	8012a7c <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 80129d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80129dc:	1e5a      	subs	r2, r3, #1
 80129de:	4613      	mov	r3, r2
 80129e0:	00db      	lsls	r3, r3, #3
 80129e2:	4413      	add	r3, r2
 80129e4:	009b      	lsls	r3, r3, #2
 80129e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80129ea:	683a      	ldr	r2, [r7, #0]
 80129ec:	4413      	add	r3, r2
 80129ee:	3304      	adds	r3, #4
 80129f0:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 80129f2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80129f6:	4613      	mov	r3, r2
 80129f8:	00db      	lsls	r3, r3, #3
 80129fa:	4413      	add	r3, r2
 80129fc:	009b      	lsls	r3, r3, #2
 80129fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012a02:	683a      	ldr	r2, [r7, #0]
 8012a04:	4413      	add	r3, r2
 8012a06:	3304      	adds	r3, #4
 8012a08:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 8012a0a:	79fb      	ldrb	r3, [r7, #7]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d118      	bne.n	8012a42 <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 8012a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a12:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 8012a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a16:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	da2a      	bge.n	8012a72 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8012a1c:	2224      	movs	r2, #36	; 0x24
 8012a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a22:	f00c fd3b 	bl	801f49c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8012a26:	2224      	movs	r2, #36	; 0x24
 8012a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a2c:	f00c fd36 	bl	801f49c <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8012a30:	2224      	movs	r2, #36	; 0x24
 8012a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012a36:	f00c fd31 	bl	801f49c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8012a40:	e017      	b.n	8012a72 <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 8012a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a44:	699a      	ldr	r2, [r3, #24]
 8012a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a48:	699b      	ldr	r3, [r3, #24]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d911      	bls.n	8012a72 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8012a4e:	2224      	movs	r2, #36	; 0x24
 8012a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a54:	f00c fd22 	bl	801f49c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8012a58:	2224      	movs	r2, #36	; 0x24
 8012a5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a5e:	f00c fd1d 	bl	801f49c <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8012a62:	2224      	movs	r2, #36	; 0x24
 8012a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012a68:	f00c fd18 	bl	801f49c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8012a72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012a76:	3301      	adds	r3, #1
 8012a78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012a82:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d3a6      	bcc.n	80129d8 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 8012a8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d19b      	bne.n	80129ca <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 8012a92:	e000      	b.n	8012a96 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 8012a94:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 8012a96:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3740      	adds	r7, #64	; 0x40
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8012aa2:	b480      	push	{r7}
 8012aa4:	b087      	sub	sp, #28
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	60b9      	str	r1, [r7, #8]
 8012aac:	607a      	str	r2, [r7, #4]
 8012aae:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012abc:	7bfa      	ldrb	r2, [r7, #15]
 8012abe:	4613      	mov	r3, r2
 8012ac0:	00db      	lsls	r3, r3, #3
 8012ac2:	4413      	add	r3, r2
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	4413      	add	r3, r2
 8012ace:	3304      	adds	r3, #4
 8012ad0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	2200      	movs	r2, #0
 8012adc:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	75fb      	strb	r3, [r7, #23]
 8012ae4:	e01c      	b.n	8012b20 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	78da      	ldrb	r2, [r3, #3]
 8012aea:	7dfb      	ldrb	r3, [r7, #23]
 8012aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8012af0:	fb01 f202 	mul.w	r2, r1, r2
 8012af4:	1a9b      	subs	r3, r3, r2
 8012af6:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	68da      	ldr	r2, [r3, #12]
 8012afc:	7d79      	ldrb	r1, [r7, #21]
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	3106      	adds	r1, #6
 8012b02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b06:	441a      	add	r2, r3
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	689a      	ldr	r2, [r3, #8]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	689b      	ldr	r3, [r3, #8]
 8012b14:	441a      	add	r2, r3
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8012b1a:	7dfb      	ldrb	r3, [r7, #23]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	75fb      	strb	r3, [r7, #23]
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	791b      	ldrb	r3, [r3, #4]
 8012b24:	7dfa      	ldrb	r2, [r7, #23]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d9dd      	bls.n	8012ae6 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	68da      	ldr	r2, [r3, #12]
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	689b      	ldr	r3, [r3, #8]
 8012b32:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8012b38:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	371c      	adds	r7, #28
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b08d      	sub	sp, #52	; 0x34
 8012b4c:	af02      	add	r7, sp, #8
 8012b4e:	60ba      	str	r2, [r7, #8]
 8012b50:	607b      	str	r3, [r7, #4]
 8012b52:	4603      	mov	r3, r0
 8012b54:	73fb      	strb	r3, [r7, #15]
 8012b56:	460b      	mov	r3, r1
 8012b58:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8012b60:	2300      	movs	r3, #0
 8012b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 8012b66:	2300      	movs	r3, #0
 8012b68:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012b76:	7bfa      	ldrb	r2, [r7, #15]
 8012b78:	4613      	mov	r3, r2
 8012b7a:	00db      	lsls	r3, r3, #3
 8012b7c:	4413      	add	r3, r2
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	4413      	add	r3, r2
 8012b88:	3304      	adds	r3, #4
 8012b8a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	789b      	ldrb	r3, [r3, #2]
 8012b90:	2bff      	cmp	r3, #255	; 0xff
 8012b92:	d102      	bne.n	8012b9a <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	2201      	movs	r2, #1
 8012b98:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	789b      	ldrb	r3, [r3, #2]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	78d2      	ldrb	r2, [r2, #3]
 8012ba2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ba6:	fb01 f202 	mul.w	r2, r1, r2
 8012baa:	1a9b      	subs	r3, r3, r2
 8012bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8012bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012bb4:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	8c3b      	ldrh	r3, [r7, #32]
 8012bbe:	4413      	add	r3, r2
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 8012bc4:	8c3a      	ldrh	r2, [r7, #32]
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	789b      	ldrb	r3, [r3, #2]
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	1ad3      	subs	r3, r2, r3
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 8012bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012bd6:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	791b      	ldrb	r3, [r3, #4]
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	8bfb      	ldrh	r3, [r7, #30]
 8012be0:	4413      	add	r3, r2
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 8012be6:	8bfa      	ldrh	r2, [r7, #30]
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	789b      	ldrb	r3, [r3, #2]
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	1ad3      	subs	r3, r2, r3
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 8012bf4:	8bfa      	ldrh	r2, [r7, #30]
 8012bf6:	8c3b      	ldrh	r3, [r7, #32]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 8012bfe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012c02:	2b03      	cmp	r3, #3
 8012c04:	dd01      	ble.n	8012c0a <VL53L1_f_027+0xc2>
		window_width = 3;
 8012c06:	2303      	movs	r3, #3
 8012c08:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8012c0a:	8c3a      	ldrh	r2, [r7, #32]
 8012c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c0e:	4413      	add	r3, r2
 8012c10:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 8012c12:	b219      	sxth	r1, r3
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	78da      	ldrb	r2, [r3, #3]
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	3314      	adds	r3, #20
 8012c1c:	7bbc      	ldrb	r4, [r7, #14]
 8012c1e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8012c22:	9301      	str	r3, [sp, #4]
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	4623      	mov	r3, r4
 8012c2a:	f000 f846 	bl	8012cba <VL53L1_f_030>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 8012c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d114      	bne.n	8012c66 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8012c3c:	8bfa      	ldrh	r2, [r7, #30]
 8012c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c40:	1ad3      	subs	r3, r2, r3
 8012c42:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 8012c44:	b218      	sxth	r0, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	78da      	ldrb	r2, [r3, #3]
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	331c      	adds	r3, #28
 8012c4e:	7bbc      	ldrb	r4, [r7, #14]
 8012c50:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8012c54:	9301      	str	r3, [sp, #4]
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	4623      	mov	r3, r4
 8012c5c:	f000 f82d 	bl	8012cba <VL53L1_f_030>
 8012c60:	4603      	mov	r3, r0
 8012c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	695a      	ldr	r2, [r3, #20]
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	69db      	ldr	r3, [r3, #28]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d909      	bls.n	8012c86 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	695b      	ldr	r3, [r3, #20]
 8012c76:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	69da      	ldr	r2, [r3, #28]
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	69ba      	ldr	r2, [r7, #24]
 8012c84:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	699a      	ldr	r2, [r3, #24]
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	695b      	ldr	r3, [r3, #20]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d203      	bcs.n	8012c9a <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	699a      	ldr	r2, [r3, #24]
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	699a      	ldr	r2, [r3, #24]
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	69db      	ldr	r3, [r3, #28]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d903      	bls.n	8012cae <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	699a      	ldr	r2, [r3, #24]
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 8012cae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	372c      	adds	r7, #44	; 0x2c
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd90      	pop	{r4, r7, pc}

08012cba <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8012cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cbe:	b09d      	sub	sp, #116	; 0x74
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	461c      	mov	r4, r3
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8012cca:	460b      	mov	r3, r1
 8012ccc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cd6:	4623      	mov	r3, r4
 8012cd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 8012cee:	f04f 0200 	mov.w	r2, #0
 8012cf2:	f04f 0300 	mov.w	r3, #0
 8012cf6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8012cfa:	f04f 0200 	mov.w	r2, #0
 8012cfe:	f04f 0300 	mov.w	r3, #0
 8012d02:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 8012d06:	f04f 0200 	mov.w	r2, #0
 8012d0a:	f04f 0300 	mov.w	r3, #0
 8012d0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 8012d12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d1a:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8012d1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	f000 809c 	beq.w	8012e5e <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8012d26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012d2a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8012d2e:	e08f      	b.n	8012e50 <VL53L1_f_030+0x196>

		if (lb < 0)
 8012d30:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	da09      	bge.n	8012d4c <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8012d38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012d42:	4413      	add	r3, r2
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8012d4a:	e00a      	b.n	8012d62 <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8012d4c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8012d50:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8012d54:	fb91 f3f2 	sdiv	r3, r1, r2
 8012d58:	fb02 f303 	mul.w	r3, r2, r3
 8012d5c:	1acb      	subs	r3, r1, r3
 8012d5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 8012d62:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	db6b      	blt.n	8012e42 <VL53L1_f_030+0x188>
 8012d6a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012d6e:	2b17      	cmp	r3, #23
 8012d70:	dc67      	bgt.n	8012e42 <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 8012d72:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012d76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d7a:	3306      	adds	r3, #6
 8012d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d80:	17da      	asrs	r2, r3, #31
 8012d82:	633b      	str	r3, [r7, #48]	; 0x30
 8012d84:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 8012d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012d8e:	17da      	asrs	r2, r3, #31
 8012d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d92:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	1a9b      	subs	r3, r3, r2
 8012d9e:	623b      	str	r3, [r7, #32]
 8012da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012da2:	460a      	mov	r2, r1
 8012da4:	eb63 0302 	sbc.w	r3, r3, r2
 8012da8:	627b      	str	r3, [r7, #36]	; 0x24
 8012daa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012dae:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 8012db2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d009      	beq.n	8012dce <VL53L1_f_030+0x114>
 8012dba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	da05      	bge.n	8012dce <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 8012dc2:	f04f 0200 	mov.w	r2, #0
 8012dc6:	f04f 0300 	mov.w	r3, #0
 8012dca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 8012dce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8012dd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012dd6:	1884      	adds	r4, r0, r2
 8012dd8:	61bc      	str	r4, [r7, #24]
 8012dda:	eb41 0303 	adc.w	r3, r1, r3
 8012dde:	61fb      	str	r3, [r7, #28]
 8012de0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8012de4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8012de8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012dec:	17da      	asrs	r2, r3, #31
 8012dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8012df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012df2:	f04f 0200 	mov.w	r2, #0
 8012df6:	f04f 0300 	mov.w	r3, #0
 8012dfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012dfc:	02cb      	lsls	r3, r1, #11
 8012dfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e00:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8012e04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e06:	02ca      	lsls	r2, r1, #11
 8012e08:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8012e0c:	f143 0600 	adc.w	r6, r3, #0
 8012e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e12:	fb06 f203 	mul.w	r2, r6, r3
 8012e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e18:	fb05 f303 	mul.w	r3, r5, r3
 8012e1c:	441a      	add	r2, r3
 8012e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e20:	fba3 ab05 	umull	sl, fp, r3, r5
 8012e24:	eb02 030b 	add.w	r3, r2, fp
 8012e28:	469b      	mov	fp, r3
			weighted_sum +=
 8012e2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012e2e:	eb12 010a 	adds.w	r1, r2, sl
 8012e32:	6139      	str	r1, [r7, #16]
 8012e34:	eb43 030b 	adc.w	r3, r3, fp
 8012e38:	617b      	str	r3, [r7, #20]
 8012e3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012e3e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8012e42:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	3301      	adds	r3, #1
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8012e50:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8012e54:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	f77f af69 	ble.w	8012d30 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 8012e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012e62:	2a01      	cmp	r2, #1
 8012e64:	f173 0300 	sbcs.w	r3, r3, #0
 8012e68:	db3b      	blt.n	8012ee2 <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 8012e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012e6e:	0fd9      	lsrs	r1, r3, #31
 8012e70:	2000      	movs	r0, #0
 8012e72:	60b9      	str	r1, [r7, #8]
 8012e74:	60f8      	str	r0, [r7, #12]
 8012e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	eb11 0802 	adds.w	r8, r1, r2
 8012e80:	4629      	mov	r1, r5
 8012e82:	eb41 0903 	adc.w	r9, r1, r3
 8012e86:	f04f 0200 	mov.w	r2, #0
 8012e8a:	f04f 0300 	mov.w	r3, #0
 8012e8e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8012e92:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8012e96:	ea4f 0369 	mov.w	r3, r9, asr #1
 8012e9a:	4610      	mov	r0, r2
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012ea2:	1814      	adds	r4, r2, r0
 8012ea4:	603c      	str	r4, [r7, #0]
 8012ea6:	414b      	adcs	r3, r1
 8012ea8:	607b      	str	r3, [r7, #4]
 8012eaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012eae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8012eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012eb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8012eba:	f7ed fe4d 	bl	8000b58 <__aeabi_ldivmod>
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 8012ec6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	da05      	bge.n	8012eda <VL53L1_f_030+0x220>
			weighted_sum = 0;
 8012ece:	f04f 0200 	mov.w	r2, #0
 8012ed2:	f04f 0300 	mov.w	r3, #0
 8012ed6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8012eda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ee0:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8012ee2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3774      	adds	r7, #116	; 0x74
 8012eea:	46bd      	mov	sp, r7
 8012eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ef0 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b086      	sub	sp, #24
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	60b9      	str	r1, [r7, #8]
 8012ef8:	607a      	str	r2, [r7, #4]
 8012efa:	603b      	str	r3, [r7, #0]
 8012efc:	4603      	mov	r3, r0
 8012efe:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012f00:	2300      	movs	r3, #0
 8012f02:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8012f04:	2300      	movs	r3, #0
 8012f06:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012f0c:	7bfa      	ldrb	r2, [r7, #15]
 8012f0e:	4613      	mov	r3, r2
 8012f10:	00db      	lsls	r3, r3, #3
 8012f12:	4413      	add	r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	3304      	adds	r3, #4
 8012f20:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 8012f22:	22ac      	movs	r2, #172	; 0xac
 8012f24:	68b9      	ldr	r1, [r7, #8]
 8012f26:	6a38      	ldr	r0, [r7, #32]
 8012f28:	f00c fab8 	bl	801f49c <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012f32:	75fb      	strb	r3, [r7, #23]
 8012f34:	e020      	b.n	8012f78 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	7dfa      	ldrb	r2, [r7, #23]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d304      	bcc.n	8012f4a <VL53L1_f_023+0x5a>
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	791b      	ldrb	r3, [r3, #4]
 8012f44:	7dfa      	ldrb	r2, [r7, #23]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d913      	bls.n	8012f72 <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	78da      	ldrb	r2, [r3, #3]
 8012f4e:	7dfb      	ldrb	r3, [r7, #23]
 8012f50:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f54:	fb01 f202 	mul.w	r2, r1, r2
 8012f58:	1a9b      	subs	r3, r3, r2
 8012f5a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8012f5c:	6a3b      	ldr	r3, [r7, #32]
 8012f5e:	7a9b      	ldrb	r3, [r3, #10]
 8012f60:	7d7a      	ldrb	r2, [r7, #21]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d205      	bcs.n	8012f72 <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8012f66:	7d7a      	ldrb	r2, [r7, #21]
 8012f68:	6a3b      	ldr	r3, [r7, #32]
 8012f6a:	3206      	adds	r2, #6
 8012f6c:	6839      	ldr	r1, [r7, #0]
 8012f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 8012f72:	7dfb      	ldrb	r3, [r7, #23]
 8012f74:	3301      	adds	r3, #1
 8012f76:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8012f78:	7dfa      	ldrb	r2, [r7, #23]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012f80:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8012f86:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	dbd4      	blt.n	8012f36 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012f8c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3718      	adds	r7, #24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}

08012f98 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8012f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f9c:	b096      	sub	sp, #88	; 0x58
 8012f9e:	af08      	add	r7, sp, #32
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	4608      	mov	r0, r1
 8012fa4:	4611      	mov	r1, r2
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	4623      	mov	r3, r4
 8012faa:	73fb      	strb	r3, [r7, #15]
 8012fac:	4603      	mov	r3, r0
 8012fae:	73bb      	strb	r3, [r7, #14]
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	737b      	strb	r3, [r7, #13]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8012fea:	7b7b      	ldrb	r3, [r7, #13]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d106      	bne.n	8012ffe <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 8012ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ff6:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8012ff8:	f06f 030e 	mvn.w	r3, #14
 8012ffc:	e06f      	b.n	80130de <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 8012ffe:	7bfb      	ldrb	r3, [r7, #15]
 8013000:	7b7a      	ldrb	r2, [r7, #13]
 8013002:	fbb3 f1f2 	udiv	r1, r3, r2
 8013006:	fb01 f202 	mul.w	r2, r1, r2
 801300a:	1a9b      	subs	r3, r3, r2
 801300c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 8013010:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013014:	7b39      	ldrb	r1, [r7, #12]
 8013016:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801301a:	f107 0320 	add.w	r3, r7, #32
 801301e:	9301      	str	r3, [sp, #4]
 8013020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013024:	9300      	str	r3, [sp, #0]
 8013026:	4613      	mov	r3, r2
 8013028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801302a:	f000 fddb 	bl	8013be4 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 801302e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013032:	7b39      	ldrb	r1, [r7, #12]
 8013034:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8013038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801303c:	9301      	str	r3, [sp, #4]
 801303e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013042:	9300      	str	r3, [sp, #0]
 8013044:	4613      	mov	r3, r2
 8013046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013048:	f000 fdcc 	bl	8013be4 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 801304c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8013050:	2b00      	cmp	r3, #0
 8013052:	d00e      	beq.n	8013072 <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8013054:	f107 021c 	add.w	r2, r7, #28
 8013058:	7b39      	ldrb	r1, [r7, #12]
 801305a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801305e:	f107 0314 	add.w	r3, r7, #20
 8013062:	9301      	str	r3, [sp, #4]
 8013064:	f107 0318 	add.w	r3, r7, #24
 8013068:	9300      	str	r3, [sp, #0]
 801306a:	4613      	mov	r3, r2
 801306c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801306e:	f000 fdb9 	bl	8013be4 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 8013072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013074:	469c      	mov	ip, r3
 8013076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013078:	469e      	mov	lr, r3
 801307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307c:	4698      	mov	r8, r3
 801307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013080:	4619      	mov	r1, r3
 8013082:	6a3b      	ldr	r3, [r7, #32]
 8013084:	461c      	mov	r4, r3
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	461d      	mov	r5, r3
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	461e      	mov	r6, r3
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 8013092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8013098:	607b      	str	r3, [r7, #4]
 801309a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801309c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80130a0:	7bb8      	ldrb	r0, [r7, #14]
 80130a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80130a4:	9207      	str	r2, [sp, #28]
 80130a6:	9306      	str	r3, [sp, #24]
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	9205      	str	r2, [sp, #20]
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	9304      	str	r3, [sp, #16]
 80130b0:	9603      	str	r6, [sp, #12]
 80130b2:	9502      	str	r5, [sp, #8]
 80130b4:	9401      	str	r4, [sp, #4]
 80130b6:	9100      	str	r1, [sp, #0]
 80130b8:	4643      	mov	r3, r8
 80130ba:	4672      	mov	r2, lr
 80130bc:	4661      	mov	r1, ip
 80130be:	f002 ff30 	bl	8015f22 <VL53L1_f_014>
 80130c2:	4603      	mov	r3, r0
 80130c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 80130c8:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80130cc:	f113 0f0f 	cmn.w	r3, #15
 80130d0:	d103      	bne.n	80130da <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 80130d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130d8:	801a      	strh	r2, [r3, #0]


	return status;
 80130da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3738      	adds	r7, #56	; 0x38
 80130e2:	46bd      	mov	sp, r7
 80130e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130e8 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80130e8:	b490      	push	{r4, r7}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	4604      	mov	r4, r0
 80130f0:	4608      	mov	r0, r1
 80130f2:	4611      	mov	r1, r2
 80130f4:	461a      	mov	r2, r3
 80130f6:	4623      	mov	r3, r4
 80130f8:	71fb      	strb	r3, [r7, #7]
 80130fa:	4603      	mov	r3, r0
 80130fc:	71bb      	strb	r3, [r7, #6]
 80130fe:	460b      	mov	r3, r1
 8013100:	717b      	strb	r3, [r7, #5]
 8013102:	4613      	mov	r3, r2
 8013104:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 801310e:	6a3b      	ldr	r3, [r7, #32]
 8013110:	79fa      	ldrb	r2, [r7, #7]
 8013112:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 8013114:	6a3b      	ldr	r3, [r7, #32]
 8013116:	2200      	movs	r2, #0
 8013118:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	781a      	ldrb	r2, [r3, #0]
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	785a      	ldrb	r2, [r3, #1]
 8013126:	6a3b      	ldr	r3, [r7, #32]
 8013128:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	789a      	ldrb	r2, [r3, #2]
 801312e:	6a3b      	ldr	r3, [r7, #32]
 8013130:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	78da      	ldrb	r2, [r3, #3]
 8013136:	6a3b      	ldr	r3, [r7, #32]
 8013138:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	791a      	ldrb	r2, [r3, #4]
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	795a      	ldrb	r2, [r3, #5]
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	791a      	ldrb	r2, [r3, #4]
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	b2db      	uxtb	r3, r3
 8013156:	3301      	adds	r3, #1
 8013158:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 801315a:	6a3b      	ldr	r3, [r7, #32]
 801315c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801315e:	69bb      	ldr	r3, [r7, #24]
 8013160:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8013164:	6a3b      	ldr	r3, [r7, #32]
 8013166:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8013168:	69fb      	ldr	r3, [r7, #28]
 801316a:	8c1a      	ldrh	r2, [r3, #32]
 801316c:	6a3b      	ldr	r3, [r7, #32]
 801316e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	695b      	ldr	r3, [r3, #20]
 8013174:	b29a      	uxth	r2, r3
 8013176:	6a3b      	ldr	r3, [r7, #32]
 8013178:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	699b      	ldr	r3, [r3, #24]
 801317e:	b29a      	uxth	r2, r3
 8013180:	6a3b      	ldr	r3, [r7, #32]
 8013182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	69db      	ldr	r3, [r3, #28]
 801318a:	b29a      	uxth	r2, r3
 801318c:	6a3b      	ldr	r3, [r7, #32]
 801318e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 8013192:	69fb      	ldr	r3, [r7, #28]
 8013194:	68db      	ldr	r3, [r3, #12]
 8013196:	461a      	mov	r2, r3
 8013198:	6a3b      	ldr	r3, [r7, #32]
 801319a:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	691a      	ldr	r2, [r3, #16]
 80131a0:	6a3b      	ldr	r3, [r7, #32]
 80131a2:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	689b      	ldr	r3, [r3, #8]
 80131a8:	461a      	mov	r2, r3
 80131aa:	6a3b      	ldr	r3, [r7, #32]
 80131ac:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80131b4:	6a3b      	ldr	r3, [r7, #32]
 80131b6:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80131b8:	6a3b      	ldr	r3, [r7, #32]
 80131ba:	2213      	movs	r2, #19
 80131bc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 80131c0:	887b      	ldrh	r3, [r7, #2]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d00a      	beq.n	80131dc <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	8c1b      	ldrh	r3, [r3, #32]
 80131ca:	461a      	mov	r2, r3
 80131cc:	887b      	ldrh	r3, [r7, #2]
 80131ce:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 80131d0:	429a      	cmp	r2, r3
 80131d2:	d903      	bls.n	80131dc <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 80131d4:	6a3b      	ldr	r3, [r7, #32]
 80131d6:	2206      	movs	r2, #6
 80131d8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 80131dc:	79bb      	ldrb	r3, [r7, #6]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	021b      	lsls	r3, r3, #8
 80131e2:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80131e4:	6a3b      	ldr	r3, [r7, #32]
 80131e6:	8a9b      	ldrh	r3, [r3, #20]
 80131e8:	89fa      	ldrh	r2, [r7, #14]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d205      	bcs.n	80131fa <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80131ee:	6a3b      	ldr	r3, [r7, #32]
 80131f0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80131f2:	89fb      	ldrh	r3, [r7, #14]
 80131f4:	1ad3      	subs	r3, r2, r3
 80131f6:	81fb      	strh	r3, [r7, #14]
 80131f8:	e001      	b.n	80131fe <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80131fa:	2300      	movs	r3, #0
 80131fc:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80131fe:	797b      	ldrb	r3, [r7, #5]
 8013200:	b29b      	uxth	r3, r3
 8013202:	021b      	lsls	r3, r3, #8
 8013204:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 801320c:	89bb      	ldrh	r3, [r7, #12]
 801320e:	4413      	add	r3, r2
 8013210:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8013212:	6a3b      	ldr	r3, [r7, #32]
 8013214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013218:	89fa      	ldrh	r2, [r7, #14]
 801321a:	429a      	cmp	r2, r3
 801321c:	d805      	bhi.n	801322a <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 801321e:	6a3b      	ldr	r3, [r7, #32]
 8013220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8013224:	89ba      	ldrh	r2, [r7, #12]
 8013226:	429a      	cmp	r2, r3
 8013228:	d203      	bcs.n	8013232 <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 801322a:	6a3b      	ldr	r3, [r7, #32]
 801322c:	2205      	movs	r2, #5
 801322e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 8013232:	bf00      	nop
 8013234:	3710      	adds	r7, #16
 8013236:	46bd      	mov	sp, r7
 8013238:	bc90      	pop	{r4, r7}
 801323a:	4770      	bx	lr

0801323c <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 801323c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801323e:	b08f      	sub	sp, #60	; 0x3c
 8013240:	af06      	add	r7, sp, #24
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	60b9      	str	r1, [r7, #8]
 8013246:	607a      	str	r2, [r7, #4]
 8013248:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801324a:	2300      	movs	r3, #0
 801324c:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 801324e:	2300      	movs	r3, #0
 8013250:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 8013252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013254:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8013258:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 801325a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801325c:	f7ff f856 	bl	801230c <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8013260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013262:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8013266:	22ac      	movs	r2, #172	; 0xac
 8013268:	6839      	ldr	r1, [r7, #0]
 801326a:	4618      	mov	r0, r3
 801326c:	f00c f916 	bl	801f49c <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	781a      	ldrb	r2, [r3, #0]
 8013274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013276:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	785a      	ldrb	r2, [r3, #1]
 801327c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801327e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	789a      	ldrb	r2, [r3, #2]
 8013284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013286:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 801328e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013290:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8013292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013294:	2200      	movs	r2, #0
 8013296:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8013298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801329a:	2204      	movs	r2, #4
 801329c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 801329e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132a0:	2200      	movs	r2, #0
 80132a2:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80132a4:	2300      	movs	r3, #0
 80132a6:	77bb      	strb	r3, [r7, #30]
 80132a8:	e008      	b.n	80132bc <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 80132aa:	7fbb      	ldrb	r3, [r7, #30]
 80132ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80132ae:	005b      	lsls	r3, r3, #1
 80132b0:	4413      	add	r3, r2
 80132b2:	2200      	movs	r2, #0
 80132b4:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80132b6:	7fbb      	ldrb	r3, [r7, #30]
 80132b8:	3301      	adds	r3, #1
 80132ba:	77bb      	strb	r3, [r7, #30]
 80132bc:	7fbb      	ldrb	r3, [r7, #30]
 80132be:	2b04      	cmp	r3, #4
 80132c0:	d9f3      	bls.n	80132aa <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 80132c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132c4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fd ff58 	bl	801117e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 80132d2:	461a      	mov	r2, r3
 80132d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80132da:	4619      	mov	r1, r3
 80132dc:	4610      	mov	r0, r2
 80132de:	f7fd ff8e 	bl	80111fe <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 80132e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132e4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7fe fb66 	bl	80119ba <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 80132ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7fd fffc 	bl	80112f2 <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013300:	2b00      	cmp	r3, #0
 8013302:	d009      	beq.n	8013318 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8013304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013306:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801330c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8013310:	461a      	mov	r2, r3
 8013312:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013314:	f000 fdae 	bl	8013e74 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8013320:	2300      	movs	r3, #0
 8013322:	77bb      	strb	r3, [r7, #30]
 8013324:	e01e      	b.n	8013364 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8013326:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d117      	bne.n	801335e <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 801332e:	7fbb      	ldrb	r3, [r7, #30]
 8013330:	68ba      	ldr	r2, [r7, #8]
 8013332:	3304      	adds	r3, #4
 8013334:	005b      	lsls	r3, r3, #1
 8013336:	4413      	add	r3, r2
 8013338:	8898      	ldrh	r0, [r3, #4]
 801333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801333c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8013340:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013346:	4413      	add	r3, r2
 8013348:	3304      	adds	r3, #4
 801334a:	9301      	str	r3, [sp, #4]
 801334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	460b      	mov	r3, r1
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	68f9      	ldr	r1, [r7, #12]
 8013356:	f7fe fb7b 	bl	8011a50 <VL53L1_f_001>
 801335a:	4603      	mov	r3, r0
 801335c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 801335e:	7fbb      	ldrb	r3, [r7, #30]
 8013360:	3301      	adds	r3, #1
 8013362:	77bb      	strb	r3, [r7, #30]
 8013364:	7fbb      	ldrb	r3, [r7, #30]
 8013366:	2b04      	cmp	r3, #4
 8013368:	d9dd      	bls.n	8013326 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 801336a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d11a      	bne.n	80133a8 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 801337a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8013386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013388:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801338c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801338e:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8013392:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013394:	9102      	str	r1, [sp, #8]
 8013396:	9201      	str	r2, [sp, #4]
 8013398:	9300      	str	r3, [sp, #0]
 801339a:	462b      	mov	r3, r5
 801339c:	4622      	mov	r2, r4
 801339e:	4631      	mov	r1, r6
 80133a0:	f7ff f82d 	bl	80123fe <VL53L1_f_018>
 80133a4:	4603      	mov	r3, r0
 80133a6:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 80133a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d104      	bne.n	80133ba <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 80133b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80133b2:	f7ff f954 	bl	801265e <VL53L1_f_019>
 80133b6:	4603      	mov	r3, r0
 80133b8:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 80133ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d104      	bne.n	80133cc <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 80133c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80133c4:	f7ff f999 	bl	80126fa <VL53L1_f_020>
 80133c8:	4603      	mov	r3, r0
 80133ca:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 80133cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d104      	bne.n	80133de <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 80133d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80133d6:	f7ff fa0e 	bl	80127f6 <VL53L1_f_021>
 80133da:	4603      	mov	r3, r0
 80133dc:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80133de:	2300      	movs	r3, #0
 80133e0:	77bb      	strb	r3, [r7, #30]
 80133e2:	e0a6      	b.n	8013532 <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 80133e4:	7fba      	ldrb	r2, [r7, #30]
 80133e6:	4613      	mov	r3, r2
 80133e8:	00db      	lsls	r3, r3, #3
 80133ea:	4413      	add	r3, r2
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80133f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133f4:	4413      	add	r3, r2
 80133f6:	3304      	adds	r3, #4
 80133f8:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 80133fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d109      	bne.n	8013416 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8013402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013404:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8013408:	7fbb      	ldrb	r3, [r7, #30]
 801340a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801340c:	4618      	mov	r0, r3
 801340e:	f7ff fb48 	bl	8012aa2 <VL53L1_f_022>
 8013412:	4603      	mov	r3, r0
 8013414:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8013416:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d110      	bne.n	8013440 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 801341e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013420:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801342c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8013430:	7fb8      	ldrb	r0, [r7, #30]
 8013432:	9300      	str	r3, [sp, #0]
 8013434:	4613      	mov	r3, r2
 8013436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013438:	f7ff fd5a 	bl	8012ef0 <VL53L1_f_023>
 801343c:	4603      	mov	r3, r0
 801343e:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8013440:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d10d      	bne.n	8013464 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8013448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801344a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801344e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013450:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8013454:	7fb8      	ldrb	r0, [r7, #30]
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	2300      	movs	r3, #0
 801345a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801345c:	f7ff fd48 	bl	8012ef0 <VL53L1_f_023>
 8013460:	4603      	mov	r3, r0
 8013462:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8013464:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d10d      	bne.n	8013488 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 801346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801346e:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8013472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013474:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8013478:	7fb8      	ldrb	r0, [r7, #30]
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	2300      	movs	r3, #0
 801347e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013480:	f7ff fd36 	bl	8012ef0 <VL53L1_f_023>
 8013484:	4603      	mov	r3, r0
 8013486:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8013488:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d109      	bne.n	80134a4 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8013490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013492:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8013496:	7fb8      	ldrb	r0, [r7, #30]
 8013498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801349a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801349c:	f000 f8dd 	bl	801365a <VL53L1_f_034>
 80134a0:	4603      	mov	r3, r0
 80134a2:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 80134a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d108      	bne.n	80134be <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	8a19      	ldrh	r1, [r3, #16]
 80134b0:	7fb8      	ldrb	r0, [r7, #30]
 80134b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134b6:	f000 f95c 	bl	8013772 <VL53L1_f_035>
 80134ba:	4603      	mov	r3, r0
 80134bc:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 80134be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d124      	bne.n	8013510 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	789d      	ldrb	r5, [r3, #2]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	7e1e      	ldrb	r6, [r3, #24]
 80134ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134d0:	f893 c003 	ldrb.w	ip, [r3, #3]
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	f893 e006 	ldrb.w	lr, [r3, #6]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80134e2:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 80134e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80134e8:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 80134ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80134ee:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 80134f2:	697c      	ldr	r4, [r7, #20]
 80134f4:	3420      	adds	r4, #32
 80134f6:	9404      	str	r4, [sp, #16]
 80134f8:	9003      	str	r0, [sp, #12]
 80134fa:	9102      	str	r1, [sp, #8]
 80134fc:	9201      	str	r2, [sp, #4]
 80134fe:	9300      	str	r3, [sp, #0]
 8013500:	4673      	mov	r3, lr
 8013502:	4662      	mov	r2, ip
 8013504:	4631      	mov	r1, r6
 8013506:	4628      	mov	r0, r5
 8013508:	f7ff fd46 	bl	8012f98 <VL53L1_f_026>
 801350c:	4603      	mov	r3, r0
 801350e:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8013510:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d109      	bne.n	801352c <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8013518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801351a:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 801351e:	7fb8      	ldrb	r0, [r7, #30]
 8013520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013522:	2101      	movs	r1, #1
 8013524:	f7ff fb10 	bl	8012b48 <VL53L1_f_027>
 8013528:	4603      	mov	r3, r0
 801352a:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 801352c:	7fbb      	ldrb	r3, [r7, #30]
 801352e:	3301      	adds	r3, #1
 8013530:	77bb      	strb	r3, [r7, #30]
 8013532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013534:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8013538:	7fba      	ldrb	r2, [r7, #30]
 801353a:	429a      	cmp	r2, r3
 801353c:	f4ff af52 	bcc.w	80133e4 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8013540:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d107      	bne.n	8013558 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	785b      	ldrb	r3, [r3, #1]
 801354c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801354e:	4618      	mov	r0, r3
 8013550:	f7ff fa23 	bl	801299a <VL53L1_f_028>
 8013554:	4603      	mov	r3, r0
 8013556:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8013558:	2300      	movs	r3, #0
 801355a:	77bb      	strb	r3, [r7, #30]
 801355c:	e071      	b.n	8013642 <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 801355e:	7fba      	ldrb	r2, [r7, #30]
 8013560:	4613      	mov	r3, r2
 8013562:	00db      	lsls	r3, r3, #3
 8013564:	4413      	add	r3, r2
 8013566:	009b      	lsls	r3, r3, #2
 8013568:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801356c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801356e:	4413      	add	r3, r2
 8013570:	3304      	adds	r3, #4
 8013572:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8013574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013576:	7c9a      	ldrb	r2, [r3, #18]
 8013578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801357a:	7c5b      	ldrb	r3, [r3, #17]
 801357c:	429a      	cmp	r2, r3
 801357e:	d25c      	bcs.n	801363a <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8013588:	429a      	cmp	r2, r3
 801358a:	dd57      	ble.n	801363c <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8013590:	2bff      	cmp	r3, #255	; 0xff
 8013592:	d053      	beq.n	801363c <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8013594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013596:	7c9b      	ldrb	r3, [r3, #18]
 8013598:	461a      	mov	r2, r3
			prange_data =
 801359a:	234c      	movs	r3, #76	; 0x4c
 801359c:	fb02 f303 	mul.w	r3, r2, r3
 80135a0:	3310      	adds	r3, #16
 80135a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135a4:	4413      	add	r3, r2
 80135a6:	3304      	adds	r3, #4
 80135a8:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 80135aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d115      	bne.n	80135de <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 80135b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135b4:	7c98      	ldrb	r0, [r3, #18]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f893 1020 	ldrb.w	r1, [r3, #32]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	8b5d      	ldrh	r5, [r3, #26]
 80135c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135c8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80135cc:	693a      	ldr	r2, [r7, #16]
 80135ce:	9202      	str	r2, [sp, #8]
 80135d0:	697a      	ldr	r2, [r7, #20]
 80135d2:	9201      	str	r2, [sp, #4]
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	462b      	mov	r3, r5
 80135d8:	4622      	mov	r2, r4
 80135da:	f7ff fd85 	bl	80130e8 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 80135de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d115      	bne.n	8013612 <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80135f8:	69bb      	ldr	r3, [r7, #24]
 80135fa:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 80135fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8013602:	9301      	str	r3, [sp, #4]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	4623      	mov	r3, r4
 801360a:	f000 fb44 	bl	8013c96 <VL53L1_f_011>
 801360e:	4603      	mov	r3, r0
 8013610:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8013612:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d108      	bne.n	801362c <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	8bd8      	ldrh	r0, [r3, #30]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013624:	693a      	ldr	r2, [r7, #16]
 8013626:	4619      	mov	r1, r3
 8013628:	f000 fbda 	bl	8013de0 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 801362c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801362e:	7c9b      	ldrb	r3, [r3, #18]
 8013630:	3301      	adds	r3, #1
 8013632:	b2da      	uxtb	r2, r3
 8013634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013636:	749a      	strb	r2, [r3, #18]
 8013638:	e000      	b.n	801363c <VL53L1_f_033+0x400>
			continue;
 801363a:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 801363c:	7fbb      	ldrb	r3, [r7, #30]
 801363e:	3301      	adds	r3, #1
 8013640:	77bb      	strb	r3, [r7, #30]
 8013642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013644:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8013648:	7fba      	ldrb	r2, [r7, #30]
 801364a:	429a      	cmp	r2, r3
 801364c:	d387      	bcc.n	801355e <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 801364e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3724      	adds	r7, #36	; 0x24
 8013656:	46bd      	mov	sp, r7
 8013658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801365a <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 801365a:	b580      	push	{r7, lr}
 801365c:	b08c      	sub	sp, #48	; 0x30
 801365e:	af02      	add	r7, sp, #8
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
 8013664:	603b      	str	r3, [r7, #0]
 8013666:	4603      	mov	r3, r0
 8013668:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 801366a:	2300      	movs	r3, #0
 801366c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8013670:	7bfa      	ldrb	r2, [r7, #15]
 8013672:	4613      	mov	r3, r2
 8013674:	00db      	lsls	r3, r3, #3
 8013676:	4413      	add	r3, r2
 8013678:	009b      	lsls	r3, r3, #2
 801367a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	4413      	add	r3, r2
 8013682:	3304      	adds	r3, #4
 8013684:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8013686:	2300      	movs	r3, #0
 8013688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 801368c:	2300      	movs	r3, #0
 801368e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8013690:	2300      	movs	r3, #0
 8013692:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8013694:	2300      	movs	r3, #0
 8013696:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8013698:	2300      	movs	r3, #0
 801369a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	785a      	ldrb	r2, [r3, #1]
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	781a      	ldrb	r2, [r3, #0]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	789a      	ldrb	r2, [r3, #2]
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80136b4:	6a3b      	ldr	r3, [r7, #32]
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136bc:	e04d      	b.n	801375a <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	78da      	ldrb	r2, [r3, #3]
 80136c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80136ca:	fb01 f202 	mul.w	r2, r1, r2
 80136ce:	1a9b      	subs	r3, r3, r2
 80136d0:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 80136d2:	6a3b      	ldr	r3, [r7, #32]
 80136d4:	7999      	ldrb	r1, [r3, #6]
 80136d6:	f107 0218 	add.w	r2, r7, #24
 80136da:	7ff8      	ldrb	r0, [r7, #31]
 80136dc:	f107 0310 	add.w	r3, r7, #16
 80136e0:	9301      	str	r3, [sp, #4]
 80136e2:	f107 0314 	add.w	r3, r7, #20
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	4613      	mov	r3, r2
 80136ea:	68ba      	ldr	r2, [r7, #8]
 80136ec:	f000 fa7a 	bl	8013be4 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 80136f0:	7ffb      	ldrb	r3, [r7, #31]
 80136f2:	69ba      	ldr	r2, [r7, #24]
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	440b      	add	r3, r1
 80136fa:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 80136fc:	7ffb      	ldrb	r3, [r7, #31]
 80136fe:	697a      	ldr	r2, [r7, #20]
 8013700:	6839      	ldr	r1, [r7, #0]
 8013702:	3318      	adds	r3, #24
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	440b      	add	r3, r1
 8013708:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 801370a:	7ffb      	ldrb	r3, [r7, #31]
 801370c:	693a      	ldr	r2, [r7, #16]
 801370e:	6839      	ldr	r1, [r7, #0]
 8013710:	3330      	adds	r3, #48	; 0x30
 8013712:	009b      	lsls	r3, r3, #2
 8013714:	440b      	add	r3, r1
 8013716:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8013718:	69ba      	ldr	r2, [r7, #24]
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	689a      	ldr	r2, [r3, #8]
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8013726:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8013728:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 801372a:	6839      	ldr	r1, [r7, #0]
 801372c:	3348      	adds	r3, #72	; 0x48
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	440b      	add	r3, r1
 8013732:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8013734:	697a      	ldr	r2, [r7, #20]
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	689a      	ldr	r2, [r3, #8]
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8013742:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8013744:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8013746:	6839      	ldr	r1, [r7, #0]
 8013748:	3360      	adds	r3, #96	; 0x60
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	440b      	add	r3, r1
 801374e:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8013750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013754:	3301      	adds	r3, #1
 8013756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801375a:	6a3b      	ldr	r3, [r7, #32]
 801375c:	791b      	ldrb	r3, [r3, #4]
 801375e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013762:	429a      	cmp	r2, r3
 8013764:	d9ab      	bls.n	80136be <VL53L1_f_034+0x64>
	}

	return status;
 8013766:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 801376a:	4618      	mov	r0, r3
 801376c:	3728      	adds	r7, #40	; 0x28
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}

08013772 <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8013772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013774:	b08f      	sub	sp, #60	; 0x3c
 8013776:	af06      	add	r7, sp, #24
 8013778:	60ba      	str	r2, [r7, #8]
 801377a:	607b      	str	r3, [r7, #4]
 801377c:	4603      	mov	r3, r0
 801377e:	73fb      	strb	r3, [r7, #15]
 8013780:	460b      	mov	r3, r1
 8013782:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8013784:	2300      	movs	r3, #0
 8013786:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8013788:	2300      	movs	r3, #0
 801378a:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 801378c:	7bfa      	ldrb	r2, [r7, #15]
 801378e:	4613      	mov	r3, r2
 8013790:	00db      	lsls	r3, r3, #3
 8013792:	4413      	add	r3, r2
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801379a:	687a      	ldr	r2, [r7, #4]
 801379c:	4413      	add	r3, r2
 801379e:	3304      	adds	r3, #4
 80137a0:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 80137a2:	2300      	movs	r3, #0
 80137a4:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 80137a6:	2300      	movs	r3, #0
 80137a8:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 80137aa:	2300      	movs	r3, #0
 80137ac:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	77fb      	strb	r3, [r7, #31]
 80137b4:	e0b9      	b.n	801392a <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	78da      	ldrb	r2, [r3, #3]
 80137ba:	7ffb      	ldrb	r3, [r7, #31]
 80137bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80137c0:	fb01 f202 	mul.w	r2, r1, r2
 80137c4:	1a9b      	subs	r3, r3, r2
 80137c6:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 80137c8:	7ffb      	ldrb	r3, [r7, #31]
 80137ca:	3301      	adds	r3, #1
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	78d2      	ldrb	r2, [r2, #3]
 80137d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80137d4:	fb01 f202 	mul.w	r2, r1, r2
 80137d8:	1a9b      	subs	r3, r3, r2
 80137da:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	789b      	ldrb	r3, [r3, #2]
 80137e0:	7dfa      	ldrb	r2, [r7, #23]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	f080 809e 	bcs.w	8013924 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 80137ec:	7dba      	ldrb	r2, [r7, #22]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	f080 8098 	bcs.w	8013924 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 80137f4:	7dfb      	ldrb	r3, [r7, #23]
 80137f6:	68ba      	ldr	r2, [r7, #8]
 80137f8:	3348      	adds	r3, #72	; 0x48
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	4413      	add	r3, r2
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10e      	bne.n	8013822 <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8013804:	7dfb      	ldrb	r3, [r7, #23]
 8013806:	68ba      	ldr	r2, [r7, #8]
 8013808:	3360      	adds	r3, #96	; 0x60
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	4413      	add	r3, r2
 801380e:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8013810:	2b00      	cmp	r3, #0
 8013812:	d106      	bne.n	8013822 <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8013814:	7dfb      	ldrb	r3, [r7, #23]
 8013816:	68ba      	ldr	r2, [r7, #8]
 8013818:	4413      	add	r3, r2
 801381a:	2200      	movs	r2, #0
 801381c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8013820:	e043      	b.n	80138aa <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8013822:	7dfb      	ldrb	r3, [r7, #23]
 8013824:	68ba      	ldr	r2, [r7, #8]
 8013826:	3348      	adds	r3, #72	; 0x48
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	4413      	add	r3, r2
 801382c:	685b      	ldr	r3, [r3, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	db0e      	blt.n	8013850 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8013832:	7dfb      	ldrb	r3, [r7, #23]
 8013834:	68ba      	ldr	r2, [r7, #8]
 8013836:	3360      	adds	r3, #96	; 0x60
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	4413      	add	r3, r2
 801383c:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 801383e:	2b00      	cmp	r3, #0
 8013840:	db06      	blt.n	8013850 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8013842:	7dfb      	ldrb	r3, [r7, #23]
 8013844:	68ba      	ldr	r2, [r7, #8]
 8013846:	4413      	add	r3, r2
 8013848:	2201      	movs	r2, #1
 801384a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801384e:	e02c      	b.n	80138aa <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8013850:	7dfb      	ldrb	r3, [r7, #23]
 8013852:	68ba      	ldr	r2, [r7, #8]
 8013854:	3348      	adds	r3, #72	; 0x48
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	4413      	add	r3, r2
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	2b00      	cmp	r3, #0
 801385e:	da1e      	bge.n	801389e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8013860:	7dfb      	ldrb	r3, [r7, #23]
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	3360      	adds	r3, #96	; 0x60
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	4413      	add	r3, r2
 801386a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 801386c:	2b00      	cmp	r3, #0
 801386e:	db16      	blt.n	801389e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8013870:	7dbb      	ldrb	r3, [r7, #22]
 8013872:	68ba      	ldr	r2, [r7, #8]
 8013874:	3348      	adds	r3, #72	; 0x48
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	4413      	add	r3, r2
 801387a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 801387c:	2b00      	cmp	r3, #0
 801387e:	db0e      	blt.n	801389e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8013880:	7dbb      	ldrb	r3, [r7, #22]
 8013882:	68ba      	ldr	r2, [r7, #8]
 8013884:	3360      	adds	r3, #96	; 0x60
 8013886:	009b      	lsls	r3, r3, #2
 8013888:	4413      	add	r3, r2
 801388a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 801388c:	2b00      	cmp	r3, #0
 801388e:	da06      	bge.n	801389e <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8013890:	7dfb      	ldrb	r3, [r7, #23]
 8013892:	68ba      	ldr	r2, [r7, #8]
 8013894:	4413      	add	r3, r2
 8013896:	2201      	movs	r2, #1
 8013898:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801389c:	e005      	b.n	80138aa <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 801389e:	7dfb      	ldrb	r3, [r7, #23]
 80138a0:	68ba      	ldr	r2, [r7, #8]
 80138a2:	4413      	add	r3, r2
 80138a4:	2200      	movs	r2, #0
 80138a6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 80138aa:	7dfb      	ldrb	r3, [r7, #23]
 80138ac:	68ba      	ldr	r2, [r7, #8]
 80138ae:	4413      	add	r3, r2
 80138b0:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d035      	beq.n	8013924 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	7ffa      	ldrb	r2, [r7, #31]
 80138bc:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 80138be:	7dfb      	ldrb	r3, [r7, #23]
 80138c0:	68ba      	ldr	r2, [r7, #8]
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	4413      	add	r3, r2
 80138c6:	685c      	ldr	r4, [r3, #4]
 80138c8:	7dfb      	ldrb	r3, [r7, #23]
 80138ca:	68ba      	ldr	r2, [r7, #8]
 80138cc:	3318      	adds	r3, #24
 80138ce:	009b      	lsls	r3, r3, #2
 80138d0:	4413      	add	r3, r2
 80138d2:	685d      	ldr	r5, [r3, #4]
 80138d4:	7dfb      	ldrb	r3, [r7, #23]
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	3330      	adds	r3, #48	; 0x30
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	4413      	add	r3, r2
 80138de:	685e      	ldr	r6, [r3, #4]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	689b      	ldr	r3, [r3, #8]
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	78d2      	ldrb	r2, [r2, #3]
 80138e8:	69b9      	ldr	r1, [r7, #24]
 80138ea:	3118      	adds	r1, #24
 80138ec:	7ff8      	ldrb	r0, [r7, #31]
 80138ee:	9105      	str	r1, [sp, #20]
 80138f0:	9204      	str	r2, [sp, #16]
 80138f2:	9303      	str	r3, [sp, #12]
 80138f4:	2300      	movs	r3, #0
 80138f6:	9302      	str	r3, [sp, #8]
 80138f8:	2300      	movs	r3, #0
 80138fa:	9301      	str	r3, [sp, #4]
 80138fc:	2300      	movs	r3, #0
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	4633      	mov	r3, r6
 8013902:	462a      	mov	r2, r5
 8013904:	4621      	mov	r1, r4
 8013906:	f000 f81c 	bl	8013942 <VL53L1_f_036>
 801390a:	4603      	mov	r3, r0
 801390c:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 801390e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013912:	f113 0f0f 	cmn.w	r3, #15
 8013916:	d105      	bne.n	8013924 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8013918:	7dfb      	ldrb	r3, [r7, #23]
 801391a:	68ba      	ldr	r2, [r7, #8]
 801391c:	4413      	add	r3, r2
 801391e:	2200      	movs	r2, #0
 8013920:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8013924:	7ffb      	ldrb	r3, [r7, #31]
 8013926:	3301      	adds	r3, #1
 8013928:	77fb      	strb	r3, [r7, #31]
 801392a:	69bb      	ldr	r3, [r7, #24]
 801392c:	791b      	ldrb	r3, [r3, #4]
 801392e:	7ffa      	ldrb	r2, [r7, #31]
 8013930:	429a      	cmp	r2, r3
 8013932:	f4ff af40 	bcc.w	80137b6 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8013936:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801393a:	4618      	mov	r0, r3
 801393c:	3724      	adds	r7, #36	; 0x24
 801393e:	46bd      	mov	sp, r7
 8013940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013942 <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8013942:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013946:	b0b2      	sub	sp, #200	; 0xc8
 8013948:	af00      	add	r7, sp, #0
 801394a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801394e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013956:	4603      	mov	r3, r0
 8013958:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801395c:	23f1      	movs	r3, #241	; 0xf1
 801395e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8013962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013966:	f04f 0300 	mov.w	r3, #0
 801396a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 801396e:	f04f 0200 	mov.w	r2, #0
 8013972:	f04f 0300 	mov.w	r3, #0
 8013976:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 801397a:	f04f 0200 	mov.w	r2, #0
 801397e:	f04f 0300 	mov.w	r3, #0
 8013982:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8013986:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801398a:	17da      	asrs	r2, r3, #31
 801398c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013990:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8013994:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013998:	17da      	asrs	r2, r3, #31
 801399a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801399e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80139a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80139a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80139aa:	4602      	mov	r2, r0
 80139ac:	ebb3 0802 	subs.w	r8, r3, r2
 80139b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139b4:	460a      	mov	r2, r1
 80139b6:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 80139ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80139be:	17da      	asrs	r2, r3, #31
 80139c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80139c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80139c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80139c8:	460b      	mov	r3, r1
 80139ca:	ebb8 0a03 	subs.w	sl, r8, r3
 80139ce:	4613      	mov	r3, r2
 80139d0:	eb69 0b03 	sbc.w	fp, r9, r3
 80139d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80139d8:	17da      	asrs	r2, r3, #31
 80139da:	673b      	str	r3, [r7, #112]	; 0x70
 80139dc:	677a      	str	r2, [r7, #116]	; 0x74
 80139de:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80139e2:	460b      	mov	r3, r1
 80139e4:	ebba 0403 	subs.w	r4, sl, r3
 80139e8:	4613      	mov	r3, r2
 80139ea:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80139ee:	f04f 0200 	mov.w	r2, #0
 80139f2:	f04f 0300 	mov.w	r3, #0
 80139f6:	032b      	lsls	r3, r5, #12
 80139f8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80139fc:	0322      	lsls	r2, r4, #12
 80139fe:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8013a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a06:	17da      	asrs	r2, r3, #31
 8013a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8013a0a:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8013a0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013a10:	17da      	asrs	r2, r3, #31
 8013a12:	663b      	str	r3, [r7, #96]	; 0x60
 8013a14:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8013a16:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8013a1a:	4623      	mov	r3, r4
 8013a1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8013a20:	4602      	mov	r2, r0
 8013a22:	1a9b      	subs	r3, r3, r2
 8013a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8013a26:	462b      	mov	r3, r5
 8013a28:	460a      	mov	r2, r1
 8013a2a:	eb63 0302 	sbc.w	r3, r3, r2
 8013a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8013a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a34:	17da      	asrs	r2, r3, #31
 8013a36:	653b      	str	r3, [r7, #80]	; 0x50
 8013a38:	657a      	str	r2, [r7, #84]	; 0x54
 8013a3a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8013a3e:	4623      	mov	r3, r4
 8013a40:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013a44:	4602      	mov	r2, r0
 8013a46:	1a9b      	subs	r3, r3, r2
 8013a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a4a:	462b      	mov	r3, r5
 8013a4c:	460a      	mov	r2, r1
 8013a4e:	eb63 0302 	sbc.w	r3, r3, r2
 8013a52:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8013a54:	f04f 0200 	mov.w	r2, #0
 8013a58:	f04f 0300 	mov.w	r3, #0
 8013a5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013a60:	4629      	mov	r1, r5
 8013a62:	030b      	lsls	r3, r1, #12
 8013a64:	4621      	mov	r1, r4
 8013a66:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8013a6a:	4621      	mov	r1, r4
 8013a6c:	030a      	lsls	r2, r1, #12
 8013a6e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8013a72:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8013a76:	4313      	orrs	r3, r2
 8013a78:	f000 80a8 	beq.w	8013bcc <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8013a7c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8013a80:	f04f 0000 	mov.w	r0, #0
 8013a84:	f04f 0100 	mov.w	r1, #0
 8013a88:	0319      	lsls	r1, r3, #12
 8013a8a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8013a8e:	0310      	lsls	r0, r2, #12
 8013a90:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8013a94:	1814      	adds	r4, r2, r0
 8013a96:	633c      	str	r4, [r7, #48]	; 0x30
 8013a98:	414b      	adcs	r3, r1
 8013a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8013a9c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013aa0:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8013aa4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8013aa8:	1891      	adds	r1, r2, r2
 8013aaa:	62b9      	str	r1, [r7, #40]	; 0x28
 8013aac:	415b      	adcs	r3, r3
 8013aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013ab4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8013ab8:	f7ed f84e 	bl	8000b58 <__aeabi_ldivmod>
 8013abc:	4602      	mov	r2, r0
 8013abe:	460b      	mov	r3, r1
 8013ac0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8013ac4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013ac8:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8013acc:	6239      	str	r1, [r7, #32]
 8013ace:	f143 0300 	adc.w	r3, r3, #0
 8013ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8013ad4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013ad8:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8013adc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8013ae4:	647a      	str	r2, [r7, #68]	; 0x44
 8013ae6:	f04f 0200 	mov.w	r2, #0
 8013aea:	f04f 0300 	mov.w	r3, #0
 8013aee:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013af2:	4629      	mov	r1, r5
 8013af4:	030b      	lsls	r3, r1, #12
 8013af6:	4621      	mov	r1, r4
 8013af8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8013afc:	4621      	mov	r1, r4
 8013afe:	030a      	lsls	r2, r1, #12
 8013b00:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8013b04:	1884      	adds	r4, r0, r2
 8013b06:	61bc      	str	r4, [r7, #24]
 8013b08:	eb41 0303 	adc.w	r3, r1, r3
 8013b0c:	61fb      	str	r3, [r7, #28]
 8013b0e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013b12:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 8013b16:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013b1a:	1c51      	adds	r1, r2, #1
 8013b1c:	63b9      	str	r1, [r7, #56]	; 0x38
 8013b1e:	f143 0300 	adc.w	r3, r3, #0
 8013b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8013b28:	460b      	mov	r3, r1
 8013b2a:	0fdb      	lsrs	r3, r3, #31
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	613b      	str	r3, [r7, #16]
 8013b30:	617a      	str	r2, [r7, #20]
 8013b32:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8013b36:	4623      	mov	r3, r4
 8013b38:	4602      	mov	r2, r0
 8013b3a:	189b      	adds	r3, r3, r2
 8013b3c:	60bb      	str	r3, [r7, #8]
 8013b3e:	460b      	mov	r3, r1
 8013b40:	462a      	mov	r2, r5
 8013b42:	eb42 0303 	adc.w	r3, r2, r3
 8013b46:	60fb      	str	r3, [r7, #12]
 8013b48:	f04f 0200 	mov.w	r2, #0
 8013b4c:	f04f 0300 	mov.w	r3, #0
 8013b50:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013b54:	4621      	mov	r1, r4
 8013b56:	084a      	lsrs	r2, r1, #1
 8013b58:	4629      	mov	r1, r5
 8013b5a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013b5e:	4629      	mov	r1, r5
 8013b60:	104b      	asrs	r3, r1, #1
 8013b62:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8013b66:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	da05      	bge.n	8013b7a <VL53L1_f_036+0x238>
			mean_phase = 0;
 8013b6e:	f04f 0200 	mov.w	r2, #0
 8013b72:	f04f 0300 	mov.w	r3, #0
 8013b76:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8013b7a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013b7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013b82:	f173 0300 	sbcs.w	r3, r3, #0
 8013b86:	db05      	blt.n	8013b94 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8013b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b8c:	f04f 0300 	mov.w	r3, #0
 8013b90:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8013b94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8013b9c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8013ba0:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 8013ba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013ba6:	fb93 f1f2 	sdiv	r1, r3, r2
 8013baa:	fb01 f202 	mul.w	r2, r1, r2
 8013bae:	1a9b      	subs	r3, r3, r2
 8013bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8013bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013bb8:	17da      	asrs	r2, r3, #31
 8013bba:	603b      	str	r3, [r7, #0]
 8013bbc:	607a      	str	r2, [r7, #4]
 8013bbe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013bc2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8013bcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013bd4:	601a      	str	r2, [r3, #0]

	return status;
 8013bd6:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	37c8      	adds	r7, #200	; 0xc8
 8013bde:	46bd      	mov	sp, r7
 8013be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013be4 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8013be4:	b480      	push	{r7}
 8013be6:	b087      	sub	sp, #28
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	60ba      	str	r2, [r7, #8]
 8013bec:	607b      	str	r3, [r7, #4]
 8013bee:	4603      	mov	r3, r0
 8013bf0:	73fb      	strb	r3, [r7, #15]
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2200      	movs	r2, #0
 8013c02:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 8013c04:	7bfa      	ldrb	r2, [r7, #15]
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	3206      	adds	r2, #6
 8013c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013c0e:	6a3b      	ldr	r3, [r7, #32]
 8013c10:	601a      	str	r2, [r3, #0]
	*pc = 0;
 8013c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c14:	2200      	movs	r2, #0
 8013c16:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8013c18:	2300      	movs	r3, #0
 8013c1a:	75fb      	strb	r3, [r7, #23]
 8013c1c:	e02f      	b.n	8013c7e <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8013c1e:	7bfa      	ldrb	r2, [r7, #15]
 8013c20:	7dfb      	ldrb	r3, [r7, #23]
 8013c22:	4413      	add	r3, r2
 8013c24:	68ba      	ldr	r2, [r7, #8]
 8013c26:	7a92      	ldrb	r2, [r2, #10]
 8013c28:	441a      	add	r2, r3
 8013c2a:	7bbb      	ldrb	r3, [r7, #14]
 8013c2c:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8013c2e:	68ba      	ldr	r2, [r7, #8]
 8013c30:	7a92      	ldrb	r2, [r2, #10]
 8013c32:	fb93 f1f2 	sdiv	r1, r3, r2
 8013c36:	fb01 f202 	mul.w	r2, r1, r2
 8013c3a:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8013c3c:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8013c3e:	7dfa      	ldrb	r2, [r7, #23]
 8013c40:	7bbb      	ldrb	r3, [r7, #14]
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d20a      	bcs.n	8013c5c <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	7db9      	ldrb	r1, [r7, #22]
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	3106      	adds	r1, #6
 8013c50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c54:	441a      	add	r2, r3
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	601a      	str	r2, [r3, #0]
 8013c5a:	e00d      	b.n	8013c78 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8013c5c:	7dfa      	ldrb	r2, [r7, #23]
 8013c5e:	7bbb      	ldrb	r3, [r7, #14]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d909      	bls.n	8013c78 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8013c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	7db9      	ldrb	r1, [r7, #22]
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	3106      	adds	r1, #6
 8013c6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c72:	441a      	add	r2, r3
 8013c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c76:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8013c78:	7dfb      	ldrb	r3, [r7, #23]
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	75fb      	strb	r3, [r7, #23]
 8013c7e:	7bbb      	ldrb	r3, [r7, #14]
 8013c80:	005a      	lsls	r2, r3, #1
 8013c82:	7dfb      	ldrb	r3, [r7, #23]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	daca      	bge.n	8013c1e <VL53L1_f_013+0x3a>
	}
}
 8013c88:	bf00      	nop
 8013c8a:	bf00      	nop
 8013c8c:	371c      	adds	r7, #28
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr

08013c96 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8013c96:	b580      	push	{r7, lr}
 8013c98:	b088      	sub	sp, #32
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	60ba      	str	r2, [r7, #8]
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	81fb      	strh	r3, [r7, #14]
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	81bb      	strh	r3, [r7, #12]
 8013ca8:	4613      	mov	r3, r2
 8013caa:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8013cac:	2300      	movs	r3, #0
 8013cae:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8013cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbe:	89fa      	ldrh	r2, [r7, #14]
 8013cc0:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8013cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc4:	89ba      	ldrh	r2, [r7, #12]
 8013cc6:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8013cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cca:	68ba      	ldr	r2, [r7, #8]
 8013ccc:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8013cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd0:	88fa      	ldrh	r2, [r7, #6]
 8013cd2:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 8013cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd6:	8a5b      	ldrh	r3, [r3, #18]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d101      	bne.n	8013ce0 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013cdc:	23f1      	movs	r3, #241	; 0xf1
 8013cde:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8013ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce2:	699b      	ldr	r3, [r3, #24]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d101      	bne.n	8013cec <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013ce8:	23f1      	movs	r3, #241	; 0xf1
 8013cea:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8013cec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d16f      	bne.n	8013dd4 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8013cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf6:	8a5b      	ldrh	r3, [r3, #18]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7fd f903 	bl	8010f04 <VL53L1_calc_pll_period_us>
 8013cfe:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8013d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d02:	699b      	ldr	r3, [r3, #24]
 8013d04:	3301      	adds	r3, #1
 8013d06:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8013d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0a:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013d14:	6978      	ldr	r0, [r7, #20]
 8013d16:	f7fd f90c 	bl	8010f32 <VL53L1_duration_maths>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1e:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8013d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d22:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8013d24:	0119      	lsls	r1, r3, #4
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013d2c:	6978      	ldr	r0, [r7, #20]
 8013d2e:	f7fd f900 	bl	8010f32 <VL53L1_duration_maths>
 8013d32:	4602      	mov	r2, r0
 8013d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d36:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8013d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8013d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3e:	69db      	ldr	r3, [r3, #28]
 8013d40:	4619      	mov	r1, r3
 8013d42:	4610      	mov	r0, r2
 8013d44:	f7fd fb6d 	bl	8011422 <VL53L1_rate_maths>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	461a      	mov	r2, r3
 8013d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4e:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8013d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8013d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d56:	6a1b      	ldr	r3, [r3, #32]
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7fd fb61 	bl	8011422 <VL53L1_rate_maths>
 8013d60:	4603      	mov	r3, r0
 8013d62:	461a      	mov	r2, r3
 8013d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d66:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8013d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d70:	6a1b      	ldr	r3, [r3, #32]
 8013d72:	4619      	mov	r1, r3
 8013d74:	4610      	mov	r0, r2
 8013d76:	f7fd fb54 	bl	8011422 <VL53L1_rate_maths>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d80:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8013d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d84:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8013d86:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8013d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8013d8c:	4413      	add	r3, r2
 8013d8e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8013d90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d905      	bls.n	8013da4 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8013d98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013d9c:	69ba      	ldr	r2, [r7, #24]
 8013d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013da2:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8013da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da6:	8ada      	ldrh	r2, [r3, #22]
 8013da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013dac:	69b9      	ldr	r1, [r7, #24]
 8013dae:	2006      	movs	r0, #6
 8013db0:	f7fd fb7c 	bl	80114ac <VL53L1_rate_per_spad_maths>
 8013db4:	4603      	mov	r3, r0
 8013db6:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8013db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dba:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8013dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc2:	8ad9      	ldrh	r1, [r3, #22]
 8013dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc6:	69db      	ldr	r3, [r3, #28]
 8013dc8:	461a      	mov	r2, r3
 8013dca:	f7fd f90b 	bl	8010fe4 <VL53L1_events_per_spad_maths>
 8013dce:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8013dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd2:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8013dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3720      	adds	r7, #32
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}

08013de0 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8013de0:	b590      	push	{r4, r7, lr}
 8013de2:	b085      	sub	sp, #20
 8013de4:	af02      	add	r7, sp, #8
 8013de6:	4603      	mov	r3, r0
 8013de8:	603a      	str	r2, [r7, #0]
 8013dea:	80fb      	strh	r3, [r7, #6]
 8013dec:	460b      	mov	r3, r1
 8013dee:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	8a58      	ldrh	r0, [r3, #18]
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	8a9c      	ldrh	r4, [r3, #20]
 8013dfc:	88fb      	ldrh	r3, [r7, #6]
 8013dfe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013e02:	9201      	str	r2, [sp, #4]
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	2300      	movs	r3, #0
 8013e08:	4622      	mov	r2, r4
 8013e0a:	f7fd fb83 	bl	8011514 <VL53L1_range_maths>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	8a58      	ldrh	r0, [r3, #18]
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	8a9c      	ldrh	r4, [r3, #20]
 8013e26:	88fb      	ldrh	r3, [r7, #6]
 8013e28:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013e2c:	9201      	str	r2, [sp, #4]
 8013e2e:	9300      	str	r3, [sp, #0]
 8013e30:	2300      	movs	r3, #0
 8013e32:	4622      	mov	r2, r4
 8013e34:	f7fd fb6e 	bl	8011514 <VL53L1_range_maths>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	8a58      	ldrh	r0, [r3, #18]
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	8a9c      	ldrh	r4, [r3, #20]
 8013e50:	88fb      	ldrh	r3, [r7, #6]
 8013e52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013e56:	9201      	str	r2, [sp, #4]
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	4622      	mov	r2, r4
 8013e5e:	f7fd fb59 	bl	8011514 <VL53L1_range_maths>
 8013e62:	4603      	mov	r3, r0
 8013e64:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8013e6c:	bf00      	nop
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd90      	pop	{r4, r7, pc}

08013e74 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b086      	sub	sp, #24
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8013e80:	2300      	movs	r3, #0
 8013e82:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8013e84:	2300      	movs	r3, #0
 8013e86:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	757b      	strb	r3, [r7, #21]





	memcpy(
 8013e90:	22ac      	movs	r2, #172	; 0xac
 8013e92:	68b9      	ldr	r1, [r7, #8]
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f00b fb01 	bl	801f49c <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	75fb      	strb	r3, [r7, #23]
 8013e9e:	e008      	b.n	8013eb2 <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8013ea0:	7dfa      	ldrb	r2, [r7, #23]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	3206      	adds	r2, #6
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8013eac:	7dfb      	ldrb	r3, [r7, #23]
 8013eae:	3301      	adds	r3, #1
 8013eb0:	75fb      	strb	r3, [r7, #23]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	7a5b      	ldrb	r3, [r3, #9]
 8013eb6:	7dfa      	ldrb	r2, [r7, #23]
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d3f1      	bcc.n	8013ea0 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8013ebc:	68f9      	ldr	r1, [r7, #12]
 8013ebe:	68b8      	ldr	r0, [r7, #8]
 8013ec0:	f000 f878 	bl	8013fb4 <VL53L1_f_038>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	7a9a      	ldrb	r2, [r3, #10]
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	7a9b      	ldrb	r3, [r3, #10]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d203      	bcs.n	8013edc <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	7a9b      	ldrb	r3, [r3, #10]
 8013ed8:	75bb      	strb	r3, [r7, #22]
 8013eda:	e002      	b.n	8013ee2 <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	7a9b      	ldrb	r3, [r3, #10]
 8013ee0:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	75fb      	strb	r3, [r7, #23]
 8013ee6:	e05c      	b.n	8013fa2 <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8013ee8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	db0f      	blt.n	8013f10 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013efa:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8013efc:	68ba      	ldr	r2, [r7, #8]
 8013efe:	7a92      	ldrb	r2, [r2, #10]
 8013f00:	b252      	sxtb	r2, r2
 8013f02:	fb93 f1f2 	sdiv	r1, r3, r2
 8013f06:	fb01 f202 	mul.w	r2, r1, r2
 8013f0a:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013f0c:	757b      	strb	r3, [r7, #21]
 8013f0e:	e013      	b.n	8013f38 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	7a9b      	ldrb	r3, [r3, #10]
 8013f14:	b25b      	sxtb	r3, r3
 8013f16:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8013f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013f22:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8013f24:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 8013f26:	68ba      	ldr	r2, [r7, #8]
 8013f28:	7a92      	ldrb	r2, [r2, #10]
 8013f2a:	b252      	sxtb	r2, r2
 8013f2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8013f30:	fb01 f202 	mul.w	r2, r1, r2
 8013f34:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8013f36:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8013f38:	7d7b      	ldrb	r3, [r7, #21]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	3206      	adds	r2, #6
 8013f40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8013f44:	7df9      	ldrb	r1, [r7, #23]
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	3106      	adds	r1, #6
 8013f4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	dd12      	ble.n	8013f78 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 8013f52:	7d7b      	ldrb	r3, [r7, #21]
 8013f54:	461a      	mov	r2, r3
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	3206      	adds	r2, #6
 8013f5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 8013f5e:	7df9      	ldrb	r1, [r7, #23]
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	3106      	adds	r1, #6
 8013f64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8013f68:	7d79      	ldrb	r1, [r7, #21]
 8013f6a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8013f6c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	1d82      	adds	r2, r0, #6
 8013f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013f76:	e006      	b.n	8013f86 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8013f78:	7d7b      	ldrb	r3, [r7, #21]
 8013f7a:	461a      	mov	r2, r3
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	3206      	adds	r2, #6
 8013f80:	2100      	movs	r1, #0
 8013f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8013f86:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8013f88:	7d7b      	ldrb	r3, [r7, #21]
 8013f8a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	3206      	adds	r2, #6
 8013f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	1d82      	adds	r2, r0, #6
 8013f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8013f9c:	7dfb      	ldrb	r3, [r7, #23]
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	75fb      	strb	r3, [r7, #23]
 8013fa2:	7dfa      	ldrb	r2, [r7, #23]
 8013fa4:	7dbb      	ldrb	r3, [r7, #22]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d39e      	bcc.n	8013ee8 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8013faa:	bf00      	nop
 8013fac:	bf00      	nop
 8013fae:	3718      	adds	r7, #24
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b086      	sub	sp, #24
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fd fb85 	bl	80116e4 <VL53L1_decode_vcsel_period>
 8013fda:	4603      	mov	r3, r0
	period = 2048 *
 8013fdc:	02db      	lsls	r3, r3, #11
 8013fde:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00a      	beq.n	8013ffc <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	fbb3 f2f2 	udiv	r2, r3, r2
 8013ff2:	68b9      	ldr	r1, [r7, #8]
 8013ff4:	fb01 f202 	mul.w	r2, r1, r2
 8013ff8:	1a9b      	subs	r3, r3, r2
 8013ffa:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014002:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 8014004:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8014006:	1ad3      	subs	r3, r2, r3
 8014008:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2b00      	cmp	r3, #0
 801400e:	dd09      	ble.n	8014024 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014016:	2b00      	cmp	r3, #0
 8014018:	da01      	bge.n	801401e <VL53L1_f_038+0x6a>
 801401a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801401e:	12db      	asrs	r3, r3, #11
 8014020:	75fb      	strb	r3, [r7, #23]
 8014022:	e008      	b.n	8014036 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801402a:	2b00      	cmp	r3, #0
 801402c:	da01      	bge.n	8014032 <VL53L1_f_038+0x7e>
 801402e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014032:	12db      	asrs	r3, r3, #11
 8014034:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8014036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801403a:	4618      	mov	r0, r3
 801403c:	3718      	adds	r7, #24
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b08e      	sub	sp, #56	; 0x38
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801404c:	2300      	movs	r3, #0
 801404e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 8014052:	2300      	movs	r3, #0
 8014054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8014058:	2300      	movs	r3, #0
 801405a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801405e:	2300      	movs	r3, #0
 8014060:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 8014062:	2300      	movs	r3, #0
 8014064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8014068:	2300      	movs	r3, #0
 801406a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801406e:	2300      	movs	r3, #0
 8014070:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8014074:	22ac      	movs	r2, #172	; 0xac
 8014076:	6879      	ldr	r1, [r7, #4]
 8014078:	6838      	ldr	r0, [r7, #0]
 801407a:	f00b fa0f 	bl	801f49c <memcpy>


	podata->VL53L1_p_024 = 0;
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	2200      	movs	r2, #0
 8014082:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8014084:	2300      	movs	r3, #0
 8014086:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801408a:	e00a      	b.n	80140a2 <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 801408c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014090:	683a      	ldr	r2, [r7, #0]
 8014092:	4413      	add	r3, r2
 8014094:	2210      	movs	r2, #16
 8014096:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8014098:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801409c:	3301      	adds	r3, #1
 801409e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80140a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140a6:	2b05      	cmp	r3, #5
 80140a8:	d9f0      	bls.n	801408c <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80140aa:	2300      	movs	r3, #0
 80140ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80140b0:	e00b      	b.n	80140ca <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 80140b2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	3206      	adds	r2, #6
 80140ba:	2100      	movs	r1, #0
 80140bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80140c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140c4:	3301      	adds	r3, #1
 80140c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	7a5b      	ldrb	r3, [r3, #9]
 80140ce:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d3ed      	bcc.n	80140b2 <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80140d6:	2300      	movs	r3, #0
 80140d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80140dc:	e012      	b.n	8014104 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 80140de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140e2:	3338      	adds	r3, #56	; 0x38
 80140e4:	443b      	add	r3, r7
 80140e6:	2200      	movs	r2, #0
 80140e8:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80140ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140f0:	3338      	adds	r3, #56	; 0x38
 80140f2:	443b      	add	r3, r7
 80140f4:	2200      	movs	r2, #0
 80140f6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80140fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140fe:	3301      	adds	r3, #1
 8014100:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8014104:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014108:	2b0f      	cmp	r3, #15
 801410a:	d9e8      	bls.n	80140de <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 801410c:	2300      	movs	r3, #0
 801410e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8014112:	2300      	movs	r3, #0
 8014114:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8014118:	e068      	b.n	80141ec <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 801411a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	4413      	add	r3, r2
 8014122:	7b1b      	ldrb	r3, [r3, #12]
 8014124:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8014128:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801412c:	3338      	adds	r3, #56	; 0x38
 801412e:	443b      	add	r3, r7
 8014130:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d115      	bne.n	8014164 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8014138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801413c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014140:	0092      	lsls	r2, r2, #2
 8014142:	b2d2      	uxtb	r2, r2
 8014144:	3338      	adds	r3, #56	; 0x38
 8014146:	443b      	add	r3, r7
 8014148:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 801414c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014150:	683a      	ldr	r2, [r7, #0]
 8014152:	4413      	add	r3, r2
 8014154:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8014158:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 801415a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801415e:	3301      	adds	r3, #1
 8014160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8014164:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014168:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801416c:	443a      	add	r2, r7
 801416e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8014172:	3201      	adds	r2, #1
 8014174:	b2d2      	uxtb	r2, r2
 8014176:	3338      	adds	r3, #56	; 0x38
 8014178:	443b      	add	r3, r7
 801417a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801417e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014182:	3338      	adds	r3, #56	; 0x38
 8014184:	443b      	add	r3, r7
 8014186:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801418e:	2300      	movs	r3, #0
 8014190:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8014194:	e021      	b.n	80141da <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8014196:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801419a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801419e:	441a      	add	r2, r3
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	3206      	adds	r2, #6
 80141a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 80141a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80141ac:	009a      	lsls	r2, r3, #2
 80141ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80141b2:	441a      	add	r2, r3
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	3206      	adds	r2, #6
 80141b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 80141bc:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 80141c0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80141c4:	4402      	add	r2, r0
 80141c6:	4419      	add	r1, r3
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	3206      	adds	r2, #6
 80141cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 80141d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80141d4:	3301      	adds	r3, #1
 80141d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80141da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80141de:	2b03      	cmp	r3, #3
 80141e0:	d9d9      	bls.n	8014196 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80141e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80141e6:	3301      	adds	r3, #1
 80141e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80141ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80141f0:	2b05      	cmp	r3, #5
 80141f2:	d992      	bls.n	801411a <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80141f4:	2300      	movs	r3, #0
 80141f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80141fa:	e022      	b.n	8014242 <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80141fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	4413      	add	r3, r2
 8014204:	7b1b      	ldrb	r3, [r3, #12]
 8014206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 801420a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801420e:	2b0f      	cmp	r3, #15
 8014210:	d80c      	bhi.n	801422c <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 8014212:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 8014216:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 801421a:	3238      	adds	r2, #56	; 0x38
 801421c:	443a      	add	r2, r7
 801421e:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 8014222:	683a      	ldr	r2, [r7, #0]
 8014224:	4413      	add	r3, r2
 8014226:	460a      	mov	r2, r1
 8014228:	749a      	strb	r2, [r3, #18]
 801422a:	e005      	b.n	8014238 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 801422c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014230:	683a      	ldr	r2, [r7, #0]
 8014232:	4413      	add	r3, r2
 8014234:	2200      	movs	r2, #0
 8014236:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8014238:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801423c:	3301      	adds	r3, #1
 801423e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8014242:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014246:	2b05      	cmp	r3, #5
 8014248:	d9d8      	bls.n	80141fc <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 801424a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	b2da      	uxtb	r2, r3
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8014256:	2300      	movs	r3, #0
 8014258:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801425c:	e050      	b.n	8014300 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801425e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014262:	3338      	adds	r3, #56	; 0x38
 8014264:	443b      	add	r3, r7
 8014266:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 801426a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 801426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426e:	2b00      	cmp	r3, #0
 8014270:	dd41      	ble.n	80142f6 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 8014272:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014276:	3338      	adds	r3, #56	; 0x38
 8014278:	443b      	add	r3, r7
 801427a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8014282:	2300      	movs	r3, #0
 8014284:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8014288:	e031      	b.n	80142ee <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 801428a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801428e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014292:	441a      	add	r2, r3
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	3206      	adds	r2, #6
 8014298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 801429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429e:	0fda      	lsrs	r2, r3, #31
 80142a0:	4413      	add	r3, r2
 80142a2:	105b      	asrs	r3, r3, #1
 80142a4:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 80142a6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80142aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80142ae:	441a      	add	r2, r3
 80142b0:	4401      	add	r1, r0
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	3206      	adds	r2, #6
 80142b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 80142ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80142be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80142c2:	441a      	add	r2, r3
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	3206      	adds	r2, #6
 80142c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80142cc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80142d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80142d4:	441a      	add	r2, r3
 80142d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d8:	fb91 f1f3 	sdiv	r1, r1, r3
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	3206      	adds	r2, #6
 80142e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 80142e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80142e8:	3301      	adds	r3, #1
 80142ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80142ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80142f2:	2b03      	cmp	r3, #3
 80142f4:	d9c9      	bls.n	801428a <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80142f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80142fa:	3301      	adds	r3, #1
 80142fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8014300:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014304:	2b0f      	cmp	r3, #15
 8014306:	d9aa      	bls.n	801425e <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8014308:	683b      	ldr	r3, [r7, #0]
 801430a:	2200      	movs	r2, #0
 801430c:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 801430e:	7bfb      	ldrb	r3, [r7, #15]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d102      	bne.n	801431a <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8014314:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8014316:	2b00      	cmp	r3, #0
 8014318:	d002      	beq.n	8014320 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	2204      	movs	r2, #4
 801431e:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8014320:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8014324:	4618      	mov	r0, r3
 8014326:	3738      	adds	r7, #56	; 0x38
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 801432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801432e:	b0cb      	sub	sp, #300	; 0x12c
 8014330:	af06      	add	r7, sp, #24
 8014332:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8014336:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 801433a:	6020      	str	r0, [r4, #0]
 801433c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8014340:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8014344:	6001      	str	r1, [r0, #0]
 8014346:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801434a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801434e:	600a      	str	r2, [r1, #0]
 8014350:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014354:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8014358:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801435a:	2300      	movs	r3, #0
 801435c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8014360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014364:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8014368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801436c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8014370:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014374:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8014378:	f107 0318 	add.w	r3, r7, #24
 801437c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8014380:	2300      	movs	r3, #0
 8014382:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8014384:	2300      	movs	r3, #0
 8014386:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 801438a:	2300      	movs	r3, #0
 801438c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8014390:	2300      	movs	r3, #0
 8014392:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8014396:	2300      	movs	r3, #0
 8014398:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 801439c:	2300      	movs	r3, #0
 801439e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 80143a2:	2300      	movs	r3, #0
 80143a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 80143a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80143ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80143b0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80143b4:	6818      	ldr	r0, [r3, #0]
 80143b6:	f7ff fe44 	bl	8014042 <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 80143ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80143be:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 80143c0:	b299      	uxth	r1, r3
 80143c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80143c6:	3348      	adds	r3, #72	; 0x48
 80143c8:	461a      	mov	r2, r3
 80143ca:	2000      	movs	r0, #0
 80143cc:	f7fd f9db 	bl	8011786 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 80143d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80143d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80143d8:	3348      	adds	r3, #72	; 0x48
 80143da:	4619      	mov	r1, r3
 80143dc:	4610      	mov	r0, r2
 80143de:	f7fd f994 	bl	801170a <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 80143e2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d142      	bne.n	8014470 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80143ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80143ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d039      	beq.n	8014470 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 80143fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014400:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8014408:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801440c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8014416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801441a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8014424:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014428:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8014432:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014436:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 801443a:	6812      	ldr	r2, [r2, #0]
 801443c:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8014440:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8014444:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8014448:	6809      	ldr	r1, [r1, #0]
 801444a:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 801444e:	f107 0014 	add.w	r0, r7, #20
 8014452:	9004      	str	r0, [sp, #16]
 8014454:	9103      	str	r1, [sp, #12]
 8014456:	9202      	str	r2, [sp, #8]
 8014458:	9301      	str	r3, [sp, #4]
 801445a:	2300      	movs	r3, #0
 801445c:	9300      	str	r3, [sp, #0]
 801445e:	2300      	movs	r3, #0
 8014460:	4632      	mov	r2, r6
 8014462:	4629      	mov	r1, r5
 8014464:	4620      	mov	r0, r4
 8014466:	f002 f98c 	bl	8016782 <VL53L1_f_040>
 801446a:	4603      	mov	r3, r0
 801446c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8014470:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8014474:	2b00      	cmp	r3, #0
 8014476:	d115      	bne.n	80144a4 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8014478:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801447c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8014486:	2b00      	cmp	r3, #0
 8014488:	d00c      	beq.n	80144a4 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 801448a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801448e:	697a      	ldr	r2, [r7, #20]
 8014490:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014494:	3348      	adds	r3, #72	; 0x48
 8014496:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801449a:	f002 fbe4 	bl	8016c66 <VL53L1_f_041>
 801449e:	4603      	mov	r3, r0
 80144a0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 80144a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80144a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 80144ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80144b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 80144b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80144b8:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 80144bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80144c0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80144c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80144c8:	2200      	movs	r2, #0
 80144ca:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 80144ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80144d2:	2200      	movs	r2, #0
 80144d4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 80144d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80144dc:	2200      	movs	r2, #0
 80144de:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80144e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80144e6:	2200      	movs	r2, #0
 80144e8:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 80144ec:	2300      	movs	r3, #0
 80144ee:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80144f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80144f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014500:	2b00      	cmp	r3, #0
 8014502:	d002      	beq.n	801450a <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8014504:	2301      	movs	r3, #1
 8014506:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 801450a:	2300      	movs	r3, #0
 801450c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8014510:	e108      	b.n	8014724 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8014512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014516:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8014520:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8014524:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014528:	3348      	adds	r3, #72	; 0x48
 801452a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801452e:	7814      	ldrb	r4, [r2, #0]
 8014530:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014534:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8014538:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801453c:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8014540:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8014544:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8014548:	9405      	str	r4, [sp, #20]
 801454a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 801454e:	9404      	str	r4, [sp, #16]
 8014550:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8014554:	9403      	str	r4, [sp, #12]
 8014556:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 801455a:	9402      	str	r4, [sp, #8]
 801455c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8014560:	9401      	str	r4, [sp, #4]
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014568:	6812      	ldr	r2, [r2, #0]
 801456a:	6809      	ldr	r1, [r1, #0]
 801456c:	6800      	ldr	r0, [r0, #0]
 801456e:	f7fe fe65 	bl	801323c <VL53L1_f_033>
 8014572:	4603      	mov	r3, r0
 8014574:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8014578:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 801457c:	2b00      	cmp	r3, #0
 801457e:	f040 80cb 	bne.w	8014718 <VL53L1_hist_process_data+0x3ec>
 8014582:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8014586:	2b00      	cmp	r3, #0
 8014588:	f040 80c6 	bne.w	8014718 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 801458c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014590:	7c9b      	ldrb	r3, [r3, #18]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d110      	bne.n	80145b8 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8014596:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801459a:	3314      	adds	r3, #20
 801459c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 80145a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80145a4:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 80145a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80145aa:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 80145ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80145b0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 80145b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80145b6:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 80145b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80145bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 80145c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 80145c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	461a      	mov	r2, r3
 80145d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80145d4:	fb02 f303 	mul.w	r3, r2, r3
 80145d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 80145dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80145e0:	011b      	lsls	r3, r3, #4
 80145e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 80145e6:	2300      	movs	r3, #0
 80145e8:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80145ec:	e08b      	b.n	8014706 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 80145ee:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80145f2:	224c      	movs	r2, #76	; 0x4c
 80145f4:	fb02 f303 	mul.w	r3, r2, r3
 80145f8:	3310      	adds	r3, #16
 80145fa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80145fe:	4413      	add	r3, r2
 8014600:	3304      	adds	r3, #4
 8014602:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8014606:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801460a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 801460e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014612:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014616:	429a      	cmp	r2, r3
 8014618:	dd0e      	ble.n	8014638 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 801461a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801461e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8014622:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8014624:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014628:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801462c:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 801462e:	1ad3      	subs	r3, r2, r3
 8014630:	b29b      	uxth	r3, r3
				delta_mm =
 8014632:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8014636:	e00d      	b.n	8014654 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8014638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801463c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014640:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8014642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014646:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 801464a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 801464c:	1ad3      	subs	r3, r2, r3
 801464e:	b29b      	uxth	r3, r3
				delta_mm =
 8014650:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8014654:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014658:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8014660:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8014664:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	461a      	mov	r2, r3
 801466c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014670:	fb02 f303 	mul.w	r3, r2, r3
 8014674:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8014678:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801467c:	015b      	lsls	r3, r3, #5
 801467e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8014682:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014686:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 801468a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801468e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8014698:	429a      	cmp	r2, r3
 801469a:	dd2f      	ble.n	80146fc <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 801469c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80146a0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 80146a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80146a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 80146b2:	429a      	cmp	r2, r3
 80146b4:	da22      	bge.n	80146fc <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 80146b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80146ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 80146bc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d91b      	bls.n	80146fc <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 80146c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80146c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80146ca:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 80146cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80146d0:	4293      	cmp	r3, r2
 80146d2:	d913      	bls.n	80146fc <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 80146d4:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 80146d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80146dc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80146e0:	6812      	ldr	r2, [r2, #0]
 80146e2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 80146e4:	4293      	cmp	r3, r2
 80146e6:	da09      	bge.n	80146fc <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 80146e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80146ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 80146f0:	224c      	movs	r2, #76	; 0x4c
 80146f2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80146f6:	4618      	mov	r0, r3
 80146f8:	f00a fed0 	bl	801f49c <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 80146fc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8014700:	3301      	adds	r3, #1
 8014702:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8014706:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801470a:	7c9b      	ldrb	r3, [r3, #18]
 801470c:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8014710:	429a      	cmp	r2, r3
 8014712:	f4ff af6c 	bcc.w	80145ee <VL53L1_hist_process_data+0x2c2>
 8014716:	e000      	b.n	801471a <VL53L1_hist_process_data+0x3ee>
			continue;
 8014718:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 801471a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 801471e:	3301      	adds	r3, #1
 8014720:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8014724:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8014728:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 801472c:	429a      	cmp	r2, r3
 801472e:	f67f aef0 	bls.w	8014512 <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8014732:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014736:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8014740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8014744:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8014748:	4618      	mov	r0, r3
 801474a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 801474e:	46bd      	mov	sp, r7
 8014750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014752 <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8014752:	b580      	push	{r7, lr}
 8014754:	b086      	sub	sp, #24
 8014756:	af00      	add	r7, sp, #0
 8014758:	60f8      	str	r0, [r7, #12]
 801475a:	460b      	mov	r3, r1
 801475c:	607a      	str	r2, [r7, #4]
 801475e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014760:	2300      	movs	r3, #0
 8014762:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8014764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d104      	bne.n	8014776 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f7f9 fb5a 	bl	800de26 <VL53L1_disable_firmware>
 8014772:	4603      	mov	r3, r0
 8014774:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8014776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d104      	bne.n	8014788 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 801477e:	68f8      	ldr	r0, [r7, #12]
 8014780:	f7f9 fb82 	bl	800de88 <VL53L1_enable_powerforce>
 8014784:	4603      	mov	r3, r0
 8014786:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8014788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d105      	bne.n	801479c <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8014790:	21fa      	movs	r1, #250	; 0xfa
 8014792:	68f8      	ldr	r0, [r7, #12]
 8014794:	f002 fdd0 	bl	8017338 <VL53L1_WaitUs>
 8014798:	4603      	mov	r3, r0
 801479a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 801479c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d107      	bne.n	80147b4 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 80147a4:	2201      	movs	r2, #1
 80147a6:	f240 7181 	movw	r1, #1921	; 0x781
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f002 fcd0 	bl	8017150 <VL53L1_WrByte>
 80147b0:	4603      	mov	r3, r0
 80147b2:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80147b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d107      	bne.n	80147cc <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 80147bc:	2205      	movs	r2, #5
 80147be:	f240 6183 	movw	r1, #1667	; 0x683
 80147c2:	68f8      	ldr	r0, [r7, #12]
 80147c4:	f002 fcc4 	bl	8017150 <VL53L1_WrByte>
 80147c8:	4603      	mov	r3, r0
 80147ca:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 80147cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d105      	bne.n	80147e0 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 80147d4:	6879      	ldr	r1, [r7, #4]
 80147d6:	68f8      	ldr	r0, [r7, #12]
 80147d8:	f002 fdae 	bl	8017338 <VL53L1_WaitUs>
 80147dc:	4603      	mov	r3, r0
 80147de:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 80147e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d107      	bne.n	80147f8 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 80147e8:	2201      	movs	r2, #1
 80147ea:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80147ee:	68f8      	ldr	r0, [r7, #12]
 80147f0:	f002 fcae 	bl	8017150 <VL53L1_WrByte>
 80147f4:	4603      	mov	r3, r0
 80147f6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 80147f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d108      	bne.n	8014812 <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8014800:	897b      	ldrh	r3, [r7, #10]
 8014802:	461a      	mov	r2, r3
 8014804:	f240 7184 	movw	r1, #1924	; 0x784
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f002 fccb 	bl	80171a4 <VL53L1_WrWord>
 801480e:	4603      	mov	r3, r0
 8014810:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8014812:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8014816:	4618      	mov	r0, r3
 8014818:	3718      	adds	r7, #24
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 801481e:	b580      	push	{r7, lr}
 8014820:	b086      	sub	sp, #24
 8014822:	af00      	add	r7, sp, #0
 8014824:	60f8      	str	r0, [r7, #12]
 8014826:	607b      	str	r3, [r7, #4]
 8014828:	460b      	mov	r3, r1
 801482a:	72fb      	strb	r3, [r7, #11]
 801482c:	4613      	mov	r3, r2
 801482e:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014830:	2300      	movs	r3, #0
 8014832:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8014834:	2300      	movs	r3, #0
 8014836:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8014838:	7afb      	ldrb	r3, [r7, #11]
 801483a:	75bb      	strb	r3, [r7, #22]
 801483c:	e041      	b.n	80148c2 <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 801483e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d108      	bne.n	8014858 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8014846:	7dbb      	ldrb	r3, [r7, #22]
 8014848:	461a      	mov	r2, r3
 801484a:	f240 7194 	movw	r1, #1940	; 0x794
 801484e:	68f8      	ldr	r0, [r7, #12]
 8014850:	f002 fc7e 	bl	8017150 <VL53L1_WrByte>
 8014854:	4603      	mov	r3, r0
 8014856:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8014858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d107      	bne.n	8014870 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8014860:	2200      	movs	r2, #0
 8014862:	f240 7183 	movw	r1, #1923	; 0x783
 8014866:	68f8      	ldr	r0, [r7, #12]
 8014868:	f002 fc72 	bl	8017150 <VL53L1_WrByte>
 801486c:	4603      	mov	r3, r0
 801486e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8014870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d105      	bne.n	8014884 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8014878:	2105      	movs	r1, #5
 801487a:	68f8      	ldr	r0, [r7, #12]
 801487c:	f002 fd5c 	bl	8017338 <VL53L1_WaitUs>
 8014880:	4603      	mov	r3, r0
 8014882:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8014884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d107      	bne.n	801489c <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 801488c:	2201      	movs	r2, #1
 801488e:	f240 7183 	movw	r1, #1923	; 0x783
 8014892:	68f8      	ldr	r0, [r7, #12]
 8014894:	f002 fc5c 	bl	8017150 <VL53L1_WrByte>
 8014898:	4603      	mov	r3, r0
 801489a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 801489c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d108      	bne.n	80148b6 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 80148a4:	2304      	movs	r3, #4
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 80148ac:	68f8      	ldr	r0, [r7, #12]
 80148ae:	f002 fc19 	bl	80170e4 <VL53L1_ReadMulti>
 80148b2:	4603      	mov	r3, r0
 80148b4:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	3304      	adds	r3, #4
 80148ba:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 80148bc:	7dbb      	ldrb	r3, [r7, #22]
 80148be:	3301      	adds	r3, #1
 80148c0:	75bb      	strb	r3, [r7, #22]
 80148c2:	7dba      	ldrb	r2, [r7, #22]
 80148c4:	7af9      	ldrb	r1, [r7, #11]
 80148c6:	7abb      	ldrb	r3, [r7, #10]
 80148c8:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 80148ca:	429a      	cmp	r2, r3
 80148cc:	dbb7      	blt.n	801483e <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 80148ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3718      	adds	r7, #24
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}

080148da <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 80148da:	b580      	push	{r7, lr}
 80148dc:	b084      	sub	sp, #16
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80148e2:	2300      	movs	r3, #0
 80148e4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80148e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d107      	bne.n	80148fe <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 80148ee:	2201      	movs	r2, #1
 80148f0:	f240 7183 	movw	r1, #1923	; 0x783
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f002 fc2b 	bl	8017150 <VL53L1_WrByte>
 80148fa:	4603      	mov	r3, r0
 80148fc:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80148fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d107      	bne.n	8014916 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8014906:	2200      	movs	r2, #0
 8014908:	f240 7181 	movw	r1, #1921	; 0x781
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f002 fc1f 	bl	8017150 <VL53L1_WrByte>
 8014912:	4603      	mov	r3, r0
 8014914:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8014916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d104      	bne.n	8014928 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7f9 fac4 	bl	800deac <VL53L1_disable_powerforce>
 8014924:	4603      	mov	r3, r0
 8014926:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8014928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d104      	bne.n	801493a <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f7f9 fa66 	bl	800de02 <VL53L1_enable_firmware>
 8014936:	4603      	mov	r3, r0
 8014938:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 801493a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 801493e:	4618      	mov	r0, r3
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8014946:	b480      	push	{r7}
 8014948:	b087      	sub	sp, #28
 801494a:	af00      	add	r7, sp, #0
 801494c:	4603      	mov	r3, r0
 801494e:	60b9      	str	r1, [r7, #8]
 8014950:	607a      	str	r2, [r7, #4]
 8014952:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014954:	2300      	movs	r3, #0
 8014956:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8014958:	2300      	movs	r3, #0
 801495a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 801495c:	89fb      	ldrh	r3, [r7, #14]
 801495e:	2b03      	cmp	r3, #3
 8014960:	d802      	bhi.n	8014968 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8014962:	f06f 0308 	mvn.w	r3, #8
 8014966:	e018      	b.n	801499a <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8014968:	f44f 7380 	mov.w	r3, #256	; 0x100
 801496c:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	3302      	adds	r3, #2
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	b29b      	uxth	r3, r3
 8014976:	8afa      	ldrh	r2, [r7, #22]
 8014978:	1ad3      	subs	r3, r2, r3
 801497a:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 801497c:	8afb      	ldrh	r3, [r7, #22]
 801497e:	2bff      	cmp	r3, #255	; 0xff
 8014980:	d901      	bls.n	8014986 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8014982:	2300      	movs	r3, #0
 8014984:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8014986:	8afb      	ldrh	r3, [r7, #22]
 8014988:	b2da      	uxtb	r2, r3
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	78da      	ldrb	r2, [r3, #3]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	705a      	strb	r2, [r3, #1]

	return status;
 8014996:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801499a:	4618      	mov	r0, r3
 801499c:	371c      	adds	r7, #28
 801499e:	46bd      	mov	sp, r7
 80149a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a4:	4770      	bx	lr

080149a6 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 80149a6:	b590      	push	{r4, r7, lr}
 80149a8:	b087      	sub	sp, #28
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	4603      	mov	r3, r0
 80149ae:	60b9      	str	r1, [r7, #8]
 80149b0:	607a      	str	r2, [r7, #4]
 80149b2:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80149b4:	2300      	movs	r3, #0
 80149b6:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 80149b8:	2300      	movs	r3, #0
 80149ba:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 80149bc:	2300      	movs	r3, #0
 80149be:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 80149c0:	89fb      	ldrh	r3, [r7, #14]
 80149c2:	2b37      	cmp	r3, #55	; 0x37
 80149c4:	d802      	bhi.n	80149cc <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80149c6:	f06f 0308 	mvn.w	r3, #8
 80149ca:	e03e      	b.n	8014a4a <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80149cc:	68b9      	ldr	r1, [r7, #8]
 80149ce:	2002      	movs	r0, #2
 80149d0:	f7f9 f8fd 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80149d4:	4603      	mov	r3, r0
 80149d6:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	3302      	adds	r3, #2
 80149e0:	4619      	mov	r1, r3
 80149e2:	2002      	movs	r0, #2
 80149e4:	f7f9 f8f3 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80149e8:	4603      	mov	r3, r0
 80149ea:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 80149f4:	099b      	lsrs	r3, r3, #6
 80149f6:	b29a      	uxth	r2, r3
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2219      	movs	r2, #25
 8014a00:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2205      	movs	r2, #5
 8014a06:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2205      	movs	r2, #5
 8014a0c:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	3304      	adds	r3, #4
 8014a12:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8014a14:	2300      	movs	r3, #0
 8014a16:	74fb      	strb	r3, [r7, #19]
 8014a18:	e012      	b.n	8014a40 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8014a1a:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8014a1c:	6979      	ldr	r1, [r7, #20]
 8014a1e:	2002      	movs	r0, #2
 8014a20:	f7f9 f8d5 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014a24:	4603      	mov	r3, r0
 8014a26:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8014a28:	687a      	ldr	r2, [r7, #4]
 8014a2a:	1d23      	adds	r3, r4, #4
 8014a2c:	005b      	lsls	r3, r3, #1
 8014a2e:	4413      	add	r3, r2
 8014a30:	460a      	mov	r2, r1
 8014a32:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	3302      	adds	r3, #2
 8014a38:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8014a3a:	7cfb      	ldrb	r3, [r7, #19]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	74fb      	strb	r3, [r7, #19]
 8014a40:	7cfb      	ldrb	r3, [r7, #19]
 8014a42:	2b18      	cmp	r3, #24
 8014a44:	d9e9      	bls.n	8014a1a <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8014a46:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	371c      	adds	r7, #28
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd90      	pop	{r4, r7, pc}

08014a52 <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b086      	sub	sp, #24
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	4603      	mov	r3, r0
 8014a5a:	60b9      	str	r1, [r7, #8]
 8014a5c:	607a      	str	r2, [r7, #4]
 8014a5e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014a60:	2300      	movs	r3, #0
 8014a62:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8014a64:	89fb      	ldrh	r3, [r7, #14]
 8014a66:	2b07      	cmp	r3, #7
 8014a68:	d802      	bhi.n	8014a70 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8014a6a:	f06f 0308 	mvn.w	r3, #8
 8014a6e:	e027      	b.n	8014ac0 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8014a70:	68b9      	ldr	r1, [r7, #8]
 8014a72:	2002      	movs	r0, #2
 8014a74:	f7f9 f8ab 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	3302      	adds	r3, #2
 8014a84:	4619      	mov	r1, r3
 8014a86:	2002      	movs	r0, #2
 8014a88:	f7f9 f8a1 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	3304      	adds	r3, #4
 8014a98:	4619      	mov	r1, r3
 8014a9a:	2002      	movs	r0, #2
 8014a9c:	f7f9 f897 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	3306      	adds	r3, #6
 8014aac:	4619      	mov	r1, r3
 8014aae:	2002      	movs	r0, #2
 8014ab0:	f7f9 f88d 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	80da      	strh	r2, [r3, #6]

	return status;
 8014abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3718      	adds	r7, #24
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}

08014ac8 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b086      	sub	sp, #24
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	4603      	mov	r3, r0
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
 8014ad4:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8014ada:	89fb      	ldrh	r3, [r7, #14]
 8014adc:	2b0f      	cmp	r3, #15
 8014ade:	d802      	bhi.n	8014ae6 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8014ae0:	f06f 0308 	mvn.w	r3, #8
 8014ae4:	e04d      	b.n	8014b82 <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8014ae6:	68b9      	ldr	r1, [r7, #8]
 8014ae8:	2002      	movs	r0, #2
 8014aea:	f7f9 f870 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014aee:	4603      	mov	r3, r0
 8014af0:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	789a      	ldrb	r2, [r3, #2]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	78da      	ldrb	r2, [r3, #3]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	3304      	adds	r3, #4
 8014b0a:	4619      	mov	r1, r3
 8014b0c:	2002      	movs	r0, #2
 8014b0e:	f7f9 f85e 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014b12:	4603      	mov	r3, r0
 8014b14:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	3306      	adds	r3, #6
 8014b1e:	4619      	mov	r1, r3
 8014b20:	2002      	movs	r0, #2
 8014b22:	f7f9 f854 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014b26:	4603      	mov	r3, r0
 8014b28:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	3308      	adds	r3, #8
 8014b32:	4619      	mov	r1, r3
 8014b34:	2002      	movs	r0, #2
 8014b36:	f7f9 f84a 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	330a      	adds	r3, #10
 8014b46:	4619      	mov	r1, r3
 8014b48:	2002      	movs	r0, #2
 8014b4a:	f7f9 f840 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	330c      	adds	r3, #12
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	2002      	movs	r0, #2
 8014b5e:	f7f9 f836 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014b62:	4603      	mov	r3, r0
 8014b64:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	330e      	adds	r3, #14
 8014b6e:	4619      	mov	r1, r3
 8014b70:	2002      	movs	r0, #2
 8014b72:	f7f9 f82c 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014b76:	4603      	mov	r3, r0
 8014b78:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	81da      	strh	r2, [r3, #14]

	return status;
 8014b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3718      	adds	r7, #24
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b086      	sub	sp, #24
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	60f8      	str	r0, [r7, #12]
 8014b92:	607b      	str	r3, [r7, #4]
 8014b94:	460b      	mov	r3, r1
 8014b96:	72fb      	strb	r3, [r7, #11]
 8014b98:	4613      	mov	r3, r2
 8014b9a:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8014ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d106      	bne.n	8014bb6 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8014ba8:	2232      	movs	r2, #50	; 0x32
 8014baa:	2104      	movs	r1, #4
 8014bac:	68f8      	ldr	r0, [r7, #12]
 8014bae:	f7ff fdd0 	bl	8014752 <VL53L1_nvm_enable>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8014bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d107      	bne.n	8014bce <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8014bbe:	7aba      	ldrb	r2, [r7, #10]
 8014bc0:	7af9      	ldrb	r1, [r7, #11]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	68f8      	ldr	r0, [r7, #12]
 8014bc6:	f7ff fe2a 	bl	801481e <VL53L1_nvm_read>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8014bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d104      	bne.n	8014be0 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8014bd6:	68f8      	ldr	r0, [r7, #12]
 8014bd8:	f7ff fe7f 	bl	80148da <VL53L1_nvm_disable>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8014be0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3718      	adds	r7, #24
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014bfa:	f107 0308 	add.w	r3, r7, #8
 8014bfe:	2201      	movs	r2, #1
 8014c00:	212e      	movs	r1, #46	; 0x2e
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7ff ffc1 	bl	8014b8a <VL53L1_read_nvm_raw_data>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d108      	bne.n	8014c26 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 8014c14:	f107 0308 	add.w	r3, r7, #8
 8014c18:	683a      	ldr	r2, [r7, #0]
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	2004      	movs	r0, #4
 8014c1e:	f7ff fe92 	bl	8014946 <VL53L1_nvm_decode_optical_centre>
 8014c22:	4603      	mov	r3, r0
 8014c24:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8014c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3710      	adds	r7, #16
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}

08014c32 <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 8014c32:	b580      	push	{r7, lr}
 8014c34:	b092      	sub	sp, #72	; 0x48
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	6078      	str	r0, [r7, #4]
 8014c3a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014c42:	f107 030c 	add.w	r3, r7, #12
 8014c46:	220e      	movs	r2, #14
 8014c48:	2157      	movs	r1, #87	; 0x57
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f7ff ff9d 	bl	8014b8a <VL53L1_read_nvm_raw_data>
 8014c50:	4603      	mov	r3, r0
 8014c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014c56:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d109      	bne.n	8014c72 <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 8014c5e:	f107 030c 	add.w	r3, r7, #12
 8014c62:	683a      	ldr	r2, [r7, #0]
 8014c64:	4619      	mov	r1, r3
 8014c66:	2038      	movs	r0, #56	; 0x38
 8014c68:	f7ff fe9d 	bl	80149a6 <VL53L1_nvm_decode_cal_peak_rate_map>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8014c72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8014c76:	4618      	mov	r0, r3
 8014c78:	3748      	adds	r7, #72	; 0x48
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b086      	sub	sp, #24
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
 8014c86:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014c8c:	f107 030c 	add.w	r3, r7, #12
 8014c90:	2202      	movs	r2, #2
 8014c92:	2165      	movs	r1, #101	; 0x65
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7ff ff78 	bl	8014b8a <VL53L1_read_nvm_raw_data>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d108      	bne.n	8014cb8 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8014ca6:	f107 030c 	add.w	r3, r7, #12
 8014caa:	683a      	ldr	r2, [r7, #0]
 8014cac:	4619      	mov	r1, r3
 8014cae:	2008      	movs	r0, #8
 8014cb0:	f7ff fecf 	bl	8014a52 <VL53L1_nvm_decode_additional_offset_cal_data>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8014cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3718      	adds	r7, #24
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b08a      	sub	sp, #40	; 0x28
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	460b      	mov	r3, r1
 8014cce:	607a      	str	r2, [r7, #4]
 8014cd0:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8014cd8:	897b      	ldrh	r3, [r7, #10]
 8014cda:	089b      	lsrs	r3, r3, #2
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	b2d9      	uxtb	r1, r3
 8014ce0:	f107 0314 	add.w	r3, r7, #20
 8014ce4:	2204      	movs	r2, #4
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f7ff ff4f 	bl	8014b8a <VL53L1_read_nvm_raw_data>
 8014cec:	4603      	mov	r3, r0
 8014cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014cf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d109      	bne.n	8014d0e <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8014cfa:	f107 0314 	add.w	r3, r7, #20
 8014cfe:	687a      	ldr	r2, [r7, #4]
 8014d00:	4619      	mov	r1, r3
 8014d02:	2010      	movs	r0, #16
 8014d04:	f7ff fee0 	bl	8014ac8 <VL53L1_nvm_decode_fmt_range_results_data>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8014d0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3728      	adds	r7, #40	; 0x28
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}

08014d1a <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014d1a:	b580      	push	{r7, lr}
 8014d1c:	b086      	sub	sp, #24
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	60f8      	str	r0, [r7, #12]
 8014d22:	460b      	mov	r3, r1
 8014d24:	607a      	str	r2, [r7, #4]
 8014d26:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8014d2c:	897b      	ldrh	r3, [r7, #10]
 8014d2e:	2b0a      	cmp	r3, #10
 8014d30:	d802      	bhi.n	8014d38 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014d32:	f06f 0309 	mvn.w	r3, #9
 8014d36:	e047      	b.n	8014dc8 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d40:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014d4e:	f002 020f 	and.w	r2, r2, #15
 8014d52:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8014d54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014d5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014d62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014d64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014d6e:	f002 0203 	and.w	r2, r2, #3
 8014d72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014d74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014d7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014d82:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014d84:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	88d8      	ldrh	r0, [r3, #6]
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	3305      	adds	r3, #5
 8014d8e:	461a      	mov	r2, r3
 8014d90:	2102      	movs	r1, #2
 8014d92:	f7f8 fef1 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8014d9a:	68fa      	ldr	r2, [r7, #12]
 8014d9c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8014d9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8014da8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8014db2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014db6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014db8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8014dbe:	68fa      	ldr	r2, [r7, #12]
 8014dc0:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8014dc2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3718      	adds	r7, #24
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b086      	sub	sp, #24
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	607a      	str	r2, [r7, #4]
 8014ddc:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014dde:	2300      	movs	r3, #0
 8014de0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8014de2:	89fb      	ldrh	r3, [r7, #14]
 8014de4:	2b0a      	cmp	r3, #10
 8014de6:	d802      	bhi.n	8014dee <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014de8:	f06f 0309 	mvn.w	r3, #9
 8014dec:	e046      	b.n	8014e7c <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	781b      	ldrb	r3, [r3, #0]
 8014df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014df6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	3301      	adds	r3, #1
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	f003 030f 	and.w	r3, r3, #15
 8014e06:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	3302      	adds	r3, #2
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e16:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	3303      	adds	r3, #3
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	f003 0303 	and.w	r3, r3, #3
 8014e26:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	3304      	adds	r3, #4
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e36:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	3305      	adds	r3, #5
 8014e40:	4619      	mov	r1, r3
 8014e42:	2002      	movs	r0, #2
 8014e44:	f7f8 fec3 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	79da      	ldrb	r2, [r3, #7]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	7a1a      	ldrb	r2, [r3, #8]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	3309      	adds	r3, #9
 8014e64:	781b      	ldrb	r3, [r3, #0]
 8014e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e6a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	7a9a      	ldrb	r2, [r3, #10]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8014e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3718      	adds	r7, #24
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b086      	sub	sp, #24
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d108      	bne.n	8014eac <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8014e9a:	f107 020c 	add.w	r2, r7, #12
 8014e9e:	230b      	movs	r3, #11
 8014ea0:	2101      	movs	r1, #1
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f002 f91e 	bl	80170e4 <VL53L1_ReadMulti>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d108      	bne.n	8014ec6 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8014eb4:	f107 030c 	add.w	r3, r7, #12
 8014eb8:	683a      	ldr	r2, [r7, #0]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	200b      	movs	r0, #11
 8014ebe:	f7ff ff87 	bl	8014dd0 <VL53L1_i2c_decode_static_nvm_managed>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8014ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3718      	adds	r7, #24
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b086      	sub	sp, #24
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	60f8      	str	r0, [r7, #12]
 8014eda:	460b      	mov	r3, r1
 8014edc:	607a      	str	r2, [r7, #4]
 8014ede:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8014ee4:	897b      	ldrh	r3, [r7, #10]
 8014ee6:	2b16      	cmp	r3, #22
 8014ee8:	d802      	bhi.n	8014ef0 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014eea:	f06f 0309 	mvn.w	r3, #9
 8014eee:	e076      	b.n	8014fde <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8014efc:	68fa      	ldr	r2, [r7, #12]
 8014efe:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8014f00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8014f0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8014f10:	68fa      	ldr	r2, [r7, #12]
 8014f12:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8014f14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8014f1a:	68fa      	ldr	r2, [r7, #12]
 8014f1c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8014f1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014f28:	f002 020f 	and.w	r2, r2, #15
 8014f2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014f2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8014f34:	68fa      	ldr	r2, [r7, #12]
 8014f36:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8014f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014f42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014f46:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014f48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8014f52:	f002 0203 	and.w	r2, r2, #3
 8014f56:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8014f58:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	8958      	ldrh	r0, [r3, #10]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	3309      	adds	r3, #9
 8014f62:	461a      	mov	r2, r3
 8014f64:	2102      	movs	r1, #2
 8014f66:	f7f8 fe07 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	330b      	adds	r3, #11
 8014f74:	461a      	mov	r2, r3
 8014f76:	2102      	movs	r1, #2
 8014f78:	f7f8 fe49 	bl	800dc0e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	330d      	adds	r3, #13
 8014f86:	461a      	mov	r2, r3
 8014f88:	2102      	movs	r1, #2
 8014f8a:	f7f8 fe40 	bl	800dc0e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	8a18      	ldrh	r0, [r3, #16]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	330f      	adds	r3, #15
 8014f96:	461a      	mov	r2, r3
 8014f98:	2102      	movs	r1, #2
 8014f9a:	f7f8 fded 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8014fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014fa8:	b218      	sxth	r0, r3
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	3311      	adds	r3, #17
 8014fae:	461a      	mov	r2, r3
 8014fb0:	2102      	movs	r1, #2
 8014fb2:	f7f8 fe2c 	bl	800dc0e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	3313      	adds	r3, #19
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	2102      	movs	r1, #2
 8014fc4:	f7f8 fe23 	bl	800dc0e <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	3315      	adds	r3, #21
 8014fd2:	461a      	mov	r2, r3
 8014fd4:	2102      	movs	r1, #2
 8014fd6:	f7f8 fe1a 	bl	800dc0e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8014fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3718      	adds	r7, #24
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}

08014fe6 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8014fe6:	b580      	push	{r7, lr}
 8014fe8:	b086      	sub	sp, #24
 8014fea:	af00      	add	r7, sp, #0
 8014fec:	4603      	mov	r3, r0
 8014fee:	60b9      	str	r1, [r7, #8]
 8014ff0:	607a      	str	r2, [r7, #4]
 8014ff2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8014ff8:	89fb      	ldrh	r3, [r7, #14]
 8014ffa:	2b16      	cmp	r3, #22
 8014ffc:	d802      	bhi.n	8015004 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014ffe:	f06f 0309 	mvn.w	r3, #9
 8015002:	e079      	b.n	80150f8 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	785a      	ldrb	r2, [r3, #1]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	789a      	ldrb	r2, [r3, #2]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	78da      	ldrb	r2, [r3, #3]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	791a      	ldrb	r2, [r3, #4]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	3305      	adds	r3, #5
 8015030:	781b      	ldrb	r3, [r3, #0]
 8015032:	f003 030f 	and.w	r3, r3, #15
 8015036:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	799a      	ldrb	r2, [r3, #6]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	3307      	adds	r3, #7
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801504e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	3308      	adds	r3, #8
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	f003 0303 	and.w	r3, r3, #3
 801505e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	3309      	adds	r3, #9
 8015068:	4619      	mov	r1, r3
 801506a:	2002      	movs	r0, #2
 801506c:	f7f8 fdaf 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015070:	4603      	mov	r3, r0
 8015072:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	330b      	adds	r3, #11
 801507c:	4619      	mov	r1, r3
 801507e:	2002      	movs	r0, #2
 8015080:	f7f8 fdf1 	bl	800dc66 <VL53L1_i2c_decode_int16_t>
 8015084:	4603      	mov	r3, r0
 8015086:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	330d      	adds	r3, #13
 8015090:	4619      	mov	r1, r3
 8015092:	2002      	movs	r0, #2
 8015094:	f7f8 fde7 	bl	800dc66 <VL53L1_i2c_decode_int16_t>
 8015098:	4603      	mov	r3, r0
 801509a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	330f      	adds	r3, #15
 80150a4:	4619      	mov	r1, r3
 80150a6:	2002      	movs	r0, #2
 80150a8:	f7f8 fd91 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80150ac:	4603      	mov	r3, r0
 80150ae:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80150b4:	68bb      	ldr	r3, [r7, #8]
 80150b6:	3311      	adds	r3, #17
 80150b8:	4619      	mov	r1, r3
 80150ba:	2002      	movs	r0, #2
 80150bc:	f7f8 fdd3 	bl	800dc66 <VL53L1_i2c_decode_int16_t>
 80150c0:	4603      	mov	r3, r0
 80150c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80150c6:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80150cc:	68bb      	ldr	r3, [r7, #8]
 80150ce:	3313      	adds	r3, #19
 80150d0:	4619      	mov	r1, r3
 80150d2:	2002      	movs	r0, #2
 80150d4:	f7f8 fdc7 	bl	800dc66 <VL53L1_i2c_decode_int16_t>
 80150d8:	4603      	mov	r3, r0
 80150da:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	3315      	adds	r3, #21
 80150e4:	4619      	mov	r1, r3
 80150e6:	2002      	movs	r0, #2
 80150e8:	f7f8 fdbd 	bl	800dc66 <VL53L1_i2c_decode_int16_t>
 80150ec:	4603      	mov	r3, r0
 80150ee:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80150f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3718      	adds	r7, #24
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b088      	sub	sp, #32
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801510a:	2300      	movs	r3, #0
 801510c:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801510e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d108      	bne.n	8015128 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8015116:	f107 0208 	add.w	r2, r7, #8
 801511a:	2317      	movs	r3, #23
 801511c:	210d      	movs	r1, #13
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f001 ffe0 	bl	80170e4 <VL53L1_ReadMulti>
 8015124:	4603      	mov	r3, r0
 8015126:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8015128:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d108      	bne.n	8015142 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8015130:	f107 0308 	add.w	r3, r7, #8
 8015134:	683a      	ldr	r2, [r7, #0]
 8015136:	4619      	mov	r1, r3
 8015138:	2017      	movs	r0, #23
 801513a:	f7ff ff54 	bl	8014fe6 <VL53L1_i2c_decode_customer_nvm_managed>
 801513e:	4603      	mov	r3, r0
 8015140:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8015142:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015146:	4618      	mov	r0, r3
 8015148:	3720      	adds	r7, #32
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}

0801514e <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801514e:	b580      	push	{r7, lr}
 8015150:	b086      	sub	sp, #24
 8015152:	af00      	add	r7, sp, #0
 8015154:	60f8      	str	r0, [r7, #12]
 8015156:	460b      	mov	r3, r1
 8015158:	607a      	str	r2, [r7, #4]
 801515a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801515c:	2300      	movs	r3, #0
 801515e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8015160:	897b      	ldrh	r3, [r7, #10]
 8015162:	2b1f      	cmp	r3, #31
 8015164:	d802      	bhi.n	801516c <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015166:	f06f 0309 	mvn.w	r3, #9
 801516a:	e0cf      	b.n	801530c <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	881b      	ldrh	r3, [r3, #0]
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	2102      	movs	r1, #2
 8015174:	4618      	mov	r0, r3
 8015176:	f7f8 fcff 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8015182:	f002 0201 	and.w	r2, r2, #1
 8015186:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8015188:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8015192:	f002 020f 	and.w	r2, r2, #15
 8015196:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8015198:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80151a2:	f002 020f 	and.w	r2, r2, #15
 80151a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80151a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80151b2:	f002 021f 	and.w	r2, r2, #31
 80151b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80151b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80151c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80151c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80151c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80151d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80151d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80151d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80151e2:	f002 0201 	and.w	r2, r2, #1
 80151e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80151e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80151ee:	68fa      	ldr	r2, [r7, #12]
 80151f0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80151f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80151fc:	f002 0201 	and.w	r2, r2, #1
 8015200:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8015202:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 801520c:	f002 0203 	and.w	r2, r2, #3
 8015210:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8015212:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 801521c:	f002 021f 	and.w	r2, r2, #31
 8015220:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8015222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 801522c:	f002 0203 	and.w	r2, r2, #3
 8015230:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8015232:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 801523c:	f002 0203 	and.w	r2, r2, #3
 8015240:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8015242:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801524c:	f002 0207 	and.w	r2, r2, #7
 8015250:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8015252:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801525c:	f002 021f 	and.w	r2, r2, #31
 8015260:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8015262:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801526c:	f002 0201 	and.w	r2, r2, #1
 8015270:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8015272:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8015278:	68fa      	ldr	r2, [r7, #12]
 801527a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801527c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8015282:	68fa      	ldr	r2, [r7, #12]
 8015284:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8015286:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 801528c:	68fa      	ldr	r2, [r7, #12]
 801528e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8015290:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8015296:	68fa      	ldr	r2, [r7, #12]
 8015298:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801529a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80152a0:	68fa      	ldr	r2, [r7, #12]
 80152a2:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80152a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80152ae:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	8b18      	ldrh	r0, [r3, #24]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	3318      	adds	r3, #24
 80152b8:	461a      	mov	r2, r3
 80152ba:	2102      	movs	r1, #2
 80152bc:	f7f8 fc5c 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80152c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80152ce:	68fa      	ldr	r2, [r7, #12]
 80152d0:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80152d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80152dc:	f002 020f 	and.w	r2, r2, #15
 80152e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80152e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80152e8:	68fa      	ldr	r2, [r7, #12]
 80152ea:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80152ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80152f6:	f002 020f 	and.w	r2, r2, #15
 80152fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80152fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8015302:	68fa      	ldr	r2, [r7, #12]
 8015304:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8015306:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015308:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801530c:	4618      	mov	r0, r3
 801530e:	3718      	adds	r7, #24
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b086      	sub	sp, #24
 8015318:	af00      	add	r7, sp, #0
 801531a:	60f8      	str	r0, [r7, #12]
 801531c:	460b      	mov	r3, r1
 801531e:	607a      	str	r2, [r7, #4]
 8015320:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015322:	2300      	movs	r3, #0
 8015324:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8015326:	897b      	ldrh	r3, [r7, #10]
 8015328:	2b15      	cmp	r3, #21
 801532a:	d802      	bhi.n	8015332 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801532c:	f06f 0309 	mvn.w	r3, #9
 8015330:	e070      	b.n	8015414 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 801533e:	68fa      	ldr	r2, [r7, #12]
 8015340:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8015342:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8015348:	68fa      	ldr	r2, [r7, #12]
 801534a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 801534c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8015356:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801535a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801535c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8015362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015366:	b298      	uxth	r0, r3
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	3304      	adds	r3, #4
 801536c:	461a      	mov	r2, r3
 801536e:	2102      	movs	r1, #2
 8015370:	f7f8 fc02 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 801537c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015380:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8015382:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8015388:	68fa      	ldr	r2, [r7, #12]
 801538a:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 801538c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8015392:	68fa      	ldr	r2, [r7, #12]
 8015394:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8015396:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80153a0:	f002 0201 	and.w	r2, r2, #1
 80153a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80153a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80153b0:	f002 0207 	and.w	r2, r2, #7
 80153b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80153b6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	8998      	ldrh	r0, [r3, #12]
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	330c      	adds	r3, #12
 80153c0:	461a      	mov	r2, r3
 80153c2:	2102      	movs	r1, #2
 80153c4:	f7f8 fbd8 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	89d8      	ldrh	r0, [r3, #14]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	330e      	adds	r3, #14
 80153d0:	461a      	mov	r2, r3
 80153d2:	2102      	movs	r1, #2
 80153d4:	f7f8 fbd0 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	8a18      	ldrh	r0, [r3, #16]
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	3310      	adds	r3, #16
 80153e0:	461a      	mov	r2, r3
 80153e2:	2102      	movs	r1, #2
 80153e4:	f7f8 fbc8 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80153ec:	68fa      	ldr	r2, [r7, #12]
 80153ee:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80153f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80153f6:	68fa      	ldr	r2, [r7, #12]
 80153f8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80153fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8015400:	68fa      	ldr	r2, [r7, #12]
 8015402:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8015404:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801540e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015414:	4618      	mov	r0, r3
 8015416:	3718      	adds	r7, #24
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b086      	sub	sp, #24
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	460b      	mov	r3, r1
 8015426:	607a      	str	r2, [r7, #4]
 8015428:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801542a:	2300      	movs	r3, #0
 801542c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 801542e:	897b      	ldrh	r3, [r7, #10]
 8015430:	2b16      	cmp	r3, #22
 8015432:	d802      	bhi.n	801543a <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015434:	f06f 0309 	mvn.w	r3, #9
 8015438:	e06e      	b.n	8015518 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	f003 030f 	and.w	r3, r3, #15
 8015442:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8015450:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801545a:	f002 020f 	and.w	r2, r2, #15
 801545e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8015460:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8015466:	68fa      	ldr	r2, [r7, #12]
 8015468:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801546a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8015474:	f002 020f 	and.w	r2, r2, #15
 8015478:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801547a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8015484:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 801548e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8015492:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8015494:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801549e:	f002 020f 	and.w	r2, r2, #15
 80154a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80154a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80154aa:	68fa      	ldr	r2, [r7, #12]
 80154ac:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80154ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80154b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80154bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80154be:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	8958      	ldrh	r0, [r3, #10]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	330a      	adds	r3, #10
 80154c8:	461a      	mov	r2, r3
 80154ca:	2102      	movs	r1, #2
 80154cc:	f7f8 fb54 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	8998      	ldrh	r0, [r3, #12]
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	330c      	adds	r3, #12
 80154d8:	461a      	mov	r2, r3
 80154da:	2102      	movs	r1, #2
 80154dc:	f7f8 fb4c 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80154e4:	68fa      	ldr	r2, [r7, #12]
 80154e6:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80154e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80154ee:	68fa      	ldr	r2, [r7, #12]
 80154f0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80154f2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	6918      	ldr	r0, [r3, #16]
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	3312      	adds	r3, #18
 80154fc:	461a      	mov	r2, r3
 80154fe:	2104      	movs	r1, #4
 8015500:	f7f8 fbda 	bl	800dcb8 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 801550c:	f002 0201 	and.w	r2, r2, #1
 8015510:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8015512:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015518:	4618      	mov	r0, r3
 801551a:	3718      	adds	r7, #24
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b086      	sub	sp, #24
 8015524:	af00      	add	r7, sp, #0
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	460b      	mov	r3, r1
 801552a:	607a      	str	r2, [r7, #4]
 801552c:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801552e:	2300      	movs	r3, #0
 8015530:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8015532:	897b      	ldrh	r3, [r7, #10]
 8015534:	2b11      	cmp	r3, #17
 8015536:	d802      	bhi.n	801553e <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015538:	f06f 0309 	mvn.w	r3, #9
 801553c:	e071      	b.n	8015622 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	f003 0303 	and.w	r3, r3, #3
 8015546:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	8858      	ldrh	r0, [r3, #2]
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	3301      	adds	r3, #1
 8015554:	461a      	mov	r2, r3
 8015556:	2102      	movs	r1, #2
 8015558:	f7f8 fb0e 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	8898      	ldrh	r0, [r3, #4]
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	3303      	adds	r3, #3
 8015564:	461a      	mov	r2, r3
 8015566:	2102      	movs	r1, #2
 8015568:	f7f8 fb06 	bl	800db78 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8015574:	f002 0201 	and.w	r2, r2, #1
 8015578:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801557a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8015584:	f002 0207 	and.w	r2, r2, #7
 8015588:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801558a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8015594:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 801559a:	68fa      	ldr	r2, [r7, #12]
 801559c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 801559e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80155a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80155ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80155ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80155b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80155bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80155be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80155c8:	f002 0203 	and.w	r2, r2, #3
 80155cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80155ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80155d8:	f002 0203 	and.w	r2, r2, #3
 80155dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80155de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80155e8:	f002 020f 	and.w	r2, r2, #15
 80155ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80155ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80155f4:	68fa      	ldr	r2, [r7, #12]
 80155f6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80155f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80155fe:	68fa      	ldr	r2, [r7, #12]
 8015600:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8015602:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8015608:	68fa      	ldr	r2, [r7, #12]
 801560a:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 801560c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8015616:	f002 0203 	and.w	r2, r2, #3
 801561a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801561c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801561e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015622:	4618      	mov	r0, r3
 8015624:	3718      	adds	r7, #24
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801562a:	b480      	push	{r7}
 801562c:	b087      	sub	sp, #28
 801562e:	af00      	add	r7, sp, #0
 8015630:	60f8      	str	r0, [r7, #12]
 8015632:	460b      	mov	r3, r1
 8015634:	607a      	str	r2, [r7, #4]
 8015636:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015638:	2300      	movs	r3, #0
 801563a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 801563c:	897b      	ldrh	r3, [r7, #10]
 801563e:	2b04      	cmp	r3, #4
 8015640:	d802      	bhi.n	8015648 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015642:	f06f 0309 	mvn.w	r3, #9
 8015646:	e025      	b.n	8015694 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	f003 0301 	and.w	r3, r3, #1
 8015650:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 801565e:	f002 0201 	and.w	r2, r2, #1
 8015662:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8015664:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 801566e:	f002 0201 	and.w	r2, r2, #1
 8015672:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8015674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 801567e:	f002 0203 	and.w	r2, r2, #3
 8015682:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8015684:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	3304      	adds	r3, #4
		pdata->system__mode_start;
 801568a:	68fa      	ldr	r2, [r7, #12]
 801568c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801568e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015690:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015694:	4618      	mov	r0, r3
 8015696:	371c      	adds	r7, #28
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr

080156a0 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b084      	sub	sp, #16
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80156aa:	2300      	movs	r3, #0
 80156ac:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80156ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d108      	bne.n	80156c8 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 80156b6:	f107 0308 	add.w	r3, r7, #8
 80156ba:	461a      	mov	r2, r3
 80156bc:	2105      	movs	r1, #5
 80156be:	6838      	ldr	r0, [r7, #0]
 80156c0:	f7ff ffb3 	bl	801562a <VL53L1_i2c_encode_system_control>
 80156c4:	4603      	mov	r3, r0
 80156c6:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80156c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d108      	bne.n	80156e2 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 80156d0:	f107 0208 	add.w	r2, r7, #8
 80156d4:	2305      	movs	r3, #5
 80156d6:	2183      	movs	r1, #131	; 0x83
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f001 fccd 	bl	8017078 <VL53L1_WriteMulti>
 80156de:	4603      	mov	r3, r0
 80156e0:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80156e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3710      	adds	r7, #16
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}

080156ee <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80156ee:	b580      	push	{r7, lr}
 80156f0:	b086      	sub	sp, #24
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	4603      	mov	r3, r0
 80156f6:	60b9      	str	r1, [r7, #8]
 80156f8:	607a      	str	r2, [r7, #4]
 80156fa:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80156fc:	2300      	movs	r3, #0
 80156fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8015700:	89fb      	ldrh	r3, [r7, #14]
 8015702:	2b2b      	cmp	r3, #43	; 0x2b
 8015704:	d802      	bhi.n	801570c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015706:	f06f 0309 	mvn.w	r3, #9
 801570a:	e0e2      	b.n	80158d2 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015714:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	785a      	ldrb	r2, [r3, #1]
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	3302      	adds	r3, #2
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	f003 030f 	and.w	r3, r3, #15
 801572c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	78da      	ldrb	r2, [r3, #3]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	3304      	adds	r3, #4
 801573e:	4619      	mov	r1, r3
 8015740:	2002      	movs	r0, #2
 8015742:	f7f8 fa44 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015746:	4603      	mov	r3, r0
 8015748:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	3306      	adds	r3, #6
 8015752:	4619      	mov	r1, r3
 8015754:	2002      	movs	r0, #2
 8015756:	f7f8 fa3a 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 801575a:	4603      	mov	r3, r0
 801575c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	3308      	adds	r3, #8
 8015766:	4619      	mov	r1, r3
 8015768:	2002      	movs	r0, #2
 801576a:	f7f8 fa30 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 801576e:	4603      	mov	r3, r0
 8015770:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	330a      	adds	r3, #10
 801577a:	4619      	mov	r1, r3
 801577c:	2002      	movs	r0, #2
 801577e:	f7f8 fa26 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015782:	4603      	mov	r3, r0
 8015784:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	330c      	adds	r3, #12
 801578e:	4619      	mov	r1, r3
 8015790:	2002      	movs	r0, #2
 8015792:	f7f8 fa1c 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015796:	4603      	mov	r3, r0
 8015798:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	330e      	adds	r3, #14
 80157a2:	4619      	mov	r1, r3
 80157a4:	2002      	movs	r0, #2
 80157a6:	f7f8 fa12 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80157aa:	4603      	mov	r3, r0
 80157ac:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	3310      	adds	r3, #16
 80157b6:	4619      	mov	r1, r3
 80157b8:	2002      	movs	r0, #2
 80157ba:	f7f8 fa08 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80157be:	4603      	mov	r3, r0
 80157c0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	3312      	adds	r3, #18
 80157ca:	4619      	mov	r1, r3
 80157cc:	2002      	movs	r0, #2
 80157ce:	f7f8 f9fe 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80157d2:	4603      	mov	r3, r0
 80157d4:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	3314      	adds	r3, #20
 80157de:	4619      	mov	r1, r3
 80157e0:	2002      	movs	r0, #2
 80157e2:	f7f8 f9f4 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80157e6:	4603      	mov	r3, r0
 80157e8:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	3316      	adds	r3, #22
 80157f2:	4619      	mov	r1, r3
 80157f4:	2002      	movs	r0, #2
 80157f6:	f7f8 f9ea 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80157fa:	4603      	mov	r3, r0
 80157fc:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	3318      	adds	r3, #24
 8015806:	4619      	mov	r1, r3
 8015808:	2002      	movs	r0, #2
 801580a:	f7f8 f9e0 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 801580e:	4603      	mov	r3, r0
 8015810:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	331a      	adds	r3, #26
 801581a:	4619      	mov	r1, r3
 801581c:	2002      	movs	r0, #2
 801581e:	f7f8 f9d6 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015822:	4603      	mov	r3, r0
 8015824:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	331c      	adds	r3, #28
 801582e:	4619      	mov	r1, r3
 8015830:	2002      	movs	r0, #2
 8015832:	f7f8 f9cc 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015836:	4603      	mov	r3, r0
 8015838:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	331e      	adds	r3, #30
 8015842:	4619      	mov	r1, r3
 8015844:	2002      	movs	r0, #2
 8015846:	f7f8 f9c2 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 801584a:	4603      	mov	r3, r0
 801584c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	3320      	adds	r3, #32
 8015856:	4619      	mov	r1, r3
 8015858:	2002      	movs	r0, #2
 801585a:	f7f8 f9b8 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 801585e:	4603      	mov	r3, r0
 8015860:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	3322      	adds	r3, #34	; 0x22
 801586a:	4619      	mov	r1, r3
 801586c:	2002      	movs	r0, #2
 801586e:	f7f8 f9ae 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015872:	4603      	mov	r3, r0
 8015874:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	3324      	adds	r3, #36	; 0x24
 801587e:	4619      	mov	r1, r3
 8015880:	2002      	movs	r0, #2
 8015882:	f7f8 f9a4 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015886:	4603      	mov	r3, r0
 8015888:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	3326      	adds	r3, #38	; 0x26
 8015892:	4619      	mov	r1, r3
 8015894:	2002      	movs	r0, #2
 8015896:	f7f8 f99a 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 801589a:	4603      	mov	r3, r0
 801589c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	3328      	adds	r3, #40	; 0x28
 80158a6:	4619      	mov	r1, r3
 80158a8:	2002      	movs	r0, #2
 80158aa:	f7f8 f990 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80158ae:	4603      	mov	r3, r0
 80158b0:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80158ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	3718      	adds	r7, #24
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}

080158da <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80158da:	b580      	push	{r7, lr}
 80158dc:	b086      	sub	sp, #24
 80158de:	af00      	add	r7, sp, #0
 80158e0:	4603      	mov	r3, r0
 80158e2:	60b9      	str	r1, [r7, #8]
 80158e4:	607a      	str	r2, [r7, #4]
 80158e6:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80158e8:	2300      	movs	r3, #0
 80158ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 80158ec:	89fb      	ldrh	r3, [r7, #14]
 80158ee:	2b20      	cmp	r3, #32
 80158f0:	d802      	bhi.n	80158f8 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80158f2:	f06f 0309 	mvn.w	r3, #9
 80158f6:	e04d      	b.n	8015994 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80158f8:	68b9      	ldr	r1, [r7, #8]
 80158fa:	2004      	movs	r0, #4
 80158fc:	f7f8 fa06 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 8015900:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	3304      	adds	r3, #4
 801590a:	4619      	mov	r1, r3
 801590c:	2004      	movs	r0, #4
 801590e:	f7f8 f9fd 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 8015912:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	3308      	adds	r3, #8
 801591c:	4619      	mov	r1, r3
 801591e:	2004      	movs	r0, #4
 8015920:	f7f8 fa11 	bl	800dd46 <VL53L1_i2c_decode_int32_t>
 8015924:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	330c      	adds	r3, #12
 801592e:	4619      	mov	r1, r3
 8015930:	2004      	movs	r0, #4
 8015932:	f7f8 f9eb 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 8015936:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	3310      	adds	r3, #16
 8015940:	4619      	mov	r1, r3
 8015942:	2004      	movs	r0, #4
 8015944:	f7f8 f9e2 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 8015948:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	3314      	adds	r3, #20
 8015952:	4619      	mov	r1, r3
 8015954:	2004      	movs	r0, #4
 8015956:	f7f8 f9d9 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 801595a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	3318      	adds	r3, #24
 8015964:	4619      	mov	r1, r3
 8015966:	2004      	movs	r0, #4
 8015968:	f7f8 f9ed 	bl	800dd46 <VL53L1_i2c_decode_int32_t>
 801596c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	331c      	adds	r3, #28
 8015976:	4619      	mov	r1, r3
 8015978:	2004      	movs	r0, #4
 801597a:	f7f8 f9c7 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 801597e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	f893 2020 	ldrb.w	r2, [r3, #32]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8015990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015994:	4618      	mov	r0, r3
 8015996:	3718      	adds	r7, #24
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b086      	sub	sp, #24
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	4603      	mov	r3, r0
 80159a4:	60b9      	str	r1, [r7, #8]
 80159a6:	607a      	str	r2, [r7, #4]
 80159a8:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80159aa:	2300      	movs	r3, #0
 80159ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 80159ae:	89fb      	ldrh	r3, [r7, #14]
 80159b0:	2b37      	cmp	r3, #55	; 0x37
 80159b2:	d802      	bhi.n	80159ba <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80159b4:	f06f 0309 	mvn.w	r3, #9
 80159b8:	e15e      	b.n	8015c78 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 80159ba:	68b9      	ldr	r1, [r7, #8]
 80159bc:	2002      	movs	r0, #2
 80159be:	f7f8 f906 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 80159c2:	4603      	mov	r3, r0
 80159c4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80159ca:	68bb      	ldr	r3, [r7, #8]
 80159cc:	3302      	adds	r3, #2
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159d4:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	3303      	adds	r3, #3
 80159de:	781b      	ldrb	r3, [r3, #0]
 80159e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159e4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	3304      	adds	r3, #4
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	f003 0303 	and.w	r3, r3, #3
 80159f4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	3305      	adds	r3, #5
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	f003 0301 	and.w	r3, r3, #1
 8015a04:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	3306      	adds	r3, #6
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a14:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	3307      	adds	r3, #7
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a24:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	3308      	adds	r3, #8
 8015a2e:	4619      	mov	r1, r3
 8015a30:	2002      	movs	r0, #2
 8015a32:	f7f8 f8cc 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015a36:	4603      	mov	r3, r0
 8015a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015a3c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8015a42:	68bb      	ldr	r3, [r7, #8]
 8015a44:	330a      	adds	r3, #10
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	f003 0303 	and.w	r3, r3, #3
 8015a4c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	330b      	adds	r3, #11
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	f003 0303 	and.w	r3, r3, #3
 8015a5c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	330c      	adds	r3, #12
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	f003 030f 	and.w	r3, r3, #15
 8015a6c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	330d      	adds	r3, #13
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	f003 0307 	and.w	r3, r3, #7
 8015a7c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	330e      	adds	r3, #14
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	f003 0301 	and.w	r3, r3, #1
 8015a8c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	330f      	adds	r3, #15
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	f003 0303 	and.w	r3, r3, #3
 8015a9c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	7c1a      	ldrb	r2, [r3, #16]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	7c5a      	ldrb	r2, [r3, #17]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8015ab2:	68bb      	ldr	r3, [r7, #8]
 8015ab4:	3312      	adds	r3, #18
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	2002      	movs	r0, #2
 8015aba:	f7f8 f888 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015ac4:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	3316      	adds	r3, #22
 8015ace:	4619      	mov	r1, r3
 8015ad0:	2002      	movs	r0, #2
 8015ad2:	f7f8 f87c 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	3318      	adds	r3, #24
 8015ae2:	4619      	mov	r1, r3
 8015ae4:	2002      	movs	r0, #2
 8015ae6:	f7f8 f872 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015aea:	4603      	mov	r3, r0
 8015aec:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	331a      	adds	r3, #26
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	f003 0301 	and.w	r3, r3, #1
 8015afc:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	331b      	adds	r3, #27
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	f003 0307 	and.w	r3, r3, #7
 8015b0c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	7f1a      	ldrb	r2, [r3, #28]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	7f5a      	ldrb	r2, [r3, #29]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	331e      	adds	r3, #30
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b2c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	331f      	adds	r3, #31
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b3c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	3320      	adds	r3, #32
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	f003 0303 	and.w	r3, r3, #3
 8015b4c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	3321      	adds	r3, #33	; 0x21
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	f003 030f 	and.w	r3, r3, #15
 8015b5c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8015b6e:	68bb      	ldr	r3, [r7, #8]
 8015b70:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	3325      	adds	r3, #37	; 0x25
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	f003 0301 	and.w	r3, r3, #1
 8015b90:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8015b98:	68bb      	ldr	r3, [r7, #8]
 8015b9a:	3326      	adds	r3, #38	; 0x26
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	f003 0303 	and.w	r3, r3, #3
 8015ba2:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	3327      	adds	r3, #39	; 0x27
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	f003 031f 	and.w	r3, r3, #31
 8015bb4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	3328      	adds	r3, #40	; 0x28
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	f003 031f 	and.w	r3, r3, #31
 8015bc6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8015bce:	68bb      	ldr	r3, [r7, #8]
 8015bd0:	3329      	adds	r3, #41	; 0x29
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	f003 031f 	and.w	r3, r3, #31
 8015bd8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8015be0:	68bb      	ldr	r3, [r7, #8]
 8015be2:	332a      	adds	r3, #42	; 0x2a
 8015be4:	781b      	ldrb	r3, [r3, #0]
 8015be6:	f003 0301 	and.w	r3, r3, #1
 8015bea:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	332b      	adds	r3, #43	; 0x2b
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	f003 0301 	and.w	r3, r3, #1
 8015bfc:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	332c      	adds	r3, #44	; 0x2c
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	f003 0303 	and.w	r3, r3, #3
 8015c0e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	332d      	adds	r3, #45	; 0x2d
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c20:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	332e      	adds	r3, #46	; 0x2e
 8015c2c:	4619      	mov	r1, r3
 8015c2e:	2004      	movs	r0, #4
 8015c30:	f7f8 f86c 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 8015c34:	4603      	mov	r3, r0
 8015c36:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	3332      	adds	r3, #50	; 0x32
 8015c42:	4619      	mov	r1, r3
 8015c44:	2004      	movs	r0, #4
 8015c46:	f7f8 f861 	bl	800dd0c <VL53L1_i2c_decode_uint32_t>
 8015c4a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	3336      	adds	r3, #54	; 0x36
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	f003 0301 	and.w	r3, r3, #1
 8015c5a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	3337      	adds	r3, #55	; 0x37
 8015c66:	781b      	ldrb	r3, [r3, #0]
 8015c68:	f003 0301 	and.w	r3, r3, #1
 8015c6c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8015c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3718      	adds	r7, #24
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b086      	sub	sp, #24
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	4603      	mov	r3, r0
 8015c88:	60b9      	str	r1, [r7, #8]
 8015c8a:	607a      	str	r2, [r7, #4]
 8015c8c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8015c92:	89fb      	ldrh	r3, [r7, #14]
 8015c94:	2b30      	cmp	r3, #48	; 0x30
 8015c96:	d802      	bhi.n	8015c9e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015c98:	f06f 0309 	mvn.w	r3, #9
 8015c9c:	e112      	b.n	8015ec4 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	785a      	ldrb	r2, [r3, #1]
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	789a      	ldrb	r2, [r3, #2]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	3303      	adds	r3, #3
 8015cba:	4619      	mov	r1, r3
 8015cbc:	2002      	movs	r0, #2
 8015cbe:	f7f7 ff86 	bl	800dbce <VL53L1_i2c_decode_uint16_t>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	3305      	adds	r3, #5
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015cd4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8015cda:	68bb      	ldr	r3, [r7, #8]
 8015cdc:	3306      	adds	r3, #6
 8015cde:	781b      	ldrb	r3, [r3, #0]
 8015ce0:	f003 0307 	and.w	r3, r3, #7
 8015ce4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	3307      	adds	r3, #7
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	f003 0307 	and.w	r3, r3, #7
 8015cf4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	3308      	adds	r3, #8
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d04:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	3309      	adds	r3, #9
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d14:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	330a      	adds	r3, #10
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	f003 0301 	and.w	r3, r3, #1
 8015d24:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	330b      	adds	r3, #11
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d34:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	330c      	adds	r3, #12
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	f003 0301 	and.w	r3, r3, #1
 8015d44:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	330d      	adds	r3, #13
 8015d4e:	781b      	ldrb	r3, [r3, #0]
 8015d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d54:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	330e      	adds	r3, #14
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d64:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8015d6a:	68bb      	ldr	r3, [r7, #8]
 8015d6c:	7bda      	ldrb	r2, [r3, #15]
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	7c1a      	ldrb	r2, [r3, #16]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	7c5a      	ldrb	r2, [r3, #17]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	7c9a      	ldrb	r2, [r3, #18]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	7cda      	ldrb	r2, [r3, #19]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	7d1a      	ldrb	r2, [r3, #20]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	7d5a      	ldrb	r2, [r3, #21]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8015da2:	68bb      	ldr	r3, [r7, #8]
 8015da4:	7d9a      	ldrb	r2, [r3, #22]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	7dda      	ldrb	r2, [r3, #23]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	7e1a      	ldrb	r2, [r3, #24]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8015dba:	68bb      	ldr	r3, [r7, #8]
 8015dbc:	7e5a      	ldrb	r2, [r3, #25]
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	7e9a      	ldrb	r2, [r3, #26]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	7eda      	ldrb	r2, [r3, #27]
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	7f1a      	ldrb	r2, [r3, #28]
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	7f5a      	ldrb	r2, [r3, #29]
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	7f9a      	ldrb	r2, [r3, #30]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	7fda      	ldrb	r2, [r3, #31]
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8015e3c:	68bb      	ldr	r3, [r7, #8]
 8015e3e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8015e6c:	68bb      	ldr	r3, [r7, #8]
 8015e6e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8015ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3718      	adds	r7, #24
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b090      	sub	sp, #64	; 0x40
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8015edc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d10a      	bne.n	8015efa <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8015ee4:	f107 020c 	add.w	r2, r7, #12
 8015ee8:	2331      	movs	r3, #49	; 0x31
 8015eea:	f240 110f 	movw	r1, #271	; 0x10f
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f001 f8f8 	bl	80170e4 <VL53L1_ReadMulti>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8015efa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d109      	bne.n	8015f16 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8015f02:	f107 030c 	add.w	r3, r7, #12
 8015f06:	683a      	ldr	r2, [r7, #0]
 8015f08:	4619      	mov	r1, r3
 8015f0a:	2031      	movs	r0, #49	; 0x31
 8015f0c:	f7ff feb8 	bl	8015c80 <VL53L1_i2c_decode_nvm_copy_data>
 8015f10:	4603      	mov	r3, r0
 8015f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8015f16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3740      	adds	r7, #64	; 0x40
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}

08015f22 <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8015f22:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015f26:	b0d6      	sub	sp, #344	; 0x158
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8015f2e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8015f32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015f36:	4603      	mov	r3, r0
 8015f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8015f3c:	23f1      	movs	r3, #241	; 0xf1
 8015f3e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 8015f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8015f50:	f04f 0200 	mov.w	r2, #0
 8015f54:	f04f 0300 	mov.w	r3, #0
 8015f58:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8015f5c:	f04f 0200 	mov.w	r2, #0
 8015f60:	f04f 0300 	mov.w	r3, #0
 8015f64:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8015f68:	f04f 0200 	mov.w	r2, #0
 8015f6c:	f04f 0300 	mov.w	r3, #0
 8015f70:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8015f74:	f04f 0200 	mov.w	r2, #0
 8015f78:	f04f 0300 	mov.w	r3, #0
 8015f7c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8015f80:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8015f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f88:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8015f8a:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	f000 8322 	beq.w	80165d8 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8015f94:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7fb fa23 	bl	80113e4 <VL53L1_calc_pll_period_mm>
 8015f9e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 8015fa2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d91a      	bls.n	8015fe4 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8015fae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015fb8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8015fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	4698      	mov	r8, r3
 8015fc4:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8015fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015fca:	460b      	mov	r3, r1
 8015fcc:	ebb3 0308 	subs.w	r3, r3, r8
 8015fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fd2:	4613      	mov	r3, r2
 8015fd4:	eb63 0309 	sbc.w	r3, r3, r9
 8015fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015fda:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8015fde:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8015fe2:	e013      	b.n	801600c <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8015fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015fe8:	2200      	movs	r2, #0
 8015fea:	469a      	mov	sl, r3
 8015fec:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 8015fee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	461c      	mov	r4, r3
 8015ff6:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8015ff8:	ebba 0304 	subs.w	r3, sl, r4
 8015ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8015ffe:	eb6b 0305 	sbc.w	r3, fp, r5
 8016002:	637b      	str	r3, [r7, #52]	; 0x34
 8016004:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8016008:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 801600c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8016010:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8016014:	429a      	cmp	r2, r3
 8016016:	d91f      	bls.n	8016058 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8016018:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801601c:	2200      	movs	r2, #0
 801601e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016022:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 8016026:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801602a:	2200      	movs	r2, #0
 801602c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016030:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8016034:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8016038:	4623      	mov	r3, r4
 801603a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801603e:	4602      	mov	r2, r0
 8016040:	1a9b      	subs	r3, r3, r2
 8016042:	62bb      	str	r3, [r7, #40]	; 0x28
 8016044:	462b      	mov	r3, r5
 8016046:	460a      	mov	r2, r1
 8016048:	eb63 0302 	sbc.w	r3, r3, r2
 801604c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801604e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8016052:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8016056:	e01e      	b.n	8016096 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8016058:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801605c:	2200      	movs	r2, #0
 801605e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016062:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8016066:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801606a:	2200      	movs	r2, #0
 801606c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8016074:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8016078:	4623      	mov	r3, r4
 801607a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801607e:	4602      	mov	r2, r0
 8016080:	1a9b      	subs	r3, r3, r2
 8016082:	623b      	str	r3, [r7, #32]
 8016084:	462b      	mov	r3, r5
 8016086:	460a      	mov	r2, r1
 8016088:	eb63 0302 	sbc.w	r3, r3, r2
 801608c:	627b      	str	r3, [r7, #36]	; 0x24
 801608e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8016092:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8016096:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801609a:	4313      	orrs	r3, r2
 801609c:	f000 829c 	beq.w	80165d8 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80160a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80160a4:	2200      	movs	r2, #0
 80160a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80160aa:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80160ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80160b2:	2200      	movs	r2, #0
 80160b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80160b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80160bc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80160c0:	4623      	mov	r3, r4
 80160c2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80160c6:	4602      	mov	r2, r0
 80160c8:	189b      	adds	r3, r3, r2
 80160ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80160ce:	460b      	mov	r3, r1
 80160d0:	462a      	mov	r2, r5
 80160d2:	eb42 0303 	adc.w	r3, r2, r3
 80160d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 80160da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80160de:	2200      	movs	r2, #0
 80160e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80160e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80160e8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80160ec:	4623      	mov	r3, r4
 80160ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80160f2:	4602      	mov	r2, r0
 80160f4:	189b      	adds	r3, r3, r2
 80160f6:	61bb      	str	r3, [r7, #24]
 80160f8:	460b      	mov	r3, r1
 80160fa:	462a      	mov	r2, r5
 80160fc:	eb42 0303 	adc.w	r3, r2, r3
 8016100:	61fb      	str	r3, [r7, #28]
 8016102:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8016106:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 801610a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801610e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8016112:	f173 0300 	sbcs.w	r3, r3, #0
 8016116:	d305      	bcc.n	8016124 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8016118:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801611c:	f04f 0300 	mov.w	r3, #0
 8016120:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8016124:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8016128:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801612c:	fb03 f102 	mul.w	r1, r3, r2
 8016130:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8016134:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016138:	fb02 f303 	mul.w	r3, r2, r3
 801613c:	18ca      	adds	r2, r1, r3
 801613e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016142:	fba3 1303 	umull	r1, r3, r3, r3
 8016146:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801614a:	460b      	mov	r3, r1
 801614c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8016150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016154:	18d3      	adds	r3, r2, r3
 8016156:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801615a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801615e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8016162:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8016166:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801616a:	f04f 0000 	mov.w	r0, #0
 801616e:	f04f 0100 	mov.w	r1, #0
 8016172:	0219      	lsls	r1, r3, #8
 8016174:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8016178:	0210      	lsls	r0, r2, #8
 801617a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801617e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016186:	d305      	bcc.n	8016194 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8016188:	f04f 32ff 	mov.w	r2, #4294967295
 801618c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016190:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8016194:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016198:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801619c:	f7ea fd2c 	bl	8000bf8 <__aeabi_uldivmod>
 80161a0:	4602      	mov	r2, r0
 80161a2:	460b      	mov	r3, r1
 80161a4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80161a8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80161ac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80161b0:	f7ea fd22 	bl	8000bf8 <__aeabi_uldivmod>
 80161b4:	4602      	mov	r2, r0
 80161b6:	460b      	mov	r3, r1
 80161b8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 80161bc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80161c0:	2b80      	cmp	r3, #128	; 0x80
 80161c2:	d305      	bcc.n	80161d0 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 80161c4:	f04f 32ff 	mov.w	r2, #4294967295
 80161c8:	f04f 037f 	mov.w	r3, #127	; 0x7f
 80161cc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 80161d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80161d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80161d8:	fb03 f102 	mul.w	r1, r3, r2
 80161dc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80161e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161e4:	fb02 f303 	mul.w	r3, r2, r3
 80161e8:	4419      	add	r1, r3
 80161ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80161ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80161f2:	fba2 2303 	umull	r2, r3, r2, r3
 80161f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80161fa:	4613      	mov	r3, r2
 80161fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8016200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016204:	18cb      	adds	r3, r1, r3
 8016206:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801620a:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 801620e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016212:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8016216:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801621a:	2200      	movs	r2, #0
 801621c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016220:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016224:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8016228:	2200      	movs	r2, #0
 801622a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801622e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8016232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8016236:	4623      	mov	r3, r4
 8016238:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801623c:	4602      	mov	r2, r0
 801623e:	189b      	adds	r3, r3, r2
 8016240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016244:	460b      	mov	r3, r1
 8016246:	462a      	mov	r2, r5
 8016248:	eb42 0303 	adc.w	r3, r2, r3
 801624c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8016250:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016254:	2200      	movs	r2, #0
 8016256:	67bb      	str	r3, [r7, #120]	; 0x78
 8016258:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801625a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801625e:	4623      	mov	r3, r4
 8016260:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8016264:	4602      	mov	r2, r0
 8016266:	189b      	adds	r3, r3, r2
 8016268:	673b      	str	r3, [r7, #112]	; 0x70
 801626a:	460b      	mov	r3, r1
 801626c:	462a      	mov	r2, r5
 801626e:	eb42 0303 	adc.w	r3, r2, r3
 8016272:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8016274:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8016278:	2200      	movs	r2, #0
 801627a:	66bb      	str	r3, [r7, #104]	; 0x68
 801627c:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801627e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8016282:	4623      	mov	r3, r4
 8016284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016288:	4602      	mov	r2, r0
 801628a:	189b      	adds	r3, r3, r2
 801628c:	613b      	str	r3, [r7, #16]
 801628e:	460b      	mov	r3, r1
 8016290:	462a      	mov	r2, r5
 8016292:	eb42 0303 	adc.w	r3, r2, r3
 8016296:	617b      	str	r3, [r7, #20]
 8016298:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801629c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 80162a0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80162a4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80162a8:	f173 0300 	sbcs.w	r3, r3, #0
 80162ac:	d305      	bcc.n	80162ba <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 80162ae:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80162b2:	f04f 0300 	mov.w	r3, #0
 80162b6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 80162ba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80162be:	f04f 0000 	mov.w	r0, #0
 80162c2:	f04f 0100 	mov.w	r1, #0
 80162c6:	0219      	lsls	r1, r3, #8
 80162c8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80162cc:	0210      	lsls	r0, r2, #8
 80162ce:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 80162d2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80162d6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80162da:	1884      	adds	r4, r0, r2
 80162dc:	60bc      	str	r4, [r7, #8]
 80162de:	eb41 0303 	adc.w	r3, r1, r3
 80162e2:	60fb      	str	r3, [r7, #12]
 80162e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80162e8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 80162ec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	da05      	bge.n	8016300 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 80162f4:	f04f 32ff 	mov.w	r2, #4294967295
 80162f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80162fc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8016300:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016304:	2b01      	cmp	r3, #1
 8016306:	d331      	bcc.n	801636c <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8016308:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801630c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016310:	f7ea fc72 	bl	8000bf8 <__aeabi_uldivmod>
 8016314:	4602      	mov	r2, r0
 8016316:	460b      	mov	r3, r1
 8016318:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 801631c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016320:	2200      	movs	r2, #0
 8016322:	663b      	str	r3, [r7, #96]	; 0x60
 8016324:	667a      	str	r2, [r7, #100]	; 0x64
 8016326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801632a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801632e:	4622      	mov	r2, r4
 8016330:	fb02 f203 	mul.w	r2, r2, r3
 8016334:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016338:	4629      	mov	r1, r5
 801633a:	fb01 f303 	mul.w	r3, r1, r3
 801633e:	441a      	add	r2, r3
 8016340:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016344:	4621      	mov	r1, r4
 8016346:	fba3 1301 	umull	r1, r3, r3, r1
 801634a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801634e:	460b      	mov	r3, r1
 8016350:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8016354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016358:	18d3      	adds	r3, r2, r3
 801635a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801635e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8016362:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016366:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801636a:	e030      	b.n	80163ce <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 801636c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016370:	2200      	movs	r2, #0
 8016372:	65bb      	str	r3, [r7, #88]	; 0x58
 8016374:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016376:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801637a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801637e:	4622      	mov	r2, r4
 8016380:	fb02 f203 	mul.w	r2, r2, r3
 8016384:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016388:	4629      	mov	r1, r5
 801638a:	fb01 f303 	mul.w	r3, r1, r3
 801638e:	441a      	add	r2, r3
 8016390:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016394:	4621      	mov	r1, r4
 8016396:	fba3 1301 	umull	r1, r3, r3, r1
 801639a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801639e:	460b      	mov	r3, r1
 80163a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80163a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80163a8:	18d3      	adds	r3, r2, r3
 80163aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80163ae:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80163b2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80163b6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80163ba:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80163be:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80163c2:	f7ea fc19 	bl	8000bf8 <__aeabi_uldivmod>
 80163c6:	4602      	mov	r2, r0
 80163c8:	460b      	mov	r3, r1
 80163ca:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80163ce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	da05      	bge.n	80163e2 <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 80163d6:	f04f 32ff 	mov.w	r2, #4294967295
 80163da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80163de:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80163e2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	d33d      	bcc.n	8016466 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80163ea:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80163ee:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80163f2:	f7ea fc01 	bl	8000bf8 <__aeabi_uldivmod>
 80163f6:	4602      	mov	r2, r0
 80163f8:	460b      	mov	r3, r1
 80163fa:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80163fe:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016402:	f04f 0200 	mov.w	r2, #0
 8016406:	f04f 0300 	mov.w	r3, #0
 801640a:	0882      	lsrs	r2, r0, #2
 801640c:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8016410:	088b      	lsrs	r3, r1, #2
 8016412:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8016416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801641a:	2200      	movs	r2, #0
 801641c:	653b      	str	r3, [r7, #80]	; 0x50
 801641e:	657a      	str	r2, [r7, #84]	; 0x54
 8016420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016424:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8016428:	4622      	mov	r2, r4
 801642a:	fb02 f203 	mul.w	r2, r2, r3
 801642e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016432:	4629      	mov	r1, r5
 8016434:	fb01 f303 	mul.w	r3, r1, r3
 8016438:	4413      	add	r3, r2
 801643a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801643e:	4621      	mov	r1, r4
 8016440:	fba2 1201 	umull	r1, r2, r2, r1
 8016444:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8016448:	460a      	mov	r2, r1
 801644a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801644e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8016452:	4413      	add	r3, r2
 8016454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8016458:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 801645c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016460:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016464:	e03c      	b.n	80164e0 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8016466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801646a:	2200      	movs	r2, #0
 801646c:	64bb      	str	r3, [r7, #72]	; 0x48
 801646e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016470:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016474:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8016478:	4622      	mov	r2, r4
 801647a:	fb02 f203 	mul.w	r2, r2, r3
 801647e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016482:	4629      	mov	r1, r5
 8016484:	fb01 f303 	mul.w	r3, r1, r3
 8016488:	4413      	add	r3, r2
 801648a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801648e:	4621      	mov	r1, r4
 8016490:	fba2 1201 	umull	r1, r2, r2, r1
 8016494:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8016498:	460a      	mov	r2, r1
 801649a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801649e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80164a2:	4413      	add	r3, r2
 80164a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80164a8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80164ac:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80164b0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80164b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80164b8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80164bc:	f7ea fb9c 	bl	8000bf8 <__aeabi_uldivmod>
 80164c0:	4602      	mov	r2, r0
 80164c2:	460b      	mov	r3, r1
 80164c4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80164c8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80164cc:	f04f 0200 	mov.w	r2, #0
 80164d0:	f04f 0300 	mov.w	r3, #0
 80164d4:	0882      	lsrs	r2, r0, #2
 80164d6:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80164da:	088b      	lsrs	r3, r1, #2
 80164dc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80164e0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	da05      	bge.n	80164f4 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 80164e8:	f04f 32ff 	mov.w	r2, #4294967295
 80164ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80164f0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 80164f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80164f8:	f04f 0200 	mov.w	r2, #0
 80164fc:	f04f 0300 	mov.w	r3, #0
 8016500:	0882      	lsrs	r2, r0, #2
 8016502:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8016506:	088b      	lsrs	r3, r1, #2
 8016508:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 801650c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016510:	2b01      	cmp	r3, #1
 8016512:	d305      	bcc.n	8016520 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8016514:	f04f 32ff 	mov.w	r2, #4294967295
 8016518:	f04f 0300 	mov.w	r3, #0
 801651c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8016520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016524:	2200      	movs	r2, #0
 8016526:	643b      	str	r3, [r7, #64]	; 0x40
 8016528:	647a      	str	r2, [r7, #68]	; 0x44
 801652a:	f04f 0200 	mov.w	r2, #0
 801652e:	f04f 0300 	mov.w	r3, #0
 8016532:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8016536:	4629      	mov	r1, r5
 8016538:	01cb      	lsls	r3, r1, #7
 801653a:	4621      	mov	r1, r4
 801653c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8016540:	4621      	mov	r1, r4
 8016542:	01ca      	lsls	r2, r1, #7
 8016544:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8016548:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801654c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016550:	fb03 f202 	mul.w	r2, r3, r2
 8016554:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016558:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801655c:	fb01 f303 	mul.w	r3, r1, r3
 8016560:	441a      	add	r2, r3
 8016562:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016566:	fba3 1303 	umull	r1, r3, r3, r3
 801656a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801656e:	460b      	mov	r3, r1
 8016570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016578:	18d3      	adds	r3, r2, r3
 801657a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801657e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8016582:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8016586:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 801658a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801658e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016592:	1884      	adds	r4, r0, r2
 8016594:	603c      	str	r4, [r7, #0]
 8016596:	eb41 0303 	adc.w	r3, r1, r3
 801659a:	607b      	str	r3, [r7, #4]
 801659c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80165a0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 80165a4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80165a8:	2b01      	cmp	r3, #1
 80165aa:	d305      	bcc.n	80165b8 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 80165ac:	f04f 32ff 	mov.w	r2, #4294967295
 80165b0:	f04f 0300 	mov.w	r3, #0
 80165b4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 80165b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80165bc:	4618      	mov	r0, r3
 80165be:	f7fa fdaa 	bl	8011116 <VL53L1_isqrt>
 80165c2:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 80165c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80165d0:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 80165d2:	2300      	movs	r3, #0
 80165d4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 80165d8:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 80165dc:	4618      	mov	r0, r3
 80165de:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80165e2:	46bd      	mov	sp, r7
 80165e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080165e8 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b086      	sub	sp, #24
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80165f0:	2300      	movs	r3, #0
 80165f2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	3318      	adds	r3, #24
 80165f8:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 80165fa:	2300      	movs	r3, #0
 80165fc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d107      	bne.n	8016616 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8016606:	f64e 2160 	movw	r1, #60000	; 0xea60
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 f88b 	bl	8016726 <VL53L1_poll_for_range_completion>
 8016610:	4603      	mov	r3, r0
 8016612:	75fb      	strb	r3, [r7, #23]
 8016614:	e01b      	b.n	801664e <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8016616:	2300      	movs	r3, #0
 8016618:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 801661a:	e011      	b.n	8016640 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 801661c:	f107 030f 	add.w	r3, r7, #15
 8016620:	4619      	mov	r1, r3
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f000 f819 	bl	801665a <VL53L1_is_new_data_ready>
 8016628:	4603      	mov	r3, r0
 801662a:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 801662c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d105      	bne.n	8016640 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8016634:	2101      	movs	r1, #1
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f000 fe6e 	bl	8017318 <VL53L1_WaitMs>
 801663c:	4603      	mov	r3, r0
 801663e:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8016640:	7bfb      	ldrb	r3, [r7, #15]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d103      	bne.n	801664e <VL53L1_wait_for_test_completion+0x66>
 8016646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d0e6      	beq.n	801661c <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801664e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016652:	4618      	mov	r0, r3
 8016654:	3718      	adds	r7, #24
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 801665a:	b580      	push	{r7, lr}
 801665c:	b086      	sub	sp, #24
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
 8016662:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016664:	2300      	movs	r3, #0
 8016666:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	3318      	adds	r3, #24
 801666c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8016672:	2300      	movs	r3, #0
 8016674:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8016676:	2300      	movs	r3, #0
 8016678:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801667a:	693b      	ldr	r3, [r7, #16]
 801667c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8016680:	f003 0310 	and.w	r3, r3, #16
 8016684:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8016686:	7bfb      	ldrb	r3, [r7, #15]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d102      	bne.n	8016692 <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 801668c:	2301      	movs	r3, #1
 801668e:	75fb      	strb	r3, [r7, #23]
 8016690:	e001      	b.n	8016696 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8016692:	2300      	movs	r3, #0
 8016694:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8016696:	f107 030e 	add.w	r3, r7, #14
 801669a:	461a      	mov	r2, r3
 801669c:	2131      	movs	r1, #49	; 0x31
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f000 fdb2 	bl	8017208 <VL53L1_RdByte>
 80166a4:	4603      	mov	r3, r0
 80166a6:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 80166a8:	7bbb      	ldrb	r3, [r7, #14]
 80166aa:	f003 0201 	and.w	r2, r3, #1
 80166ae:	7dfb      	ldrb	r3, [r7, #23]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d103      	bne.n	80166bc <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	2201      	movs	r2, #1
 80166b8:	701a      	strb	r2, [r3, #0]
 80166ba:	e002      	b.n	80166c2 <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 80166bc:	683b      	ldr	r3, [r7, #0]
 80166be:	2200      	movs	r2, #0
 80166c0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80166c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	3718      	adds	r7, #24
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}

080166ce <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80166ce:	b580      	push	{r7, lr}
 80166d0:	b086      	sub	sp, #24
 80166d2:	af02      	add	r7, sp, #8
 80166d4:	6078      	str	r0, [r7, #4]
 80166d6:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80166d8:	2300      	movs	r3, #0
 80166da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 80166dc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f000 fe29 	bl	8017338 <VL53L1_WaitUs>
 80166e6:	4603      	mov	r3, r0
 80166e8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 80166ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d10b      	bne.n	801670a <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 80166f2:	2301      	movs	r3, #1
 80166f4:	9301      	str	r3, [sp, #4]
 80166f6:	2301      	movs	r3, #1
 80166f8:	9300      	str	r3, [sp, #0]
 80166fa:	2301      	movs	r3, #1
 80166fc:	22e5      	movs	r2, #229	; 0xe5
 80166fe:	6839      	ldr	r1, [r7, #0]
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	f000 fe31 	bl	8017368 <VL53L1_WaitValueMaskEx>
 8016706:	4603      	mov	r3, r0
 8016708:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 801670a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d103      	bne.n	801671a <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8016712:	2103      	movs	r1, #3
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f7f6 fc38 	bl	800cf8a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 801671a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801671e:	4618      	mov	r0, r3
 8016720:	3710      	adds	r7, #16
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}

08016726 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8016726:	b580      	push	{r7, lr}
 8016728:	b088      	sub	sp, #32
 801672a:	af02      	add	r7, sp, #8
 801672c:	6078      	str	r0, [r7, #4]
 801672e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016730:	2300      	movs	r3, #0
 8016732:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	3318      	adds	r3, #24
 8016738:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801673a:	2300      	movs	r3, #0
 801673c:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801673e:	2300      	movs	r3, #0
 8016740:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8016748:	f003 0310 	and.w	r3, r3, #16
 801674c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801674e:	7bfb      	ldrb	r3, [r7, #15]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d102      	bne.n	801675a <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8016754:	2301      	movs	r3, #1
 8016756:	75fb      	strb	r3, [r7, #23]
 8016758:	e001      	b.n	801675e <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 801675a:	2300      	movs	r3, #0
 801675c:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 801675e:	7dfb      	ldrb	r3, [r7, #23]
 8016760:	2201      	movs	r2, #1
 8016762:	9201      	str	r2, [sp, #4]
 8016764:	2201      	movs	r2, #1
 8016766:	9200      	str	r2, [sp, #0]
 8016768:	2231      	movs	r2, #49	; 0x31
 801676a:	6839      	ldr	r1, [r7, #0]
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f000 fdfb 	bl	8017368 <VL53L1_WaitValueMaskEx>
 8016772:	4603      	mov	r3, r0
 8016774:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8016776:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801677a:	4618      	mov	r0, r3
 801677c:	3718      	adds	r7, #24
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}

08016782 <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8016782:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016786:	b0c0      	sub	sp, #256	; 0x100
 8016788:	af00      	add	r7, sp, #0
 801678a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 801678e:	4618      	mov	r0, r3
 8016790:	460b      	mov	r3, r1
 8016792:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8016796:	4613      	mov	r3, r2
 8016798:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 801679c:	4603      	mov	r3, r0
 801679e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80167a2:	2300      	movs	r3, #0
 80167a4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 80167a8:	2300      	movs	r3, #0
 80167aa:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 80167ae:	2300      	movs	r3, #0
 80167b0:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 80167b4:	2300      	movs	r3, #0
 80167b6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 80167ba:	2300      	movs	r3, #0
 80167bc:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 80167c0:	2300      	movs	r3, #0
 80167c2:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 80167c6:	2300      	movs	r3, #0
 80167c8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 80167cc:	f04f 0200 	mov.w	r2, #0
 80167d0:	f04f 0300 	mov.w	r3, #0
 80167d4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 80167d8:	f04f 0200 	mov.w	r2, #0
 80167dc:	f04f 0300 	mov.w	r3, #0
 80167e0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 80167e4:	f04f 0200 	mov.w	r2, #0
 80167e8:	f04f 0300 	mov.w	r3, #0
 80167ec:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 80167f0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d108      	bne.n	801680a <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 80167f8:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 80167fc:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8016800:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8016804:	4618      	mov	r0, r3
 8016806:	f7fb f867 	bl	80118d8 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 801680a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801680e:	2b00      	cmp	r3, #0
 8016810:	d165      	bne.n	80168de <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8016812:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016816:	091b      	lsrs	r3, r3, #4
 8016818:	b2db      	uxtb	r3, r3
 801681a:	f003 0301 	and.w	r3, r3, #1
 801681e:	2b00      	cmp	r3, #0
 8016820:	d00e      	beq.n	8016840 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8016822:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8016826:	b29a      	uxth	r2, r3
 8016828:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801682c:	095b      	lsrs	r3, r3, #5
 801682e:	b2db      	uxtb	r3, r3
 8016830:	b29b      	uxth	r3, r3
 8016832:	1ad3      	subs	r3, r2, r3
 8016834:	b29b      	uxth	r3, r3
 8016836:	3b01      	subs	r3, #1
 8016838:	b29b      	uxth	r3, r3
 801683a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 801683e:	e00b      	b.n	8016858 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8016840:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8016844:	b29a      	uxth	r2, r3
 8016846:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801684a:	095b      	lsrs	r3, r3, #5
 801684c:	b2db      	uxtb	r3, r3
 801684e:	b29b      	uxth	r3, r3
 8016850:	1ad3      	subs	r3, r2, r3
 8016852:	b29b      	uxth	r3, r3
 8016854:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8016858:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 801685c:	b29a      	uxth	r2, r3
 801685e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016862:	095b      	lsrs	r3, r3, #5
 8016864:	b2db      	uxtb	r3, r3
 8016866:	b29b      	uxth	r3, r3
 8016868:	4413      	add	r3, r2
 801686a:	b29b      	uxth	r3, r3
 801686c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8016870:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016874:	f003 0301 	and.w	r3, r3, #1
 8016878:	2b00      	cmp	r3, #0
 801687a:	d011      	beq.n	80168a0 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 801687c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8016880:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8016882:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016886:	f003 020f 	and.w	r2, r3, #15
 801688a:	0fd3      	lsrs	r3, r2, #31
 801688c:	4413      	add	r3, r2
 801688e:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8016890:	b29b      	uxth	r3, r3
 8016892:	1acb      	subs	r3, r1, r3
 8016894:	b29b      	uxth	r3, r3
 8016896:	3b01      	subs	r3, #1
 8016898:	b29b      	uxth	r3, r3
 801689a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 801689e:	e00f      	b.n	80168c0 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 80168a0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80168a4:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80168a6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80168aa:	f003 020f 	and.w	r2, r3, #15
 80168ae:	0fd3      	lsrs	r3, r2, #31
 80168b0:	4413      	add	r3, r2
 80168b2:	105b      	asrs	r3, r3, #1
 80168b4:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 80168b6:	b29b      	uxth	r3, r3
 80168b8:	440b      	add	r3, r1
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 80168c0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80168c4:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80168c6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80168ca:	f003 020f 	and.w	r2, r3, #15
 80168ce:	0fd3      	lsrs	r3, r2, #31
 80168d0:	4413      	add	r3, r2
 80168d2:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	440b      	add	r3, r1
 80168d8:	b29b      	uxth	r3, r3
 80168da:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 80168de:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d133      	bne.n	801694e <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80168e6:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80168f0:	4413      	add	r3, r2
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	005b      	lsls	r3, r3, #1
 80168f6:	b29b      	uxth	r3, r3
 80168f8:	3b0f      	subs	r3, #15
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8016900:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8016904:	b29a      	uxth	r2, r3
 8016906:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 801690a:	4413      	add	r3, r2
 801690c:	b29b      	uxth	r3, r3
 801690e:	005b      	lsls	r3, r3, #1
 8016910:	b29b      	uxth	r3, r3
 8016912:	3b0f      	subs	r3, #15
 8016914:	b29b      	uxth	r3, r3
 8016916:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 801691a:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 801691e:	b29a      	uxth	r2, r3
 8016920:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8016924:	4413      	add	r3, r2
 8016926:	b29b      	uxth	r3, r3
 8016928:	005b      	lsls	r3, r3, #1
 801692a:	b29b      	uxth	r3, r3
 801692c:	3b0f      	subs	r3, #15
 801692e:	b29b      	uxth	r3, r3
 8016930:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8016934:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8016938:	b29a      	uxth	r2, r3
 801693a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 801693e:	4413      	add	r3, r2
 8016940:	b29b      	uxth	r3, r3
 8016942:	005b      	lsls	r3, r3, #1
 8016944:	b29b      	uxth	r3, r3
 8016946:	3b0f      	subs	r3, #15
 8016948:	b29b      	uxth	r3, r3
 801694a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 801694e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016952:	2b00      	cmp	r3, #0
 8016954:	f040 8135 	bne.w	8016bc2 <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8016958:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 801695c:	17da      	asrs	r2, r3, #31
 801695e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016962:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8016966:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801696a:	17da      	asrs	r2, r3, #31
 801696c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016970:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8016974:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8016978:	460b      	mov	r3, r1
 801697a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801697e:	fb02 f203 	mul.w	r2, r2, r3
 8016982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016986:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 801698a:	4601      	mov	r1, r0
 801698c:	fb01 f303 	mul.w	r3, r1, r3
 8016990:	4413      	add	r3, r2
 8016992:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016996:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801699a:	fba2 4501 	umull	r4, r5, r2, r1
 801699e:	442b      	add	r3, r5
 80169a0:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80169a2:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 80169a6:	17da      	asrs	r2, r3, #31
 80169a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80169ac:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 80169b0:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80169b4:	17da      	asrs	r2, r3, #31
 80169b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80169ba:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80169be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80169c2:	460b      	mov	r3, r1
 80169c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80169c8:	fb02 f203 	mul.w	r2, r2, r3
 80169cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80169d0:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 80169d4:	4601      	mov	r1, r0
 80169d6:	fb01 f303 	mul.w	r3, r1, r3
 80169da:	4413      	add	r3, r2
 80169dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80169e0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80169e4:	fba2 8901 	umull	r8, r9, r2, r1
 80169e8:	444b      	add	r3, r9
 80169ea:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80169ec:	eb14 0308 	adds.w	r3, r4, r8
 80169f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80169f2:	eb45 0309 	adc.w	r3, r5, r9
 80169f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80169f8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80169fc:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8016a00:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8016a04:	1c51      	adds	r1, r2, #1
 8016a06:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8016a0a:	f143 0300 	adc.w	r3, r3, #0
 8016a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016a12:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8016a16:	460b      	mov	r3, r1
 8016a18:	0fdb      	lsrs	r3, r3, #31
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8016a1e:	647a      	str	r2, [r7, #68]	; 0x44
 8016a20:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8016a24:	4623      	mov	r3, r4
 8016a26:	4602      	mov	r2, r0
 8016a28:	189b      	adds	r3, r3, r2
 8016a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8016a2c:	460b      	mov	r3, r1
 8016a2e:	462a      	mov	r2, r5
 8016a30:	eb42 0303 	adc.w	r3, r2, r3
 8016a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a36:	f04f 0200 	mov.w	r2, #0
 8016a3a:	f04f 0300 	mov.w	r3, #0
 8016a3e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8016a42:	4621      	mov	r1, r4
 8016a44:	084a      	lsrs	r2, r1, #1
 8016a46:	4629      	mov	r1, r5
 8016a48:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	104b      	asrs	r3, r1, #1
 8016a50:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8016a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a58:	2200      	movs	r2, #0
 8016a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016a62:	f04f 0000 	mov.w	r0, #0
 8016a66:	f04f 0100 	mov.w	r1, #0
 8016a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8016a6e:	462b      	mov	r3, r5
 8016a70:	0099      	lsls	r1, r3, #2
 8016a72:	4623      	mov	r3, r4
 8016a74:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8016a78:	4623      	mov	r3, r4
 8016a7a:	0098      	lsls	r0, r3, #2
 8016a7c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8016a80:	1814      	adds	r4, r2, r0
 8016a82:	633c      	str	r4, [r7, #48]	; 0x30
 8016a84:	414b      	adcs	r3, r1
 8016a86:	637b      	str	r3, [r7, #52]	; 0x34
 8016a88:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8016a8c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8016a90:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8016a94:	17da      	asrs	r2, r3, #31
 8016a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016a9a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8016a9e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8016aa2:	17da      	asrs	r2, r3, #31
 8016aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016aa8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8016aac:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8016ab0:	462b      	mov	r3, r5
 8016ab2:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8016ab6:	4642      	mov	r2, r8
 8016ab8:	fb02 f203 	mul.w	r2, r2, r3
 8016abc:	464b      	mov	r3, r9
 8016abe:	4621      	mov	r1, r4
 8016ac0:	fb01 f303 	mul.w	r3, r1, r3
 8016ac4:	4413      	add	r3, r2
 8016ac6:	4622      	mov	r2, r4
 8016ac8:	4641      	mov	r1, r8
 8016aca:	fba2 ab01 	umull	sl, fp, r2, r1
 8016ace:	445b      	add	r3, fp
 8016ad0:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8016ad2:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8016ad6:	17da      	asrs	r2, r3, #31
 8016ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8016ada:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8016adc:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8016ae0:	17da      	asrs	r2, r3, #31
 8016ae2:	673b      	str	r3, [r7, #112]	; 0x70
 8016ae4:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8016ae6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8016aea:	462b      	mov	r3, r5
 8016aec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8016af0:	4642      	mov	r2, r8
 8016af2:	fb02 f203 	mul.w	r2, r2, r3
 8016af6:	464b      	mov	r3, r9
 8016af8:	4621      	mov	r1, r4
 8016afa:	fb01 f303 	mul.w	r3, r1, r3
 8016afe:	4413      	add	r3, r2
 8016b00:	4622      	mov	r2, r4
 8016b02:	4641      	mov	r1, r8
 8016b04:	fba2 1201 	umull	r1, r2, r2, r1
 8016b08:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8016b0c:	460a      	mov	r2, r1
 8016b0e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8016b12:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016b16:	4413      	add	r3, r2
 8016b18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8016b1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8016b20:	460b      	mov	r3, r1
 8016b22:	eb1a 0303 	adds.w	r3, sl, r3
 8016b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b28:	4613      	mov	r3, r2
 8016b2a:	eb4b 0303 	adc.w	r3, fp, r3
 8016b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b30:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8016b34:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8016b38:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8016b3c:	1c51      	adds	r1, r2, #1
 8016b3e:	66b9      	str	r1, [r7, #104]	; 0x68
 8016b40:	f143 0300 	adc.w	r3, r3, #0
 8016b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016b46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	0fdb      	lsrs	r3, r3, #31
 8016b4e:	2200      	movs	r2, #0
 8016b50:	623b      	str	r3, [r7, #32]
 8016b52:	627a      	str	r2, [r7, #36]	; 0x24
 8016b54:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8016b58:	4623      	mov	r3, r4
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	189b      	adds	r3, r3, r2
 8016b5e:	61bb      	str	r3, [r7, #24]
 8016b60:	460b      	mov	r3, r1
 8016b62:	462a      	mov	r2, r5
 8016b64:	eb42 0303 	adc.w	r3, r2, r3
 8016b68:	61fb      	str	r3, [r7, #28]
 8016b6a:	f04f 0200 	mov.w	r2, #0
 8016b6e:	f04f 0300 	mov.w	r3, #0
 8016b72:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8016b76:	4621      	mov	r1, r4
 8016b78:	084a      	lsrs	r2, r1, #1
 8016b7a:	4629      	mov	r1, r5
 8016b7c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016b80:	4629      	mov	r1, r5
 8016b82:	104b      	asrs	r3, r1, #1
 8016b84:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8016b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	663b      	str	r3, [r7, #96]	; 0x60
 8016b90:	667a      	str	r2, [r7, #100]	; 0x64
 8016b92:	f04f 0200 	mov.w	r2, #0
 8016b96:	f04f 0300 	mov.w	r3, #0
 8016b9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8016b9e:	4629      	mov	r1, r5
 8016ba0:	008b      	lsls	r3, r1, #2
 8016ba2:	4621      	mov	r1, r4
 8016ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016ba8:	4621      	mov	r1, r4
 8016baa:	008a      	lsls	r2, r1, #2
 8016bac:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8016bb0:	1884      	adds	r4, r0, r2
 8016bb2:	613c      	str	r4, [r7, #16]
 8016bb4:	eb41 0303 	adc.w	r3, r1, r3
 8016bb8:	617b      	str	r3, [r7, #20]
 8016bba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016bbe:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 8016bc2:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d132      	bne.n	8016c30 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8016bca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8016bce:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8016bd2:	1884      	adds	r4, r0, r2
 8016bd4:	65bc      	str	r4, [r7, #88]	; 0x58
 8016bd6:	eb41 0303 	adc.w	r3, r1, r3
 8016bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016bdc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8016be0:	460b      	mov	r3, r1
 8016be2:	3301      	adds	r3, #1
 8016be4:	653b      	str	r3, [r7, #80]	; 0x50
 8016be6:	4613      	mov	r3, r2
 8016be8:	f143 0300 	adc.w	r3, r3, #0
 8016bec:	657b      	str	r3, [r7, #84]	; 0x54
 8016bee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016bf2:	460b      	mov	r3, r1
 8016bf4:	0fdb      	lsrs	r3, r3, #31
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	60bb      	str	r3, [r7, #8]
 8016bfa:	60fa      	str	r2, [r7, #12]
 8016bfc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016c00:	4623      	mov	r3, r4
 8016c02:	4602      	mov	r2, r0
 8016c04:	189b      	adds	r3, r3, r2
 8016c06:	603b      	str	r3, [r7, #0]
 8016c08:	460b      	mov	r3, r1
 8016c0a:	462a      	mov	r2, r5
 8016c0c:	eb42 0303 	adc.w	r3, r2, r3
 8016c10:	607b      	str	r3, [r7, #4]
 8016c12:	f04f 0200 	mov.w	r2, #0
 8016c16:	f04f 0300 	mov.w	r3, #0
 8016c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016c1e:	4621      	mov	r1, r4
 8016c20:	084a      	lsrs	r2, r1, #1
 8016c22:	4629      	mov	r1, r5
 8016c24:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016c28:	4629      	mov	r1, r5
 8016c2a:	104b      	asrs	r3, r1, #1
 8016c2c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8016c30:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d109      	bne.n	8016c4c <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8016c38:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	da05      	bge.n	8016c4c <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8016c40:	f04f 0200 	mov.w	r2, #0
 8016c44:	f04f 0300 	mov.w	r3, #0
 8016c48:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8016c4c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016c50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016c54:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8016c56:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8016c60:	46bd      	mov	sp, r7
 8016c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016c66 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8016c66:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016c6a:	b09a      	sub	sp, #104	; 0x68
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6478      	str	r0, [r7, #68]	; 0x44
 8016c70:	6439      	str	r1, [r7, #64]	; 0x40
 8016c72:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016c74:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8016c76:	2300      	movs	r3, #0
 8016c78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8016c7c:	f04f 0200 	mov.w	r2, #0
 8016c80:	f04f 0300 	mov.w	r3, #0
 8016c84:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8016c88:	f04f 0200 	mov.w	r2, #0
 8016c8c:	f04f 0300 	mov.w	r3, #0
 8016c90:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8016c94:	f04f 0200 	mov.w	r2, #0
 8016c98:	f04f 0300 	mov.w	r3, #0
 8016c9c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8016ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ca8:	2200      	movs	r2, #0
 8016caa:	633b      	str	r3, [r7, #48]	; 0x30
 8016cac:	637a      	str	r2, [r7, #52]	; 0x34
 8016cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8016cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016cba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cc2:	fb02 f203 	mul.w	r2, r2, r3
 8016cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8016ccc:	4601      	mov	r1, r0
 8016cce:	fb01 f303 	mul.w	r3, r1, r3
 8016cd2:	4413      	add	r3, r2
 8016cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016cd8:	fba2 4501 	umull	r4, r5, r2, r1
 8016cdc:	442b      	add	r3, r5
 8016cde:	461d      	mov	r5, r3
 8016ce0:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 8016ce4:	623b      	str	r3, [r7, #32]
 8016ce6:	f145 0300 	adc.w	r3, r5, #0
 8016cea:	627b      	str	r3, [r7, #36]	; 0x24
 8016cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016cf0:	f04f 0300 	mov.w	r3, #0
 8016cf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016cf8:	f7e9 ff7e 	bl	8000bf8 <__aeabi_uldivmod>
 8016cfc:	4602      	mov	r2, r0
 8016cfe:	460b      	mov	r3, r1
 8016d00:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8016d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d06:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8016d0a:	b29b      	uxth	r3, r3
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	61bb      	str	r3, [r7, #24]
 8016d10:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8016d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d14:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8016d18:	4622      	mov	r2, r4
 8016d1a:	fb02 f203 	mul.w	r2, r2, r3
 8016d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d20:	4629      	mov	r1, r5
 8016d22:	fb01 f303 	mul.w	r3, r1, r3
 8016d26:	4413      	add	r3, r2
 8016d28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016d2a:	4621      	mov	r1, r4
 8016d2c:	fba2 ab01 	umull	sl, fp, r2, r1
 8016d30:	445b      	add	r3, fp
 8016d32:	469b      	mov	fp, r3
 8016d34:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8016d38:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8016d3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016d40:	f04f 0200 	mov.w	r2, #0
 8016d44:	f04f 0300 	mov.w	r3, #0
 8016d48:	0a02      	lsrs	r2, r0, #8
 8016d4a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016d4e:	0a0b      	lsrs	r3, r1, #8
 8016d50:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8016d54:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8016d58:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8016d5c:	6139      	str	r1, [r7, #16]
 8016d5e:	f143 0300 	adc.w	r3, r3, #0
 8016d62:	617b      	str	r3, [r7, #20]
 8016d64:	f04f 0200 	mov.w	r2, #0
 8016d68:	f04f 0300 	mov.w	r3, #0
 8016d6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8016d70:	4621      	mov	r1, r4
 8016d72:	0aca      	lsrs	r2, r1, #11
 8016d74:	4629      	mov	r1, r5
 8016d76:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8016d7a:	4629      	mov	r1, r5
 8016d7c:	0acb      	lsrs	r3, r1, #11
 8016d7e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8016d82:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8016d86:	2b01      	cmp	r3, #1
 8016d88:	d305      	bcc.n	8016d96 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8016d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8016d8e:	f04f 0300 	mov.w	r3, #0
 8016d92:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8016d96:	2300      	movs	r3, #0
 8016d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016d9c:	e041      	b.n	8016e22 <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8016d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016da4:	3302      	adds	r3, #2
 8016da6:	009b      	lsls	r3, r3, #2
 8016da8:	4413      	add	r3, r2
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	60bb      	str	r3, [r7, #8]
 8016db0:	60fa      	str	r2, [r7, #12]
 8016db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016db4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016db8:	4622      	mov	r2, r4
 8016dba:	fb02 f203 	mul.w	r2, r2, r3
 8016dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016dc0:	4629      	mov	r1, r5
 8016dc2:	fb01 f303 	mul.w	r3, r1, r3
 8016dc6:	4413      	add	r3, r2
 8016dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016dca:	4621      	mov	r1, r4
 8016dcc:	fba2 8901 	umull	r8, r9, r2, r1
 8016dd0:	444b      	add	r3, r9
 8016dd2:	4699      	mov	r9, r3
 8016dd4:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8016dd8:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8016ddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016de0:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 8016de4:	6039      	str	r1, [r7, #0]
 8016de6:	f143 0300 	adc.w	r3, r3, #0
 8016dea:	607b      	str	r3, [r7, #4]
 8016dec:	f04f 0200 	mov.w	r2, #0
 8016df0:	f04f 0300 	mov.w	r3, #0
 8016df4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016df8:	4621      	mov	r1, r4
 8016dfa:	0a8a      	lsrs	r2, r1, #10
 8016dfc:	4629      	mov	r1, r5
 8016dfe:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8016e02:	4629      	mov	r1, r5
 8016e04:	0a8b      	lsrs	r3, r1, #10
 8016e06:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8016e0a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016e0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e12:	3206      	adds	r2, #6
 8016e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8016e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e1c:	3301      	adds	r3, #1
 8016e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e24:	7a9b      	ldrb	r3, [r3, #10]
 8016e26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d3b7      	bcc.n	8016d9e <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016e2e:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 8016e32:	4618      	mov	r0, r3
 8016e34:	3768      	adds	r7, #104	; 0x68
 8016e36:	46bd      	mov	sp, r7
 8016e38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016e3c <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8016e3c:	b590      	push	{r4, r7, lr}
 8016e3e:	b085      	sub	sp, #20
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	4604      	mov	r4, r0
 8016e44:	4608      	mov	r0, r1
 8016e46:	4611      	mov	r1, r2
 8016e48:	461a      	mov	r2, r3
 8016e4a:	4623      	mov	r3, r4
 8016e4c:	71fb      	strb	r3, [r7, #7]
 8016e4e:	4603      	mov	r3, r0
 8016e50:	71bb      	strb	r3, [r7, #6]
 8016e52:	460b      	mov	r3, r1
 8016e54:	717b      	strb	r3, [r7, #5]
 8016e56:	4613      	mov	r3, r2
 8016e58:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 8016e62:	2300      	movs	r3, #0
 8016e64:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8016e66:	2300      	movs	r3, #0
 8016e68:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8016e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e6c:	2210      	movs	r2, #16
 8016e6e:	701a      	strb	r2, [r3, #0]

	i = 0;
 8016e70:	2300      	movs	r3, #0
 8016e72:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8016e74:	2300      	movs	r3, #0
 8016e76:	73fb      	strb	r3, [r7, #15]
 8016e78:	e046      	b.n	8016f08 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	73bb      	strb	r3, [r7, #14]
 8016e7e:	e03b      	b.n	8016ef8 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8016e80:	89bb      	ldrh	r3, [r7, #12]
 8016e82:	2b0f      	cmp	r3, #15
 8016e84:	d832      	bhi.n	8016eec <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8016e86:	89bb      	ldrh	r3, [r7, #12]
 8016e88:	b2da      	uxtb	r2, r3
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8c:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 8016e8e:	89bb      	ldrh	r3, [r7, #12]
 8016e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e92:	3306      	adds	r3, #6
 8016e94:	009b      	lsls	r3, r3, #2
 8016e96:	4413      	add	r3, r2
 8016e98:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016e9c:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8016e9e:	89bb      	ldrh	r3, [r7, #12]
 8016ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ea2:	3306      	adds	r3, #6
 8016ea4:	009b      	lsls	r3, r3, #2
 8016ea6:	4413      	add	r3, r2
 8016ea8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016eac:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8016eae:	7bfa      	ldrb	r2, [r7, #15]
 8016eb0:	79bb      	ldrb	r3, [r7, #6]
 8016eb2:	fb12 f303 	smulbb	r3, r2, r3
 8016eb6:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8016eb8:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8016eba:	79fa      	ldrb	r2, [r7, #7]
 8016ebc:	440a      	add	r2, r1
 8016ebe:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8016ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ec2:	3306      	adds	r3, #6
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	4413      	add	r3, r2
 8016ec8:	460a      	mov	r2, r1
 8016eca:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8016ecc:	7bba      	ldrb	r2, [r7, #14]
 8016ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016ed2:	fb12 f303 	smulbb	r3, r2, r3
 8016ed6:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8016ed8:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8016eda:	793a      	ldrb	r2, [r7, #4]
 8016edc:	440a      	add	r2, r1
 8016ede:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8016ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ee2:	3306      	adds	r3, #6
 8016ee4:	009b      	lsls	r3, r3, #2
 8016ee6:	4413      	add	r3, r2
 8016ee8:	460a      	mov	r2, r1
 8016eea:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8016eec:	89bb      	ldrh	r3, [r7, #12]
 8016eee:	3301      	adds	r3, #1
 8016ef0:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 8016ef2:	7bbb      	ldrb	r3, [r7, #14]
 8016ef4:	3301      	adds	r3, #1
 8016ef6:	73bb      	strb	r3, [r7, #14]
 8016ef8:	7bba      	ldrb	r2, [r7, #14]
 8016efa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d3be      	bcc.n	8016e80 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 8016f02:	7bfb      	ldrb	r3, [r7, #15]
 8016f04:	3301      	adds	r3, #1
 8016f06:	73fb      	strb	r3, [r7, #15]
 8016f08:	7bfa      	ldrb	r2, [r7, #15]
 8016f0a:	797b      	ldrb	r3, [r7, #5]
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	d3b4      	bcc.n	8016e7a <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8016f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f12:	f000 f86c 	bl	8016fee <VL53L1_init_zone_config_histogram_bins>
 8016f16:	4603      	mov	r3, r0
 8016f18:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8016f1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016f1e:	4618      	mov	r0, r3
 8016f20:	3714      	adds	r7, #20
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd90      	pop	{r4, r7, pc}

08016f26 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 8016f26:	b580      	push	{r7, lr}
 8016f28:	b084      	sub	sp, #16
 8016f2a:	af00      	add	r7, sp, #0
 8016f2c:	6078      	str	r0, [r7, #4]
 8016f2e:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016f30:	2300      	movs	r3, #0
 8016f32:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2205      	movs	r2, #5
 8016f38:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	2204      	movs	r2, #4
 8016f3e:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8016f40:	683b      	ldr	r3, [r7, #0]
 8016f42:	220f      	movs	r2, #15
 8016f44:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	2207      	movs	r2, #7
 8016f4a:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	2204      	movs	r2, #4
 8016f50:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	2208      	movs	r2, #8
 8016f56:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8016f58:	683b      	ldr	r3, [r7, #0]
 8016f5a:	220f      	movs	r2, #15
 8016f5c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	2207      	movs	r2, #7
 8016f64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	220c      	movs	r2, #12
 8016f6c:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	2208      	movs	r2, #8
 8016f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	2207      	movs	r2, #7
 8016f7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	220f      	movs	r2, #15
 8016f84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	2208      	movs	r2, #8
 8016f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	2204      	movs	r2, #4
 8016f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	2207      	movs	r2, #7
 8016f9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	220f      	movs	r2, #15
 8016fa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	2208      	movs	r2, #8
 8016fac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	220c      	movs	r2, #12
 8016fb4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	220f      	movs	r2, #15
 8016fbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	220f      	movs	r2, #15
 8016fc4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	2208      	movs	r2, #8
 8016fcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	2208      	movs	r2, #8
 8016fd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8016fd8:	6838      	ldr	r0, [r7, #0]
 8016fda:	f000 f808 	bl	8016fee <VL53L1_init_zone_config_histogram_bins>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 8016fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3710      	adds	r7, #16
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}

08016fee <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 8016fee:	b480      	push	{r7}
 8016ff0:	b085      	sub	sp, #20
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	73fb      	strb	r3, [r7, #15]
 8016ffe:	e008      	b.n	8017012 <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8017000:	7bfb      	ldrb	r3, [r7, #15]
 8017002:	687a      	ldr	r2, [r7, #4]
 8017004:	4413      	add	r3, r2
 8017006:	2201      	movs	r2, #1
 8017008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 801700c:	7bfb      	ldrb	r3, [r7, #15]
 801700e:	3301      	adds	r3, #1
 8017010:	73fb      	strb	r3, [r7, #15]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	7bfa      	ldrb	r2, [r7, #15]
 8017018:	429a      	cmp	r2, r3
 801701a:	d3f1      	bcc.n	8017000 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 801701c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8017020:	4618      	mov	r0, r3
 8017022:	3714      	adds	r7, #20
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr

0801702c <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801702c:	b580      	push	{r7, lr}
 801702e:	b084      	sub	sp, #16
 8017030:	af00      	add	r7, sp, #0
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	68db      	ldr	r3, [r3, #12]
 801703c:	68fa      	ldr	r2, [r7, #12]
 801703e:	8910      	ldrh	r0, [r2, #8]
 8017040:	687a      	ldr	r2, [r7, #4]
 8017042:	b292      	uxth	r2, r2
 8017044:	68b9      	ldr	r1, [r7, #8]
 8017046:	4798      	blx	r3
 8017048:	4603      	mov	r3, r0
}
 801704a:	4618      	mov	r0, r3
 801704c:	3710      	adds	r7, #16
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}

08017052 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8017052:	b580      	push	{r7, lr}
 8017054:	b084      	sub	sp, #16
 8017056:	af00      	add	r7, sp, #0
 8017058:	60f8      	str	r0, [r7, #12]
 801705a:	60b9      	str	r1, [r7, #8]
 801705c:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	691b      	ldr	r3, [r3, #16]
 8017062:	68fa      	ldr	r2, [r7, #12]
 8017064:	8910      	ldrh	r0, [r2, #8]
 8017066:	687a      	ldr	r2, [r7, #4]
 8017068:	b292      	uxth	r2, r2
 801706a:	68b9      	ldr	r1, [r7, #8]
 801706c:	4798      	blx	r3
 801706e:	4603      	mov	r3, r0
}
 8017070:	4618      	mov	r0, r3
 8017072:	3710      	adds	r7, #16
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}

08017078 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8017078:	b580      	push	{r7, lr}
 801707a:	b086      	sub	sp, #24
 801707c:	af00      	add	r7, sp, #0
 801707e:	60f8      	str	r0, [r7, #12]
 8017080:	607a      	str	r2, [r7, #4]
 8017082:	603b      	str	r3, [r7, #0]
 8017084:	460b      	mov	r3, r1
 8017086:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8017088:	2300      	movs	r3, #0
 801708a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	2bff      	cmp	r3, #255	; 0xff
 8017090:	d902      	bls.n	8017098 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8017092:	f06f 0303 	mvn.w	r3, #3
 8017096:	e01d      	b.n	80170d4 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8017098:	897b      	ldrh	r3, [r7, #10]
 801709a:	0a1b      	lsrs	r3, r3, #8
 801709c:	b29b      	uxth	r3, r3
 801709e:	b2da      	uxtb	r2, r3
 80170a0:	4b0e      	ldr	r3, [pc, #56]	; (80170dc <VL53L1_WriteMulti+0x64>)
 80170a2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80170a4:	897b      	ldrh	r3, [r7, #10]
 80170a6:	b2da      	uxtb	r2, r3
 80170a8:	4b0c      	ldr	r3, [pc, #48]	; (80170dc <VL53L1_WriteMulti+0x64>)
 80170aa:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80170ac:	683a      	ldr	r2, [r7, #0]
 80170ae:	6879      	ldr	r1, [r7, #4]
 80170b0:	480b      	ldr	r0, [pc, #44]	; (80170e0 <VL53L1_WriteMulti+0x68>)
 80170b2:	f008 f9f3 	bl	801f49c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	3302      	adds	r3, #2
 80170ba:	461a      	mov	r2, r3
 80170bc:	4907      	ldr	r1, [pc, #28]	; (80170dc <VL53L1_WriteMulti+0x64>)
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f7ff ffb4 	bl	801702c <_I2CWrite>
 80170c4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80170c6:	693b      	ldr	r3, [r7, #16]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d001      	beq.n	80170d0 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80170cc:	23f3      	movs	r3, #243	; 0xf3
 80170ce:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80170d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80170d4:	4618      	mov	r0, r3
 80170d6:	3718      	adds	r7, #24
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}
 80170dc:	20008760 	.word	0x20008760
 80170e0:	20008762 	.word	0x20008762

080170e4 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b086      	sub	sp, #24
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	607a      	str	r2, [r7, #4]
 80170ee:	603b      	str	r3, [r7, #0]
 80170f0:	460b      	mov	r3, r1
 80170f2:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80170f4:	2300      	movs	r3, #0
 80170f6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80170f8:	897b      	ldrh	r3, [r7, #10]
 80170fa:	0a1b      	lsrs	r3, r3, #8
 80170fc:	b29b      	uxth	r3, r3
 80170fe:	b2da      	uxtb	r2, r3
 8017100:	4b12      	ldr	r3, [pc, #72]	; (801714c <VL53L1_ReadMulti+0x68>)
 8017102:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8017104:	897b      	ldrh	r3, [r7, #10]
 8017106:	b2da      	uxtb	r2, r3
 8017108:	4b10      	ldr	r3, [pc, #64]	; (801714c <VL53L1_ReadMulti+0x68>)
 801710a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801710c:	2202      	movs	r2, #2
 801710e:	490f      	ldr	r1, [pc, #60]	; (801714c <VL53L1_ReadMulti+0x68>)
 8017110:	68f8      	ldr	r0, [r7, #12]
 8017112:	f7ff ff8b 	bl	801702c <_I2CWrite>
 8017116:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8017118:	693b      	ldr	r3, [r7, #16]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d002      	beq.n	8017124 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801711e:	23f3      	movs	r3, #243	; 0xf3
 8017120:	75fb      	strb	r3, [r7, #23]
        goto done;
 8017122:	e00c      	b.n	801713e <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8017124:	683a      	ldr	r2, [r7, #0]
 8017126:	6879      	ldr	r1, [r7, #4]
 8017128:	68f8      	ldr	r0, [r7, #12]
 801712a:	f7ff ff92 	bl	8017052 <_I2CRead>
 801712e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d002      	beq.n	801713c <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017136:	23f3      	movs	r3, #243	; 0xf3
 8017138:	75fb      	strb	r3, [r7, #23]
 801713a:	e000      	b.n	801713e <VL53L1_ReadMulti+0x5a>
    }
done:
 801713c:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801713e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017142:	4618      	mov	r0, r3
 8017144:	3718      	adds	r7, #24
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
 801714a:	bf00      	nop
 801714c:	20008760 	.word	0x20008760

08017150 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8017150:	b580      	push	{r7, lr}
 8017152:	b084      	sub	sp, #16
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	460b      	mov	r3, r1
 801715a:	807b      	strh	r3, [r7, #2]
 801715c:	4613      	mov	r3, r2
 801715e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8017160:	2300      	movs	r3, #0
 8017162:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8017164:	887b      	ldrh	r3, [r7, #2]
 8017166:	0a1b      	lsrs	r3, r3, #8
 8017168:	b29b      	uxth	r3, r3
 801716a:	b2da      	uxtb	r2, r3
 801716c:	4b0c      	ldr	r3, [pc, #48]	; (80171a0 <VL53L1_WrByte+0x50>)
 801716e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8017170:	887b      	ldrh	r3, [r7, #2]
 8017172:	b2da      	uxtb	r2, r3
 8017174:	4b0a      	ldr	r3, [pc, #40]	; (80171a0 <VL53L1_WrByte+0x50>)
 8017176:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8017178:	4a09      	ldr	r2, [pc, #36]	; (80171a0 <VL53L1_WrByte+0x50>)
 801717a:	787b      	ldrb	r3, [r7, #1]
 801717c:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801717e:	2203      	movs	r2, #3
 8017180:	4907      	ldr	r1, [pc, #28]	; (80171a0 <VL53L1_WrByte+0x50>)
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f7ff ff52 	bl	801702c <_I2CWrite>
 8017188:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d001      	beq.n	8017194 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017190:	23f3      	movs	r3, #243	; 0xf3
 8017192:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8017194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017198:	4618      	mov	r0, r3
 801719a:	3710      	adds	r7, #16
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	20008760 	.word	0x20008760

080171a4 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b084      	sub	sp, #16
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	460b      	mov	r3, r1
 80171ae:	807b      	strh	r3, [r7, #2]
 80171b0:	4613      	mov	r3, r2
 80171b2:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80171b4:	2300      	movs	r3, #0
 80171b6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80171b8:	887b      	ldrh	r3, [r7, #2]
 80171ba:	0a1b      	lsrs	r3, r3, #8
 80171bc:	b29b      	uxth	r3, r3
 80171be:	b2da      	uxtb	r2, r3
 80171c0:	4b10      	ldr	r3, [pc, #64]	; (8017204 <VL53L1_WrWord+0x60>)
 80171c2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80171c4:	887b      	ldrh	r3, [r7, #2]
 80171c6:	b2da      	uxtb	r2, r3
 80171c8:	4b0e      	ldr	r3, [pc, #56]	; (8017204 <VL53L1_WrWord+0x60>)
 80171ca:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80171cc:	883b      	ldrh	r3, [r7, #0]
 80171ce:	0a1b      	lsrs	r3, r3, #8
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	b2da      	uxtb	r2, r3
 80171d4:	4b0b      	ldr	r3, [pc, #44]	; (8017204 <VL53L1_WrWord+0x60>)
 80171d6:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80171d8:	883b      	ldrh	r3, [r7, #0]
 80171da:	b2da      	uxtb	r2, r3
 80171dc:	4b09      	ldr	r3, [pc, #36]	; (8017204 <VL53L1_WrWord+0x60>)
 80171de:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80171e0:	2204      	movs	r2, #4
 80171e2:	4908      	ldr	r1, [pc, #32]	; (8017204 <VL53L1_WrWord+0x60>)
 80171e4:	6878      	ldr	r0, [r7, #4]
 80171e6:	f7ff ff21 	bl	801702c <_I2CWrite>
 80171ea:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d001      	beq.n	80171f6 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80171f2:	23f3      	movs	r3, #243	; 0xf3
 80171f4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80171f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	3710      	adds	r7, #16
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}
 8017202:	bf00      	nop
 8017204:	20008760 	.word	0x20008760

08017208 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8017208:	b580      	push	{r7, lr}
 801720a:	b086      	sub	sp, #24
 801720c:	af00      	add	r7, sp, #0
 801720e:	60f8      	str	r0, [r7, #12]
 8017210:	460b      	mov	r3, r1
 8017212:	607a      	str	r2, [r7, #4]
 8017214:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8017216:	2300      	movs	r3, #0
 8017218:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 801721a:	897b      	ldrh	r3, [r7, #10]
 801721c:	0a1b      	lsrs	r3, r3, #8
 801721e:	b29b      	uxth	r3, r3
 8017220:	b2da      	uxtb	r2, r3
 8017222:	4b12      	ldr	r3, [pc, #72]	; (801726c <VL53L1_RdByte+0x64>)
 8017224:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8017226:	897b      	ldrh	r3, [r7, #10]
 8017228:	b2da      	uxtb	r2, r3
 801722a:	4b10      	ldr	r3, [pc, #64]	; (801726c <VL53L1_RdByte+0x64>)
 801722c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801722e:	2202      	movs	r2, #2
 8017230:	490e      	ldr	r1, [pc, #56]	; (801726c <VL53L1_RdByte+0x64>)
 8017232:	68f8      	ldr	r0, [r7, #12]
 8017234:	f7ff fefa 	bl	801702c <_I2CWrite>
 8017238:	6138      	str	r0, [r7, #16]
    if( status_int ){
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d002      	beq.n	8017246 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017240:	23f3      	movs	r3, #243	; 0xf3
 8017242:	75fb      	strb	r3, [r7, #23]
        goto done;
 8017244:	e00c      	b.n	8017260 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8017246:	2201      	movs	r2, #1
 8017248:	6879      	ldr	r1, [r7, #4]
 801724a:	68f8      	ldr	r0, [r7, #12]
 801724c:	f7ff ff01 	bl	8017052 <_I2CRead>
 8017250:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d002      	beq.n	801725e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017258:	23f3      	movs	r3, #243	; 0xf3
 801725a:	75fb      	strb	r3, [r7, #23]
 801725c:	e000      	b.n	8017260 <VL53L1_RdByte+0x58>
    }
done:
 801725e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8017260:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017264:	4618      	mov	r0, r3
 8017266:	3718      	adds	r7, #24
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}
 801726c:	20008760 	.word	0x20008760

08017270 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8017270:	b580      	push	{r7, lr}
 8017272:	b086      	sub	sp, #24
 8017274:	af00      	add	r7, sp, #0
 8017276:	60f8      	str	r0, [r7, #12]
 8017278:	460b      	mov	r3, r1
 801727a:	607a      	str	r2, [r7, #4]
 801727c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801727e:	2300      	movs	r3, #0
 8017280:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8017282:	897b      	ldrh	r3, [r7, #10]
 8017284:	0a1b      	lsrs	r3, r3, #8
 8017286:	b29b      	uxth	r3, r3
 8017288:	b2da      	uxtb	r2, r3
 801728a:	4b18      	ldr	r3, [pc, #96]	; (80172ec <VL53L1_RdWord+0x7c>)
 801728c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801728e:	897b      	ldrh	r3, [r7, #10]
 8017290:	b2da      	uxtb	r2, r3
 8017292:	4b16      	ldr	r3, [pc, #88]	; (80172ec <VL53L1_RdWord+0x7c>)
 8017294:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8017296:	2202      	movs	r2, #2
 8017298:	4914      	ldr	r1, [pc, #80]	; (80172ec <VL53L1_RdWord+0x7c>)
 801729a:	68f8      	ldr	r0, [r7, #12]
 801729c:	f7ff fec6 	bl	801702c <_I2CWrite>
 80172a0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d002      	beq.n	80172ae <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80172a8:	23f3      	movs	r3, #243	; 0xf3
 80172aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80172ac:	e017      	b.n	80172de <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80172ae:	2202      	movs	r2, #2
 80172b0:	490e      	ldr	r1, [pc, #56]	; (80172ec <VL53L1_RdWord+0x7c>)
 80172b2:	68f8      	ldr	r0, [r7, #12]
 80172b4:	f7ff fecd 	bl	8017052 <_I2CRead>
 80172b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d002      	beq.n	80172c6 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80172c0:	23f3      	movs	r3, #243	; 0xf3
 80172c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80172c4:	e00b      	b.n	80172de <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80172c6:	4b09      	ldr	r3, [pc, #36]	; (80172ec <VL53L1_RdWord+0x7c>)
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	021b      	lsls	r3, r3, #8
 80172ce:	b29a      	uxth	r2, r3
 80172d0:	4b06      	ldr	r3, [pc, #24]	; (80172ec <VL53L1_RdWord+0x7c>)
 80172d2:	785b      	ldrb	r3, [r3, #1]
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	4413      	add	r3, r2
 80172d8:	b29a      	uxth	r2, r3
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 80172de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3718      	adds	r7, #24
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	bf00      	nop
 80172ec:	20008760 	.word	0x20008760

080172f0 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
 80172f8:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80172fa:	2300      	movs	r3, #0
 80172fc:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	695b      	ldr	r3, [r3, #20]
 8017302:	4798      	blx	r3
 8017304:	4603      	mov	r3, r0
 8017306:	461a      	mov	r2, r3
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 801730c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017310:	4618      	mov	r0, r3
 8017312:	3710      	adds	r7, #16
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	4619      	mov	r1, r3
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f000 f8d2 	bl	80174d0 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 801732c:	2300      	movs	r3, #0
}
 801732e:	4618      	mov	r0, r3
 8017330:	3708      	adds	r7, #8
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
	...

08017338 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8017338:	b580      	push	{r7, lr}
 801733a:	b082      	sub	sp, #8
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
 8017340:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8017342:	683b      	ldr	r3, [r7, #0]
 8017344:	4a07      	ldr	r2, [pc, #28]	; (8017364 <VL53L1_WaitUs+0x2c>)
 8017346:	fb82 1203 	smull	r1, r2, r2, r3
 801734a:	1192      	asrs	r2, r2, #6
 801734c:	17db      	asrs	r3, r3, #31
 801734e:	1ad3      	subs	r3, r2, r3
 8017350:	4619      	mov	r1, r3
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f000 f8bc 	bl	80174d0 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8017358:	2300      	movs	r3, #0
}
 801735a:	4618      	mov	r0, r3
 801735c:	3708      	adds	r7, #8
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
 8017362:	bf00      	nop
 8017364:	10624dd3 	.word	0x10624dd3

08017368 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8017368:	b590      	push	{r4, r7, lr}
 801736a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801736e:	af00      	add	r7, sp, #0
 8017370:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8017374:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8017378:	6020      	str	r0, [r4, #0]
 801737a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 801737e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8017382:	6001      	str	r1, [r0, #0]
 8017384:	4619      	mov	r1, r3
 8017386:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801738a:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 801738e:	801a      	strh	r2, [r3, #0]
 8017390:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017394:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8017398:	460a      	mov	r2, r1
 801739a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 801739c:	2300      	movs	r3, #0
 801739e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80173a2:	2300      	movs	r3, #0
 80173a4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80173a8:	2300      	movs	r3, #0
 80173aa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80173ae:	2300      	movs	r3, #0
 80173b0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80173b4:	2300      	movs	r3, #0
 80173b6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80173ba:	2300      	movs	r3, #0
 80173bc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 80173c0:	f107 0310 	add.w	r3, r7, #16
 80173c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80173c8:	4940      	ldr	r1, [pc, #256]	; (80174cc <VL53L1_WaitValueMaskEx+0x164>)
 80173ca:	4618      	mov	r0, r3
 80173cc:	f008 ff0b 	bl	80201e6 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 80173d0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80173d4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80173d8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80173dc:	4611      	mov	r1, r2
 80173de:	6818      	ldr	r0, [r3, #0]
 80173e0:	f7ff ff86 	bl	80172f0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80173e4:	e04e      	b.n	8017484 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 80173e6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d110      	bne.n	8017410 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 80173ee:	f207 2213 	addw	r2, r7, #531	; 0x213
 80173f2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80173f6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80173fa:	8819      	ldrh	r1, [r3, #0]
 80173fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017400:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017404:	6818      	ldr	r0, [r3, #0]
 8017406:	f7ff feff 	bl	8017208 <VL53L1_RdByte>
 801740a:	4603      	mov	r3, r0
 801740c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8017410:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8017414:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8017418:	4013      	ands	r3, r2
 801741a:	b2db      	uxtb	r3, r3
 801741c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8017420:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8017424:	7812      	ldrb	r2, [r2, #0]
 8017426:	429a      	cmp	r2, r3
 8017428:	d102      	bne.n	8017430 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 801742a:	2301      	movs	r3, #1
 801742c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8017430:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8017434:	2b00      	cmp	r3, #0
 8017436:	d114      	bne.n	8017462 <VL53L1_WaitValueMaskEx+0xfa>
 8017438:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801743c:	2b00      	cmp	r3, #0
 801743e:	d110      	bne.n	8017462 <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8017440:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8017444:	2b00      	cmp	r3, #0
 8017446:	d00c      	beq.n	8017462 <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8017448:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801744c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017450:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017454:	4611      	mov	r1, r2
 8017456:	6818      	ldr	r0, [r3, #0]
 8017458:	f7ff ff5e 	bl	8017318 <VL53L1_WaitMs>
 801745c:	4603      	mov	r3, r0
 801745e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8017462:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8017466:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801746a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801746e:	4611      	mov	r1, r2
 8017470:	6818      	ldr	r0, [r3, #0]
 8017472:	f7ff ff3d 	bl	80172f0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8017476:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801747a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801747e:	1ad3      	subs	r3, r2, r3
 8017480:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8017484:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8017488:	2b00      	cmp	r3, #0
 801748a:	d10c      	bne.n	80174a6 <VL53L1_WaitValueMaskEx+0x13e>
 801748c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017490:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8017494:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	429a      	cmp	r2, r3
 801749c:	d203      	bcs.n	80174a6 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 801749e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d09f      	beq.n	80173e6 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 80174a6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d106      	bne.n	80174bc <VL53L1_WaitValueMaskEx+0x154>
 80174ae:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d102      	bne.n	80174bc <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 80174b6:	23f9      	movs	r3, #249	; 0xf9
 80174b8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 80174bc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 80174c0:	4618      	mov	r0, r3
 80174c2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd90      	pop	{r4, r7, pc}
 80174ca:	bf00      	nop
 80174cc:	08022288 	.word	0x08022288

080174d0 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b084      	sub	sp, #16
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
 80174d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	695b      	ldr	r3, [r3, #20]
 80174de:	4798      	blx	r3
 80174e0:	4603      	mov	r3, r0
 80174e2:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80174e4:	bf00      	nop
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	695b      	ldr	r3, [r3, #20]
 80174ea:	4798      	blx	r3
 80174ec:	4603      	mov	r3, r0
 80174ee:	461a      	mov	r2, r3
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	1ad3      	subs	r3, r2, r3
 80174f4:	683a      	ldr	r2, [r7, #0]
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d8f5      	bhi.n	80174e6 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 80174fa:	2300      	movs	r3, #0
}
 80174fc:	4618      	mov	r0, r3
 80174fe:	3710      	adds	r7, #16
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}

08017504 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b08c      	sub	sp, #48	; 0x30
 8017508:	af06      	add	r7, sp, #24
 801750a:	60f8      	str	r0, [r7, #12]
 801750c:	60b9      	str	r1, [r7, #8]
 801750e:	607a      	str	r2, [r7, #4]
 8017510:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8017512:	2300      	movs	r3, #0
 8017514:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8017516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017518:	9304      	str	r3, [sp, #16]
 801751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801751c:	9303      	str	r3, [sp, #12]
 801751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017520:	9302      	str	r3, [sp, #8]
 8017522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017524:	9301      	str	r3, [sp, #4]
 8017526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017528:	9300      	str	r3, [sp, #0]
 801752a:	6a3b      	ldr	r3, [r7, #32]
 801752c:	683a      	ldr	r2, [r7, #0]
 801752e:	6879      	ldr	r1, [r7, #4]
 8017530:	68b8      	ldr	r0, [r7, #8]
 8017532:	f7fc fefb 	bl	801432c <VL53L1_hist_process_data>
 8017536:	4603      	mov	r3, r0
 8017538:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 801753a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801753e:	4618      	mov	r0, r3
 8017540:	3718      	adds	r7, #24
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}

08017546 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8017546:	b580      	push	{r7, lr}
 8017548:	b084      	sub	sp, #16
 801754a:	af00      	add	r7, sp, #0
 801754c:	6078      	str	r0, [r7, #4]
 801754e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d103      	bne.n	801755e <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017556:	f06f 0301 	mvn.w	r3, #1
 801755a:	60fb      	str	r3, [r7, #12]
 801755c:	e023      	b.n	80175a6 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	681a      	ldr	r2, [r3, #0]
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	685a      	ldr	r2, [r3, #4]
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	891a      	ldrh	r2, [r3, #8]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	68da      	ldr	r2, [r3, #12]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	691a      	ldr	r2, [r3, #16]
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	695a      	ldr	r2, [r3, #20]
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d004      	beq.n	80175a0 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	4798      	blx	r3
 801759c:	60f8      	str	r0, [r7, #12]
 801759e:	e002      	b.n	80175a6 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 80175a0:	f04f 33ff 	mov.w	r3, #4294967295
 80175a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80175a6:	68fb      	ldr	r3, [r7, #12]
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3710      	adds	r7, #16
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b084      	sub	sp, #16
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80175be:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d003      	beq.n	80175ce <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 80175c6:	f04f 33ff 	mov.w	r3, #4294967295
 80175ca:	60fb      	str	r3, [r7, #12]
 80175cc:	e04d      	b.n	801766a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f7ed f8d1 	bl	8004776 <VL53L1_WaitDeviceBooted>
 80175d4:	4603      	mov	r3, r0
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d003      	beq.n	80175e2 <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 80175da:	f04f 33ff 	mov.w	r3, #4294967295
 80175de:	60fb      	str	r3, [r7, #12]
 80175e0:	e043      	b.n	801766a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7ed f847 	bl	8004676 <VL53L1_DataInit>
 80175e8:	4603      	mov	r3, r0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d003      	beq.n	80175f6 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 80175ee:	f04f 33ff 	mov.w	r3, #4294967295
 80175f2:	60fb      	str	r3, [r7, #12]
 80175f4:	e039      	b.n	801766a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7ed f892 	bl	8004720 <VL53L1_StaticInit>
 80175fc:	4603      	mov	r3, r0
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d003      	beq.n	801760a <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8017602:	f04f 33ff 	mov.w	r3, #4294967295
 8017606:	60fb      	str	r3, [r7, #12]
 8017608:	e02f      	b.n	801766a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f7ee fe8a 	bl	8006324 <VL53L1_PerformRefSpadManagement>
 8017610:	4603      	mov	r3, r0
 8017612:	2b00      	cmp	r3, #0
 8017614:	d003      	beq.n	801761e <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8017616:	f04f 33ff 	mov.w	r3, #4294967295
 801761a:	60fb      	str	r3, [r7, #12]
 801761c:	e025      	b.n	801766a <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017624:	2200      	movs	r2, #0
 8017626:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017630:	2200      	movs	r2, #0
 8017632:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801763c:	2200      	movs	r2, #0
 801763e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017648:	2200      	movs	r2, #0
 801764a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017654:	2200      	movs	r2, #0
 8017656:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017660:	2201      	movs	r2, #1
 8017662:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8017666:	2300      	movs	r3, #0
 8017668:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801766a:	68fb      	ldr	r3, [r7, #12]
}
 801766c:	4618      	mov	r0, r3
 801766e:	3710      	adds	r7, #16
 8017670:	46bd      	mov	sp, r7
 8017672:	bd80      	pop	{r7, pc}

08017674 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b084      	sub	sp, #16
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 801767c:	f04f 33ff 	mov.w	r3, #4294967295
 8017680:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017688:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 801768c:	2b01      	cmp	r3, #1
 801768e:	d111      	bne.n	80176b4 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	685b      	ldr	r3, [r3, #4]
 8017694:	4798      	blx	r3
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d003      	beq.n	80176a4 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 801769c:	f04f 33ff 	mov.w	r3, #4294967295
 80176a0:	60fb      	str	r3, [r7, #12]
 80176a2:	e007      	b.n	80176b4 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 80176a4:	2300      	movs	r3, #0
 80176a6:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80176ae:	2200      	movs	r2, #0
 80176b0:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 80176b4:	68fb      	ldr	r3, [r7, #12]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3710      	adds	r7, #16
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}

080176be <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 80176be:	b580      	push	{r7, lr}
 80176c0:	b084      	sub	sp, #16
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	6078      	str	r0, [r7, #4]
 80176c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d002      	beq.n	80176d4 <VL53L1CB_ReadID+0x16>
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d103      	bne.n	80176dc <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80176d4:	f06f 0301 	mvn.w	r3, #1
 80176d8:	60fb      	str	r3, [r7, #12]
 80176da:	e00a      	b.n	80176f2 <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	2200      	movs	r2, #0
 80176e0:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 80176e2:	683a      	ldr	r2, [r7, #0]
 80176e4:	f240 110f 	movw	r1, #271	; 0x10f
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f7ff fdc1 	bl	8017270 <VL53L1_RdWord>
 80176ee:	4603      	mov	r3, r0
 80176f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80176f2:	68fb      	ldr	r3, [r7, #12]
}
 80176f4:	4618      	mov	r0, r3
 80176f6:	3710      	adds	r7, #16
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bd80      	pop	{r7, pc}

080176fc <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 80176fc:	b480      	push	{r7}
 80176fe:	b085      	sub	sp, #20
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
 8017704:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d002      	beq.n	8017712 <VL53L1CB_GetCapabilities+0x16>
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d103      	bne.n	801771a <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017712:	f06f 0301 	mvn.w	r3, #1
 8017716:	60fb      	str	r3, [r7, #12]
 8017718:	e00d      	b.n	8017736 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	2201      	movs	r2, #1
 801771e:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	2204      	movs	r2, #4
 8017724:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	2201      	movs	r2, #1
 801772a:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 801772c:	683b      	ldr	r3, [r7, #0]
 801772e:	2200      	movs	r2, #0
 8017730:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8017732:	2300      	movs	r3, #0
 8017734:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017736:	68fb      	ldr	r3, [r7, #12]
}
 8017738:	4618      	mov	r0, r3
 801773a:	3714      	adds	r7, #20
 801773c:	46bd      	mov	sp, r7
 801773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017742:	4770      	bx	lr

08017744 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b084      	sub	sp, #16
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d009      	beq.n	8017768 <VL53L1CB_ConfigProfile+0x24>
 8017754:	683b      	ldr	r3, [r7, #0]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d006      	beq.n	8017768 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	781b      	ldrb	r3, [r3, #0]
 801775e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8017760:	7afb      	ldrb	r3, [r7, #11]
 8017762:	2b01      	cmp	r3, #1
 8017764:	d103      	bne.n	801776e <VL53L1CB_ConfigProfile+0x2a>
 8017766:	e00c      	b.n	8017782 <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8017768:	f06f 0301 	mvn.w	r3, #1
 801776c:	e043      	b.n	80177f6 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 801776e:	7afb      	ldrb	r3, [r7, #11]
 8017770:	2b02      	cmp	r3, #2
 8017772:	d006      	beq.n	8017782 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8017774:	7afb      	ldrb	r3, [r7, #11]
 8017776:	2b03      	cmp	r3, #3
 8017778:	d003      	beq.n	8017782 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 801777a:	f06f 0301 	mvn.w	r3, #1
 801777e:	60fb      	str	r3, [r7, #12]
 8017780:	e038      	b.n	80177f4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8017782:	7afb      	ldrb	r3, [r7, #11]
 8017784:	4619      	mov	r1, r3
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	f7ed f970 	bl	8004a6c <VL53L1_SetDistanceMode>
 801778c:	4603      	mov	r3, r0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d003      	beq.n	801779a <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8017792:	f04f 33ff 	mov.w	r3, #4294967295
 8017796:	60fb      	str	r3, [r7, #12]
 8017798:	e02c      	b.n	80177f4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 801779e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80177a2:	fb02 f303 	mul.w	r3, r2, r3
 80177a6:	4619      	mov	r1, r3
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f7ed f9ed 	bl	8004b88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80177ae:	4603      	mov	r3, r0
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d003      	beq.n	80177bc <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 80177b4:	f04f 33ff 	mov.w	r3, #4294967295
 80177b8:	60fb      	str	r3, [r7, #12]
 80177ba:	e01b      	b.n	80177f4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	68db      	ldr	r3, [r3, #12]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	bf14      	ite	ne
 80177c4:	2301      	movne	r3, #1
 80177c6:	2300      	moveq	r3, #0
 80177c8:	b2db      	uxtb	r3, r3
 80177ca:	461a      	mov	r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80177d2:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	691b      	ldr	r3, [r3, #16]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	bf14      	ite	ne
 80177de:	2301      	movne	r3, #1
 80177e0:	2300      	moveq	r3, #0
 80177e2:	b2db      	uxtb	r3, r3
 80177e4:	461a      	mov	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80177ec:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 80177f0:	2300      	movs	r3, #0
 80177f2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80177f4:	68fb      	ldr	r3, [r7, #12]
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3710      	adds	r7, #16
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 80177fe:	b580      	push	{r7, lr}
 8017800:	b094      	sub	sp, #80	; 0x50
 8017802:	af00      	add	r7, sp, #0
 8017804:	6078      	str	r0, [r7, #4]
 8017806:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d002      	beq.n	8017814 <VL53L1CB_ConfigROI+0x16>
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d103      	bne.n	801781c <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017814:	f06f 0301 	mvn.w	r3, #1
 8017818:	64fb      	str	r3, [r7, #76]	; 0x4c
 801781a:	e01c      	b.n	8017856 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 801781c:	2301      	movs	r3, #1
 801781e:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	789b      	ldrb	r3, [r3, #2]
 8017824:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8017826:	683b      	ldr	r3, [r7, #0]
 8017828:	78db      	ldrb	r3, [r3, #3]
 801782a:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	785b      	ldrb	r3, [r3, #1]
 8017836:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8017838:	f107 0308 	add.w	r3, r7, #8
 801783c:	4619      	mov	r1, r3
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f7ed fca6 	bl	8005190 <VL53L1_SetROI>
 8017844:	4603      	mov	r3, r0
 8017846:	2b00      	cmp	r3, #0
 8017848:	d003      	beq.n	8017852 <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 801784a:	f04f 33ff 	mov.w	r3, #4294967295
 801784e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017850:	e001      	b.n	8017856 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8017852:	2300      	movs	r3, #0
 8017854:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8017856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8017858:	4618      	mov	r0, r3
 801785a:	3750      	adds	r7, #80	; 0x50
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}

08017860 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8017860:	b480      	push	{r7}
 8017862:	b083      	sub	sp, #12
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
 8017868:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 801786a:	f06f 0303 	mvn.w	r3, #3
}
 801786e:	4618      	mov	r0, r3
 8017870:	370c      	adds	r7, #12
 8017872:	46bd      	mov	sp, r7
 8017874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017878:	4770      	bx	lr

0801787a <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 801787a:	b580      	push	{r7, lr}
 801787c:	b084      	sub	sp, #16
 801787e:	af00      	add	r7, sp, #0
 8017880:	6078      	str	r0, [r7, #4]
 8017882:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d002      	beq.n	8017890 <VL53L1CB_GetDistance+0x16>
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d103      	bne.n	8017898 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017890:	f06f 0301 	mvn.w	r3, #1
 8017894:	60fb      	str	r3, [r7, #12]
 8017896:	e03a      	b.n	801790e <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801789e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d103      	bne.n	80178ae <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 80178a6:	f04f 33ff 	mov.w	r3, #4294967295
 80178aa:	60fb      	str	r3, [r7, #12]
 80178ac:	e02f      	b.n	801790e <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80178b4:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 80178b8:	2b01      	cmp	r3, #1
 80178ba:	d106      	bne.n	80178ca <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 80178bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f000 f92b 	bl	8017b1c <vl53l1cb_poll_for_measurement>
 80178c6:	60f8      	str	r0, [r7, #12]
 80178c8:	e004      	b.n	80178d4 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 80178ca:	2100      	movs	r1, #0
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f000 f925 	bl	8017b1c <vl53l1cb_poll_for_measurement>
 80178d2:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d119      	bne.n	801790e <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 80178da:	6839      	ldr	r1, [r7, #0]
 80178dc:	6878      	ldr	r0, [r7, #4]
 80178de:	f000 f94b 	bl	8017b78 <vl53l1cb_get_result>
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d003      	beq.n	80178f0 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 80178e8:	f04f 33ff 	mov.w	r3, #4294967295
 80178ec:	60fb      	str	r3, [r7, #12]
 80178ee:	e00e      	b.n	801790e <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80178f6:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 80178fa:	2b01      	cmp	r3, #1
 80178fc:	d105      	bne.n	801790a <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 80178fe:	6878      	ldr	r0, [r7, #4]
 8017900:	f7ed fdde 	bl	80054c0 <VL53L1_ClearInterruptAndStartMeasurement>
 8017904:	4603      	mov	r3, r0
 8017906:	60fb      	str	r3, [r7, #12]
 8017908:	e001      	b.n	801790e <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 801790a:	2300      	movs	r3, #0
 801790c:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 801790e:	68fb      	ldr	r3, [r7, #12]
}
 8017910:	4618      	mov	r0, r3
 8017912:	3710      	adds	r7, #16
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}

08017918 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b084      	sub	sp, #16
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d103      	bne.n	8017930 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017928:	f06f 0301 	mvn.w	r3, #1
 801792c:	60fb      	str	r3, [r7, #12]
 801792e:	e068      	b.n	8017a02 <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017936:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 801793a:	2b01      	cmp	r3, #1
 801793c:	d103      	bne.n	8017946 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 801793e:	f04f 33ff 	mov.w	r3, #4294967295
 8017942:	60fb      	str	r3, [r7, #12]
 8017944:	e05d      	b.n	8017a02 <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f7ed fcf6 	bl	8005338 <VL53L1_StartMeasurement>
 801794c:	4603      	mov	r3, r0
 801794e:	2b00      	cmp	r3, #0
 8017950:	d154      	bne.n	80179fc <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017958:	2201      	movs	r2, #1
 801795a:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 801795e:	2300      	movs	r3, #0
 8017960:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	3b01      	subs	r3, #1
 8017966:	2b03      	cmp	r3, #3
 8017968:	d83e      	bhi.n	80179e8 <VL53L1CB_Start+0xd0>
 801796a:	a201      	add	r2, pc, #4	; (adr r2, 8017970 <VL53L1CB_Start+0x58>)
 801796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017970:	08017981 	.word	0x08017981
 8017974:	0801799b 	.word	0x0801799b
 8017978:	080179b5 	.word	0x080179b5
 801797c:	080179cf 	.word	0x080179cf
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017986:	2201      	movs	r2, #1
 8017988:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017992:	2201      	movs	r2, #1
 8017994:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8017998:	e033      	b.n	8017a02 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80179a0:	2200      	movs	r2, #0
 80179a2:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80179ac:	2201      	movs	r2, #1
 80179ae:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80179b2:	e026      	b.n	8017a02 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80179ba:	2201      	movs	r2, #1
 80179bc:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80179c6:	2200      	movs	r2, #0
 80179c8:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80179cc:	e019      	b.n	8017a02 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80179d4:	2200      	movs	r2, #0
 80179d6:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80179e0:	2200      	movs	r2, #0
 80179e2:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80179e6:	e00c      	b.n	8017a02 <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80179ee:	2200      	movs	r2, #0
 80179f0:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 80179f4:	f06f 0301 	mvn.w	r3, #1
 80179f8:	60fb      	str	r3, [r7, #12]
      break;
 80179fa:	e002      	b.n	8017a02 <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 80179fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017a00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017a02:	68fb      	ldr	r3, [r7, #12]
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3710      	adds	r7, #16
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b084      	sub	sp, #16
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d103      	bne.n	8017a22 <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017a1a:	f06f 0301 	mvn.w	r3, #1
 8017a1e:	60fb      	str	r3, [r7, #12]
 8017a20:	e01c      	b.n	8017a5c <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017a28:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d103      	bne.n	8017a38 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8017a30:	f04f 33ff 	mov.w	r3, #4294967295
 8017a34:	60fb      	str	r3, [r7, #12]
 8017a36:	e011      	b.n	8017a5c <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7ed fd1d 	bl	8005478 <VL53L1_StopMeasurement>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d108      	bne.n	8017a56 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8017a50:	2300      	movs	r3, #0
 8017a52:	60fb      	str	r3, [r7, #12]
 8017a54:	e002      	b.n	8017a5c <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8017a56:	f04f 33ff 	mov.w	r3, #4294967295
 8017a5a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	3710      	adds	r7, #16
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd80      	pop	{r7, pc}

08017a66 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8017a66:	b580      	push	{r7, lr}
 8017a68:	b084      	sub	sp, #16
 8017a6a:	af00      	add	r7, sp, #0
 8017a6c:	6078      	str	r0, [r7, #4]
 8017a6e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d103      	bne.n	8017a7e <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017a76:	f06f 0301 	mvn.w	r3, #1
 8017a7a:	60fb      	str	r3, [r7, #12]
 8017a7c:	e012      	b.n	8017aa4 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	b2db      	uxtb	r3, r3
 8017a82:	4619      	mov	r1, r3
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	f7ec fdcf 	bl	8004628 <VL53L1_SetDeviceAddress>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d003      	beq.n	8017a98 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8017a90:	f04f 33ff 	mov.w	r3, #4294967295
 8017a94:	60fb      	str	r3, [r7, #12]
 8017a96:	e005      	b.n	8017aa4 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	b29a      	uxth	r2, r3
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3710      	adds	r7, #16
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}

08017aae <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8017aae:	b480      	push	{r7}
 8017ab0:	b085      	sub	sp, #20
 8017ab2:	af00      	add	r7, sp, #0
 8017ab4:	6078      	str	r0, [r7, #4]
 8017ab6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d002      	beq.n	8017ac4 <VL53L1CB_GetAddress+0x16>
 8017abe:	683b      	ldr	r3, [r7, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d103      	bne.n	8017acc <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017ac4:	f06f 0301 	mvn.w	r3, #1
 8017ac8:	60fb      	str	r3, [r7, #12]
 8017aca:	e006      	b.n	8017ada <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	891b      	ldrh	r3, [r3, #8]
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017ada:	68fb      	ldr	r3, [r7, #12]
}
 8017adc:	4618      	mov	r0, r3
 8017ade:	3714      	adds	r7, #20
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae6:	4770      	bx	lr

08017ae8 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8017ae8:	b480      	push	{r7}
 8017aea:	b083      	sub	sp, #12
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
 8017af0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8017af2:	f06f 0303 	mvn.w	r3, #3
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	370c      	adds	r7, #12
 8017afa:	46bd      	mov	sp, r7
 8017afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b00:	4770      	bx	lr

08017b02 <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 8017b02:	b480      	push	{r7}
 8017b04:	b083      	sub	sp, #12
 8017b06:	af00      	add	r7, sp, #0
 8017b08:	6078      	str	r0, [r7, #4]
 8017b0a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8017b0c:	f06f 0303 	mvn.w	r3, #3
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	370c      	adds	r7, #12
 8017b14:	46bd      	mov	sp, r7
 8017b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1a:	4770      	bx	lr

08017b1c <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b084      	sub	sp, #16
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8017b26:	2300      	movs	r3, #0
 8017b28:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d102      	bne.n	8017b36 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8017b30:	f06f 0301 	mvn.w	r3, #1
 8017b34:	e01b      	b.n	8017b6e <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	695b      	ldr	r3, [r3, #20]
 8017b3a:	4798      	blx	r3
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8017b40:	f107 030b 	add.w	r3, r7, #11
 8017b44:	4619      	mov	r1, r3
 8017b46:	6878      	ldr	r0, [r7, #4]
 8017b48:	f7ed fcd0 	bl	80054ec <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8017b4c:	7afb      	ldrb	r3, [r7, #11]
 8017b4e:	2b01      	cmp	r3, #1
 8017b50:	d101      	bne.n	8017b56 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 8017b52:	2300      	movs	r3, #0
 8017b54:	e00b      	b.n	8017b6e <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	695b      	ldr	r3, [r3, #20]
 8017b5a:	4798      	blx	r3
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	461a      	mov	r2, r3
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	1ad3      	subs	r3, r2, r3
 8017b64:	683a      	ldr	r2, [r7, #0]
 8017b66:	429a      	cmp	r2, r3
 8017b68:	d8ea      	bhi.n	8017b40 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8017b6a:	f06f 0302 	mvn.w	r3, #2
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3710      	adds	r7, #16
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}
	...

08017b78 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8017b78:	b590      	push	{r4, r7, lr}
 8017b7a:	b089      	sub	sp, #36	; 0x24
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d002      	beq.n	8017b8e <vl53l1cb_get_result+0x16>
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d103      	bne.n	8017b96 <vl53l1cb_get_result+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017b8e:	f06f 0301 	mvn.w	r3, #1
 8017b92:	61fb      	str	r3, [r7, #28]
 8017b94:	e100      	b.n	8017d98 <vl53l1cb_get_result+0x220>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8017b96:	4983      	ldr	r1, [pc, #524]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f7ee fb85 	bl	80062a8 <VL53L1_GetMultiRangingData>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d003      	beq.n	8017bac <vl53l1cb_get_result+0x34>
  {
    ret = VL53L1CB_ERROR;
 8017ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ba8:	61fb      	str	r3, [r7, #28]
 8017baa:	e0f5      	b.n	8017d98 <vl53l1cb_get_result+0x220>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8017bac:	2300      	movs	r3, #0
 8017bae:	76fb      	strb	r3, [r7, #27]
 8017bb0:	e0ec      	b.n	8017d8c <vl53l1cb_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8017bb2:	4b7c      	ldr	r3, [pc, #496]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017bb4:	799b      	ldrb	r3, [r3, #6]
 8017bb6:	7efa      	ldrb	r2, [r7, #27]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	6839      	ldr	r1, [r7, #0]
 8017bbc:	4613      	mov	r3, r2
 8017bbe:	011b      	lsls	r3, r3, #4
 8017bc0:	4413      	add	r3, r2
 8017bc2:	009b      	lsls	r3, r3, #2
 8017bc4:	440b      	add	r3, r1
 8017bc6:	3304      	adds	r3, #4
 8017bc8:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8017bca:	2300      	movs	r3, #0
 8017bcc:	76bb      	strb	r3, [r7, #26]
 8017bce:	e0d4      	b.n	8017d7a <vl53l1cb_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8017bd0:	7eba      	ldrb	r2, [r7, #26]
 8017bd2:	4974      	ldr	r1, [pc, #464]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017bd4:	4613      	mov	r3, r2
 8017bd6:	00db      	lsls	r3, r3, #3
 8017bd8:	1a9b      	subs	r3, r3, r2
 8017bda:	009b      	lsls	r3, r3, #2
 8017bdc:	440b      	add	r3, r1
 8017bde:	331c      	adds	r3, #28
 8017be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	da0b      	bge.n	8017c00 <vl53l1cb_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8017be8:	7efa      	ldrb	r2, [r7, #27]
 8017bea:	7eb8      	ldrb	r0, [r7, #26]
 8017bec:	6839      	ldr	r1, [r7, #0]
 8017bee:	4613      	mov	r3, r2
 8017bf0:	011b      	lsls	r3, r3, #4
 8017bf2:	4413      	add	r3, r2
 8017bf4:	4403      	add	r3, r0
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	440b      	add	r3, r1
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	609a      	str	r2, [r3, #8]
 8017bfe:	e014      	b.n	8017c2a <vl53l1cb_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8017c00:	7eba      	ldrb	r2, [r7, #26]
 8017c02:	4968      	ldr	r1, [pc, #416]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017c04:	4613      	mov	r3, r2
 8017c06:	00db      	lsls	r3, r3, #3
 8017c08:	1a9b      	subs	r3, r3, r2
 8017c0a:	009b      	lsls	r3, r3, #2
 8017c0c:	440b      	add	r3, r1
 8017c0e:	331c      	adds	r3, #28
 8017c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c14:	7efa      	ldrb	r2, [r7, #27]
 8017c16:	7eb8      	ldrb	r0, [r7, #26]
 8017c18:	461c      	mov	r4, r3
 8017c1a:	6839      	ldr	r1, [r7, #0]
 8017c1c:	4613      	mov	r3, r2
 8017c1e:	011b      	lsls	r3, r3, #4
 8017c20:	4413      	add	r3, r2
 8017c22:	4403      	add	r3, r0
 8017c24:	009b      	lsls	r3, r3, #2
 8017c26:	440b      	add	r3, r1
 8017c28:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017c30:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8017c34:	2b01      	cmp	r3, #1
 8017c36:	d132      	bne.n	8017c9e <vl53l1cb_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8017c38:	7eba      	ldrb	r2, [r7, #26]
 8017c3a:	495a      	ldr	r1, [pc, #360]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017c3c:	4613      	mov	r3, r2
 8017c3e:	00db      	lsls	r3, r3, #3
 8017c40:	1a9b      	subs	r3, r3, r2
 8017c42:	009b      	lsls	r3, r3, #2
 8017c44:	440b      	add	r3, r1
 8017c46:	3314      	adds	r3, #20
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	ee07 3a90 	vmov	s15, r3
 8017c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017c52:	eddf 6a55 	vldr	s13, [pc, #340]	; 8017da8 <vl53l1cb_get_result+0x230>
 8017c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017c5a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8017dac <vl53l1cb_get_result+0x234>
 8017c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017c62:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8017c66:	4b4f      	ldr	r3, [pc, #316]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017c68:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8017c6c:	0a1b      	lsrs	r3, r3, #8
 8017c6e:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8017c70:	8a7b      	ldrh	r3, [r7, #18]
 8017c72:	ee07 3a90 	vmov	s15, r3
 8017c76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017c7a:	7efa      	ldrb	r2, [r7, #27]
 8017c7c:	7eb8      	ldrb	r0, [r7, #26]
 8017c7e:	edd7 6a05 	vldr	s13, [r7, #20]
 8017c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c86:	6839      	ldr	r1, [r7, #0]
 8017c88:	4613      	mov	r3, r2
 8017c8a:	011b      	lsls	r3, r3, #4
 8017c8c:	4413      	add	r3, r2
 8017c8e:	4403      	add	r3, r0
 8017c90:	3308      	adds	r3, #8
 8017c92:	009b      	lsls	r3, r3, #2
 8017c94:	440b      	add	r3, r1
 8017c96:	3308      	adds	r3, #8
 8017c98:	edc3 7a00 	vstr	s15, [r3]
 8017c9c:	e00d      	b.n	8017cba <vl53l1cb_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8017c9e:	7efa      	ldrb	r2, [r7, #27]
 8017ca0:	7eb8      	ldrb	r0, [r7, #26]
 8017ca2:	6839      	ldr	r1, [r7, #0]
 8017ca4:	4613      	mov	r3, r2
 8017ca6:	011b      	lsls	r3, r3, #4
 8017ca8:	4413      	add	r3, r2
 8017caa:	4403      	add	r3, r0
 8017cac:	3308      	adds	r3, #8
 8017cae:	009b      	lsls	r3, r3, #2
 8017cb0:	440b      	add	r3, r1
 8017cb2:	3308      	adds	r3, #8
 8017cb4:	f04f 0200 	mov.w	r2, #0
 8017cb8:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017cc0:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8017cc4:	2b01      	cmp	r3, #1
 8017cc6:	d132      	bne.n	8017d2e <vl53l1cb_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8017cc8:	7eba      	ldrb	r2, [r7, #26]
 8017cca:	4936      	ldr	r1, [pc, #216]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017ccc:	4613      	mov	r3, r2
 8017cce:	00db      	lsls	r3, r3, #3
 8017cd0:	1a9b      	subs	r3, r3, r2
 8017cd2:	009b      	lsls	r3, r3, #2
 8017cd4:	440b      	add	r3, r1
 8017cd6:	3310      	adds	r3, #16
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	ee07 3a90 	vmov	s15, r3
 8017cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017ce2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8017da8 <vl53l1cb_get_result+0x230>
 8017ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017cea:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8017dac <vl53l1cb_get_result+0x234>
 8017cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017cf2:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8017cf6:	4b2b      	ldr	r3, [pc, #172]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017cf8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8017cfc:	0a1b      	lsrs	r3, r3, #8
 8017cfe:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8017d00:	8a7b      	ldrh	r3, [r7, #18]
 8017d02:	ee07 3a90 	vmov	s15, r3
 8017d06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017d0a:	7efa      	ldrb	r2, [r7, #27]
 8017d0c:	7eb8      	ldrb	r0, [r7, #26]
 8017d0e:	edd7 6a03 	vldr	s13, [r7, #12]
 8017d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017d16:	6839      	ldr	r1, [r7, #0]
 8017d18:	4613      	mov	r3, r2
 8017d1a:	011b      	lsls	r3, r3, #4
 8017d1c:	4413      	add	r3, r2
 8017d1e:	4403      	add	r3, r0
 8017d20:	330c      	adds	r3, #12
 8017d22:	009b      	lsls	r3, r3, #2
 8017d24:	440b      	add	r3, r1
 8017d26:	3308      	adds	r3, #8
 8017d28:	edc3 7a00 	vstr	s15, [r3]
 8017d2c:	e00d      	b.n	8017d4a <vl53l1cb_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8017d2e:	7efa      	ldrb	r2, [r7, #27]
 8017d30:	7eb8      	ldrb	r0, [r7, #26]
 8017d32:	6839      	ldr	r1, [r7, #0]
 8017d34:	4613      	mov	r3, r2
 8017d36:	011b      	lsls	r3, r3, #4
 8017d38:	4413      	add	r3, r2
 8017d3a:	4403      	add	r3, r0
 8017d3c:	330c      	adds	r3, #12
 8017d3e:	009b      	lsls	r3, r3, #2
 8017d40:	440b      	add	r3, r1
 8017d42:	3308      	adds	r3, #8
 8017d44:	f04f 0200 	mov.w	r2, #0
 8017d48:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8017d4a:	7eba      	ldrb	r2, [r7, #26]
 8017d4c:	4915      	ldr	r1, [pc, #84]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017d4e:	4613      	mov	r3, r2
 8017d50:	00db      	lsls	r3, r3, #3
 8017d52:	1a9b      	subs	r3, r3, r2
 8017d54:	009b      	lsls	r3, r3, #2
 8017d56:	440b      	add	r3, r1
 8017d58:	331f      	adds	r3, #31
 8017d5a:	781b      	ldrb	r3, [r3, #0]
 8017d5c:	7efa      	ldrb	r2, [r7, #27]
 8017d5e:	7eb8      	ldrb	r0, [r7, #26]
 8017d60:	461c      	mov	r4, r3
 8017d62:	6839      	ldr	r1, [r7, #0]
 8017d64:	4613      	mov	r3, r2
 8017d66:	011b      	lsls	r3, r3, #4
 8017d68:	4413      	add	r3, r2
 8017d6a:	4403      	add	r3, r0
 8017d6c:	3304      	adds	r3, #4
 8017d6e:	009b      	lsls	r3, r3, #2
 8017d70:	440b      	add	r3, r1
 8017d72:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8017d74:	7ebb      	ldrb	r3, [r7, #26]
 8017d76:	3301      	adds	r3, #1
 8017d78:	76bb      	strb	r3, [r7, #26]
 8017d7a:	4b0a      	ldr	r3, [pc, #40]	; (8017da4 <vl53l1cb_get_result+0x22c>)
 8017d7c:	799b      	ldrb	r3, [r3, #6]
 8017d7e:	7eba      	ldrb	r2, [r7, #26]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	f4ff af25 	bcc.w	8017bd0 <vl53l1cb_get_result+0x58>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8017d86:	7efb      	ldrb	r3, [r7, #27]
 8017d88:	3301      	adds	r3, #1
 8017d8a:	76fb      	strb	r3, [r7, #27]
 8017d8c:	7efb      	ldrb	r3, [r7, #27]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f43f af0f 	beq.w	8017bb2 <vl53l1cb_get_result+0x3a>
      }
    }

    ret = VL53L1CB_OK;
 8017d94:	2300      	movs	r3, #0
 8017d96:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8017d98:	69fb      	ldr	r3, [r7, #28]
}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	3724      	adds	r7, #36	; 0x24
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd90      	pop	{r4, r7, pc}
 8017da2:	bf00      	nop
 8017da4:	20008860 	.word	0x20008860
 8017da8:	47800000 	.word	0x47800000
 8017dac:	447a0000 	.word	0x447a0000

08017db0 <LL_AHB2_GRP1_EnableClock>:
{
 8017db0:	b480      	push	{r7}
 8017db2:	b085      	sub	sp, #20
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8017db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	4313      	orrs	r3, r2
 8017dc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8017dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	4013      	ands	r3, r2
 8017dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
}
 8017dd6:	bf00      	nop
 8017dd8:	3714      	adds	r7, #20
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de0:	4770      	bx	lr

08017de2 <LL_APB2_GRP1_EnableClock>:
{
 8017de2:	b480      	push	{r7}
 8017de4:	b085      	sub	sp, #20
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8017dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	4313      	orrs	r3, r2
 8017df8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8017dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	4013      	ands	r3, r2
 8017e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017e06:	68fb      	ldr	r3, [r7, #12]
}
 8017e08:	bf00      	nop
 8017e0a:	3714      	adds	r7, #20
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr

08017e14 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b084      	sub	sp, #16
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8017e22:	79fb      	ldrb	r3, [r7, #7]
 8017e24:	2b01      	cmp	r3, #1
 8017e26:	d903      	bls.n	8017e30 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017e28:	f06f 0301 	mvn.w	r3, #1
 8017e2c:	60fb      	str	r3, [r7, #12]
 8017e2e:	e022      	b.n	8017e76 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8017e30:	79fa      	ldrb	r2, [r7, #7]
 8017e32:	79fb      	ldrb	r3, [r7, #7]
 8017e34:	4912      	ldr	r1, [pc, #72]	; (8017e80 <BSP_COM_Init+0x6c>)
 8017e36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8017e3a:	4912      	ldr	r1, [pc, #72]	; (8017e84 <BSP_COM_Init+0x70>)
 8017e3c:	2094      	movs	r0, #148	; 0x94
 8017e3e:	fb00 f303 	mul.w	r3, r0, r3
 8017e42:	440b      	add	r3, r1
 8017e44:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8017e46:	79fb      	ldrb	r3, [r7, #7]
 8017e48:	2294      	movs	r2, #148	; 0x94
 8017e4a:	fb02 f303 	mul.w	r3, r2, r3
 8017e4e:	4a0d      	ldr	r2, [pc, #52]	; (8017e84 <BSP_COM_Init+0x70>)
 8017e50:	4413      	add	r3, r2
 8017e52:	4618      	mov	r0, r3
 8017e54:	f000 f86a 	bl	8017f2c <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8017e58:	79fb      	ldrb	r3, [r7, #7]
 8017e5a:	2294      	movs	r2, #148	; 0x94
 8017e5c:	fb02 f303 	mul.w	r3, r2, r3
 8017e60:	4a08      	ldr	r2, [pc, #32]	; (8017e84 <BSP_COM_Init+0x70>)
 8017e62:	4413      	add	r3, r2
 8017e64:	4618      	mov	r0, r3
 8017e66:	f000 f80f 	bl	8017e88 <MX_USART1_UART_Init>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d002      	beq.n	8017e76 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8017e70:	f06f 0303 	mvn.w	r3, #3
 8017e74:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8017e76:	68fb      	ldr	r3, [r7, #12]
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	3710      	adds	r7, #16
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}
 8017e80:	20000080 	.word	0x20000080
 8017e84:	200088e0 	.word	0x200088e0

08017e88 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b084      	sub	sp, #16
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8017e90:	2300      	movs	r3, #0
 8017e92:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	4a24      	ldr	r2, [pc, #144]	; (8017f28 <MX_USART1_UART_Init+0xa0>)
 8017e98:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017ea0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ea8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	2200      	movs	r2, #0
 8017eae:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	220c      	movs	r2, #12
 8017eba:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	2200      	movs	r2, #0
 8017ecc:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f004 f824 	bl	801bf28 <HAL_UART_Init>
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d001      	beq.n	8017eea <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017eea:	2100      	movs	r1, #0
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f005 fb49 	bl	801d584 <HAL_UARTEx_SetTxFifoThreshold>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d001      	beq.n	8017efc <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8017ef8:	2301      	movs	r3, #1
 8017efa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017efc:	2100      	movs	r1, #0
 8017efe:	6878      	ldr	r0, [r7, #4]
 8017f00:	f005 fb7e 	bl	801d600 <HAL_UARTEx_SetRxFifoThreshold>
 8017f04:	4603      	mov	r3, r0
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d001      	beq.n	8017f0e <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8017f0e:	6878      	ldr	r0, [r7, #4]
 8017f10:	f005 faff 	bl	801d512 <HAL_UARTEx_DisableFifoMode>
 8017f14:	4603      	mov	r3, r0
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d001      	beq.n	8017f1e <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8017f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	3710      	adds	r7, #16
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	40013800 	.word	0x40013800

08017f2c <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b09c      	sub	sp, #112	; 0x70
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017f34:	f107 030c 	add.w	r3, r7, #12
 8017f38:	2250      	movs	r2, #80	; 0x50
 8017f3a:	2100      	movs	r1, #0
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f007 fad5 	bl	801f4ec <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017f42:	2301      	movs	r3, #1
 8017f44:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8017f46:	2300      	movs	r3, #0
 8017f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8017f4a:	f107 030c 	add.w	r3, r7, #12
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f003 fc82 	bl	801b858 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017f54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017f58:	f7ff ff43 	bl	8017de2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017f5c:	2002      	movs	r0, #2
 8017f5e:	f7ff ff27 	bl	8017db0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8017f62:	2340      	movs	r3, #64	; 0x40
 8017f64:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f66:	2302      	movs	r3, #2
 8017f68:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017f6a:	2301      	movs	r3, #1
 8017f6c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f6e:	2300      	movs	r3, #0
 8017f70:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8017f72:	2307      	movs	r3, #7
 8017f74:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8017f76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017f7a:	4619      	mov	r1, r3
 8017f7c:	480b      	ldr	r0, [pc, #44]	; (8017fac <USART1_MspInit+0x80>)
 8017f7e:	f000 fd03 	bl	8018988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8017f82:	2380      	movs	r3, #128	; 0x80
 8017f84:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f86:	2302      	movs	r3, #2
 8017f88:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8017f92:	2307      	movs	r3, #7
 8017f94:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8017f96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017f9a:	4619      	mov	r1, r3
 8017f9c:	4803      	ldr	r0, [pc, #12]	; (8017fac <USART1_MspInit+0x80>)
 8017f9e:	f000 fcf3 	bl	8018988 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8017fa2:	bf00      	nop
 8017fa4:	3770      	adds	r7, #112	; 0x70
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd80      	pop	{r7, pc}
 8017faa:	bf00      	nop
 8017fac:	48000400 	.word	0x48000400

08017fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b082      	sub	sp, #8
 8017fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017fba:	4b0c      	ldr	r3, [pc, #48]	; (8017fec <HAL_Init+0x3c>)
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	4a0b      	ldr	r2, [pc, #44]	; (8017fec <HAL_Init+0x3c>)
 8017fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017fc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017fc6:	2003      	movs	r0, #3
 8017fc8:	f000 f96c 	bl	80182a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8017fcc:	2000      	movs	r0, #0
 8017fce:	f000 f80f 	bl	8017ff0 <HAL_InitTick>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d002      	beq.n	8017fde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	71fb      	strb	r3, [r7, #7]
 8017fdc:	e001      	b.n	8017fe2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8017fde:	f7eb f9a8 	bl	8003332 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8017fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	3708      	adds	r7, #8
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}
 8017fec:	58004000 	.word	0x58004000

08017ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b084      	sub	sp, #16
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8017ffc:	4b17      	ldr	r3, [pc, #92]	; (801805c <HAL_InitTick+0x6c>)
 8017ffe:	781b      	ldrb	r3, [r3, #0]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d024      	beq.n	801804e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8018004:	f003 f988 	bl	801b318 <HAL_RCC_GetHCLKFreq>
 8018008:	4602      	mov	r2, r0
 801800a:	4b14      	ldr	r3, [pc, #80]	; (801805c <HAL_InitTick+0x6c>)
 801800c:	781b      	ldrb	r3, [r3, #0]
 801800e:	4619      	mov	r1, r3
 8018010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018014:	fbb3 f3f1 	udiv	r3, r3, r1
 8018018:	fbb2 f3f3 	udiv	r3, r2, r3
 801801c:	4618      	mov	r0, r3
 801801e:	f000 f974 	bl	801830a <HAL_SYSTICK_Config>
 8018022:	4603      	mov	r3, r0
 8018024:	2b00      	cmp	r3, #0
 8018026:	d10f      	bne.n	8018048 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	2b0f      	cmp	r3, #15
 801802c:	d809      	bhi.n	8018042 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801802e:	2200      	movs	r2, #0
 8018030:	6879      	ldr	r1, [r7, #4]
 8018032:	f04f 30ff 	mov.w	r0, #4294967295
 8018036:	f000 f940 	bl	80182ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801803a:	4a09      	ldr	r2, [pc, #36]	; (8018060 <HAL_InitTick+0x70>)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6013      	str	r3, [r2, #0]
 8018040:	e007      	b.n	8018052 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8018042:	2301      	movs	r3, #1
 8018044:	73fb      	strb	r3, [r7, #15]
 8018046:	e004      	b.n	8018052 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8018048:	2301      	movs	r3, #1
 801804a:	73fb      	strb	r3, [r7, #15]
 801804c:	e001      	b.n	8018052 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 801804e:	2301      	movs	r3, #1
 8018050:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8018052:	7bfb      	ldrb	r3, [r7, #15]
}
 8018054:	4618      	mov	r0, r3
 8018056:	3710      	adds	r7, #16
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}
 801805c:	20000088 	.word	0x20000088
 8018060:	20000084 	.word	0x20000084

08018064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018064:	b480      	push	{r7}
 8018066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8018068:	4b06      	ldr	r3, [pc, #24]	; (8018084 <HAL_IncTick+0x20>)
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	461a      	mov	r2, r3
 801806e:	4b06      	ldr	r3, [pc, #24]	; (8018088 <HAL_IncTick+0x24>)
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	4413      	add	r3, r2
 8018074:	4a04      	ldr	r2, [pc, #16]	; (8018088 <HAL_IncTick+0x24>)
 8018076:	6013      	str	r3, [r2, #0]
}
 8018078:	bf00      	nop
 801807a:	46bd      	mov	sp, r7
 801807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop
 8018084:	20000088 	.word	0x20000088
 8018088:	20008974 	.word	0x20008974

0801808c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801808c:	b480      	push	{r7}
 801808e:	af00      	add	r7, sp, #0
  return uwTick;
 8018090:	4b03      	ldr	r3, [pc, #12]	; (80180a0 <HAL_GetTick+0x14>)
 8018092:	681b      	ldr	r3, [r3, #0]
}
 8018094:	4618      	mov	r0, r3
 8018096:	46bd      	mov	sp, r7
 8018098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801809c:	4770      	bx	lr
 801809e:	bf00      	nop
 80180a0:	20008974 	.word	0x20008974

080180a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80180a4:	b480      	push	{r7}
 80180a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80180a8:	4b03      	ldr	r3, [pc, #12]	; (80180b8 <HAL_GetTickPrio+0x14>)
 80180aa:	681b      	ldr	r3, [r3, #0]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr
 80180b6:	bf00      	nop
 80180b8:	20000084 	.word	0x20000084

080180bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80180c4:	f7ff ffe2 	bl	801808c <HAL_GetTick>
 80180c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180d4:	d005      	beq.n	80180e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80180d6:	4b0a      	ldr	r3, [pc, #40]	; (8018100 <HAL_Delay+0x44>)
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	461a      	mov	r2, r3
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	4413      	add	r3, r2
 80180e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80180e2:	bf00      	nop
 80180e4:	f7ff ffd2 	bl	801808c <HAL_GetTick>
 80180e8:	4602      	mov	r2, r0
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	1ad3      	subs	r3, r2, r3
 80180ee:	68fa      	ldr	r2, [r7, #12]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d8f7      	bhi.n	80180e4 <HAL_Delay+0x28>
  {
  }
}
 80180f4:	bf00      	nop
 80180f6:	bf00      	nop
 80180f8:	3710      	adds	r7, #16
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	20000088 	.word	0x20000088

08018104 <__NVIC_SetPriorityGrouping>:
{
 8018104:	b480      	push	{r7}
 8018106:	b085      	sub	sp, #20
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	f003 0307 	and.w	r3, r3, #7
 8018112:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018114:	4b0c      	ldr	r3, [pc, #48]	; (8018148 <__NVIC_SetPriorityGrouping+0x44>)
 8018116:	68db      	ldr	r3, [r3, #12]
 8018118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801811a:	68ba      	ldr	r2, [r7, #8]
 801811c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018120:	4013      	ands	r3, r2
 8018122:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801812c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018136:	4a04      	ldr	r2, [pc, #16]	; (8018148 <__NVIC_SetPriorityGrouping+0x44>)
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	60d3      	str	r3, [r2, #12]
}
 801813c:	bf00      	nop
 801813e:	3714      	adds	r7, #20
 8018140:	46bd      	mov	sp, r7
 8018142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018146:	4770      	bx	lr
 8018148:	e000ed00 	.word	0xe000ed00

0801814c <__NVIC_GetPriorityGrouping>:
{
 801814c:	b480      	push	{r7}
 801814e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018150:	4b04      	ldr	r3, [pc, #16]	; (8018164 <__NVIC_GetPriorityGrouping+0x18>)
 8018152:	68db      	ldr	r3, [r3, #12]
 8018154:	0a1b      	lsrs	r3, r3, #8
 8018156:	f003 0307 	and.w	r3, r3, #7
}
 801815a:	4618      	mov	r0, r3
 801815c:	46bd      	mov	sp, r7
 801815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018162:	4770      	bx	lr
 8018164:	e000ed00 	.word	0xe000ed00

08018168 <__NVIC_EnableIRQ>:
{
 8018168:	b480      	push	{r7}
 801816a:	b083      	sub	sp, #12
 801816c:	af00      	add	r7, sp, #0
 801816e:	4603      	mov	r3, r0
 8018170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018176:	2b00      	cmp	r3, #0
 8018178:	db0b      	blt.n	8018192 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801817a:	79fb      	ldrb	r3, [r7, #7]
 801817c:	f003 021f 	and.w	r2, r3, #31
 8018180:	4907      	ldr	r1, [pc, #28]	; (80181a0 <__NVIC_EnableIRQ+0x38>)
 8018182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018186:	095b      	lsrs	r3, r3, #5
 8018188:	2001      	movs	r0, #1
 801818a:	fa00 f202 	lsl.w	r2, r0, r2
 801818e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018192:	bf00      	nop
 8018194:	370c      	adds	r7, #12
 8018196:	46bd      	mov	sp, r7
 8018198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819c:	4770      	bx	lr
 801819e:	bf00      	nop
 80181a0:	e000e100 	.word	0xe000e100

080181a4 <__NVIC_SetPriority>:
{
 80181a4:	b480      	push	{r7}
 80181a6:	b083      	sub	sp, #12
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	4603      	mov	r3, r0
 80181ac:	6039      	str	r1, [r7, #0]
 80181ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80181b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	db0a      	blt.n	80181ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80181b8:	683b      	ldr	r3, [r7, #0]
 80181ba:	b2da      	uxtb	r2, r3
 80181bc:	490c      	ldr	r1, [pc, #48]	; (80181f0 <__NVIC_SetPriority+0x4c>)
 80181be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80181c2:	0112      	lsls	r2, r2, #4
 80181c4:	b2d2      	uxtb	r2, r2
 80181c6:	440b      	add	r3, r1
 80181c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80181cc:	e00a      	b.n	80181e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	b2da      	uxtb	r2, r3
 80181d2:	4908      	ldr	r1, [pc, #32]	; (80181f4 <__NVIC_SetPriority+0x50>)
 80181d4:	79fb      	ldrb	r3, [r7, #7]
 80181d6:	f003 030f 	and.w	r3, r3, #15
 80181da:	3b04      	subs	r3, #4
 80181dc:	0112      	lsls	r2, r2, #4
 80181de:	b2d2      	uxtb	r2, r2
 80181e0:	440b      	add	r3, r1
 80181e2:	761a      	strb	r2, [r3, #24]
}
 80181e4:	bf00      	nop
 80181e6:	370c      	adds	r7, #12
 80181e8:	46bd      	mov	sp, r7
 80181ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ee:	4770      	bx	lr
 80181f0:	e000e100 	.word	0xe000e100
 80181f4:	e000ed00 	.word	0xe000ed00

080181f8 <NVIC_EncodePriority>:
{
 80181f8:	b480      	push	{r7}
 80181fa:	b089      	sub	sp, #36	; 0x24
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	60f8      	str	r0, [r7, #12]
 8018200:	60b9      	str	r1, [r7, #8]
 8018202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	f003 0307 	and.w	r3, r3, #7
 801820a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801820c:	69fb      	ldr	r3, [r7, #28]
 801820e:	f1c3 0307 	rsb	r3, r3, #7
 8018212:	2b04      	cmp	r3, #4
 8018214:	bf28      	it	cs
 8018216:	2304      	movcs	r3, #4
 8018218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801821a:	69fb      	ldr	r3, [r7, #28]
 801821c:	3304      	adds	r3, #4
 801821e:	2b06      	cmp	r3, #6
 8018220:	d902      	bls.n	8018228 <NVIC_EncodePriority+0x30>
 8018222:	69fb      	ldr	r3, [r7, #28]
 8018224:	3b03      	subs	r3, #3
 8018226:	e000      	b.n	801822a <NVIC_EncodePriority+0x32>
 8018228:	2300      	movs	r3, #0
 801822a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801822c:	f04f 32ff 	mov.w	r2, #4294967295
 8018230:	69bb      	ldr	r3, [r7, #24]
 8018232:	fa02 f303 	lsl.w	r3, r2, r3
 8018236:	43da      	mvns	r2, r3
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	401a      	ands	r2, r3
 801823c:	697b      	ldr	r3, [r7, #20]
 801823e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018240:	f04f 31ff 	mov.w	r1, #4294967295
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	fa01 f303 	lsl.w	r3, r1, r3
 801824a:	43d9      	mvns	r1, r3
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018250:	4313      	orrs	r3, r2
}
 8018252:	4618      	mov	r0, r3
 8018254:	3724      	adds	r7, #36	; 0x24
 8018256:	46bd      	mov	sp, r7
 8018258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825c:	4770      	bx	lr
	...

08018260 <SysTick_Config>:
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	3b01      	subs	r3, #1
 801826c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018270:	d301      	bcc.n	8018276 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8018272:	2301      	movs	r3, #1
 8018274:	e00f      	b.n	8018296 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018276:	4a0a      	ldr	r2, [pc, #40]	; (80182a0 <SysTick_Config+0x40>)
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	3b01      	subs	r3, #1
 801827c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801827e:	210f      	movs	r1, #15
 8018280:	f04f 30ff 	mov.w	r0, #4294967295
 8018284:	f7ff ff8e 	bl	80181a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018288:	4b05      	ldr	r3, [pc, #20]	; (80182a0 <SysTick_Config+0x40>)
 801828a:	2200      	movs	r2, #0
 801828c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801828e:	4b04      	ldr	r3, [pc, #16]	; (80182a0 <SysTick_Config+0x40>)
 8018290:	2207      	movs	r2, #7
 8018292:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8018294:	2300      	movs	r3, #0
}
 8018296:	4618      	mov	r0, r3
 8018298:	3708      	adds	r7, #8
 801829a:	46bd      	mov	sp, r7
 801829c:	bd80      	pop	{r7, pc}
 801829e:	bf00      	nop
 80182a0:	e000e010 	.word	0xe000e010

080182a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	f7ff ff29 	bl	8018104 <__NVIC_SetPriorityGrouping>
}
 80182b2:	bf00      	nop
 80182b4:	3708      	adds	r7, #8
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}

080182ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80182ba:	b580      	push	{r7, lr}
 80182bc:	b086      	sub	sp, #24
 80182be:	af00      	add	r7, sp, #0
 80182c0:	4603      	mov	r3, r0
 80182c2:	60b9      	str	r1, [r7, #8]
 80182c4:	607a      	str	r2, [r7, #4]
 80182c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80182c8:	f7ff ff40 	bl	801814c <__NVIC_GetPriorityGrouping>
 80182cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	68b9      	ldr	r1, [r7, #8]
 80182d2:	6978      	ldr	r0, [r7, #20]
 80182d4:	f7ff ff90 	bl	80181f8 <NVIC_EncodePriority>
 80182d8:	4602      	mov	r2, r0
 80182da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182de:	4611      	mov	r1, r2
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7ff ff5f 	bl	80181a4 <__NVIC_SetPriority>
}
 80182e6:	bf00      	nop
 80182e8:	3718      	adds	r7, #24
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80182ee:	b580      	push	{r7, lr}
 80182f0:	b082      	sub	sp, #8
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	4603      	mov	r3, r0
 80182f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80182f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7ff ff33 	bl	8018168 <__NVIC_EnableIRQ>
}
 8018302:	bf00      	nop
 8018304:	3708      	adds	r7, #8
 8018306:	46bd      	mov	sp, r7
 8018308:	bd80      	pop	{r7, pc}

0801830a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801830a:	b580      	push	{r7, lr}
 801830c:	b082      	sub	sp, #8
 801830e:	af00      	add	r7, sp, #0
 8018310:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff ffa4 	bl	8018260 <SysTick_Config>
 8018318:	4603      	mov	r3, r0
}
 801831a:	4618      	mov	r0, r3
 801831c:	3708      	adds	r7, #8
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}
	...

08018324 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b084      	sub	sp, #16
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d101      	bne.n	8018336 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8018332:	2301      	movs	r3, #1
 8018334:	e08e      	b.n	8018454 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	461a      	mov	r2, r3
 801833c:	4b47      	ldr	r3, [pc, #284]	; (801845c <HAL_DMA_Init+0x138>)
 801833e:	429a      	cmp	r2, r3
 8018340:	d80f      	bhi.n	8018362 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	461a      	mov	r2, r3
 8018348:	4b45      	ldr	r3, [pc, #276]	; (8018460 <HAL_DMA_Init+0x13c>)
 801834a:	4413      	add	r3, r2
 801834c:	4a45      	ldr	r2, [pc, #276]	; (8018464 <HAL_DMA_Init+0x140>)
 801834e:	fba2 2303 	umull	r2, r3, r2, r3
 8018352:	091b      	lsrs	r3, r3, #4
 8018354:	009a      	lsls	r2, r3, #2
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	4a42      	ldr	r2, [pc, #264]	; (8018468 <HAL_DMA_Init+0x144>)
 801835e:	641a      	str	r2, [r3, #64]	; 0x40
 8018360:	e00e      	b.n	8018380 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	461a      	mov	r2, r3
 8018368:	4b40      	ldr	r3, [pc, #256]	; (801846c <HAL_DMA_Init+0x148>)
 801836a:	4413      	add	r3, r2
 801836c:	4a3d      	ldr	r2, [pc, #244]	; (8018464 <HAL_DMA_Init+0x140>)
 801836e:	fba2 2303 	umull	r2, r3, r2, r3
 8018372:	091b      	lsrs	r3, r3, #4
 8018374:	009a      	lsls	r2, r3, #2
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	4a3c      	ldr	r2, [pc, #240]	; (8018470 <HAL_DMA_Init+0x14c>)
 801837e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2202      	movs	r2, #2
 8018384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8018396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801839a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80183a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	691b      	ldr	r3, [r3, #16]
 80183aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80183b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	699b      	ldr	r3, [r3, #24]
 80183b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80183bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	6a1b      	ldr	r3, [r3, #32]
 80183c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80183c4:	68fa      	ldr	r2, [r7, #12]
 80183c6:	4313      	orrs	r3, r2
 80183c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	68fa      	ldr	r2, [r7, #12]
 80183d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80183d2:	6878      	ldr	r0, [r7, #4]
 80183d4:	f000 fa74 	bl	80188c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	689b      	ldr	r3, [r3, #8]
 80183dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80183e0:	d102      	bne.n	80183e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2200      	movs	r2, #0
 80183e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	685a      	ldr	r2, [r3, #4]
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80183f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80183f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80183fa:	687a      	ldr	r2, [r7, #4]
 80183fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80183fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	685b      	ldr	r3, [r3, #4]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d010      	beq.n	801842a <HAL_DMA_Init+0x106>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	685b      	ldr	r3, [r3, #4]
 801840c:	2b04      	cmp	r3, #4
 801840e:	d80c      	bhi.n	801842a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8018410:	6878      	ldr	r0, [r7, #4]
 8018412:	f000 fa93 	bl	801893c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801841a:	2200      	movs	r2, #0
 801841c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018422:	687a      	ldr	r2, [r7, #4]
 8018424:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8018426:	605a      	str	r2, [r3, #4]
 8018428:	e008      	b.n	801843c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	2200      	movs	r2, #0
 801842e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	2200      	movs	r2, #0
 8018434:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	2200      	movs	r2, #0
 801843a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	2200      	movs	r2, #0
 8018440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2201      	movs	r2, #1
 8018446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	2200      	movs	r2, #0
 801844e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8018452:	2300      	movs	r3, #0
}
 8018454:	4618      	mov	r0, r3
 8018456:	3710      	adds	r7, #16
 8018458:	46bd      	mov	sp, r7
 801845a:	bd80      	pop	{r7, pc}
 801845c:	40020407 	.word	0x40020407
 8018460:	bffdfff8 	.word	0xbffdfff8
 8018464:	cccccccd 	.word	0xcccccccd
 8018468:	40020000 	.word	0x40020000
 801846c:	bffdfbf8 	.word	0xbffdfbf8
 8018470:	40020400 	.word	0x40020400

08018474 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b086      	sub	sp, #24
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	60b9      	str	r1, [r7, #8]
 801847e:	607a      	str	r2, [r7, #4]
 8018480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018482:	2300      	movs	r3, #0
 8018484:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801848c:	2b01      	cmp	r3, #1
 801848e:	d101      	bne.n	8018494 <HAL_DMA_Start_IT+0x20>
 8018490:	2302      	movs	r3, #2
 8018492:	e066      	b.n	8018562 <HAL_DMA_Start_IT+0xee>
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	2201      	movs	r2, #1
 8018498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80184a2:	b2db      	uxtb	r3, r3
 80184a4:	2b01      	cmp	r3, #1
 80184a6:	d155      	bne.n	8018554 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	2202      	movs	r2, #2
 80184ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	2200      	movs	r2, #0
 80184b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	681a      	ldr	r2, [r3, #0]
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	f022 0201 	bic.w	r2, r2, #1
 80184c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	687a      	ldr	r2, [r7, #4]
 80184ca:	68b9      	ldr	r1, [r7, #8]
 80184cc:	68f8      	ldr	r0, [r7, #12]
 80184ce:	f000 f9b9 	bl	8018844 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d008      	beq.n	80184ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	681a      	ldr	r2, [r3, #0]
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	f042 020e 	orr.w	r2, r2, #14
 80184e8:	601a      	str	r2, [r3, #0]
 80184ea:	e00f      	b.n	801850c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	681a      	ldr	r2, [r3, #0]
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f022 0204 	bic.w	r2, r2, #4
 80184fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	681a      	ldr	r2, [r3, #0]
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	f042 020a 	orr.w	r2, r2, #10
 801850a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018516:	2b00      	cmp	r3, #0
 8018518:	d007      	beq.n	801852a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801851e:	681a      	ldr	r2, [r3, #0]
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018528:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801852e:	2b00      	cmp	r3, #0
 8018530:	d007      	beq.n	8018542 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018536:	681a      	ldr	r2, [r3, #0]
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801853c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018540:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	681a      	ldr	r2, [r3, #0]
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	f042 0201 	orr.w	r2, r2, #1
 8018550:	601a      	str	r2, [r3, #0]
 8018552:	e005      	b.n	8018560 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	2200      	movs	r2, #0
 8018558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801855c:	2302      	movs	r3, #2
 801855e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8018560:	7dfb      	ldrb	r3, [r7, #23]
}
 8018562:	4618      	mov	r0, r3
 8018564:	3718      	adds	r7, #24
 8018566:	46bd      	mov	sp, r7
 8018568:	bd80      	pop	{r7, pc}

0801856a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801856a:	b480      	push	{r7}
 801856c:	b083      	sub	sp, #12
 801856e:	af00      	add	r7, sp, #0
 8018570:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d101      	bne.n	801857c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8018578:	2301      	movs	r3, #1
 801857a:	e04f      	b.n	801861c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018582:	b2db      	uxtb	r3, r3
 8018584:	2b02      	cmp	r3, #2
 8018586:	d008      	beq.n	801859a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2204      	movs	r2, #4
 801858c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	2200      	movs	r2, #0
 8018592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8018596:	2301      	movs	r3, #1
 8018598:	e040      	b.n	801861c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	681a      	ldr	r2, [r3, #0]
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	f022 020e 	bic.w	r2, r2, #14
 80185a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80185ae:	681a      	ldr	r2, [r3, #0]
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80185b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80185b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	681a      	ldr	r2, [r3, #0]
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	f022 0201 	bic.w	r2, r2, #1
 80185c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185ce:	f003 021c 	and.w	r2, r3, #28
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185d6:	2101      	movs	r1, #1
 80185d8:	fa01 f202 	lsl.w	r2, r1, r2
 80185dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185e2:	687a      	ldr	r2, [r7, #4]
 80185e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80185e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d00c      	beq.n	801860a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185f4:	681a      	ldr	r2, [r3, #0]
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80185fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018604:	687a      	ldr	r2, [r7, #4]
 8018606:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8018608:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	2201      	movs	r2, #1
 801860e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2200      	movs	r2, #0
 8018616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 801861a:	2300      	movs	r3, #0
}
 801861c:	4618      	mov	r0, r3
 801861e:	370c      	adds	r7, #12
 8018620:	46bd      	mov	sp, r7
 8018622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018626:	4770      	bx	lr

08018628 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b084      	sub	sp, #16
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018630:	2300      	movs	r3, #0
 8018632:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801863a:	b2db      	uxtb	r3, r3
 801863c:	2b02      	cmp	r3, #2
 801863e:	d005      	beq.n	801864c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	2204      	movs	r2, #4
 8018644:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8018646:	2301      	movs	r3, #1
 8018648:	73fb      	strb	r3, [r7, #15]
 801864a:	e047      	b.n	80186dc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	681a      	ldr	r2, [r3, #0]
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	f022 020e 	bic.w	r2, r2, #14
 801865a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	f022 0201 	bic.w	r2, r2, #1
 801866a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018670:	681a      	ldr	r2, [r3, #0]
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801867a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018680:	f003 021c 	and.w	r2, r3, #28
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018688:	2101      	movs	r1, #1
 801868a:	fa01 f202 	lsl.w	r2, r1, r2
 801868e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018694:	687a      	ldr	r2, [r7, #4]
 8018696:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018698:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d00c      	beq.n	80186bc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186a6:	681a      	ldr	r2, [r3, #0]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80186b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186b6:	687a      	ldr	r2, [r7, #4]
 80186b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80186ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2201      	movs	r2, #1
 80186c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	2200      	movs	r2, #0
 80186c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d003      	beq.n	80186dc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	4798      	blx	r3
    }
  }
  return status;
 80186dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3710      	adds	r7, #16
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}

080186e6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80186e6:	b580      	push	{r7, lr}
 80186e8:	b084      	sub	sp, #16
 80186ea:	af00      	add	r7, sp, #0
 80186ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018702:	f003 031c 	and.w	r3, r3, #28
 8018706:	2204      	movs	r2, #4
 8018708:	409a      	lsls	r2, r3
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	4013      	ands	r3, r2
 801870e:	2b00      	cmp	r3, #0
 8018710:	d026      	beq.n	8018760 <HAL_DMA_IRQHandler+0x7a>
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	f003 0304 	and.w	r3, r3, #4
 8018718:	2b00      	cmp	r3, #0
 801871a:	d021      	beq.n	8018760 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	f003 0320 	and.w	r3, r3, #32
 8018726:	2b00      	cmp	r3, #0
 8018728:	d107      	bne.n	801873a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	681a      	ldr	r2, [r3, #0]
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	f022 0204 	bic.w	r2, r2, #4
 8018738:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801873e:	f003 021c 	and.w	r2, r3, #28
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018746:	2104      	movs	r1, #4
 8018748:	fa01 f202 	lsl.w	r2, r1, r2
 801874c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018752:	2b00      	cmp	r3, #0
 8018754:	d071      	beq.n	801883a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801875a:	6878      	ldr	r0, [r7, #4]
 801875c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801875e:	e06c      	b.n	801883a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018764:	f003 031c 	and.w	r3, r3, #28
 8018768:	2202      	movs	r2, #2
 801876a:	409a      	lsls	r2, r3
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	4013      	ands	r3, r2
 8018770:	2b00      	cmp	r3, #0
 8018772:	d02e      	beq.n	80187d2 <HAL_DMA_IRQHandler+0xec>
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	f003 0302 	and.w	r3, r3, #2
 801877a:	2b00      	cmp	r3, #0
 801877c:	d029      	beq.n	80187d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	f003 0320 	and.w	r3, r3, #32
 8018788:	2b00      	cmp	r3, #0
 801878a:	d10b      	bne.n	80187a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	681a      	ldr	r2, [r3, #0]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	f022 020a 	bic.w	r2, r2, #10
 801879a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2201      	movs	r2, #1
 80187a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187a8:	f003 021c 	and.w	r2, r3, #28
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187b0:	2102      	movs	r1, #2
 80187b2:	fa01 f202 	lsl.w	r2, r1, r2
 80187b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2200      	movs	r2, #0
 80187bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d038      	beq.n	801883a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187cc:	6878      	ldr	r0, [r7, #4]
 80187ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80187d0:	e033      	b.n	801883a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187d6:	f003 031c 	and.w	r3, r3, #28
 80187da:	2208      	movs	r2, #8
 80187dc:	409a      	lsls	r2, r3
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	4013      	ands	r3, r2
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d02a      	beq.n	801883c <HAL_DMA_IRQHandler+0x156>
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	f003 0308 	and.w	r3, r3, #8
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d025      	beq.n	801883c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	681a      	ldr	r2, [r3, #0]
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	f022 020e 	bic.w	r2, r2, #14
 80187fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018804:	f003 021c 	and.w	r2, r3, #28
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801880c:	2101      	movs	r1, #1
 801880e:	fa01 f202 	lsl.w	r2, r1, r2
 8018812:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	2201      	movs	r2, #1
 8018818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	2201      	movs	r2, #1
 801881e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2200      	movs	r2, #0
 8018826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801882e:	2b00      	cmp	r3, #0
 8018830:	d004      	beq.n	801883c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018836:	6878      	ldr	r0, [r7, #4]
 8018838:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801883a:	bf00      	nop
 801883c:	bf00      	nop
}
 801883e:	3710      	adds	r7, #16
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}

08018844 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018844:	b480      	push	{r7}
 8018846:	b085      	sub	sp, #20
 8018848:	af00      	add	r7, sp, #0
 801884a:	60f8      	str	r0, [r7, #12]
 801884c:	60b9      	str	r1, [r7, #8]
 801884e:	607a      	str	r2, [r7, #4]
 8018850:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018856:	68fa      	ldr	r2, [r7, #12]
 8018858:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801885a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018860:	2b00      	cmp	r3, #0
 8018862:	d004      	beq.n	801886e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018868:	68fa      	ldr	r2, [r7, #12]
 801886a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801886c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018872:	f003 021c 	and.w	r2, r3, #28
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801887a:	2101      	movs	r1, #1
 801887c:	fa01 f202 	lsl.w	r2, r1, r2
 8018880:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	683a      	ldr	r2, [r7, #0]
 8018888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	689b      	ldr	r3, [r3, #8]
 801888e:	2b10      	cmp	r3, #16
 8018890:	d108      	bne.n	80188a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	687a      	ldr	r2, [r7, #4]
 8018898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	68ba      	ldr	r2, [r7, #8]
 80188a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80188a2:	e007      	b.n	80188b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	68ba      	ldr	r2, [r7, #8]
 80188aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	687a      	ldr	r2, [r7, #4]
 80188b2:	60da      	str	r2, [r3, #12]
}
 80188b4:	bf00      	nop
 80188b6:	3714      	adds	r7, #20
 80188b8:	46bd      	mov	sp, r7
 80188ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188be:	4770      	bx	lr

080188c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80188c0:	b480      	push	{r7}
 80188c2:	b085      	sub	sp, #20
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	461a      	mov	r2, r3
 80188ce:	4b17      	ldr	r3, [pc, #92]	; (801892c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d80a      	bhi.n	80188ea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188d8:	089b      	lsrs	r3, r3, #2
 80188da:	009b      	lsls	r3, r3, #2
 80188dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80188e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80188e4:	687a      	ldr	r2, [r7, #4]
 80188e6:	6493      	str	r3, [r2, #72]	; 0x48
 80188e8:	e007      	b.n	80188fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188ee:	089b      	lsrs	r3, r3, #2
 80188f0:	009a      	lsls	r2, r3, #2
 80188f2:	4b0f      	ldr	r3, [pc, #60]	; (8018930 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80188f4:	4413      	add	r3, r2
 80188f6:	687a      	ldr	r2, [r7, #4]
 80188f8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	b2db      	uxtb	r3, r3
 8018900:	3b08      	subs	r3, #8
 8018902:	4a0c      	ldr	r2, [pc, #48]	; (8018934 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8018904:	fba2 2303 	umull	r2, r3, r2, r3
 8018908:	091b      	lsrs	r3, r3, #4
 801890a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	4a0a      	ldr	r2, [pc, #40]	; (8018938 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8018910:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	f003 031f 	and.w	r3, r3, #31
 8018918:	2201      	movs	r2, #1
 801891a:	409a      	lsls	r2, r3
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018920:	bf00      	nop
 8018922:	3714      	adds	r7, #20
 8018924:	46bd      	mov	sp, r7
 8018926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892a:	4770      	bx	lr
 801892c:	40020407 	.word	0x40020407
 8018930:	4002081c 	.word	0x4002081c
 8018934:	cccccccd 	.word	0xcccccccd
 8018938:	40020880 	.word	0x40020880

0801893c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801893c:	b480      	push	{r7}
 801893e:	b085      	sub	sp, #20
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	685b      	ldr	r3, [r3, #4]
 8018948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801894c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801894e:	68fa      	ldr	r2, [r7, #12]
 8018950:	4b0b      	ldr	r3, [pc, #44]	; (8018980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8018952:	4413      	add	r3, r2
 8018954:	009b      	lsls	r3, r3, #2
 8018956:	461a      	mov	r2, r3
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	4a09      	ldr	r2, [pc, #36]	; (8018984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8018960:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	3b01      	subs	r3, #1
 8018966:	f003 0303 	and.w	r3, r3, #3
 801896a:	2201      	movs	r2, #1
 801896c:	409a      	lsls	r2, r3
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8018972:	bf00      	nop
 8018974:	3714      	adds	r7, #20
 8018976:	46bd      	mov	sp, r7
 8018978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897c:	4770      	bx	lr
 801897e:	bf00      	nop
 8018980:	1000823f 	.word	0x1000823f
 8018984:	40020940 	.word	0x40020940

08018988 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018988:	b480      	push	{r7}
 801898a:	b087      	sub	sp, #28
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
 8018990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8018992:	2300      	movs	r3, #0
 8018994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8018996:	e14c      	b.n	8018c32 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	681a      	ldr	r2, [r3, #0]
 801899c:	2101      	movs	r1, #1
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	fa01 f303 	lsl.w	r3, r1, r3
 80189a4:	4013      	ands	r3, r2
 80189a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	f000 813e 	beq.w	8018c2c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	685b      	ldr	r3, [r3, #4]
 80189b4:	f003 0303 	and.w	r3, r3, #3
 80189b8:	2b01      	cmp	r3, #1
 80189ba:	d005      	beq.n	80189c8 <HAL_GPIO_Init+0x40>
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	685b      	ldr	r3, [r3, #4]
 80189c0:	f003 0303 	and.w	r3, r3, #3
 80189c4:	2b02      	cmp	r3, #2
 80189c6:	d130      	bne.n	8018a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	689b      	ldr	r3, [r3, #8]
 80189cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	005b      	lsls	r3, r3, #1
 80189d2:	2203      	movs	r2, #3
 80189d4:	fa02 f303 	lsl.w	r3, r2, r3
 80189d8:	43db      	mvns	r3, r3
 80189da:	693a      	ldr	r2, [r7, #16]
 80189dc:	4013      	ands	r3, r2
 80189de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	68da      	ldr	r2, [r3, #12]
 80189e4:	697b      	ldr	r3, [r7, #20]
 80189e6:	005b      	lsls	r3, r3, #1
 80189e8:	fa02 f303 	lsl.w	r3, r2, r3
 80189ec:	693a      	ldr	r2, [r7, #16]
 80189ee:	4313      	orrs	r3, r2
 80189f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	693a      	ldr	r2, [r7, #16]
 80189f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80189fe:	2201      	movs	r2, #1
 8018a00:	697b      	ldr	r3, [r7, #20]
 8018a02:	fa02 f303 	lsl.w	r3, r2, r3
 8018a06:	43db      	mvns	r3, r3
 8018a08:	693a      	ldr	r2, [r7, #16]
 8018a0a:	4013      	ands	r3, r2
 8018a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8018a0e:	683b      	ldr	r3, [r7, #0]
 8018a10:	685b      	ldr	r3, [r3, #4]
 8018a12:	091b      	lsrs	r3, r3, #4
 8018a14:	f003 0201 	and.w	r2, r3, #1
 8018a18:	697b      	ldr	r3, [r7, #20]
 8018a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8018a1e:	693a      	ldr	r2, [r7, #16]
 8018a20:	4313      	orrs	r3, r2
 8018a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	693a      	ldr	r2, [r7, #16]
 8018a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	685b      	ldr	r3, [r3, #4]
 8018a2e:	f003 0303 	and.w	r3, r3, #3
 8018a32:	2b03      	cmp	r3, #3
 8018a34:	d017      	beq.n	8018a66 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	68db      	ldr	r3, [r3, #12]
 8018a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	005b      	lsls	r3, r3, #1
 8018a40:	2203      	movs	r2, #3
 8018a42:	fa02 f303 	lsl.w	r3, r2, r3
 8018a46:	43db      	mvns	r3, r3
 8018a48:	693a      	ldr	r2, [r7, #16]
 8018a4a:	4013      	ands	r3, r2
 8018a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	689a      	ldr	r2, [r3, #8]
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	005b      	lsls	r3, r3, #1
 8018a56:	fa02 f303 	lsl.w	r3, r2, r3
 8018a5a:	693a      	ldr	r2, [r7, #16]
 8018a5c:	4313      	orrs	r3, r2
 8018a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	693a      	ldr	r2, [r7, #16]
 8018a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	685b      	ldr	r3, [r3, #4]
 8018a6a:	f003 0303 	and.w	r3, r3, #3
 8018a6e:	2b02      	cmp	r3, #2
 8018a70:	d123      	bne.n	8018aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	08da      	lsrs	r2, r3, #3
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	3208      	adds	r2, #8
 8018a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8018a80:	697b      	ldr	r3, [r7, #20]
 8018a82:	f003 0307 	and.w	r3, r3, #7
 8018a86:	009b      	lsls	r3, r3, #2
 8018a88:	220f      	movs	r2, #15
 8018a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8018a8e:	43db      	mvns	r3, r3
 8018a90:	693a      	ldr	r2, [r7, #16]
 8018a92:	4013      	ands	r3, r2
 8018a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	691a      	ldr	r2, [r3, #16]
 8018a9a:	697b      	ldr	r3, [r7, #20]
 8018a9c:	f003 0307 	and.w	r3, r3, #7
 8018aa0:	009b      	lsls	r3, r3, #2
 8018aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8018aa6:	693a      	ldr	r2, [r7, #16]
 8018aa8:	4313      	orrs	r3, r2
 8018aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	08da      	lsrs	r2, r3, #3
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	3208      	adds	r2, #8
 8018ab4:	6939      	ldr	r1, [r7, #16]
 8018ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8018ac0:	697b      	ldr	r3, [r7, #20]
 8018ac2:	005b      	lsls	r3, r3, #1
 8018ac4:	2203      	movs	r2, #3
 8018ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8018aca:	43db      	mvns	r3, r3
 8018acc:	693a      	ldr	r2, [r7, #16]
 8018ace:	4013      	ands	r3, r2
 8018ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	685b      	ldr	r3, [r3, #4]
 8018ad6:	f003 0203 	and.w	r2, r3, #3
 8018ada:	697b      	ldr	r3, [r7, #20]
 8018adc:	005b      	lsls	r3, r3, #1
 8018ade:	fa02 f303 	lsl.w	r3, r2, r3
 8018ae2:	693a      	ldr	r2, [r7, #16]
 8018ae4:	4313      	orrs	r3, r2
 8018ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	693a      	ldr	r2, [r7, #16]
 8018aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	685b      	ldr	r3, [r3, #4]
 8018af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	f000 8098 	beq.w	8018c2c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8018afc:	4a54      	ldr	r2, [pc, #336]	; (8018c50 <HAL_GPIO_Init+0x2c8>)
 8018afe:	697b      	ldr	r3, [r7, #20]
 8018b00:	089b      	lsrs	r3, r3, #2
 8018b02:	3302      	adds	r3, #2
 8018b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8018b0a:	697b      	ldr	r3, [r7, #20]
 8018b0c:	f003 0303 	and.w	r3, r3, #3
 8018b10:	009b      	lsls	r3, r3, #2
 8018b12:	220f      	movs	r2, #15
 8018b14:	fa02 f303 	lsl.w	r3, r2, r3
 8018b18:	43db      	mvns	r3, r3
 8018b1a:	693a      	ldr	r2, [r7, #16]
 8018b1c:	4013      	ands	r3, r2
 8018b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8018b26:	d019      	beq.n	8018b5c <HAL_GPIO_Init+0x1d4>
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	4a4a      	ldr	r2, [pc, #296]	; (8018c54 <HAL_GPIO_Init+0x2cc>)
 8018b2c:	4293      	cmp	r3, r2
 8018b2e:	d013      	beq.n	8018b58 <HAL_GPIO_Init+0x1d0>
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	4a49      	ldr	r2, [pc, #292]	; (8018c58 <HAL_GPIO_Init+0x2d0>)
 8018b34:	4293      	cmp	r3, r2
 8018b36:	d00d      	beq.n	8018b54 <HAL_GPIO_Init+0x1cc>
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	4a48      	ldr	r2, [pc, #288]	; (8018c5c <HAL_GPIO_Init+0x2d4>)
 8018b3c:	4293      	cmp	r3, r2
 8018b3e:	d007      	beq.n	8018b50 <HAL_GPIO_Init+0x1c8>
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	4a47      	ldr	r2, [pc, #284]	; (8018c60 <HAL_GPIO_Init+0x2d8>)
 8018b44:	4293      	cmp	r3, r2
 8018b46:	d101      	bne.n	8018b4c <HAL_GPIO_Init+0x1c4>
 8018b48:	2304      	movs	r3, #4
 8018b4a:	e008      	b.n	8018b5e <HAL_GPIO_Init+0x1d6>
 8018b4c:	2307      	movs	r3, #7
 8018b4e:	e006      	b.n	8018b5e <HAL_GPIO_Init+0x1d6>
 8018b50:	2303      	movs	r3, #3
 8018b52:	e004      	b.n	8018b5e <HAL_GPIO_Init+0x1d6>
 8018b54:	2302      	movs	r3, #2
 8018b56:	e002      	b.n	8018b5e <HAL_GPIO_Init+0x1d6>
 8018b58:	2301      	movs	r3, #1
 8018b5a:	e000      	b.n	8018b5e <HAL_GPIO_Init+0x1d6>
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	697a      	ldr	r2, [r7, #20]
 8018b60:	f002 0203 	and.w	r2, r2, #3
 8018b64:	0092      	lsls	r2, r2, #2
 8018b66:	4093      	lsls	r3, r2
 8018b68:	693a      	ldr	r2, [r7, #16]
 8018b6a:	4313      	orrs	r3, r2
 8018b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8018b6e:	4938      	ldr	r1, [pc, #224]	; (8018c50 <HAL_GPIO_Init+0x2c8>)
 8018b70:	697b      	ldr	r3, [r7, #20]
 8018b72:	089b      	lsrs	r3, r3, #2
 8018b74:	3302      	adds	r3, #2
 8018b76:	693a      	ldr	r2, [r7, #16]
 8018b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8018b7c:	4b39      	ldr	r3, [pc, #228]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	43db      	mvns	r3, r3
 8018b86:	693a      	ldr	r2, [r7, #16]
 8018b88:	4013      	ands	r3, r2
 8018b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	685b      	ldr	r3, [r3, #4]
 8018b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d003      	beq.n	8018ba0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8018b98:	693a      	ldr	r2, [r7, #16]
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	4313      	orrs	r3, r2
 8018b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8018ba0:	4a30      	ldr	r2, [pc, #192]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018ba2:	693b      	ldr	r3, [r7, #16]
 8018ba4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8018ba6:	4b2f      	ldr	r3, [pc, #188]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018ba8:	685b      	ldr	r3, [r3, #4]
 8018baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	43db      	mvns	r3, r3
 8018bb0:	693a      	ldr	r2, [r7, #16]
 8018bb2:	4013      	ands	r3, r2
 8018bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	685b      	ldr	r3, [r3, #4]
 8018bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d003      	beq.n	8018bca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8018bc2:	693a      	ldr	r2, [r7, #16]
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	4313      	orrs	r3, r2
 8018bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8018bca:	4a26      	ldr	r2, [pc, #152]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018bcc:	693b      	ldr	r3, [r7, #16]
 8018bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8018bd0:	4b24      	ldr	r3, [pc, #144]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	43db      	mvns	r3, r3
 8018bdc:	693a      	ldr	r2, [r7, #16]
 8018bde:	4013      	ands	r3, r2
 8018be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	685b      	ldr	r3, [r3, #4]
 8018be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d003      	beq.n	8018bf6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8018bee:	693a      	ldr	r2, [r7, #16]
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	4313      	orrs	r3, r2
 8018bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8018bf6:	4a1b      	ldr	r2, [pc, #108]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018bf8:	693b      	ldr	r3, [r7, #16]
 8018bfa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8018bfe:	4b19      	ldr	r3, [pc, #100]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	43db      	mvns	r3, r3
 8018c0a:	693a      	ldr	r2, [r7, #16]
 8018c0c:	4013      	ands	r3, r2
 8018c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8018c10:	683b      	ldr	r3, [r7, #0]
 8018c12:	685b      	ldr	r3, [r3, #4]
 8018c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d003      	beq.n	8018c24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8018c1c:	693a      	ldr	r2, [r7, #16]
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	4313      	orrs	r3, r2
 8018c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8018c24:	4a0f      	ldr	r2, [pc, #60]	; (8018c64 <HAL_GPIO_Init+0x2dc>)
 8018c26:	693b      	ldr	r3, [r7, #16]
 8018c28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	3301      	adds	r3, #1
 8018c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	681a      	ldr	r2, [r3, #0]
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	fa22 f303 	lsr.w	r3, r2, r3
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	f47f aeab 	bne.w	8018998 <HAL_GPIO_Init+0x10>
  }
}
 8018c42:	bf00      	nop
 8018c44:	bf00      	nop
 8018c46:	371c      	adds	r7, #28
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr
 8018c50:	40010000 	.word	0x40010000
 8018c54:	48000400 	.word	0x48000400
 8018c58:	48000800 	.word	0x48000800
 8018c5c:	48000c00 	.word	0x48000c00
 8018c60:	48001000 	.word	0x48001000
 8018c64:	58000800 	.word	0x58000800

08018c68 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8018c68:	b480      	push	{r7}
 8018c6a:	b087      	sub	sp, #28
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
 8018c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8018c72:	2300      	movs	r3, #0
 8018c74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8018c76:	e0bb      	b.n	8018df0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8018c78:	2201      	movs	r2, #1
 8018c7a:	697b      	ldr	r3, [r7, #20]
 8018c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8018c80:	683a      	ldr	r2, [r7, #0]
 8018c82:	4013      	ands	r3, r2
 8018c84:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	f000 80ae 	beq.w	8018dea <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8018c8e:	4a5f      	ldr	r2, [pc, #380]	; (8018e0c <HAL_GPIO_DeInit+0x1a4>)
 8018c90:	697b      	ldr	r3, [r7, #20]
 8018c92:	089b      	lsrs	r3, r3, #2
 8018c94:	3302      	adds	r3, #2
 8018c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018c9a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8018c9c:	697b      	ldr	r3, [r7, #20]
 8018c9e:	f003 0303 	and.w	r3, r3, #3
 8018ca2:	009b      	lsls	r3, r3, #2
 8018ca4:	220f      	movs	r2, #15
 8018ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8018caa:	68fa      	ldr	r2, [r7, #12]
 8018cac:	4013      	ands	r3, r2
 8018cae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8018cb6:	d019      	beq.n	8018cec <HAL_GPIO_DeInit+0x84>
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	4a55      	ldr	r2, [pc, #340]	; (8018e10 <HAL_GPIO_DeInit+0x1a8>)
 8018cbc:	4293      	cmp	r3, r2
 8018cbe:	d013      	beq.n	8018ce8 <HAL_GPIO_DeInit+0x80>
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	4a54      	ldr	r2, [pc, #336]	; (8018e14 <HAL_GPIO_DeInit+0x1ac>)
 8018cc4:	4293      	cmp	r3, r2
 8018cc6:	d00d      	beq.n	8018ce4 <HAL_GPIO_DeInit+0x7c>
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	4a53      	ldr	r2, [pc, #332]	; (8018e18 <HAL_GPIO_DeInit+0x1b0>)
 8018ccc:	4293      	cmp	r3, r2
 8018cce:	d007      	beq.n	8018ce0 <HAL_GPIO_DeInit+0x78>
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	4a52      	ldr	r2, [pc, #328]	; (8018e1c <HAL_GPIO_DeInit+0x1b4>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d101      	bne.n	8018cdc <HAL_GPIO_DeInit+0x74>
 8018cd8:	2304      	movs	r3, #4
 8018cda:	e008      	b.n	8018cee <HAL_GPIO_DeInit+0x86>
 8018cdc:	2307      	movs	r3, #7
 8018cde:	e006      	b.n	8018cee <HAL_GPIO_DeInit+0x86>
 8018ce0:	2303      	movs	r3, #3
 8018ce2:	e004      	b.n	8018cee <HAL_GPIO_DeInit+0x86>
 8018ce4:	2302      	movs	r3, #2
 8018ce6:	e002      	b.n	8018cee <HAL_GPIO_DeInit+0x86>
 8018ce8:	2301      	movs	r3, #1
 8018cea:	e000      	b.n	8018cee <HAL_GPIO_DeInit+0x86>
 8018cec:	2300      	movs	r3, #0
 8018cee:	697a      	ldr	r2, [r7, #20]
 8018cf0:	f002 0203 	and.w	r2, r2, #3
 8018cf4:	0092      	lsls	r2, r2, #2
 8018cf6:	4093      	lsls	r3, r2
 8018cf8:	68fa      	ldr	r2, [r7, #12]
 8018cfa:	429a      	cmp	r2, r3
 8018cfc:	d136      	bne.n	8018d6c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8018cfe:	4b48      	ldr	r3, [pc, #288]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d00:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8018d04:	693b      	ldr	r3, [r7, #16]
 8018d06:	43db      	mvns	r3, r3
 8018d08:	4945      	ldr	r1, [pc, #276]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d0a:	4013      	ands	r3, r2
 8018d0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8018d10:	4b43      	ldr	r3, [pc, #268]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8018d16:	693b      	ldr	r3, [r7, #16]
 8018d18:	43db      	mvns	r3, r3
 8018d1a:	4941      	ldr	r1, [pc, #260]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d1c:	4013      	ands	r3, r2
 8018d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8018d22:	4b3f      	ldr	r3, [pc, #252]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d24:	681a      	ldr	r2, [r3, #0]
 8018d26:	693b      	ldr	r3, [r7, #16]
 8018d28:	43db      	mvns	r3, r3
 8018d2a:	493d      	ldr	r1, [pc, #244]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d2c:	4013      	ands	r3, r2
 8018d2e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8018d30:	4b3b      	ldr	r3, [pc, #236]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d32:	685a      	ldr	r2, [r3, #4]
 8018d34:	693b      	ldr	r3, [r7, #16]
 8018d36:	43db      	mvns	r3, r3
 8018d38:	4939      	ldr	r1, [pc, #228]	; (8018e20 <HAL_GPIO_DeInit+0x1b8>)
 8018d3a:	4013      	ands	r3, r2
 8018d3c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8018d3e:	697b      	ldr	r3, [r7, #20]
 8018d40:	f003 0303 	and.w	r3, r3, #3
 8018d44:	009b      	lsls	r3, r3, #2
 8018d46:	220f      	movs	r2, #15
 8018d48:	fa02 f303 	lsl.w	r3, r2, r3
 8018d4c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8018d4e:	4a2f      	ldr	r2, [pc, #188]	; (8018e0c <HAL_GPIO_DeInit+0x1a4>)
 8018d50:	697b      	ldr	r3, [r7, #20]
 8018d52:	089b      	lsrs	r3, r3, #2
 8018d54:	3302      	adds	r3, #2
 8018d56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	43da      	mvns	r2, r3
 8018d5e:	482b      	ldr	r0, [pc, #172]	; (8018e0c <HAL_GPIO_DeInit+0x1a4>)
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	089b      	lsrs	r3, r3, #2
 8018d64:	400a      	ands	r2, r1
 8018d66:	3302      	adds	r3, #2
 8018d68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681a      	ldr	r2, [r3, #0]
 8018d70:	697b      	ldr	r3, [r7, #20]
 8018d72:	005b      	lsls	r3, r3, #1
 8018d74:	2103      	movs	r1, #3
 8018d76:	fa01 f303 	lsl.w	r3, r1, r3
 8018d7a:	431a      	orrs	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	08da      	lsrs	r2, r3, #3
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	3208      	adds	r2, #8
 8018d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	f003 0307 	and.w	r3, r3, #7
 8018d92:	009b      	lsls	r3, r3, #2
 8018d94:	220f      	movs	r2, #15
 8018d96:	fa02 f303 	lsl.w	r3, r2, r3
 8018d9a:	43db      	mvns	r3, r3
 8018d9c:	697a      	ldr	r2, [r7, #20]
 8018d9e:	08d2      	lsrs	r2, r2, #3
 8018da0:	4019      	ands	r1, r3
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	3208      	adds	r2, #8
 8018da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	68da      	ldr	r2, [r3, #12]
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	005b      	lsls	r3, r3, #1
 8018db2:	2103      	movs	r1, #3
 8018db4:	fa01 f303 	lsl.w	r3, r1, r3
 8018db8:	43db      	mvns	r3, r3
 8018dba:	401a      	ands	r2, r3
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	685a      	ldr	r2, [r3, #4]
 8018dc4:	2101      	movs	r1, #1
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8018dcc:	43db      	mvns	r3, r3
 8018dce:	401a      	ands	r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	689a      	ldr	r2, [r3, #8]
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	005b      	lsls	r3, r3, #1
 8018ddc:	2103      	movs	r1, #3
 8018dde:	fa01 f303 	lsl.w	r3, r1, r3
 8018de2:	43db      	mvns	r3, r3
 8018de4:	401a      	ands	r2, r3
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8018dea:	697b      	ldr	r3, [r7, #20]
 8018dec:	3301      	adds	r3, #1
 8018dee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8018df0:	683a      	ldr	r2, [r7, #0]
 8018df2:	697b      	ldr	r3, [r7, #20]
 8018df4:	fa22 f303 	lsr.w	r3, r2, r3
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	f47f af3d 	bne.w	8018c78 <HAL_GPIO_DeInit+0x10>
  }
}
 8018dfe:	bf00      	nop
 8018e00:	bf00      	nop
 8018e02:	371c      	adds	r7, #28
 8018e04:	46bd      	mov	sp, r7
 8018e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0a:	4770      	bx	lr
 8018e0c:	40010000 	.word	0x40010000
 8018e10:	48000400 	.word	0x48000400
 8018e14:	48000800 	.word	0x48000800
 8018e18:	48000c00 	.word	0x48000c00
 8018e1c:	48001000 	.word	0x48001000
 8018e20:	58000800 	.word	0x58000800

08018e24 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8018e24:	b480      	push	{r7}
 8018e26:	b085      	sub	sp, #20
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
 8018e2c:	460b      	mov	r3, r1
 8018e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	691a      	ldr	r2, [r3, #16]
 8018e34:	887b      	ldrh	r3, [r7, #2]
 8018e36:	4013      	ands	r3, r2
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d002      	beq.n	8018e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	73fb      	strb	r3, [r7, #15]
 8018e40:	e001      	b.n	8018e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018e42:	2300      	movs	r3, #0
 8018e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8018e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e48:	4618      	mov	r0, r3
 8018e4a:	3714      	adds	r7, #20
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e52:	4770      	bx	lr

08018e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018e54:	b480      	push	{r7}
 8018e56:	b083      	sub	sp, #12
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
 8018e5c:	460b      	mov	r3, r1
 8018e5e:	807b      	strh	r3, [r7, #2]
 8018e60:	4613      	mov	r3, r2
 8018e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8018e64:	787b      	ldrb	r3, [r7, #1]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d003      	beq.n	8018e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8018e6a:	887a      	ldrh	r2, [r7, #2]
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8018e70:	e002      	b.n	8018e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8018e72:	887a      	ldrh	r2, [r7, #2]
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018e78:	bf00      	nop
 8018e7a:	370c      	adds	r7, #12
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e82:	4770      	bx	lr

08018e84 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8018e84:	b480      	push	{r7}
 8018e86:	b085      	sub	sp, #20
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	460b      	mov	r3, r1
 8018e8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	695b      	ldr	r3, [r3, #20]
 8018e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8018e96:	887a      	ldrh	r2, [r7, #2]
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	4013      	ands	r3, r2
 8018e9c:	041a      	lsls	r2, r3, #16
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	43d9      	mvns	r1, r3
 8018ea2:	887b      	ldrh	r3, [r7, #2]
 8018ea4:	400b      	ands	r3, r1
 8018ea6:	431a      	orrs	r2, r3
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	619a      	str	r2, [r3, #24]
}
 8018eac:	bf00      	nop
 8018eae:	3714      	adds	r7, #20
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb6:	4770      	bx	lr

08018eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b082      	sub	sp, #8
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8018ec2:	4b08      	ldr	r3, [pc, #32]	; (8018ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018ec4:	68da      	ldr	r2, [r3, #12]
 8018ec6:	88fb      	ldrh	r3, [r7, #6]
 8018ec8:	4013      	ands	r3, r2
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d006      	beq.n	8018edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018ece:	4a05      	ldr	r2, [pc, #20]	; (8018ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018ed0:	88fb      	ldrh	r3, [r7, #6]
 8018ed2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8018ed4:	88fb      	ldrh	r3, [r7, #6]
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f7e8 faec 	bl	80014b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8018edc:	bf00      	nop
 8018ede:	3708      	adds	r7, #8
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	58000800 	.word	0x58000800

08018ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b082      	sub	sp, #8
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d101      	bne.n	8018efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8018ef6:	2301      	movs	r3, #1
 8018ef8:	e081      	b.n	8018ffe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d106      	bne.n	8018f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f7e8 f938 	bl	8001184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	2224      	movs	r2, #36	; 0x24
 8018f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	681a      	ldr	r2, [r3, #0]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	f022 0201 	bic.w	r2, r2, #1
 8018f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	685a      	ldr	r2, [r3, #4]
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018f38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	689a      	ldr	r2, [r3, #8]
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018f48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	68db      	ldr	r3, [r3, #12]
 8018f4e:	2b01      	cmp	r3, #1
 8018f50:	d107      	bne.n	8018f62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	689a      	ldr	r2, [r3, #8]
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018f5e:	609a      	str	r2, [r3, #8]
 8018f60:	e006      	b.n	8018f70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	689a      	ldr	r2, [r3, #8]
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8018f6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	68db      	ldr	r3, [r3, #12]
 8018f74:	2b02      	cmp	r3, #2
 8018f76:	d104      	bne.n	8018f82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	685b      	ldr	r3, [r3, #4]
 8018f88:	687a      	ldr	r2, [r7, #4]
 8018f8a:	6812      	ldr	r2, [r2, #0]
 8018f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	68da      	ldr	r2, [r3, #12]
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	691a      	ldr	r2, [r3, #16]
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	695b      	ldr	r3, [r3, #20]
 8018fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	699b      	ldr	r3, [r3, #24]
 8018fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	430a      	orrs	r2, r1
 8018fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	69d9      	ldr	r1, [r3, #28]
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6a1a      	ldr	r2, [r3, #32]
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	430a      	orrs	r2, r1
 8018fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	681a      	ldr	r2, [r3, #0]
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	f042 0201 	orr.w	r2, r2, #1
 8018fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2220      	movs	r2, #32
 8018fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	2200      	movs	r2, #0
 8018ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018ffc:	2300      	movs	r3, #0
}
 8018ffe:	4618      	mov	r0, r3
 8019000:	3708      	adds	r7, #8
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}

08019006 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8019006:	b580      	push	{r7, lr}
 8019008:	b082      	sub	sp, #8
 801900a:	af00      	add	r7, sp, #0
 801900c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d101      	bne.n	8019018 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8019014:	2301      	movs	r3, #1
 8019016:	e021      	b.n	801905c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	2224      	movs	r2, #36	; 0x24
 801901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	681a      	ldr	r2, [r3, #0]
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	f022 0201 	bic.w	r2, r2, #1
 801902e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	f7e8 f903 	bl	800123c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2200      	movs	r2, #0
 801903a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2200      	movs	r2, #0
 8019040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2200      	movs	r2, #0
 8019048:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2200      	movs	r2, #0
 801904e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	2200      	movs	r2, #0
 8019056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801905a:	2300      	movs	r3, #0
}
 801905c:	4618      	mov	r0, r3
 801905e:	3708      	adds	r7, #8
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}

08019064 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b088      	sub	sp, #32
 8019068:	af02      	add	r7, sp, #8
 801906a:	60f8      	str	r0, [r7, #12]
 801906c:	607a      	str	r2, [r7, #4]
 801906e:	461a      	mov	r2, r3
 8019070:	460b      	mov	r3, r1
 8019072:	817b      	strh	r3, [r7, #10]
 8019074:	4613      	mov	r3, r2
 8019076:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801907e:	b2db      	uxtb	r3, r3
 8019080:	2b20      	cmp	r3, #32
 8019082:	f040 80da 	bne.w	801923a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801908c:	2b01      	cmp	r3, #1
 801908e:	d101      	bne.n	8019094 <HAL_I2C_Master_Transmit+0x30>
 8019090:	2302      	movs	r3, #2
 8019092:	e0d3      	b.n	801923c <HAL_I2C_Master_Transmit+0x1d8>
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	2201      	movs	r2, #1
 8019098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801909c:	f7fe fff6 	bl	801808c <HAL_GetTick>
 80190a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	9300      	str	r3, [sp, #0]
 80190a6:	2319      	movs	r3, #25
 80190a8:	2201      	movs	r2, #1
 80190aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80190ae:	68f8      	ldr	r0, [r7, #12]
 80190b0:	f000 fc76 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 80190b4:	4603      	mov	r3, r0
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d001      	beq.n	80190be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80190ba:	2301      	movs	r3, #1
 80190bc:	e0be      	b.n	801923c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	2221      	movs	r2, #33	; 0x21
 80190c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	2210      	movs	r2, #16
 80190ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	2200      	movs	r2, #0
 80190d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	687a      	ldr	r2, [r7, #4]
 80190d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	893a      	ldrh	r2, [r7, #8]
 80190de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	2200      	movs	r2, #0
 80190e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	2bff      	cmp	r3, #255	; 0xff
 80190ee:	d90e      	bls.n	801910e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	22ff      	movs	r2, #255	; 0xff
 80190f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80190fa:	b2da      	uxtb	r2, r3
 80190fc:	8979      	ldrh	r1, [r7, #10]
 80190fe:	4b51      	ldr	r3, [pc, #324]	; (8019244 <HAL_I2C_Master_Transmit+0x1e0>)
 8019100:	9300      	str	r3, [sp, #0]
 8019102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019106:	68f8      	ldr	r0, [r7, #12]
 8019108:	f000 fe86 	bl	8019e18 <I2C_TransferConfig>
 801910c:	e06c      	b.n	80191e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019112:	b29a      	uxth	r2, r3
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801911c:	b2da      	uxtb	r2, r3
 801911e:	8979      	ldrh	r1, [r7, #10]
 8019120:	4b48      	ldr	r3, [pc, #288]	; (8019244 <HAL_I2C_Master_Transmit+0x1e0>)
 8019122:	9300      	str	r3, [sp, #0]
 8019124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019128:	68f8      	ldr	r0, [r7, #12]
 801912a:	f000 fe75 	bl	8019e18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801912e:	e05b      	b.n	80191e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019130:	697a      	ldr	r2, [r7, #20]
 8019132:	6a39      	ldr	r1, [r7, #32]
 8019134:	68f8      	ldr	r0, [r7, #12]
 8019136:	f000 fc82 	bl	8019a3e <I2C_WaitOnTXISFlagUntilTimeout>
 801913a:	4603      	mov	r3, r0
 801913c:	2b00      	cmp	r3, #0
 801913e:	d001      	beq.n	8019144 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8019140:	2301      	movs	r3, #1
 8019142:	e07b      	b.n	801923c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019148:	781a      	ldrb	r2, [r3, #0]
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019154:	1c5a      	adds	r2, r3, #1
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801915e:	b29b      	uxth	r3, r3
 8019160:	3b01      	subs	r3, #1
 8019162:	b29a      	uxth	r2, r3
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801916c:	3b01      	subs	r3, #1
 801916e:	b29a      	uxth	r2, r3
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019178:	b29b      	uxth	r3, r3
 801917a:	2b00      	cmp	r3, #0
 801917c:	d034      	beq.n	80191e8 <HAL_I2C_Master_Transmit+0x184>
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019182:	2b00      	cmp	r3, #0
 8019184:	d130      	bne.n	80191e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	9300      	str	r3, [sp, #0]
 801918a:	6a3b      	ldr	r3, [r7, #32]
 801918c:	2200      	movs	r2, #0
 801918e:	2180      	movs	r1, #128	; 0x80
 8019190:	68f8      	ldr	r0, [r7, #12]
 8019192:	f000 fc05 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 8019196:	4603      	mov	r3, r0
 8019198:	2b00      	cmp	r3, #0
 801919a:	d001      	beq.n	80191a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 801919c:	2301      	movs	r3, #1
 801919e:	e04d      	b.n	801923c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	2bff      	cmp	r3, #255	; 0xff
 80191a8:	d90e      	bls.n	80191c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	22ff      	movs	r2, #255	; 0xff
 80191ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191b4:	b2da      	uxtb	r2, r3
 80191b6:	8979      	ldrh	r1, [r7, #10]
 80191b8:	2300      	movs	r3, #0
 80191ba:	9300      	str	r3, [sp, #0]
 80191bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80191c0:	68f8      	ldr	r0, [r7, #12]
 80191c2:	f000 fe29 	bl	8019e18 <I2C_TransferConfig>
 80191c6:	e00f      	b.n	80191e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191cc:	b29a      	uxth	r2, r3
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191d6:	b2da      	uxtb	r2, r3
 80191d8:	8979      	ldrh	r1, [r7, #10]
 80191da:	2300      	movs	r3, #0
 80191dc:	9300      	str	r3, [sp, #0]
 80191de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80191e2:	68f8      	ldr	r0, [r7, #12]
 80191e4:	f000 fe18 	bl	8019e18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d19e      	bne.n	8019130 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80191f2:	697a      	ldr	r2, [r7, #20]
 80191f4:	6a39      	ldr	r1, [r7, #32]
 80191f6:	68f8      	ldr	r0, [r7, #12]
 80191f8:	f000 fc68 	bl	8019acc <I2C_WaitOnSTOPFlagUntilTimeout>
 80191fc:	4603      	mov	r3, r0
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d001      	beq.n	8019206 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8019202:	2301      	movs	r3, #1
 8019204:	e01a      	b.n	801923c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	2220      	movs	r2, #32
 801920c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	6859      	ldr	r1, [r3, #4]
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	681a      	ldr	r2, [r3, #0]
 8019218:	4b0b      	ldr	r3, [pc, #44]	; (8019248 <HAL_I2C_Master_Transmit+0x1e4>)
 801921a:	400b      	ands	r3, r1
 801921c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	2220      	movs	r2, #32
 8019222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	2200      	movs	r2, #0
 801922a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	2200      	movs	r2, #0
 8019232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019236:	2300      	movs	r3, #0
 8019238:	e000      	b.n	801923c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 801923a:	2302      	movs	r3, #2
  }
}
 801923c:	4618      	mov	r0, r3
 801923e:	3718      	adds	r7, #24
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}
 8019244:	80002000 	.word	0x80002000
 8019248:	fe00e800 	.word	0xfe00e800

0801924c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b088      	sub	sp, #32
 8019250:	af02      	add	r7, sp, #8
 8019252:	60f8      	str	r0, [r7, #12]
 8019254:	607a      	str	r2, [r7, #4]
 8019256:	461a      	mov	r2, r3
 8019258:	460b      	mov	r3, r1
 801925a:	817b      	strh	r3, [r7, #10]
 801925c:	4613      	mov	r3, r2
 801925e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019266:	b2db      	uxtb	r3, r3
 8019268:	2b20      	cmp	r3, #32
 801926a:	f040 80db 	bne.w	8019424 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019274:	2b01      	cmp	r3, #1
 8019276:	d101      	bne.n	801927c <HAL_I2C_Master_Receive+0x30>
 8019278:	2302      	movs	r3, #2
 801927a:	e0d4      	b.n	8019426 <HAL_I2C_Master_Receive+0x1da>
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	2201      	movs	r2, #1
 8019280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8019284:	f7fe ff02 	bl	801808c <HAL_GetTick>
 8019288:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801928a:	697b      	ldr	r3, [r7, #20]
 801928c:	9300      	str	r3, [sp, #0]
 801928e:	2319      	movs	r3, #25
 8019290:	2201      	movs	r2, #1
 8019292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019296:	68f8      	ldr	r0, [r7, #12]
 8019298:	f000 fb82 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 801929c:	4603      	mov	r3, r0
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d001      	beq.n	80192a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80192a2:	2301      	movs	r3, #1
 80192a4:	e0bf      	b.n	8019426 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	2222      	movs	r2, #34	; 0x22
 80192aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	2210      	movs	r2, #16
 80192b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	2200      	movs	r2, #0
 80192ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	687a      	ldr	r2, [r7, #4]
 80192c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	893a      	ldrh	r2, [r7, #8]
 80192c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	2200      	movs	r2, #0
 80192cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192d2:	b29b      	uxth	r3, r3
 80192d4:	2bff      	cmp	r3, #255	; 0xff
 80192d6:	d90e      	bls.n	80192f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	22ff      	movs	r2, #255	; 0xff
 80192dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80192e2:	b2da      	uxtb	r2, r3
 80192e4:	8979      	ldrh	r1, [r7, #10]
 80192e6:	4b52      	ldr	r3, [pc, #328]	; (8019430 <HAL_I2C_Master_Receive+0x1e4>)
 80192e8:	9300      	str	r3, [sp, #0]
 80192ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80192ee:	68f8      	ldr	r0, [r7, #12]
 80192f0:	f000 fd92 	bl	8019e18 <I2C_TransferConfig>
 80192f4:	e06d      	b.n	80193d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192fa:	b29a      	uxth	r2, r3
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019304:	b2da      	uxtb	r2, r3
 8019306:	8979      	ldrh	r1, [r7, #10]
 8019308:	4b49      	ldr	r3, [pc, #292]	; (8019430 <HAL_I2C_Master_Receive+0x1e4>)
 801930a:	9300      	str	r3, [sp, #0]
 801930c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019310:	68f8      	ldr	r0, [r7, #12]
 8019312:	f000 fd81 	bl	8019e18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8019316:	e05c      	b.n	80193d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019318:	697a      	ldr	r2, [r7, #20]
 801931a:	6a39      	ldr	r1, [r7, #32]
 801931c:	68f8      	ldr	r0, [r7, #12]
 801931e:	f000 fc19 	bl	8019b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8019322:	4603      	mov	r3, r0
 8019324:	2b00      	cmp	r3, #0
 8019326:	d001      	beq.n	801932c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8019328:	2301      	movs	r3, #1
 801932a:	e07c      	b.n	8019426 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019336:	b2d2      	uxtb	r2, r2
 8019338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801933e:	1c5a      	adds	r2, r3, #1
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019348:	3b01      	subs	r3, #1
 801934a:	b29a      	uxth	r2, r3
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019354:	b29b      	uxth	r3, r3
 8019356:	3b01      	subs	r3, #1
 8019358:	b29a      	uxth	r2, r3
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019362:	b29b      	uxth	r3, r3
 8019364:	2b00      	cmp	r3, #0
 8019366:	d034      	beq.n	80193d2 <HAL_I2C_Master_Receive+0x186>
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801936c:	2b00      	cmp	r3, #0
 801936e:	d130      	bne.n	80193d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019370:	697b      	ldr	r3, [r7, #20]
 8019372:	9300      	str	r3, [sp, #0]
 8019374:	6a3b      	ldr	r3, [r7, #32]
 8019376:	2200      	movs	r2, #0
 8019378:	2180      	movs	r1, #128	; 0x80
 801937a:	68f8      	ldr	r0, [r7, #12]
 801937c:	f000 fb10 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 8019380:	4603      	mov	r3, r0
 8019382:	2b00      	cmp	r3, #0
 8019384:	d001      	beq.n	801938a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8019386:	2301      	movs	r3, #1
 8019388:	e04d      	b.n	8019426 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801938e:	b29b      	uxth	r3, r3
 8019390:	2bff      	cmp	r3, #255	; 0xff
 8019392:	d90e      	bls.n	80193b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	22ff      	movs	r2, #255	; 0xff
 8019398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801939e:	b2da      	uxtb	r2, r3
 80193a0:	8979      	ldrh	r1, [r7, #10]
 80193a2:	2300      	movs	r3, #0
 80193a4:	9300      	str	r3, [sp, #0]
 80193a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80193aa:	68f8      	ldr	r0, [r7, #12]
 80193ac:	f000 fd34 	bl	8019e18 <I2C_TransferConfig>
 80193b0:	e00f      	b.n	80193d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193b6:	b29a      	uxth	r2, r3
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193c0:	b2da      	uxtb	r2, r3
 80193c2:	8979      	ldrh	r1, [r7, #10]
 80193c4:	2300      	movs	r3, #0
 80193c6:	9300      	str	r3, [sp, #0]
 80193c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80193cc:	68f8      	ldr	r0, [r7, #12]
 80193ce:	f000 fd23 	bl	8019e18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193d6:	b29b      	uxth	r3, r3
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d19d      	bne.n	8019318 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80193dc:	697a      	ldr	r2, [r7, #20]
 80193de:	6a39      	ldr	r1, [r7, #32]
 80193e0:	68f8      	ldr	r0, [r7, #12]
 80193e2:	f000 fb73 	bl	8019acc <I2C_WaitOnSTOPFlagUntilTimeout>
 80193e6:	4603      	mov	r3, r0
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d001      	beq.n	80193f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80193ec:	2301      	movs	r3, #1
 80193ee:	e01a      	b.n	8019426 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2220      	movs	r2, #32
 80193f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	6859      	ldr	r1, [r3, #4]
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	681a      	ldr	r2, [r3, #0]
 8019402:	4b0c      	ldr	r3, [pc, #48]	; (8019434 <HAL_I2C_Master_Receive+0x1e8>)
 8019404:	400b      	ands	r3, r1
 8019406:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	2220      	movs	r2, #32
 801940c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	2200      	movs	r2, #0
 8019414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	2200      	movs	r2, #0
 801941c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019420:	2300      	movs	r3, #0
 8019422:	e000      	b.n	8019426 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8019424:	2302      	movs	r3, #2
  }
}
 8019426:	4618      	mov	r0, r3
 8019428:	3718      	adds	r7, #24
 801942a:	46bd      	mov	sp, r7
 801942c:	bd80      	pop	{r7, pc}
 801942e:	bf00      	nop
 8019430:	80002400 	.word	0x80002400
 8019434:	fe00e800 	.word	0xfe00e800

08019438 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b088      	sub	sp, #32
 801943c:	af02      	add	r7, sp, #8
 801943e:	60f8      	str	r0, [r7, #12]
 8019440:	4608      	mov	r0, r1
 8019442:	4611      	mov	r1, r2
 8019444:	461a      	mov	r2, r3
 8019446:	4603      	mov	r3, r0
 8019448:	817b      	strh	r3, [r7, #10]
 801944a:	460b      	mov	r3, r1
 801944c:	813b      	strh	r3, [r7, #8]
 801944e:	4613      	mov	r3, r2
 8019450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019458:	b2db      	uxtb	r3, r3
 801945a:	2b20      	cmp	r3, #32
 801945c:	f040 80fd 	bne.w	801965a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8019460:	6a3b      	ldr	r3, [r7, #32]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d002      	beq.n	801946c <HAL_I2C_Mem_Read+0x34>
 8019466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019468:	2b00      	cmp	r3, #0
 801946a:	d105      	bne.n	8019478 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019472:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8019474:	2301      	movs	r3, #1
 8019476:	e0f1      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801947e:	2b01      	cmp	r3, #1
 8019480:	d101      	bne.n	8019486 <HAL_I2C_Mem_Read+0x4e>
 8019482:	2302      	movs	r3, #2
 8019484:	e0ea      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	2201      	movs	r2, #1
 801948a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801948e:	f7fe fdfd 	bl	801808c <HAL_GetTick>
 8019492:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8019494:	697b      	ldr	r3, [r7, #20]
 8019496:	9300      	str	r3, [sp, #0]
 8019498:	2319      	movs	r3, #25
 801949a:	2201      	movs	r2, #1
 801949c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80194a0:	68f8      	ldr	r0, [r7, #12]
 80194a2:	f000 fa7d 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 80194a6:	4603      	mov	r3, r0
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d001      	beq.n	80194b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80194ac:	2301      	movs	r3, #1
 80194ae:	e0d5      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	2222      	movs	r2, #34	; 0x22
 80194b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	2240      	movs	r2, #64	; 0x40
 80194bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	2200      	movs	r2, #0
 80194c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	6a3a      	ldr	r2, [r7, #32]
 80194ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80194d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	2200      	movs	r2, #0
 80194d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80194d8:	88f8      	ldrh	r0, [r7, #6]
 80194da:	893a      	ldrh	r2, [r7, #8]
 80194dc:	8979      	ldrh	r1, [r7, #10]
 80194de:	697b      	ldr	r3, [r7, #20]
 80194e0:	9301      	str	r3, [sp, #4]
 80194e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e4:	9300      	str	r3, [sp, #0]
 80194e6:	4603      	mov	r3, r0
 80194e8:	68f8      	ldr	r0, [r7, #12]
 80194ea:	f000 f9e1 	bl	80198b0 <I2C_RequestMemoryRead>
 80194ee:	4603      	mov	r3, r0
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d005      	beq.n	8019500 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	2200      	movs	r2, #0
 80194f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80194fc:	2301      	movs	r3, #1
 80194fe:	e0ad      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019504:	b29b      	uxth	r3, r3
 8019506:	2bff      	cmp	r3, #255	; 0xff
 8019508:	d90e      	bls.n	8019528 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	22ff      	movs	r2, #255	; 0xff
 801950e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019514:	b2da      	uxtb	r2, r3
 8019516:	8979      	ldrh	r1, [r7, #10]
 8019518:	4b52      	ldr	r3, [pc, #328]	; (8019664 <HAL_I2C_Mem_Read+0x22c>)
 801951a:	9300      	str	r3, [sp, #0]
 801951c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019520:	68f8      	ldr	r0, [r7, #12]
 8019522:	f000 fc79 	bl	8019e18 <I2C_TransferConfig>
 8019526:	e00f      	b.n	8019548 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801952c:	b29a      	uxth	r2, r3
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019536:	b2da      	uxtb	r2, r3
 8019538:	8979      	ldrh	r1, [r7, #10]
 801953a:	4b4a      	ldr	r3, [pc, #296]	; (8019664 <HAL_I2C_Mem_Read+0x22c>)
 801953c:	9300      	str	r3, [sp, #0]
 801953e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019542:	68f8      	ldr	r0, [r7, #12]
 8019544:	f000 fc68 	bl	8019e18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8019548:	697b      	ldr	r3, [r7, #20]
 801954a:	9300      	str	r3, [sp, #0]
 801954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801954e:	2200      	movs	r2, #0
 8019550:	2104      	movs	r1, #4
 8019552:	68f8      	ldr	r0, [r7, #12]
 8019554:	f000 fa24 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 8019558:	4603      	mov	r3, r0
 801955a:	2b00      	cmp	r3, #0
 801955c:	d001      	beq.n	8019562 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801955e:	2301      	movs	r3, #1
 8019560:	e07c      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801956c:	b2d2      	uxtb	r2, r2
 801956e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019574:	1c5a      	adds	r2, r3, #1
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801957e:	3b01      	subs	r3, #1
 8019580:	b29a      	uxth	r2, r3
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801958a:	b29b      	uxth	r3, r3
 801958c:	3b01      	subs	r3, #1
 801958e:	b29a      	uxth	r2, r3
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019598:	b29b      	uxth	r3, r3
 801959a:	2b00      	cmp	r3, #0
 801959c:	d034      	beq.n	8019608 <HAL_I2C_Mem_Read+0x1d0>
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d130      	bne.n	8019608 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80195a6:	697b      	ldr	r3, [r7, #20]
 80195a8:	9300      	str	r3, [sp, #0]
 80195aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195ac:	2200      	movs	r2, #0
 80195ae:	2180      	movs	r1, #128	; 0x80
 80195b0:	68f8      	ldr	r0, [r7, #12]
 80195b2:	f000 f9f5 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 80195b6:	4603      	mov	r3, r0
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d001      	beq.n	80195c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80195bc:	2301      	movs	r3, #1
 80195be:	e04d      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	2bff      	cmp	r3, #255	; 0xff
 80195c8:	d90e      	bls.n	80195e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	22ff      	movs	r2, #255	; 0xff
 80195ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195d4:	b2da      	uxtb	r2, r3
 80195d6:	8979      	ldrh	r1, [r7, #10]
 80195d8:	2300      	movs	r3, #0
 80195da:	9300      	str	r3, [sp, #0]
 80195dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80195e0:	68f8      	ldr	r0, [r7, #12]
 80195e2:	f000 fc19 	bl	8019e18 <I2C_TransferConfig>
 80195e6:	e00f      	b.n	8019608 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195ec:	b29a      	uxth	r2, r3
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195f6:	b2da      	uxtb	r2, r3
 80195f8:	8979      	ldrh	r1, [r7, #10]
 80195fa:	2300      	movs	r3, #0
 80195fc:	9300      	str	r3, [sp, #0]
 80195fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019602:	68f8      	ldr	r0, [r7, #12]
 8019604:	f000 fc08 	bl	8019e18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801960c:	b29b      	uxth	r3, r3
 801960e:	2b00      	cmp	r3, #0
 8019610:	d19a      	bne.n	8019548 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019612:	697a      	ldr	r2, [r7, #20]
 8019614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019616:	68f8      	ldr	r0, [r7, #12]
 8019618:	f000 fa58 	bl	8019acc <I2C_WaitOnSTOPFlagUntilTimeout>
 801961c:	4603      	mov	r3, r0
 801961e:	2b00      	cmp	r3, #0
 8019620:	d001      	beq.n	8019626 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8019622:	2301      	movs	r3, #1
 8019624:	e01a      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	2220      	movs	r2, #32
 801962c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	6859      	ldr	r1, [r3, #4]
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	681a      	ldr	r2, [r3, #0]
 8019638:	4b0b      	ldr	r3, [pc, #44]	; (8019668 <HAL_I2C_Mem_Read+0x230>)
 801963a:	400b      	ands	r3, r1
 801963c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	2220      	movs	r2, #32
 8019642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	2200      	movs	r2, #0
 801964a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	2200      	movs	r2, #0
 8019652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019656:	2300      	movs	r3, #0
 8019658:	e000      	b.n	801965c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801965a:	2302      	movs	r3, #2
  }
}
 801965c:	4618      	mov	r0, r3
 801965e:	3718      	adds	r7, #24
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}
 8019664:	80002400 	.word	0x80002400
 8019668:	fe00e800 	.word	0xfe00e800

0801966c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b08a      	sub	sp, #40	; 0x28
 8019670:	af02      	add	r7, sp, #8
 8019672:	60f8      	str	r0, [r7, #12]
 8019674:	607a      	str	r2, [r7, #4]
 8019676:	603b      	str	r3, [r7, #0]
 8019678:	460b      	mov	r3, r1
 801967a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 801967c:	2300      	movs	r3, #0
 801967e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019686:	b2db      	uxtb	r3, r3
 8019688:	2b20      	cmp	r3, #32
 801968a:	f040 80f1 	bne.w	8019870 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	699b      	ldr	r3, [r3, #24]
 8019694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801969c:	d101      	bne.n	80196a2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 801969e:	2302      	movs	r3, #2
 80196a0:	e0e7      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80196a8:	2b01      	cmp	r3, #1
 80196aa:	d101      	bne.n	80196b0 <HAL_I2C_IsDeviceReady+0x44>
 80196ac:	2302      	movs	r3, #2
 80196ae:	e0e0      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	2201      	movs	r2, #1
 80196b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	2224      	movs	r2, #36	; 0x24
 80196bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	2200      	movs	r2, #0
 80196c4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	68db      	ldr	r3, [r3, #12]
 80196ca:	2b01      	cmp	r3, #1
 80196cc:	d107      	bne.n	80196de <HAL_I2C_IsDeviceReady+0x72>
 80196ce:	897b      	ldrh	r3, [r7, #10]
 80196d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80196d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80196d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80196dc:	e004      	b.n	80196e8 <HAL_I2C_IsDeviceReady+0x7c>
 80196de:	897b      	ldrh	r3, [r7, #10]
 80196e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80196e4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80196e8:	68fa      	ldr	r2, [r7, #12]
 80196ea:	6812      	ldr	r2, [r2, #0]
 80196ec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80196ee:	f7fe fccd 	bl	801808c <HAL_GetTick>
 80196f2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	699b      	ldr	r3, [r3, #24]
 80196fa:	f003 0320 	and.w	r3, r3, #32
 80196fe:	2b20      	cmp	r3, #32
 8019700:	bf0c      	ite	eq
 8019702:	2301      	moveq	r3, #1
 8019704:	2300      	movne	r3, #0
 8019706:	b2db      	uxtb	r3, r3
 8019708:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	699b      	ldr	r3, [r3, #24]
 8019710:	f003 0310 	and.w	r3, r3, #16
 8019714:	2b10      	cmp	r3, #16
 8019716:	bf0c      	ite	eq
 8019718:	2301      	moveq	r3, #1
 801971a:	2300      	movne	r3, #0
 801971c:	b2db      	uxtb	r3, r3
 801971e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8019720:	e034      	b.n	801978c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019728:	d01a      	beq.n	8019760 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801972a:	f7fe fcaf 	bl	801808c <HAL_GetTick>
 801972e:	4602      	mov	r2, r0
 8019730:	69bb      	ldr	r3, [r7, #24]
 8019732:	1ad3      	subs	r3, r2, r3
 8019734:	683a      	ldr	r2, [r7, #0]
 8019736:	429a      	cmp	r2, r3
 8019738:	d302      	bcc.n	8019740 <HAL_I2C_IsDeviceReady+0xd4>
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d10f      	bne.n	8019760 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	2220      	movs	r2, #32
 8019744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801974c:	f043 0220 	orr.w	r2, r3, #32
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	2200      	movs	r2, #0
 8019758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 801975c:	2301      	movs	r3, #1
 801975e:	e088      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	699b      	ldr	r3, [r3, #24]
 8019766:	f003 0320 	and.w	r3, r3, #32
 801976a:	2b20      	cmp	r3, #32
 801976c:	bf0c      	ite	eq
 801976e:	2301      	moveq	r3, #1
 8019770:	2300      	movne	r3, #0
 8019772:	b2db      	uxtb	r3, r3
 8019774:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	699b      	ldr	r3, [r3, #24]
 801977c:	f003 0310 	and.w	r3, r3, #16
 8019780:	2b10      	cmp	r3, #16
 8019782:	bf0c      	ite	eq
 8019784:	2301      	moveq	r3, #1
 8019786:	2300      	movne	r3, #0
 8019788:	b2db      	uxtb	r3, r3
 801978a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 801978c:	7ffb      	ldrb	r3, [r7, #31]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d102      	bne.n	8019798 <HAL_I2C_IsDeviceReady+0x12c>
 8019792:	7fbb      	ldrb	r3, [r7, #30]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d0c4      	beq.n	8019722 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	699b      	ldr	r3, [r3, #24]
 801979e:	f003 0310 	and.w	r3, r3, #16
 80197a2:	2b10      	cmp	r3, #16
 80197a4:	d01a      	beq.n	80197dc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80197a6:	69bb      	ldr	r3, [r7, #24]
 80197a8:	9300      	str	r3, [sp, #0]
 80197aa:	683b      	ldr	r3, [r7, #0]
 80197ac:	2200      	movs	r2, #0
 80197ae:	2120      	movs	r1, #32
 80197b0:	68f8      	ldr	r0, [r7, #12]
 80197b2:	f000 f8f5 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 80197b6:	4603      	mov	r3, r0
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d001      	beq.n	80197c0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80197bc:	2301      	movs	r3, #1
 80197be:	e058      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	2220      	movs	r2, #32
 80197c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	2220      	movs	r2, #32
 80197cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	2200      	movs	r2, #0
 80197d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80197d8:	2300      	movs	r3, #0
 80197da:	e04a      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80197dc:	69bb      	ldr	r3, [r7, #24]
 80197de:	9300      	str	r3, [sp, #0]
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	2200      	movs	r2, #0
 80197e4:	2120      	movs	r1, #32
 80197e6:	68f8      	ldr	r0, [r7, #12]
 80197e8:	f000 f8da 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 80197ec:	4603      	mov	r3, r0
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d001      	beq.n	80197f6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80197f2:	2301      	movs	r3, #1
 80197f4:	e03d      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	2210      	movs	r2, #16
 80197fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	2220      	movs	r2, #32
 8019804:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8019806:	697b      	ldr	r3, [r7, #20]
 8019808:	687a      	ldr	r2, [r7, #4]
 801980a:	429a      	cmp	r2, r3
 801980c:	d118      	bne.n	8019840 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	685a      	ldr	r2, [r3, #4]
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801981c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801981e:	69bb      	ldr	r3, [r7, #24]
 8019820:	9300      	str	r3, [sp, #0]
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	2200      	movs	r2, #0
 8019826:	2120      	movs	r1, #32
 8019828:	68f8      	ldr	r0, [r7, #12]
 801982a:	f000 f8b9 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 801982e:	4603      	mov	r3, r0
 8019830:	2b00      	cmp	r3, #0
 8019832:	d001      	beq.n	8019838 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8019834:	2301      	movs	r3, #1
 8019836:	e01c      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2220      	movs	r2, #32
 801983e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	3301      	adds	r3, #1
 8019844:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8019846:	697b      	ldr	r3, [r7, #20]
 8019848:	687a      	ldr	r2, [r7, #4]
 801984a:	429a      	cmp	r2, r3
 801984c:	f63f af3b 	bhi.w	80196c6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	2220      	movs	r2, #32
 8019854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801985c:	f043 0220 	orr.w	r2, r3, #32
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	2200      	movs	r2, #0
 8019868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801986c:	2301      	movs	r3, #1
 801986e:	e000      	b.n	8019872 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8019870:	2302      	movs	r3, #2
  }
}
 8019872:	4618      	mov	r0, r3
 8019874:	3720      	adds	r7, #32
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}

0801987a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 801987a:	b480      	push	{r7}
 801987c:	b083      	sub	sp, #12
 801987e:	af00      	add	r7, sp, #0
 8019880:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019888:	b2db      	uxtb	r3, r3
}
 801988a:	4618      	mov	r0, r3
 801988c:	370c      	adds	r7, #12
 801988e:	46bd      	mov	sp, r7
 8019890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019894:	4770      	bx	lr

08019896 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8019896:	b480      	push	{r7}
 8019898:	b083      	sub	sp, #12
 801989a:	af00      	add	r7, sp, #0
 801989c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80198a2:	4618      	mov	r0, r3
 80198a4:	370c      	adds	r7, #12
 80198a6:	46bd      	mov	sp, r7
 80198a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ac:	4770      	bx	lr
	...

080198b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b086      	sub	sp, #24
 80198b4:	af02      	add	r7, sp, #8
 80198b6:	60f8      	str	r0, [r7, #12]
 80198b8:	4608      	mov	r0, r1
 80198ba:	4611      	mov	r1, r2
 80198bc:	461a      	mov	r2, r3
 80198be:	4603      	mov	r3, r0
 80198c0:	817b      	strh	r3, [r7, #10]
 80198c2:	460b      	mov	r3, r1
 80198c4:	813b      	strh	r3, [r7, #8]
 80198c6:	4613      	mov	r3, r2
 80198c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80198ca:	88fb      	ldrh	r3, [r7, #6]
 80198cc:	b2da      	uxtb	r2, r3
 80198ce:	8979      	ldrh	r1, [r7, #10]
 80198d0:	4b20      	ldr	r3, [pc, #128]	; (8019954 <I2C_RequestMemoryRead+0xa4>)
 80198d2:	9300      	str	r3, [sp, #0]
 80198d4:	2300      	movs	r3, #0
 80198d6:	68f8      	ldr	r0, [r7, #12]
 80198d8:	f000 fa9e 	bl	8019e18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80198dc:	69fa      	ldr	r2, [r7, #28]
 80198de:	69b9      	ldr	r1, [r7, #24]
 80198e0:	68f8      	ldr	r0, [r7, #12]
 80198e2:	f000 f8ac 	bl	8019a3e <I2C_WaitOnTXISFlagUntilTimeout>
 80198e6:	4603      	mov	r3, r0
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d001      	beq.n	80198f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80198ec:	2301      	movs	r3, #1
 80198ee:	e02c      	b.n	801994a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80198f0:	88fb      	ldrh	r3, [r7, #6]
 80198f2:	2b01      	cmp	r3, #1
 80198f4:	d105      	bne.n	8019902 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80198f6:	893b      	ldrh	r3, [r7, #8]
 80198f8:	b2da      	uxtb	r2, r3
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	629a      	str	r2, [r3, #40]	; 0x28
 8019900:	e015      	b.n	801992e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8019902:	893b      	ldrh	r3, [r7, #8]
 8019904:	0a1b      	lsrs	r3, r3, #8
 8019906:	b29b      	uxth	r3, r3
 8019908:	b2da      	uxtb	r2, r3
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019910:	69fa      	ldr	r2, [r7, #28]
 8019912:	69b9      	ldr	r1, [r7, #24]
 8019914:	68f8      	ldr	r0, [r7, #12]
 8019916:	f000 f892 	bl	8019a3e <I2C_WaitOnTXISFlagUntilTimeout>
 801991a:	4603      	mov	r3, r0
 801991c:	2b00      	cmp	r3, #0
 801991e:	d001      	beq.n	8019924 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8019920:	2301      	movs	r3, #1
 8019922:	e012      	b.n	801994a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019924:	893b      	ldrh	r3, [r7, #8]
 8019926:	b2da      	uxtb	r2, r3
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801992e:	69fb      	ldr	r3, [r7, #28]
 8019930:	9300      	str	r3, [sp, #0]
 8019932:	69bb      	ldr	r3, [r7, #24]
 8019934:	2200      	movs	r2, #0
 8019936:	2140      	movs	r1, #64	; 0x40
 8019938:	68f8      	ldr	r0, [r7, #12]
 801993a:	f000 f831 	bl	80199a0 <I2C_WaitOnFlagUntilTimeout>
 801993e:	4603      	mov	r3, r0
 8019940:	2b00      	cmp	r3, #0
 8019942:	d001      	beq.n	8019948 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8019944:	2301      	movs	r3, #1
 8019946:	e000      	b.n	801994a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8019948:	2300      	movs	r3, #0
}
 801994a:	4618      	mov	r0, r3
 801994c:	3710      	adds	r7, #16
 801994e:	46bd      	mov	sp, r7
 8019950:	bd80      	pop	{r7, pc}
 8019952:	bf00      	nop
 8019954:	80002000 	.word	0x80002000

08019958 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8019958:	b480      	push	{r7}
 801995a:	b083      	sub	sp, #12
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	699b      	ldr	r3, [r3, #24]
 8019966:	f003 0302 	and.w	r3, r3, #2
 801996a:	2b02      	cmp	r3, #2
 801996c:	d103      	bne.n	8019976 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	2200      	movs	r2, #0
 8019974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	699b      	ldr	r3, [r3, #24]
 801997c:	f003 0301 	and.w	r3, r3, #1
 8019980:	2b01      	cmp	r3, #1
 8019982:	d007      	beq.n	8019994 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	699a      	ldr	r2, [r3, #24]
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	f042 0201 	orr.w	r2, r2, #1
 8019992:	619a      	str	r2, [r3, #24]
  }
}
 8019994:	bf00      	nop
 8019996:	370c      	adds	r7, #12
 8019998:	46bd      	mov	sp, r7
 801999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801999e:	4770      	bx	lr

080199a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b084      	sub	sp, #16
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	60f8      	str	r0, [r7, #12]
 80199a8:	60b9      	str	r1, [r7, #8]
 80199aa:	603b      	str	r3, [r7, #0]
 80199ac:	4613      	mov	r3, r2
 80199ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80199b0:	e031      	b.n	8019a16 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199b8:	d02d      	beq.n	8019a16 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80199ba:	f7fe fb67 	bl	801808c <HAL_GetTick>
 80199be:	4602      	mov	r2, r0
 80199c0:	69bb      	ldr	r3, [r7, #24]
 80199c2:	1ad3      	subs	r3, r2, r3
 80199c4:	683a      	ldr	r2, [r7, #0]
 80199c6:	429a      	cmp	r2, r3
 80199c8:	d302      	bcc.n	80199d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80199ca:	683b      	ldr	r3, [r7, #0]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d122      	bne.n	8019a16 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	699a      	ldr	r2, [r3, #24]
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	4013      	ands	r3, r2
 80199da:	68ba      	ldr	r2, [r7, #8]
 80199dc:	429a      	cmp	r2, r3
 80199de:	bf0c      	ite	eq
 80199e0:	2301      	moveq	r3, #1
 80199e2:	2300      	movne	r3, #0
 80199e4:	b2db      	uxtb	r3, r3
 80199e6:	461a      	mov	r2, r3
 80199e8:	79fb      	ldrb	r3, [r7, #7]
 80199ea:	429a      	cmp	r2, r3
 80199ec:	d113      	bne.n	8019a16 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199f2:	f043 0220 	orr.w	r2, r3, #32
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	2220      	movs	r2, #32
 80199fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	2200      	movs	r2, #0
 8019a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8019a12:	2301      	movs	r3, #1
 8019a14:	e00f      	b.n	8019a36 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	699a      	ldr	r2, [r3, #24]
 8019a1c:	68bb      	ldr	r3, [r7, #8]
 8019a1e:	4013      	ands	r3, r2
 8019a20:	68ba      	ldr	r2, [r7, #8]
 8019a22:	429a      	cmp	r2, r3
 8019a24:	bf0c      	ite	eq
 8019a26:	2301      	moveq	r3, #1
 8019a28:	2300      	movne	r3, #0
 8019a2a:	b2db      	uxtb	r3, r3
 8019a2c:	461a      	mov	r2, r3
 8019a2e:	79fb      	ldrb	r3, [r7, #7]
 8019a30:	429a      	cmp	r2, r3
 8019a32:	d0be      	beq.n	80199b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019a34:	2300      	movs	r3, #0
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3710      	adds	r7, #16
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	bd80      	pop	{r7, pc}

08019a3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8019a3e:	b580      	push	{r7, lr}
 8019a40:	b084      	sub	sp, #16
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	60f8      	str	r0, [r7, #12]
 8019a46:	60b9      	str	r1, [r7, #8]
 8019a48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8019a4a:	e033      	b.n	8019ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a4c:	687a      	ldr	r2, [r7, #4]
 8019a4e:	68b9      	ldr	r1, [r7, #8]
 8019a50:	68f8      	ldr	r0, [r7, #12]
 8019a52:	f000 f901 	bl	8019c58 <I2C_IsErrorOccurred>
 8019a56:	4603      	mov	r3, r0
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d001      	beq.n	8019a60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	e031      	b.n	8019ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019a60:	68bb      	ldr	r3, [r7, #8]
 8019a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a66:	d025      	beq.n	8019ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019a68:	f7fe fb10 	bl	801808c <HAL_GetTick>
 8019a6c:	4602      	mov	r2, r0
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	68ba      	ldr	r2, [r7, #8]
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d302      	bcc.n	8019a7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d11a      	bne.n	8019ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	699b      	ldr	r3, [r3, #24]
 8019a84:	f003 0302 	and.w	r3, r3, #2
 8019a88:	2b02      	cmp	r3, #2
 8019a8a:	d013      	beq.n	8019ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a90:	f043 0220 	orr.w	r2, r3, #32
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	2220      	movs	r2, #32
 8019a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8019ab0:	2301      	movs	r3, #1
 8019ab2:	e007      	b.n	8019ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	699b      	ldr	r3, [r3, #24]
 8019aba:	f003 0302 	and.w	r3, r3, #2
 8019abe:	2b02      	cmp	r3, #2
 8019ac0:	d1c4      	bne.n	8019a4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8019ac2:	2300      	movs	r3, #0
}
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	3710      	adds	r7, #16
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	bd80      	pop	{r7, pc}

08019acc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b084      	sub	sp, #16
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019ad8:	e02f      	b.n	8019b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8019ada:	687a      	ldr	r2, [r7, #4]
 8019adc:	68b9      	ldr	r1, [r7, #8]
 8019ade:	68f8      	ldr	r0, [r7, #12]
 8019ae0:	f000 f8ba 	bl	8019c58 <I2C_IsErrorOccurred>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d001      	beq.n	8019aee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8019aea:	2301      	movs	r3, #1
 8019aec:	e02d      	b.n	8019b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019aee:	f7fe facd 	bl	801808c <HAL_GetTick>
 8019af2:	4602      	mov	r2, r0
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	1ad3      	subs	r3, r2, r3
 8019af8:	68ba      	ldr	r2, [r7, #8]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d302      	bcc.n	8019b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d11a      	bne.n	8019b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	699b      	ldr	r3, [r3, #24]
 8019b0a:	f003 0320 	and.w	r3, r3, #32
 8019b0e:	2b20      	cmp	r3, #32
 8019b10:	d013      	beq.n	8019b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b16:	f043 0220 	orr.w	r2, r3, #32
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	2220      	movs	r2, #32
 8019b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	2200      	movs	r2, #0
 8019b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	2200      	movs	r2, #0
 8019b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8019b36:	2301      	movs	r3, #1
 8019b38:	e007      	b.n	8019b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	699b      	ldr	r3, [r3, #24]
 8019b40:	f003 0320 	and.w	r3, r3, #32
 8019b44:	2b20      	cmp	r3, #32
 8019b46:	d1c8      	bne.n	8019ada <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019b48:	2300      	movs	r3, #0
}
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	3710      	adds	r7, #16
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}
	...

08019b54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8019b54:	b580      	push	{r7, lr}
 8019b56:	b084      	sub	sp, #16
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	60f8      	str	r0, [r7, #12]
 8019b5c:	60b9      	str	r1, [r7, #8]
 8019b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019b60:	e06b      	b.n	8019c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8019b62:	687a      	ldr	r2, [r7, #4]
 8019b64:	68b9      	ldr	r1, [r7, #8]
 8019b66:	68f8      	ldr	r0, [r7, #12]
 8019b68:	f000 f876 	bl	8019c58 <I2C_IsErrorOccurred>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d001      	beq.n	8019b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8019b72:	2301      	movs	r3, #1
 8019b74:	e069      	b.n	8019c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	699b      	ldr	r3, [r3, #24]
 8019b7c:	f003 0320 	and.w	r3, r3, #32
 8019b80:	2b20      	cmp	r3, #32
 8019b82:	d138      	bne.n	8019bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	699b      	ldr	r3, [r3, #24]
 8019b8a:	f003 0304 	and.w	r3, r3, #4
 8019b8e:	2b04      	cmp	r3, #4
 8019b90:	d105      	bne.n	8019b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d001      	beq.n	8019b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	e055      	b.n	8019c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	699b      	ldr	r3, [r3, #24]
 8019ba4:	f003 0310 	and.w	r3, r3, #16
 8019ba8:	2b10      	cmp	r3, #16
 8019baa:	d107      	bne.n	8019bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	2210      	movs	r2, #16
 8019bb2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2204      	movs	r2, #4
 8019bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8019bba:	e002      	b.n	8019bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	2220      	movs	r2, #32
 8019bc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	6859      	ldr	r1, [r3, #4]
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	681a      	ldr	r2, [r3, #0]
 8019bd4:	4b1f      	ldr	r3, [pc, #124]	; (8019c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8019bd6:	400b      	ands	r3, r1
 8019bd8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	2220      	movs	r2, #32
 8019bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	2200      	movs	r2, #0
 8019be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	2200      	movs	r2, #0
 8019bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	e029      	b.n	8019c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019bf6:	f7fe fa49 	bl	801808c <HAL_GetTick>
 8019bfa:	4602      	mov	r2, r0
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	1ad3      	subs	r3, r2, r3
 8019c00:	68ba      	ldr	r2, [r7, #8]
 8019c02:	429a      	cmp	r2, r3
 8019c04:	d302      	bcc.n	8019c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8019c06:	68bb      	ldr	r3, [r7, #8]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d116      	bne.n	8019c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	699b      	ldr	r3, [r3, #24]
 8019c12:	f003 0304 	and.w	r3, r3, #4
 8019c16:	2b04      	cmp	r3, #4
 8019c18:	d00f      	beq.n	8019c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c1e:	f043 0220 	orr.w	r2, r3, #32
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	2220      	movs	r2, #32
 8019c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	2200      	movs	r2, #0
 8019c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8019c36:	2301      	movs	r3, #1
 8019c38:	e007      	b.n	8019c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	699b      	ldr	r3, [r3, #24]
 8019c40:	f003 0304 	and.w	r3, r3, #4
 8019c44:	2b04      	cmp	r3, #4
 8019c46:	d18c      	bne.n	8019b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019c48:	2300      	movs	r3, #0
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	3710      	adds	r7, #16
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}
 8019c52:	bf00      	nop
 8019c54:	fe00e800 	.word	0xfe00e800

08019c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b08a      	sub	sp, #40	; 0x28
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	60f8      	str	r0, [r7, #12]
 8019c60:	60b9      	str	r1, [r7, #8]
 8019c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019c64:	2300      	movs	r3, #0
 8019c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	699b      	ldr	r3, [r3, #24]
 8019c70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8019c72:	2300      	movs	r3, #0
 8019c74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8019c7a:	69bb      	ldr	r3, [r7, #24]
 8019c7c:	f003 0310 	and.w	r3, r3, #16
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d068      	beq.n	8019d56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	2210      	movs	r2, #16
 8019c8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8019c8c:	e049      	b.n	8019d22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c94:	d045      	beq.n	8019d22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8019c96:	f7fe f9f9 	bl	801808c <HAL_GetTick>
 8019c9a:	4602      	mov	r2, r0
 8019c9c:	69fb      	ldr	r3, [r7, #28]
 8019c9e:	1ad3      	subs	r3, r2, r3
 8019ca0:	68ba      	ldr	r2, [r7, #8]
 8019ca2:	429a      	cmp	r2, r3
 8019ca4:	d302      	bcc.n	8019cac <I2C_IsErrorOccurred+0x54>
 8019ca6:	68bb      	ldr	r3, [r7, #8]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d13a      	bne.n	8019d22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019cb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019cbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	699b      	ldr	r3, [r3, #24]
 8019cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019cce:	d121      	bne.n	8019d14 <I2C_IsErrorOccurred+0xbc>
 8019cd0:	697b      	ldr	r3, [r7, #20]
 8019cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019cd6:	d01d      	beq.n	8019d14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8019cd8:	7cfb      	ldrb	r3, [r7, #19]
 8019cda:	2b20      	cmp	r3, #32
 8019cdc:	d01a      	beq.n	8019d14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	685a      	ldr	r2, [r3, #4]
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019cec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8019cee:	f7fe f9cd 	bl	801808c <HAL_GetTick>
 8019cf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019cf4:	e00e      	b.n	8019d14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8019cf6:	f7fe f9c9 	bl	801808c <HAL_GetTick>
 8019cfa:	4602      	mov	r2, r0
 8019cfc:	69fb      	ldr	r3, [r7, #28]
 8019cfe:	1ad3      	subs	r3, r2, r3
 8019d00:	2b19      	cmp	r3, #25
 8019d02:	d907      	bls.n	8019d14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8019d04:	6a3b      	ldr	r3, [r7, #32]
 8019d06:	f043 0320 	orr.w	r3, r3, #32
 8019d0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8019d12:	e006      	b.n	8019d22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	699b      	ldr	r3, [r3, #24]
 8019d1a:	f003 0320 	and.w	r3, r3, #32
 8019d1e:	2b20      	cmp	r3, #32
 8019d20:	d1e9      	bne.n	8019cf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	699b      	ldr	r3, [r3, #24]
 8019d28:	f003 0320 	and.w	r3, r3, #32
 8019d2c:	2b20      	cmp	r3, #32
 8019d2e:	d003      	beq.n	8019d38 <I2C_IsErrorOccurred+0xe0>
 8019d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d0aa      	beq.n	8019c8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8019d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d103      	bne.n	8019d48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	2220      	movs	r2, #32
 8019d46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8019d48:	6a3b      	ldr	r3, [r7, #32]
 8019d4a:	f043 0304 	orr.w	r3, r3, #4
 8019d4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8019d50:	2301      	movs	r3, #1
 8019d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	699b      	ldr	r3, [r3, #24]
 8019d5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8019d5e:	69bb      	ldr	r3, [r7, #24]
 8019d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d00b      	beq.n	8019d80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8019d68:	6a3b      	ldr	r3, [r7, #32]
 8019d6a:	f043 0301 	orr.w	r3, r3, #1
 8019d6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019d7a:	2301      	movs	r3, #1
 8019d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8019d80:	69bb      	ldr	r3, [r7, #24]
 8019d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d00b      	beq.n	8019da2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8019d8a:	6a3b      	ldr	r3, [r7, #32]
 8019d8c:	f043 0308 	orr.w	r3, r3, #8
 8019d90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019d9c:	2301      	movs	r3, #1
 8019d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8019da2:	69bb      	ldr	r3, [r7, #24]
 8019da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d00b      	beq.n	8019dc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8019dac:	6a3b      	ldr	r3, [r7, #32]
 8019dae:	f043 0302 	orr.w	r3, r3, #2
 8019db2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8019dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d01c      	beq.n	8019e06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8019dcc:	68f8      	ldr	r0, [r7, #12]
 8019dce:	f7ff fdc3 	bl	8019958 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	6859      	ldr	r1, [r3, #4]
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	681a      	ldr	r2, [r3, #0]
 8019ddc:	4b0d      	ldr	r3, [pc, #52]	; (8019e14 <I2C_IsErrorOccurred+0x1bc>)
 8019dde:	400b      	ands	r3, r1
 8019de0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019de6:	6a3b      	ldr	r3, [r7, #32]
 8019de8:	431a      	orrs	r2, r3
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	2220      	movs	r2, #32
 8019df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	2200      	movs	r2, #0
 8019dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	2200      	movs	r2, #0
 8019e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8019e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	3728      	adds	r7, #40	; 0x28
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	bd80      	pop	{r7, pc}
 8019e12:	bf00      	nop
 8019e14:	fe00e800 	.word	0xfe00e800

08019e18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8019e18:	b480      	push	{r7}
 8019e1a:	b087      	sub	sp, #28
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	60f8      	str	r0, [r7, #12]
 8019e20:	607b      	str	r3, [r7, #4]
 8019e22:	460b      	mov	r3, r1
 8019e24:	817b      	strh	r3, [r7, #10]
 8019e26:	4613      	mov	r3, r2
 8019e28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8019e2a:	897b      	ldrh	r3, [r7, #10]
 8019e2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8019e30:	7a7b      	ldrb	r3, [r7, #9]
 8019e32:	041b      	lsls	r3, r3, #16
 8019e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8019e38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8019e3e:	6a3b      	ldr	r3, [r7, #32]
 8019e40:	4313      	orrs	r3, r2
 8019e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019e46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	685a      	ldr	r2, [r3, #4]
 8019e4e:	6a3b      	ldr	r3, [r7, #32]
 8019e50:	0d5b      	lsrs	r3, r3, #21
 8019e52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8019e56:	4b08      	ldr	r3, [pc, #32]	; (8019e78 <I2C_TransferConfig+0x60>)
 8019e58:	430b      	orrs	r3, r1
 8019e5a:	43db      	mvns	r3, r3
 8019e5c:	ea02 0103 	and.w	r1, r2, r3
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	697a      	ldr	r2, [r7, #20]
 8019e66:	430a      	orrs	r2, r1
 8019e68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8019e6a:	bf00      	nop
 8019e6c:	371c      	adds	r7, #28
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e74:	4770      	bx	lr
 8019e76:	bf00      	nop
 8019e78:	03ff63ff 	.word	0x03ff63ff

08019e7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8019e7c:	b480      	push	{r7}
 8019e7e:	b083      	sub	sp, #12
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
 8019e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019e8c:	b2db      	uxtb	r3, r3
 8019e8e:	2b20      	cmp	r3, #32
 8019e90:	d138      	bne.n	8019f04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019e98:	2b01      	cmp	r3, #1
 8019e9a:	d101      	bne.n	8019ea0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8019e9c:	2302      	movs	r3, #2
 8019e9e:	e032      	b.n	8019f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	2201      	movs	r2, #1
 8019ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	2224      	movs	r2, #36	; 0x24
 8019eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	681a      	ldr	r2, [r3, #0]
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	f022 0201 	bic.w	r2, r2, #1
 8019ebe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	681a      	ldr	r2, [r3, #0]
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019ece:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	6819      	ldr	r1, [r3, #0]
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	683a      	ldr	r2, [r7, #0]
 8019edc:	430a      	orrs	r2, r1
 8019ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	681a      	ldr	r2, [r3, #0]
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	f042 0201 	orr.w	r2, r2, #1
 8019eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	2220      	movs	r2, #32
 8019ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	2200      	movs	r2, #0
 8019efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019f00:	2300      	movs	r3, #0
 8019f02:	e000      	b.n	8019f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8019f04:	2302      	movs	r3, #2
  }
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	370c      	adds	r7, #12
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f10:	4770      	bx	lr

08019f12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8019f12:	b480      	push	{r7}
 8019f14:	b085      	sub	sp, #20
 8019f16:	af00      	add	r7, sp, #0
 8019f18:	6078      	str	r0, [r7, #4]
 8019f1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f22:	b2db      	uxtb	r3, r3
 8019f24:	2b20      	cmp	r3, #32
 8019f26:	d139      	bne.n	8019f9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019f2e:	2b01      	cmp	r3, #1
 8019f30:	d101      	bne.n	8019f36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8019f32:	2302      	movs	r3, #2
 8019f34:	e033      	b.n	8019f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	2201      	movs	r2, #1
 8019f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	2224      	movs	r2, #36	; 0x24
 8019f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	681a      	ldr	r2, [r3, #0]
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	f022 0201 	bic.w	r2, r2, #1
 8019f54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019f64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8019f66:	683b      	ldr	r3, [r7, #0]
 8019f68:	021b      	lsls	r3, r3, #8
 8019f6a:	68fa      	ldr	r2, [r7, #12]
 8019f6c:	4313      	orrs	r3, r2
 8019f6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	68fa      	ldr	r2, [r7, #12]
 8019f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	681a      	ldr	r2, [r3, #0]
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	f042 0201 	orr.w	r2, r2, #1
 8019f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	2220      	movs	r2, #32
 8019f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	2200      	movs	r2, #0
 8019f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019f98:	2300      	movs	r3, #0
 8019f9a:	e000      	b.n	8019f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8019f9c:	2302      	movs	r3, #2
  }
}
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	3714      	adds	r7, #20
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa8:	4770      	bx	lr

08019faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fac:	b08b      	sub	sp, #44	; 0x2c
 8019fae:	af06      	add	r7, sp, #24
 8019fb0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d101      	bne.n	8019fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019fb8:	2301      	movs	r3, #1
 8019fba:	e0cb      	b.n	801a154 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d106      	bne.n	8019fd6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	2200      	movs	r2, #0
 8019fcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019fd0:	6878      	ldr	r0, [r7, #4]
 8019fd2:	f7e9 fead 	bl	8003d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	2203      	movs	r2, #3
 8019fda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	f003 fb98 	bl	801d718 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019fe8:	2300      	movs	r3, #0
 8019fea:	73fb      	strb	r3, [r7, #15]
 8019fec:	e040      	b.n	801a070 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019fee:	7bfb      	ldrb	r3, [r7, #15]
 8019ff0:	6879      	ldr	r1, [r7, #4]
 8019ff2:	1c5a      	adds	r2, r3, #1
 8019ff4:	4613      	mov	r3, r2
 8019ff6:	009b      	lsls	r3, r3, #2
 8019ff8:	4413      	add	r3, r2
 8019ffa:	00db      	lsls	r3, r3, #3
 8019ffc:	440b      	add	r3, r1
 8019ffe:	3301      	adds	r3, #1
 801a000:	2201      	movs	r2, #1
 801a002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801a004:	7bfb      	ldrb	r3, [r7, #15]
 801a006:	6879      	ldr	r1, [r7, #4]
 801a008:	1c5a      	adds	r2, r3, #1
 801a00a:	4613      	mov	r3, r2
 801a00c:	009b      	lsls	r3, r3, #2
 801a00e:	4413      	add	r3, r2
 801a010:	00db      	lsls	r3, r3, #3
 801a012:	440b      	add	r3, r1
 801a014:	7bfa      	ldrb	r2, [r7, #15]
 801a016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801a018:	7bfb      	ldrb	r3, [r7, #15]
 801a01a:	6879      	ldr	r1, [r7, #4]
 801a01c:	1c5a      	adds	r2, r3, #1
 801a01e:	4613      	mov	r3, r2
 801a020:	009b      	lsls	r3, r3, #2
 801a022:	4413      	add	r3, r2
 801a024:	00db      	lsls	r3, r3, #3
 801a026:	440b      	add	r3, r1
 801a028:	3303      	adds	r3, #3
 801a02a:	2200      	movs	r2, #0
 801a02c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801a02e:	7bfa      	ldrb	r2, [r7, #15]
 801a030:	6879      	ldr	r1, [r7, #4]
 801a032:	4613      	mov	r3, r2
 801a034:	009b      	lsls	r3, r3, #2
 801a036:	4413      	add	r3, r2
 801a038:	00db      	lsls	r3, r3, #3
 801a03a:	440b      	add	r3, r1
 801a03c:	3338      	adds	r3, #56	; 0x38
 801a03e:	2200      	movs	r2, #0
 801a040:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801a042:	7bfa      	ldrb	r2, [r7, #15]
 801a044:	6879      	ldr	r1, [r7, #4]
 801a046:	4613      	mov	r3, r2
 801a048:	009b      	lsls	r3, r3, #2
 801a04a:	4413      	add	r3, r2
 801a04c:	00db      	lsls	r3, r3, #3
 801a04e:	440b      	add	r3, r1
 801a050:	333c      	adds	r3, #60	; 0x3c
 801a052:	2200      	movs	r2, #0
 801a054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801a056:	7bfa      	ldrb	r2, [r7, #15]
 801a058:	6879      	ldr	r1, [r7, #4]
 801a05a:	4613      	mov	r3, r2
 801a05c:	009b      	lsls	r3, r3, #2
 801a05e:	4413      	add	r3, r2
 801a060:	00db      	lsls	r3, r3, #3
 801a062:	440b      	add	r3, r1
 801a064:	3340      	adds	r3, #64	; 0x40
 801a066:	2200      	movs	r2, #0
 801a068:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a06a:	7bfb      	ldrb	r3, [r7, #15]
 801a06c:	3301      	adds	r3, #1
 801a06e:	73fb      	strb	r3, [r7, #15]
 801a070:	7bfa      	ldrb	r2, [r7, #15]
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	429a      	cmp	r2, r3
 801a078:	d3b9      	bcc.n	8019fee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a07a:	2300      	movs	r3, #0
 801a07c:	73fb      	strb	r3, [r7, #15]
 801a07e:	e044      	b.n	801a10a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801a080:	7bfa      	ldrb	r2, [r7, #15]
 801a082:	6879      	ldr	r1, [r7, #4]
 801a084:	4613      	mov	r3, r2
 801a086:	009b      	lsls	r3, r3, #2
 801a088:	4413      	add	r3, r2
 801a08a:	00db      	lsls	r3, r3, #3
 801a08c:	440b      	add	r3, r1
 801a08e:	f203 1369 	addw	r3, r3, #361	; 0x169
 801a092:	2200      	movs	r2, #0
 801a094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801a096:	7bfa      	ldrb	r2, [r7, #15]
 801a098:	6879      	ldr	r1, [r7, #4]
 801a09a:	4613      	mov	r3, r2
 801a09c:	009b      	lsls	r3, r3, #2
 801a09e:	4413      	add	r3, r2
 801a0a0:	00db      	lsls	r3, r3, #3
 801a0a2:	440b      	add	r3, r1
 801a0a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801a0a8:	7bfa      	ldrb	r2, [r7, #15]
 801a0aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801a0ac:	7bfa      	ldrb	r2, [r7, #15]
 801a0ae:	6879      	ldr	r1, [r7, #4]
 801a0b0:	4613      	mov	r3, r2
 801a0b2:	009b      	lsls	r3, r3, #2
 801a0b4:	4413      	add	r3, r2
 801a0b6:	00db      	lsls	r3, r3, #3
 801a0b8:	440b      	add	r3, r1
 801a0ba:	f203 136b 	addw	r3, r3, #363	; 0x16b
 801a0be:	2200      	movs	r2, #0
 801a0c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801a0c2:	7bfa      	ldrb	r2, [r7, #15]
 801a0c4:	6879      	ldr	r1, [r7, #4]
 801a0c6:	4613      	mov	r3, r2
 801a0c8:	009b      	lsls	r3, r3, #2
 801a0ca:	4413      	add	r3, r2
 801a0cc:	00db      	lsls	r3, r3, #3
 801a0ce:	440b      	add	r3, r1
 801a0d0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801a0d8:	7bfa      	ldrb	r2, [r7, #15]
 801a0da:	6879      	ldr	r1, [r7, #4]
 801a0dc:	4613      	mov	r3, r2
 801a0de:	009b      	lsls	r3, r3, #2
 801a0e0:	4413      	add	r3, r2
 801a0e2:	00db      	lsls	r3, r3, #3
 801a0e4:	440b      	add	r3, r1
 801a0e6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801a0ee:	7bfa      	ldrb	r2, [r7, #15]
 801a0f0:	6879      	ldr	r1, [r7, #4]
 801a0f2:	4613      	mov	r3, r2
 801a0f4:	009b      	lsls	r3, r3, #2
 801a0f6:	4413      	add	r3, r2
 801a0f8:	00db      	lsls	r3, r3, #3
 801a0fa:	440b      	add	r3, r1
 801a0fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801a100:	2200      	movs	r2, #0
 801a102:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a104:	7bfb      	ldrb	r3, [r7, #15]
 801a106:	3301      	adds	r3, #1
 801a108:	73fb      	strb	r3, [r7, #15]
 801a10a:	7bfa      	ldrb	r2, [r7, #15]
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	685b      	ldr	r3, [r3, #4]
 801a110:	429a      	cmp	r2, r3
 801a112:	d3b5      	bcc.n	801a080 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	603b      	str	r3, [r7, #0]
 801a11a:	687e      	ldr	r6, [r7, #4]
 801a11c:	466d      	mov	r5, sp
 801a11e:	f106 0410 	add.w	r4, r6, #16
 801a122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a126:	6823      	ldr	r3, [r4, #0]
 801a128:	602b      	str	r3, [r5, #0]
 801a12a:	1d33      	adds	r3, r6, #4
 801a12c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a12e:	6838      	ldr	r0, [r7, #0]
 801a130:	f003 fb0d 	bl	801d74e <USB_DevInit>

  hpcd->USB_Address = 0U;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2200      	movs	r2, #0
 801a138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	2201      	movs	r2, #1
 801a140:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	69db      	ldr	r3, [r3, #28]
 801a148:	2b01      	cmp	r3, #1
 801a14a:	d102      	bne.n	801a152 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801a14c:	6878      	ldr	r0, [r7, #4]
 801a14e:	f000 f805 	bl	801a15c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801a152:	2300      	movs	r3, #0
}
 801a154:	4618      	mov	r0, r3
 801a156:	3714      	adds	r7, #20
 801a158:	46bd      	mov	sp, r7
 801a15a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a15c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801a15c:	b480      	push	{r7}
 801a15e:	b085      	sub	sp, #20
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	2201      	movs	r2, #1
 801a16e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	2200      	movs	r2, #0
 801a176:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a180:	b29b      	uxth	r3, r3
 801a182:	f043 0301 	orr.w	r3, r3, #1
 801a186:	b29a      	uxth	r2, r3
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a194:	b29b      	uxth	r3, r3
 801a196:	f043 0302 	orr.w	r3, r3, #2
 801a19a:	b29a      	uxth	r2, r3
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801a1a2:	2300      	movs	r3, #0
}
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	3714      	adds	r7, #20
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ae:	4770      	bx	lr

0801a1b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a1b0:	b480      	push	{r7}
 801a1b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801a1b4:	4b05      	ldr	r3, [pc, #20]	; (801a1cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	4a04      	ldr	r2, [pc, #16]	; (801a1cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 801a1ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a1be:	6013      	str	r3, [r2, #0]
}
 801a1c0:	bf00      	nop
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c8:	4770      	bx	lr
 801a1ca:	bf00      	nop
 801a1cc:	58000400 	.word	0x58000400

0801a1d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801a1d0:	b480      	push	{r7}
 801a1d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 801a1d4:	4b04      	ldr	r3, [pc, #16]	; (801a1e8 <HAL_PWREx_GetVoltageRange+0x18>)
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e4:	4770      	bx	lr
 801a1e6:	bf00      	nop
 801a1e8:	58000400 	.word	0x58000400

0801a1ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801a1f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a1fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a1fe:	d101      	bne.n	801a204 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801a200:	2301      	movs	r3, #1
 801a202:	e000      	b.n	801a206 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 801a204:	2300      	movs	r3, #0
}
 801a206:	4618      	mov	r0, r3
 801a208:	46bd      	mov	sp, r7
 801a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20e:	4770      	bx	lr

0801a210 <LL_RCC_HSE_Enable>:
{
 801a210:	b480      	push	{r7}
 801a212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801a214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a21e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a222:	6013      	str	r3, [r2, #0]
}
 801a224:	bf00      	nop
 801a226:	46bd      	mov	sp, r7
 801a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22c:	4770      	bx	lr

0801a22e <LL_RCC_HSE_Disable>:
{
 801a22e:	b480      	push	{r7}
 801a230:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801a232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a23c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a240:	6013      	str	r3, [r2, #0]
}
 801a242:	bf00      	nop
 801a244:	46bd      	mov	sp, r7
 801a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24a:	4770      	bx	lr

0801a24c <LL_RCC_HSE_IsReady>:
{
 801a24c:	b480      	push	{r7}
 801a24e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801a250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a25a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801a25e:	d101      	bne.n	801a264 <LL_RCC_HSE_IsReady+0x18>
 801a260:	2301      	movs	r3, #1
 801a262:	e000      	b.n	801a266 <LL_RCC_HSE_IsReady+0x1a>
 801a264:	2300      	movs	r3, #0
}
 801a266:	4618      	mov	r0, r3
 801a268:	46bd      	mov	sp, r7
 801a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26e:	4770      	bx	lr

0801a270 <LL_RCC_HSI_Enable>:
{
 801a270:	b480      	push	{r7}
 801a272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801a274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a282:	6013      	str	r3, [r2, #0]
}
 801a284:	bf00      	nop
 801a286:	46bd      	mov	sp, r7
 801a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28c:	4770      	bx	lr

0801a28e <LL_RCC_HSI_Disable>:
{
 801a28e:	b480      	push	{r7}
 801a290:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801a292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a29c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a2a0:	6013      	str	r3, [r2, #0]
}
 801a2a2:	bf00      	nop
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2aa:	4770      	bx	lr

0801a2ac <LL_RCC_HSI_IsReady>:
{
 801a2ac:	b480      	push	{r7}
 801a2ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801a2b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a2be:	d101      	bne.n	801a2c4 <LL_RCC_HSI_IsReady+0x18>
 801a2c0:	2301      	movs	r3, #1
 801a2c2:	e000      	b.n	801a2c6 <LL_RCC_HSI_IsReady+0x1a>
 801a2c4:	2300      	movs	r3, #0
}
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ce:	4770      	bx	lr

0801a2d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 801a2d0:	b480      	push	{r7}
 801a2d2:	b083      	sub	sp, #12
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801a2d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a2dc:	685b      	ldr	r3, [r3, #4]
 801a2de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	061b      	lsls	r3, r3, #24
 801a2e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a2ea:	4313      	orrs	r3, r2
 801a2ec:	604b      	str	r3, [r1, #4]
}
 801a2ee:	bf00      	nop
 801a2f0:	370c      	adds	r7, #12
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f8:	4770      	bx	lr

0801a2fa <LL_RCC_HSI48_Enable>:
{
 801a2fa:	b480      	push	{r7}
 801a2fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801a2fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a30a:	f043 0301 	orr.w	r3, r3, #1
 801a30e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801a312:	bf00      	nop
 801a314:	46bd      	mov	sp, r7
 801a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31a:	4770      	bx	lr

0801a31c <LL_RCC_HSI48_Disable>:
{
 801a31c:	b480      	push	{r7}
 801a31e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801a320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a32c:	f023 0301 	bic.w	r3, r3, #1
 801a330:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801a334:	bf00      	nop
 801a336:	46bd      	mov	sp, r7
 801a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33c:	4770      	bx	lr

0801a33e <LL_RCC_HSI48_IsReady>:
{
 801a33e:	b480      	push	{r7}
 801a340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801a342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a34a:	f003 0302 	and.w	r3, r3, #2
 801a34e:	2b02      	cmp	r3, #2
 801a350:	d101      	bne.n	801a356 <LL_RCC_HSI48_IsReady+0x18>
 801a352:	2301      	movs	r3, #1
 801a354:	e000      	b.n	801a358 <LL_RCC_HSI48_IsReady+0x1a>
 801a356:	2300      	movs	r3, #0
}
 801a358:	4618      	mov	r0, r3
 801a35a:	46bd      	mov	sp, r7
 801a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a360:	4770      	bx	lr

0801a362 <LL_RCC_LSE_Enable>:
{
 801a362:	b480      	push	{r7}
 801a364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801a366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a36e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a372:	f043 0301 	orr.w	r3, r3, #1
 801a376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a37a:	bf00      	nop
 801a37c:	46bd      	mov	sp, r7
 801a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a382:	4770      	bx	lr

0801a384 <LL_RCC_LSE_Disable>:
{
 801a384:	b480      	push	{r7}
 801a386:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801a388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a394:	f023 0301 	bic.w	r3, r3, #1
 801a398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a39c:	bf00      	nop
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a4:	4770      	bx	lr

0801a3a6 <LL_RCC_LSE_EnableBypass>:
{
 801a3a6:	b480      	push	{r7}
 801a3a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801a3aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a3b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a3b6:	f043 0304 	orr.w	r3, r3, #4
 801a3ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a3be:	bf00      	nop
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c6:	4770      	bx	lr

0801a3c8 <LL_RCC_LSE_DisableBypass>:
{
 801a3c8:	b480      	push	{r7}
 801a3ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801a3cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a3d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a3d8:	f023 0304 	bic.w	r3, r3, #4
 801a3dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a3e0:	bf00      	nop
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e8:	4770      	bx	lr

0801a3ea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 801a3ea:	b480      	push	{r7}
 801a3ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801a3ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a3f6:	f003 0302 	and.w	r3, r3, #2
 801a3fa:	2b02      	cmp	r3, #2
 801a3fc:	d101      	bne.n	801a402 <LL_RCC_LSE_IsReady+0x18>
 801a3fe:	2301      	movs	r3, #1
 801a400:	e000      	b.n	801a404 <LL_RCC_LSE_IsReady+0x1a>
 801a402:	2300      	movs	r3, #0
}
 801a404:	4618      	mov	r0, r3
 801a406:	46bd      	mov	sp, r7
 801a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a40c:	4770      	bx	lr

0801a40e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 801a40e:	b480      	push	{r7}
 801a410:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801a412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a41a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a41e:	f043 0301 	orr.w	r3, r3, #1
 801a422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a426:	bf00      	nop
 801a428:	46bd      	mov	sp, r7
 801a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a42e:	4770      	bx	lr

0801a430 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 801a430:	b480      	push	{r7}
 801a432:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801a434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a43c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a440:	f023 0301 	bic.w	r3, r3, #1
 801a444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a448:	bf00      	nop
 801a44a:	46bd      	mov	sp, r7
 801a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a450:	4770      	bx	lr

0801a452 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 801a452:	b480      	push	{r7}
 801a454:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801a456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a45a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a45e:	f003 0302 	and.w	r3, r3, #2
 801a462:	2b02      	cmp	r3, #2
 801a464:	d101      	bne.n	801a46a <LL_RCC_LSI1_IsReady+0x18>
 801a466:	2301      	movs	r3, #1
 801a468:	e000      	b.n	801a46c <LL_RCC_LSI1_IsReady+0x1a>
 801a46a:	2300      	movs	r3, #0
}
 801a46c:	4618      	mov	r0, r3
 801a46e:	46bd      	mov	sp, r7
 801a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a474:	4770      	bx	lr

0801a476 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 801a476:	b480      	push	{r7}
 801a478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801a47a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a486:	f043 0304 	orr.w	r3, r3, #4
 801a48a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a48e:	bf00      	nop
 801a490:	46bd      	mov	sp, r7
 801a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a496:	4770      	bx	lr

0801a498 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 801a498:	b480      	push	{r7}
 801a49a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801a49c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a4a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a4a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a4a8:	f023 0304 	bic.w	r3, r3, #4
 801a4ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a4b0:	bf00      	nop
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b8:	4770      	bx	lr

0801a4ba <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 801a4ba:	b480      	push	{r7}
 801a4bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801a4be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a4c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a4c6:	f003 0308 	and.w	r3, r3, #8
 801a4ca:	2b08      	cmp	r3, #8
 801a4cc:	d101      	bne.n	801a4d2 <LL_RCC_LSI2_IsReady+0x18>
 801a4ce:	2301      	movs	r3, #1
 801a4d0:	e000      	b.n	801a4d4 <LL_RCC_LSI2_IsReady+0x1a>
 801a4d2:	2300      	movs	r3, #0
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4dc:	4770      	bx	lr

0801a4de <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 801a4de:	b480      	push	{r7}
 801a4e0:	b083      	sub	sp, #12
 801a4e2:	af00      	add	r7, sp, #0
 801a4e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801a4e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a4ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a4ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	021b      	lsls	r3, r3, #8
 801a4f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a4fa:	4313      	orrs	r3, r2
 801a4fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801a500:	bf00      	nop
 801a502:	370c      	adds	r7, #12
 801a504:	46bd      	mov	sp, r7
 801a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50a:	4770      	bx	lr

0801a50c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 801a50c:	b480      	push	{r7}
 801a50e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 801a510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a51a:	f043 0301 	orr.w	r3, r3, #1
 801a51e:	6013      	str	r3, [r2, #0]
}
 801a520:	bf00      	nop
 801a522:	46bd      	mov	sp, r7
 801a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a528:	4770      	bx	lr

0801a52a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 801a52a:	b480      	push	{r7}
 801a52c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801a52e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a538:	f023 0301 	bic.w	r3, r3, #1
 801a53c:	6013      	str	r3, [r2, #0]
}
 801a53e:	bf00      	nop
 801a540:	46bd      	mov	sp, r7
 801a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a546:	4770      	bx	lr

0801a548 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 801a548:	b480      	push	{r7}
 801a54a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 801a54c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	f003 0302 	and.w	r3, r3, #2
 801a556:	2b02      	cmp	r3, #2
 801a558:	d101      	bne.n	801a55e <LL_RCC_MSI_IsReady+0x16>
 801a55a:	2301      	movs	r3, #1
 801a55c:	e000      	b.n	801a560 <LL_RCC_MSI_IsReady+0x18>
 801a55e:	2300      	movs	r3, #0
}
 801a560:	4618      	mov	r0, r3
 801a562:	46bd      	mov	sp, r7
 801a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a568:	4770      	bx	lr

0801a56a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 801a56a:	b480      	push	{r7}
 801a56c:	b083      	sub	sp, #12
 801a56e:	af00      	add	r7, sp, #0
 801a570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801a572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a57c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	4313      	orrs	r3, r2
 801a584:	600b      	str	r3, [r1, #0]
}
 801a586:	bf00      	nop
 801a588:	370c      	adds	r7, #12
 801a58a:	46bd      	mov	sp, r7
 801a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a590:	4770      	bx	lr

0801a592 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 801a592:	b480      	push	{r7}
 801a594:	b083      	sub	sp, #12
 801a596:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801a598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a5a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	2bb0      	cmp	r3, #176	; 0xb0
 801a5a8:	d901      	bls.n	801a5ae <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 801a5aa:	23b0      	movs	r3, #176	; 0xb0
 801a5ac:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 801a5ae:	687b      	ldr	r3, [r7, #4]
}
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	370c      	adds	r7, #12
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ba:	4770      	bx	lr

0801a5bc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 801a5bc:	b480      	push	{r7}
 801a5be:	b083      	sub	sp, #12
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801a5c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5c8:	685b      	ldr	r3, [r3, #4]
 801a5ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	021b      	lsls	r3, r3, #8
 801a5d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a5d6:	4313      	orrs	r3, r2
 801a5d8:	604b      	str	r3, [r1, #4]
}
 801a5da:	bf00      	nop
 801a5dc:	370c      	adds	r7, #12
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e4:	4770      	bx	lr

0801a5e6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 801a5e6:	b480      	push	{r7}
 801a5e8:	b083      	sub	sp, #12
 801a5ea:	af00      	add	r7, sp, #0
 801a5ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801a5ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5f2:	689b      	ldr	r3, [r3, #8]
 801a5f4:	f023 0203 	bic.w	r2, r3, #3
 801a5f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	4313      	orrs	r3, r2
 801a600:	608b      	str	r3, [r1, #8]
}
 801a602:	bf00      	nop
 801a604:	370c      	adds	r7, #12
 801a606:	46bd      	mov	sp, r7
 801a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60c:	4770      	bx	lr

0801a60e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 801a60e:	b480      	push	{r7}
 801a610:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801a612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a616:	689b      	ldr	r3, [r3, #8]
 801a618:	f003 030c 	and.w	r3, r3, #12
}
 801a61c:	4618      	mov	r0, r3
 801a61e:	46bd      	mov	sp, r7
 801a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a624:	4770      	bx	lr

0801a626 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801a626:	b480      	push	{r7}
 801a628:	b083      	sub	sp, #12
 801a62a:	af00      	add	r7, sp, #0
 801a62c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801a62e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a632:	689b      	ldr	r3, [r3, #8]
 801a634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	4313      	orrs	r3, r2
 801a640:	608b      	str	r3, [r1, #8]
}
 801a642:	bf00      	nop
 801a644:	370c      	adds	r7, #12
 801a646:	46bd      	mov	sp, r7
 801a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64c:	4770      	bx	lr

0801a64e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801a64e:	b480      	push	{r7}
 801a650:	b083      	sub	sp, #12
 801a652:	af00      	add	r7, sp, #0
 801a654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801a656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a65a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a65e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	4313      	orrs	r3, r2
 801a66a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801a66e:	bf00      	nop
 801a670:	370c      	adds	r7, #12
 801a672:	46bd      	mov	sp, r7
 801a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a678:	4770      	bx	lr

0801a67a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 801a67a:	b480      	push	{r7}
 801a67c:	b083      	sub	sp, #12
 801a67e:	af00      	add	r7, sp, #0
 801a680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801a682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a686:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a68a:	f023 020f 	bic.w	r2, r3, #15
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	091b      	lsrs	r3, r3, #4
 801a692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a696:	4313      	orrs	r3, r2
 801a698:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801a69c:	bf00      	nop
 801a69e:	370c      	adds	r7, #12
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a6:	4770      	bx	lr

0801a6a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 801a6a8:	b480      	push	{r7}
 801a6aa:	b083      	sub	sp, #12
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801a6b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a6b4:	689b      	ldr	r3, [r3, #8]
 801a6b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801a6ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	4313      	orrs	r3, r2
 801a6c2:	608b      	str	r3, [r1, #8]
}
 801a6c4:	bf00      	nop
 801a6c6:	370c      	adds	r7, #12
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ce:	4770      	bx	lr

0801a6d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 801a6d0:	b480      	push	{r7}
 801a6d2:	b083      	sub	sp, #12
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801a6d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a6dc:	689b      	ldr	r3, [r3, #8]
 801a6de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801a6e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	4313      	orrs	r3, r2
 801a6ea:	608b      	str	r3, [r1, #8]
}
 801a6ec:	bf00      	nop
 801a6ee:	370c      	adds	r7, #12
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f6:	4770      	bx	lr

0801a6f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801a6f8:	b480      	push	{r7}
 801a6fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801a6fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a700:	689b      	ldr	r3, [r3, #8]
 801a702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801a706:	4618      	mov	r0, r3
 801a708:	46bd      	mov	sp, r7
 801a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a70e:	4770      	bx	lr

0801a710 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 801a710:	b480      	push	{r7}
 801a712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801a714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a718:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a71c:	011b      	lsls	r3, r3, #4
 801a71e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801a722:	4618      	mov	r0, r3
 801a724:	46bd      	mov	sp, r7
 801a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a72a:	4770      	bx	lr

0801a72c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801a72c:	b480      	push	{r7}
 801a72e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801a730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a734:	689b      	ldr	r3, [r3, #8]
 801a736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801a73a:	4618      	mov	r0, r3
 801a73c:	46bd      	mov	sp, r7
 801a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a742:	4770      	bx	lr

0801a744 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801a744:	b480      	push	{r7}
 801a746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801a748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a74c:	689b      	ldr	r3, [r3, #8]
 801a74e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 801a752:	4618      	mov	r0, r3
 801a754:	46bd      	mov	sp, r7
 801a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75a:	4770      	bx	lr

0801a75c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 801a75c:	b480      	push	{r7}
 801a75e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801a760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a76a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a76e:	6013      	str	r3, [r2, #0]
}
 801a770:	bf00      	nop
 801a772:	46bd      	mov	sp, r7
 801a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a778:	4770      	bx	lr

0801a77a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 801a77a:	b480      	push	{r7}
 801a77c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801a77e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801a78c:	6013      	str	r3, [r2, #0]
}
 801a78e:	bf00      	nop
 801a790:	46bd      	mov	sp, r7
 801a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a796:	4770      	bx	lr

0801a798 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801a798:	b480      	push	{r7}
 801a79a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801a79c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a7a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801a7aa:	d101      	bne.n	801a7b0 <LL_RCC_PLL_IsReady+0x18>
 801a7ac:	2301      	movs	r3, #1
 801a7ae:	e000      	b.n	801a7b2 <LL_RCC_PLL_IsReady+0x1a>
 801a7b0:	2300      	movs	r3, #0
}
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ba:	4770      	bx	lr

0801a7bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801a7bc:	b480      	push	{r7}
 801a7be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801a7c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a7c4:	68db      	ldr	r3, [r3, #12]
 801a7c6:	0a1b      	lsrs	r3, r3, #8
 801a7c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7d4:	4770      	bx	lr

0801a7d6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 801a7d6:	b480      	push	{r7}
 801a7d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801a7da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a7de:	68db      	ldr	r3, [r3, #12]
 801a7e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ec:	4770      	bx	lr

0801a7ee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801a7ee:	b480      	push	{r7}
 801a7f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801a7f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a7f6:	68db      	ldr	r3, [r3, #12]
 801a7f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	46bd      	mov	sp, r7
 801a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a804:	4770      	bx	lr

0801a806 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 801a806:	b480      	push	{r7}
 801a808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801a80a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a80e:	68db      	ldr	r3, [r3, #12]
 801a810:	f003 0303 	and.w	r3, r3, #3
}
 801a814:	4618      	mov	r0, r3
 801a816:	46bd      	mov	sp, r7
 801a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81c:	4770      	bx	lr

0801a81e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801a81e:	b480      	push	{r7}
 801a820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801a822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a826:	689b      	ldr	r3, [r3, #8]
 801a828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a830:	d101      	bne.n	801a836 <LL_RCC_IsActiveFlag_HPRE+0x18>
 801a832:	2301      	movs	r3, #1
 801a834:	e000      	b.n	801a838 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801a836:	2300      	movs	r3, #0
}
 801a838:	4618      	mov	r0, r3
 801a83a:	46bd      	mov	sp, r7
 801a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a840:	4770      	bx	lr

0801a842 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 801a842:	b480      	push	{r7}
 801a844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801a846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a84a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801a856:	d101      	bne.n	801a85c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801a858:	2301      	movs	r3, #1
 801a85a:	e000      	b.n	801a85e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801a85c:	2300      	movs	r3, #0
}
 801a85e:	4618      	mov	r0, r3
 801a860:	46bd      	mov	sp, r7
 801a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a866:	4770      	bx	lr

0801a868 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801a868:	b480      	push	{r7}
 801a86a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801a86c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a870:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a87c:	d101      	bne.n	801a882 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801a87e:	2301      	movs	r3, #1
 801a880:	e000      	b.n	801a884 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801a882:	2300      	movs	r3, #0
}
 801a884:	4618      	mov	r0, r3
 801a886:	46bd      	mov	sp, r7
 801a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a88c:	4770      	bx	lr

0801a88e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 801a88e:	b480      	push	{r7}
 801a890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801a892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a896:	689b      	ldr	r3, [r3, #8]
 801a898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a89c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801a8a0:	d101      	bne.n	801a8a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 801a8a2:	2301      	movs	r3, #1
 801a8a4:	e000      	b.n	801a8a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801a8a6:	2300      	movs	r3, #0
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b0:	4770      	bx	lr

0801a8b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 801a8b2:	b480      	push	{r7}
 801a8b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801a8b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a8ba:	689b      	ldr	r3, [r3, #8]
 801a8bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a8c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a8c4:	d101      	bne.n	801a8ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 801a8c6:	2301      	movs	r3, #1
 801a8c8:	e000      	b.n	801a8cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801a8ca:	2300      	movs	r3, #0
}
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d4:	4770      	bx	lr
	...

0801a8d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a8d8:	b590      	push	{r4, r7, lr}
 801a8da:	b08d      	sub	sp, #52	; 0x34
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d101      	bne.n	801a8ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a8e6:	2301      	movs	r3, #1
 801a8e8:	e363      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	f003 0320 	and.w	r3, r3, #32
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	f000 808d 	beq.w	801aa12 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a8f8:	f7ff fe89 	bl	801a60e <LL_RCC_GetSysClkSource>
 801a8fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a8fe:	f7ff ff82 	bl	801a806 <LL_RCC_PLL_GetMainSource>
 801a902:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a906:	2b00      	cmp	r3, #0
 801a908:	d005      	beq.n	801a916 <HAL_RCC_OscConfig+0x3e>
 801a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a90c:	2b0c      	cmp	r3, #12
 801a90e:	d147      	bne.n	801a9a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a912:	2b01      	cmp	r3, #1
 801a914:	d144      	bne.n	801a9a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	69db      	ldr	r3, [r3, #28]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d101      	bne.n	801a922 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801a91e:	2301      	movs	r3, #1
 801a920:	e347      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a926:	f7ff fe34 	bl	801a592 <LL_RCC_MSI_GetRange>
 801a92a:	4603      	mov	r3, r0
 801a92c:	429c      	cmp	r4, r3
 801a92e:	d914      	bls.n	801a95a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a934:	4618      	mov	r0, r3
 801a936:	f000 fd2f 	bl	801b398 <RCC_SetFlashLatencyFromMSIRange>
 801a93a:	4603      	mov	r3, r0
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d001      	beq.n	801a944 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 801a940:	2301      	movs	r3, #1
 801a942:	e336      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a948:	4618      	mov	r0, r3
 801a94a:	f7ff fe0e 	bl	801a56a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6a1b      	ldr	r3, [r3, #32]
 801a952:	4618      	mov	r0, r3
 801a954:	f7ff fe32 	bl	801a5bc <LL_RCC_MSI_SetCalibTrimming>
 801a958:	e013      	b.n	801a982 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a95e:	4618      	mov	r0, r3
 801a960:	f7ff fe03 	bl	801a56a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	6a1b      	ldr	r3, [r3, #32]
 801a968:	4618      	mov	r0, r3
 801a96a:	f7ff fe27 	bl	801a5bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a972:	4618      	mov	r0, r3
 801a974:	f000 fd10 	bl	801b398 <RCC_SetFlashLatencyFromMSIRange>
 801a978:	4603      	mov	r3, r0
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d001      	beq.n	801a982 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801a97e:	2301      	movs	r3, #1
 801a980:	e317      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801a982:	f000 fcc9 	bl	801b318 <HAL_RCC_GetHCLKFreq>
 801a986:	4603      	mov	r3, r0
 801a988:	4aa4      	ldr	r2, [pc, #656]	; (801ac1c <HAL_RCC_OscConfig+0x344>)
 801a98a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801a98c:	4ba4      	ldr	r3, [pc, #656]	; (801ac20 <HAL_RCC_OscConfig+0x348>)
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	4618      	mov	r0, r3
 801a992:	f7fd fb2d 	bl	8017ff0 <HAL_InitTick>
 801a996:	4603      	mov	r3, r0
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d039      	beq.n	801aa10 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801a99c:	2301      	movs	r3, #1
 801a99e:	e308      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	69db      	ldr	r3, [r3, #28]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d01e      	beq.n	801a9e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801a9a8:	f7ff fdb0 	bl	801a50c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801a9ac:	f7fd fb6e 	bl	801808c <HAL_GetTick>
 801a9b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801a9b2:	e008      	b.n	801a9c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a9b4:	f7fd fb6a 	bl	801808c <HAL_GetTick>
 801a9b8:	4602      	mov	r2, r0
 801a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9bc:	1ad3      	subs	r3, r2, r3
 801a9be:	2b02      	cmp	r3, #2
 801a9c0:	d901      	bls.n	801a9c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801a9c2:	2303      	movs	r3, #3
 801a9c4:	e2f5      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 801a9c6:	f7ff fdbf 	bl	801a548 <LL_RCC_MSI_IsReady>
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d0f1      	beq.n	801a9b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7ff fdc8 	bl	801a56a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	6a1b      	ldr	r3, [r3, #32]
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f7ff fdec 	bl	801a5bc <LL_RCC_MSI_SetCalibTrimming>
 801a9e4:	e015      	b.n	801aa12 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a9e6:	f7ff fda0 	bl	801a52a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801a9ea:	f7fd fb4f 	bl	801808c <HAL_GetTick>
 801a9ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801a9f0:	e008      	b.n	801aa04 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a9f2:	f7fd fb4b 	bl	801808c <HAL_GetTick>
 801a9f6:	4602      	mov	r2, r0
 801a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9fa:	1ad3      	subs	r3, r2, r3
 801a9fc:	2b02      	cmp	r3, #2
 801a9fe:	d901      	bls.n	801aa04 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801aa00:	2303      	movs	r3, #3
 801aa02:	e2d6      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 801aa04:	f7ff fda0 	bl	801a548 <LL_RCC_MSI_IsReady>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d1f1      	bne.n	801a9f2 <HAL_RCC_OscConfig+0x11a>
 801aa0e:	e000      	b.n	801aa12 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801aa10:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	f003 0301 	and.w	r3, r3, #1
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d047      	beq.n	801aaae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801aa1e:	f7ff fdf6 	bl	801a60e <LL_RCC_GetSysClkSource>
 801aa22:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801aa24:	f7ff feef 	bl	801a806 <LL_RCC_PLL_GetMainSource>
 801aa28:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801aa2a:	6a3b      	ldr	r3, [r7, #32]
 801aa2c:	2b08      	cmp	r3, #8
 801aa2e:	d005      	beq.n	801aa3c <HAL_RCC_OscConfig+0x164>
 801aa30:	6a3b      	ldr	r3, [r7, #32]
 801aa32:	2b0c      	cmp	r3, #12
 801aa34:	d108      	bne.n	801aa48 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801aa36:	69fb      	ldr	r3, [r7, #28]
 801aa38:	2b03      	cmp	r3, #3
 801aa3a:	d105      	bne.n	801aa48 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d134      	bne.n	801aaae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 801aa44:	2301      	movs	r3, #1
 801aa46:	e2b4      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	685b      	ldr	r3, [r3, #4]
 801aa4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aa50:	d102      	bne.n	801aa58 <HAL_RCC_OscConfig+0x180>
 801aa52:	f7ff fbdd 	bl	801a210 <LL_RCC_HSE_Enable>
 801aa56:	e001      	b.n	801aa5c <HAL_RCC_OscConfig+0x184>
 801aa58:	f7ff fbe9 	bl	801a22e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	685b      	ldr	r3, [r3, #4]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d012      	beq.n	801aa8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aa64:	f7fd fb12 	bl	801808c <HAL_GetTick>
 801aa68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801aa6a:	e008      	b.n	801aa7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801aa6c:	f7fd fb0e 	bl	801808c <HAL_GetTick>
 801aa70:	4602      	mov	r2, r0
 801aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa74:	1ad3      	subs	r3, r2, r3
 801aa76:	2b64      	cmp	r3, #100	; 0x64
 801aa78:	d901      	bls.n	801aa7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801aa7a:	2303      	movs	r3, #3
 801aa7c:	e299      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801aa7e:	f7ff fbe5 	bl	801a24c <LL_RCC_HSE_IsReady>
 801aa82:	4603      	mov	r3, r0
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d0f1      	beq.n	801aa6c <HAL_RCC_OscConfig+0x194>
 801aa88:	e011      	b.n	801aaae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aa8a:	f7fd faff 	bl	801808c <HAL_GetTick>
 801aa8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801aa90:	e008      	b.n	801aaa4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801aa92:	f7fd fafb 	bl	801808c <HAL_GetTick>
 801aa96:	4602      	mov	r2, r0
 801aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9a:	1ad3      	subs	r3, r2, r3
 801aa9c:	2b64      	cmp	r3, #100	; 0x64
 801aa9e:	d901      	bls.n	801aaa4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801aaa0:	2303      	movs	r3, #3
 801aaa2:	e286      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 801aaa4:	f7ff fbd2 	bl	801a24c <LL_RCC_HSE_IsReady>
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d1f1      	bne.n	801aa92 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	f003 0302 	and.w	r3, r3, #2
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d04c      	beq.n	801ab54 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801aaba:	f7ff fda8 	bl	801a60e <LL_RCC_GetSysClkSource>
 801aabe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801aac0:	f7ff fea1 	bl	801a806 <LL_RCC_PLL_GetMainSource>
 801aac4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801aac6:	69bb      	ldr	r3, [r7, #24]
 801aac8:	2b04      	cmp	r3, #4
 801aaca:	d005      	beq.n	801aad8 <HAL_RCC_OscConfig+0x200>
 801aacc:	69bb      	ldr	r3, [r7, #24]
 801aace:	2b0c      	cmp	r3, #12
 801aad0:	d10e      	bne.n	801aaf0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801aad2:	697b      	ldr	r3, [r7, #20]
 801aad4:	2b02      	cmp	r3, #2
 801aad6:	d10b      	bne.n	801aaf0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	68db      	ldr	r3, [r3, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d101      	bne.n	801aae4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 801aae0:	2301      	movs	r3, #1
 801aae2:	e266      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	691b      	ldr	r3, [r3, #16]
 801aae8:	4618      	mov	r0, r3
 801aaea:	f7ff fbf1 	bl	801a2d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801aaee:	e031      	b.n	801ab54 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	68db      	ldr	r3, [r3, #12]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d019      	beq.n	801ab2c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801aaf8:	f7ff fbba 	bl	801a270 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aafc:	f7fd fac6 	bl	801808c <HAL_GetTick>
 801ab00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801ab02:	e008      	b.n	801ab16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ab04:	f7fd fac2 	bl	801808c <HAL_GetTick>
 801ab08:	4602      	mov	r2, r0
 801ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab0c:	1ad3      	subs	r3, r2, r3
 801ab0e:	2b02      	cmp	r3, #2
 801ab10:	d901      	bls.n	801ab16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801ab12:	2303      	movs	r3, #3
 801ab14:	e24d      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801ab16:	f7ff fbc9 	bl	801a2ac <LL_RCC_HSI_IsReady>
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d0f1      	beq.n	801ab04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	691b      	ldr	r3, [r3, #16]
 801ab24:	4618      	mov	r0, r3
 801ab26:	f7ff fbd3 	bl	801a2d0 <LL_RCC_HSI_SetCalibTrimming>
 801ab2a:	e013      	b.n	801ab54 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801ab2c:	f7ff fbaf 	bl	801a28e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ab30:	f7fd faac 	bl	801808c <HAL_GetTick>
 801ab34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801ab36:	e008      	b.n	801ab4a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ab38:	f7fd faa8 	bl	801808c <HAL_GetTick>
 801ab3c:	4602      	mov	r2, r0
 801ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab40:	1ad3      	subs	r3, r2, r3
 801ab42:	2b02      	cmp	r3, #2
 801ab44:	d901      	bls.n	801ab4a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801ab46:	2303      	movs	r3, #3
 801ab48:	e233      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801ab4a:	f7ff fbaf 	bl	801a2ac <LL_RCC_HSI_IsReady>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d1f1      	bne.n	801ab38 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	f003 0308 	and.w	r3, r3, #8
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d106      	bne.n	801ab6e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	f000 80a3 	beq.w	801acb4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	695b      	ldr	r3, [r3, #20]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d076      	beq.n	801ac64 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	f003 0310 	and.w	r3, r3, #16
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d046      	beq.n	801ac10 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801ab82:	f7ff fc66 	bl	801a452 <LL_RCC_LSI1_IsReady>
 801ab86:	4603      	mov	r3, r0
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d113      	bne.n	801abb4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801ab8c:	f7ff fc3f 	bl	801a40e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801ab90:	f7fd fa7c 	bl	801808c <HAL_GetTick>
 801ab94:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801ab96:	e008      	b.n	801abaa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801ab98:	f7fd fa78 	bl	801808c <HAL_GetTick>
 801ab9c:	4602      	mov	r2, r0
 801ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aba0:	1ad3      	subs	r3, r2, r3
 801aba2:	2b02      	cmp	r3, #2
 801aba4:	d901      	bls.n	801abaa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801aba6:	2303      	movs	r3, #3
 801aba8:	e203      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801abaa:	f7ff fc52 	bl	801a452 <LL_RCC_LSI1_IsReady>
 801abae:	4603      	mov	r3, r0
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d0f1      	beq.n	801ab98 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 801abb4:	f7ff fc5f 	bl	801a476 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801abb8:	f7fd fa68 	bl	801808c <HAL_GetTick>
 801abbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801abbe:	e008      	b.n	801abd2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801abc0:	f7fd fa64 	bl	801808c <HAL_GetTick>
 801abc4:	4602      	mov	r2, r0
 801abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abc8:	1ad3      	subs	r3, r2, r3
 801abca:	2b03      	cmp	r3, #3
 801abcc:	d901      	bls.n	801abd2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801abce:	2303      	movs	r3, #3
 801abd0:	e1ef      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801abd2:	f7ff fc72 	bl	801a4ba <LL_RCC_LSI2_IsReady>
 801abd6:	4603      	mov	r3, r0
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d0f1      	beq.n	801abc0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	699b      	ldr	r3, [r3, #24]
 801abe0:	4618      	mov	r0, r3
 801abe2:	f7ff fc7c 	bl	801a4de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801abe6:	f7ff fc23 	bl	801a430 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801abea:	f7fd fa4f 	bl	801808c <HAL_GetTick>
 801abee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801abf0:	e008      	b.n	801ac04 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801abf2:	f7fd fa4b 	bl	801808c <HAL_GetTick>
 801abf6:	4602      	mov	r2, r0
 801abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abfa:	1ad3      	subs	r3, r2, r3
 801abfc:	2b02      	cmp	r3, #2
 801abfe:	d901      	bls.n	801ac04 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801ac00:	2303      	movs	r3, #3
 801ac02:	e1d6      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801ac04:	f7ff fc25 	bl	801a452 <LL_RCC_LSI1_IsReady>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d1f1      	bne.n	801abf2 <HAL_RCC_OscConfig+0x31a>
 801ac0e:	e051      	b.n	801acb4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801ac10:	f7ff fbfd 	bl	801a40e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ac14:	f7fd fa3a 	bl	801808c <HAL_GetTick>
 801ac18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801ac1a:	e00c      	b.n	801ac36 <HAL_RCC_OscConfig+0x35e>
 801ac1c:	20000018 	.word	0x20000018
 801ac20:	20000084 	.word	0x20000084
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801ac24:	f7fd fa32 	bl	801808c <HAL_GetTick>
 801ac28:	4602      	mov	r2, r0
 801ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2c:	1ad3      	subs	r3, r2, r3
 801ac2e:	2b02      	cmp	r3, #2
 801ac30:	d901      	bls.n	801ac36 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801ac32:	2303      	movs	r3, #3
 801ac34:	e1bd      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801ac36:	f7ff fc0c 	bl	801a452 <LL_RCC_LSI1_IsReady>
 801ac3a:	4603      	mov	r3, r0
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d0f1      	beq.n	801ac24 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801ac40:	f7ff fc2a 	bl	801a498 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801ac44:	e008      	b.n	801ac58 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801ac46:	f7fd fa21 	bl	801808c <HAL_GetTick>
 801ac4a:	4602      	mov	r2, r0
 801ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac4e:	1ad3      	subs	r3, r2, r3
 801ac50:	2b03      	cmp	r3, #3
 801ac52:	d901      	bls.n	801ac58 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 801ac54:	2303      	movs	r3, #3
 801ac56:	e1ac      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801ac58:	f7ff fc2f 	bl	801a4ba <LL_RCC_LSI2_IsReady>
 801ac5c:	4603      	mov	r3, r0
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d1f1      	bne.n	801ac46 <HAL_RCC_OscConfig+0x36e>
 801ac62:	e027      	b.n	801acb4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 801ac64:	f7ff fc18 	bl	801a498 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ac68:	f7fd fa10 	bl	801808c <HAL_GetTick>
 801ac6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801ac6e:	e008      	b.n	801ac82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801ac70:	f7fd fa0c 	bl	801808c <HAL_GetTick>
 801ac74:	4602      	mov	r2, r0
 801ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac78:	1ad3      	subs	r3, r2, r3
 801ac7a:	2b03      	cmp	r3, #3
 801ac7c:	d901      	bls.n	801ac82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801ac7e:	2303      	movs	r3, #3
 801ac80:	e197      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801ac82:	f7ff fc1a 	bl	801a4ba <LL_RCC_LSI2_IsReady>
 801ac86:	4603      	mov	r3, r0
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d1f1      	bne.n	801ac70 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801ac8c:	f7ff fbd0 	bl	801a430 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ac90:	f7fd f9fc 	bl	801808c <HAL_GetTick>
 801ac94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801ac96:	e008      	b.n	801acaa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801ac98:	f7fd f9f8 	bl	801808c <HAL_GetTick>
 801ac9c:	4602      	mov	r2, r0
 801ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aca0:	1ad3      	subs	r3, r2, r3
 801aca2:	2b02      	cmp	r3, #2
 801aca4:	d901      	bls.n	801acaa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801aca6:	2303      	movs	r3, #3
 801aca8:	e183      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801acaa:	f7ff fbd2 	bl	801a452 <LL_RCC_LSI1_IsReady>
 801acae:	4603      	mov	r3, r0
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d1f1      	bne.n	801ac98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	f003 0304 	and.w	r3, r3, #4
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d05b      	beq.n	801ad78 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801acc0:	4ba7      	ldr	r3, [pc, #668]	; (801af60 <HAL_RCC_OscConfig+0x688>)
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d114      	bne.n	801acf6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801accc:	f7ff fa70 	bl	801a1b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801acd0:	f7fd f9dc 	bl	801808c <HAL_GetTick>
 801acd4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801acd6:	e008      	b.n	801acea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801acd8:	f7fd f9d8 	bl	801808c <HAL_GetTick>
 801acdc:	4602      	mov	r2, r0
 801acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace0:	1ad3      	subs	r3, r2, r3
 801ace2:	2b02      	cmp	r3, #2
 801ace4:	d901      	bls.n	801acea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801ace6:	2303      	movs	r3, #3
 801ace8:	e163      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801acea:	4b9d      	ldr	r3, [pc, #628]	; (801af60 <HAL_RCC_OscConfig+0x688>)
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d0f0      	beq.n	801acd8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	689b      	ldr	r3, [r3, #8]
 801acfa:	2b01      	cmp	r3, #1
 801acfc:	d102      	bne.n	801ad04 <HAL_RCC_OscConfig+0x42c>
 801acfe:	f7ff fb30 	bl	801a362 <LL_RCC_LSE_Enable>
 801ad02:	e00c      	b.n	801ad1e <HAL_RCC_OscConfig+0x446>
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	689b      	ldr	r3, [r3, #8]
 801ad08:	2b05      	cmp	r3, #5
 801ad0a:	d104      	bne.n	801ad16 <HAL_RCC_OscConfig+0x43e>
 801ad0c:	f7ff fb4b 	bl	801a3a6 <LL_RCC_LSE_EnableBypass>
 801ad10:	f7ff fb27 	bl	801a362 <LL_RCC_LSE_Enable>
 801ad14:	e003      	b.n	801ad1e <HAL_RCC_OscConfig+0x446>
 801ad16:	f7ff fb35 	bl	801a384 <LL_RCC_LSE_Disable>
 801ad1a:	f7ff fb55 	bl	801a3c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	689b      	ldr	r3, [r3, #8]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d014      	beq.n	801ad50 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ad26:	f7fd f9b1 	bl	801808c <HAL_GetTick>
 801ad2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801ad2c:	e00a      	b.n	801ad44 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ad2e:	f7fd f9ad 	bl	801808c <HAL_GetTick>
 801ad32:	4602      	mov	r2, r0
 801ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad36:	1ad3      	subs	r3, r2, r3
 801ad38:	f241 3288 	movw	r2, #5000	; 0x1388
 801ad3c:	4293      	cmp	r3, r2
 801ad3e:	d901      	bls.n	801ad44 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801ad40:	2303      	movs	r3, #3
 801ad42:	e136      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 801ad44:	f7ff fb51 	bl	801a3ea <LL_RCC_LSE_IsReady>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d0ef      	beq.n	801ad2e <HAL_RCC_OscConfig+0x456>
 801ad4e:	e013      	b.n	801ad78 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ad50:	f7fd f99c 	bl	801808c <HAL_GetTick>
 801ad54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801ad56:	e00a      	b.n	801ad6e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ad58:	f7fd f998 	bl	801808c <HAL_GetTick>
 801ad5c:	4602      	mov	r2, r0
 801ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad60:	1ad3      	subs	r3, r2, r3
 801ad62:	f241 3288 	movw	r2, #5000	; 0x1388
 801ad66:	4293      	cmp	r3, r2
 801ad68:	d901      	bls.n	801ad6e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801ad6a:	2303      	movs	r3, #3
 801ad6c:	e121      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801ad6e:	f7ff fb3c 	bl	801a3ea <LL_RCC_LSE_IsReady>
 801ad72:	4603      	mov	r3, r0
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d1ef      	bne.n	801ad58 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d02c      	beq.n	801adde <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d014      	beq.n	801adb6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ad8c:	f7ff fab5 	bl	801a2fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ad90:	f7fd f97c 	bl	801808c <HAL_GetTick>
 801ad94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801ad96:	e008      	b.n	801adaa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ad98:	f7fd f978 	bl	801808c <HAL_GetTick>
 801ad9c:	4602      	mov	r2, r0
 801ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada0:	1ad3      	subs	r3, r2, r3
 801ada2:	2b02      	cmp	r3, #2
 801ada4:	d901      	bls.n	801adaa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801ada6:	2303      	movs	r3, #3
 801ada8:	e103      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801adaa:	f7ff fac8 	bl	801a33e <LL_RCC_HSI48_IsReady>
 801adae:	4603      	mov	r3, r0
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d0f1      	beq.n	801ad98 <HAL_RCC_OscConfig+0x4c0>
 801adb4:	e013      	b.n	801adde <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801adb6:	f7ff fab1 	bl	801a31c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801adba:	f7fd f967 	bl	801808c <HAL_GetTick>
 801adbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801adc0:	e008      	b.n	801add4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801adc2:	f7fd f963 	bl	801808c <HAL_GetTick>
 801adc6:	4602      	mov	r2, r0
 801adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adca:	1ad3      	subs	r3, r2, r3
 801adcc:	2b02      	cmp	r3, #2
 801adce:	d901      	bls.n	801add4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801add0:	2303      	movs	r3, #3
 801add2:	e0ee      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801add4:	f7ff fab3 	bl	801a33e <LL_RCC_HSI48_IsReady>
 801add8:	4603      	mov	r3, r0
 801adda:	2b00      	cmp	r3, #0
 801addc:	d1f1      	bne.n	801adc2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	f000 80e4 	beq.w	801afb0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ade8:	f7ff fc11 	bl	801a60e <LL_RCC_GetSysClkSource>
 801adec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801adee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801adf2:	68db      	ldr	r3, [r3, #12]
 801adf4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adfa:	2b02      	cmp	r3, #2
 801adfc:	f040 80b4 	bne.w	801af68 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	f003 0203 	and.w	r2, r3, #3
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae0a:	429a      	cmp	r2, r3
 801ae0c:	d123      	bne.n	801ae56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ae18:	429a      	cmp	r2, r3
 801ae1a:	d11c      	bne.n	801ae56 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	0a1b      	lsrs	r3, r3, #8
 801ae20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801ae28:	429a      	cmp	r2, r3
 801ae2a:	d114      	bne.n	801ae56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801ae36:	429a      	cmp	r2, r3
 801ae38:	d10d      	bne.n	801ae56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801ae44:	429a      	cmp	r2, r3
 801ae46:	d106      	bne.n	801ae56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801ae52:	429a      	cmp	r2, r3
 801ae54:	d05d      	beq.n	801af12 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ae56:	693b      	ldr	r3, [r7, #16]
 801ae58:	2b0c      	cmp	r3, #12
 801ae5a:	d058      	beq.n	801af0e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801ae5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d001      	beq.n	801ae6e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801ae6a:	2301      	movs	r3, #1
 801ae6c:	e0a1      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801ae6e:	f7ff fc84 	bl	801a77a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801ae72:	f7fd f90b 	bl	801808c <HAL_GetTick>
 801ae76:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801ae78:	e008      	b.n	801ae8c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ae7a:	f7fd f907 	bl	801808c <HAL_GetTick>
 801ae7e:	4602      	mov	r2, r0
 801ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae82:	1ad3      	subs	r3, r2, r3
 801ae84:	2b02      	cmp	r3, #2
 801ae86:	d901      	bls.n	801ae8c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 801ae88:	2303      	movs	r3, #3
 801ae8a:	e092      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801ae8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d1ef      	bne.n	801ae7a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ae9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae9e:	68da      	ldr	r2, [r3, #12]
 801aea0:	4b30      	ldr	r3, [pc, #192]	; (801af64 <HAL_RCC_OscConfig+0x68c>)
 801aea2:	4013      	ands	r3, r2
 801aea4:	687a      	ldr	r2, [r7, #4]
 801aea6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801aea8:	687a      	ldr	r2, [r7, #4]
 801aeaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801aeac:	4311      	orrs	r1, r2
 801aeae:	687a      	ldr	r2, [r7, #4]
 801aeb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801aeb2:	0212      	lsls	r2, r2, #8
 801aeb4:	4311      	orrs	r1, r2
 801aeb6:	687a      	ldr	r2, [r7, #4]
 801aeb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801aeba:	4311      	orrs	r1, r2
 801aebc:	687a      	ldr	r2, [r7, #4]
 801aebe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801aec0:	4311      	orrs	r1, r2
 801aec2:	687a      	ldr	r2, [r7, #4]
 801aec4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801aec6:	430a      	orrs	r2, r1
 801aec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801aecc:	4313      	orrs	r3, r2
 801aece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801aed0:	f7ff fc44 	bl	801a75c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801aed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801aed8:	68db      	ldr	r3, [r3, #12]
 801aeda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801aede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aee2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801aee4:	f7fd f8d2 	bl	801808c <HAL_GetTick>
 801aee8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801aeea:	e008      	b.n	801aefe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801aeec:	f7fd f8ce 	bl	801808c <HAL_GetTick>
 801aef0:	4602      	mov	r2, r0
 801aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aef4:	1ad3      	subs	r3, r2, r3
 801aef6:	2b02      	cmp	r3, #2
 801aef8:	d901      	bls.n	801aefe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801aefa:	2303      	movs	r3, #3
 801aefc:	e059      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801aefe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d0ef      	beq.n	801aeec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801af0c:	e050      	b.n	801afb0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801af0e:	2301      	movs	r3, #1
 801af10:	e04f      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801af12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d147      	bne.n	801afb0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801af20:	f7ff fc1c 	bl	801a75c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801af24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af28:	68db      	ldr	r3, [r3, #12]
 801af2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801af2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801af32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801af34:	f7fd f8aa 	bl	801808c <HAL_GetTick>
 801af38:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801af3a:	e008      	b.n	801af4e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801af3c:	f7fd f8a6 	bl	801808c <HAL_GetTick>
 801af40:	4602      	mov	r2, r0
 801af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af44:	1ad3      	subs	r3, r2, r3
 801af46:	2b02      	cmp	r3, #2
 801af48:	d901      	bls.n	801af4e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801af4a:	2303      	movs	r3, #3
 801af4c:	e031      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801af4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d0ef      	beq.n	801af3c <HAL_RCC_OscConfig+0x664>
 801af5c:	e028      	b.n	801afb0 <HAL_RCC_OscConfig+0x6d8>
 801af5e:	bf00      	nop
 801af60:	58000400 	.word	0x58000400
 801af64:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801af68:	693b      	ldr	r3, [r7, #16]
 801af6a:	2b0c      	cmp	r3, #12
 801af6c:	d01e      	beq.n	801afac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801af6e:	f7ff fc04 	bl	801a77a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af72:	f7fd f88b 	bl	801808c <HAL_GetTick>
 801af76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801af78:	e008      	b.n	801af8c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801af7a:	f7fd f887 	bl	801808c <HAL_GetTick>
 801af7e:	4602      	mov	r2, r0
 801af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af82:	1ad3      	subs	r3, r2, r3
 801af84:	2b02      	cmp	r3, #2
 801af86:	d901      	bls.n	801af8c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 801af88:	2303      	movs	r3, #3
 801af8a:	e012      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801af8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801af96:	2b00      	cmp	r3, #0
 801af98:	d1ef      	bne.n	801af7a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801af9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801af9e:	68da      	ldr	r2, [r3, #12]
 801afa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801afa4:	4b05      	ldr	r3, [pc, #20]	; (801afbc <HAL_RCC_OscConfig+0x6e4>)
 801afa6:	4013      	ands	r3, r2
 801afa8:	60cb      	str	r3, [r1, #12]
 801afaa:	e001      	b.n	801afb0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801afac:	2301      	movs	r3, #1
 801afae:	e000      	b.n	801afb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 801afb0:	2300      	movs	r3, #0
}
 801afb2:	4618      	mov	r0, r3
 801afb4:	3734      	adds	r7, #52	; 0x34
 801afb6:	46bd      	mov	sp, r7
 801afb8:	bd90      	pop	{r4, r7, pc}
 801afba:	bf00      	nop
 801afbc:	eefefffc 	.word	0xeefefffc

0801afc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b084      	sub	sp, #16
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	6078      	str	r0, [r7, #4]
 801afc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d101      	bne.n	801afd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801afd0:	2301      	movs	r3, #1
 801afd2:	e12d      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801afd4:	4b98      	ldr	r3, [pc, #608]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	f003 0307 	and.w	r3, r3, #7
 801afdc:	683a      	ldr	r2, [r7, #0]
 801afde:	429a      	cmp	r2, r3
 801afe0:	d91b      	bls.n	801b01a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801afe2:	4b95      	ldr	r3, [pc, #596]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	f023 0207 	bic.w	r2, r3, #7
 801afea:	4993      	ldr	r1, [pc, #588]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801afec:	683b      	ldr	r3, [r7, #0]
 801afee:	4313      	orrs	r3, r2
 801aff0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801aff2:	f7fd f84b 	bl	801808c <HAL_GetTick>
 801aff6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801aff8:	e008      	b.n	801b00c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801affa:	f7fd f847 	bl	801808c <HAL_GetTick>
 801affe:	4602      	mov	r2, r0
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	1ad3      	subs	r3, r2, r3
 801b004:	2b02      	cmp	r3, #2
 801b006:	d901      	bls.n	801b00c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801b008:	2303      	movs	r3, #3
 801b00a:	e111      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b00c:	4b8a      	ldr	r3, [pc, #552]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	f003 0307 	and.w	r3, r3, #7
 801b014:	683a      	ldr	r2, [r7, #0]
 801b016:	429a      	cmp	r2, r3
 801b018:	d1ef      	bne.n	801affa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f003 0302 	and.w	r3, r3, #2
 801b022:	2b00      	cmp	r3, #0
 801b024:	d016      	beq.n	801b054 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	689b      	ldr	r3, [r3, #8]
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7ff fafb 	bl	801a626 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801b030:	f7fd f82c 	bl	801808c <HAL_GetTick>
 801b034:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801b036:	e008      	b.n	801b04a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801b038:	f7fd f828 	bl	801808c <HAL_GetTick>
 801b03c:	4602      	mov	r2, r0
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	1ad3      	subs	r3, r2, r3
 801b042:	2b02      	cmp	r3, #2
 801b044:	d901      	bls.n	801b04a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801b046:	2303      	movs	r3, #3
 801b048:	e0f2      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801b04a:	f7ff fbe8 	bl	801a81e <LL_RCC_IsActiveFlag_HPRE>
 801b04e:	4603      	mov	r3, r0
 801b050:	2b00      	cmp	r3, #0
 801b052:	d0f1      	beq.n	801b038 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	f003 0320 	and.w	r3, r3, #32
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d016      	beq.n	801b08e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	695b      	ldr	r3, [r3, #20]
 801b064:	4618      	mov	r0, r3
 801b066:	f7ff faf2 	bl	801a64e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801b06a:	f7fd f80f 	bl	801808c <HAL_GetTick>
 801b06e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801b070:	e008      	b.n	801b084 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801b072:	f7fd f80b 	bl	801808c <HAL_GetTick>
 801b076:	4602      	mov	r2, r0
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	1ad3      	subs	r3, r2, r3
 801b07c:	2b02      	cmp	r3, #2
 801b07e:	d901      	bls.n	801b084 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801b080:	2303      	movs	r3, #3
 801b082:	e0d5      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801b084:	f7ff fbdd 	bl	801a842 <LL_RCC_IsActiveFlag_C2HPRE>
 801b088:	4603      	mov	r3, r0
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d0f1      	beq.n	801b072 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b096:	2b00      	cmp	r3, #0
 801b098:	d016      	beq.n	801b0c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	699b      	ldr	r3, [r3, #24]
 801b09e:	4618      	mov	r0, r3
 801b0a0:	f7ff faeb 	bl	801a67a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801b0a4:	f7fc fff2 	bl	801808c <HAL_GetTick>
 801b0a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801b0aa:	e008      	b.n	801b0be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801b0ac:	f7fc ffee 	bl	801808c <HAL_GetTick>
 801b0b0:	4602      	mov	r2, r0
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	1ad3      	subs	r3, r2, r3
 801b0b6:	2b02      	cmp	r3, #2
 801b0b8:	d901      	bls.n	801b0be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801b0ba:	2303      	movs	r3, #3
 801b0bc:	e0b8      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801b0be:	f7ff fbd3 	bl	801a868 <LL_RCC_IsActiveFlag_SHDHPRE>
 801b0c2:	4603      	mov	r3, r0
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d0f1      	beq.n	801b0ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	f003 0304 	and.w	r3, r3, #4
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d016      	beq.n	801b102 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	68db      	ldr	r3, [r3, #12]
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f7ff fae5 	bl	801a6a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801b0de:	f7fc ffd5 	bl	801808c <HAL_GetTick>
 801b0e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801b0e4:	e008      	b.n	801b0f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801b0e6:	f7fc ffd1 	bl	801808c <HAL_GetTick>
 801b0ea:	4602      	mov	r2, r0
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	1ad3      	subs	r3, r2, r3
 801b0f0:	2b02      	cmp	r3, #2
 801b0f2:	d901      	bls.n	801b0f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801b0f4:	2303      	movs	r3, #3
 801b0f6:	e09b      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801b0f8:	f7ff fbc9 	bl	801a88e <LL_RCC_IsActiveFlag_PPRE1>
 801b0fc:	4603      	mov	r3, r0
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d0f1      	beq.n	801b0e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	f003 0308 	and.w	r3, r3, #8
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d017      	beq.n	801b13e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	691b      	ldr	r3, [r3, #16]
 801b112:	00db      	lsls	r3, r3, #3
 801b114:	4618      	mov	r0, r3
 801b116:	f7ff fadb 	bl	801a6d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801b11a:	f7fc ffb7 	bl	801808c <HAL_GetTick>
 801b11e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801b120:	e008      	b.n	801b134 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801b122:	f7fc ffb3 	bl	801808c <HAL_GetTick>
 801b126:	4602      	mov	r2, r0
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	1ad3      	subs	r3, r2, r3
 801b12c:	2b02      	cmp	r3, #2
 801b12e:	d901      	bls.n	801b134 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801b130:	2303      	movs	r3, #3
 801b132:	e07d      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801b134:	f7ff fbbd 	bl	801a8b2 <LL_RCC_IsActiveFlag_PPRE2>
 801b138:	4603      	mov	r3, r0
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d0f1      	beq.n	801b122 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	f003 0301 	and.w	r3, r3, #1
 801b146:	2b00      	cmp	r3, #0
 801b148:	d043      	beq.n	801b1d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	685b      	ldr	r3, [r3, #4]
 801b14e:	2b02      	cmp	r3, #2
 801b150:	d106      	bne.n	801b160 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801b152:	f7ff f87b 	bl	801a24c <LL_RCC_HSE_IsReady>
 801b156:	4603      	mov	r3, r0
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d11e      	bne.n	801b19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b15c:	2301      	movs	r3, #1
 801b15e:	e067      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	685b      	ldr	r3, [r3, #4]
 801b164:	2b03      	cmp	r3, #3
 801b166:	d106      	bne.n	801b176 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 801b168:	f7ff fb16 	bl	801a798 <LL_RCC_PLL_IsReady>
 801b16c:	4603      	mov	r3, r0
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d113      	bne.n	801b19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b172:	2301      	movs	r3, #1
 801b174:	e05c      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	685b      	ldr	r3, [r3, #4]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d106      	bne.n	801b18c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801b17e:	f7ff f9e3 	bl	801a548 <LL_RCC_MSI_IsReady>
 801b182:	4603      	mov	r3, r0
 801b184:	2b00      	cmp	r3, #0
 801b186:	d108      	bne.n	801b19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b188:	2301      	movs	r3, #1
 801b18a:	e051      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801b18c:	f7ff f88e 	bl	801a2ac <LL_RCC_HSI_IsReady>
 801b190:	4603      	mov	r3, r0
 801b192:	2b00      	cmp	r3, #0
 801b194:	d101      	bne.n	801b19a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b196:	2301      	movs	r3, #1
 801b198:	e04a      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	685b      	ldr	r3, [r3, #4]
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f7ff fa21 	bl	801a5e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b1a4:	f7fc ff72 	bl	801808c <HAL_GetTick>
 801b1a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b1aa:	e00a      	b.n	801b1c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b1ac:	f7fc ff6e 	bl	801808c <HAL_GetTick>
 801b1b0:	4602      	mov	r2, r0
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	1ad3      	subs	r3, r2, r3
 801b1b6:	f241 3288 	movw	r2, #5000	; 0x1388
 801b1ba:	4293      	cmp	r3, r2
 801b1bc:	d901      	bls.n	801b1c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801b1be:	2303      	movs	r3, #3
 801b1c0:	e036      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b1c2:	f7ff fa24 	bl	801a60e <LL_RCC_GetSysClkSource>
 801b1c6:	4602      	mov	r2, r0
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	685b      	ldr	r3, [r3, #4]
 801b1cc:	009b      	lsls	r3, r3, #2
 801b1ce:	429a      	cmp	r2, r3
 801b1d0:	d1ec      	bne.n	801b1ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b1d2:	4b19      	ldr	r3, [pc, #100]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	f003 0307 	and.w	r3, r3, #7
 801b1da:	683a      	ldr	r2, [r7, #0]
 801b1dc:	429a      	cmp	r2, r3
 801b1de:	d21b      	bcs.n	801b218 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b1e0:	4b15      	ldr	r3, [pc, #84]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	f023 0207 	bic.w	r2, r3, #7
 801b1e8:	4913      	ldr	r1, [pc, #76]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801b1ea:	683b      	ldr	r3, [r7, #0]
 801b1ec:	4313      	orrs	r3, r2
 801b1ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b1f0:	f7fc ff4c 	bl	801808c <HAL_GetTick>
 801b1f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b1f6:	e008      	b.n	801b20a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801b1f8:	f7fc ff48 	bl	801808c <HAL_GetTick>
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	1ad3      	subs	r3, r2, r3
 801b202:	2b02      	cmp	r3, #2
 801b204:	d901      	bls.n	801b20a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801b206:	2303      	movs	r3, #3
 801b208:	e012      	b.n	801b230 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b20a:	4b0b      	ldr	r3, [pc, #44]	; (801b238 <HAL_RCC_ClockConfig+0x278>)
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	f003 0307 	and.w	r3, r3, #7
 801b212:	683a      	ldr	r2, [r7, #0]
 801b214:	429a      	cmp	r2, r3
 801b216:	d1ef      	bne.n	801b1f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801b218:	f000 f87e 	bl	801b318 <HAL_RCC_GetHCLKFreq>
 801b21c:	4603      	mov	r3, r0
 801b21e:	4a07      	ldr	r2, [pc, #28]	; (801b23c <HAL_RCC_ClockConfig+0x27c>)
 801b220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801b222:	f7fc ff3f 	bl	80180a4 <HAL_GetTickPrio>
 801b226:	4603      	mov	r3, r0
 801b228:	4618      	mov	r0, r3
 801b22a:	f7fc fee1 	bl	8017ff0 <HAL_InitTick>
 801b22e:	4603      	mov	r3, r0
}
 801b230:	4618      	mov	r0, r3
 801b232:	3710      	adds	r7, #16
 801b234:	46bd      	mov	sp, r7
 801b236:	bd80      	pop	{r7, pc}
 801b238:	58004000 	.word	0x58004000
 801b23c:	20000018 	.word	0x20000018

0801b240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b240:	b590      	push	{r4, r7, lr}
 801b242:	b085      	sub	sp, #20
 801b244:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b246:	f7ff f9e2 	bl	801a60e <LL_RCC_GetSysClkSource>
 801b24a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d10a      	bne.n	801b268 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801b252:	f7ff f99e 	bl	801a592 <LL_RCC_MSI_GetRange>
 801b256:	4603      	mov	r3, r0
 801b258:	091b      	lsrs	r3, r3, #4
 801b25a:	f003 030f 	and.w	r3, r3, #15
 801b25e:	4a2b      	ldr	r2, [pc, #172]	; (801b30c <HAL_RCC_GetSysClockFreq+0xcc>)
 801b260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b264:	60fb      	str	r3, [r7, #12]
 801b266:	e04b      	b.n	801b300 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	2b04      	cmp	r3, #4
 801b26c:	d102      	bne.n	801b274 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801b26e:	4b28      	ldr	r3, [pc, #160]	; (801b310 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b270:	60fb      	str	r3, [r7, #12]
 801b272:	e045      	b.n	801b300 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	2b08      	cmp	r3, #8
 801b278:	d10a      	bne.n	801b290 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801b27a:	f7fe ffb7 	bl	801a1ec <LL_RCC_HSE_IsEnabledDiv2>
 801b27e:	4603      	mov	r3, r0
 801b280:	2b01      	cmp	r3, #1
 801b282:	d102      	bne.n	801b28a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 801b284:	4b22      	ldr	r3, [pc, #136]	; (801b310 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b286:	60fb      	str	r3, [r7, #12]
 801b288:	e03a      	b.n	801b300 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801b28a:	4b22      	ldr	r3, [pc, #136]	; (801b314 <HAL_RCC_GetSysClockFreq+0xd4>)
 801b28c:	60fb      	str	r3, [r7, #12]
 801b28e:	e037      	b.n	801b300 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801b290:	f7ff fab9 	bl	801a806 <LL_RCC_PLL_GetMainSource>
 801b294:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801b296:	683b      	ldr	r3, [r7, #0]
 801b298:	2b02      	cmp	r3, #2
 801b29a:	d003      	beq.n	801b2a4 <HAL_RCC_GetSysClockFreq+0x64>
 801b29c:	683b      	ldr	r3, [r7, #0]
 801b29e:	2b03      	cmp	r3, #3
 801b2a0:	d003      	beq.n	801b2aa <HAL_RCC_GetSysClockFreq+0x6a>
 801b2a2:	e00d      	b.n	801b2c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 801b2a4:	4b1a      	ldr	r3, [pc, #104]	; (801b310 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b2a6:	60bb      	str	r3, [r7, #8]
        break;
 801b2a8:	e015      	b.n	801b2d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801b2aa:	f7fe ff9f 	bl	801a1ec <LL_RCC_HSE_IsEnabledDiv2>
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	2b01      	cmp	r3, #1
 801b2b2:	d102      	bne.n	801b2ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 801b2b4:	4b16      	ldr	r3, [pc, #88]	; (801b310 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b2b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 801b2b8:	e00d      	b.n	801b2d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801b2ba:	4b16      	ldr	r3, [pc, #88]	; (801b314 <HAL_RCC_GetSysClockFreq+0xd4>)
 801b2bc:	60bb      	str	r3, [r7, #8]
        break;
 801b2be:	e00a      	b.n	801b2d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801b2c0:	f7ff f967 	bl	801a592 <LL_RCC_MSI_GetRange>
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	091b      	lsrs	r3, r3, #4
 801b2c8:	f003 030f 	and.w	r3, r3, #15
 801b2cc:	4a0f      	ldr	r2, [pc, #60]	; (801b30c <HAL_RCC_GetSysClockFreq+0xcc>)
 801b2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b2d2:	60bb      	str	r3, [r7, #8]
        break;
 801b2d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 801b2d6:	f7ff fa71 	bl	801a7bc <LL_RCC_PLL_GetN>
 801b2da:	4602      	mov	r2, r0
 801b2dc:	68bb      	ldr	r3, [r7, #8]
 801b2de:	fb03 f402 	mul.w	r4, r3, r2
 801b2e2:	f7ff fa84 	bl	801a7ee <LL_RCC_PLL_GetDivider>
 801b2e6:	4603      	mov	r3, r0
 801b2e8:	091b      	lsrs	r3, r3, #4
 801b2ea:	3301      	adds	r3, #1
 801b2ec:	fbb4 f4f3 	udiv	r4, r4, r3
 801b2f0:	f7ff fa71 	bl	801a7d6 <LL_RCC_PLL_GetR>
 801b2f4:	4603      	mov	r3, r0
 801b2f6:	0f5b      	lsrs	r3, r3, #29
 801b2f8:	3301      	adds	r3, #1
 801b2fa:	fbb4 f3f3 	udiv	r3, r4, r3
 801b2fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 801b300:	68fb      	ldr	r3, [r7, #12]
}
 801b302:	4618      	mov	r0, r3
 801b304:	3714      	adds	r7, #20
 801b306:	46bd      	mov	sp, r7
 801b308:	bd90      	pop	{r4, r7, pc}
 801b30a:	bf00      	nop
 801b30c:	08022e84 	.word	0x08022e84
 801b310:	00f42400 	.word	0x00f42400
 801b314:	01e84800 	.word	0x01e84800

0801b318 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b318:	b598      	push	{r3, r4, r7, lr}
 801b31a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801b31c:	f7ff ff90 	bl	801b240 <HAL_RCC_GetSysClockFreq>
 801b320:	4604      	mov	r4, r0
 801b322:	f7ff f9e9 	bl	801a6f8 <LL_RCC_GetAHBPrescaler>
 801b326:	4603      	mov	r3, r0
 801b328:	091b      	lsrs	r3, r3, #4
 801b32a:	f003 030f 	and.w	r3, r3, #15
 801b32e:	4a03      	ldr	r2, [pc, #12]	; (801b33c <HAL_RCC_GetHCLKFreq+0x24>)
 801b330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b334:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801b338:	4618      	mov	r0, r3
 801b33a:	bd98      	pop	{r3, r4, r7, pc}
 801b33c:	08022e24 	.word	0x08022e24

0801b340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b340:	b598      	push	{r3, r4, r7, lr}
 801b342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 801b344:	f7ff ffe8 	bl	801b318 <HAL_RCC_GetHCLKFreq>
 801b348:	4604      	mov	r4, r0
 801b34a:	f7ff f9ef 	bl	801a72c <LL_RCC_GetAPB1Prescaler>
 801b34e:	4603      	mov	r3, r0
 801b350:	0a1b      	lsrs	r3, r3, #8
 801b352:	f003 0307 	and.w	r3, r3, #7
 801b356:	4a04      	ldr	r2, [pc, #16]	; (801b368 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b35c:	f003 031f 	and.w	r3, r3, #31
 801b360:	fa24 f303 	lsr.w	r3, r4, r3
}
 801b364:	4618      	mov	r0, r3
 801b366:	bd98      	pop	{r3, r4, r7, pc}
 801b368:	08022e64 	.word	0x08022e64

0801b36c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b36c:	b598      	push	{r3, r4, r7, lr}
 801b36e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801b370:	f7ff ffd2 	bl	801b318 <HAL_RCC_GetHCLKFreq>
 801b374:	4604      	mov	r4, r0
 801b376:	f7ff f9e5 	bl	801a744 <LL_RCC_GetAPB2Prescaler>
 801b37a:	4603      	mov	r3, r0
 801b37c:	0adb      	lsrs	r3, r3, #11
 801b37e:	f003 0307 	and.w	r3, r3, #7
 801b382:	4a04      	ldr	r2, [pc, #16]	; (801b394 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b388:	f003 031f 	and.w	r3, r3, #31
 801b38c:	fa24 f303 	lsr.w	r3, r4, r3
}
 801b390:	4618      	mov	r0, r3
 801b392:	bd98      	pop	{r3, r4, r7, pc}
 801b394:	08022e64 	.word	0x08022e64

0801b398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 801b398:	b590      	push	{r4, r7, lr}
 801b39a:	b085      	sub	sp, #20
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	2bb0      	cmp	r3, #176	; 0xb0
 801b3a4:	d903      	bls.n	801b3ae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801b3a6:	4b15      	ldr	r3, [pc, #84]	; (801b3fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801b3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3aa:	60fb      	str	r3, [r7, #12]
 801b3ac:	e007      	b.n	801b3be <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	091b      	lsrs	r3, r3, #4
 801b3b2:	f003 030f 	and.w	r3, r3, #15
 801b3b6:	4a11      	ldr	r2, [pc, #68]	; (801b3fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801b3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b3bc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801b3be:	f7ff f9a7 	bl	801a710 <LL_RCC_GetAHB4Prescaler>
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	091b      	lsrs	r3, r3, #4
 801b3c6:	f003 030f 	and.w	r3, r3, #15
 801b3ca:	4a0d      	ldr	r2, [pc, #52]	; (801b400 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801b3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b3d0:	68fa      	ldr	r2, [r7, #12]
 801b3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b3d6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801b3d8:	68bb      	ldr	r3, [r7, #8]
 801b3da:	4a0a      	ldr	r2, [pc, #40]	; (801b404 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801b3dc:	fba2 2303 	umull	r2, r3, r2, r3
 801b3e0:	0c9c      	lsrs	r4, r3, #18
 801b3e2:	f7fe fef5 	bl	801a1d0 <HAL_PWREx_GetVoltageRange>
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	4619      	mov	r1, r3
 801b3ea:	4620      	mov	r0, r4
 801b3ec:	f000 f80c 	bl	801b408 <RCC_SetFlashLatency>
 801b3f0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	3714      	adds	r7, #20
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd90      	pop	{r4, r7, pc}
 801b3fa:	bf00      	nop
 801b3fc:	08022e84 	.word	0x08022e84
 801b400:	08022e24 	.word	0x08022e24
 801b404:	431bde83 	.word	0x431bde83

0801b408 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801b408:	b590      	push	{r4, r7, lr}
 801b40a:	b093      	sub	sp, #76	; 0x4c
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801b412:	4b37      	ldr	r3, [pc, #220]	; (801b4f0 <RCC_SetFlashLatency+0xe8>)
 801b414:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801b418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b41a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801b41e:	4a35      	ldr	r2, [pc, #212]	; (801b4f4 <RCC_SetFlashLatency+0xec>)
 801b420:	f107 031c 	add.w	r3, r7, #28
 801b424:	ca07      	ldmia	r2, {r0, r1, r2}
 801b426:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801b42a:	4b33      	ldr	r3, [pc, #204]	; (801b4f8 <RCC_SetFlashLatency+0xf0>)
 801b42c:	f107 040c 	add.w	r4, r7, #12
 801b430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801b436:	2300      	movs	r3, #0
 801b438:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801b43a:	683b      	ldr	r3, [r7, #0]
 801b43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b440:	d11a      	bne.n	801b478 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801b442:	2300      	movs	r3, #0
 801b444:	643b      	str	r3, [r7, #64]	; 0x40
 801b446:	e013      	b.n	801b470 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801b448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	3348      	adds	r3, #72	; 0x48
 801b44e:	443b      	add	r3, r7
 801b450:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801b454:	687a      	ldr	r2, [r7, #4]
 801b456:	429a      	cmp	r2, r3
 801b458:	d807      	bhi.n	801b46a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801b45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b45c:	009b      	lsls	r3, r3, #2
 801b45e:	3348      	adds	r3, #72	; 0x48
 801b460:	443b      	add	r3, r7
 801b462:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801b466:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801b468:	e020      	b.n	801b4ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801b46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b46c:	3301      	adds	r3, #1
 801b46e:	643b      	str	r3, [r7, #64]	; 0x40
 801b470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b472:	2b03      	cmp	r3, #3
 801b474:	d9e8      	bls.n	801b448 <RCC_SetFlashLatency+0x40>
 801b476:	e019      	b.n	801b4ac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801b478:	2300      	movs	r3, #0
 801b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b47c:	e013      	b.n	801b4a6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801b47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b480:	009b      	lsls	r3, r3, #2
 801b482:	3348      	adds	r3, #72	; 0x48
 801b484:	443b      	add	r3, r7
 801b486:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801b48a:	687a      	ldr	r2, [r7, #4]
 801b48c:	429a      	cmp	r2, r3
 801b48e:	d807      	bhi.n	801b4a0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801b490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b492:	009b      	lsls	r3, r3, #2
 801b494:	3348      	adds	r3, #72	; 0x48
 801b496:	443b      	add	r3, r7
 801b498:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801b49c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801b49e:	e005      	b.n	801b4ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801b4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b4a2:	3301      	adds	r3, #1
 801b4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b4a8:	2b02      	cmp	r3, #2
 801b4aa:	d9e8      	bls.n	801b47e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801b4ac:	4b13      	ldr	r3, [pc, #76]	; (801b4fc <RCC_SetFlashLatency+0xf4>)
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	f023 0207 	bic.w	r2, r3, #7
 801b4b4:	4911      	ldr	r1, [pc, #68]	; (801b4fc <RCC_SetFlashLatency+0xf4>)
 801b4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b4b8:	4313      	orrs	r3, r2
 801b4ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801b4bc:	f7fc fde6 	bl	801808c <HAL_GetTick>
 801b4c0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801b4c2:	e008      	b.n	801b4d6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801b4c4:	f7fc fde2 	bl	801808c <HAL_GetTick>
 801b4c8:	4602      	mov	r2, r0
 801b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4cc:	1ad3      	subs	r3, r2, r3
 801b4ce:	2b02      	cmp	r3, #2
 801b4d0:	d901      	bls.n	801b4d6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801b4d2:	2303      	movs	r3, #3
 801b4d4:	e007      	b.n	801b4e6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801b4d6:	4b09      	ldr	r3, [pc, #36]	; (801b4fc <RCC_SetFlashLatency+0xf4>)
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	f003 0307 	and.w	r3, r3, #7
 801b4de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b4e0:	429a      	cmp	r2, r3
 801b4e2:	d1ef      	bne.n	801b4c4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 801b4e4:	2300      	movs	r3, #0
}
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	374c      	adds	r7, #76	; 0x4c
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	bd90      	pop	{r4, r7, pc}
 801b4ee:	bf00      	nop
 801b4f0:	0802228c 	.word	0x0802228c
 801b4f4:	0802229c 	.word	0x0802229c
 801b4f8:	080222a8 	.word	0x080222a8
 801b4fc:	58004000 	.word	0x58004000

0801b500 <LL_RCC_LSE_IsEnabled>:
{
 801b500:	b480      	push	{r7}
 801b502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801b504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b50c:	f003 0301 	and.w	r3, r3, #1
 801b510:	2b01      	cmp	r3, #1
 801b512:	d101      	bne.n	801b518 <LL_RCC_LSE_IsEnabled+0x18>
 801b514:	2301      	movs	r3, #1
 801b516:	e000      	b.n	801b51a <LL_RCC_LSE_IsEnabled+0x1a>
 801b518:	2300      	movs	r3, #0
}
 801b51a:	4618      	mov	r0, r3
 801b51c:	46bd      	mov	sp, r7
 801b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b522:	4770      	bx	lr

0801b524 <LL_RCC_LSE_IsReady>:
{
 801b524:	b480      	push	{r7}
 801b526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801b528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b530:	f003 0302 	and.w	r3, r3, #2
 801b534:	2b02      	cmp	r3, #2
 801b536:	d101      	bne.n	801b53c <LL_RCC_LSE_IsReady+0x18>
 801b538:	2301      	movs	r3, #1
 801b53a:	e000      	b.n	801b53e <LL_RCC_LSE_IsReady+0x1a>
 801b53c:	2300      	movs	r3, #0
}
 801b53e:	4618      	mov	r0, r3
 801b540:	46bd      	mov	sp, r7
 801b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b546:	4770      	bx	lr

0801b548 <LL_RCC_MSI_EnablePLLMode>:
{
 801b548:	b480      	push	{r7}
 801b54a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 801b54c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b556:	f043 0304 	orr.w	r3, r3, #4
 801b55a:	6013      	str	r3, [r2, #0]
}
 801b55c:	bf00      	nop
 801b55e:	46bd      	mov	sp, r7
 801b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b564:	4770      	bx	lr

0801b566 <LL_RCC_SetRFWKPClockSource>:
{
 801b566:	b480      	push	{r7}
 801b568:	b083      	sub	sp, #12
 801b56a:	af00      	add	r7, sp, #0
 801b56c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801b56e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801b57a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	4313      	orrs	r3, r2
 801b582:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801b586:	bf00      	nop
 801b588:	370c      	adds	r7, #12
 801b58a:	46bd      	mov	sp, r7
 801b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b590:	4770      	bx	lr

0801b592 <LL_RCC_SetSMPSClockSource>:
{
 801b592:	b480      	push	{r7}
 801b594:	b083      	sub	sp, #12
 801b596:	af00      	add	r7, sp, #0
 801b598:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801b59a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5a0:	f023 0203 	bic.w	r2, r3, #3
 801b5a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	4313      	orrs	r3, r2
 801b5ac:	624b      	str	r3, [r1, #36]	; 0x24
}
 801b5ae:	bf00      	nop
 801b5b0:	370c      	adds	r7, #12
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b8:	4770      	bx	lr

0801b5ba <LL_RCC_SetSMPSPrescaler>:
{
 801b5ba:	b480      	push	{r7}
 801b5bc:	b083      	sub	sp, #12
 801b5be:	af00      	add	r7, sp, #0
 801b5c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801b5c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801b5cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	4313      	orrs	r3, r2
 801b5d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 801b5d6:	bf00      	nop
 801b5d8:	370c      	adds	r7, #12
 801b5da:	46bd      	mov	sp, r7
 801b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e0:	4770      	bx	lr

0801b5e2 <LL_RCC_SetUSARTClockSource>:
{
 801b5e2:	b480      	push	{r7}
 801b5e4:	b083      	sub	sp, #12
 801b5e6:	af00      	add	r7, sp, #0
 801b5e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801b5ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b5f2:	f023 0203 	bic.w	r2, r3, #3
 801b5f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	4313      	orrs	r3, r2
 801b5fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b602:	bf00      	nop
 801b604:	370c      	adds	r7, #12
 801b606:	46bd      	mov	sp, r7
 801b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b60c:	4770      	bx	lr

0801b60e <LL_RCC_SetLPUARTClockSource>:
{
 801b60e:	b480      	push	{r7}
 801b610:	b083      	sub	sp, #12
 801b612:	af00      	add	r7, sp, #0
 801b614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801b616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b61e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801b622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	4313      	orrs	r3, r2
 801b62a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b62e:	bf00      	nop
 801b630:	370c      	adds	r7, #12
 801b632:	46bd      	mov	sp, r7
 801b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b638:	4770      	bx	lr

0801b63a <LL_RCC_SetI2CClockSource>:
{
 801b63a:	b480      	push	{r7}
 801b63c:	b083      	sub	sp, #12
 801b63e:	af00      	add	r7, sp, #0
 801b640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801b642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b646:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	091b      	lsrs	r3, r3, #4
 801b64e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801b652:	43db      	mvns	r3, r3
 801b654:	401a      	ands	r2, r3
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	011b      	lsls	r3, r3, #4
 801b65a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801b65e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b662:	4313      	orrs	r3, r2
 801b664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b668:	bf00      	nop
 801b66a:	370c      	adds	r7, #12
 801b66c:	46bd      	mov	sp, r7
 801b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b672:	4770      	bx	lr

0801b674 <LL_RCC_SetLPTIMClockSource>:
{
 801b674:	b480      	push	{r7}
 801b676:	b083      	sub	sp, #12
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801b67c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b680:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	0c1b      	lsrs	r3, r3, #16
 801b688:	041b      	lsls	r3, r3, #16
 801b68a:	43db      	mvns	r3, r3
 801b68c:	401a      	ands	r2, r3
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	041b      	lsls	r3, r3, #16
 801b692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b696:	4313      	orrs	r3, r2
 801b698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b69c:	bf00      	nop
 801b69e:	370c      	adds	r7, #12
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a6:	4770      	bx	lr

0801b6a8 <LL_RCC_SetSAIClockSource>:
{
 801b6a8:	b480      	push	{r7}
 801b6aa:	b083      	sub	sp, #12
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801b6b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b6b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b6bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	4313      	orrs	r3, r2
 801b6c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b6c8:	bf00      	nop
 801b6ca:	370c      	adds	r7, #12
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d2:	4770      	bx	lr

0801b6d4 <LL_RCC_SetRNGClockSource>:
{
 801b6d4:	b480      	push	{r7}
 801b6d6:	b083      	sub	sp, #12
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801b6dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b6e4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801b6e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	4313      	orrs	r3, r2
 801b6f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b6f4:	bf00      	nop
 801b6f6:	370c      	adds	r7, #12
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fe:	4770      	bx	lr

0801b700 <LL_RCC_SetCLK48ClockSource>:
{
 801b700:	b480      	push	{r7}
 801b702:	b083      	sub	sp, #12
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801b708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b710:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801b714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	4313      	orrs	r3, r2
 801b71c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b720:	bf00      	nop
 801b722:	370c      	adds	r7, #12
 801b724:	46bd      	mov	sp, r7
 801b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b72a:	4770      	bx	lr

0801b72c <LL_RCC_SetUSBClockSource>:
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	b082      	sub	sp, #8
 801b730:	af00      	add	r7, sp, #0
 801b732:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801b734:	6878      	ldr	r0, [r7, #4]
 801b736:	f7ff ffe3 	bl	801b700 <LL_RCC_SetCLK48ClockSource>
}
 801b73a:	bf00      	nop
 801b73c:	3708      	adds	r7, #8
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}

0801b742 <LL_RCC_SetADCClockSource>:
{
 801b742:	b480      	push	{r7}
 801b744:	b083      	sub	sp, #12
 801b746:	af00      	add	r7, sp, #0
 801b748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801b74a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801b756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	4313      	orrs	r3, r2
 801b75e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b762:	bf00      	nop
 801b764:	370c      	adds	r7, #12
 801b766:	46bd      	mov	sp, r7
 801b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b76c:	4770      	bx	lr

0801b76e <LL_RCC_SetRTCClockSource>:
{
 801b76e:	b480      	push	{r7}
 801b770:	b083      	sub	sp, #12
 801b772:	af00      	add	r7, sp, #0
 801b774:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801b776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b77e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	4313      	orrs	r3, r2
 801b78a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801b78e:	bf00      	nop
 801b790:	370c      	adds	r7, #12
 801b792:	46bd      	mov	sp, r7
 801b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b798:	4770      	bx	lr

0801b79a <LL_RCC_GetRTCClockSource>:
{
 801b79a:	b480      	push	{r7}
 801b79c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801b79e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b2:	4770      	bx	lr

0801b7b4 <LL_RCC_ForceBackupDomainReset>:
{
 801b7b4:	b480      	push	{r7}
 801b7b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801b7b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b7c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b7c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801b7cc:	bf00      	nop
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d4:	4770      	bx	lr

0801b7d6 <LL_RCC_ReleaseBackupDomainReset>:
{
 801b7d6:	b480      	push	{r7}
 801b7d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801b7da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b7e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b7ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801b7ee:	bf00      	nop
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f6:	4770      	bx	lr

0801b7f8 <LL_RCC_PLLSAI1_Enable>:
{
 801b7f8:	b480      	push	{r7}
 801b7fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801b7fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b80a:	6013      	str	r3, [r2, #0]
}
 801b80c:	bf00      	nop
 801b80e:	46bd      	mov	sp, r7
 801b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b814:	4770      	bx	lr

0801b816 <LL_RCC_PLLSAI1_Disable>:
{
 801b816:	b480      	push	{r7}
 801b818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801b81a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b824:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801b828:	6013      	str	r3, [r2, #0]
}
 801b82a:	bf00      	nop
 801b82c:	46bd      	mov	sp, r7
 801b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b832:	4770      	bx	lr

0801b834 <LL_RCC_PLLSAI1_IsReady>:
{
 801b834:	b480      	push	{r7}
 801b836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801b838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b846:	d101      	bne.n	801b84c <LL_RCC_PLLSAI1_IsReady+0x18>
 801b848:	2301      	movs	r3, #1
 801b84a:	e000      	b.n	801b84e <LL_RCC_PLLSAI1_IsReady+0x1a>
 801b84c:	2300      	movs	r3, #0
}
 801b84e:	4618      	mov	r0, r3
 801b850:	46bd      	mov	sp, r7
 801b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b856:	4770      	bx	lr

0801b858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b088      	sub	sp, #32
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801b860:	2300      	movs	r3, #0
 801b862:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801b864:	2300      	movs	r3, #0
 801b866:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b870:	2b00      	cmp	r3, #0
 801b872:	d034      	beq.n	801b8de <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801b87c:	d021      	beq.n	801b8c2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801b87e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801b882:	d81b      	bhi.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 801b884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b888:	d01d      	beq.n	801b8c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801b88a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b88e:	d815      	bhi.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 801b890:	2b00      	cmp	r3, #0
 801b892:	d00b      	beq.n	801b8ac <HAL_RCCEx_PeriphCLKConfig+0x54>
 801b894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b898:	d110      	bne.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801b89a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b89e:	68db      	ldr	r3, [r3, #12]
 801b8a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b8a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b8a8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801b8aa:	e00d      	b.n	801b8c8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	3304      	adds	r3, #4
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f000 f94d 	bl	801bb50 <RCCEx_PLLSAI1_ConfigNP>
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801b8ba:	e005      	b.n	801b8c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801b8bc:	2301      	movs	r3, #1
 801b8be:	77fb      	strb	r3, [r7, #31]
        break;
 801b8c0:	e002      	b.n	801b8c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801b8c2:	bf00      	nop
 801b8c4:	e000      	b.n	801b8c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801b8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b8c8:	7ffb      	ldrb	r3, [r7, #31]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d105      	bne.n	801b8da <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	f7ff fee8 	bl	801b6a8 <LL_RCC_SetSAIClockSource>
 801b8d8:	e001      	b.n	801b8de <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b8da:	7ffb      	ldrb	r3, [r7, #31]
 801b8dc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d046      	beq.n	801b978 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801b8ea:	f7ff ff56 	bl	801b79a <LL_RCC_GetRTCClockSource>
 801b8ee:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8f4:	69ba      	ldr	r2, [r7, #24]
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	d03c      	beq.n	801b974 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801b8fa:	f7fe fc59 	bl	801a1b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801b8fe:	69bb      	ldr	r3, [r7, #24]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d105      	bne.n	801b910 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b908:	4618      	mov	r0, r3
 801b90a:	f7ff ff30 	bl	801b76e <LL_RCC_SetRTCClockSource>
 801b90e:	e02e      	b.n	801b96e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 801b910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b918:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801b91a:	f7ff ff4b 	bl	801b7b4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801b91e:	f7ff ff5a 	bl	801b7d6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801b922:	697b      	ldr	r3, [r7, #20]
 801b924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b92c:	4313      	orrs	r3, r2
 801b92e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 801b930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b934:	697b      	ldr	r3, [r7, #20]
 801b936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801b93a:	f7ff fde1 	bl	801b500 <LL_RCC_LSE_IsEnabled>
 801b93e:	4603      	mov	r3, r0
 801b940:	2b01      	cmp	r3, #1
 801b942:	d114      	bne.n	801b96e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b944:	f7fc fba2 	bl	801808c <HAL_GetTick>
 801b948:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801b94a:	e00b      	b.n	801b964 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b94c:	f7fc fb9e 	bl	801808c <HAL_GetTick>
 801b950:	4602      	mov	r2, r0
 801b952:	693b      	ldr	r3, [r7, #16]
 801b954:	1ad3      	subs	r3, r2, r3
 801b956:	f241 3288 	movw	r2, #5000	; 0x1388
 801b95a:	4293      	cmp	r3, r2
 801b95c:	d902      	bls.n	801b964 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801b95e:	2303      	movs	r3, #3
 801b960:	77fb      	strb	r3, [r7, #31]
              break;
 801b962:	e004      	b.n	801b96e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 801b964:	f7ff fdde 	bl	801b524 <LL_RCC_LSE_IsReady>
 801b968:	4603      	mov	r3, r0
 801b96a:	2b01      	cmp	r3, #1
 801b96c:	d1ee      	bne.n	801b94c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801b96e:	7ffb      	ldrb	r3, [r7, #31]
 801b970:	77bb      	strb	r3, [r7, #30]
 801b972:	e001      	b.n	801b978 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b974:	7ffb      	ldrb	r3, [r7, #31]
 801b976:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	f003 0301 	and.w	r3, r3, #1
 801b980:	2b00      	cmp	r3, #0
 801b982:	d004      	beq.n	801b98e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	699b      	ldr	r3, [r3, #24]
 801b988:	4618      	mov	r0, r3
 801b98a:	f7ff fe2a 	bl	801b5e2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	f003 0302 	and.w	r3, r3, #2
 801b996:	2b00      	cmp	r3, #0
 801b998:	d004      	beq.n	801b9a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	69db      	ldr	r3, [r3, #28]
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f7ff fe35 	bl	801b60e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	f003 0310 	and.w	r3, r3, #16
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d004      	beq.n	801b9ba <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	f7ff fe5d 	bl	801b674 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	f003 0320 	and.w	r3, r3, #32
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d004      	beq.n	801b9d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	f7ff fe52 	bl	801b674 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	f003 0304 	and.w	r3, r3, #4
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d004      	beq.n	801b9e6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	6a1b      	ldr	r3, [r3, #32]
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	f7ff fe2a 	bl	801b63a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	f003 0308 	and.w	r3, r3, #8
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d004      	beq.n	801b9fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9f6:	4618      	mov	r0, r3
 801b9f8:	f7ff fe1f 	bl	801b63a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d022      	beq.n	801ba4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	f7ff fe8d 	bl	801b72c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801ba1a:	d107      	bne.n	801ba2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801ba1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ba20:	68db      	ldr	r3, [r3, #12]
 801ba22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ba26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ba2a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801ba34:	d10b      	bne.n	801ba4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	3304      	adds	r3, #4
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	f000 f8e3 	bl	801bc06 <RCCEx_PLLSAI1_ConfigNQ>
 801ba40:	4603      	mov	r3, r0
 801ba42:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801ba44:	7ffb      	ldrb	r3, [r7, #31]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d001      	beq.n	801ba4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801ba4a:	7ffb      	ldrb	r3, [r7, #31]
 801ba4c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d02b      	beq.n	801bab2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ba62:	d008      	beq.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ba6c:	d003      	beq.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d105      	bne.n	801ba82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f7ff fe2a 	bl	801b6d4 <LL_RCC_SetRNGClockSource>
 801ba80:	e00a      	b.n	801ba98 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ba8a:	60fb      	str	r3, [r7, #12]
 801ba8c:	2000      	movs	r0, #0
 801ba8e:	f7ff fe21 	bl	801b6d4 <LL_RCC_SetRNGClockSource>
 801ba92:	68f8      	ldr	r0, [r7, #12]
 801ba94:	f7ff fe34 	bl	801b700 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801baa0:	d107      	bne.n	801bab2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801baa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801baa6:	68db      	ldr	r3, [r3, #12]
 801baa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801baac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801bab0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801baba:	2b00      	cmp	r3, #0
 801babc:	d022      	beq.n	801bb04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bac2:	4618      	mov	r0, r3
 801bac4:	f7ff fe3d 	bl	801b742 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bad0:	d107      	bne.n	801bae2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bad6:	68db      	ldr	r3, [r3, #12]
 801bad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801badc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bae0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801baea:	d10b      	bne.n	801bb04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	3304      	adds	r3, #4
 801baf0:	4618      	mov	r0, r3
 801baf2:	f000 f8e3 	bl	801bcbc <RCCEx_PLLSAI1_ConfigNR>
 801baf6:	4603      	mov	r3, r0
 801baf8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801bafa:	7ffb      	ldrb	r3, [r7, #31]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d001      	beq.n	801bb04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 801bb00:	7ffb      	ldrb	r3, [r7, #31]
 801bb02:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d004      	beq.n	801bb1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb14:	4618      	mov	r0, r3
 801bb16:	f7ff fd26 	bl	801b566 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d009      	beq.n	801bb3a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bb2a:	4618      	mov	r0, r3
 801bb2c:	f7ff fd45 	bl	801b5ba <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb34:	4618      	mov	r0, r3
 801bb36:	f7ff fd2c 	bl	801b592 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801bb3a:	7fbb      	ldrb	r3, [r7, #30]
}
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	3720      	adds	r7, #32
 801bb40:	46bd      	mov	sp, r7
 801bb42:	bd80      	pop	{r7, pc}

0801bb44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801bb48:	f7ff fcfe 	bl	801b548 <LL_RCC_MSI_EnablePLLMode>
}
 801bb4c:	bf00      	nop
 801bb4e:	bd80      	pop	{r7, pc}

0801bb50 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b084      	sub	sp, #16
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801bb58:	2300      	movs	r3, #0
 801bb5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801bb5c:	f7ff fe5b 	bl	801b816 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801bb60:	f7fc fa94 	bl	801808c <HAL_GetTick>
 801bb64:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bb66:	e009      	b.n	801bb7c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bb68:	f7fc fa90 	bl	801808c <HAL_GetTick>
 801bb6c:	4602      	mov	r2, r0
 801bb6e:	68bb      	ldr	r3, [r7, #8]
 801bb70:	1ad3      	subs	r3, r2, r3
 801bb72:	2b02      	cmp	r3, #2
 801bb74:	d902      	bls.n	801bb7c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801bb76:	2303      	movs	r3, #3
 801bb78:	73fb      	strb	r3, [r7, #15]
      break;
 801bb7a:	e004      	b.n	801bb86 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bb7c:	f7ff fe5a 	bl	801b834 <LL_RCC_PLLSAI1_IsReady>
 801bb80:	4603      	mov	r3, r0
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d1f0      	bne.n	801bb68 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801bb86:	7bfb      	ldrb	r3, [r7, #15]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d137      	bne.n	801bbfc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801bb8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bb90:	691b      	ldr	r3, [r3, #16]
 801bb92:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	021b      	lsls	r3, r3, #8
 801bb9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bba0:	4313      	orrs	r3, r2
 801bba2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801bba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bba8:	691b      	ldr	r3, [r3, #16]
 801bbaa:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	685b      	ldr	r3, [r3, #4]
 801bbb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bbb6:	4313      	orrs	r3, r2
 801bbb8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801bbba:	f7ff fe1d 	bl	801b7f8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bbbe:	f7fc fa65 	bl	801808c <HAL_GetTick>
 801bbc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bbc4:	e009      	b.n	801bbda <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bbc6:	f7fc fa61 	bl	801808c <HAL_GetTick>
 801bbca:	4602      	mov	r2, r0
 801bbcc:	68bb      	ldr	r3, [r7, #8]
 801bbce:	1ad3      	subs	r3, r2, r3
 801bbd0:	2b02      	cmp	r3, #2
 801bbd2:	d902      	bls.n	801bbda <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801bbd4:	2303      	movs	r3, #3
 801bbd6:	73fb      	strb	r3, [r7, #15]
        break;
 801bbd8:	e004      	b.n	801bbe4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bbda:	f7ff fe2b 	bl	801b834 <LL_RCC_PLLSAI1_IsReady>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b01      	cmp	r3, #1
 801bbe2:	d1f0      	bne.n	801bbc6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801bbe4:	7bfb      	ldrb	r3, [r7, #15]
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d108      	bne.n	801bbfc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801bbea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bbee:	691a      	ldr	r2, [r3, #16]
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	691b      	ldr	r3, [r3, #16]
 801bbf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bbf8:	4313      	orrs	r3, r2
 801bbfa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801bbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbfe:	4618      	mov	r0, r3
 801bc00:	3710      	adds	r7, #16
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bd80      	pop	{r7, pc}

0801bc06 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801bc06:	b580      	push	{r7, lr}
 801bc08:	b084      	sub	sp, #16
 801bc0a:	af00      	add	r7, sp, #0
 801bc0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801bc0e:	2300      	movs	r3, #0
 801bc10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801bc12:	f7ff fe00 	bl	801b816 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801bc16:	f7fc fa39 	bl	801808c <HAL_GetTick>
 801bc1a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bc1c:	e009      	b.n	801bc32 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bc1e:	f7fc fa35 	bl	801808c <HAL_GetTick>
 801bc22:	4602      	mov	r2, r0
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	1ad3      	subs	r3, r2, r3
 801bc28:	2b02      	cmp	r3, #2
 801bc2a:	d902      	bls.n	801bc32 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801bc2c:	2303      	movs	r3, #3
 801bc2e:	73fb      	strb	r3, [r7, #15]
      break;
 801bc30:	e004      	b.n	801bc3c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bc32:	f7ff fdff 	bl	801b834 <LL_RCC_PLLSAI1_IsReady>
 801bc36:	4603      	mov	r3, r0
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d1f0      	bne.n	801bc1e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801bc3c:	7bfb      	ldrb	r3, [r7, #15]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d137      	bne.n	801bcb2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801bc42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bc46:	691b      	ldr	r3, [r3, #16]
 801bc48:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	021b      	lsls	r3, r3, #8
 801bc52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bc56:	4313      	orrs	r3, r2
 801bc58:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801bc5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bc5e:	691b      	ldr	r3, [r3, #16]
 801bc60:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	689b      	ldr	r3, [r3, #8]
 801bc68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bc6c:	4313      	orrs	r3, r2
 801bc6e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801bc70:	f7ff fdc2 	bl	801b7f8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bc74:	f7fc fa0a 	bl	801808c <HAL_GetTick>
 801bc78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bc7a:	e009      	b.n	801bc90 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bc7c:	f7fc fa06 	bl	801808c <HAL_GetTick>
 801bc80:	4602      	mov	r2, r0
 801bc82:	68bb      	ldr	r3, [r7, #8]
 801bc84:	1ad3      	subs	r3, r2, r3
 801bc86:	2b02      	cmp	r3, #2
 801bc88:	d902      	bls.n	801bc90 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801bc8a:	2303      	movs	r3, #3
 801bc8c:	73fb      	strb	r3, [r7, #15]
        break;
 801bc8e:	e004      	b.n	801bc9a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bc90:	f7ff fdd0 	bl	801b834 <LL_RCC_PLLSAI1_IsReady>
 801bc94:	4603      	mov	r3, r0
 801bc96:	2b01      	cmp	r3, #1
 801bc98:	d1f0      	bne.n	801bc7c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801bc9a:	7bfb      	ldrb	r3, [r7, #15]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d108      	bne.n	801bcb2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801bca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bca4:	691a      	ldr	r2, [r3, #16]
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	691b      	ldr	r3, [r3, #16]
 801bcaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bcae:	4313      	orrs	r3, r2
 801bcb0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	3710      	adds	r7, #16
 801bcb8:	46bd      	mov	sp, r7
 801bcba:	bd80      	pop	{r7, pc}

0801bcbc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b084      	sub	sp, #16
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801bcc8:	f7ff fda5 	bl	801b816 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801bccc:	f7fc f9de 	bl	801808c <HAL_GetTick>
 801bcd0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bcd2:	e009      	b.n	801bce8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bcd4:	f7fc f9da 	bl	801808c <HAL_GetTick>
 801bcd8:	4602      	mov	r2, r0
 801bcda:	68bb      	ldr	r3, [r7, #8]
 801bcdc:	1ad3      	subs	r3, r2, r3
 801bcde:	2b02      	cmp	r3, #2
 801bce0:	d902      	bls.n	801bce8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801bce2:	2303      	movs	r3, #3
 801bce4:	73fb      	strb	r3, [r7, #15]
      break;
 801bce6:	e004      	b.n	801bcf2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bce8:	f7ff fda4 	bl	801b834 <LL_RCC_PLLSAI1_IsReady>
 801bcec:	4603      	mov	r3, r0
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d1f0      	bne.n	801bcd4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801bcf2:	7bfb      	ldrb	r3, [r7, #15]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d137      	bne.n	801bd68 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801bcf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bcfc:	691b      	ldr	r3, [r3, #16]
 801bcfe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	021b      	lsls	r3, r3, #8
 801bd08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bd0c:	4313      	orrs	r3, r2
 801bd0e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801bd10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bd14:	691b      	ldr	r3, [r3, #16]
 801bd16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	68db      	ldr	r3, [r3, #12]
 801bd1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bd22:	4313      	orrs	r3, r2
 801bd24:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801bd26:	f7ff fd67 	bl	801b7f8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bd2a:	f7fc f9af 	bl	801808c <HAL_GetTick>
 801bd2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bd30:	e009      	b.n	801bd46 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bd32:	f7fc f9ab 	bl	801808c <HAL_GetTick>
 801bd36:	4602      	mov	r2, r0
 801bd38:	68bb      	ldr	r3, [r7, #8]
 801bd3a:	1ad3      	subs	r3, r2, r3
 801bd3c:	2b02      	cmp	r3, #2
 801bd3e:	d902      	bls.n	801bd46 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801bd40:	2303      	movs	r3, #3
 801bd42:	73fb      	strb	r3, [r7, #15]
        break;
 801bd44:	e004      	b.n	801bd50 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bd46:	f7ff fd75 	bl	801b834 <LL_RCC_PLLSAI1_IsReady>
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	2b01      	cmp	r3, #1
 801bd4e:	d1f0      	bne.n	801bd32 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801bd50:	7bfb      	ldrb	r3, [r7, #15]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d108      	bne.n	801bd68 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801bd56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bd5a:	691a      	ldr	r2, [r3, #16]
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	691b      	ldr	r3, [r3, #16]
 801bd60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bd64:	4313      	orrs	r3, r2
 801bd66:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	3710      	adds	r7, #16
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bd80      	pop	{r7, pc}

0801bd72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801bd72:	b580      	push	{r7, lr}
 801bd74:	b082      	sub	sp, #8
 801bd76:	af00      	add	r7, sp, #0
 801bd78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d101      	bne.n	801bd84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801bd80:	2301      	movs	r3, #1
 801bd82:	e049      	b.n	801be18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bd8a:	b2db      	uxtb	r3, r3
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d106      	bne.n	801bd9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	2200      	movs	r2, #0
 801bd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801bd98:	6878      	ldr	r0, [r7, #4]
 801bd9a:	f7e7 fe53 	bl	8003a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	2202      	movs	r2, #2
 801bda2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	681a      	ldr	r2, [r3, #0]
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	3304      	adds	r3, #4
 801bdae:	4619      	mov	r1, r3
 801bdb0:	4610      	mov	r0, r2
 801bdb2:	f000 f835 	bl	801be20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	2201      	movs	r2, #1
 801bdba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	2201      	movs	r2, #1
 801bdc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2201      	movs	r2, #1
 801bdca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2201      	movs	r2, #1
 801bdd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	2201      	movs	r2, #1
 801bdda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	2201      	movs	r2, #1
 801bde2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	2201      	movs	r2, #1
 801bdea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	2201      	movs	r2, #1
 801bdf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	2201      	movs	r2, #1
 801bdfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	2201      	movs	r2, #1
 801be02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	2201      	movs	r2, #1
 801be0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	2201      	movs	r2, #1
 801be12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801be16:	2300      	movs	r3, #0
}
 801be18:	4618      	mov	r0, r3
 801be1a:	3708      	adds	r7, #8
 801be1c:	46bd      	mov	sp, r7
 801be1e:	bd80      	pop	{r7, pc}

0801be20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801be20:	b480      	push	{r7}
 801be22:	b085      	sub	sp, #20
 801be24:	af00      	add	r7, sp, #0
 801be26:	6078      	str	r0, [r7, #4]
 801be28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	4a2a      	ldr	r2, [pc, #168]	; (801bedc <TIM_Base_SetConfig+0xbc>)
 801be34:	4293      	cmp	r3, r2
 801be36:	d003      	beq.n	801be40 <TIM_Base_SetConfig+0x20>
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be3e:	d108      	bne.n	801be52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801be46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801be48:	683b      	ldr	r3, [r7, #0]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	68fa      	ldr	r2, [r7, #12]
 801be4e:	4313      	orrs	r3, r2
 801be50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	4a21      	ldr	r2, [pc, #132]	; (801bedc <TIM_Base_SetConfig+0xbc>)
 801be56:	4293      	cmp	r3, r2
 801be58:	d00b      	beq.n	801be72 <TIM_Base_SetConfig+0x52>
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be60:	d007      	beq.n	801be72 <TIM_Base_SetConfig+0x52>
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	4a1e      	ldr	r2, [pc, #120]	; (801bee0 <TIM_Base_SetConfig+0xc0>)
 801be66:	4293      	cmp	r3, r2
 801be68:	d003      	beq.n	801be72 <TIM_Base_SetConfig+0x52>
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	4a1d      	ldr	r2, [pc, #116]	; (801bee4 <TIM_Base_SetConfig+0xc4>)
 801be6e:	4293      	cmp	r3, r2
 801be70:	d108      	bne.n	801be84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801be78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801be7a:	683b      	ldr	r3, [r7, #0]
 801be7c:	68db      	ldr	r3, [r3, #12]
 801be7e:	68fa      	ldr	r2, [r7, #12]
 801be80:	4313      	orrs	r3, r2
 801be82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801be8a:	683b      	ldr	r3, [r7, #0]
 801be8c:	695b      	ldr	r3, [r3, #20]
 801be8e:	4313      	orrs	r3, r2
 801be90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	68fa      	ldr	r2, [r7, #12]
 801be96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801be98:	683b      	ldr	r3, [r7, #0]
 801be9a:	689a      	ldr	r2, [r3, #8]
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801bea0:	683b      	ldr	r3, [r7, #0]
 801bea2:	681a      	ldr	r2, [r3, #0]
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	4a0c      	ldr	r2, [pc, #48]	; (801bedc <TIM_Base_SetConfig+0xbc>)
 801beac:	4293      	cmp	r3, r2
 801beae:	d007      	beq.n	801bec0 <TIM_Base_SetConfig+0xa0>
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	4a0b      	ldr	r2, [pc, #44]	; (801bee0 <TIM_Base_SetConfig+0xc0>)
 801beb4:	4293      	cmp	r3, r2
 801beb6:	d003      	beq.n	801bec0 <TIM_Base_SetConfig+0xa0>
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	4a0a      	ldr	r2, [pc, #40]	; (801bee4 <TIM_Base_SetConfig+0xc4>)
 801bebc:	4293      	cmp	r3, r2
 801bebe:	d103      	bne.n	801bec8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801bec0:	683b      	ldr	r3, [r7, #0]
 801bec2:	691a      	ldr	r2, [r3, #16]
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	2201      	movs	r2, #1
 801becc:	615a      	str	r2, [r3, #20]
}
 801bece:	bf00      	nop
 801bed0:	3714      	adds	r7, #20
 801bed2:	46bd      	mov	sp, r7
 801bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed8:	4770      	bx	lr
 801beda:	bf00      	nop
 801bedc:	40012c00 	.word	0x40012c00
 801bee0:	40014400 	.word	0x40014400
 801bee4:	40014800 	.word	0x40014800

0801bee8 <LL_RCC_GetUSARTClockSource>:
{
 801bee8:	b480      	push	{r7}
 801beea:	b083      	sub	sp, #12
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801bef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bef4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	4013      	ands	r3, r2
}
 801befc:	4618      	mov	r0, r3
 801befe:	370c      	adds	r7, #12
 801bf00:	46bd      	mov	sp, r7
 801bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf06:	4770      	bx	lr

0801bf08 <LL_RCC_GetLPUARTClockSource>:
{
 801bf08:	b480      	push	{r7}
 801bf0a:	b083      	sub	sp, #12
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801bf10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bf14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	4013      	ands	r3, r2
}
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	370c      	adds	r7, #12
 801bf20:	46bd      	mov	sp, r7
 801bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf26:	4770      	bx	lr

0801bf28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b082      	sub	sp, #8
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d101      	bne.n	801bf3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801bf36:	2301      	movs	r3, #1
 801bf38:	e042      	b.n	801bfc0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d106      	bne.n	801bf52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	2200      	movs	r2, #0
 801bf48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801bf4c:	6878      	ldr	r0, [r7, #4]
 801bf4e:	f7e7 fe1b 	bl	8003b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	2224      	movs	r2, #36	; 0x24
 801bf56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	681a      	ldr	r2, [r3, #0]
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	f022 0201 	bic.w	r2, r2, #1
 801bf68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801bf6a:	6878      	ldr	r0, [r7, #4]
 801bf6c:	f000 fc54 	bl	801c818 <UART_SetConfig>
 801bf70:	4603      	mov	r3, r0
 801bf72:	2b01      	cmp	r3, #1
 801bf74:	d101      	bne.n	801bf7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801bf76:	2301      	movs	r3, #1
 801bf78:	e022      	b.n	801bfc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d002      	beq.n	801bf88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801bf82:	6878      	ldr	r0, [r7, #4]
 801bf84:	f000 fe70 	bl	801cc68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	685a      	ldr	r2, [r3, #4]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801bf96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	689a      	ldr	r2, [r3, #8]
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801bfa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	681a      	ldr	r2, [r3, #0]
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	f042 0201 	orr.w	r2, r2, #1
 801bfb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801bfb8:	6878      	ldr	r0, [r7, #4]
 801bfba:	f000 fef7 	bl	801cdac <UART_CheckIdleState>
 801bfbe:	4603      	mov	r3, r0
}
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	3708      	adds	r7, #8
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	bd80      	pop	{r7, pc}

0801bfc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bfc8:	b580      	push	{r7, lr}
 801bfca:	b08a      	sub	sp, #40	; 0x28
 801bfcc:	af02      	add	r7, sp, #8
 801bfce:	60f8      	str	r0, [r7, #12]
 801bfd0:	60b9      	str	r1, [r7, #8]
 801bfd2:	603b      	str	r3, [r7, #0]
 801bfd4:	4613      	mov	r3, r2
 801bfd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bfde:	2b20      	cmp	r3, #32
 801bfe0:	d17b      	bne.n	801c0da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801bfe2:	68bb      	ldr	r3, [r7, #8]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d002      	beq.n	801bfee <HAL_UART_Transmit+0x26>
 801bfe8:	88fb      	ldrh	r3, [r7, #6]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d101      	bne.n	801bff2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801bfee:	2301      	movs	r3, #1
 801bff0:	e074      	b.n	801c0dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	2200      	movs	r2, #0
 801bff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	2221      	movs	r2, #33	; 0x21
 801bffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c002:	f7fc f843 	bl	801808c <HAL_GetTick>
 801c006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	88fa      	ldrh	r2, [r7, #6]
 801c00c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	88fa      	ldrh	r2, [r7, #6]
 801c014:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	689b      	ldr	r3, [r3, #8]
 801c01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c020:	d108      	bne.n	801c034 <HAL_UART_Transmit+0x6c>
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	691b      	ldr	r3, [r3, #16]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d104      	bne.n	801c034 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801c02a:	2300      	movs	r3, #0
 801c02c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	61bb      	str	r3, [r7, #24]
 801c032:	e003      	b.n	801c03c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c038:	2300      	movs	r3, #0
 801c03a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c03c:	e030      	b.n	801c0a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c03e:	683b      	ldr	r3, [r7, #0]
 801c040:	9300      	str	r3, [sp, #0]
 801c042:	697b      	ldr	r3, [r7, #20]
 801c044:	2200      	movs	r2, #0
 801c046:	2180      	movs	r1, #128	; 0x80
 801c048:	68f8      	ldr	r0, [r7, #12]
 801c04a:	f000 ff59 	bl	801cf00 <UART_WaitOnFlagUntilTimeout>
 801c04e:	4603      	mov	r3, r0
 801c050:	2b00      	cmp	r3, #0
 801c052:	d005      	beq.n	801c060 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	2220      	movs	r2, #32
 801c058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801c05c:	2303      	movs	r3, #3
 801c05e:	e03d      	b.n	801c0dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801c060:	69fb      	ldr	r3, [r7, #28]
 801c062:	2b00      	cmp	r3, #0
 801c064:	d10b      	bne.n	801c07e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c066:	69bb      	ldr	r3, [r7, #24]
 801c068:	881b      	ldrh	r3, [r3, #0]
 801c06a:	461a      	mov	r2, r3
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801c076:	69bb      	ldr	r3, [r7, #24]
 801c078:	3302      	adds	r3, #2
 801c07a:	61bb      	str	r3, [r7, #24]
 801c07c:	e007      	b.n	801c08e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c07e:	69fb      	ldr	r3, [r7, #28]
 801c080:	781a      	ldrb	r2, [r3, #0]
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801c088:	69fb      	ldr	r3, [r7, #28]
 801c08a:	3301      	adds	r3, #1
 801c08c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801c094:	b29b      	uxth	r3, r3
 801c096:	3b01      	subs	r3, #1
 801c098:	b29a      	uxth	r2, r3
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d1c8      	bne.n	801c03e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c0ac:	683b      	ldr	r3, [r7, #0]
 801c0ae:	9300      	str	r3, [sp, #0]
 801c0b0:	697b      	ldr	r3, [r7, #20]
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	2140      	movs	r1, #64	; 0x40
 801c0b6:	68f8      	ldr	r0, [r7, #12]
 801c0b8:	f000 ff22 	bl	801cf00 <UART_WaitOnFlagUntilTimeout>
 801c0bc:	4603      	mov	r3, r0
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d005      	beq.n	801c0ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	2220      	movs	r2, #32
 801c0c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801c0ca:	2303      	movs	r3, #3
 801c0cc:	e006      	b.n	801c0dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	2220      	movs	r2, #32
 801c0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	e000      	b.n	801c0dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801c0da:	2302      	movs	r3, #2
  }
}
 801c0dc:	4618      	mov	r0, r3
 801c0de:	3720      	adds	r7, #32
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	bd80      	pop	{r7, pc}

0801c0e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b08a      	sub	sp, #40	; 0x28
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	60f8      	str	r0, [r7, #12]
 801c0ec:	60b9      	str	r1, [r7, #8]
 801c0ee:	4613      	mov	r3, r2
 801c0f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c0f8:	2b20      	cmp	r3, #32
 801c0fa:	d137      	bne.n	801c16c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801c0fc:	68bb      	ldr	r3, [r7, #8]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d002      	beq.n	801c108 <HAL_UART_Receive_DMA+0x24>
 801c102:	88fb      	ldrh	r3, [r7, #6]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d101      	bne.n	801c10c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801c108:	2301      	movs	r3, #1
 801c10a:	e030      	b.n	801c16e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	2200      	movs	r2, #0
 801c110:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	4a18      	ldr	r2, [pc, #96]	; (801c178 <HAL_UART_Receive_DMA+0x94>)
 801c118:	4293      	cmp	r3, r2
 801c11a:	d01f      	beq.n	801c15c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	685b      	ldr	r3, [r3, #4]
 801c122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c126:	2b00      	cmp	r3, #0
 801c128:	d018      	beq.n	801c15c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	e853 3f00 	ldrex	r3, [r3]
 801c136:	613b      	str	r3, [r7, #16]
   return(result);
 801c138:	693b      	ldr	r3, [r7, #16]
 801c13a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c13e:	627b      	str	r3, [r7, #36]	; 0x24
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	461a      	mov	r2, r3
 801c146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c148:	623b      	str	r3, [r7, #32]
 801c14a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c14c:	69f9      	ldr	r1, [r7, #28]
 801c14e:	6a3a      	ldr	r2, [r7, #32]
 801c150:	e841 2300 	strex	r3, r2, [r1]
 801c154:	61bb      	str	r3, [r7, #24]
   return(result);
 801c156:	69bb      	ldr	r3, [r7, #24]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d1e6      	bne.n	801c12a <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801c15c:	88fb      	ldrh	r3, [r7, #6]
 801c15e:	461a      	mov	r2, r3
 801c160:	68b9      	ldr	r1, [r7, #8]
 801c162:	68f8      	ldr	r0, [r7, #12]
 801c164:	f000 ff34 	bl	801cfd0 <UART_Start_Receive_DMA>
 801c168:	4603      	mov	r3, r0
 801c16a:	e000      	b.n	801c16e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c16c:	2302      	movs	r3, #2
  }
}
 801c16e:	4618      	mov	r0, r3
 801c170:	3728      	adds	r7, #40	; 0x28
 801c172:	46bd      	mov	sp, r7
 801c174:	bd80      	pop	{r7, pc}
 801c176:	bf00      	nop
 801c178:	40008000 	.word	0x40008000

0801c17c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b0ba      	sub	sp, #232	; 0xe8
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	69db      	ldr	r3, [r3, #28]
 801c18a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	689b      	ldr	r3, [r3, #8]
 801c19e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801c1a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801c1a6:	f640 030f 	movw	r3, #2063	; 0x80f
 801c1aa:	4013      	ands	r3, r2
 801c1ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801c1b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d11b      	bne.n	801c1f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1bc:	f003 0320 	and.w	r3, r3, #32
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d015      	beq.n	801c1f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c1c8:	f003 0320 	and.w	r3, r3, #32
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d105      	bne.n	801c1dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c1d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c1d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d009      	beq.n	801c1f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	f000 82e3 	beq.w	801c7ac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c1ea:	6878      	ldr	r0, [r7, #4]
 801c1ec:	4798      	blx	r3
      }
      return;
 801c1ee:	e2dd      	b.n	801c7ac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801c1f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	f000 8123 	beq.w	801c440 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801c1fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c1fe:	4b8d      	ldr	r3, [pc, #564]	; (801c434 <HAL_UART_IRQHandler+0x2b8>)
 801c200:	4013      	ands	r3, r2
 801c202:	2b00      	cmp	r3, #0
 801c204:	d106      	bne.n	801c214 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801c206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801c20a:	4b8b      	ldr	r3, [pc, #556]	; (801c438 <HAL_UART_IRQHandler+0x2bc>)
 801c20c:	4013      	ands	r3, r2
 801c20e:	2b00      	cmp	r3, #0
 801c210:	f000 8116 	beq.w	801c440 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801c214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c218:	f003 0301 	and.w	r3, r3, #1
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d011      	beq.n	801c244 <HAL_UART_IRQHandler+0xc8>
 801c220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d00b      	beq.n	801c244 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	2201      	movs	r2, #1
 801c232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c23a:	f043 0201 	orr.w	r2, r3, #1
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c248:	f003 0302 	and.w	r3, r3, #2
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d011      	beq.n	801c274 <HAL_UART_IRQHandler+0xf8>
 801c250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c254:	f003 0301 	and.w	r3, r3, #1
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d00b      	beq.n	801c274 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	2202      	movs	r2, #2
 801c262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c26a:	f043 0204 	orr.w	r2, r3, #4
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c278:	f003 0304 	and.w	r3, r3, #4
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d011      	beq.n	801c2a4 <HAL_UART_IRQHandler+0x128>
 801c280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c284:	f003 0301 	and.w	r3, r3, #1
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d00b      	beq.n	801c2a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	2204      	movs	r2, #4
 801c292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c29a:	f043 0202 	orr.w	r2, r3, #2
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801c2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c2a8:	f003 0308 	and.w	r3, r3, #8
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d017      	beq.n	801c2e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c2b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c2b4:	f003 0320 	and.w	r3, r3, #32
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d105      	bne.n	801c2c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801c2bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c2c0:	4b5c      	ldr	r3, [pc, #368]	; (801c434 <HAL_UART_IRQHandler+0x2b8>)
 801c2c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d00b      	beq.n	801c2e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	2208      	movs	r2, #8
 801c2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c2d6:	f043 0208 	orr.w	r2, r3, #8
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801c2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c2e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d012      	beq.n	801c312 <HAL_UART_IRQHandler+0x196>
 801c2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c2f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d00c      	beq.n	801c312 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c308:	f043 0220 	orr.w	r2, r3, #32
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c318:	2b00      	cmp	r3, #0
 801c31a:	f000 8249 	beq.w	801c7b0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c322:	f003 0320 	and.w	r3, r3, #32
 801c326:	2b00      	cmp	r3, #0
 801c328:	d013      	beq.n	801c352 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c32a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c32e:	f003 0320 	and.w	r3, r3, #32
 801c332:	2b00      	cmp	r3, #0
 801c334:	d105      	bne.n	801c342 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c33a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d007      	beq.n	801c352 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c346:	2b00      	cmp	r3, #0
 801c348:	d003      	beq.n	801c352 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c34e:	6878      	ldr	r0, [r7, #4]
 801c350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	689b      	ldr	r3, [r3, #8]
 801c362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c366:	2b40      	cmp	r3, #64	; 0x40
 801c368:	d005      	beq.n	801c376 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801c36a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c36e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c372:	2b00      	cmp	r3, #0
 801c374:	d054      	beq.n	801c420 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c376:	6878      	ldr	r0, [r7, #4]
 801c378:	f000 ff11 	bl	801d19e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	689b      	ldr	r3, [r3, #8]
 801c382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c386:	2b40      	cmp	r3, #64	; 0x40
 801c388:	d146      	bne.n	801c418 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	3308      	adds	r3, #8
 801c390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c398:	e853 3f00 	ldrex	r3, [r3]
 801c39c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801c3a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c3a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c3a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	3308      	adds	r3, #8
 801c3b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c3b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801c3ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c3c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c3c6:	e841 2300 	strex	r3, r2, [r1]
 801c3ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c3ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d1d9      	bne.n	801c38a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d017      	beq.n	801c410 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c3e6:	4a15      	ldr	r2, [pc, #84]	; (801c43c <HAL_UART_IRQHandler+0x2c0>)
 801c3e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	f7fc f919 	bl	8018628 <HAL_DMA_Abort_IT>
 801c3f6:	4603      	mov	r3, r0
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d019      	beq.n	801c430 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c404:	687a      	ldr	r2, [r7, #4]
 801c406:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801c40a:	4610      	mov	r0, r2
 801c40c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c40e:	e00f      	b.n	801c430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c410:	6878      	ldr	r0, [r7, #4]
 801c412:	f000 f9eb 	bl	801c7ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c416:	e00b      	b.n	801c430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c418:	6878      	ldr	r0, [r7, #4]
 801c41a:	f000 f9e7 	bl	801c7ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c41e:	e007      	b.n	801c430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c420:	6878      	ldr	r0, [r7, #4]
 801c422:	f000 f9e3 	bl	801c7ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	2200      	movs	r2, #0
 801c42a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801c42e:	e1bf      	b.n	801c7b0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c430:	bf00      	nop
    return;
 801c432:	e1bd      	b.n	801c7b0 <HAL_UART_IRQHandler+0x634>
 801c434:	10000001 	.word	0x10000001
 801c438:	04000120 	.word	0x04000120
 801c43c:	0801d455 	.word	0x0801d455

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c444:	2b01      	cmp	r3, #1
 801c446:	f040 8153 	bne.w	801c6f0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801c44a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c44e:	f003 0310 	and.w	r3, r3, #16
 801c452:	2b00      	cmp	r3, #0
 801c454:	f000 814c 	beq.w	801c6f0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801c458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c45c:	f003 0310 	and.w	r3, r3, #16
 801c460:	2b00      	cmp	r3, #0
 801c462:	f000 8145 	beq.w	801c6f0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	2210      	movs	r2, #16
 801c46c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	689b      	ldr	r3, [r3, #8]
 801c474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c478:	2b40      	cmp	r3, #64	; 0x40
 801c47a:	f040 80bb 	bne.w	801c5f4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	685b      	ldr	r3, [r3, #4]
 801c488:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c48c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c490:	2b00      	cmp	r3, #0
 801c492:	f000 818f 	beq.w	801c7b4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c49c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c4a0:	429a      	cmp	r2, r3
 801c4a2:	f080 8187 	bcs.w	801c7b4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c4ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	f003 0320 	and.w	r3, r3, #32
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	f040 8087 	bne.w	801c5d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c4d0:	e853 3f00 	ldrex	r3, [r3]
 801c4d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c4d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c4dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c4e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	461a      	mov	r2, r3
 801c4ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801c4ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c4f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c4fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c4fe:	e841 2300 	strex	r3, r2, [r1]
 801c502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d1da      	bne.n	801c4c4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	3308      	adds	r3, #8
 801c514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c518:	e853 3f00 	ldrex	r3, [r3]
 801c51c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c51e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c520:	f023 0301 	bic.w	r3, r3, #1
 801c524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	3308      	adds	r3, #8
 801c52e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c532:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801c536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c53a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c53e:	e841 2300 	strex	r3, r2, [r1]
 801c542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c546:	2b00      	cmp	r3, #0
 801c548:	d1e1      	bne.n	801c50e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	3308      	adds	r3, #8
 801c550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c554:	e853 3f00 	ldrex	r3, [r3]
 801c558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c55c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	3308      	adds	r3, #8
 801c56a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c56e:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c576:	e841 2300 	strex	r3, r2, [r1]
 801c57a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d1e3      	bne.n	801c54a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	2220      	movs	r2, #32
 801c586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	2200      	movs	r2, #0
 801c58e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c598:	e853 3f00 	ldrex	r3, [r3]
 801c59c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5a0:	f023 0310 	bic.w	r3, r3, #16
 801c5a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	461a      	mov	r2, r3
 801c5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801c5b2:	65bb      	str	r3, [r7, #88]	; 0x58
 801c5b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c5b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c5ba:	e841 2300 	strex	r3, r2, [r1]
 801c5be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d1e4      	bne.n	801c590 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f7fb ffcc 	bl	801856a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	2202      	movs	r2, #2
 801c5d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c5e4:	b29b      	uxth	r3, r3
 801c5e6:	1ad3      	subs	r3, r2, r3
 801c5e8:	b29b      	uxth	r3, r3
 801c5ea:	4619      	mov	r1, r3
 801c5ec:	6878      	ldr	r0, [r7, #4]
 801c5ee:	f000 f907 	bl	801c800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c5f2:	e0df      	b.n	801c7b4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c600:	b29b      	uxth	r3, r3
 801c602:	1ad3      	subs	r3, r2, r3
 801c604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c60e:	b29b      	uxth	r3, r3
 801c610:	2b00      	cmp	r3, #0
 801c612:	f000 80d1 	beq.w	801c7b8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801c616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	f000 80cc 	beq.w	801c7b8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c628:	e853 3f00 	ldrex	r3, [r3]
 801c62c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	461a      	mov	r2, r3
 801c63e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c642:	647b      	str	r3, [r7, #68]	; 0x44
 801c644:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c64a:	e841 2300 	strex	r3, r2, [r1]
 801c64e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c652:	2b00      	cmp	r3, #0
 801c654:	d1e4      	bne.n	801c620 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	3308      	adds	r3, #8
 801c65c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c660:	e853 3f00 	ldrex	r3, [r3]
 801c664:	623b      	str	r3, [r7, #32]
   return(result);
 801c666:	6a3b      	ldr	r3, [r7, #32]
 801c668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c66c:	f023 0301 	bic.w	r3, r3, #1
 801c670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	3308      	adds	r3, #8
 801c67a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c67e:	633a      	str	r2, [r7, #48]	; 0x30
 801c680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c686:	e841 2300 	strex	r3, r2, [r1]
 801c68a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d1e1      	bne.n	801c656 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	2220      	movs	r2, #32
 801c696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2200      	movs	r2, #0
 801c69e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	2200      	movs	r2, #0
 801c6a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6ac:	693b      	ldr	r3, [r7, #16]
 801c6ae:	e853 3f00 	ldrex	r3, [r3]
 801c6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	f023 0310 	bic.w	r3, r3, #16
 801c6ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	461a      	mov	r2, r3
 801c6c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c6c8:	61fb      	str	r3, [r7, #28]
 801c6ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6cc:	69b9      	ldr	r1, [r7, #24]
 801c6ce:	69fa      	ldr	r2, [r7, #28]
 801c6d0:	e841 2300 	strex	r3, r2, [r1]
 801c6d4:	617b      	str	r3, [r7, #20]
   return(result);
 801c6d6:	697b      	ldr	r3, [r7, #20]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d1e4      	bne.n	801c6a6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	2202      	movs	r2, #2
 801c6e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c6e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c6e6:	4619      	mov	r1, r3
 801c6e8:	6878      	ldr	r0, [r7, #4]
 801c6ea:	f000 f889 	bl	801c800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c6ee:	e063      	b.n	801c7b8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801c6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d00e      	beq.n	801c71a <HAL_UART_IRQHandler+0x59e>
 801c6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c704:	2b00      	cmp	r3, #0
 801c706:	d008      	beq.n	801c71a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801c710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801c712:	6878      	ldr	r0, [r7, #4]
 801c714:	f000 fedf 	bl	801d4d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c718:	e051      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801c71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c722:	2b00      	cmp	r3, #0
 801c724:	d014      	beq.n	801c750 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801c726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d105      	bne.n	801c73e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801c732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d008      	beq.n	801c750 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c742:	2b00      	cmp	r3, #0
 801c744:	d03a      	beq.n	801c7bc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c74a:	6878      	ldr	r0, [r7, #4]
 801c74c:	4798      	blx	r3
    }
    return;
 801c74e:	e035      	b.n	801c7bc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801c750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d009      	beq.n	801c770 <HAL_UART_IRQHandler+0x5f4>
 801c75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c764:	2b00      	cmp	r3, #0
 801c766:	d003      	beq.n	801c770 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801c768:	6878      	ldr	r0, [r7, #4]
 801c76a:	f000 fe89 	bl	801d480 <UART_EndTransmit_IT>
    return;
 801c76e:	e026      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801c770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d009      	beq.n	801c790 <HAL_UART_IRQHandler+0x614>
 801c77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801c784:	2b00      	cmp	r3, #0
 801c786:	d003      	beq.n	801c790 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801c788:	6878      	ldr	r0, [r7, #4]
 801c78a:	f000 feb8 	bl	801d4fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c78e:	e016      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801c790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d010      	beq.n	801c7be <HAL_UART_IRQHandler+0x642>
 801c79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	da0c      	bge.n	801c7be <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801c7a4:	6878      	ldr	r0, [r7, #4]
 801c7a6:	f000 fea0 	bl	801d4ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c7aa:	e008      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
      return;
 801c7ac:	bf00      	nop
 801c7ae:	e006      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
    return;
 801c7b0:	bf00      	nop
 801c7b2:	e004      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
      return;
 801c7b4:	bf00      	nop
 801c7b6:	e002      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
      return;
 801c7b8:	bf00      	nop
 801c7ba:	e000      	b.n	801c7be <HAL_UART_IRQHandler+0x642>
    return;
 801c7bc:	bf00      	nop
  }
}
 801c7be:	37e8      	adds	r7, #232	; 0xe8
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	bd80      	pop	{r7, pc}

0801c7c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c7c4:	b480      	push	{r7}
 801c7c6:	b083      	sub	sp, #12
 801c7c8:	af00      	add	r7, sp, #0
 801c7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801c7cc:	bf00      	nop
 801c7ce:	370c      	adds	r7, #12
 801c7d0:	46bd      	mov	sp, r7
 801c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7d6:	4770      	bx	lr

0801c7d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c7d8:	b480      	push	{r7}
 801c7da:	b083      	sub	sp, #12
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801c7e0:	bf00      	nop
 801c7e2:	370c      	adds	r7, #12
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7ea:	4770      	bx	lr

0801c7ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c7ec:	b480      	push	{r7}
 801c7ee:	b083      	sub	sp, #12
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801c7f4:	bf00      	nop
 801c7f6:	370c      	adds	r7, #12
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7fe:	4770      	bx	lr

0801c800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801c800:	b480      	push	{r7}
 801c802:	b083      	sub	sp, #12
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
 801c808:	460b      	mov	r3, r1
 801c80a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801c80c:	bf00      	nop
 801c80e:	370c      	adds	r7, #12
 801c810:	46bd      	mov	sp, r7
 801c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c816:	4770      	bx	lr

0801c818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c81c:	b08c      	sub	sp, #48	; 0x30
 801c81e:	af00      	add	r7, sp, #0
 801c820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801c822:	2300      	movs	r3, #0
 801c824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801c828:	697b      	ldr	r3, [r7, #20]
 801c82a:	689a      	ldr	r2, [r3, #8]
 801c82c:	697b      	ldr	r3, [r7, #20]
 801c82e:	691b      	ldr	r3, [r3, #16]
 801c830:	431a      	orrs	r2, r3
 801c832:	697b      	ldr	r3, [r7, #20]
 801c834:	695b      	ldr	r3, [r3, #20]
 801c836:	431a      	orrs	r2, r3
 801c838:	697b      	ldr	r3, [r7, #20]
 801c83a:	69db      	ldr	r3, [r3, #28]
 801c83c:	4313      	orrs	r3, r2
 801c83e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801c840:	697b      	ldr	r3, [r7, #20]
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	681a      	ldr	r2, [r3, #0]
 801c846:	4baf      	ldr	r3, [pc, #700]	; (801cb04 <UART_SetConfig+0x2ec>)
 801c848:	4013      	ands	r3, r2
 801c84a:	697a      	ldr	r2, [r7, #20]
 801c84c:	6812      	ldr	r2, [r2, #0]
 801c84e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c850:	430b      	orrs	r3, r1
 801c852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c854:	697b      	ldr	r3, [r7, #20]
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	685b      	ldr	r3, [r3, #4]
 801c85a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801c85e:	697b      	ldr	r3, [r7, #20]
 801c860:	68da      	ldr	r2, [r3, #12]
 801c862:	697b      	ldr	r3, [r7, #20]
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	430a      	orrs	r2, r1
 801c868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801c86a:	697b      	ldr	r3, [r7, #20]
 801c86c:	699b      	ldr	r3, [r3, #24]
 801c86e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801c870:	697b      	ldr	r3, [r7, #20]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	4aa4      	ldr	r2, [pc, #656]	; (801cb08 <UART_SetConfig+0x2f0>)
 801c876:	4293      	cmp	r3, r2
 801c878:	d004      	beq.n	801c884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801c87a:	697b      	ldr	r3, [r7, #20]
 801c87c:	6a1b      	ldr	r3, [r3, #32]
 801c87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c880:	4313      	orrs	r3, r2
 801c882:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801c884:	697b      	ldr	r3, [r7, #20]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	689b      	ldr	r3, [r3, #8]
 801c88a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801c88e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801c892:	697a      	ldr	r2, [r7, #20]
 801c894:	6812      	ldr	r2, [r2, #0]
 801c896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c898:	430b      	orrs	r3, r1
 801c89a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8a2:	f023 010f 	bic.w	r1, r3, #15
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c8aa:	697b      	ldr	r3, [r7, #20]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	430a      	orrs	r2, r1
 801c8b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c8b2:	697b      	ldr	r3, [r7, #20]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	4a95      	ldr	r2, [pc, #596]	; (801cb0c <UART_SetConfig+0x2f4>)
 801c8b8:	4293      	cmp	r3, r2
 801c8ba:	d125      	bne.n	801c908 <UART_SetConfig+0xf0>
 801c8bc:	2003      	movs	r0, #3
 801c8be:	f7ff fb13 	bl	801bee8 <LL_RCC_GetUSARTClockSource>
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	2b03      	cmp	r3, #3
 801c8c6:	d81b      	bhi.n	801c900 <UART_SetConfig+0xe8>
 801c8c8:	a201      	add	r2, pc, #4	; (adr r2, 801c8d0 <UART_SetConfig+0xb8>)
 801c8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8ce:	bf00      	nop
 801c8d0:	0801c8e1 	.word	0x0801c8e1
 801c8d4:	0801c8f1 	.word	0x0801c8f1
 801c8d8:	0801c8e9 	.word	0x0801c8e9
 801c8dc:	0801c8f9 	.word	0x0801c8f9
 801c8e0:	2301      	movs	r3, #1
 801c8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c8e6:	e042      	b.n	801c96e <UART_SetConfig+0x156>
 801c8e8:	2302      	movs	r3, #2
 801c8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c8ee:	e03e      	b.n	801c96e <UART_SetConfig+0x156>
 801c8f0:	2304      	movs	r3, #4
 801c8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c8f6:	e03a      	b.n	801c96e <UART_SetConfig+0x156>
 801c8f8:	2308      	movs	r3, #8
 801c8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c8fe:	e036      	b.n	801c96e <UART_SetConfig+0x156>
 801c900:	2310      	movs	r3, #16
 801c902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c906:	e032      	b.n	801c96e <UART_SetConfig+0x156>
 801c908:	697b      	ldr	r3, [r7, #20]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	4a7e      	ldr	r2, [pc, #504]	; (801cb08 <UART_SetConfig+0x2f0>)
 801c90e:	4293      	cmp	r3, r2
 801c910:	d12a      	bne.n	801c968 <UART_SetConfig+0x150>
 801c912:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801c916:	f7ff faf7 	bl	801bf08 <LL_RCC_GetLPUARTClockSource>
 801c91a:	4603      	mov	r3, r0
 801c91c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c920:	d01a      	beq.n	801c958 <UART_SetConfig+0x140>
 801c922:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c926:	d81b      	bhi.n	801c960 <UART_SetConfig+0x148>
 801c928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c92c:	d00c      	beq.n	801c948 <UART_SetConfig+0x130>
 801c92e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c932:	d815      	bhi.n	801c960 <UART_SetConfig+0x148>
 801c934:	2b00      	cmp	r3, #0
 801c936:	d003      	beq.n	801c940 <UART_SetConfig+0x128>
 801c938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c93c:	d008      	beq.n	801c950 <UART_SetConfig+0x138>
 801c93e:	e00f      	b.n	801c960 <UART_SetConfig+0x148>
 801c940:	2300      	movs	r3, #0
 801c942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c946:	e012      	b.n	801c96e <UART_SetConfig+0x156>
 801c948:	2302      	movs	r3, #2
 801c94a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c94e:	e00e      	b.n	801c96e <UART_SetConfig+0x156>
 801c950:	2304      	movs	r3, #4
 801c952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c956:	e00a      	b.n	801c96e <UART_SetConfig+0x156>
 801c958:	2308      	movs	r3, #8
 801c95a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c95e:	e006      	b.n	801c96e <UART_SetConfig+0x156>
 801c960:	2310      	movs	r3, #16
 801c962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c966:	e002      	b.n	801c96e <UART_SetConfig+0x156>
 801c968:	2310      	movs	r3, #16
 801c96a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801c96e:	697b      	ldr	r3, [r7, #20]
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	4a65      	ldr	r2, [pc, #404]	; (801cb08 <UART_SetConfig+0x2f0>)
 801c974:	4293      	cmp	r3, r2
 801c976:	f040 8097 	bne.w	801caa8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801c97a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c97e:	2b08      	cmp	r3, #8
 801c980:	d823      	bhi.n	801c9ca <UART_SetConfig+0x1b2>
 801c982:	a201      	add	r2, pc, #4	; (adr r2, 801c988 <UART_SetConfig+0x170>)
 801c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c988:	0801c9ad 	.word	0x0801c9ad
 801c98c:	0801c9cb 	.word	0x0801c9cb
 801c990:	0801c9b5 	.word	0x0801c9b5
 801c994:	0801c9cb 	.word	0x0801c9cb
 801c998:	0801c9bb 	.word	0x0801c9bb
 801c99c:	0801c9cb 	.word	0x0801c9cb
 801c9a0:	0801c9cb 	.word	0x0801c9cb
 801c9a4:	0801c9cb 	.word	0x0801c9cb
 801c9a8:	0801c9c3 	.word	0x0801c9c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c9ac:	f7fe fcc8 	bl	801b340 <HAL_RCC_GetPCLK1Freq>
 801c9b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c9b2:	e010      	b.n	801c9d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c9b4:	4b56      	ldr	r3, [pc, #344]	; (801cb10 <UART_SetConfig+0x2f8>)
 801c9b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c9b8:	e00d      	b.n	801c9d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c9ba:	f7fe fc41 	bl	801b240 <HAL_RCC_GetSysClockFreq>
 801c9be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c9c0:	e009      	b.n	801c9d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c9c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c9c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c9c8:	e005      	b.n	801c9d6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801c9ca:	2300      	movs	r3, #0
 801c9cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c9d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	f000 812b 	beq.w	801cc34 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801c9de:	697b      	ldr	r3, [r7, #20]
 801c9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9e2:	4a4c      	ldr	r2, [pc, #304]	; (801cb14 <UART_SetConfig+0x2fc>)
 801c9e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c9e8:	461a      	mov	r2, r3
 801c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9ec:	fbb3 f3f2 	udiv	r3, r3, r2
 801c9f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801c9f2:	697b      	ldr	r3, [r7, #20]
 801c9f4:	685a      	ldr	r2, [r3, #4]
 801c9f6:	4613      	mov	r3, r2
 801c9f8:	005b      	lsls	r3, r3, #1
 801c9fa:	4413      	add	r3, r2
 801c9fc:	69ba      	ldr	r2, [r7, #24]
 801c9fe:	429a      	cmp	r2, r3
 801ca00:	d305      	bcc.n	801ca0e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801ca02:	697b      	ldr	r3, [r7, #20]
 801ca04:	685b      	ldr	r3, [r3, #4]
 801ca06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ca08:	69ba      	ldr	r2, [r7, #24]
 801ca0a:	429a      	cmp	r2, r3
 801ca0c:	d903      	bls.n	801ca16 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801ca0e:	2301      	movs	r3, #1
 801ca10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801ca14:	e10e      	b.n	801cc34 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca18:	2200      	movs	r2, #0
 801ca1a:	60bb      	str	r3, [r7, #8]
 801ca1c:	60fa      	str	r2, [r7, #12]
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca22:	4a3c      	ldr	r2, [pc, #240]	; (801cb14 <UART_SetConfig+0x2fc>)
 801ca24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ca28:	b29b      	uxth	r3, r3
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	603b      	str	r3, [r7, #0]
 801ca2e:	607a      	str	r2, [r7, #4]
 801ca30:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ca34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ca38:	f7e4 f8de 	bl	8000bf8 <__aeabi_uldivmod>
 801ca3c:	4602      	mov	r2, r0
 801ca3e:	460b      	mov	r3, r1
 801ca40:	4610      	mov	r0, r2
 801ca42:	4619      	mov	r1, r3
 801ca44:	f04f 0200 	mov.w	r2, #0
 801ca48:	f04f 0300 	mov.w	r3, #0
 801ca4c:	020b      	lsls	r3, r1, #8
 801ca4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ca52:	0202      	lsls	r2, r0, #8
 801ca54:	6979      	ldr	r1, [r7, #20]
 801ca56:	6849      	ldr	r1, [r1, #4]
 801ca58:	0849      	lsrs	r1, r1, #1
 801ca5a:	2000      	movs	r0, #0
 801ca5c:	460c      	mov	r4, r1
 801ca5e:	4605      	mov	r5, r0
 801ca60:	eb12 0804 	adds.w	r8, r2, r4
 801ca64:	eb43 0905 	adc.w	r9, r3, r5
 801ca68:	697b      	ldr	r3, [r7, #20]
 801ca6a:	685b      	ldr	r3, [r3, #4]
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	469a      	mov	sl, r3
 801ca70:	4693      	mov	fp, r2
 801ca72:	4652      	mov	r2, sl
 801ca74:	465b      	mov	r3, fp
 801ca76:	4640      	mov	r0, r8
 801ca78:	4649      	mov	r1, r9
 801ca7a:	f7e4 f8bd 	bl	8000bf8 <__aeabi_uldivmod>
 801ca7e:	4602      	mov	r2, r0
 801ca80:	460b      	mov	r3, r1
 801ca82:	4613      	mov	r3, r2
 801ca84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ca86:	6a3b      	ldr	r3, [r7, #32]
 801ca88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ca8c:	d308      	bcc.n	801caa0 <UART_SetConfig+0x288>
 801ca8e:	6a3b      	ldr	r3, [r7, #32]
 801ca90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ca94:	d204      	bcs.n	801caa0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801ca96:	697b      	ldr	r3, [r7, #20]
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	6a3a      	ldr	r2, [r7, #32]
 801ca9c:	60da      	str	r2, [r3, #12]
 801ca9e:	e0c9      	b.n	801cc34 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801caa0:	2301      	movs	r3, #1
 801caa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801caa6:	e0c5      	b.n	801cc34 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801caa8:	697b      	ldr	r3, [r7, #20]
 801caaa:	69db      	ldr	r3, [r3, #28]
 801caac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cab0:	d16d      	bne.n	801cb8e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801cab2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801cab6:	3b01      	subs	r3, #1
 801cab8:	2b07      	cmp	r3, #7
 801caba:	d82d      	bhi.n	801cb18 <UART_SetConfig+0x300>
 801cabc:	a201      	add	r2, pc, #4	; (adr r2, 801cac4 <UART_SetConfig+0x2ac>)
 801cabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cac2:	bf00      	nop
 801cac4:	0801cae5 	.word	0x0801cae5
 801cac8:	0801caed 	.word	0x0801caed
 801cacc:	0801cb19 	.word	0x0801cb19
 801cad0:	0801caf3 	.word	0x0801caf3
 801cad4:	0801cb19 	.word	0x0801cb19
 801cad8:	0801cb19 	.word	0x0801cb19
 801cadc:	0801cb19 	.word	0x0801cb19
 801cae0:	0801cafb 	.word	0x0801cafb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801cae4:	f7fe fc42 	bl	801b36c <HAL_RCC_GetPCLK2Freq>
 801cae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801caea:	e01b      	b.n	801cb24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801caec:	4b08      	ldr	r3, [pc, #32]	; (801cb10 <UART_SetConfig+0x2f8>)
 801caee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801caf0:	e018      	b.n	801cb24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801caf2:	f7fe fba5 	bl	801b240 <HAL_RCC_GetSysClockFreq>
 801caf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801caf8:	e014      	b.n	801cb24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cafa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cafe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801cb00:	e010      	b.n	801cb24 <UART_SetConfig+0x30c>
 801cb02:	bf00      	nop
 801cb04:	cfff69f3 	.word	0xcfff69f3
 801cb08:	40008000 	.word	0x40008000
 801cb0c:	40013800 	.word	0x40013800
 801cb10:	00f42400 	.word	0x00f42400
 801cb14:	08022ec4 	.word	0x08022ec4
      default:
        pclk = 0U;
 801cb18:	2300      	movs	r3, #0
 801cb1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801cb1c:	2301      	movs	r3, #1
 801cb1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801cb22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	f000 8084 	beq.w	801cc34 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801cb2c:	697b      	ldr	r3, [r7, #20]
 801cb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb30:	4a4b      	ldr	r2, [pc, #300]	; (801cc60 <UART_SetConfig+0x448>)
 801cb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801cb36:	461a      	mov	r2, r3
 801cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb3a:	fbb3 f3f2 	udiv	r3, r3, r2
 801cb3e:	005a      	lsls	r2, r3, #1
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	685b      	ldr	r3, [r3, #4]
 801cb44:	085b      	lsrs	r3, r3, #1
 801cb46:	441a      	add	r2, r3
 801cb48:	697b      	ldr	r3, [r7, #20]
 801cb4a:	685b      	ldr	r3, [r3, #4]
 801cb4c:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cb52:	6a3b      	ldr	r3, [r7, #32]
 801cb54:	2b0f      	cmp	r3, #15
 801cb56:	d916      	bls.n	801cb86 <UART_SetConfig+0x36e>
 801cb58:	6a3b      	ldr	r3, [r7, #32]
 801cb5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cb5e:	d212      	bcs.n	801cb86 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801cb60:	6a3b      	ldr	r3, [r7, #32]
 801cb62:	b29b      	uxth	r3, r3
 801cb64:	f023 030f 	bic.w	r3, r3, #15
 801cb68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801cb6a:	6a3b      	ldr	r3, [r7, #32]
 801cb6c:	085b      	lsrs	r3, r3, #1
 801cb6e:	b29b      	uxth	r3, r3
 801cb70:	f003 0307 	and.w	r3, r3, #7
 801cb74:	b29a      	uxth	r2, r3
 801cb76:	8bfb      	ldrh	r3, [r7, #30]
 801cb78:	4313      	orrs	r3, r2
 801cb7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801cb7c:	697b      	ldr	r3, [r7, #20]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	8bfa      	ldrh	r2, [r7, #30]
 801cb82:	60da      	str	r2, [r3, #12]
 801cb84:	e056      	b.n	801cc34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801cb86:	2301      	movs	r3, #1
 801cb88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801cb8c:	e052      	b.n	801cc34 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801cb8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801cb92:	3b01      	subs	r3, #1
 801cb94:	2b07      	cmp	r3, #7
 801cb96:	d822      	bhi.n	801cbde <UART_SetConfig+0x3c6>
 801cb98:	a201      	add	r2, pc, #4	; (adr r2, 801cba0 <UART_SetConfig+0x388>)
 801cb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb9e:	bf00      	nop
 801cba0:	0801cbc1 	.word	0x0801cbc1
 801cba4:	0801cbc9 	.word	0x0801cbc9
 801cba8:	0801cbdf 	.word	0x0801cbdf
 801cbac:	0801cbcf 	.word	0x0801cbcf
 801cbb0:	0801cbdf 	.word	0x0801cbdf
 801cbb4:	0801cbdf 	.word	0x0801cbdf
 801cbb8:	0801cbdf 	.word	0x0801cbdf
 801cbbc:	0801cbd7 	.word	0x0801cbd7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801cbc0:	f7fe fbd4 	bl	801b36c <HAL_RCC_GetPCLK2Freq>
 801cbc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cbc6:	e010      	b.n	801cbea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801cbc8:	4b26      	ldr	r3, [pc, #152]	; (801cc64 <UART_SetConfig+0x44c>)
 801cbca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801cbcc:	e00d      	b.n	801cbea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801cbce:	f7fe fb37 	bl	801b240 <HAL_RCC_GetSysClockFreq>
 801cbd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801cbd4:	e009      	b.n	801cbea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cbd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cbda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801cbdc:	e005      	b.n	801cbea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801cbde:	2300      	movs	r3, #0
 801cbe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801cbe8:	bf00      	nop
    }

    if (pclk != 0U)
 801cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d021      	beq.n	801cc34 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801cbf0:	697b      	ldr	r3, [r7, #20]
 801cbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbf4:	4a1a      	ldr	r2, [pc, #104]	; (801cc60 <UART_SetConfig+0x448>)
 801cbf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801cbfa:	461a      	mov	r2, r3
 801cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbfe:	fbb3 f2f2 	udiv	r2, r3, r2
 801cc02:	697b      	ldr	r3, [r7, #20]
 801cc04:	685b      	ldr	r3, [r3, #4]
 801cc06:	085b      	lsrs	r3, r3, #1
 801cc08:	441a      	add	r2, r3
 801cc0a:	697b      	ldr	r3, [r7, #20]
 801cc0c:	685b      	ldr	r3, [r3, #4]
 801cc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cc14:	6a3b      	ldr	r3, [r7, #32]
 801cc16:	2b0f      	cmp	r3, #15
 801cc18:	d909      	bls.n	801cc2e <UART_SetConfig+0x416>
 801cc1a:	6a3b      	ldr	r3, [r7, #32]
 801cc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc20:	d205      	bcs.n	801cc2e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801cc22:	6a3b      	ldr	r3, [r7, #32]
 801cc24:	b29a      	uxth	r2, r3
 801cc26:	697b      	ldr	r3, [r7, #20]
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	60da      	str	r2, [r3, #12]
 801cc2c:	e002      	b.n	801cc34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801cc2e:	2301      	movs	r3, #1
 801cc30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801cc34:	697b      	ldr	r3, [r7, #20]
 801cc36:	2201      	movs	r2, #1
 801cc38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801cc3c:	697b      	ldr	r3, [r7, #20]
 801cc3e:	2201      	movs	r2, #1
 801cc40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801cc44:	697b      	ldr	r3, [r7, #20]
 801cc46:	2200      	movs	r2, #0
 801cc48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801cc4a:	697b      	ldr	r3, [r7, #20]
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801cc50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801cc54:	4618      	mov	r0, r3
 801cc56:	3730      	adds	r7, #48	; 0x30
 801cc58:	46bd      	mov	sp, r7
 801cc5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cc5e:	bf00      	nop
 801cc60:	08022ec4 	.word	0x08022ec4
 801cc64:	00f42400 	.word	0x00f42400

0801cc68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801cc68:	b480      	push	{r7}
 801cc6a:	b083      	sub	sp, #12
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc74:	f003 0301 	and.w	r3, r3, #1
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d00a      	beq.n	801cc92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	685b      	ldr	r3, [r3, #4]
 801cc82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	430a      	orrs	r2, r1
 801cc90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc96:	f003 0302 	and.w	r3, r3, #2
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d00a      	beq.n	801ccb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	685b      	ldr	r3, [r3, #4]
 801cca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	430a      	orrs	r2, r1
 801ccb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccb8:	f003 0304 	and.w	r3, r3, #4
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d00a      	beq.n	801ccd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	685b      	ldr	r3, [r3, #4]
 801ccc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	430a      	orrs	r2, r1
 801ccd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccda:	f003 0308 	and.w	r3, r3, #8
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d00a      	beq.n	801ccf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	685b      	ldr	r3, [r3, #4]
 801cce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	430a      	orrs	r2, r1
 801ccf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccfc:	f003 0310 	and.w	r3, r3, #16
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d00a      	beq.n	801cd1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	689b      	ldr	r3, [r3, #8]
 801cd0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	430a      	orrs	r2, r1
 801cd18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd1e:	f003 0320 	and.w	r3, r3, #32
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d00a      	beq.n	801cd3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	689b      	ldr	r3, [r3, #8]
 801cd2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	430a      	orrs	r2, r1
 801cd3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d01a      	beq.n	801cd7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	685b      	ldr	r3, [r3, #4]
 801cd4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	430a      	orrs	r2, r1
 801cd5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cd66:	d10a      	bne.n	801cd7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	685b      	ldr	r3, [r3, #4]
 801cd6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	430a      	orrs	r2, r1
 801cd7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d00a      	beq.n	801cda0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	685b      	ldr	r3, [r3, #4]
 801cd90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	430a      	orrs	r2, r1
 801cd9e:	605a      	str	r2, [r3, #4]
  }
}
 801cda0:	bf00      	nop
 801cda2:	370c      	adds	r7, #12
 801cda4:	46bd      	mov	sp, r7
 801cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdaa:	4770      	bx	lr

0801cdac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b098      	sub	sp, #96	; 0x60
 801cdb0:	af02      	add	r7, sp, #8
 801cdb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2200      	movs	r2, #0
 801cdb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801cdbc:	f7fb f966 	bl	801808c <HAL_GetTick>
 801cdc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	681b      	ldr	r3, [r3, #0]
 801cdc8:	f003 0308 	and.w	r3, r3, #8
 801cdcc:	2b08      	cmp	r3, #8
 801cdce:	d12f      	bne.n	801ce30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801cdd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801cdd4:	9300      	str	r3, [sp, #0]
 801cdd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cdd8:	2200      	movs	r2, #0
 801cdda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801cdde:	6878      	ldr	r0, [r7, #4]
 801cde0:	f000 f88e 	bl	801cf00 <UART_WaitOnFlagUntilTimeout>
 801cde4:	4603      	mov	r3, r0
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d022      	beq.n	801ce30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdf2:	e853 3f00 	ldrex	r3, [r3]
 801cdf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801cdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cdfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801cdfe:	653b      	str	r3, [r7, #80]	; 0x50
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	461a      	mov	r2, r3
 801ce06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce08:	647b      	str	r3, [r7, #68]	; 0x44
 801ce0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ce0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ce0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ce10:	e841 2300 	strex	r3, r2, [r1]
 801ce14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801ce16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d1e6      	bne.n	801cdea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	2220      	movs	r2, #32
 801ce20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	2200      	movs	r2, #0
 801ce28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ce2c:	2303      	movs	r3, #3
 801ce2e:	e063      	b.n	801cef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	f003 0304 	and.w	r3, r3, #4
 801ce3a:	2b04      	cmp	r3, #4
 801ce3c:	d149      	bne.n	801ced2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ce3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801ce42:	9300      	str	r3, [sp, #0]
 801ce44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ce46:	2200      	movs	r2, #0
 801ce48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801ce4c:	6878      	ldr	r0, [r7, #4]
 801ce4e:	f000 f857 	bl	801cf00 <UART_WaitOnFlagUntilTimeout>
 801ce52:	4603      	mov	r3, r0
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d03c      	beq.n	801ced2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce60:	e853 3f00 	ldrex	r3, [r3]
 801ce64:	623b      	str	r3, [r7, #32]
   return(result);
 801ce66:	6a3b      	ldr	r3, [r7, #32]
 801ce68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ce6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	461a      	mov	r2, r3
 801ce74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ce76:	633b      	str	r3, [r7, #48]	; 0x30
 801ce78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ce7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ce7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce7e:	e841 2300 	strex	r3, r2, [r1]
 801ce82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d1e6      	bne.n	801ce58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	3308      	adds	r3, #8
 801ce90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ce92:	693b      	ldr	r3, [r7, #16]
 801ce94:	e853 3f00 	ldrex	r3, [r3]
 801ce98:	60fb      	str	r3, [r7, #12]
   return(result);
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	f023 0301 	bic.w	r3, r3, #1
 801cea0:	64bb      	str	r3, [r7, #72]	; 0x48
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	3308      	adds	r3, #8
 801cea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ceaa:	61fa      	str	r2, [r7, #28]
 801ceac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ceae:	69b9      	ldr	r1, [r7, #24]
 801ceb0:	69fa      	ldr	r2, [r7, #28]
 801ceb2:	e841 2300 	strex	r3, r2, [r1]
 801ceb6:	617b      	str	r3, [r7, #20]
   return(result);
 801ceb8:	697b      	ldr	r3, [r7, #20]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d1e5      	bne.n	801ce8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	2220      	movs	r2, #32
 801cec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	2200      	movs	r2, #0
 801ceca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801cece:	2303      	movs	r3, #3
 801ced0:	e012      	b.n	801cef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2220      	movs	r2, #32
 801ced6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	2220      	movs	r2, #32
 801cede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	2200      	movs	r2, #0
 801cee6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2200      	movs	r2, #0
 801ceec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	2200      	movs	r2, #0
 801cef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801cef6:	2300      	movs	r3, #0
}
 801cef8:	4618      	mov	r0, r3
 801cefa:	3758      	adds	r7, #88	; 0x58
 801cefc:	46bd      	mov	sp, r7
 801cefe:	bd80      	pop	{r7, pc}

0801cf00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801cf00:	b580      	push	{r7, lr}
 801cf02:	b084      	sub	sp, #16
 801cf04:	af00      	add	r7, sp, #0
 801cf06:	60f8      	str	r0, [r7, #12]
 801cf08:	60b9      	str	r1, [r7, #8]
 801cf0a:	603b      	str	r3, [r7, #0]
 801cf0c:	4613      	mov	r3, r2
 801cf0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801cf10:	e049      	b.n	801cfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801cf12:	69bb      	ldr	r3, [r7, #24]
 801cf14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf18:	d045      	beq.n	801cfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801cf1a:	f7fb f8b7 	bl	801808c <HAL_GetTick>
 801cf1e:	4602      	mov	r2, r0
 801cf20:	683b      	ldr	r3, [r7, #0]
 801cf22:	1ad3      	subs	r3, r2, r3
 801cf24:	69ba      	ldr	r2, [r7, #24]
 801cf26:	429a      	cmp	r2, r3
 801cf28:	d302      	bcc.n	801cf30 <UART_WaitOnFlagUntilTimeout+0x30>
 801cf2a:	69bb      	ldr	r3, [r7, #24]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d101      	bne.n	801cf34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801cf30:	2303      	movs	r3, #3
 801cf32:	e048      	b.n	801cfc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	f003 0304 	and.w	r3, r3, #4
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d031      	beq.n	801cfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	69db      	ldr	r3, [r3, #28]
 801cf48:	f003 0308 	and.w	r3, r3, #8
 801cf4c:	2b08      	cmp	r3, #8
 801cf4e:	d110      	bne.n	801cf72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	2208      	movs	r2, #8
 801cf56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801cf58:	68f8      	ldr	r0, [r7, #12]
 801cf5a:	f000 f920 	bl	801d19e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	2208      	movs	r2, #8
 801cf62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	2200      	movs	r2, #0
 801cf6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801cf6e:	2301      	movs	r3, #1
 801cf70:	e029      	b.n	801cfc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	69db      	ldr	r3, [r3, #28]
 801cf78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cf7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cf80:	d111      	bne.n	801cfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801cf8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801cf8c:	68f8      	ldr	r0, [r7, #12]
 801cf8e:	f000 f906 	bl	801d19e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801cf92:	68fb      	ldr	r3, [r7, #12]
 801cf94:	2220      	movs	r2, #32
 801cf96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	2200      	movs	r2, #0
 801cf9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801cfa2:	2303      	movs	r3, #3
 801cfa4:	e00f      	b.n	801cfc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801cfa6:	68fb      	ldr	r3, [r7, #12]
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	69da      	ldr	r2, [r3, #28]
 801cfac:	68bb      	ldr	r3, [r7, #8]
 801cfae:	4013      	ands	r3, r2
 801cfb0:	68ba      	ldr	r2, [r7, #8]
 801cfb2:	429a      	cmp	r2, r3
 801cfb4:	bf0c      	ite	eq
 801cfb6:	2301      	moveq	r3, #1
 801cfb8:	2300      	movne	r3, #0
 801cfba:	b2db      	uxtb	r3, r3
 801cfbc:	461a      	mov	r2, r3
 801cfbe:	79fb      	ldrb	r3, [r7, #7]
 801cfc0:	429a      	cmp	r2, r3
 801cfc2:	d0a6      	beq.n	801cf12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801cfc4:	2300      	movs	r3, #0
}
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	3710      	adds	r7, #16
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
	...

0801cfd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b096      	sub	sp, #88	; 0x58
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	60f8      	str	r0, [r7, #12]
 801cfd8:	60b9      	str	r1, [r7, #8]
 801cfda:	4613      	mov	r3, r2
 801cfdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	68ba      	ldr	r2, [r7, #8]
 801cfe2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	88fa      	ldrh	r2, [r7, #6]
 801cfe8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	2200      	movs	r2, #0
 801cff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	2222      	movs	r2, #34	; 0x22
 801cff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 801cffc:	68fb      	ldr	r3, [r7, #12]
 801cffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d002:	2b00      	cmp	r3, #0
 801d004:	d02d      	beq.n	801d062 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d00c:	4a40      	ldr	r2, [pc, #256]	; (801d110 <UART_Start_Receive_DMA+0x140>)
 801d00e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d016:	4a3f      	ldr	r2, [pc, #252]	; (801d114 <UART_Start_Receive_DMA+0x144>)
 801d018:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d020:	4a3d      	ldr	r2, [pc, #244]	; (801d118 <UART_Start_Receive_DMA+0x148>)
 801d022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d02a:	2200      	movs	r2, #0
 801d02c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801d02e:	68fb      	ldr	r3, [r7, #12]
 801d030:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	3324      	adds	r3, #36	; 0x24
 801d03a:	4619      	mov	r1, r3
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d040:	461a      	mov	r2, r3
 801d042:	88fb      	ldrh	r3, [r7, #6]
 801d044:	f7fb fa16 	bl	8018474 <HAL_DMA_Start_IT>
 801d048:	4603      	mov	r3, r0
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d009      	beq.n	801d062 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	2210      	movs	r2, #16
 801d052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	2220      	movs	r2, #32
 801d05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 801d05e:	2301      	movs	r3, #1
 801d060:	e051      	b.n	801d106 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	691b      	ldr	r3, [r3, #16]
 801d066:	2b00      	cmp	r3, #0
 801d068:	d018      	beq.n	801d09c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d072:	e853 3f00 	ldrex	r3, [r3]
 801d076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d07e:	657b      	str	r3, [r7, #84]	; 0x54
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	461a      	mov	r2, r3
 801d086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d088:	64bb      	str	r3, [r7, #72]	; 0x48
 801d08a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d08c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d08e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d090:	e841 2300 	strex	r3, r2, [r1]
 801d094:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801d096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d1e6      	bne.n	801d06a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	681b      	ldr	r3, [r3, #0]
 801d0a0:	3308      	adds	r3, #8
 801d0a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0a6:	e853 3f00 	ldrex	r3, [r3]
 801d0aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ae:	f043 0301 	orr.w	r3, r3, #1
 801d0b2:	653b      	str	r3, [r7, #80]	; 0x50
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	3308      	adds	r3, #8
 801d0ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d0bc:	637a      	str	r2, [r7, #52]	; 0x34
 801d0be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d0c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d0c4:	e841 2300 	strex	r3, r2, [r1]
 801d0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d1e5      	bne.n	801d09c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	3308      	adds	r3, #8
 801d0d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0d8:	697b      	ldr	r3, [r7, #20]
 801d0da:	e853 3f00 	ldrex	r3, [r3]
 801d0de:	613b      	str	r3, [r7, #16]
   return(result);
 801d0e0:	693b      	ldr	r3, [r7, #16]
 801d0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	3308      	adds	r3, #8
 801d0ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d0f0:	623a      	str	r2, [r7, #32]
 801d0f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0f4:	69f9      	ldr	r1, [r7, #28]
 801d0f6:	6a3a      	ldr	r2, [r7, #32]
 801d0f8:	e841 2300 	strex	r3, r2, [r1]
 801d0fc:	61bb      	str	r3, [r7, #24]
   return(result);
 801d0fe:	69bb      	ldr	r3, [r7, #24]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d1e5      	bne.n	801d0d0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801d104:	2300      	movs	r3, #0
}
 801d106:	4618      	mov	r0, r3
 801d108:	3758      	adds	r7, #88	; 0x58
 801d10a:	46bd      	mov	sp, r7
 801d10c:	bd80      	pop	{r7, pc}
 801d10e:	bf00      	nop
 801d110:	0801d26b 	.word	0x0801d26b
 801d114:	0801d397 	.word	0x0801d397
 801d118:	0801d3d5 	.word	0x0801d3d5

0801d11c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801d11c:	b480      	push	{r7}
 801d11e:	b08f      	sub	sp, #60	; 0x3c
 801d120:	af00      	add	r7, sp, #0
 801d122:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d12a:	6a3b      	ldr	r3, [r7, #32]
 801d12c:	e853 3f00 	ldrex	r3, [r3]
 801d130:	61fb      	str	r3, [r7, #28]
   return(result);
 801d132:	69fb      	ldr	r3, [r7, #28]
 801d134:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801d138:	637b      	str	r3, [r7, #52]	; 0x34
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	461a      	mov	r2, r3
 801d140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d142:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d144:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d14a:	e841 2300 	strex	r3, r2, [r1]
 801d14e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d152:	2b00      	cmp	r3, #0
 801d154:	d1e6      	bne.n	801d124 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	3308      	adds	r3, #8
 801d15c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	e853 3f00 	ldrex	r3, [r3]
 801d164:	60bb      	str	r3, [r7, #8]
   return(result);
 801d166:	68bb      	ldr	r3, [r7, #8]
 801d168:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801d16c:	633b      	str	r3, [r7, #48]	; 0x30
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	3308      	adds	r3, #8
 801d174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d176:	61ba      	str	r2, [r7, #24]
 801d178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d17a:	6979      	ldr	r1, [r7, #20]
 801d17c:	69ba      	ldr	r2, [r7, #24]
 801d17e:	e841 2300 	strex	r3, r2, [r1]
 801d182:	613b      	str	r3, [r7, #16]
   return(result);
 801d184:	693b      	ldr	r3, [r7, #16]
 801d186:	2b00      	cmp	r3, #0
 801d188:	d1e5      	bne.n	801d156 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	2220      	movs	r2, #32
 801d18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801d192:	bf00      	nop
 801d194:	373c      	adds	r7, #60	; 0x3c
 801d196:	46bd      	mov	sp, r7
 801d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d19c:	4770      	bx	lr

0801d19e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d19e:	b480      	push	{r7}
 801d1a0:	b095      	sub	sp, #84	; 0x54
 801d1a2:	af00      	add	r7, sp, #0
 801d1a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1ae:	e853 3f00 	ldrex	r3, [r3]
 801d1b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801d1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	461a      	mov	r2, r3
 801d1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d1c4:	643b      	str	r3, [r7, #64]	; 0x40
 801d1c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d1c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d1ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d1cc:	e841 2300 	strex	r3, r2, [r1]
 801d1d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d1e6      	bne.n	801d1a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	3308      	adds	r3, #8
 801d1de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d1e0:	6a3b      	ldr	r3, [r7, #32]
 801d1e2:	e853 3f00 	ldrex	r3, [r3]
 801d1e6:	61fb      	str	r3, [r7, #28]
   return(result);
 801d1e8:	69fb      	ldr	r3, [r7, #28]
 801d1ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d1ee:	f023 0301 	bic.w	r3, r3, #1
 801d1f2:	64bb      	str	r3, [r7, #72]	; 0x48
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	3308      	adds	r3, #8
 801d1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d1fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d1fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d204:	e841 2300 	strex	r3, r2, [r1]
 801d208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d1e3      	bne.n	801d1d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d214:	2b01      	cmp	r3, #1
 801d216:	d118      	bne.n	801d24a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	e853 3f00 	ldrex	r3, [r3]
 801d224:	60bb      	str	r3, [r7, #8]
   return(result);
 801d226:	68bb      	ldr	r3, [r7, #8]
 801d228:	f023 0310 	bic.w	r3, r3, #16
 801d22c:	647b      	str	r3, [r7, #68]	; 0x44
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	461a      	mov	r2, r3
 801d234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d236:	61bb      	str	r3, [r7, #24]
 801d238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d23a:	6979      	ldr	r1, [r7, #20]
 801d23c:	69ba      	ldr	r2, [r7, #24]
 801d23e:	e841 2300 	strex	r3, r2, [r1]
 801d242:	613b      	str	r3, [r7, #16]
   return(result);
 801d244:	693b      	ldr	r3, [r7, #16]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d1e6      	bne.n	801d218 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	2220      	movs	r2, #32
 801d24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	2200      	movs	r2, #0
 801d256:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	2200      	movs	r2, #0
 801d25c:	675a      	str	r2, [r3, #116]	; 0x74
}
 801d25e:	bf00      	nop
 801d260:	3754      	adds	r7, #84	; 0x54
 801d262:	46bd      	mov	sp, r7
 801d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d268:	4770      	bx	lr

0801d26a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801d26a:	b580      	push	{r7, lr}
 801d26c:	b09c      	sub	sp, #112	; 0x70
 801d26e:	af00      	add	r7, sp, #0
 801d270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d276:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	f003 0320 	and.w	r3, r3, #32
 801d282:	2b00      	cmp	r3, #0
 801d284:	d171      	bne.n	801d36a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801d286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d288:	2200      	movs	r2, #0
 801d28a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d296:	e853 3f00 	ldrex	r3, [r3]
 801d29a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801d29c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d29e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d2a2:	66bb      	str	r3, [r7, #104]	; 0x68
 801d2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	461a      	mov	r2, r3
 801d2aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2ac:	65bb      	str	r3, [r7, #88]	; 0x58
 801d2ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d2b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d2b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d2b4:	e841 2300 	strex	r3, r2, [r1]
 801d2b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801d2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d1e6      	bne.n	801d28e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	3308      	adds	r3, #8
 801d2c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2ca:	e853 3f00 	ldrex	r3, [r3]
 801d2ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801d2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2d2:	f023 0301 	bic.w	r3, r3, #1
 801d2d6:	667b      	str	r3, [r7, #100]	; 0x64
 801d2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	3308      	adds	r3, #8
 801d2de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d2e0:	647a      	str	r2, [r7, #68]	; 0x44
 801d2e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d2e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d2e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d2e8:	e841 2300 	strex	r3, r2, [r1]
 801d2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801d2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d1e5      	bne.n	801d2c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	3308      	adds	r3, #8
 801d2fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2fe:	e853 3f00 	ldrex	r3, [r3]
 801d302:	623b      	str	r3, [r7, #32]
   return(result);
 801d304:	6a3b      	ldr	r3, [r7, #32]
 801d306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d30a:	663b      	str	r3, [r7, #96]	; 0x60
 801d30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	3308      	adds	r3, #8
 801d312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d314:	633a      	str	r2, [r7, #48]	; 0x30
 801d316:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d31c:	e841 2300 	strex	r3, r2, [r1]
 801d320:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d324:	2b00      	cmp	r3, #0
 801d326:	d1e5      	bne.n	801d2f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801d328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d32a:	2220      	movs	r2, #32
 801d32c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d334:	2b01      	cmp	r3, #1
 801d336:	d118      	bne.n	801d36a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d33e:	693b      	ldr	r3, [r7, #16]
 801d340:	e853 3f00 	ldrex	r3, [r3]
 801d344:	60fb      	str	r3, [r7, #12]
   return(result);
 801d346:	68fb      	ldr	r3, [r7, #12]
 801d348:	f023 0310 	bic.w	r3, r3, #16
 801d34c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	461a      	mov	r2, r3
 801d354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d356:	61fb      	str	r3, [r7, #28]
 801d358:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d35a:	69b9      	ldr	r1, [r7, #24]
 801d35c:	69fa      	ldr	r2, [r7, #28]
 801d35e:	e841 2300 	strex	r3, r2, [r1]
 801d362:	617b      	str	r3, [r7, #20]
   return(result);
 801d364:	697b      	ldr	r3, [r7, #20]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d1e6      	bne.n	801d338 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d36c:	2200      	movs	r2, #0
 801d36e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d374:	2b01      	cmp	r3, #1
 801d376:	d107      	bne.n	801d388 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d37a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d37e:	4619      	mov	r1, r3
 801d380:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d382:	f7ff fa3d 	bl	801c800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d386:	e002      	b.n	801d38e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801d388:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d38a:	f7e4 f869 	bl	8001460 <HAL_UART_RxCpltCallback>
}
 801d38e:	bf00      	nop
 801d390:	3770      	adds	r7, #112	; 0x70
 801d392:	46bd      	mov	sp, r7
 801d394:	bd80      	pop	{r7, pc}

0801d396 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d396:	b580      	push	{r7, lr}
 801d398:	b084      	sub	sp, #16
 801d39a:	af00      	add	r7, sp, #0
 801d39c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801d3a4:	68fb      	ldr	r3, [r7, #12]
 801d3a6:	2201      	movs	r2, #1
 801d3a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d3ae:	2b01      	cmp	r3, #1
 801d3b0:	d109      	bne.n	801d3c6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d3b8:	085b      	lsrs	r3, r3, #1
 801d3ba:	b29b      	uxth	r3, r3
 801d3bc:	4619      	mov	r1, r3
 801d3be:	68f8      	ldr	r0, [r7, #12]
 801d3c0:	f7ff fa1e 	bl	801c800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d3c4:	e002      	b.n	801d3cc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801d3c6:	68f8      	ldr	r0, [r7, #12]
 801d3c8:	f7ff fa06 	bl	801c7d8 <HAL_UART_RxHalfCpltCallback>
}
 801d3cc:	bf00      	nop
 801d3ce:	3710      	adds	r7, #16
 801d3d0:	46bd      	mov	sp, r7
 801d3d2:	bd80      	pop	{r7, pc}

0801d3d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801d3d4:	b580      	push	{r7, lr}
 801d3d6:	b086      	sub	sp, #24
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801d3e2:	697b      	ldr	r3, [r7, #20]
 801d3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d3e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801d3ea:	697b      	ldr	r3, [r7, #20]
 801d3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d3f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801d3f2:	697b      	ldr	r3, [r7, #20]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	689b      	ldr	r3, [r3, #8]
 801d3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d3fc:	2b80      	cmp	r3, #128	; 0x80
 801d3fe:	d109      	bne.n	801d414 <UART_DMAError+0x40>
 801d400:	693b      	ldr	r3, [r7, #16]
 801d402:	2b21      	cmp	r3, #33	; 0x21
 801d404:	d106      	bne.n	801d414 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801d406:	697b      	ldr	r3, [r7, #20]
 801d408:	2200      	movs	r2, #0
 801d40a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801d40e:	6978      	ldr	r0, [r7, #20]
 801d410:	f7ff fe84 	bl	801d11c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801d414:	697b      	ldr	r3, [r7, #20]
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	689b      	ldr	r3, [r3, #8]
 801d41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d41e:	2b40      	cmp	r3, #64	; 0x40
 801d420:	d109      	bne.n	801d436 <UART_DMAError+0x62>
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	2b22      	cmp	r3, #34	; 0x22
 801d426:	d106      	bne.n	801d436 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801d428:	697b      	ldr	r3, [r7, #20]
 801d42a:	2200      	movs	r2, #0
 801d42c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801d430:	6978      	ldr	r0, [r7, #20]
 801d432:	f7ff feb4 	bl	801d19e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801d436:	697b      	ldr	r3, [r7, #20]
 801d438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d43c:	f043 0210 	orr.w	r2, r3, #16
 801d440:	697b      	ldr	r3, [r7, #20]
 801d442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d446:	6978      	ldr	r0, [r7, #20]
 801d448:	f7ff f9d0 	bl	801c7ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d44c:	bf00      	nop
 801d44e:	3718      	adds	r7, #24
 801d450:	46bd      	mov	sp, r7
 801d452:	bd80      	pop	{r7, pc}

0801d454 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801d454:	b580      	push	{r7, lr}
 801d456:	b084      	sub	sp, #16
 801d458:	af00      	add	r7, sp, #0
 801d45a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	2200      	movs	r2, #0
 801d466:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	2200      	movs	r2, #0
 801d46e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d472:	68f8      	ldr	r0, [r7, #12]
 801d474:	f7ff f9ba 	bl	801c7ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d478:	bf00      	nop
 801d47a:	3710      	adds	r7, #16
 801d47c:	46bd      	mov	sp, r7
 801d47e:	bd80      	pop	{r7, pc}

0801d480 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b088      	sub	sp, #32
 801d484:	af00      	add	r7, sp, #0
 801d486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	e853 3f00 	ldrex	r3, [r3]
 801d494:	60bb      	str	r3, [r7, #8]
   return(result);
 801d496:	68bb      	ldr	r3, [r7, #8]
 801d498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d49c:	61fb      	str	r3, [r7, #28]
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	461a      	mov	r2, r3
 801d4a4:	69fb      	ldr	r3, [r7, #28]
 801d4a6:	61bb      	str	r3, [r7, #24]
 801d4a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d4aa:	6979      	ldr	r1, [r7, #20]
 801d4ac:	69ba      	ldr	r2, [r7, #24]
 801d4ae:	e841 2300 	strex	r3, r2, [r1]
 801d4b2:	613b      	str	r3, [r7, #16]
   return(result);
 801d4b4:	693b      	ldr	r3, [r7, #16]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d1e6      	bne.n	801d488 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	2220      	movs	r2, #32
 801d4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801d4c8:	6878      	ldr	r0, [r7, #4]
 801d4ca:	f7ff f97b 	bl	801c7c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d4ce:	bf00      	nop
 801d4d0:	3720      	adds	r7, #32
 801d4d2:	46bd      	mov	sp, r7
 801d4d4:	bd80      	pop	{r7, pc}

0801d4d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801d4d6:	b480      	push	{r7}
 801d4d8:	b083      	sub	sp, #12
 801d4da:	af00      	add	r7, sp, #0
 801d4dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801d4de:	bf00      	nop
 801d4e0:	370c      	adds	r7, #12
 801d4e2:	46bd      	mov	sp, r7
 801d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4e8:	4770      	bx	lr

0801d4ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801d4ea:	b480      	push	{r7}
 801d4ec:	b083      	sub	sp, #12
 801d4ee:	af00      	add	r7, sp, #0
 801d4f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801d4f2:	bf00      	nop
 801d4f4:	370c      	adds	r7, #12
 801d4f6:	46bd      	mov	sp, r7
 801d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4fc:	4770      	bx	lr

0801d4fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801d4fe:	b480      	push	{r7}
 801d500:	b083      	sub	sp, #12
 801d502:	af00      	add	r7, sp, #0
 801d504:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801d506:	bf00      	nop
 801d508:	370c      	adds	r7, #12
 801d50a:	46bd      	mov	sp, r7
 801d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d510:	4770      	bx	lr

0801d512 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801d512:	b480      	push	{r7}
 801d514:	b085      	sub	sp, #20
 801d516:	af00      	add	r7, sp, #0
 801d518:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d520:	2b01      	cmp	r3, #1
 801d522:	d101      	bne.n	801d528 <HAL_UARTEx_DisableFifoMode+0x16>
 801d524:	2302      	movs	r3, #2
 801d526:	e027      	b.n	801d578 <HAL_UARTEx_DisableFifoMode+0x66>
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	2201      	movs	r2, #1
 801d52c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	2224      	movs	r2, #36	; 0x24
 801d534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	681a      	ldr	r2, [r3, #0]
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	f022 0201 	bic.w	r2, r2, #1
 801d54e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801d556:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	2200      	movs	r2, #0
 801d55c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	68fa      	ldr	r2, [r7, #12]
 801d564:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	2220      	movs	r2, #32
 801d56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	2200      	movs	r2, #0
 801d572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d576:	2300      	movs	r3, #0
}
 801d578:	4618      	mov	r0, r3
 801d57a:	3714      	adds	r7, #20
 801d57c:	46bd      	mov	sp, r7
 801d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d582:	4770      	bx	lr

0801d584 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d584:	b580      	push	{r7, lr}
 801d586:	b084      	sub	sp, #16
 801d588:	af00      	add	r7, sp, #0
 801d58a:	6078      	str	r0, [r7, #4]
 801d58c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d594:	2b01      	cmp	r3, #1
 801d596:	d101      	bne.n	801d59c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801d598:	2302      	movs	r3, #2
 801d59a:	e02d      	b.n	801d5f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	2201      	movs	r2, #1
 801d5a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	2224      	movs	r2, #36	; 0x24
 801d5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	681b      	ldr	r3, [r3, #0]
 801d5b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	681a      	ldr	r2, [r3, #0]
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	f022 0201 	bic.w	r2, r2, #1
 801d5c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	689b      	ldr	r3, [r3, #8]
 801d5ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	683a      	ldr	r2, [r7, #0]
 801d5d4:	430a      	orrs	r2, r1
 801d5d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d5d8:	6878      	ldr	r0, [r7, #4]
 801d5da:	f000 f84f 	bl	801d67c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	68fa      	ldr	r2, [r7, #12]
 801d5e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	2220      	movs	r2, #32
 801d5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d5f6:	2300      	movs	r3, #0
}
 801d5f8:	4618      	mov	r0, r3
 801d5fa:	3710      	adds	r7, #16
 801d5fc:	46bd      	mov	sp, r7
 801d5fe:	bd80      	pop	{r7, pc}

0801d600 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d600:	b580      	push	{r7, lr}
 801d602:	b084      	sub	sp, #16
 801d604:	af00      	add	r7, sp, #0
 801d606:	6078      	str	r0, [r7, #4]
 801d608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d610:	2b01      	cmp	r3, #1
 801d612:	d101      	bne.n	801d618 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801d614:	2302      	movs	r3, #2
 801d616:	e02d      	b.n	801d674 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	2201      	movs	r2, #1
 801d61c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	2224      	movs	r2, #36	; 0x24
 801d624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	681a      	ldr	r2, [r3, #0]
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	f022 0201 	bic.w	r2, r2, #1
 801d63e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	689b      	ldr	r3, [r3, #8]
 801d646:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	683a      	ldr	r2, [r7, #0]
 801d650:	430a      	orrs	r2, r1
 801d652:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d654:	6878      	ldr	r0, [r7, #4]
 801d656:	f000 f811 	bl	801d67c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	68fa      	ldr	r2, [r7, #12]
 801d660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	2220      	movs	r2, #32
 801d666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	2200      	movs	r2, #0
 801d66e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d672:	2300      	movs	r3, #0
}
 801d674:	4618      	mov	r0, r3
 801d676:	3710      	adds	r7, #16
 801d678:	46bd      	mov	sp, r7
 801d67a:	bd80      	pop	{r7, pc}

0801d67c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801d67c:	b480      	push	{r7}
 801d67e:	b085      	sub	sp, #20
 801d680:	af00      	add	r7, sp, #0
 801d682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d108      	bne.n	801d69e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	2201      	movs	r2, #1
 801d690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	2201      	movs	r2, #1
 801d698:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801d69c:	e031      	b.n	801d702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801d69e:	2308      	movs	r3, #8
 801d6a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801d6a2:	2308      	movs	r3, #8
 801d6a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	681b      	ldr	r3, [r3, #0]
 801d6aa:	689b      	ldr	r3, [r3, #8]
 801d6ac:	0e5b      	lsrs	r3, r3, #25
 801d6ae:	b2db      	uxtb	r3, r3
 801d6b0:	f003 0307 	and.w	r3, r3, #7
 801d6b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	689b      	ldr	r3, [r3, #8]
 801d6bc:	0f5b      	lsrs	r3, r3, #29
 801d6be:	b2db      	uxtb	r3, r3
 801d6c0:	f003 0307 	and.w	r3, r3, #7
 801d6c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d6c6:	7bbb      	ldrb	r3, [r7, #14]
 801d6c8:	7b3a      	ldrb	r2, [r7, #12]
 801d6ca:	4911      	ldr	r1, [pc, #68]	; (801d710 <UARTEx_SetNbDataToProcess+0x94>)
 801d6cc:	5c8a      	ldrb	r2, [r1, r2]
 801d6ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801d6d2:	7b3a      	ldrb	r2, [r7, #12]
 801d6d4:	490f      	ldr	r1, [pc, #60]	; (801d714 <UARTEx_SetNbDataToProcess+0x98>)
 801d6d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 801d6dc:	b29a      	uxth	r2, r3
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d6e4:	7bfb      	ldrb	r3, [r7, #15]
 801d6e6:	7b7a      	ldrb	r2, [r7, #13]
 801d6e8:	4909      	ldr	r1, [pc, #36]	; (801d710 <UARTEx_SetNbDataToProcess+0x94>)
 801d6ea:	5c8a      	ldrb	r2, [r1, r2]
 801d6ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801d6f0:	7b7a      	ldrb	r2, [r7, #13]
 801d6f2:	4908      	ldr	r1, [pc, #32]	; (801d714 <UARTEx_SetNbDataToProcess+0x98>)
 801d6f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d6f6:	fb93 f3f2 	sdiv	r3, r3, r2
 801d6fa:	b29a      	uxth	r2, r3
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801d702:	bf00      	nop
 801d704:	3714      	adds	r7, #20
 801d706:	46bd      	mov	sp, r7
 801d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d70c:	4770      	bx	lr
 801d70e:	bf00      	nop
 801d710:	08022edc 	.word	0x08022edc
 801d714:	08022ee4 	.word	0x08022ee4

0801d718 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801d718:	b480      	push	{r7}
 801d71a:	b085      	sub	sp, #20
 801d71c:	af00      	add	r7, sp, #0
 801d71e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801d720:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801d724:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801d72c:	b29a      	uxth	r2, r3
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	b29b      	uxth	r3, r3
 801d732:	43db      	mvns	r3, r3
 801d734:	b29b      	uxth	r3, r3
 801d736:	4013      	ands	r3, r2
 801d738:	b29a      	uxth	r2, r3
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801d740:	2300      	movs	r3, #0
}
 801d742:	4618      	mov	r0, r3
 801d744:	3714      	adds	r7, #20
 801d746:	46bd      	mov	sp, r7
 801d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d74c:	4770      	bx	lr

0801d74e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801d74e:	b084      	sub	sp, #16
 801d750:	b480      	push	{r7}
 801d752:	b083      	sub	sp, #12
 801d754:	af00      	add	r7, sp, #0
 801d756:	6078      	str	r0, [r7, #4]
 801d758:	f107 0014 	add.w	r0, r7, #20
 801d75c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	2201      	movs	r2, #1
 801d764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	2200      	movs	r2, #0
 801d76c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	2200      	movs	r2, #0
 801d774:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	2200      	movs	r2, #0
 801d77c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801d780:	2300      	movs	r3, #0
}
 801d782:	4618      	mov	r0, r3
 801d784:	370c      	adds	r7, #12
 801d786:	46bd      	mov	sp, r7
 801d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d78c:	b004      	add	sp, #16
 801d78e:	4770      	bx	lr

0801d790 <init_done>:
}button_interface;

uint16_t button_pushed = NONE;

void init_done()
{
 801d790:	b580      	push	{r7, lr}
 801d792:	b082      	sub	sp, #8
 801d794:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 801d796:	2300      	movs	r3, #0
 801d798:	607b      	str	r3, [r7, #4]
 801d79a:	e017      	b.n	801d7cc <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 801d79c:	2120      	movs	r1, #32
 801d79e:	4816      	ldr	r0, [pc, #88]	; (801d7f8 <init_done+0x68>)
 801d7a0:	f7fb fb70 	bl	8018e84 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801d7a4:	20c8      	movs	r0, #200	; 0xc8
 801d7a6:	f7fa fc89 	bl	80180bc <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 801d7aa:	2101      	movs	r1, #1
 801d7ac:	4812      	ldr	r0, [pc, #72]	; (801d7f8 <init_done+0x68>)
 801d7ae:	f7fb fb69 	bl	8018e84 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801d7b2:	20c8      	movs	r0, #200	; 0xc8
 801d7b4:	f7fa fc82 	bl	80180bc <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d7b8:	2102      	movs	r1, #2
 801d7ba:	480f      	ldr	r0, [pc, #60]	; (801d7f8 <init_done+0x68>)
 801d7bc:	f7fb fb62 	bl	8018e84 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801d7c0:	20c8      	movs	r0, #200	; 0xc8
 801d7c2:	f7fa fc7b 	bl	80180bc <HAL_Delay>
	for(int i=0; i<3; i++)
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	3301      	adds	r3, #1
 801d7ca:	607b      	str	r3, [r7, #4]
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	2b02      	cmp	r3, #2
 801d7d0:	dde4      	ble.n	801d79c <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 801d7d2:	2200      	movs	r2, #0
 801d7d4:	2120      	movs	r1, #32
 801d7d6:	4808      	ldr	r0, [pc, #32]	; (801d7f8 <init_done+0x68>)
 801d7d8:	f7fb fb3c 	bl	8018e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 801d7dc:	2200      	movs	r2, #0
 801d7de:	2101      	movs	r1, #1
 801d7e0:	4805      	ldr	r0, [pc, #20]	; (801d7f8 <init_done+0x68>)
 801d7e2:	f7fb fb37 	bl	8018e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 801d7e6:	2200      	movs	r2, #0
 801d7e8:	2102      	movs	r1, #2
 801d7ea:	4803      	ldr	r0, [pc, #12]	; (801d7f8 <init_done+0x68>)
 801d7ec:	f7fb fb32 	bl	8018e54 <HAL_GPIO_WritePin>
}
 801d7f0:	bf00      	nop
 801d7f2:	3708      	adds	r7, #8
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	bd80      	pop	{r7, pc}
 801d7f8:	48000400 	.word	0x48000400

0801d7fc <formate_json_tof>:

	return serialized_string;
}

static char* formate_json_tof(int id, int value)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b086      	sub	sp, #24
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
 801d804:	6039      	str	r1, [r7, #0]
	JSON_Value *val = json_value_init_object();
 801d806:	f7e5 fbb9 	bl	8002f7c <json_value_init_object>
 801d80a:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 801d80c:	697b      	ldr	r3, [r7, #20]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d101      	bne.n	801d816 <formate_json_tof+0x1a>
		return NULL;
 801d812:	2300      	movs	r3, #0
 801d814:	e049      	b.n	801d8aa <formate_json_tof+0xae>

	JSON_Object *obj = json_value_get_object(val);
 801d816:	6978      	ldr	r0, [r7, #20]
 801d818:	f7e5 faf8 	bl	8002e0c <json_value_get_object>
 801d81c:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 801d81e:	693b      	ldr	r3, [r7, #16]
 801d820:	2b00      	cmp	r3, #0
 801d822:	d101      	bne.n	801d828 <formate_json_tof+0x2c>
		return NULL;
 801d824:	2300      	movs	r3, #0
 801d826:	e040      	b.n	801d8aa <formate_json_tof+0xae>

	if(id == 0){
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d10f      	bne.n	801d84e <formate_json_tof+0x52>
		if(json_object_set_number(obj, "tof_left", value) != JSONSuccess)
 801d82e:	6838      	ldr	r0, [r7, #0]
 801d830:	f7e2 fe50 	bl	80004d4 <__aeabi_i2d>
 801d834:	4602      	mov	r2, r0
 801d836:	460b      	mov	r3, r1
 801d838:	ec43 2b10 	vmov	d0, r2, r3
 801d83c:	491d      	ldr	r1, [pc, #116]	; (801d8b4 <formate_json_tof+0xb8>)
 801d83e:	6938      	ldr	r0, [r7, #16]
 801d840:	f7e5 fd5a 	bl	80032f8 <json_object_set_number>
 801d844:	4603      	mov	r3, r0
 801d846:	2b00      	cmp	r3, #0
 801d848:	d001      	beq.n	801d84e <formate_json_tof+0x52>
			return NULL;
 801d84a:	2300      	movs	r3, #0
 801d84c:	e02d      	b.n	801d8aa <formate_json_tof+0xae>
	}
	if(id == 1){
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	2b01      	cmp	r3, #1
 801d852:	d10f      	bne.n	801d874 <formate_json_tof+0x78>
		if(json_object_set_number(obj, "tof_center", value) != JSONSuccess)
 801d854:	6838      	ldr	r0, [r7, #0]
 801d856:	f7e2 fe3d 	bl	80004d4 <__aeabi_i2d>
 801d85a:	4602      	mov	r2, r0
 801d85c:	460b      	mov	r3, r1
 801d85e:	ec43 2b10 	vmov	d0, r2, r3
 801d862:	4915      	ldr	r1, [pc, #84]	; (801d8b8 <formate_json_tof+0xbc>)
 801d864:	6938      	ldr	r0, [r7, #16]
 801d866:	f7e5 fd47 	bl	80032f8 <json_object_set_number>
 801d86a:	4603      	mov	r3, r0
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d001      	beq.n	801d874 <formate_json_tof+0x78>
			return NULL;
 801d870:	2300      	movs	r3, #0
 801d872:	e01a      	b.n	801d8aa <formate_json_tof+0xae>
	}
	if(id == 2){
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	2b02      	cmp	r3, #2
 801d878:	d10f      	bne.n	801d89a <formate_json_tof+0x9e>
		if(json_object_set_number(obj, "tof_right", value) != JSONSuccess)
 801d87a:	6838      	ldr	r0, [r7, #0]
 801d87c:	f7e2 fe2a 	bl	80004d4 <__aeabi_i2d>
 801d880:	4602      	mov	r2, r0
 801d882:	460b      	mov	r3, r1
 801d884:	ec43 2b10 	vmov	d0, r2, r3
 801d888:	490c      	ldr	r1, [pc, #48]	; (801d8bc <formate_json_tof+0xc0>)
 801d88a:	6938      	ldr	r0, [r7, #16]
 801d88c:	f7e5 fd34 	bl	80032f8 <json_object_set_number>
 801d890:	4603      	mov	r3, r0
 801d892:	2b00      	cmp	r3, #0
 801d894:	d001      	beq.n	801d89a <formate_json_tof+0x9e>
			return NULL;
 801d896:	2300      	movs	r3, #0
 801d898:	e007      	b.n	801d8aa <formate_json_tof+0xae>
	}

	char* serialized_string = json_serialize_to_string(val);
 801d89a:	6978      	ldr	r0, [r7, #20]
 801d89c:	f7e5 fc30 	bl	8003100 <json_serialize_to_string>
 801d8a0:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 801d8a2:	6978      	ldr	r0, [r7, #20]
 801d8a4:	f7e5 fb3c 	bl	8002f20 <json_value_free>

	return serialized_string;
 801d8a8:	68fb      	ldr	r3, [r7, #12]
}
 801d8aa:	4618      	mov	r0, r3
 801d8ac:	3718      	adds	r7, #24
 801d8ae:	46bd      	mov	sp, r7
 801d8b0:	bd80      	pop	{r7, pc}
 801d8b2:	bf00      	nop
 801d8b4:	080222bc 	.word	0x080222bc
 801d8b8:	080222c8 	.word	0x080222c8
 801d8bc:	080222d4 	.word	0x080222d4

0801d8c0 <check_subscription>:

	return serialized_string;
}

static int check_subscription()
{
 801d8c0:	b580      	push	{r7, lr}
 801d8c2:	b088      	sub	sp, #32
 801d8c4:	af00      	add	r7, sp, #0
	if (UART_ESP32_RecvEndFlag == 1) {
 801d8c6:	4b1f      	ldr	r3, [pc, #124]	; (801d944 <check_subscription+0x84>)
 801d8c8:	781b      	ldrb	r3, [r3, #0]
 801d8ca:	b2db      	uxtb	r3, r3
 801d8cc:	2b01      	cmp	r3, #1
 801d8ce:	d134      	bne.n	801d93a <check_subscription+0x7a>
		char pattern[24];
		memset(pattern, 0, sizeof(pattern));
 801d8d0:	463b      	mov	r3, r7
 801d8d2:	2218      	movs	r2, #24
 801d8d4:	2100      	movs	r1, #0
 801d8d6:	4618      	mov	r0, r3
 801d8d8:	f001 fe08 	bl	801f4ec <memset>
		//sprintf((char*) pattern, "+MQTTSUBRECV:0,\"isen%s/led\",", CARD_NUMBER);
		sprintf((char*) pattern, "+MQTTSUBRECV:0,\"%s/", MQTT_CLIENTID);
 801d8dc:	463b      	mov	r3, r7
 801d8de:	4a1a      	ldr	r2, [pc, #104]	; (801d948 <check_subscription+0x88>)
 801d8e0:	491a      	ldr	r1, [pc, #104]	; (801d94c <check_subscription+0x8c>)
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	f002 fc08 	bl	80200f8 <siprintf>
		uint16_t data_size = 0, off = sizeof(pattern)-1; // \0 not needed
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	83fb      	strh	r3, [r7, #30]
 801d8ec:	2317      	movs	r3, #23
 801d8ee:	83bb      	strh	r3, [r7, #28]
		if (strstr((const char*) UART_ESP32_RxBUF, pattern) != NULL) {
 801d8f0:	463b      	mov	r3, r7
 801d8f2:	4619      	mov	r1, r3
 801d8f4:	4816      	ldr	r0, [pc, #88]	; (801d950 <check_subscription+0x90>)
 801d8f6:	f002 fc89 	bl	802020c <strstr>
 801d8fa:	4603      	mov	r3, r0
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d016      	beq.n	801d92e <check_subscription+0x6e>
			printf("APP: Match succeed\r\n");
 801d900:	4814      	ldr	r0, [pc, #80]	; (801d954 <check_subscription+0x94>)
 801d902:	f002 fbe1 	bl	80200c8 <puts>
			int topic_id = 0;
 801d906:	2300      	movs	r3, #0
 801d908:	61bb      	str	r3, [r7, #24]
			// nul mais ok
			if(UART_ESP32_RxBUF[off] == 'l')
 801d90a:	8bbb      	ldrh	r3, [r7, #28]
 801d90c:	4a10      	ldr	r2, [pc, #64]	; (801d950 <check_subscription+0x90>)
 801d90e:	5cd3      	ldrb	r3, [r2, r3]
 801d910:	2b6c      	cmp	r3, #108	; 0x6c
 801d912:	d105      	bne.n	801d920 <check_subscription+0x60>
			{
				topic_id = 1;
 801d914:	2301      	movs	r3, #1
 801d916:	61bb      	str	r3, [r7, #24]
				off+= 5;
 801d918:	8bbb      	ldrh	r3, [r7, #28]
 801d91a:	3305      	adds	r3, #5
 801d91c:	83bb      	strh	r3, [r7, #28]
 801d91e:	e004      	b.n	801d92a <check_subscription+0x6a>
			}
			else
			{
				topic_id = 2;
 801d920:	2302      	movs	r3, #2
 801d922:	61bb      	str	r3, [r7, #24]
				off+= 9;
 801d924:	8bbb      	ldrh	r3, [r7, #28]
 801d926:	3309      	adds	r3, #9
 801d928:	83bb      	strh	r3, [r7, #28]
			}
			return 0;
 801d92a:	2300      	movs	r3, #0
 801d92c:	e006      	b.n	801d93c <check_subscription+0x7c>
		}
		else
		{
			printf("APP: Match failed\r\n");
 801d92e:	480a      	ldr	r0, [pc, #40]	; (801d958 <check_subscription+0x98>)
 801d930:	f002 fbca 	bl	80200c8 <puts>
			return -1;
 801d934:	f04f 33ff 	mov.w	r3, #4294967295
 801d938:	e000      	b.n	801d93c <check_subscription+0x7c>
		}
	}
	else
	{
		return 1;
 801d93a:	2301      	movs	r3, #1
	}
}
 801d93c:	4618      	mov	r0, r3
 801d93e:	3720      	adds	r7, #32
 801d940:	46bd      	mov	sp, r7
 801d942:	bd80      	pop	{r7, pc}
 801d944:	2000997d 	.word	0x2000997d
 801d948:	080222e8 	.word	0x080222e8
 801d94c:	080222f0 	.word	0x080222f0
 801d950:	2000917c 	.word	0x2000917c
 801d954:	08022304 	.word	0x08022304
 801d958:	08022318 	.word	0x08022318

0801d95c <wifi_init>:

void wifi_init(){
 801d95c:	b580      	push	{r7, lr}
 801d95e:	af00      	add	r7, sp, #0
	if (esp8266_SetupIP() != _SUCCEED) {
 801d960:	f000 fae0 	bl	801df24 <esp8266_SetupIP>
 801d964:	4603      	mov	r3, r0
 801d966:	2b01      	cmp	r3, #1
 801d968:	d00a      	beq.n	801d980 <wifi_init+0x24>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 801d96a:	480f      	ldr	r0, [pc, #60]	; (801d9a8 <wifi_init+0x4c>)
 801d96c:	f002 fbac 	bl	80200c8 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d970:	2102      	movs	r1, #2
 801d972:	480e      	ldr	r0, [pc, #56]	; (801d9ac <wifi_init+0x50>)
 801d974:	f7fb fa86 	bl	8018e84 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 801d978:	20c8      	movs	r0, #200	; 0xc8
 801d97a:	f7fa fb9f 	bl	80180bc <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d97e:	e7f7      	b.n	801d970 <wifi_init+0x14>
	  }
  }

  if(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 801d980:	f000 fd92 	bl	801e4a8 <esp8266_SetupConnect_BrokerMQTT>
 801d984:	4603      	mov	r3, r0
 801d986:	2b01      	cmp	r3, #1
 801d988:	d00a      	beq.n	801d9a0 <wifi_init+0x44>
  {
	  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 801d98a:	4809      	ldr	r0, [pc, #36]	; (801d9b0 <wifi_init+0x54>)
 801d98c:	f002 fb9c 	bl	80200c8 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d990:	2102      	movs	r1, #2
 801d992:	4806      	ldr	r0, [pc, #24]	; (801d9ac <wifi_init+0x50>)
 801d994:	f7fb fa76 	bl	8018e84 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 801d998:	20c8      	movs	r0, #200	; 0xc8
 801d99a:	f7fa fb8f 	bl	80180bc <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d99e:	e7f7      	b.n	801d990 <wifi_init+0x34>
	  }
  }
  init_done();
 801d9a0:	f7ff fef6 	bl	801d790 <init_done>
}
 801d9a4:	bf00      	nop
 801d9a6:	bd80      	pop	{r7, pc}
 801d9a8:	0802232c 	.word	0x0802232c
 801d9ac:	48000400 	.word	0x48000400
 801d9b0:	08022368 	.word	0x08022368

0801d9b4 <wifi_process>:

void wifi_process(){
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b082      	sub	sp, #8
 801d9b8:	af00      	add	r7, sp, #0
	// app part
	int i = 0;
 801d9ba:	2300      	movs	r3, #0
 801d9bc:	607b      	str	r3, [r7, #4]
	while(i<1)
 801d9be:	e027      	b.n	801da10 <wifi_process+0x5c>
	  {
		//subscribe to the necessary subscriptions
		  if(get_mqtt_state() < _SUBSCRIBED_TEMP_MQTT)
 801d9c0:	f000 ff3c 	bl	801e83c <get_mqtt_state>
 801d9c4:	4603      	mov	r3, r0
 801d9c6:	2b07      	cmp	r3, #7
 801d9c8:	d807      	bhi.n	801d9da <wifi_process+0x26>
		  {
			  if(esp8266_Subscribe_Temp_BrokerMQTT() != _SUBSCRIBED_TEMP_MQTT)
 801d9ca:	f000 fdd7 	bl	801e57c <esp8266_Subscribe_Temp_BrokerMQTT>
 801d9ce:	4603      	mov	r3, r0
 801d9d0:	2b08      	cmp	r3, #8
 801d9d2:	d002      	beq.n	801d9da <wifi_process+0x26>
				printf("APP: esp8266_Subscribe_Temp_BrokerMQTT() failed\n");
 801d9d4:	4812      	ldr	r0, [pc, #72]	; (801da20 <wifi_process+0x6c>)
 801d9d6:	f002 fb77 	bl	80200c8 <puts>
		  }
		 if(get_mqtt_state() < _SUBSCRIBED_TOF_MQTT)
 801d9da:	f000 ff2f 	bl	801e83c <get_mqtt_state>
 801d9de:	4603      	mov	r3, r0
 801d9e0:	2b08      	cmp	r3, #8
 801d9e2:	d807      	bhi.n	801d9f4 <wifi_process+0x40>
		  {
			  if(esp8266_Subscribe_ToF_BrokerMQTT() != _SUBSCRIBED_TOF_MQTT)
 801d9e4:	f000 fe1e 	bl	801e624 <esp8266_Subscribe_ToF_BrokerMQTT>
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	2b09      	cmp	r3, #9
 801d9ec:	d002      	beq.n	801d9f4 <wifi_process+0x40>
				printf("APP: esp8266_Subscribe_ToF_BrokerMQTT() failed\n");
 801d9ee:	480d      	ldr	r0, [pc, #52]	; (801da24 <wifi_process+0x70>)
 801d9f0:	f002 fb6a 	bl	80200c8 <puts>
		  }

		 Send_Tof();
 801d9f4:	f000 f81a 	bl	801da2c <Send_Tof>

		  int sub_status = check_subscription();
 801d9f8:	f7ff ff62 	bl	801d8c0 <check_subscription>
 801d9fc:	6038      	str	r0, [r7, #0]
		  if(sub_status == 0)
 801d9fe:	683b      	ldr	r3, [r7, #0]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d102      	bne.n	801da0a <wifi_process+0x56>
			  printf("APP: check_subscription() SUB MQTT RCV\n");
 801da04:	4808      	ldr	r0, [pc, #32]	; (801da28 <wifi_process+0x74>)
 801da06:	f002 fb5f 	bl	80200c8 <puts>
		  i++;
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	3301      	adds	r3, #1
 801da0e:	607b      	str	r3, [r7, #4]
	while(i<1)
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	2b00      	cmp	r3, #0
 801da14:	ddd4      	ble.n	801d9c0 <wifi_process+0xc>
	  }
}
 801da16:	bf00      	nop
 801da18:	bf00      	nop
 801da1a:	3708      	adds	r7, #8
 801da1c:	46bd      	mov	sp, r7
 801da1e:	bd80      	pop	{r7, pc}
 801da20:	080223ac 	.word	0x080223ac
 801da24:	080223dc 	.word	0x080223dc
 801da28:	0802240c 	.word	0x0802240c

0801da2c <Send_Tof>:
//send tof data when necessary
void Send_Tof()
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b086      	sub	sp, #24
 801da30:	af00      	add	r7, sp, #0
	//check sending left tof data
	 if(LeftPos == 1){
 801da32:	4b71      	ldr	r3, [pc, #452]	; (801dbf8 <Send_Tof+0x1cc>)
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	2b01      	cmp	r3, #1
 801da38:	d11d      	bne.n	801da76 <Send_Tof+0x4a>
		 char *data = formate_json_tof(0,1);
 801da3a:	2101      	movs	r1, #1
 801da3c:	2000      	movs	r0, #0
 801da3e:	f7ff fedd 	bl	801d7fc <formate_json_tof>
 801da42:	6138      	str	r0, [r7, #16]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801da44:	6938      	ldr	r0, [r7, #16]
 801da46:	f7e2 fb9b 	bl	8000180 <strlen>
 801da4a:	4603      	mov	r3, r0
 801da4c:	b29b      	uxth	r3, r3
 801da4e:	4619      	mov	r1, r3
 801da50:	6938      	ldr	r0, [r7, #16]
 801da52:	f000 fe97 	bl	801e784 <esp8266_Publish_ToF_BrokerMQTT>
 801da56:	4603      	mov	r3, r0
 801da58:	2b0c      	cmp	r3, #12
 801da5a:	d002      	beq.n	801da62 <Send_Tof+0x36>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801da5c:	4867      	ldr	r0, [pc, #412]	; (801dbfc <Send_Tof+0x1d0>)
 801da5e:	f002 fb33 	bl	80200c8 <puts>
		  json_free_serialized_string(data);
 801da62:	6938      	ldr	r0, [r7, #16]
 801da64:	f7e5 fb7e 	bl	8003164 <json_free_serialized_string>
		 LeftPos = 2;
 801da68:	4b63      	ldr	r3, [pc, #396]	; (801dbf8 <Send_Tof+0x1cc>)
 801da6a:	2202      	movs	r2, #2
 801da6c:	601a      	str	r2, [r3, #0]
		 AlreadyLeftPos = 0;
 801da6e:	4b64      	ldr	r3, [pc, #400]	; (801dc00 <Send_Tof+0x1d4>)
 801da70:	2200      	movs	r2, #0
 801da72:	601a      	str	r2, [r3, #0]
 801da74:	e028      	b.n	801dac8 <Send_Tof+0x9c>
	 } else if (LeftPos == 0 && AlreadyLeftPos == 0){
 801da76:	4b60      	ldr	r3, [pc, #384]	; (801dbf8 <Send_Tof+0x1cc>)
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d121      	bne.n	801dac2 <Send_Tof+0x96>
 801da7e:	4b60      	ldr	r3, [pc, #384]	; (801dc00 <Send_Tof+0x1d4>)
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d11d      	bne.n	801dac2 <Send_Tof+0x96>
		 char *data = formate_json_tof(0,0);
 801da86:	2100      	movs	r1, #0
 801da88:	2000      	movs	r0, #0
 801da8a:	f7ff feb7 	bl	801d7fc <formate_json_tof>
 801da8e:	6178      	str	r0, [r7, #20]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801da90:	6978      	ldr	r0, [r7, #20]
 801da92:	f7e2 fb75 	bl	8000180 <strlen>
 801da96:	4603      	mov	r3, r0
 801da98:	b29b      	uxth	r3, r3
 801da9a:	4619      	mov	r1, r3
 801da9c:	6978      	ldr	r0, [r7, #20]
 801da9e:	f000 fe71 	bl	801e784 <esp8266_Publish_ToF_BrokerMQTT>
 801daa2:	4603      	mov	r3, r0
 801daa4:	2b0c      	cmp	r3, #12
 801daa6:	d002      	beq.n	801daae <Send_Tof+0x82>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801daa8:	4854      	ldr	r0, [pc, #336]	; (801dbfc <Send_Tof+0x1d0>)
 801daaa:	f002 fb0d 	bl	80200c8 <puts>
		  json_free_serialized_string(data);
 801daae:	6978      	ldr	r0, [r7, #20]
 801dab0:	f7e5 fb58 	bl	8003164 <json_free_serialized_string>
		  LeftPos = 3 ;
 801dab4:	4b50      	ldr	r3, [pc, #320]	; (801dbf8 <Send_Tof+0x1cc>)
 801dab6:	2203      	movs	r2, #3
 801dab8:	601a      	str	r2, [r3, #0]
		  AlreadyLeftPos = 1 ;
 801daba:	4b51      	ldr	r3, [pc, #324]	; (801dc00 <Send_Tof+0x1d4>)
 801dabc:	2201      	movs	r2, #1
 801dabe:	601a      	str	r2, [r3, #0]
	 } else if (LeftPos == 0 && AlreadyLeftPos == 0){
 801dac0:	e002      	b.n	801dac8 <Send_Tof+0x9c>
	 } else {
		 printf("left postion nothing to publish\n");
 801dac2:	4850      	ldr	r0, [pc, #320]	; (801dc04 <Send_Tof+0x1d8>)
 801dac4:	f002 fb00 	bl	80200c8 <puts>
	 }

	 //check sending center tof data
	 if(CenterPos == 1){
 801dac8:	4b4f      	ldr	r3, [pc, #316]	; (801dc08 <Send_Tof+0x1dc>)
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	2b01      	cmp	r3, #1
 801dace:	d11d      	bne.n	801db0c <Send_Tof+0xe0>
		 char *data = formate_json_tof(1,1);
 801dad0:	2101      	movs	r1, #1
 801dad2:	2001      	movs	r0, #1
 801dad4:	f7ff fe92 	bl	801d7fc <formate_json_tof>
 801dad8:	60b8      	str	r0, [r7, #8]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801dada:	68b8      	ldr	r0, [r7, #8]
 801dadc:	f7e2 fb50 	bl	8000180 <strlen>
 801dae0:	4603      	mov	r3, r0
 801dae2:	b29b      	uxth	r3, r3
 801dae4:	4619      	mov	r1, r3
 801dae6:	68b8      	ldr	r0, [r7, #8]
 801dae8:	f000 fe4c 	bl	801e784 <esp8266_Publish_ToF_BrokerMQTT>
 801daec:	4603      	mov	r3, r0
 801daee:	2b0c      	cmp	r3, #12
 801daf0:	d002      	beq.n	801daf8 <Send_Tof+0xcc>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801daf2:	4842      	ldr	r0, [pc, #264]	; (801dbfc <Send_Tof+0x1d0>)
 801daf4:	f002 fae8 	bl	80200c8 <puts>
		  json_free_serialized_string(data);
 801daf8:	68b8      	ldr	r0, [r7, #8]
 801dafa:	f7e5 fb33 	bl	8003164 <json_free_serialized_string>
		 CenterPos = 2;
 801dafe:	4b42      	ldr	r3, [pc, #264]	; (801dc08 <Send_Tof+0x1dc>)
 801db00:	2202      	movs	r2, #2
 801db02:	601a      	str	r2, [r3, #0]
		 AlreadyCenterPos = 0;
 801db04:	4b41      	ldr	r3, [pc, #260]	; (801dc0c <Send_Tof+0x1e0>)
 801db06:	2200      	movs	r2, #0
 801db08:	601a      	str	r2, [r3, #0]
 801db0a:	e028      	b.n	801db5e <Send_Tof+0x132>
	 } else if (CenterPos == 0 && AlreadyCenterPos == 0){
 801db0c:	4b3e      	ldr	r3, [pc, #248]	; (801dc08 <Send_Tof+0x1dc>)
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	2b00      	cmp	r3, #0
 801db12:	d121      	bne.n	801db58 <Send_Tof+0x12c>
 801db14:	4b3d      	ldr	r3, [pc, #244]	; (801dc0c <Send_Tof+0x1e0>)
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d11d      	bne.n	801db58 <Send_Tof+0x12c>
		 char *data = formate_json_tof(1,0);
 801db1c:	2100      	movs	r1, #0
 801db1e:	2001      	movs	r0, #1
 801db20:	f7ff fe6c 	bl	801d7fc <formate_json_tof>
 801db24:	60f8      	str	r0, [r7, #12]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801db26:	68f8      	ldr	r0, [r7, #12]
 801db28:	f7e2 fb2a 	bl	8000180 <strlen>
 801db2c:	4603      	mov	r3, r0
 801db2e:	b29b      	uxth	r3, r3
 801db30:	4619      	mov	r1, r3
 801db32:	68f8      	ldr	r0, [r7, #12]
 801db34:	f000 fe26 	bl	801e784 <esp8266_Publish_ToF_BrokerMQTT>
 801db38:	4603      	mov	r3, r0
 801db3a:	2b0c      	cmp	r3, #12
 801db3c:	d002      	beq.n	801db44 <Send_Tof+0x118>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801db3e:	482f      	ldr	r0, [pc, #188]	; (801dbfc <Send_Tof+0x1d0>)
 801db40:	f002 fac2 	bl	80200c8 <puts>
		  json_free_serialized_string(data);
 801db44:	68f8      	ldr	r0, [r7, #12]
 801db46:	f7e5 fb0d 	bl	8003164 <json_free_serialized_string>
		  CenterPos = 3 ;
 801db4a:	4b2f      	ldr	r3, [pc, #188]	; (801dc08 <Send_Tof+0x1dc>)
 801db4c:	2203      	movs	r2, #3
 801db4e:	601a      	str	r2, [r3, #0]
		  AlreadyCenterPos = 1 ;
 801db50:	4b2e      	ldr	r3, [pc, #184]	; (801dc0c <Send_Tof+0x1e0>)
 801db52:	2201      	movs	r2, #1
 801db54:	601a      	str	r2, [r3, #0]
	 } else if (CenterPos == 0 && AlreadyCenterPos == 0){
 801db56:	e002      	b.n	801db5e <Send_Tof+0x132>
	 } else {
		 printf("center postion nothing to publish\n");
 801db58:	482d      	ldr	r0, [pc, #180]	; (801dc10 <Send_Tof+0x1e4>)
 801db5a:	f002 fab5 	bl	80200c8 <puts>
	 }

	 //check sending right tof data
	 if(RightPos == 1){
 801db5e:	4b2d      	ldr	r3, [pc, #180]	; (801dc14 <Send_Tof+0x1e8>)
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	2b01      	cmp	r3, #1
 801db64:	d11d      	bne.n	801dba2 <Send_Tof+0x176>
		 char *data = formate_json_tof(2,1);
 801db66:	2101      	movs	r1, #1
 801db68:	2002      	movs	r0, #2
 801db6a:	f7ff fe47 	bl	801d7fc <formate_json_tof>
 801db6e:	6038      	str	r0, [r7, #0]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801db70:	6838      	ldr	r0, [r7, #0]
 801db72:	f7e2 fb05 	bl	8000180 <strlen>
 801db76:	4603      	mov	r3, r0
 801db78:	b29b      	uxth	r3, r3
 801db7a:	4619      	mov	r1, r3
 801db7c:	6838      	ldr	r0, [r7, #0]
 801db7e:	f000 fe01 	bl	801e784 <esp8266_Publish_ToF_BrokerMQTT>
 801db82:	4603      	mov	r3, r0
 801db84:	2b0c      	cmp	r3, #12
 801db86:	d002      	beq.n	801db8e <Send_Tof+0x162>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801db88:	481c      	ldr	r0, [pc, #112]	; (801dbfc <Send_Tof+0x1d0>)
 801db8a:	f002 fa9d 	bl	80200c8 <puts>
		  json_free_serialized_string(data);
 801db8e:	6838      	ldr	r0, [r7, #0]
 801db90:	f7e5 fae8 	bl	8003164 <json_free_serialized_string>
		 RightPos = 2;
 801db94:	4b1f      	ldr	r3, [pc, #124]	; (801dc14 <Send_Tof+0x1e8>)
 801db96:	2202      	movs	r2, #2
 801db98:	601a      	str	r2, [r3, #0]
		 AlreadyRightPos = 0;
 801db9a:	4b1f      	ldr	r3, [pc, #124]	; (801dc18 <Send_Tof+0x1ec>)
 801db9c:	2200      	movs	r2, #0
 801db9e:	601a      	str	r2, [r3, #0]
		  json_free_serialized_string(data);
		  AlreadyRightPos = 1 ;
	 } else {
		 printf("right postion nothing to publish\n");
	 }
}
 801dba0:	e026      	b.n	801dbf0 <Send_Tof+0x1c4>
	 } else if (RightPos == 0 && AlreadyRightPos == 0){
 801dba2:	4b1c      	ldr	r3, [pc, #112]	; (801dc14 <Send_Tof+0x1e8>)
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d11f      	bne.n	801dbea <Send_Tof+0x1be>
 801dbaa:	4b1b      	ldr	r3, [pc, #108]	; (801dc18 <Send_Tof+0x1ec>)
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d11b      	bne.n	801dbea <Send_Tof+0x1be>
		 char *data = formate_json_tof(2,0);
 801dbb2:	2100      	movs	r1, #0
 801dbb4:	2002      	movs	r0, #2
 801dbb6:	f7ff fe21 	bl	801d7fc <formate_json_tof>
 801dbba:	6078      	str	r0, [r7, #4]
		  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801dbbc:	6878      	ldr	r0, [r7, #4]
 801dbbe:	f7e2 fadf 	bl	8000180 <strlen>
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	b29b      	uxth	r3, r3
 801dbc6:	4619      	mov	r1, r3
 801dbc8:	6878      	ldr	r0, [r7, #4]
 801dbca:	f000 fddb 	bl	801e784 <esp8266_Publish_ToF_BrokerMQTT>
 801dbce:	4603      	mov	r3, r0
 801dbd0:	2b0c      	cmp	r3, #12
 801dbd2:	d002      	beq.n	801dbda <Send_Tof+0x1ae>
			printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801dbd4:	4809      	ldr	r0, [pc, #36]	; (801dbfc <Send_Tof+0x1d0>)
 801dbd6:	f002 fa77 	bl	80200c8 <puts>
		  json_free_serialized_string(data);
 801dbda:	6878      	ldr	r0, [r7, #4]
 801dbdc:	f7e5 fac2 	bl	8003164 <json_free_serialized_string>
		  AlreadyRightPos = 1 ;
 801dbe0:	4b0d      	ldr	r3, [pc, #52]	; (801dc18 <Send_Tof+0x1ec>)
 801dbe2:	2201      	movs	r2, #1
 801dbe4:	601a      	str	r2, [r3, #0]
	 } else if (RightPos == 0 && AlreadyRightPos == 0){
 801dbe6:	bf00      	nop
}
 801dbe8:	e002      	b.n	801dbf0 <Send_Tof+0x1c4>
		 printf("right postion nothing to publish\n");
 801dbea:	480c      	ldr	r0, [pc, #48]	; (801dc1c <Send_Tof+0x1f0>)
 801dbec:	f002 fa6c 	bl	80200c8 <puts>
}
 801dbf0:	bf00      	nop
 801dbf2:	3718      	adds	r7, #24
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bd80      	pop	{r7, pc}
 801dbf8:	200002d8 	.word	0x200002d8
 801dbfc:	08022434 	.word	0x08022434
 801dc00:	200002e4 	.word	0x200002e4
 801dc04:	08022464 	.word	0x08022464
 801dc08:	200002e0 	.word	0x200002e0
 801dc0c:	200002ec 	.word	0x200002ec
 801dc10:	08022484 	.word	0x08022484
 801dc14:	200002dc 	.word	0x200002dc
 801dc18:	200002e8 	.word	0x200002e8
 801dc1c:	080224a8 	.word	0x080224a8

0801dc20 <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 801dc20:	b40f      	push	{r0, r1, r2, r3}
 801dc22:	b580      	push	{r7, lr}
 801dc24:	b082      	sub	sp, #8
 801dc26:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 801dc28:	f107 0314 	add.w	r3, r7, #20
 801dc2c:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 801dc2e:	683a      	ldr	r2, [r7, #0]
 801dc30:	6939      	ldr	r1, [r7, #16]
 801dc32:	4822      	ldr	r0, [pc, #136]	; (801dcbc <uart_esp32_transmit+0x9c>)
 801dc34:	f002 fb16 	bl	8020264 <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801dc38:	2300      	movs	r3, #0
 801dc3a:	80fb      	strh	r3, [r7, #6]
 801dc3c:	e019      	b.n	801dc72 <uart_esp32_transmit+0x52>
		j = i + 1;
 801dc3e:	88fb      	ldrh	r3, [r7, #6]
 801dc40:	3301      	adds	r3, #1
 801dc42:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 801dc44:	88fb      	ldrh	r3, [r7, #6]
 801dc46:	4a1d      	ldr	r2, [pc, #116]	; (801dcbc <uart_esp32_transmit+0x9c>)
 801dc48:	5cd3      	ldrb	r3, [r2, r3]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d10e      	bne.n	801dc6c <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801dc4e:	e009      	b.n	801dc64 <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 801dc50:	88ba      	ldrh	r2, [r7, #4]
 801dc52:	88bb      	ldrh	r3, [r7, #4]
 801dc54:	3b01      	subs	r3, #1
 801dc56:	4919      	ldr	r1, [pc, #100]	; (801dcbc <uart_esp32_transmit+0x9c>)
 801dc58:	5c89      	ldrb	r1, [r1, r2]
 801dc5a:	4a18      	ldr	r2, [pc, #96]	; (801dcbc <uart_esp32_transmit+0x9c>)
 801dc5c:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801dc5e:	88bb      	ldrh	r3, [r7, #4]
 801dc60:	3301      	adds	r3, #1
 801dc62:	80bb      	strh	r3, [r7, #4]
 801dc64:	88bb      	ldrh	r3, [r7, #4]
 801dc66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dc6a:	d3f1      	bcc.n	801dc50 <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801dc6c:	88fb      	ldrh	r3, [r7, #6]
 801dc6e:	3301      	adds	r3, #1
 801dc70:	80fb      	strh	r3, [r7, #6]
 801dc72:	88fb      	ldrh	r3, [r7, #6]
 801dc74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dc78:	d3e1      	bcc.n	801dc3e <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 801dc7a:	4810      	ldr	r0, [pc, #64]	; (801dcbc <uart_esp32_transmit+0x9c>)
 801dc7c:	f7e2 fa80 	bl	8000180 <strlen>
 801dc80:	4603      	mov	r3, r0
 801dc82:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 801dc84:	88fa      	ldrh	r2, [r7, #6]
 801dc86:	2364      	movs	r3, #100	; 0x64
 801dc88:	490c      	ldr	r1, [pc, #48]	; (801dcbc <uart_esp32_transmit+0x9c>)
 801dc8a:	480d      	ldr	r0, [pc, #52]	; (801dcc0 <uart_esp32_transmit+0xa0>)
 801dc8c:	f7fe f99c 	bl	801bfc8 <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 801dc90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dc94:	2100      	movs	r1, #0
 801dc96:	4809      	ldr	r0, [pc, #36]	; (801dcbc <uart_esp32_transmit+0x9c>)
 801dc98:	f001 fc28 	bl	801f4ec <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801dc9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dca0:	2100      	movs	r1, #0
 801dca2:	4808      	ldr	r0, [pc, #32]	; (801dcc4 <uart_esp32_transmit+0xa4>)
 801dca4:	f001 fc22 	bl	801f4ec <memset>
	UART_ESP32_RecvEndFlag = 0;
 801dca8:	4b07      	ldr	r3, [pc, #28]	; (801dcc8 <uart_esp32_transmit+0xa8>)
 801dcaa:	2200      	movs	r2, #0
 801dcac:	701a      	strb	r2, [r3, #0]
}
 801dcae:	bf00      	nop
 801dcb0:	3708      	adds	r7, #8
 801dcb2:	46bd      	mov	sp, r7
 801dcb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dcb8:	b004      	add	sp, #16
 801dcba:	4770      	bx	lr
 801dcbc:	2000897c 	.word	0x2000897c
 801dcc0:	2000039c 	.word	0x2000039c
 801dcc4:	2000917c 	.word	0x2000917c
 801dcc8:	2000997d 	.word	0x2000997d

0801dccc <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 801dccc:	b580      	push	{r7, lr}
 801dcce:	b082      	sub	sp, #8
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 801dcd4:	4910      	ldr	r1, [pc, #64]	; (801dd18 <esp8266_CheckRespond+0x4c>)
 801dcd6:	4811      	ldr	r0, [pc, #68]	; (801dd1c <esp8266_CheckRespond+0x50>)
 801dcd8:	f002 f95a 	bl	801ff90 <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 801dcdc:	6879      	ldr	r1, [r7, #4]
 801dcde:	480e      	ldr	r0, [pc, #56]	; (801dd18 <esp8266_CheckRespond+0x4c>)
 801dce0:	f002 fa94 	bl	802020c <strstr>
 801dce4:	4603      	mov	r3, r0
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d00a      	beq.n	801dd00 <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 801dcea:	480d      	ldr	r0, [pc, #52]	; (801dd20 <esp8266_CheckRespond+0x54>)
 801dcec:	f002 f9ec 	bl	80200c8 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801dcf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dcf4:	2100      	movs	r1, #0
 801dcf6:	4808      	ldr	r0, [pc, #32]	; (801dd18 <esp8266_CheckRespond+0x4c>)
 801dcf8:	f001 fbf8 	bl	801f4ec <memset>
		return _MATCHOK;
 801dcfc:	2304      	movs	r3, #4
 801dcfe:	e006      	b.n	801dd0e <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801dd00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dd04:	2100      	movs	r1, #0
 801dd06:	4804      	ldr	r0, [pc, #16]	; (801dd18 <esp8266_CheckRespond+0x4c>)
 801dd08:	f001 fbf0 	bl	801f4ec <memset>
	return _MATCHERROR;
 801dd0c:	2303      	movs	r3, #3
}
 801dd0e:	4618      	mov	r0, r3
 801dd10:	3708      	adds	r7, #8
 801dd12:	46bd      	mov	sp, r7
 801dd14:	bd80      	pop	{r7, pc}
 801dd16:	bf00      	nop
 801dd18:	2000917c 	.word	0x2000917c
 801dd1c:	080224cc 	.word	0x080224cc
 801dd20:	080224e0 	.word	0x080224e0

0801dd24 <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b086      	sub	sp, #24
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	60f8      	str	r0, [r7, #12]
 801dd2c:	60b9      	str	r1, [r7, #8]
 801dd2e:	607a      	str	r2, [r7, #4]
 801dd30:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 801dd36:	2300      	movs	r3, #0
 801dd38:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801dd3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dd3e:	2100      	movs	r1, #0
 801dd40:	4826      	ldr	r0, [pc, #152]	; (801dddc <esp8266_TransmitCmd+0xb8>)
 801dd42:	f001 fbd3 	bl	801f4ec <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 801dd46:	68f9      	ldr	r1, [r7, #12]
 801dd48:	4825      	ldr	r0, [pc, #148]	; (801dde0 <esp8266_TransmitCmd+0xbc>)
 801dd4a:	f002 f921 	bl	801ff90 <iprintf>
	if (newline == 0)
 801dd4e:	78fb      	ldrb	r3, [r7, #3]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d104      	bne.n	801dd5e <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 801dd54:	68f9      	ldr	r1, [r7, #12]
 801dd56:	4823      	ldr	r0, [pc, #140]	; (801dde4 <esp8266_TransmitCmd+0xc0>)
 801dd58:	f7ff ff62 	bl	801dc20 <uart_esp32_transmit>
 801dd5c:	e01e      	b.n	801dd9c <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 801dd5e:	68f9      	ldr	r1, [r7, #12]
 801dd60:	4821      	ldr	r0, [pc, #132]	; (801dde8 <esp8266_TransmitCmd+0xc4>)
 801dd62:	f7ff ff5d 	bl	801dc20 <uart_esp32_transmit>

	while (timeout--) {
 801dd66:	e019      	b.n	801dd9c <esp8266_TransmitCmd+0x78>
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 801dd68:	4b20      	ldr	r3, [pc, #128]	; (801ddec <esp8266_TransmitCmd+0xc8>)
 801dd6a:	781b      	ldrb	r3, [r3, #0]
 801dd6c:	b2db      	uxtb	r3, r3
 801dd6e:	2b01      	cmp	r3, #1
 801dd70:	d111      	bne.n	801dd96 <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 801dd72:	68b8      	ldr	r0, [r7, #8]
 801dd74:	f7ff ffaa 	bl	801dccc <esp8266_CheckRespond>
 801dd78:	4603      	mov	r3, r0
 801dd7a:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
			}

			UART_ESP32_RxLen = 0;
 801dd7c:	4b1c      	ldr	r3, [pc, #112]	; (801ddf0 <esp8266_TransmitCmd+0xcc>)
 801dd7e:	2200      	movs	r2, #0
 801dd80:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801dd82:	4b1a      	ldr	r3, [pc, #104]	; (801ddec <esp8266_TransmitCmd+0xc8>)
 801dd84:	2200      	movs	r2, #0
 801dd86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801dd88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dd8c:	4913      	ldr	r1, [pc, #76]	; (801dddc <esp8266_TransmitCmd+0xb8>)
 801dd8e:	4819      	ldr	r0, [pc, #100]	; (801ddf4 <esp8266_TransmitCmd+0xd0>)
 801dd90:	f7fe f9a8 	bl	801c0e4 <HAL_UART_Receive_DMA>

			break;
 801dd94:	e007      	b.n	801dda6 <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 801dd96:	2001      	movs	r0, #1
 801dd98:	f7fa f990 	bl	80180bc <HAL_Delay>
	while (timeout--) {
 801dd9c:	697b      	ldr	r3, [r7, #20]
 801dd9e:	1e5a      	subs	r2, r3, #1
 801dda0:	617a      	str	r2, [r7, #20]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d1e0      	bne.n	801dd68 <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 801dda6:	7cfb      	ldrb	r3, [r7, #19]
 801dda8:	2b03      	cmp	r3, #3
 801ddaa:	d104      	bne.n	801ddb6 <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 801ddac:	4812      	ldr	r0, [pc, #72]	; (801ddf8 <esp8266_TransmitCmd+0xd4>)
 801ddae:	f002 f98b 	bl	80200c8 <puts>
		return check;
 801ddb2:	7cfb      	ldrb	r3, [r7, #19]
 801ddb4:	e00e      	b.n	801ddd4 <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 801ddb6:	697b      	ldr	r3, [r7, #20]
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	dc07      	bgt.n	801ddcc <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 801ddbc:	480f      	ldr	r0, [pc, #60]	; (801ddfc <esp8266_TransmitCmd+0xd8>)
 801ddbe:	f002 f983 	bl	80200c8 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801ddc2:	480f      	ldr	r0, [pc, #60]	; (801de00 <esp8266_TransmitCmd+0xdc>)
 801ddc4:	f002 f980 	bl	80200c8 <puts>
		return _TIMEOUT;
 801ddc8:	2302      	movs	r3, #2
 801ddca:	e003      	b.n	801ddd4 <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 801ddcc:	480d      	ldr	r0, [pc, #52]	; (801de04 <esp8266_TransmitCmd+0xe0>)
 801ddce:	f002 f97b 	bl	80200c8 <puts>
	return _SUCCEED;
 801ddd2:	2301      	movs	r3, #1
}
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	3718      	adds	r7, #24
 801ddd8:	46bd      	mov	sp, r7
 801ddda:	bd80      	pop	{r7, pc}
 801dddc:	2000917c 	.word	0x2000917c
 801dde0:	080224f8 	.word	0x080224f8
 801dde4:	08022518 	.word	0x08022518
 801dde8:	0802251c 	.word	0x0802251c
 801ddec:	2000997d 	.word	0x2000997d
 801ddf0:	2000997c 	.word	0x2000997c
 801ddf4:	2000039c 	.word	0x2000039c
 801ddf8:	08022524 	.word	0x08022524
 801ddfc:	08022540 	.word	0x08022540
 801de00:	08022558 	.word	0x08022558
 801de04:	0802256c 	.word	0x0802256c

0801de08 <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 801de08:	b580      	push	{r7, lr}
 801de0a:	b084      	sub	sp, #16
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 801de14:	2200      	movs	r2, #0
 801de16:	2108      	movs	r1, #8
 801de18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801de1c:	f7fb f81a 	bl	8018e54 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801de20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801de24:	f7fa f94a 	bl	80180bc <HAL_Delay>
	WIFI_RST_Disable();
 801de28:	2201      	movs	r2, #1
 801de2a:	2108      	movs	r1, #8
 801de2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801de30:	f7fb f810 	bl	8018e54 <HAL_GPIO_WritePin>
	while (timeout--) {
 801de34:	e01b      	b.n	801de6e <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 801de36:	4b18      	ldr	r3, [pc, #96]	; (801de98 <esp8266_HardwareReset+0x90>)
 801de38:	781b      	ldrb	r3, [r3, #0]
 801de3a:	b2db      	uxtb	r3, r3
 801de3c:	2b01      	cmp	r3, #1
 801de3e:	d113      	bne.n	801de68 <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 801de40:	4816      	ldr	r0, [pc, #88]	; (801de9c <esp8266_HardwareReset+0x94>)
 801de42:	f002 f941 	bl	80200c8 <puts>
			HAL_Delay(100);
 801de46:	2064      	movs	r0, #100	; 0x64
 801de48:	f7fa f938 	bl	80180bc <HAL_Delay>

			UART_ESP32_RxLen = 0;
 801de4c:	4b14      	ldr	r3, [pc, #80]	; (801dea0 <esp8266_HardwareReset+0x98>)
 801de4e:	2200      	movs	r2, #0
 801de50:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801de52:	4b11      	ldr	r3, [pc, #68]	; (801de98 <esp8266_HardwareReset+0x90>)
 801de54:	2200      	movs	r2, #0
 801de56:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801de58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801de5c:	4911      	ldr	r1, [pc, #68]	; (801dea4 <esp8266_HardwareReset+0x9c>)
 801de5e:	4812      	ldr	r0, [pc, #72]	; (801dea8 <esp8266_HardwareReset+0xa0>)
 801de60:	f7fe f940 	bl	801c0e4 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 801de64:	2301      	movs	r3, #1
 801de66:	e013      	b.n	801de90 <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 801de68:	2001      	movs	r0, #1
 801de6a:	f7fa f927 	bl	80180bc <HAL_Delay>
	while (timeout--) {
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	1e5a      	subs	r2, r3, #1
 801de72:	60fa      	str	r2, [r7, #12]
 801de74:	2b00      	cmp	r3, #0
 801de76:	d1de      	bne.n	801de36 <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	dc07      	bgt.n	801de8e <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 801de7e:	480b      	ldr	r0, [pc, #44]	; (801deac <esp8266_HardwareReset+0xa4>)
 801de80:	f002 f922 	bl	80200c8 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801de84:	480a      	ldr	r0, [pc, #40]	; (801deb0 <esp8266_HardwareReset+0xa8>)
 801de86:	f002 f91f 	bl	80200c8 <puts>
		return _TIMEOUT;
 801de8a:	2302      	movs	r3, #2
 801de8c:	e000      	b.n	801de90 <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 801de8e:	23ff      	movs	r3, #255	; 0xff
}
 801de90:	4618      	mov	r0, r3
 801de92:	3710      	adds	r7, #16
 801de94:	46bd      	mov	sp, r7
 801de96:	bd80      	pop	{r7, pc}
 801de98:	2000997d 	.word	0x2000997d
 801de9c:	0802257c 	.word	0x0802257c
 801dea0:	2000997c 	.word	0x2000997c
 801dea4:	2000917c 	.word	0x2000917c
 801dea8:	2000039c 	.word	0x2000039c
 801deac:	08022540 	.word	0x08022540
 801deb0:	08022558 	.word	0x08022558

0801deb4 <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 801deb4:	b580      	push	{r7, lr}
 801deb6:	b082      	sub	sp, #8
 801deb8:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 801deba:	2333      	movs	r3, #51	; 0x33
 801debc:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801debe:	88fb      	ldrh	r3, [r7, #6]
 801dec0:	4618      	mov	r0, r3
 801dec2:	f001 fadb 	bl	801f47c <malloc>
 801dec6:	4603      	mov	r3, r0
 801dec8:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 801deca:	88fb      	ldrh	r3, [r7, #6]
 801decc:	461a      	mov	r2, r3
 801dece:	2100      	movs	r1, #0
 801ded0:	6838      	ldr	r0, [r7, #0]
 801ded2:	f001 fb0b 	bl	801f4ec <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 801ded6:	4b0e      	ldr	r3, [pc, #56]	; (801df10 <esp8266_ConnectAP+0x5c>)
 801ded8:	4a0e      	ldr	r2, [pc, #56]	; (801df14 <esp8266_ConnectAP+0x60>)
 801deda:	490f      	ldr	r1, [pc, #60]	; (801df18 <esp8266_ConnectAP+0x64>)
 801dedc:	6838      	ldr	r0, [r7, #0]
 801dede:	f002 f90b 	bl	80200f8 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 801dee2:	2301      	movs	r3, #1
 801dee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dee8:	490c      	ldr	r1, [pc, #48]	; (801df1c <esp8266_ConnectAP+0x68>)
 801deea:	6838      	ldr	r0, [r7, #0]
 801deec:	f7ff ff1a 	bl	801dd24 <esp8266_TransmitCmd>
 801def0:	4603      	mov	r3, r0
 801def2:	2b01      	cmp	r3, #1
 801def4:	d103      	bne.n	801defe <esp8266_ConnectAP+0x4a>
		wifi_state = _ONLINE;
 801def6:	4b0a      	ldr	r3, [pc, #40]	; (801df20 <esp8266_ConnectAP+0x6c>)
 801def8:	2205      	movs	r2, #5
 801defa:	701a      	strb	r2, [r3, #0]
 801defc:	e002      	b.n	801df04 <esp8266_ConnectAP+0x50>
	else
		wifi_state = _OFFLINE;
 801defe:	4b08      	ldr	r3, [pc, #32]	; (801df20 <esp8266_ConnectAP+0x6c>)
 801df00:	2206      	movs	r2, #6
 801df02:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 801df04:	4b06      	ldr	r3, [pc, #24]	; (801df20 <esp8266_ConnectAP+0x6c>)
 801df06:	781b      	ldrb	r3, [r3, #0]
}
 801df08:	4618      	mov	r0, r3
 801df0a:	3708      	adds	r7, #8
 801df0c:	46bd      	mov	sp, r7
 801df0e:	bd80      	pop	{r7, pc}
 801df10:	08022598 	.word	0x08022598
 801df14:	080225a4 	.word	0x080225a4
 801df18:	080225b4 	.word	0x080225b4
 801df1c:	080225c8 	.word	0x080225c8
 801df20:	20000089 	.word	0x20000089

0801df24 <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b082      	sub	sp, #8
 801df28:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 801df2a:	2300      	movs	r3, #0
 801df2c:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 801df2e:	48a8      	ldr	r0, [pc, #672]	; (801e1d0 <esp8266_SetupIP+0x2ac>)
 801df30:	f002 f8ca 	bl	80200c8 <puts>
	wifi_config_step++;
 801df34:	4ba7      	ldr	r3, [pc, #668]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801df36:	781b      	ldrb	r3, [r3, #0]
 801df38:	3301      	adds	r3, #1
 801df3a:	b2da      	uxtb	r2, r3
 801df3c:	4ba5      	ldr	r3, [pc, #660]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801df3e:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801df40:	e019      	b.n	801df76 <esp8266_SetupIP+0x52>
		retry_count++;
 801df42:	79fb      	ldrb	r3, [r7, #7]
 801df44:	3301      	adds	r3, #1
 801df46:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801df48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801df4c:	f7fa f8b6 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801df50:	79fb      	ldrb	r3, [r7, #7]
 801df52:	2b03      	cmp	r3, #3
 801df54:	d90f      	bls.n	801df76 <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 801df56:	48a0      	ldr	r0, [pc, #640]	; (801e1d8 <esp8266_SetupIP+0x2b4>)
 801df58:	f002 f8b6 	bl	80200c8 <puts>
			retry_count = 0;
 801df5c:	2300      	movs	r3, #0
 801df5e:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 801df60:	4b9e      	ldr	r3, [pc, #632]	; (801e1dc <esp8266_SetupIP+0x2b8>)
 801df62:	22ee      	movs	r2, #238	; 0xee
 801df64:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 801df66:	4b9b      	ldr	r3, [pc, #620]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801df68:	781b      	ldrb	r3, [r3, #0]
 801df6a:	3b01      	subs	r3, #1
 801df6c:	b2da      	uxtb	r2, r3
 801df6e:	4b99      	ldr	r3, [pc, #612]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801df70:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801df72:	2300      	movs	r3, #0
 801df74:	e1e1      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801df76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801df7a:	f7ff ff45 	bl	801de08 <esp8266_HardwareReset>
 801df7e:	4603      	mov	r3, r0
 801df80:	2b01      	cmp	r3, #1
 801df82:	d1de      	bne.n	801df42 <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 801df84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801df88:	f7fa f898 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801df8c:	2300      	movs	r3, #0
 801df8e:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 801df90:	4893      	ldr	r0, [pc, #588]	; (801e1e0 <esp8266_SetupIP+0x2bc>)
 801df92:	f002 f899 	bl	80200c8 <puts>
	wifi_config_step++;
 801df96:	4b8f      	ldr	r3, [pc, #572]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801df98:	781b      	ldrb	r3, [r3, #0]
 801df9a:	3301      	adds	r3, #1
 801df9c:	b2da      	uxtb	r2, r3
 801df9e:	4b8d      	ldr	r3, [pc, #564]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801dfa0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801dfa2:	e016      	b.n	801dfd2 <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 801dfa4:	79fb      	ldrb	r3, [r7, #7]
 801dfa6:	3301      	adds	r3, #1
 801dfa8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801dfaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801dfae:	f7fa f885 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801dfb2:	79fb      	ldrb	r3, [r7, #7]
 801dfb4:	2b03      	cmp	r3, #3
 801dfb6:	d90c      	bls.n	801dfd2 <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 801dfb8:	488a      	ldr	r0, [pc, #552]	; (801e1e4 <esp8266_SetupIP+0x2c0>)
 801dfba:	f002 f885 	bl	80200c8 <puts>
			retry_count = 0;
 801dfbe:	2300      	movs	r3, #0
 801dfc0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801dfc2:	4b84      	ldr	r3, [pc, #528]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801dfc4:	781b      	ldrb	r3, [r3, #0]
 801dfc6:	3b01      	subs	r3, #1
 801dfc8:	b2da      	uxtb	r2, r3
 801dfca:	4b82      	ldr	r3, [pc, #520]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801dfcc:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801dfce:	2300      	movs	r3, #0
 801dfd0:	e1b3      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801dfd2:	2301      	movs	r3, #1
 801dfd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801dfd8:	4983      	ldr	r1, [pc, #524]	; (801e1e8 <esp8266_SetupIP+0x2c4>)
 801dfda:	4884      	ldr	r0, [pc, #528]	; (801e1ec <esp8266_SetupIP+0x2c8>)
 801dfdc:	f7ff fea2 	bl	801dd24 <esp8266_TransmitCmd>
 801dfe0:	4603      	mov	r3, r0
 801dfe2:	2b01      	cmp	r3, #1
 801dfe4:	d1de      	bne.n	801dfa4 <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 801dfe6:	2064      	movs	r0, #100	; 0x64
 801dfe8:	f7fa f868 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801dfec:	2300      	movs	r3, #0
 801dfee:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 801dff0:	487f      	ldr	r0, [pc, #508]	; (801e1f0 <esp8266_SetupIP+0x2cc>)
 801dff2:	f002 f869 	bl	80200c8 <puts>
	wifi_config_step++;
 801dff6:	4b77      	ldr	r3, [pc, #476]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801dff8:	781b      	ldrb	r3, [r3, #0]
 801dffa:	3301      	adds	r3, #1
 801dffc:	b2da      	uxtb	r2, r3
 801dffe:	4b75      	ldr	r3, [pc, #468]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e000:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801e002:	e016      	b.n	801e032 <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e004:	79fb      	ldrb	r3, [r7, #7]
 801e006:	3301      	adds	r3, #1
 801e008:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e00a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e00e:	f7fa f855 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e012:	79fb      	ldrb	r3, [r7, #7]
 801e014:	2b03      	cmp	r3, #3
 801e016:	d90c      	bls.n	801e032 <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 801e018:	4876      	ldr	r0, [pc, #472]	; (801e1f4 <esp8266_SetupIP+0x2d0>)
 801e01a:	f002 f855 	bl	80200c8 <puts>
			retry_count = 0;
 801e01e:	2300      	movs	r3, #0
 801e020:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e022:	4b6c      	ldr	r3, [pc, #432]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e024:	781b      	ldrb	r3, [r3, #0]
 801e026:	3b01      	subs	r3, #1
 801e028:	b2da      	uxtb	r2, r3
 801e02a:	4b6a      	ldr	r3, [pc, #424]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e02c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e02e:	2300      	movs	r3, #0
 801e030:	e183      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801e032:	2301      	movs	r3, #1
 801e034:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801e038:	496b      	ldr	r1, [pc, #428]	; (801e1e8 <esp8266_SetupIP+0x2c4>)
 801e03a:	486f      	ldr	r0, [pc, #444]	; (801e1f8 <esp8266_SetupIP+0x2d4>)
 801e03c:	f7ff fe72 	bl	801dd24 <esp8266_TransmitCmd>
 801e040:	4603      	mov	r3, r0
 801e042:	2b01      	cmp	r3, #1
 801e044:	d1de      	bne.n	801e004 <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 801e046:	2064      	movs	r0, #100	; 0x64
 801e048:	f7fa f838 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e04c:	2300      	movs	r3, #0
 801e04e:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 801e050:	486a      	ldr	r0, [pc, #424]	; (801e1fc <esp8266_SetupIP+0x2d8>)
 801e052:	f002 f839 	bl	80200c8 <puts>
	wifi_config_step++;
 801e056:	4b5f      	ldr	r3, [pc, #380]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e058:	781b      	ldrb	r3, [r3, #0]
 801e05a:	3301      	adds	r3, #1
 801e05c:	b2da      	uxtb	r2, r3
 801e05e:	4b5d      	ldr	r3, [pc, #372]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e060:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801e062:	e016      	b.n	801e092 <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e064:	79fb      	ldrb	r3, [r7, #7]
 801e066:	3301      	adds	r3, #1
 801e068:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e06a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e06e:	f7fa f825 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e072:	79fb      	ldrb	r3, [r7, #7]
 801e074:	2b03      	cmp	r3, #3
 801e076:	d90c      	bls.n	801e092 <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 801e078:	4861      	ldr	r0, [pc, #388]	; (801e200 <esp8266_SetupIP+0x2dc>)
 801e07a:	f002 f825 	bl	80200c8 <puts>
			retry_count = 0;
 801e07e:	2300      	movs	r3, #0
 801e080:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e082:	4b54      	ldr	r3, [pc, #336]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e084:	781b      	ldrb	r3, [r3, #0]
 801e086:	3b01      	subs	r3, #1
 801e088:	b2da      	uxtb	r2, r3
 801e08a:	4b52      	ldr	r3, [pc, #328]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e08c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e08e:	2300      	movs	r3, #0
 801e090:	e153      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801e092:	2301      	movs	r3, #1
 801e094:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801e098:	4953      	ldr	r1, [pc, #332]	; (801e1e8 <esp8266_SetupIP+0x2c4>)
 801e09a:	485a      	ldr	r0, [pc, #360]	; (801e204 <esp8266_SetupIP+0x2e0>)
 801e09c:	f7ff fe42 	bl	801dd24 <esp8266_TransmitCmd>
 801e0a0:	4603      	mov	r3, r0
 801e0a2:	2b01      	cmp	r3, #1
 801e0a4:	d1de      	bne.n	801e064 <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 801e0a6:	2064      	movs	r0, #100	; 0x64
 801e0a8:	f7fa f808 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 801e0b0:	4855      	ldr	r0, [pc, #340]	; (801e208 <esp8266_SetupIP+0x2e4>)
 801e0b2:	f002 f809 	bl	80200c8 <puts>
	wifi_config_step++;
 801e0b6:	4b47      	ldr	r3, [pc, #284]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e0b8:	781b      	ldrb	r3, [r3, #0]
 801e0ba:	3301      	adds	r3, #1
 801e0bc:	b2da      	uxtb	r2, r3
 801e0be:	4b45      	ldr	r3, [pc, #276]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e0c0:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 801e0c2:	e016      	b.n	801e0f2 <esp8266_SetupIP+0x1ce>
		retry_count++;
 801e0c4:	79fb      	ldrb	r3, [r7, #7]
 801e0c6:	3301      	adds	r3, #1
 801e0c8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e0ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e0ce:	f7f9 fff5 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e0d2:	79fb      	ldrb	r3, [r7, #7]
 801e0d4:	2b03      	cmp	r3, #3
 801e0d6:	d90c      	bls.n	801e0f2 <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 801e0d8:	484c      	ldr	r0, [pc, #304]	; (801e20c <esp8266_SetupIP+0x2e8>)
 801e0da:	f001 fff5 	bl	80200c8 <puts>
			retry_count = 0;
 801e0de:	2300      	movs	r3, #0
 801e0e0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e0e2:	4b3c      	ldr	r3, [pc, #240]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e0e4:	781b      	ldrb	r3, [r3, #0]
 801e0e6:	3b01      	subs	r3, #1
 801e0e8:	b2da      	uxtb	r2, r3
 801e0ea:	4b3a      	ldr	r3, [pc, #232]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e0ec:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	e123      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 801e0f2:	f7ff fedf 	bl	801deb4 <esp8266_ConnectAP>
 801e0f6:	4603      	mov	r3, r0
 801e0f8:	2b05      	cmp	r3, #5
 801e0fa:	d1e3      	bne.n	801e0c4 <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 801e0fc:	2064      	movs	r0, #100	; 0x64
 801e0fe:	f7f9 ffdd 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e102:	2300      	movs	r3, #0
 801e104:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 801e106:	4b42      	ldr	r3, [pc, #264]	; (801e210 <esp8266_SetupIP+0x2ec>)
 801e108:	781b      	ldrb	r3, [r3, #0]
 801e10a:	2b05      	cmp	r3, #5
 801e10c:	d123      	bne.n	801e156 <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801e10e:	e018      	b.n	801e142 <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801e110:	79fb      	ldrb	r3, [r7, #7]
 801e112:	3301      	adds	r3, #1
 801e114:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801e116:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e11a:	f7f9 ffcf 	bl	80180bc <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801e11e:	79fb      	ldrb	r3, [r7, #7]
 801e120:	2b01      	cmp	r3, #1
 801e122:	d90e      	bls.n	801e142 <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 801e124:	483b      	ldr	r0, [pc, #236]	; (801e214 <esp8266_SetupIP+0x2f0>)
 801e126:	f001 ffcf 	bl	80200c8 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801e12a:	483b      	ldr	r0, [pc, #236]	; (801e218 <esp8266_SetupIP+0x2f4>)
 801e12c:	f001 ff30 	bl	801ff90 <iprintf>
				retry_count = 0;
 801e130:	2300      	movs	r3, #0
 801e132:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801e134:	4b27      	ldr	r3, [pc, #156]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e136:	781b      	ldrb	r3, [r3, #0]
 801e138:	3b01      	subs	r3, #1
 801e13a:	b2da      	uxtb	r2, r3
 801e13c:	4b25      	ldr	r3, [pc, #148]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e13e:	701a      	strb	r2, [r3, #0]
				break;
 801e140:	e009      	b.n	801e156 <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801e142:	2301      	movs	r3, #1
 801e144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e148:	4927      	ldr	r1, [pc, #156]	; (801e1e8 <esp8266_SetupIP+0x2c4>)
 801e14a:	4834      	ldr	r0, [pc, #208]	; (801e21c <esp8266_SetupIP+0x2f8>)
 801e14c:	f7ff fdea 	bl	801dd24 <esp8266_TransmitCmd>
 801e150:	4603      	mov	r3, r0
 801e152:	2b01      	cmp	r3, #1
 801e154:	d1dc      	bne.n	801e110 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 801e156:	2064      	movs	r0, #100	; 0x64
 801e158:	f7f9 ffb0 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e15c:	2300      	movs	r3, #0
 801e15e:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 801e160:	4b2b      	ldr	r3, [pc, #172]	; (801e210 <esp8266_SetupIP+0x2ec>)
 801e162:	781b      	ldrb	r3, [r3, #0]
 801e164:	2b05      	cmp	r3, #5
 801e166:	d123      	bne.n	801e1b0 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801e168:	e018      	b.n	801e19c <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801e16a:	79fb      	ldrb	r3, [r7, #7]
 801e16c:	3301      	adds	r3, #1
 801e16e:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801e170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e174:	f7f9 ffa2 	bl	80180bc <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801e178:	79fb      	ldrb	r3, [r7, #7]
 801e17a:	2b01      	cmp	r3, #1
 801e17c:	d90e      	bls.n	801e19c <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 801e17e:	4828      	ldr	r0, [pc, #160]	; (801e220 <esp8266_SetupIP+0x2fc>)
 801e180:	f001 ffa2 	bl	80200c8 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801e184:	4824      	ldr	r0, [pc, #144]	; (801e218 <esp8266_SetupIP+0x2f4>)
 801e186:	f001 ff03 	bl	801ff90 <iprintf>
				retry_count = 0;
 801e18a:	2300      	movs	r3, #0
 801e18c:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801e18e:	4b11      	ldr	r3, [pc, #68]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e190:	781b      	ldrb	r3, [r3, #0]
 801e192:	3b01      	subs	r3, #1
 801e194:	b2da      	uxtb	r2, r3
 801e196:	4b0f      	ldr	r3, [pc, #60]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e198:	701a      	strb	r2, [r3, #0]
				break;
 801e19a:	e009      	b.n	801e1b0 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801e19c:	2301      	movs	r3, #1
 801e19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e1a2:	4911      	ldr	r1, [pc, #68]	; (801e1e8 <esp8266_SetupIP+0x2c4>)
 801e1a4:	481f      	ldr	r0, [pc, #124]	; (801e224 <esp8266_SetupIP+0x300>)
 801e1a6:	f7ff fdbd 	bl	801dd24 <esp8266_TransmitCmd>
 801e1aa:	4603      	mov	r3, r0
 801e1ac:	2b01      	cmp	r3, #1
 801e1ae:	d1dc      	bne.n	801e16a <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 801e1b0:	2064      	movs	r0, #100	; 0x64
 801e1b2:	f7f9 ff83 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 801e1ba:	481b      	ldr	r0, [pc, #108]	; (801e228 <esp8266_SetupIP+0x304>)
 801e1bc:	f001 ff84 	bl	80200c8 <puts>
	wifi_config_step++;
 801e1c0:	4b04      	ldr	r3, [pc, #16]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e1c2:	781b      	ldrb	r3, [r3, #0]
 801e1c4:	3301      	adds	r3, #1
 801e1c6:	b2da      	uxtb	r2, r3
 801e1c8:	4b02      	ldr	r3, [pc, #8]	; (801e1d4 <esp8266_SetupIP+0x2b0>)
 801e1ca:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801e1cc:	e045      	b.n	801e25a <esp8266_SetupIP+0x336>
 801e1ce:	bf00      	nop
 801e1d0:	08022618 	.word	0x08022618
 801e1d4:	2000897a 	.word	0x2000897a
 801e1d8:	08022638 	.word	0x08022638
 801e1dc:	2000008a 	.word	0x2000008a
 801e1e0:	08022684 	.word	0x08022684
 801e1e4:	080226a4 	.word	0x080226a4
 801e1e8:	080226c0 	.word	0x080226c0
 801e1ec:	080226c4 	.word	0x080226c4
 801e1f0:	080226cc 	.word	0x080226cc
 801e1f4:	080226ec 	.word	0x080226ec
 801e1f8:	0802270c 	.word	0x0802270c
 801e1fc:	08022718 	.word	0x08022718
 801e200:	08022740 	.word	0x08022740
 801e204:	08022764 	.word	0x08022764
 801e208:	08022774 	.word	0x08022774
 801e20c:	08022794 	.word	0x08022794
 801e210:	20000089 	.word	0x20000089
 801e214:	080227b4 	.word	0x080227b4
 801e218:	080227d0 	.word	0x080227d0
 801e21c:	08022808 	.word	0x08022808
 801e220:	08022814 	.word	0x08022814
 801e224:	08022830 	.word	0x08022830
 801e228:	0802283c 	.word	0x0802283c
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e22c:	79fb      	ldrb	r3, [r7, #7]
 801e22e:	3301      	adds	r3, #1
 801e230:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e236:	f7f9 ff41 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e23a:	79fb      	ldrb	r3, [r7, #7]
 801e23c:	2b03      	cmp	r3, #3
 801e23e:	d90c      	bls.n	801e25a <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 801e240:	4840      	ldr	r0, [pc, #256]	; (801e344 <esp8266_SetupIP+0x420>)
 801e242:	f001 ff41 	bl	80200c8 <puts>
			retry_count = 0;
 801e246:	2300      	movs	r3, #0
 801e248:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e24a:	4b3f      	ldr	r3, [pc, #252]	; (801e348 <esp8266_SetupIP+0x424>)
 801e24c:	781b      	ldrb	r3, [r3, #0]
 801e24e:	3b01      	subs	r3, #1
 801e250:	b2da      	uxtb	r2, r3
 801e252:	4b3d      	ldr	r3, [pc, #244]	; (801e348 <esp8266_SetupIP+0x424>)
 801e254:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e256:	2300      	movs	r3, #0
 801e258:	e06f      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801e25a:	2301      	movs	r3, #1
 801e25c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e260:	493a      	ldr	r1, [pc, #232]	; (801e34c <esp8266_SetupIP+0x428>)
 801e262:	483b      	ldr	r0, [pc, #236]	; (801e350 <esp8266_SetupIP+0x42c>)
 801e264:	f7ff fd5e 	bl	801dd24 <esp8266_TransmitCmd>
 801e268:	4603      	mov	r3, r0
 801e26a:	2b01      	cmp	r3, #1
 801e26c:	d1de      	bne.n	801e22c <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 801e26e:	2064      	movs	r0, #100	; 0x64
 801e270:	f7f9 ff24 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e274:	2300      	movs	r3, #0
 801e276:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 801e278:	4836      	ldr	r0, [pc, #216]	; (801e354 <esp8266_SetupIP+0x430>)
 801e27a:	f001 ff25 	bl	80200c8 <puts>
	wifi_config_step++;
 801e27e:	4b32      	ldr	r3, [pc, #200]	; (801e348 <esp8266_SetupIP+0x424>)
 801e280:	781b      	ldrb	r3, [r3, #0]
 801e282:	3301      	adds	r3, #1
 801e284:	b2da      	uxtb	r2, r3
 801e286:	4b30      	ldr	r3, [pc, #192]	; (801e348 <esp8266_SetupIP+0x424>)
 801e288:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801e28a:	e016      	b.n	801e2ba <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e28c:	79fb      	ldrb	r3, [r7, #7]
 801e28e:	3301      	adds	r3, #1
 801e290:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e296:	f7f9 ff11 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e29a:	79fb      	ldrb	r3, [r7, #7]
 801e29c:	2b03      	cmp	r3, #3
 801e29e:	d90c      	bls.n	801e2ba <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 801e2a0:	482d      	ldr	r0, [pc, #180]	; (801e358 <esp8266_SetupIP+0x434>)
 801e2a2:	f001 ff11 	bl	80200c8 <puts>
			retry_count = 0;
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e2aa:	4b27      	ldr	r3, [pc, #156]	; (801e348 <esp8266_SetupIP+0x424>)
 801e2ac:	781b      	ldrb	r3, [r3, #0]
 801e2ae:	3b01      	subs	r3, #1
 801e2b0:	b2da      	uxtb	r2, r3
 801e2b2:	4b25      	ldr	r3, [pc, #148]	; (801e348 <esp8266_SetupIP+0x424>)
 801e2b4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e2b6:	2300      	movs	r3, #0
 801e2b8:	e03f      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801e2ba:	2301      	movs	r3, #1
 801e2bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e2c0:	4922      	ldr	r1, [pc, #136]	; (801e34c <esp8266_SetupIP+0x428>)
 801e2c2:	4826      	ldr	r0, [pc, #152]	; (801e35c <esp8266_SetupIP+0x438>)
 801e2c4:	f7ff fd2e 	bl	801dd24 <esp8266_TransmitCmd>
 801e2c8:	4603      	mov	r3, r0
 801e2ca:	2b01      	cmp	r3, #1
 801e2cc:	d1de      	bne.n	801e28c <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 801e2ce:	2064      	movs	r0, #100	; 0x64
 801e2d0:	f7f9 fef4 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e2d4:	2300      	movs	r3, #0
 801e2d6:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 801e2d8:	4821      	ldr	r0, [pc, #132]	; (801e360 <esp8266_SetupIP+0x43c>)
 801e2da:	f001 fef5 	bl	80200c8 <puts>
	wifi_config_step++;
 801e2de:	4b1a      	ldr	r3, [pc, #104]	; (801e348 <esp8266_SetupIP+0x424>)
 801e2e0:	781b      	ldrb	r3, [r3, #0]
 801e2e2:	3301      	adds	r3, #1
 801e2e4:	b2da      	uxtb	r2, r3
 801e2e6:	4b18      	ldr	r3, [pc, #96]	; (801e348 <esp8266_SetupIP+0x424>)
 801e2e8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801e2ea:	e016      	b.n	801e31a <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e2ec:	79fb      	ldrb	r3, [r7, #7]
 801e2ee:	3301      	adds	r3, #1
 801e2f0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e2f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e2f6:	f7f9 fee1 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e2fa:	79fb      	ldrb	r3, [r7, #7]
 801e2fc:	2b03      	cmp	r3, #3
 801e2fe:	d90c      	bls.n	801e31a <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 801e300:	4818      	ldr	r0, [pc, #96]	; (801e364 <esp8266_SetupIP+0x440>)
 801e302:	f001 fee1 	bl	80200c8 <puts>
			retry_count = 0;
 801e306:	2300      	movs	r3, #0
 801e308:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e30a:	4b0f      	ldr	r3, [pc, #60]	; (801e348 <esp8266_SetupIP+0x424>)
 801e30c:	781b      	ldrb	r3, [r3, #0]
 801e30e:	3b01      	subs	r3, #1
 801e310:	b2da      	uxtb	r2, r3
 801e312:	4b0d      	ldr	r3, [pc, #52]	; (801e348 <esp8266_SetupIP+0x424>)
 801e314:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e316:	2300      	movs	r3, #0
 801e318:	e00f      	b.n	801e33a <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801e31a:	2301      	movs	r3, #1
 801e31c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e320:	490a      	ldr	r1, [pc, #40]	; (801e34c <esp8266_SetupIP+0x428>)
 801e322:	4811      	ldr	r0, [pc, #68]	; (801e368 <esp8266_SetupIP+0x444>)
 801e324:	f7ff fcfe 	bl	801dd24 <esp8266_TransmitCmd>
 801e328:	4603      	mov	r3, r0
 801e32a:	2b01      	cmp	r3, #1
 801e32c:	d1de      	bne.n	801e2ec <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 801e32e:	2064      	movs	r0, #100	; 0x64
 801e330:	f7f9 fec4 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e334:	2300      	movs	r3, #0
 801e336:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 801e338:	2301      	movs	r3, #1

}
 801e33a:	4618      	mov	r0, r3
 801e33c:	3708      	adds	r7, #8
 801e33e:	46bd      	mov	sp, r7
 801e340:	bd80      	pop	{r7, pc}
 801e342:	bf00      	nop
 801e344:	0802285c 	.word	0x0802285c
 801e348:	2000897a 	.word	0x2000897a
 801e34c:	080226c0 	.word	0x080226c0
 801e350:	0802287c 	.word	0x0802287c
 801e354:	0802288c 	.word	0x0802288c
 801e358:	080228b4 	.word	0x080228b4
 801e35c:	080228e0 	.word	0x080228e0
 801e360:	080228ec 	.word	0x080228ec
 801e364:	08022920 	.word	0x08022920
 801e368:	08022954 	.word	0x08022954

0801e36c <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 801e36c:	b580      	push	{r7, lr}
 801e36e:	b086      	sub	sp, #24
 801e370:	af02      	add	r7, sp, #8
	int retry_count = 0;
 801e372:	2300      	movs	r3, #0
 801e374:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 801e376:	232d      	movs	r3, #45	; 0x2d
 801e378:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e37a:	897b      	ldrh	r3, [r7, #10]
 801e37c:	4618      	mov	r0, r3
 801e37e:	f001 f87d 	bl	801f47c <malloc>
 801e382:	4603      	mov	r3, r0
 801e384:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e386:	897b      	ldrh	r3, [r7, #10]
 801e388:	461a      	mov	r2, r3
 801e38a:	2100      	movs	r1, #0
 801e38c:	6878      	ldr	r0, [r7, #4]
 801e38e:	f001 f8ad 	bl	801f4ec <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 801e392:	4b19      	ldr	r3, [pc, #100]	; (801e3f8 <esp8266_ConfigAccessBroker+0x8c>)
 801e394:	9300      	str	r3, [sp, #0]
 801e396:	4b18      	ldr	r3, [pc, #96]	; (801e3f8 <esp8266_ConfigAccessBroker+0x8c>)
 801e398:	4a18      	ldr	r2, [pc, #96]	; (801e3fc <esp8266_ConfigAccessBroker+0x90>)
 801e39a:	4919      	ldr	r1, [pc, #100]	; (801e400 <esp8266_ConfigAccessBroker+0x94>)
 801e39c:	6878      	ldr	r0, [r7, #4]
 801e39e:	f001 feab 	bl	80200f8 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e3a2:	e011      	b.n	801e3c8 <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	3301      	adds	r3, #1
 801e3a8:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e3aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e3ae:	f7f9 fe85 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	2b03      	cmp	r3, #3
 801e3b6:	dd07      	ble.n	801e3c8 <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 801e3b8:	4812      	ldr	r0, [pc, #72]	; (801e404 <esp8266_ConfigAccessBroker+0x98>)
 801e3ba:	f001 fe85 	bl	80200c8 <puts>
			retry_count = 0;
 801e3be:	2300      	movs	r3, #0
 801e3c0:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 801e3c2:	4b11      	ldr	r3, [pc, #68]	; (801e408 <esp8266_ConfigAccessBroker+0x9c>)
 801e3c4:	2204      	movs	r2, #4
 801e3c6:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e3c8:	2301      	movs	r3, #1
 801e3ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e3ce:	490f      	ldr	r1, [pc, #60]	; (801e40c <esp8266_ConfigAccessBroker+0xa0>)
 801e3d0:	6878      	ldr	r0, [r7, #4]
 801e3d2:	f7ff fca7 	bl	801dd24 <esp8266_TransmitCmd>
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	2b01      	cmp	r3, #1
 801e3da:	d1e3      	bne.n	801e3a4 <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 801e3dc:	4b0a      	ldr	r3, [pc, #40]	; (801e408 <esp8266_ConfigAccessBroker+0x9c>)
 801e3de:	2205      	movs	r2, #5
 801e3e0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 801e3e2:	2064      	movs	r0, #100	; 0x64
 801e3e4:	f7f9 fe6a 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 801e3ec:	4b06      	ldr	r3, [pc, #24]	; (801e408 <esp8266_ConfigAccessBroker+0x9c>)
 801e3ee:	781b      	ldrb	r3, [r3, #0]
}
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	3710      	adds	r7, #16
 801e3f4:	46bd      	mov	sp, r7
 801e3f6:	bd80      	pop	{r7, pc}
 801e3f8:	080229e0 	.word	0x080229e0
 801e3fc:	080229e4 	.word	0x080229e4
 801e400:	080229ec 	.word	0x080229ec
 801e404:	08022a18 	.word	0x08022a18
 801e408:	2000008b 	.word	0x2000008b
 801e40c:	080226c0 	.word	0x080226c0

0801e410 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 801e410:	b580      	push	{r7, lr}
 801e412:	b084      	sub	sp, #16
 801e414:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801e416:	2300      	movs	r3, #0
 801e418:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 801e41a:	232e      	movs	r3, #46	; 0x2e
 801e41c:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e41e:	897b      	ldrh	r3, [r7, #10]
 801e420:	4618      	mov	r0, r3
 801e422:	f001 f82b 	bl	801f47c <malloc>
 801e426:	4603      	mov	r3, r0
 801e428:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e42a:	897b      	ldrh	r3, [r7, #10]
 801e42c:	461a      	mov	r2, r3
 801e42e:	2100      	movs	r1, #0
 801e430:	6878      	ldr	r0, [r7, #4]
 801e432:	f001 f85b 	bl	801f4ec <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 801e436:	4b16      	ldr	r3, [pc, #88]	; (801e490 <esp8266_ConnectBroker+0x80>)
 801e438:	4a16      	ldr	r2, [pc, #88]	; (801e494 <esp8266_ConnectBroker+0x84>)
 801e43a:	4917      	ldr	r1, [pc, #92]	; (801e498 <esp8266_ConnectBroker+0x88>)
 801e43c:	6878      	ldr	r0, [r7, #4]
 801e43e:	f001 fe5b 	bl	80200f8 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e442:	e011      	b.n	801e468 <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	3301      	adds	r3, #1
 801e448:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e44a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e44e:	f7f9 fe35 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	2b03      	cmp	r3, #3
 801e456:	dd07      	ble.n	801e468 <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 801e458:	4810      	ldr	r0, [pc, #64]	; (801e49c <esp8266_ConnectBroker+0x8c>)
 801e45a:	f001 fe35 	bl	80200c8 <puts>
			retry_count = 0;
 801e45e:	2300      	movs	r3, #0
 801e460:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 801e462:	4b0f      	ldr	r3, [pc, #60]	; (801e4a0 <esp8266_ConnectBroker+0x90>)
 801e464:	2206      	movs	r2, #6
 801e466:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e468:	2301      	movs	r3, #1
 801e46a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e46e:	490d      	ldr	r1, [pc, #52]	; (801e4a4 <esp8266_ConnectBroker+0x94>)
 801e470:	6878      	ldr	r0, [r7, #4]
 801e472:	f7ff fc57 	bl	801dd24 <esp8266_TransmitCmd>
 801e476:	4603      	mov	r3, r0
 801e478:	2b01      	cmp	r3, #1
 801e47a:	d1e3      	bne.n	801e444 <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 801e47c:	4b08      	ldr	r3, [pc, #32]	; (801e4a0 <esp8266_ConnectBroker+0x90>)
 801e47e:	2207      	movs	r2, #7
 801e480:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 801e482:	4b07      	ldr	r3, [pc, #28]	; (801e4a0 <esp8266_ConnectBroker+0x90>)
 801e484:	781b      	ldrb	r3, [r3, #0]
}
 801e486:	4618      	mov	r0, r3
 801e488:	3710      	adds	r7, #16
 801e48a:	46bd      	mov	sp, r7
 801e48c:	bd80      	pop	{r7, pc}
 801e48e:	bf00      	nop
 801e490:	080225d8 	.word	0x080225d8
 801e494:	080225e0 	.word	0x080225e0
 801e498:	08022a6c 	.word	0x08022a6c
 801e49c:	08022a84 	.word	0x08022a84
 801e4a0:	2000008b 	.word	0x2000008b
 801e4a4:	080226c0 	.word	0x080226c0

0801e4a8 <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 801e4a8:	b580      	push	{r7, lr}
 801e4aa:	b082      	sub	sp, #8
 801e4ac:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 801e4b2:	482d      	ldr	r0, [pc, #180]	; (801e568 <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 801e4b4:	f001 fe08 	bl	80200c8 <puts>
	mqtt_config_step++;
 801e4b8:	4b2c      	ldr	r3, [pc, #176]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e4ba:	781b      	ldrb	r3, [r3, #0]
 801e4bc:	3301      	adds	r3, #1
 801e4be:	b2da      	uxtb	r2, r3
 801e4c0:	4b2a      	ldr	r3, [pc, #168]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e4c2:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 801e4c4:	e016      	b.n	801e4f4 <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 801e4c6:	79fb      	ldrb	r3, [r7, #7]
 801e4c8:	3301      	adds	r3, #1
 801e4ca:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 801e4cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801e4d0:	f7f9 fdf4 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e4d4:	79fb      	ldrb	r3, [r7, #7]
 801e4d6:	2b03      	cmp	r3, #3
 801e4d8:	d90c      	bls.n	801e4f4 <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 801e4da:	4825      	ldr	r0, [pc, #148]	; (801e570 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 801e4dc:	f001 fdf4 	bl	80200c8 <puts>
			retry_count = 0;
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 801e4e4:	4b21      	ldr	r3, [pc, #132]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e4e6:	781b      	ldrb	r3, [r3, #0]
 801e4e8:	3b01      	subs	r3, #1
 801e4ea:	b2da      	uxtb	r2, r3
 801e4ec:	4b1f      	ldr	r3, [pc, #124]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e4ee:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 801e4f0:	2300      	movs	r3, #0
 801e4f2:	e035      	b.n	801e560 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 801e4f4:	f7ff ff3a 	bl	801e36c <esp8266_ConfigAccessBroker>
 801e4f8:	4603      	mov	r3, r0
 801e4fa:	2b05      	cmp	r3, #5
 801e4fc:	d1e3      	bne.n	801e4c6 <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 801e4fe:	2064      	movs	r0, #100	; 0x64
 801e500:	f7f9 fddc 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e504:	2300      	movs	r3, #0
 801e506:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 801e508:	481a      	ldr	r0, [pc, #104]	; (801e574 <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 801e50a:	f001 fddd 	bl	80200c8 <puts>
	mqtt_config_step++;
 801e50e:	4b17      	ldr	r3, [pc, #92]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e510:	781b      	ldrb	r3, [r3, #0]
 801e512:	3301      	adds	r3, #1
 801e514:	b2da      	uxtb	r2, r3
 801e516:	4b15      	ldr	r3, [pc, #84]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e518:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 801e51a:	e016      	b.n	801e54a <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 801e51c:	79fb      	ldrb	r3, [r7, #7]
 801e51e:	3301      	adds	r3, #1
 801e520:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 801e522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801e526:	f7f9 fdc9 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e52a:	79fb      	ldrb	r3, [r7, #7]
 801e52c:	2b03      	cmp	r3, #3
 801e52e:	d90c      	bls.n	801e54a <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 801e530:	4811      	ldr	r0, [pc, #68]	; (801e578 <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 801e532:	f001 fdc9 	bl	80200c8 <puts>
			retry_count = 0;
 801e536:	2300      	movs	r3, #0
 801e538:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 801e53a:	4b0c      	ldr	r3, [pc, #48]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e53c:	781b      	ldrb	r3, [r3, #0]
 801e53e:	3b01      	subs	r3, #1
 801e540:	b2da      	uxtb	r2, r3
 801e542:	4b0a      	ldr	r3, [pc, #40]	; (801e56c <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e544:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 801e546:	2300      	movs	r3, #0
 801e548:	e00a      	b.n	801e560 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 801e54a:	f7ff ff61 	bl	801e410 <esp8266_ConnectBroker>
 801e54e:	4603      	mov	r3, r0
 801e550:	2b06      	cmp	r3, #6
 801e552:	d9e3      	bls.n	801e51c <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 801e554:	2064      	movs	r0, #100	; 0x64
 801e556:	f7f9 fdb1 	bl	80180bc <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e55a:	2300      	movs	r3, #0
 801e55c:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 801e55e:	2301      	movs	r3, #1
}
 801e560:	4618      	mov	r0, r3
 801e562:	3708      	adds	r7, #8
 801e564:	46bd      	mov	sp, r7
 801e566:	bd80      	pop	{r7, pc}
 801e568:	08022aac 	.word	0x08022aac
 801e56c:	2000897b 	.word	0x2000897b
 801e570:	08022ae4 	.word	0x08022ae4
 801e574:	08022b10 	.word	0x08022b10
 801e578:	08022b44 	.word	0x08022b44

0801e57c <esp8266_Subscribe_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Temp_BrokerMQTT()
{
 801e57c:	b580      	push	{r7, lr}
 801e57e:	b084      	sub	sp, #16
 801e580:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801e582:	2300      	movs	r3, #0
 801e584:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 801e586:	4b22      	ldr	r3, [pc, #136]	; (801e610 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e588:	781b      	ldrb	r3, [r3, #0]
 801e58a:	2b06      	cmp	r3, #6
 801e58c:	d801      	bhi.n	801e592 <esp8266_Subscribe_Temp_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 801e58e:	2300      	movs	r3, #0
 801e590:	e039      	b.n	801e606 <esp8266_Subscribe_Temp_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 801e592:	2328      	movs	r3, #40	; 0x28
 801e594:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e596:	897b      	ldrh	r3, [r7, #10]
 801e598:	4618      	mov	r0, r3
 801e59a:	f000 ff6f 	bl	801f47c <malloc>
 801e59e:	4603      	mov	r3, r0
 801e5a0:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e5a2:	897b      	ldrh	r3, [r7, #10]
 801e5a4:	461a      	mov	r2, r3
 801e5a6:	2100      	movs	r1, #0
 801e5a8:	6878      	ldr	r0, [r7, #4]
 801e5aa:	f000 ff9f 	bl	801f4ec <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTemp\",1", MQTT_CLIENTID);
 801e5ae:	4a19      	ldr	r2, [pc, #100]	; (801e614 <esp8266_Subscribe_Temp_BrokerMQTT+0x98>)
 801e5b0:	4919      	ldr	r1, [pc, #100]	; (801e618 <esp8266_Subscribe_Temp_BrokerMQTT+0x9c>)
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f001 fda0 	bl	80200f8 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e5b8:	e011      	b.n	801e5de <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
	{
		retry_count++;
 801e5ba:	68fb      	ldr	r3, [r7, #12]
 801e5bc:	3301      	adds	r3, #1
 801e5be:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e5c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e5c4:	f7f9 fd7a 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	2b03      	cmp	r3, #3
 801e5cc:	dd07      	ble.n	801e5de <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801e5ce:	4813      	ldr	r0, [pc, #76]	; (801e61c <esp8266_Subscribe_Temp_BrokerMQTT+0xa0>)
 801e5d0:	f001 fd7a 	bl	80200c8 <puts>
			retry_count = 0;
 801e5d4:	2300      	movs	r3, #0
 801e5d6:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 801e5d8:	4b0d      	ldr	r3, [pc, #52]	; (801e610 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e5da:	2200      	movs	r2, #0
 801e5dc:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e5de:	2301      	movs	r3, #1
 801e5e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e5e4:	490e      	ldr	r1, [pc, #56]	; (801e620 <esp8266_Subscribe_Temp_BrokerMQTT+0xa4>)
 801e5e6:	6878      	ldr	r0, [r7, #4]
 801e5e8:	f7ff fb9c 	bl	801dd24 <esp8266_TransmitCmd>
 801e5ec:	4603      	mov	r3, r0
 801e5ee:	2b01      	cmp	r3, #1
 801e5f0:	d1e3      	bne.n	801e5ba <esp8266_Subscribe_Temp_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 801e5f2:	2064      	movs	r0, #100	; 0x64
 801e5f4:	f7f9 fd62 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TEMP_MQTT;
 801e5fc:	4b04      	ldr	r3, [pc, #16]	; (801e610 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e5fe:	2208      	movs	r2, #8
 801e600:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e602:	4b03      	ldr	r3, [pc, #12]	; (801e610 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e604:	781b      	ldrb	r3, [r3, #0]
}
 801e606:	4618      	mov	r0, r3
 801e608:	3710      	adds	r7, #16
 801e60a:	46bd      	mov	sp, r7
 801e60c:	bd80      	pop	{r7, pc}
 801e60e:	bf00      	nop
 801e610:	2000008b 	.word	0x2000008b
 801e614:	080229e4 	.word	0x080229e4
 801e618:	08022b6c 	.word	0x08022b6c
 801e61c:	08022b88 	.word	0x08022b88
 801e620:	080226c0 	.word	0x080226c0

0801e624 <esp8266_Subscribe_ToF_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_ToF_BrokerMQTT()
{
 801e624:	b580      	push	{r7, lr}
 801e626:	b084      	sub	sp, #16
 801e628:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801e62a:	2300      	movs	r3, #0
 801e62c:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 801e62e:	4b22      	ldr	r3, [pc, #136]	; (801e6b8 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e630:	781b      	ldrb	r3, [r3, #0]
 801e632:	2b06      	cmp	r3, #6
 801e634:	d801      	bhi.n	801e63a <esp8266_Subscribe_ToF_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 801e636:	2300      	movs	r3, #0
 801e638:	e039      	b.n	801e6ae <esp8266_Subscribe_ToF_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 801e63a:	2328      	movs	r3, #40	; 0x28
 801e63c:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e63e:	897b      	ldrh	r3, [r7, #10]
 801e640:	4618      	mov	r0, r3
 801e642:	f000 ff1b 	bl	801f47c <malloc>
 801e646:	4603      	mov	r3, r0
 801e648:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e64a:	897b      	ldrh	r3, [r7, #10]
 801e64c:	461a      	mov	r2, r3
 801e64e:	2100      	movs	r1, #0
 801e650:	6878      	ldr	r0, [r7, #4]
 801e652:	f000 ff4b 	bl	801f4ec <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTof\",1", MQTT_CLIENTID);
 801e656:	4a19      	ldr	r2, [pc, #100]	; (801e6bc <esp8266_Subscribe_ToF_BrokerMQTT+0x98>)
 801e658:	4919      	ldr	r1, [pc, #100]	; (801e6c0 <esp8266_Subscribe_ToF_BrokerMQTT+0x9c>)
 801e65a:	6878      	ldr	r0, [r7, #4]
 801e65c:	f001 fd4c 	bl	80200f8 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e660:	e011      	b.n	801e686 <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
	{
		retry_count++;
 801e662:	68fb      	ldr	r3, [r7, #12]
 801e664:	3301      	adds	r3, #1
 801e666:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e66c:	f7f9 fd26 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	2b03      	cmp	r3, #3
 801e674:	dd07      	ble.n	801e686 <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801e676:	4813      	ldr	r0, [pc, #76]	; (801e6c4 <esp8266_Subscribe_ToF_BrokerMQTT+0xa0>)
 801e678:	f001 fd26 	bl	80200c8 <puts>
			retry_count = 0;
 801e67c:	2300      	movs	r3, #0
 801e67e:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 801e680:	4b0d      	ldr	r3, [pc, #52]	; (801e6b8 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e682:	2200      	movs	r2, #0
 801e684:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e686:	2301      	movs	r3, #1
 801e688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e68c:	490e      	ldr	r1, [pc, #56]	; (801e6c8 <esp8266_Subscribe_ToF_BrokerMQTT+0xa4>)
 801e68e:	6878      	ldr	r0, [r7, #4]
 801e690:	f7ff fb48 	bl	801dd24 <esp8266_TransmitCmd>
 801e694:	4603      	mov	r3, r0
 801e696:	2b01      	cmp	r3, #1
 801e698:	d1e3      	bne.n	801e662 <esp8266_Subscribe_ToF_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 801e69a:	2064      	movs	r0, #100	; 0x64
 801e69c:	f7f9 fd0e 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TOF_MQTT;
 801e6a4:	4b04      	ldr	r3, [pc, #16]	; (801e6b8 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e6a6:	2209      	movs	r2, #9
 801e6a8:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e6aa:	4b03      	ldr	r3, [pc, #12]	; (801e6b8 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e6ac:	781b      	ldrb	r3, [r3, #0]
}
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	3710      	adds	r7, #16
 801e6b2:	46bd      	mov	sp, r7
 801e6b4:	bd80      	pop	{r7, pc}
 801e6b6:	bf00      	nop
 801e6b8:	2000008b 	.word	0x2000008b
 801e6bc:	080229e4 	.word	0x080229e4
 801e6c0:	08022bbc 	.word	0x08022bbc
 801e6c4:	08022b88 	.word	0x08022b88
 801e6c8:	080226c0 	.word	0x080226c0

0801e6cc <esp8266_Publish_Temp_BrokerMQTT>:
	mqtt_state = _PUBLISH_BUTTON_MQTT;
	return mqtt_state;
}

MQTT_StateTypeDef esp8266_Publish_Temp_BrokerMQTT(uint8_t *data, uint16_t size)
{
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	b086      	sub	sp, #24
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	6078      	str	r0, [r7, #4]
 801e6d4:	460b      	mov	r3, r1
 801e6d6:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 801e6d8:	2300      	movs	r3, #0
 801e6da:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 801e6dc:	4b24      	ldr	r3, [pc, #144]	; (801e770 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e6de:	781b      	ldrb	r3, [r3, #0]
 801e6e0:	2b06      	cmp	r3, #6
 801e6e2:	d902      	bls.n	801e6ea <esp8266_Publish_Temp_BrokerMQTT+0x1e>
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d101      	bne.n	801e6ee <esp8266_Publish_Temp_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 801e6ea:	2300      	movs	r3, #0
 801e6ec:	e03b      	b.n	801e766 <esp8266_Publish_Temp_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 801e6ee:	887b      	ldrh	r3, [r7, #2]
 801e6f0:	3328      	adds	r3, #40	; 0x28
 801e6f2:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e6f4:	8a7b      	ldrh	r3, [r7, #18]
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	f000 fec0 	bl	801f47c <malloc>
 801e6fc:	4603      	mov	r3, r0
 801e6fe:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 801e700:	8a7b      	ldrh	r3, [r7, #18]
 801e702:	461a      	mov	r2, r3
 801e704:	2100      	movs	r1, #0
 801e706:	68f8      	ldr	r0, [r7, #12]
 801e708:	f000 fef0 	bl	801f4ec <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/Temp\",\"%s\",1,0", MQTT_CLIENTID, data);
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	4a19      	ldr	r2, [pc, #100]	; (801e774 <esp8266_Publish_Temp_BrokerMQTT+0xa8>)
 801e710:	4919      	ldr	r1, [pc, #100]	; (801e778 <esp8266_Publish_Temp_BrokerMQTT+0xac>)
 801e712:	68f8      	ldr	r0, [r7, #12]
 801e714:	f001 fcf0 	bl	80200f8 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e718:	e011      	b.n	801e73e <esp8266_Publish_Temp_BrokerMQTT+0x72>
	{
		retry_count++;
 801e71a:	697b      	ldr	r3, [r7, #20]
 801e71c:	3301      	adds	r3, #1
 801e71e:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 801e720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e724:	f7f9 fcca 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e728:	697b      	ldr	r3, [r7, #20]
 801e72a:	2b03      	cmp	r3, #3
 801e72c:	dd07      	ble.n	801e73e <esp8266_Publish_Temp_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801e72e:	4813      	ldr	r0, [pc, #76]	; (801e77c <esp8266_Publish_Temp_BrokerMQTT+0xb0>)
 801e730:	f001 fcca 	bl	80200c8 <puts>
			retry_count = 0;
 801e734:	2300      	movs	r3, #0
 801e736:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 801e738:	4b0d      	ldr	r3, [pc, #52]	; (801e770 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e73a:	2200      	movs	r2, #0
 801e73c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e73e:	2301      	movs	r3, #1
 801e740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e744:	490e      	ldr	r1, [pc, #56]	; (801e780 <esp8266_Publish_Temp_BrokerMQTT+0xb4>)
 801e746:	68f8      	ldr	r0, [r7, #12]
 801e748:	f7ff faec 	bl	801dd24 <esp8266_TransmitCmd>
 801e74c:	4603      	mov	r3, r0
 801e74e:	2b01      	cmp	r3, #1
 801e750:	d1e3      	bne.n	801e71a <esp8266_Publish_Temp_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 801e752:	2064      	movs	r0, #100	; 0x64
 801e754:	f7f9 fcb2 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e758:	2300      	movs	r3, #0
 801e75a:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TEMP_MQTT;
 801e75c:	4b04      	ldr	r3, [pc, #16]	; (801e770 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e75e:	220b      	movs	r2, #11
 801e760:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e762:	4b03      	ldr	r3, [pc, #12]	; (801e770 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e764:	781b      	ldrb	r3, [r3, #0]
}
 801e766:	4618      	mov	r0, r3
 801e768:	3718      	adds	r7, #24
 801e76a:	46bd      	mov	sp, r7
 801e76c:	bd80      	pop	{r7, pc}
 801e76e:	bf00      	nop
 801e770:	2000008b 	.word	0x2000008b
 801e774:	080229e4 	.word	0x080229e4
 801e778:	08022bfc 	.word	0x08022bfc
 801e77c:	08022b88 	.word	0x08022b88
 801e780:	080226c0 	.word	0x080226c0

0801e784 <esp8266_Publish_ToF_BrokerMQTT>:
MQTT_StateTypeDef esp8266_Publish_ToF_BrokerMQTT(uint8_t *data, uint16_t size)
{
 801e784:	b580      	push	{r7, lr}
 801e786:	b086      	sub	sp, #24
 801e788:	af00      	add	r7, sp, #0
 801e78a:	6078      	str	r0, [r7, #4]
 801e78c:	460b      	mov	r3, r1
 801e78e:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 801e790:	2300      	movs	r3, #0
 801e792:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT  || data == NULL)
 801e794:	4b24      	ldr	r3, [pc, #144]	; (801e828 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e796:	781b      	ldrb	r3, [r3, #0]
 801e798:	2b06      	cmp	r3, #6
 801e79a:	d902      	bls.n	801e7a2 <esp8266_Publish_ToF_BrokerMQTT+0x1e>
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d101      	bne.n	801e7a6 <esp8266_Publish_ToF_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	e03b      	b.n	801e81e <esp8266_Publish_ToF_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 801e7a6:	887b      	ldrh	r3, [r7, #2]
 801e7a8:	3328      	adds	r3, #40	; 0x28
 801e7aa:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e7ac:	8a7b      	ldrh	r3, [r7, #18]
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f000 fe64 	bl	801f47c <malloc>
 801e7b4:	4603      	mov	r3, r0
 801e7b6:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 801e7b8:	8a7b      	ldrh	r3, [r7, #18]
 801e7ba:	461a      	mov	r2, r3
 801e7bc:	2100      	movs	r1, #0
 801e7be:	68f8      	ldr	r0, [r7, #12]
 801e7c0:	f000 fe94 	bl	801f4ec <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/ToF\",\"%s\",1,0", MQTT_CLIENTID, data);
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	4a19      	ldr	r2, [pc, #100]	; (801e82c <esp8266_Publish_ToF_BrokerMQTT+0xa8>)
 801e7c8:	4919      	ldr	r1, [pc, #100]	; (801e830 <esp8266_Publish_ToF_BrokerMQTT+0xac>)
 801e7ca:	68f8      	ldr	r0, [r7, #12]
 801e7cc:	f001 fc94 	bl	80200f8 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e7d0:	e011      	b.n	801e7f6 <esp8266_Publish_ToF_BrokerMQTT+0x72>
	{
		retry_count++;
 801e7d2:	697b      	ldr	r3, [r7, #20]
 801e7d4:	3301      	adds	r3, #1
 801e7d6:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 801e7d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e7dc:	f7f9 fc6e 	bl	80180bc <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e7e0:	697b      	ldr	r3, [r7, #20]
 801e7e2:	2b03      	cmp	r3, #3
 801e7e4:	dd07      	ble.n	801e7f6 <esp8266_Publish_ToF_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_ToF_BrokerMQTT() failed\r\n");
 801e7e6:	4813      	ldr	r0, [pc, #76]	; (801e834 <esp8266_Publish_ToF_BrokerMQTT+0xb0>)
 801e7e8:	f001 fc6e 	bl	80200c8 <puts>
			retry_count = 0;
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 801e7f0:	4b0d      	ldr	r3, [pc, #52]	; (801e828 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e7f2:	2200      	movs	r2, #0
 801e7f4:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e7f6:	2301      	movs	r3, #1
 801e7f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e7fc:	490e      	ldr	r1, [pc, #56]	; (801e838 <esp8266_Publish_ToF_BrokerMQTT+0xb4>)
 801e7fe:	68f8      	ldr	r0, [r7, #12]
 801e800:	f7ff fa90 	bl	801dd24 <esp8266_TransmitCmd>
 801e804:	4603      	mov	r3, r0
 801e806:	2b01      	cmp	r3, #1
 801e808:	d1e3      	bne.n	801e7d2 <esp8266_Publish_ToF_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 801e80a:	2064      	movs	r0, #100	; 0x64
 801e80c:	f7f9 fc56 	bl	80180bc <HAL_Delay>
	retry_count = 0;
 801e810:	2300      	movs	r3, #0
 801e812:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TOF_MQTT;
 801e814:	4b04      	ldr	r3, [pc, #16]	; (801e828 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e816:	220c      	movs	r2, #12
 801e818:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e81a:	4b03      	ldr	r3, [pc, #12]	; (801e828 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e81c:	781b      	ldrb	r3, [r3, #0]
}
 801e81e:	4618      	mov	r0, r3
 801e820:	3718      	adds	r7, #24
 801e822:	46bd      	mov	sp, r7
 801e824:	bd80      	pop	{r7, pc}
 801e826:	bf00      	nop
 801e828:	2000008b 	.word	0x2000008b
 801e82c:	080229e4 	.word	0x080229e4
 801e830:	08022c1c 	.word	0x08022c1c
 801e834:	08022c3c 	.word	0x08022c3c
 801e838:	080226c0 	.word	0x080226c0

0801e83c <get_mqtt_state>:

uint8_t get_mqtt_state()
{
 801e83c:	b480      	push	{r7}
 801e83e:	af00      	add	r7, sp, #0
	return mqtt_state;
 801e840:	4b03      	ldr	r3, [pc, #12]	; (801e850 <get_mqtt_state+0x14>)
 801e842:	781b      	ldrb	r3, [r3, #0]
}
 801e844:	4618      	mov	r0, r3
 801e846:	46bd      	mov	sp, r7
 801e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e84c:	4770      	bx	lr
 801e84e:	bf00      	nop
 801e850:	2000008b 	.word	0x2000008b

0801e854 <formate_json_temp>:
#include "esp8266.h"
#include "parson.h"
#include <stdio.h>

static char* formate_json_temp(int value)
{
 801e854:	b580      	push	{r7, lr}
 801e856:	b086      	sub	sp, #24
 801e858:	af00      	add	r7, sp, #0
 801e85a:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 801e85c:	f7e4 fb8e 	bl	8002f7c <json_value_init_object>
 801e860:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 801e862:	697b      	ldr	r3, [r7, #20]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d101      	bne.n	801e86c <formate_json_temp+0x18>
		return NULL;
 801e868:	2300      	movs	r3, #0
 801e86a:	e020      	b.n	801e8ae <formate_json_temp+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 801e86c:	6978      	ldr	r0, [r7, #20]
 801e86e:	f7e4 facd 	bl	8002e0c <json_value_get_object>
 801e872:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 801e874:	693b      	ldr	r3, [r7, #16]
 801e876:	2b00      	cmp	r3, #0
 801e878:	d101      	bne.n	801e87e <formate_json_temp+0x2a>
		return NULL;
 801e87a:	2300      	movs	r3, #0
 801e87c:	e017      	b.n	801e8ae <formate_json_temp+0x5a>
/*
	char StringValue[5]; // Déclarer une chaîne de caractères assez grande pour contenir le résultat
	sprintf(StringValue, "%f", value);
*/
	if(json_object_set_number(obj, "value", value) != JSONSuccess)
 801e87e:	6878      	ldr	r0, [r7, #4]
 801e880:	f7e1 fe28 	bl	80004d4 <__aeabi_i2d>
 801e884:	4602      	mov	r2, r0
 801e886:	460b      	mov	r3, r1
 801e888:	ec43 2b10 	vmov	d0, r2, r3
 801e88c:	490a      	ldr	r1, [pc, #40]	; (801e8b8 <formate_json_temp+0x64>)
 801e88e:	6938      	ldr	r0, [r7, #16]
 801e890:	f7e4 fd32 	bl	80032f8 <json_object_set_number>
 801e894:	4603      	mov	r3, r0
 801e896:	2b00      	cmp	r3, #0
 801e898:	d001      	beq.n	801e89e <formate_json_temp+0x4a>
		return NULL;
 801e89a:	2300      	movs	r3, #0
 801e89c:	e007      	b.n	801e8ae <formate_json_temp+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 801e89e:	6978      	ldr	r0, [r7, #20]
 801e8a0:	f7e4 fc2e 	bl	8003100 <json_serialize_to_string>
 801e8a4:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 801e8a6:	6978      	ldr	r0, [r7, #20]
 801e8a8:	f7e4 fb3a 	bl	8002f20 <json_value_free>

	return serialized_string;
 801e8ac:	68fb      	ldr	r3, [r7, #12]
}
 801e8ae:	4618      	mov	r0, r3
 801e8b0:	3718      	adds	r7, #24
 801e8b2:	46bd      	mov	sp, r7
 801e8b4:	bd80      	pop	{r7, pc}
 801e8b6:	bf00      	nop
 801e8b8:	08022c70 	.word	0x08022c70

0801e8bc <IR_Init>:

void IR_Init()
{
 801e8bc:	b580      	push	{r7, lr}
 801e8be:	af00      	add	r7, sp, #0
	if(mlx90614_init() == true)printf("Initialization IR OK ! \n");
 801e8c0:	f000 f8f4 	bl	801eaac <mlx90614_init>
 801e8c4:	4603      	mov	r3, r0
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d003      	beq.n	801e8d2 <IR_Init+0x16>
 801e8ca:	4810      	ldr	r0, [pc, #64]	; (801e90c <IR_Init+0x50>)
 801e8cc:	f001 fbfc 	bl	80200c8 <puts>
 801e8d0:	e002      	b.n	801e8d8 <IR_Init+0x1c>
	  else printf("Initialization IR Failed ! \n");
 801e8d2:	480f      	ldr	r0, [pc, #60]	; (801e910 <IR_Init+0x54>)
 801e8d4:	f001 fbf8 	bl	80200c8 <puts>

	  mlx90614.configReg.DualIRSensor = 0;
 801e8d8:	4a0e      	ldr	r2, [pc, #56]	; (801e914 <IR_Init+0x58>)
 801e8da:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 801e8de:	f36f 1386 	bfc	r3, #6, #1
 801e8e2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	  mlx90614.configReg.SelectObjAmb = 1;
 801e8e6:	4a0b      	ldr	r2, [pc, #44]	; (801e914 <IR_Init+0x58>)
 801e8e8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 801e8ec:	2101      	movs	r1, #1
 801e8ee:	f361 1305 	bfi	r3, r1, #4, #2
 801e8f2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	  mlx90614.configReg.FIR = 4;
 801e8f6:	4a07      	ldr	r2, [pc, #28]	; (801e914 <IR_Init+0x58>)
 801e8f8:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 801e8fc:	2104      	movs	r1, #4
 801e8fe:	f361 0302 	bfi	r3, r1, #0, #3
 801e902:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
}
 801e906:	bf00      	nop
 801e908:	bd80      	pop	{r7, pc}
 801e90a:	bf00      	nop
 801e90c:	08022c78 	.word	0x08022c78
 801e910:	08022c90 	.word	0x08022c90
 801e914:	20009980 	.word	0x20009980

0801e918 <IR_Process>:

void IR_Process()
{
 801e918:	b580      	push	{r7, lr}
 801e91a:	b084      	sub	sp, #16
 801e91c:	af00      	add	r7, sp, #0
	float temp = 0.0f;
 801e91e:	f04f 0300 	mov.w	r3, #0
 801e922:	607b      	str	r3, [r7, #4]
	int i = 0 ;
 801e924:	2300      	movs	r3, #0
 801e926:	60fb      	str	r3, [r7, #12]
	while(i<1)
 801e928:	e019      	b.n	801e95e <IR_Process+0x46>
	{
		  //if ( mlx90614_getAmbient(&cap1->ambient) == true ) printf("getAmbient OK : %0.2f *C\n", cap1->ambient);
		  //else printf("Failed to read ambient temperature\n");
		  if ( mlx90614_getAmbient(&temp) == true ) printf("getAmbient OK : %0.2f *C\n", temp);
 801e92a:	1d3b      	adds	r3, r7, #4
 801e92c:	4618      	mov	r0, r3
 801e92e:	f000 f9c7 	bl	801ecc0 <mlx90614_getAmbient>
 801e932:	4603      	mov	r3, r0
 801e934:	2b00      	cmp	r3, #0
 801e936:	d009      	beq.n	801e94c <IR_Process+0x34>
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	4618      	mov	r0, r3
 801e93c:	f7e1 fddc 	bl	80004f8 <__aeabi_f2d>
 801e940:	4602      	mov	r2, r0
 801e942:	460b      	mov	r3, r1
 801e944:	4817      	ldr	r0, [pc, #92]	; (801e9a4 <IR_Process+0x8c>)
 801e946:	f001 fb23 	bl	801ff90 <iprintf>
 801e94a:	e002      	b.n	801e952 <IR_Process+0x3a>
		  else printf("Failed to read ambient temperature\n");
 801e94c:	4816      	ldr	r0, [pc, #88]	; (801e9a8 <IR_Process+0x90>)
 801e94e:	f001 fbbb 	bl	80200c8 <puts>
	*/
	/*
		  if ( mlx90614_getObject2(&tobj) == true) printf("getObject2 OK : %0.2f *C\n", tobj);
		  else printf("Failed to read Object2 temperature\n");
	*/
		  HAL_Delay(200);
 801e952:	20c8      	movs	r0, #200	; 0xc8
 801e954:	f7f9 fbb2 	bl	80180bc <HAL_Delay>
		  i++;
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	3301      	adds	r3, #1
 801e95c:	60fb      	str	r3, [r7, #12]
	while(i<1)
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	2b00      	cmp	r3, #0
 801e962:	dde2      	ble.n	801e92a <IR_Process+0x12>
	}
	//Send Temperature data
	 char *data = formate_json_temp(temp);
 801e964:	edd7 7a01 	vldr	s15, [r7, #4]
 801e968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e96c:	ee17 0a90 	vmov	r0, s15
 801e970:	f7ff ff70 	bl	801e854 <formate_json_temp>
 801e974:	60b8      	str	r0, [r7, #8]
	  if(esp8266_Publish_Temp_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TEMP_MQTT)
 801e976:	68b8      	ldr	r0, [r7, #8]
 801e978:	f7e1 fc02 	bl	8000180 <strlen>
 801e97c:	4603      	mov	r3, r0
 801e97e:	b29b      	uxth	r3, r3
 801e980:	4619      	mov	r1, r3
 801e982:	68b8      	ldr	r0, [r7, #8]
 801e984:	f7ff fea2 	bl	801e6cc <esp8266_Publish_Temp_BrokerMQTT>
 801e988:	4603      	mov	r3, r0
 801e98a:	2b0b      	cmp	r3, #11
 801e98c:	d002      	beq.n	801e994 <IR_Process+0x7c>
		printf("APP: B1 esp8266_Publish_Temp_BrokerMQTT() failed\n");
 801e98e:	4807      	ldr	r0, [pc, #28]	; (801e9ac <IR_Process+0x94>)
 801e990:	f001 fb9a 	bl	80200c8 <puts>
	  json_free_serialized_string(data);
 801e994:	68b8      	ldr	r0, [r7, #8]
 801e996:	f7e4 fbe5 	bl	8003164 <json_free_serialized_string>
}
 801e99a:	bf00      	nop
 801e99c:	3710      	adds	r7, #16
 801e99e:	46bd      	mov	sp, r7
 801e9a0:	bd80      	pop	{r7, pc}
 801e9a2:	bf00      	nop
 801e9a4:	08022cac 	.word	0x08022cac
 801e9a8:	08022cc8 	.word	0x08022cc8
 801e9ac:	08022cec 	.word	0x08022cec

0801e9b0 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 801e9b0:	b580      	push	{r7, lr}
 801e9b2:	b088      	sub	sp, #32
 801e9b4:	af04      	add	r7, sp, #16
 801e9b6:	4603      	mov	r3, r0
 801e9b8:	6039      	str	r1, [r7, #0]
 801e9ba:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 801e9bc:	79fb      	ldrb	r3, [r7, #7]
 801e9be:	b29a      	uxth	r2, r3
 801e9c0:	2364      	movs	r3, #100	; 0x64
 801e9c2:	9302      	str	r3, [sp, #8]
 801e9c4:	2303      	movs	r3, #3
 801e9c6:	9301      	str	r3, [sp, #4]
 801e9c8:	f107 030c 	add.w	r3, r7, #12
 801e9cc:	9300      	str	r3, [sp, #0]
 801e9ce:	2301      	movs	r3, #1
 801e9d0:	21b4      	movs	r1, #180	; 0xb4
 801e9d2:	480b      	ldr	r0, [pc, #44]	; (801ea00 <mlx90614_read16+0x50>)
 801e9d4:	f7fa fd30 	bl	8019438 <HAL_I2C_Mem_Read>
 801e9d8:	4603      	mov	r3, r0
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d001      	beq.n	801e9e2 <mlx90614_read16+0x32>
    return false;
 801e9de:	2300      	movs	r3, #0
 801e9e0:	e009      	b.n	801e9f6 <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 801e9e2:	7b3b      	ldrb	r3, [r7, #12]
 801e9e4:	b21a      	sxth	r2, r3
 801e9e6:	7b7b      	ldrb	r3, [r7, #13]
 801e9e8:	021b      	lsls	r3, r3, #8
 801e9ea:	b21b      	sxth	r3, r3
 801e9ec:	4313      	orrs	r3, r2
 801e9ee:	b21a      	sxth	r2, r3
 801e9f0:	683b      	ldr	r3, [r7, #0]
 801e9f2:	801a      	strh	r2, [r3, #0]
  return true;
 801e9f4:	2301      	movs	r3, #1
}
 801e9f6:	4618      	mov	r0, r3
 801e9f8:	3710      	adds	r7, #16
 801e9fa:	46bd      	mov	sp, r7
 801e9fc:	bd80      	pop	{r7, pc}
 801e9fe:	bf00      	nop
 801ea00:	20000284 	.word	0x20000284

0801ea04 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 801ea04:	b580      	push	{r7, lr}
 801ea06:	b084      	sub	sp, #16
 801ea08:	af00      	add	r7, sp, #0
 801ea0a:	4603      	mov	r3, r0
 801ea0c:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 801ea0e:	4b22      	ldr	r3, [pc, #136]	; (801ea98 <mlx90614_calcTemperature+0x94>)
 801ea10:	781b      	ldrb	r3, [r3, #0]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d108      	bne.n	801ea28 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 801ea16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ea1a:	ee07 3a90 	vmov	s15, r3
 801ea1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea22:	edc7 7a03 	vstr	s15, [r7, #12]
 801ea26:	e02e      	b.n	801ea86 <mlx90614_calcTemperature+0x82>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 801ea28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ea2c:	ee07 3a90 	vmov	s15, r3
 801ea30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea34:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801ea9c <mlx90614_calcTemperature+0x98>
 801ea38:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ea3c:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 801ea40:	4b15      	ldr	r3, [pc, #84]	; (801ea98 <mlx90614_calcTemperature+0x94>)
 801ea42:	781b      	ldrb	r3, [r3, #0]
 801ea44:	2b01      	cmp	r3, #1
 801ea46:	d01e      	beq.n	801ea86 <mlx90614_calcTemperature+0x82>
		{
			retTemp -= 273.15f;
 801ea48:	edd7 7a03 	vldr	s15, [r7, #12]
 801ea4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801eaa0 <mlx90614_calcTemperature+0x9c>
 801ea50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ea54:	edc7 7a03 	vstr	s15, [r7, #12]
/*
			if(obj == true){
				retTemp = retTemp * 0.26f;
			}
*/
			if(mlx90614.unit == MLX90614_UNIT_F)
 801ea58:	4b0f      	ldr	r3, [pc, #60]	; (801ea98 <mlx90614_calcTemperature+0x94>)
 801ea5a:	781b      	ldrb	r3, [r3, #0]
 801ea5c:	2b03      	cmp	r3, #3
 801ea5e:	d112      	bne.n	801ea86 <mlx90614_calcTemperature+0x82>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 801ea60:	edd7 7a03 	vldr	s15, [r7, #12]
 801ea64:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 801ea68:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ea6c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801ea70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ea74:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801eaa4 <mlx90614_calcTemperature+0xa0>
 801ea78:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ea7c:	edc7 7a03 	vstr	s15, [r7, #12]
				printf("Convertion Farenheight Done ! \n");
 801ea80:	4809      	ldr	r0, [pc, #36]	; (801eaa8 <mlx90614_calcTemperature+0xa4>)
 801ea82:	f001 fb21 	bl	80200c8 <puts>

			}
		}
	}
	return retTemp;
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	ee07 3a90 	vmov	s15, r3
}
 801ea8c:	eeb0 0a67 	vmov.f32	s0, s15
 801ea90:	3710      	adds	r7, #16
 801ea92:	46bd      	mov	sp, r7
 801ea94:	bd80      	pop	{r7, pc}
 801ea96:	bf00      	nop
 801ea98:	20009980 	.word	0x20009980
 801ea9c:	3ca3d70a 	.word	0x3ca3d70a
 801eaa0:	43889333 	.word	0x43889333
 801eaa4:	42000000 	.word	0x42000000
 801eaa8:	08022d20 	.word	0x08022d20

0801eaac <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 801eaac:	b580      	push	{r7, lr}
 801eaae:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 801eab0:	2234      	movs	r2, #52	; 0x34
 801eab2:	2100      	movs	r1, #0
 801eab4:	4821      	ldr	r0, [pc, #132]	; (801eb3c <mlx90614_init+0x90>)
 801eab6:	f000 fd19 	bl	801f4ec <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 801eaba:	4b20      	ldr	r3, [pc, #128]	; (801eb3c <mlx90614_init+0x90>)
 801eabc:	2202      	movs	r2, #2
 801eabe:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 801eac0:	2364      	movs	r3, #100	; 0x64
 801eac2:	2201      	movs	r2, #1
 801eac4:	21b4      	movs	r1, #180	; 0xb4
 801eac6:	481e      	ldr	r0, [pc, #120]	; (801eb40 <mlx90614_init+0x94>)
 801eac8:	f7fa fdd0 	bl	801966c <HAL_I2C_IsDeviceReady>
 801eacc:	4603      	mov	r3, r0
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d001      	beq.n	801ead6 <mlx90614_init+0x2a>
    return false;
 801ead2:	2300      	movs	r3, #0
 801ead4:	e030      	b.n	801eb38 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 801ead6:	491b      	ldr	r1, [pc, #108]	; (801eb44 <mlx90614_init+0x98>)
 801ead8:	2025      	movs	r0, #37	; 0x25
 801eada:	f7ff ff69 	bl	801e9b0 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 801eade:	2000      	movs	r0, #0
 801eae0:	f000 f832 	bl	801eb48 <mlx90614_readID>
 801eae4:	4603      	mov	r3, r0
 801eae6:	f083 0301 	eor.w	r3, r3, #1
 801eaea:	b2db      	uxtb	r3, r3
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d001      	beq.n	801eaf4 <mlx90614_init+0x48>
    return false;
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	e021      	b.n	801eb38 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 801eaf4:	2000      	movs	r0, #0
 801eaf6:	f000 f861 	bl	801ebbc <mlx90614_getEmissivity>
 801eafa:	4603      	mov	r3, r0
 801eafc:	f083 0301 	eor.w	r3, r3, #1
 801eb00:	b2db      	uxtb	r3, r3
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d001      	beq.n	801eb0a <mlx90614_init+0x5e>
    return false;
 801eb06:	2300      	movs	r3, #0
 801eb08:	e016      	b.n	801eb38 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 801eb0a:	2000      	movs	r0, #0
 801eb0c:	f000 f890 	bl	801ec30 <mlx90614_getMax>
 801eb10:	4603      	mov	r3, r0
 801eb12:	f083 0301 	eor.w	r3, r3, #1
 801eb16:	b2db      	uxtb	r3, r3
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d001      	beq.n	801eb20 <mlx90614_init+0x74>
    return false;
 801eb1c:	2300      	movs	r3, #0
 801eb1e:	e00b      	b.n	801eb38 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 801eb20:	2000      	movs	r0, #0
 801eb22:	f000 f8a9 	bl	801ec78 <mlx90614_getMin>
 801eb26:	4603      	mov	r3, r0
 801eb28:	f083 0301 	eor.w	r3, r3, #1
 801eb2c:	b2db      	uxtb	r3, r3
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d001      	beq.n	801eb36 <mlx90614_init+0x8a>
    return false;
 801eb32:	2300      	movs	r3, #0
 801eb34:	e000      	b.n	801eb38 <mlx90614_init+0x8c>

  return true;
 801eb36:	2301      	movs	r3, #1
}
 801eb38:	4618      	mov	r0, r3
 801eb3a:	bd80      	pop	{r7, pc}
 801eb3c:	20009980 	.word	0x20009980
 801eb40:	20000284 	.word	0x20000284
 801eb44:	200099b0 	.word	0x200099b0

0801eb48 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 801eb48:	b580      	push	{r7, lr}
 801eb4a:	b084      	sub	sp, #16
 801eb4c:	af00      	add	r7, sp, #0
 801eb4e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 801eb50:	2300      	movs	r3, #0
 801eb52:	60fb      	str	r3, [r7, #12]
 801eb54:	e028      	b.n	801eba8 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 801eb56:	2300      	movs	r3, #0
 801eb58:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	b2db      	uxtb	r3, r3
 801eb5e:	333c      	adds	r3, #60	; 0x3c
 801eb60:	b2db      	uxtb	r3, r3
 801eb62:	f107 020a 	add.w	r2, r7, #10
 801eb66:	4611      	mov	r1, r2
 801eb68:	4618      	mov	r0, r3
 801eb6a:	f7ff ff21 	bl	801e9b0 <mlx90614_read16>
 801eb6e:	4603      	mov	r3, r0
 801eb70:	f083 0301 	eor.w	r3, r3, #1
 801eb74:	b2db      	uxtb	r3, r3
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d001      	beq.n	801eb7e <mlx90614_readID+0x36>
			return false;
 801eb7a:	2300      	movs	r3, #0
 801eb7c:	e018      	b.n	801ebb0 <mlx90614_readID+0x68>
		if(id != NULL)
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d006      	beq.n	801eb92 <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	005b      	lsls	r3, r3, #1
 801eb88:	687a      	ldr	r2, [r7, #4]
 801eb8a:	4413      	add	r3, r2
 801eb8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801eb90:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 801eb92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801eb96:	b299      	uxth	r1, r3
 801eb98:	4a07      	ldr	r2, [pc, #28]	; (801ebb8 <mlx90614_readID+0x70>)
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	3314      	adds	r3, #20
 801eb9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	3301      	adds	r3, #1
 801eba6:	60fb      	str	r3, [r7, #12]
 801eba8:	68fb      	ldr	r3, [r7, #12]
 801ebaa:	2b03      	cmp	r3, #3
 801ebac:	ddd3      	ble.n	801eb56 <mlx90614_readID+0xe>
	}
	return true;
 801ebae:	2301      	movs	r3, #1
}
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	3710      	adds	r7, #16
 801ebb4:	46bd      	mov	sp, r7
 801ebb6:	bd80      	pop	{r7, pc}
 801ebb8:	20009980 	.word	0x20009980

0801ebbc <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 801ebbc:	b580      	push	{r7, lr}
 801ebbe:	b082      	sub	sp, #8
 801ebc0:	af00      	add	r7, sp, #0
 801ebc2:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 801ebc4:	4917      	ldr	r1, [pc, #92]	; (801ec24 <mlx90614_getEmissivity+0x68>)
 801ebc6:	2024      	movs	r0, #36	; 0x24
 801ebc8:	f7ff fef2 	bl	801e9b0 <mlx90614_read16>
 801ebcc:	4603      	mov	r3, r0
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d022      	beq.n	801ec18 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 801ebd2:	4b15      	ldr	r3, [pc, #84]	; (801ec28 <mlx90614_getEmissivity+0x6c>)
 801ebd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ebd8:	b29b      	uxth	r3, r3
 801ebda:	ee07 3a90 	vmov	s15, r3
 801ebde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ebe2:	eddf 6a12 	vldr	s13, [pc, #72]	; 801ec2c <mlx90614_getEmissivity+0x70>
 801ebe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ebea:	4b0f      	ldr	r3, [pc, #60]	; (801ec28 <mlx90614_getEmissivity+0x6c>)
 801ebec:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d00e      	beq.n	801ec14 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 801ebf6:	4b0c      	ldr	r3, [pc, #48]	; (801ec28 <mlx90614_getEmissivity+0x6c>)
 801ebf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ebfc:	b29b      	uxth	r3, r3
 801ebfe:	ee07 3a90 	vmov	s15, r3
 801ec02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ec06:	eddf 6a09 	vldr	s13, [pc, #36]	; 801ec2c <mlx90614_getEmissivity+0x70>
 801ec0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801ec14:	2301      	movs	r3, #1
 801ec16:	e000      	b.n	801ec1a <mlx90614_getEmissivity+0x5e>
	}
	return false;
 801ec18:	2300      	movs	r3, #0
}
 801ec1a:	4618      	mov	r0, r3
 801ec1c:	3708      	adds	r7, #8
 801ec1e:	46bd      	mov	sp, r7
 801ec20:	bd80      	pop	{r7, pc}
 801ec22:	bf00      	nop
 801ec24:	20009982 	.word	0x20009982
 801ec28:	20009980 	.word	0x20009980
 801ec2c:	477fff00 	.word	0x477fff00

0801ec30 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 801ec30:	b580      	push	{r7, lr}
 801ec32:	b082      	sub	sp, #8
 801ec34:	af00      	add	r7, sp, #0
 801ec36:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 801ec38:	490d      	ldr	r1, [pc, #52]	; (801ec70 <mlx90614_getMax+0x40>)
 801ec3a:	2020      	movs	r0, #32
 801ec3c:	f7ff feb8 	bl	801e9b0 <mlx90614_read16>
 801ec40:	4603      	mov	r3, r0
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d00e      	beq.n	801ec64 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d009      	beq.n	801ec60 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 801ec4c:	4b09      	ldr	r3, [pc, #36]	; (801ec74 <mlx90614_getMax+0x44>)
 801ec4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801ec52:	ee07 3a90 	vmov	s15, r3
 801ec56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801ec60:	2301      	movs	r3, #1
 801ec62:	e000      	b.n	801ec66 <mlx90614_getMax+0x36>
	}
	return false;
 801ec64:	2300      	movs	r3, #0
}
 801ec66:	4618      	mov	r0, r3
 801ec68:	3708      	adds	r7, #8
 801ec6a:	46bd      	mov	sp, r7
 801ec6c:	bd80      	pop	{r7, pc}
 801ec6e:	bf00      	nop
 801ec70:	2000998a 	.word	0x2000998a
 801ec74:	20009980 	.word	0x20009980

0801ec78 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 801ec78:	b580      	push	{r7, lr}
 801ec7a:	b082      	sub	sp, #8
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 801ec80:	490d      	ldr	r1, [pc, #52]	; (801ecb8 <mlx90614_getMin+0x40>)
 801ec82:	2021      	movs	r0, #33	; 0x21
 801ec84:	f7ff fe94 	bl	801e9b0 <mlx90614_read16>
 801ec88:	4603      	mov	r3, r0
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d00e      	beq.n	801ecac <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d009      	beq.n	801eca8 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 801ec94:	4b09      	ldr	r3, [pc, #36]	; (801ecbc <mlx90614_getMin+0x44>)
 801ec96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801ec9a:	ee07 3a90 	vmov	s15, r3
 801ec9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801eca8:	2301      	movs	r3, #1
 801ecaa:	e000      	b.n	801ecae <mlx90614_getMin+0x36>
	}
	return false;
 801ecac:	2300      	movs	r3, #0
}
 801ecae:	4618      	mov	r0, r3
 801ecb0:	3708      	adds	r7, #8
 801ecb2:	46bd      	mov	sp, r7
 801ecb4:	bd80      	pop	{r7, pc}
 801ecb6:	bf00      	nop
 801ecb8:	2000998c 	.word	0x2000998c
 801ecbc:	20009980 	.word	0x20009980

0801ecc0 <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 801ecc0:	b580      	push	{r7, lr}
 801ecc2:	b082      	sub	sp, #8
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 801ecc8:	490d      	ldr	r1, [pc, #52]	; (801ed00 <mlx90614_getAmbient+0x40>)
 801ecca:	2006      	movs	r0, #6
 801eccc:	f7ff fe70 	bl	801e9b0 <mlx90614_read16>
 801ecd0:	4603      	mov	r3, r0
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d00f      	beq.n	801ecf6 <mlx90614_getAmbient+0x36>
	{
    if(ambientTemp != NULL)
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d00a      	beq.n	801ecf2 <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 801ecdc:	4b09      	ldr	r3, [pc, #36]	; (801ed04 <mlx90614_getAmbient+0x44>)
 801ecde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ece2:	4618      	mov	r0, r3
 801ece4:	f7ff fe8e 	bl	801ea04 <mlx90614_calcTemperature>
 801ece8:	eef0 7a40 	vmov.f32	s15, s0
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801ecf2:	2301      	movs	r3, #1
 801ecf4:	e000      	b.n	801ecf8 <mlx90614_getAmbient+0x38>
	}
	return false;
 801ecf6:	2300      	movs	r3, #0
}
 801ecf8:	4618      	mov	r0, r3
 801ecfa:	3708      	adds	r7, #8
 801ecfc:	46bd      	mov	sp, r7
 801ecfe:	bd80      	pop	{r7, pc}
 801ed00:	20009984 	.word	0x20009984
 801ed04:	20009980 	.word	0x20009980

0801ed08 <MX_TOF_Init>:
static void MX_53L1A2_MultiSensorRanging_Init(void);
static void MX_53L1A2_MultiSensorRanging_Process(void);
static void print_result(uint32_t Instance, RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 801ed08:	b580      	push	{r7, lr}
 801ed0a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L1A2_MultiSensorRanging_Init();
 801ed0c:	f000 f808 	bl	801ed20 <MX_53L1A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 801ed10:	bf00      	nop
 801ed12:	bd80      	pop	{r7, pc}

0801ed14 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 801ed14:	b580      	push	{r7, lr}
 801ed16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L1A2_MultiSensorRanging_Process();
 801ed18:	f000 f866 	bl	801ede8 <MX_53L1A2_MultiSensorRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 801ed1c:	bf00      	nop
 801ed1e:	bd80      	pop	{r7, pc}

0801ed20 <MX_53L1A2_MultiSensorRanging_Init>:

static void MX_53L1A2_MultiSensorRanging_Init(void)
{
 801ed20:	b580      	push	{r7, lr}
 801ed22:	b082      	sub	sp, #8
 801ed24:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 801ed26:	2000      	movs	r0, #0
 801ed28:	f7f9 f874 	bl	8017e14 <BSP_COM_Init>

  printf("53L1A2 Multi Sensor Ranging demo application\n");
 801ed2c:	482a      	ldr	r0, [pc, #168]	; (801edd8 <MX_53L1A2_MultiSensorRanging_Init+0xb8>)
 801ed2e:	f001 f9cb 	bl	80200c8 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801ed32:	2300      	movs	r3, #0
 801ed34:	71fb      	strb	r3, [r7, #7]
 801ed36:	e007      	b.n	801ed48 <MX_53L1A2_MultiSensorRanging_Init+0x28>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 801ed38:	79fb      	ldrb	r3, [r7, #7]
 801ed3a:	2101      	movs	r1, #1
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	f7e5 fb81 	bl	8004444 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801ed42:	79fb      	ldrb	r3, [r7, #7]
 801ed44:	3301      	adds	r3, #1
 801ed46:	71fb      	strb	r3, [r7, #7]
 801ed48:	79fb      	ldrb	r3, [r7, #7]
 801ed4a:	2b02      	cmp	r3, #2
 801ed4c:	d9f4      	bls.n	801ed38 <MX_53L1A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801ed4e:	2300      	movs	r3, #0
 801ed50:	71fb      	strb	r3, [r7, #7]
 801ed52:	e039      	b.n	801edc8 <MX_53L1A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 801ed54:	79fb      	ldrb	r3, [r7, #7]
 801ed56:	2100      	movs	r1, #0
 801ed58:	4618      	mov	r0, r3
 801ed5a:	f7e5 fb73 	bl	8004444 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L1A2_RANGING_SENSOR_Init(device);
 801ed5e:	79fb      	ldrb	r3, [r7, #7]
 801ed60:	4618      	mov	r0, r3
 801ed62:	f7e5 fa5b 	bl	800421c <VL53L1A2_RANGING_SENSOR_Init>
 801ed66:	4603      	mov	r3, r0
 801ed68:	4a1c      	ldr	r2, [pc, #112]	; (801eddc <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 801ed6a:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 801ed6c:	4b1b      	ldr	r3, [pc, #108]	; (801eddc <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	bf0c      	ite	eq
 801ed74:	2301      	moveq	r3, #1
 801ed76:	2300      	movne	r3, #0
 801ed78:	b2da      	uxtb	r2, r3
 801ed7a:	79fb      	ldrb	r3, [r7, #7]
 801ed7c:	4611      	mov	r1, r2
 801ed7e:	4a18      	ldr	r2, [pc, #96]	; (801ede0 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 801ed80:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 801ed82:	79fb      	ldrb	r3, [r7, #7]
 801ed84:	4a16      	ldr	r2, [pc, #88]	; (801ede0 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 801ed86:	5cd3      	ldrb	r3, [r2, r3]
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d019      	beq.n	801edc0 <MX_53L1A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 801ed8c:	79fb      	ldrb	r3, [r7, #7]
 801ed8e:	3301      	adds	r3, #1
 801ed90:	b29b      	uxth	r3, r3
 801ed92:	3329      	adds	r3, #41	; 0x29
 801ed94:	b29b      	uxth	r3, r3
 801ed96:	005b      	lsls	r3, r3, #1
 801ed98:	80bb      	strh	r3, [r7, #4]
    VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 801ed9a:	79fb      	ldrb	r3, [r7, #7]
 801ed9c:	88ba      	ldrh	r2, [r7, #4]
 801ed9e:	4611      	mov	r1, r2
 801eda0:	4618      	mov	r0, r3
 801eda2:	f7e5 fb27 	bl	80043f4 <VL53L1A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 801eda6:	79fb      	ldrb	r3, [r7, #7]
 801eda8:	463a      	mov	r2, r7
 801edaa:	4611      	mov	r1, r2
 801edac:	4618      	mov	r0, r3
 801edae:	f7e5 fa5b 	bl	8004268 <VL53L1A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\n", device, (unsigned long)id);
 801edb2:	79fb      	ldrb	r3, [r7, #7]
 801edb4:	683a      	ldr	r2, [r7, #0]
 801edb6:	4619      	mov	r1, r3
 801edb8:	480a      	ldr	r0, [pc, #40]	; (801ede4 <MX_53L1A2_MultiSensorRanging_Init+0xc4>)
 801edba:	f001 f8e9 	bl	801ff90 <iprintf>
 801edbe:	e000      	b.n	801edc2 <MX_53L1A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 801edc0:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801edc2:	79fb      	ldrb	r3, [r7, #7]
 801edc4:	3301      	adds	r3, #1
 801edc6:	71fb      	strb	r3, [r7, #7]
 801edc8:	79fb      	ldrb	r3, [r7, #7]
 801edca:	2b02      	cmp	r3, #2
 801edcc:	d9c2      	bls.n	801ed54 <MX_53L1A2_MultiSensorRanging_Init+0x34>
  }
}
 801edce:	bf00      	nop
 801edd0:	bf00      	nop
 801edd2:	3708      	adds	r7, #8
 801edd4:	46bd      	mov	sp, r7
 801edd6:	bd80      	pop	{r7, pc}
 801edd8:	08022d58 	.word	0x08022d58
 801eddc:	200099b4 	.word	0x200099b4
 801ede0:	200099b8 	.word	0x200099b8
 801ede4:	08022d88 	.word	0x08022d88

0801ede8 <MX_53L1A2_MultiSensorRanging_Process>:

static void MX_53L1A2_MultiSensorRanging_Process(void)
{
 801ede8:	b580      	push	{r7, lr}
 801edea:	b082      	sub	sp, #8
 801edec:	af00      	add	r7, sp, #0
  uint8_t i;

  static RANGING_SENSOR_Result_t Result;
  static RANGING_SENSOR_ProfileConfig_t Profile;

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 801edee:	4b3d      	ldr	r3, [pc, #244]	; (801eee4 <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 801edf0:	2202      	movs	r2, #2
 801edf2:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 16 ms < TimingBudget < 500 ms */
 801edf4:	4b3b      	ldr	r3, [pc, #236]	; (801eee4 <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 801edf6:	221e      	movs	r2, #30
 801edf8:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, set to ZERO for normal ranging */
 801edfa:	4b3a      	ldr	r3, [pc, #232]	; (801eee4 <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 801edfc:	2200      	movs	r2, #0
 801edfe:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 801ee00:	4b38      	ldr	r3, [pc, #224]	; (801eee4 <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 801ee02:	2200      	movs	r2, #0
 801ee04:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 801ee06:	4b37      	ldr	r3, [pc, #220]	; (801eee4 <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 801ee08:	2200      	movs	r2, #0
 801ee0a:	611a      	str	r2, [r3, #16]

  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	71fb      	strb	r3, [r7, #7]
 801ee10:	e01d      	b.n	801ee4e <MX_53L1A2_MultiSensorRanging_Process+0x66>
  {
    /* skip this device if not detected */
    if (ToF_Present[i] != 1) continue;
 801ee12:	79fb      	ldrb	r3, [r7, #7]
 801ee14:	4a34      	ldr	r2, [pc, #208]	; (801eee8 <MX_53L1A2_MultiSensorRanging_Process+0x100>)
 801ee16:	5cd3      	ldrb	r3, [r2, r3]
 801ee18:	2b01      	cmp	r3, #1
 801ee1a:	d114      	bne.n	801ee46 <MX_53L1A2_MultiSensorRanging_Process+0x5e>

    VL53L1A2_RANGING_SENSOR_ConfigProfile(i, &Profile);
 801ee1c:	79fb      	ldrb	r3, [r7, #7]
 801ee1e:	4931      	ldr	r1, [pc, #196]	; (801eee4 <MX_53L1A2_MultiSensorRanging_Process+0xfc>)
 801ee20:	4618      	mov	r0, r3
 801ee22:	f7e5 fa49 	bl	80042b8 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    status = VL53L1A2_RANGING_SENSOR_Start(i, RS_MODE_BLOCKING_CONTINUOUS);
 801ee26:	79fb      	ldrb	r3, [r7, #7]
 801ee28:	2101      	movs	r1, #1
 801ee2a:	4618      	mov	r0, r3
 801ee2c:	f7e5 fa94 	bl	8004358 <VL53L1A2_RANGING_SENSOR_Start>
 801ee30:	4603      	mov	r3, r0
 801ee32:	4a2e      	ldr	r2, [pc, #184]	; (801eeec <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801ee34:	6013      	str	r3, [r2, #0]

    if (status != BSP_ERROR_NONE)
 801ee36:	4b2d      	ldr	r3, [pc, #180]	; (801eeec <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d004      	beq.n	801ee48 <MX_53L1A2_MultiSensorRanging_Process+0x60>
    {
      printf("VL53L1A2_RANGING_SENSOR_Start failed\n");
 801ee3e:	482c      	ldr	r0, [pc, #176]	; (801eef0 <MX_53L1A2_MultiSensorRanging_Process+0x108>)
 801ee40:	f001 f942 	bl	80200c8 <puts>
      while(1);
 801ee44:	e7fe      	b.n	801ee44 <MX_53L1A2_MultiSensorRanging_Process+0x5c>
    if (ToF_Present[i] != 1) continue;
 801ee46:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801ee48:	79fb      	ldrb	r3, [r7, #7]
 801ee4a:	3301      	adds	r3, #1
 801ee4c:	71fb      	strb	r3, [r7, #7]
 801ee4e:	79fb      	ldrb	r3, [r7, #7]
 801ee50:	2b02      	cmp	r3, #2
 801ee52:	d9de      	bls.n	801ee12 <MX_53L1A2_MultiSensorRanging_Process+0x2a>
    }
  }
int k = 0 ;
 801ee54:	2300      	movs	r3, #0
 801ee56:	603b      	str	r3, [r7, #0]
  while (k < 4)
 801ee58:	e02a      	b.n	801eeb0 <MX_53L1A2_MultiSensorRanging_Process+0xc8>
  {
    /* polling mode */
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	71fb      	strb	r3, [r7, #7]
 801ee5e:	e01e      	b.n	801ee9e <MX_53L1A2_MultiSensorRanging_Process+0xb6>
    {
      status = VL53L1A2_RANGING_SENSOR_GetDistance(i, &Result);
 801ee60:	79fb      	ldrb	r3, [r7, #7]
 801ee62:	4924      	ldr	r1, [pc, #144]	; (801eef4 <MX_53L1A2_MultiSensorRanging_Process+0x10c>)
 801ee64:	4618      	mov	r0, r3
 801ee66:	f7e5 fa4f 	bl	8004308 <VL53L1A2_RANGING_SENSOR_GetDistance>
 801ee6a:	4603      	mov	r3, r0
 801ee6c:	4a1f      	ldr	r2, [pc, #124]	; (801eeec <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801ee6e:	6013      	str	r3, [r2, #0]

      if (status == BSP_ERROR_NONE)
 801ee70:	4b1e      	ldr	r3, [pc, #120]	; (801eeec <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	d10f      	bne.n	801ee98 <MX_53L1A2_MultiSensorRanging_Process+0xb0>
      {
        printf("%s\t - ", TofDevStr[i]);
 801ee78:	79fb      	ldrb	r3, [r7, #7]
 801ee7a:	4a1f      	ldr	r2, [pc, #124]	; (801eef8 <MX_53L1A2_MultiSensorRanging_Process+0x110>)
 801ee7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ee80:	4619      	mov	r1, r3
 801ee82:	481e      	ldr	r0, [pc, #120]	; (801eefc <MX_53L1A2_MultiSensorRanging_Process+0x114>)
 801ee84:	f001 f884 	bl	801ff90 <iprintf>
        print_result(i,&Result);
 801ee88:	79fb      	ldrb	r3, [r7, #7]
 801ee8a:	491a      	ldr	r1, [pc, #104]	; (801eef4 <MX_53L1A2_MultiSensorRanging_Process+0x10c>)
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	f000 f837 	bl	801ef00 <print_result>
        HAL_Delay(POLLING_PERIOD);
 801ee92:	20fa      	movs	r0, #250	; 0xfa
 801ee94:	f7f9 f912 	bl	80180bc <HAL_Delay>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 801ee98:	79fb      	ldrb	r3, [r7, #7]
 801ee9a:	3301      	adds	r3, #1
 801ee9c:	71fb      	strb	r3, [r7, #7]
 801ee9e:	79fb      	ldrb	r3, [r7, #7]
 801eea0:	2b02      	cmp	r3, #2
 801eea2:	d9dd      	bls.n	801ee60 <MX_53L1A2_MultiSensorRanging_Process+0x78>

      }
    }
    printf ("\n");
 801eea4:	200a      	movs	r0, #10
 801eea6:	f001 f88b 	bl	801ffc0 <putchar>
    k++;
 801eeaa:	683b      	ldr	r3, [r7, #0]
 801eeac:	3301      	adds	r3, #1
 801eeae:	603b      	str	r3, [r7, #0]
  while (k < 4)
 801eeb0:	683b      	ldr	r3, [r7, #0]
 801eeb2:	2b03      	cmp	r3, #3
 801eeb4:	ddd1      	ble.n	801ee5a <MX_53L1A2_MultiSensorRanging_Process+0x72>

  }
  status = VL53L1A2_RANGING_SENSOR_Stop(0);
 801eeb6:	2000      	movs	r0, #0
 801eeb8:	f7e5 fa76 	bl	80043a8 <VL53L1A2_RANGING_SENSOR_Stop>
 801eebc:	4603      	mov	r3, r0
 801eebe:	4a0b      	ldr	r2, [pc, #44]	; (801eeec <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801eec0:	6013      	str	r3, [r2, #0]
  status = VL53L1A2_RANGING_SENSOR_Stop(1);
 801eec2:	2001      	movs	r0, #1
 801eec4:	f7e5 fa70 	bl	80043a8 <VL53L1A2_RANGING_SENSOR_Stop>
 801eec8:	4603      	mov	r3, r0
 801eeca:	4a08      	ldr	r2, [pc, #32]	; (801eeec <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801eecc:	6013      	str	r3, [r2, #0]
  status = VL53L1A2_RANGING_SENSOR_Stop(2);
 801eece:	2002      	movs	r0, #2
 801eed0:	f7e5 fa6a 	bl	80043a8 <VL53L1A2_RANGING_SENSOR_Stop>
 801eed4:	4603      	mov	r3, r0
 801eed6:	4a05      	ldr	r2, [pc, #20]	; (801eeec <MX_53L1A2_MultiSensorRanging_Process+0x104>)
 801eed8:	6013      	str	r3, [r2, #0]

}
 801eeda:	bf00      	nop
 801eedc:	3708      	adds	r7, #8
 801eede:	46bd      	mov	sp, r7
 801eee0:	bd80      	pop	{r7, pc}
 801eee2:	bf00      	nop
 801eee4:	200099bc 	.word	0x200099bc
 801eee8:	200099b8 	.word	0x200099b8
 801eeec:	200099b4 	.word	0x200099b4
 801eef0:	08022da4 	.word	0x08022da4
 801eef4:	200099d0 	.word	0x200099d0
 801eef8:	2000008c 	.word	0x2000008c
 801eefc:	08022dcc 	.word	0x08022dcc

0801ef00 <print_result>:

static void print_result(uint32_t Instance, RANGING_SENSOR_Result_t *Result)
{
 801ef00:	b580      	push	{r7, lr}
 801ef02:	b084      	sub	sp, #16
 801ef04:	af00      	add	r7, sp, #0
 801ef06:	6078      	str	r0, [r7, #4]
 801ef08:	6039      	str	r1, [r7, #0]
  uint8_t i;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	73fb      	strb	r3, [r7, #15]
 801ef0e:	e054      	b.n	801efba <print_result+0xba>
  {
	  //JN
	  if((long)Result->ZoneResult[i].Distance[0] > 10 && (long)Result->ZoneResult[i].Distance[0] < 100){
 801ef10:	7bfa      	ldrb	r2, [r7, #15]
 801ef12:	6839      	ldr	r1, [r7, #0]
 801ef14:	4613      	mov	r3, r2
 801ef16:	011b      	lsls	r3, r3, #4
 801ef18:	4413      	add	r3, r2
 801ef1a:	009b      	lsls	r3, r3, #2
 801ef1c:	440b      	add	r3, r1
 801ef1e:	3308      	adds	r3, #8
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	2b0a      	cmp	r3, #10
 801ef24:	dd32      	ble.n	801ef8c <print_result+0x8c>
 801ef26:	7bfa      	ldrb	r2, [r7, #15]
 801ef28:	6839      	ldr	r1, [r7, #0]
 801ef2a:	4613      	mov	r3, r2
 801ef2c:	011b      	lsls	r3, r3, #4
 801ef2e:	4413      	add	r3, r2
 801ef30:	009b      	lsls	r3, r3, #2
 801ef32:	440b      	add	r3, r1
 801ef34:	3308      	adds	r3, #8
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	2b63      	cmp	r3, #99	; 0x63
 801ef3a:	dc27      	bgt.n	801ef8c <print_result+0x8c>
		if(Instance == 0){
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	d109      	bne.n	801ef56 <print_result+0x56>
			printf ("Bottle in left position\n");
 801ef42:	4823      	ldr	r0, [pc, #140]	; (801efd0 <print_result+0xd0>)
 801ef44:	f001 f8c0 	bl	80200c8 <puts>
			if(LeftPos != 2){
 801ef48:	4b22      	ldr	r3, [pc, #136]	; (801efd4 <print_result+0xd4>)
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	2b02      	cmp	r3, #2
 801ef4e:	d002      	beq.n	801ef56 <print_result+0x56>
				LeftPos = 1;
 801ef50:	4b20      	ldr	r3, [pc, #128]	; (801efd4 <print_result+0xd4>)
 801ef52:	2201      	movs	r2, #1
 801ef54:	601a      	str	r2, [r3, #0]
			}
		}
		if(Instance == 1){
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	2b01      	cmp	r3, #1
 801ef5a:	d109      	bne.n	801ef70 <print_result+0x70>
			printf ("Bottle in center position\n");
 801ef5c:	481e      	ldr	r0, [pc, #120]	; (801efd8 <print_result+0xd8>)
 801ef5e:	f001 f8b3 	bl	80200c8 <puts>
			if(CenterPos != 2){
 801ef62:	4b1e      	ldr	r3, [pc, #120]	; (801efdc <print_result+0xdc>)
 801ef64:	681b      	ldr	r3, [r3, #0]
 801ef66:	2b02      	cmp	r3, #2
 801ef68:	d002      	beq.n	801ef70 <print_result+0x70>
				CenterPos = 1;
 801ef6a:	4b1c      	ldr	r3, [pc, #112]	; (801efdc <print_result+0xdc>)
 801ef6c:	2201      	movs	r2, #1
 801ef6e:	601a      	str	r2, [r3, #0]
			}
		}
		if(Instance == 2){
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	2b02      	cmp	r3, #2
 801ef74:	d11d      	bne.n	801efb2 <print_result+0xb2>
			printf ("Bottle in right position\n");
 801ef76:	481a      	ldr	r0, [pc, #104]	; (801efe0 <print_result+0xe0>)
 801ef78:	f001 f8a6 	bl	80200c8 <puts>
			if(RightPos != 2){
 801ef7c:	4b19      	ldr	r3, [pc, #100]	; (801efe4 <print_result+0xe4>)
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	2b02      	cmp	r3, #2
 801ef82:	d016      	beq.n	801efb2 <print_result+0xb2>
				RightPos = 1;
 801ef84:	4b17      	ldr	r3, [pc, #92]	; (801efe4 <print_result+0xe4>)
 801ef86:	2201      	movs	r2, #1
 801ef88:	601a      	str	r2, [r3, #0]
		if(Instance == 2){
 801ef8a:	e012      	b.n	801efb2 <print_result+0xb2>
			}
		}
	 } else {
		 if(Instance == 0){ LeftPos = 0; }
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d102      	bne.n	801ef98 <print_result+0x98>
 801ef92:	4b10      	ldr	r3, [pc, #64]	; (801efd4 <print_result+0xd4>)
 801ef94:	2200      	movs	r2, #0
 801ef96:	601a      	str	r2, [r3, #0]
		 if(Instance == 1){CenterPos = 0; }
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	2b01      	cmp	r3, #1
 801ef9c:	d102      	bne.n	801efa4 <print_result+0xa4>
 801ef9e:	4b0f      	ldr	r3, [pc, #60]	; (801efdc <print_result+0xdc>)
 801efa0:	2200      	movs	r2, #0
 801efa2:	601a      	str	r2, [r3, #0]
		 if(Instance == 2){ RightPos = 0; }
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	2b02      	cmp	r3, #2
 801efa8:	d104      	bne.n	801efb4 <print_result+0xb4>
 801efaa:	4b0e      	ldr	r3, [pc, #56]	; (801efe4 <print_result+0xe4>)
 801efac:	2200      	movs	r2, #0
 801efae:	601a      	str	r2, [r3, #0]
 801efb0:	e000      	b.n	801efb4 <print_result+0xb4>
		if(Instance == 2){
 801efb2:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 801efb4:	7bfb      	ldrb	r3, [r7, #15]
 801efb6:	3301      	adds	r3, #1
 801efb8:	73fb      	strb	r3, [r7, #15]
 801efba:	7bfb      	ldrb	r3, [r7, #15]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d0a7      	beq.n	801ef10 <print_result+0x10>
	 }
  }
  printf ("\n");
 801efc0:	200a      	movs	r0, #10
 801efc2:	f000 fffd 	bl	801ffc0 <putchar>
}
 801efc6:	bf00      	nop
 801efc8:	3710      	adds	r7, #16
 801efca:	46bd      	mov	sp, r7
 801efcc:	bd80      	pop	{r7, pc}
 801efce:	bf00      	nop
 801efd0:	08022dd4 	.word	0x08022dd4
 801efd4:	200002d8 	.word	0x200002d8
 801efd8:	08022dec 	.word	0x08022dec
 801efdc:	200002e0 	.word	0x200002e0
 801efe0:	08022e08 	.word	0x08022e08
 801efe4:	200002dc 	.word	0x200002dc

0801efe8 <__errno>:
 801efe8:	4b01      	ldr	r3, [pc, #4]	; (801eff0 <__errno+0x8>)
 801efea:	6818      	ldr	r0, [r3, #0]
 801efec:	4770      	bx	lr
 801efee:	bf00      	nop
 801eff0:	20000098 	.word	0x20000098

0801eff4 <__sflush_r>:
 801eff4:	898a      	ldrh	r2, [r1, #12]
 801eff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801effa:	4605      	mov	r5, r0
 801effc:	0710      	lsls	r0, r2, #28
 801effe:	460c      	mov	r4, r1
 801f000:	d458      	bmi.n	801f0b4 <__sflush_r+0xc0>
 801f002:	684b      	ldr	r3, [r1, #4]
 801f004:	2b00      	cmp	r3, #0
 801f006:	dc05      	bgt.n	801f014 <__sflush_r+0x20>
 801f008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	dc02      	bgt.n	801f014 <__sflush_r+0x20>
 801f00e:	2000      	movs	r0, #0
 801f010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f016:	2e00      	cmp	r6, #0
 801f018:	d0f9      	beq.n	801f00e <__sflush_r+0x1a>
 801f01a:	2300      	movs	r3, #0
 801f01c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f020:	682f      	ldr	r7, [r5, #0]
 801f022:	602b      	str	r3, [r5, #0]
 801f024:	d032      	beq.n	801f08c <__sflush_r+0x98>
 801f026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f028:	89a3      	ldrh	r3, [r4, #12]
 801f02a:	075a      	lsls	r2, r3, #29
 801f02c:	d505      	bpl.n	801f03a <__sflush_r+0x46>
 801f02e:	6863      	ldr	r3, [r4, #4]
 801f030:	1ac0      	subs	r0, r0, r3
 801f032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f034:	b10b      	cbz	r3, 801f03a <__sflush_r+0x46>
 801f036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f038:	1ac0      	subs	r0, r0, r3
 801f03a:	2300      	movs	r3, #0
 801f03c:	4602      	mov	r2, r0
 801f03e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f040:	6a21      	ldr	r1, [r4, #32]
 801f042:	4628      	mov	r0, r5
 801f044:	47b0      	blx	r6
 801f046:	1c43      	adds	r3, r0, #1
 801f048:	89a3      	ldrh	r3, [r4, #12]
 801f04a:	d106      	bne.n	801f05a <__sflush_r+0x66>
 801f04c:	6829      	ldr	r1, [r5, #0]
 801f04e:	291d      	cmp	r1, #29
 801f050:	d82c      	bhi.n	801f0ac <__sflush_r+0xb8>
 801f052:	4a2a      	ldr	r2, [pc, #168]	; (801f0fc <__sflush_r+0x108>)
 801f054:	40ca      	lsrs	r2, r1
 801f056:	07d6      	lsls	r6, r2, #31
 801f058:	d528      	bpl.n	801f0ac <__sflush_r+0xb8>
 801f05a:	2200      	movs	r2, #0
 801f05c:	6062      	str	r2, [r4, #4]
 801f05e:	04d9      	lsls	r1, r3, #19
 801f060:	6922      	ldr	r2, [r4, #16]
 801f062:	6022      	str	r2, [r4, #0]
 801f064:	d504      	bpl.n	801f070 <__sflush_r+0x7c>
 801f066:	1c42      	adds	r2, r0, #1
 801f068:	d101      	bne.n	801f06e <__sflush_r+0x7a>
 801f06a:	682b      	ldr	r3, [r5, #0]
 801f06c:	b903      	cbnz	r3, 801f070 <__sflush_r+0x7c>
 801f06e:	6560      	str	r0, [r4, #84]	; 0x54
 801f070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f072:	602f      	str	r7, [r5, #0]
 801f074:	2900      	cmp	r1, #0
 801f076:	d0ca      	beq.n	801f00e <__sflush_r+0x1a>
 801f078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f07c:	4299      	cmp	r1, r3
 801f07e:	d002      	beq.n	801f086 <__sflush_r+0x92>
 801f080:	4628      	mov	r0, r5
 801f082:	f000 fa3b 	bl	801f4fc <_free_r>
 801f086:	2000      	movs	r0, #0
 801f088:	6360      	str	r0, [r4, #52]	; 0x34
 801f08a:	e7c1      	b.n	801f010 <__sflush_r+0x1c>
 801f08c:	6a21      	ldr	r1, [r4, #32]
 801f08e:	2301      	movs	r3, #1
 801f090:	4628      	mov	r0, r5
 801f092:	47b0      	blx	r6
 801f094:	1c41      	adds	r1, r0, #1
 801f096:	d1c7      	bne.n	801f028 <__sflush_r+0x34>
 801f098:	682b      	ldr	r3, [r5, #0]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d0c4      	beq.n	801f028 <__sflush_r+0x34>
 801f09e:	2b1d      	cmp	r3, #29
 801f0a0:	d001      	beq.n	801f0a6 <__sflush_r+0xb2>
 801f0a2:	2b16      	cmp	r3, #22
 801f0a4:	d101      	bne.n	801f0aa <__sflush_r+0xb6>
 801f0a6:	602f      	str	r7, [r5, #0]
 801f0a8:	e7b1      	b.n	801f00e <__sflush_r+0x1a>
 801f0aa:	89a3      	ldrh	r3, [r4, #12]
 801f0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0b0:	81a3      	strh	r3, [r4, #12]
 801f0b2:	e7ad      	b.n	801f010 <__sflush_r+0x1c>
 801f0b4:	690f      	ldr	r7, [r1, #16]
 801f0b6:	2f00      	cmp	r7, #0
 801f0b8:	d0a9      	beq.n	801f00e <__sflush_r+0x1a>
 801f0ba:	0793      	lsls	r3, r2, #30
 801f0bc:	680e      	ldr	r6, [r1, #0]
 801f0be:	bf08      	it	eq
 801f0c0:	694b      	ldreq	r3, [r1, #20]
 801f0c2:	600f      	str	r7, [r1, #0]
 801f0c4:	bf18      	it	ne
 801f0c6:	2300      	movne	r3, #0
 801f0c8:	eba6 0807 	sub.w	r8, r6, r7
 801f0cc:	608b      	str	r3, [r1, #8]
 801f0ce:	f1b8 0f00 	cmp.w	r8, #0
 801f0d2:	dd9c      	ble.n	801f00e <__sflush_r+0x1a>
 801f0d4:	6a21      	ldr	r1, [r4, #32]
 801f0d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f0d8:	4643      	mov	r3, r8
 801f0da:	463a      	mov	r2, r7
 801f0dc:	4628      	mov	r0, r5
 801f0de:	47b0      	blx	r6
 801f0e0:	2800      	cmp	r0, #0
 801f0e2:	dc06      	bgt.n	801f0f2 <__sflush_r+0xfe>
 801f0e4:	89a3      	ldrh	r3, [r4, #12]
 801f0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0ea:	81a3      	strh	r3, [r4, #12]
 801f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f0f0:	e78e      	b.n	801f010 <__sflush_r+0x1c>
 801f0f2:	4407      	add	r7, r0
 801f0f4:	eba8 0800 	sub.w	r8, r8, r0
 801f0f8:	e7e9      	b.n	801f0ce <__sflush_r+0xda>
 801f0fa:	bf00      	nop
 801f0fc:	20400001 	.word	0x20400001

0801f100 <_fflush_r>:
 801f100:	b538      	push	{r3, r4, r5, lr}
 801f102:	690b      	ldr	r3, [r1, #16]
 801f104:	4605      	mov	r5, r0
 801f106:	460c      	mov	r4, r1
 801f108:	b913      	cbnz	r3, 801f110 <_fflush_r+0x10>
 801f10a:	2500      	movs	r5, #0
 801f10c:	4628      	mov	r0, r5
 801f10e:	bd38      	pop	{r3, r4, r5, pc}
 801f110:	b118      	cbz	r0, 801f11a <_fflush_r+0x1a>
 801f112:	6983      	ldr	r3, [r0, #24]
 801f114:	b90b      	cbnz	r3, 801f11a <_fflush_r+0x1a>
 801f116:	f000 f887 	bl	801f228 <__sinit>
 801f11a:	4b14      	ldr	r3, [pc, #80]	; (801f16c <_fflush_r+0x6c>)
 801f11c:	429c      	cmp	r4, r3
 801f11e:	d11b      	bne.n	801f158 <_fflush_r+0x58>
 801f120:	686c      	ldr	r4, [r5, #4]
 801f122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f126:	2b00      	cmp	r3, #0
 801f128:	d0ef      	beq.n	801f10a <_fflush_r+0xa>
 801f12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f12c:	07d0      	lsls	r0, r2, #31
 801f12e:	d404      	bmi.n	801f13a <_fflush_r+0x3a>
 801f130:	0599      	lsls	r1, r3, #22
 801f132:	d402      	bmi.n	801f13a <_fflush_r+0x3a>
 801f134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f136:	f000 f93a 	bl	801f3ae <__retarget_lock_acquire_recursive>
 801f13a:	4628      	mov	r0, r5
 801f13c:	4621      	mov	r1, r4
 801f13e:	f7ff ff59 	bl	801eff4 <__sflush_r>
 801f142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f144:	07da      	lsls	r2, r3, #31
 801f146:	4605      	mov	r5, r0
 801f148:	d4e0      	bmi.n	801f10c <_fflush_r+0xc>
 801f14a:	89a3      	ldrh	r3, [r4, #12]
 801f14c:	059b      	lsls	r3, r3, #22
 801f14e:	d4dd      	bmi.n	801f10c <_fflush_r+0xc>
 801f150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f152:	f000 f92d 	bl	801f3b0 <__retarget_lock_release_recursive>
 801f156:	e7d9      	b.n	801f10c <_fflush_r+0xc>
 801f158:	4b05      	ldr	r3, [pc, #20]	; (801f170 <_fflush_r+0x70>)
 801f15a:	429c      	cmp	r4, r3
 801f15c:	d101      	bne.n	801f162 <_fflush_r+0x62>
 801f15e:	68ac      	ldr	r4, [r5, #8]
 801f160:	e7df      	b.n	801f122 <_fflush_r+0x22>
 801f162:	4b04      	ldr	r3, [pc, #16]	; (801f174 <_fflush_r+0x74>)
 801f164:	429c      	cmp	r4, r3
 801f166:	bf08      	it	eq
 801f168:	68ec      	ldreq	r4, [r5, #12]
 801f16a:	e7da      	b.n	801f122 <_fflush_r+0x22>
 801f16c:	08023010 	.word	0x08023010
 801f170:	08023030 	.word	0x08023030
 801f174:	08022ff0 	.word	0x08022ff0

0801f178 <std>:
 801f178:	2300      	movs	r3, #0
 801f17a:	b510      	push	{r4, lr}
 801f17c:	4604      	mov	r4, r0
 801f17e:	e9c0 3300 	strd	r3, r3, [r0]
 801f182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f186:	6083      	str	r3, [r0, #8]
 801f188:	8181      	strh	r1, [r0, #12]
 801f18a:	6643      	str	r3, [r0, #100]	; 0x64
 801f18c:	81c2      	strh	r2, [r0, #14]
 801f18e:	6183      	str	r3, [r0, #24]
 801f190:	4619      	mov	r1, r3
 801f192:	2208      	movs	r2, #8
 801f194:	305c      	adds	r0, #92	; 0x5c
 801f196:	f000 f9a9 	bl	801f4ec <memset>
 801f19a:	4b05      	ldr	r3, [pc, #20]	; (801f1b0 <std+0x38>)
 801f19c:	6263      	str	r3, [r4, #36]	; 0x24
 801f19e:	4b05      	ldr	r3, [pc, #20]	; (801f1b4 <std+0x3c>)
 801f1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 801f1a2:	4b05      	ldr	r3, [pc, #20]	; (801f1b8 <std+0x40>)
 801f1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f1a6:	4b05      	ldr	r3, [pc, #20]	; (801f1bc <std+0x44>)
 801f1a8:	6224      	str	r4, [r4, #32]
 801f1aa:	6323      	str	r3, [r4, #48]	; 0x30
 801f1ac:	bd10      	pop	{r4, pc}
 801f1ae:	bf00      	nop
 801f1b0:	08020139 	.word	0x08020139
 801f1b4:	0802015b 	.word	0x0802015b
 801f1b8:	08020193 	.word	0x08020193
 801f1bc:	080201b7 	.word	0x080201b7

0801f1c0 <_cleanup_r>:
 801f1c0:	4901      	ldr	r1, [pc, #4]	; (801f1c8 <_cleanup_r+0x8>)
 801f1c2:	f000 b8af 	b.w	801f324 <_fwalk_reent>
 801f1c6:	bf00      	nop
 801f1c8:	0801f101 	.word	0x0801f101

0801f1cc <__sfmoreglue>:
 801f1cc:	b570      	push	{r4, r5, r6, lr}
 801f1ce:	2268      	movs	r2, #104	; 0x68
 801f1d0:	1e4d      	subs	r5, r1, #1
 801f1d2:	4355      	muls	r5, r2
 801f1d4:	460e      	mov	r6, r1
 801f1d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f1da:	f000 f9fb 	bl	801f5d4 <_malloc_r>
 801f1de:	4604      	mov	r4, r0
 801f1e0:	b140      	cbz	r0, 801f1f4 <__sfmoreglue+0x28>
 801f1e2:	2100      	movs	r1, #0
 801f1e4:	e9c0 1600 	strd	r1, r6, [r0]
 801f1e8:	300c      	adds	r0, #12
 801f1ea:	60a0      	str	r0, [r4, #8]
 801f1ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f1f0:	f000 f97c 	bl	801f4ec <memset>
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	bd70      	pop	{r4, r5, r6, pc}

0801f1f8 <__sfp_lock_acquire>:
 801f1f8:	4801      	ldr	r0, [pc, #4]	; (801f200 <__sfp_lock_acquire+0x8>)
 801f1fa:	f000 b8d8 	b.w	801f3ae <__retarget_lock_acquire_recursive>
 801f1fe:	bf00      	nop
 801f200:	20009a19 	.word	0x20009a19

0801f204 <__sfp_lock_release>:
 801f204:	4801      	ldr	r0, [pc, #4]	; (801f20c <__sfp_lock_release+0x8>)
 801f206:	f000 b8d3 	b.w	801f3b0 <__retarget_lock_release_recursive>
 801f20a:	bf00      	nop
 801f20c:	20009a19 	.word	0x20009a19

0801f210 <__sinit_lock_acquire>:
 801f210:	4801      	ldr	r0, [pc, #4]	; (801f218 <__sinit_lock_acquire+0x8>)
 801f212:	f000 b8cc 	b.w	801f3ae <__retarget_lock_acquire_recursive>
 801f216:	bf00      	nop
 801f218:	20009a1a 	.word	0x20009a1a

0801f21c <__sinit_lock_release>:
 801f21c:	4801      	ldr	r0, [pc, #4]	; (801f224 <__sinit_lock_release+0x8>)
 801f21e:	f000 b8c7 	b.w	801f3b0 <__retarget_lock_release_recursive>
 801f222:	bf00      	nop
 801f224:	20009a1a 	.word	0x20009a1a

0801f228 <__sinit>:
 801f228:	b510      	push	{r4, lr}
 801f22a:	4604      	mov	r4, r0
 801f22c:	f7ff fff0 	bl	801f210 <__sinit_lock_acquire>
 801f230:	69a3      	ldr	r3, [r4, #24]
 801f232:	b11b      	cbz	r3, 801f23c <__sinit+0x14>
 801f234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f238:	f7ff bff0 	b.w	801f21c <__sinit_lock_release>
 801f23c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f240:	6523      	str	r3, [r4, #80]	; 0x50
 801f242:	4b13      	ldr	r3, [pc, #76]	; (801f290 <__sinit+0x68>)
 801f244:	4a13      	ldr	r2, [pc, #76]	; (801f294 <__sinit+0x6c>)
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	62a2      	str	r2, [r4, #40]	; 0x28
 801f24a:	42a3      	cmp	r3, r4
 801f24c:	bf04      	itt	eq
 801f24e:	2301      	moveq	r3, #1
 801f250:	61a3      	streq	r3, [r4, #24]
 801f252:	4620      	mov	r0, r4
 801f254:	f000 f820 	bl	801f298 <__sfp>
 801f258:	6060      	str	r0, [r4, #4]
 801f25a:	4620      	mov	r0, r4
 801f25c:	f000 f81c 	bl	801f298 <__sfp>
 801f260:	60a0      	str	r0, [r4, #8]
 801f262:	4620      	mov	r0, r4
 801f264:	f000 f818 	bl	801f298 <__sfp>
 801f268:	2200      	movs	r2, #0
 801f26a:	60e0      	str	r0, [r4, #12]
 801f26c:	2104      	movs	r1, #4
 801f26e:	6860      	ldr	r0, [r4, #4]
 801f270:	f7ff ff82 	bl	801f178 <std>
 801f274:	68a0      	ldr	r0, [r4, #8]
 801f276:	2201      	movs	r2, #1
 801f278:	2109      	movs	r1, #9
 801f27a:	f7ff ff7d 	bl	801f178 <std>
 801f27e:	68e0      	ldr	r0, [r4, #12]
 801f280:	2202      	movs	r2, #2
 801f282:	2112      	movs	r1, #18
 801f284:	f7ff ff78 	bl	801f178 <std>
 801f288:	2301      	movs	r3, #1
 801f28a:	61a3      	str	r3, [r4, #24]
 801f28c:	e7d2      	b.n	801f234 <__sinit+0xc>
 801f28e:	bf00      	nop
 801f290:	08023050 	.word	0x08023050
 801f294:	0801f1c1 	.word	0x0801f1c1

0801f298 <__sfp>:
 801f298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f29a:	4607      	mov	r7, r0
 801f29c:	f7ff ffac 	bl	801f1f8 <__sfp_lock_acquire>
 801f2a0:	4b1e      	ldr	r3, [pc, #120]	; (801f31c <__sfp+0x84>)
 801f2a2:	681e      	ldr	r6, [r3, #0]
 801f2a4:	69b3      	ldr	r3, [r6, #24]
 801f2a6:	b913      	cbnz	r3, 801f2ae <__sfp+0x16>
 801f2a8:	4630      	mov	r0, r6
 801f2aa:	f7ff ffbd 	bl	801f228 <__sinit>
 801f2ae:	3648      	adds	r6, #72	; 0x48
 801f2b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f2b4:	3b01      	subs	r3, #1
 801f2b6:	d503      	bpl.n	801f2c0 <__sfp+0x28>
 801f2b8:	6833      	ldr	r3, [r6, #0]
 801f2ba:	b30b      	cbz	r3, 801f300 <__sfp+0x68>
 801f2bc:	6836      	ldr	r6, [r6, #0]
 801f2be:	e7f7      	b.n	801f2b0 <__sfp+0x18>
 801f2c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f2c4:	b9d5      	cbnz	r5, 801f2fc <__sfp+0x64>
 801f2c6:	4b16      	ldr	r3, [pc, #88]	; (801f320 <__sfp+0x88>)
 801f2c8:	60e3      	str	r3, [r4, #12]
 801f2ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f2ce:	6665      	str	r5, [r4, #100]	; 0x64
 801f2d0:	f000 f86c 	bl	801f3ac <__retarget_lock_init_recursive>
 801f2d4:	f7ff ff96 	bl	801f204 <__sfp_lock_release>
 801f2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f2e0:	6025      	str	r5, [r4, #0]
 801f2e2:	61a5      	str	r5, [r4, #24]
 801f2e4:	2208      	movs	r2, #8
 801f2e6:	4629      	mov	r1, r5
 801f2e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f2ec:	f000 f8fe 	bl	801f4ec <memset>
 801f2f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f2f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f2fc:	3468      	adds	r4, #104	; 0x68
 801f2fe:	e7d9      	b.n	801f2b4 <__sfp+0x1c>
 801f300:	2104      	movs	r1, #4
 801f302:	4638      	mov	r0, r7
 801f304:	f7ff ff62 	bl	801f1cc <__sfmoreglue>
 801f308:	4604      	mov	r4, r0
 801f30a:	6030      	str	r0, [r6, #0]
 801f30c:	2800      	cmp	r0, #0
 801f30e:	d1d5      	bne.n	801f2bc <__sfp+0x24>
 801f310:	f7ff ff78 	bl	801f204 <__sfp_lock_release>
 801f314:	230c      	movs	r3, #12
 801f316:	603b      	str	r3, [r7, #0]
 801f318:	e7ee      	b.n	801f2f8 <__sfp+0x60>
 801f31a:	bf00      	nop
 801f31c:	08023050 	.word	0x08023050
 801f320:	ffff0001 	.word	0xffff0001

0801f324 <_fwalk_reent>:
 801f324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f328:	4606      	mov	r6, r0
 801f32a:	4688      	mov	r8, r1
 801f32c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f330:	2700      	movs	r7, #0
 801f332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f336:	f1b9 0901 	subs.w	r9, r9, #1
 801f33a:	d505      	bpl.n	801f348 <_fwalk_reent+0x24>
 801f33c:	6824      	ldr	r4, [r4, #0]
 801f33e:	2c00      	cmp	r4, #0
 801f340:	d1f7      	bne.n	801f332 <_fwalk_reent+0xe>
 801f342:	4638      	mov	r0, r7
 801f344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f348:	89ab      	ldrh	r3, [r5, #12]
 801f34a:	2b01      	cmp	r3, #1
 801f34c:	d907      	bls.n	801f35e <_fwalk_reent+0x3a>
 801f34e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f352:	3301      	adds	r3, #1
 801f354:	d003      	beq.n	801f35e <_fwalk_reent+0x3a>
 801f356:	4629      	mov	r1, r5
 801f358:	4630      	mov	r0, r6
 801f35a:	47c0      	blx	r8
 801f35c:	4307      	orrs	r7, r0
 801f35e:	3568      	adds	r5, #104	; 0x68
 801f360:	e7e9      	b.n	801f336 <_fwalk_reent+0x12>
	...

0801f364 <__libc_init_array>:
 801f364:	b570      	push	{r4, r5, r6, lr}
 801f366:	4d0d      	ldr	r5, [pc, #52]	; (801f39c <__libc_init_array+0x38>)
 801f368:	4c0d      	ldr	r4, [pc, #52]	; (801f3a0 <__libc_init_array+0x3c>)
 801f36a:	1b64      	subs	r4, r4, r5
 801f36c:	10a4      	asrs	r4, r4, #2
 801f36e:	2600      	movs	r6, #0
 801f370:	42a6      	cmp	r6, r4
 801f372:	d109      	bne.n	801f388 <__libc_init_array+0x24>
 801f374:	4d0b      	ldr	r5, [pc, #44]	; (801f3a4 <__libc_init_array+0x40>)
 801f376:	4c0c      	ldr	r4, [pc, #48]	; (801f3a8 <__libc_init_array+0x44>)
 801f378:	f002 fe9c 	bl	80220b4 <_init>
 801f37c:	1b64      	subs	r4, r4, r5
 801f37e:	10a4      	asrs	r4, r4, #2
 801f380:	2600      	movs	r6, #0
 801f382:	42a6      	cmp	r6, r4
 801f384:	d105      	bne.n	801f392 <__libc_init_array+0x2e>
 801f386:	bd70      	pop	{r4, r5, r6, pc}
 801f388:	f855 3b04 	ldr.w	r3, [r5], #4
 801f38c:	4798      	blx	r3
 801f38e:	3601      	adds	r6, #1
 801f390:	e7ee      	b.n	801f370 <__libc_init_array+0xc>
 801f392:	f855 3b04 	ldr.w	r3, [r5], #4
 801f396:	4798      	blx	r3
 801f398:	3601      	adds	r6, #1
 801f39a:	e7f2      	b.n	801f382 <__libc_init_array+0x1e>
 801f39c:	080232d4 	.word	0x080232d4
 801f3a0:	080232d4 	.word	0x080232d4
 801f3a4:	080232d4 	.word	0x080232d4
 801f3a8:	080232d8 	.word	0x080232d8

0801f3ac <__retarget_lock_init_recursive>:
 801f3ac:	4770      	bx	lr

0801f3ae <__retarget_lock_acquire_recursive>:
 801f3ae:	4770      	bx	lr

0801f3b0 <__retarget_lock_release_recursive>:
 801f3b0:	4770      	bx	lr

0801f3b2 <__swhatbuf_r>:
 801f3b2:	b570      	push	{r4, r5, r6, lr}
 801f3b4:	460e      	mov	r6, r1
 801f3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f3ba:	2900      	cmp	r1, #0
 801f3bc:	b096      	sub	sp, #88	; 0x58
 801f3be:	4614      	mov	r4, r2
 801f3c0:	461d      	mov	r5, r3
 801f3c2:	da08      	bge.n	801f3d6 <__swhatbuf_r+0x24>
 801f3c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f3c8:	2200      	movs	r2, #0
 801f3ca:	602a      	str	r2, [r5, #0]
 801f3cc:	061a      	lsls	r2, r3, #24
 801f3ce:	d410      	bmi.n	801f3f2 <__swhatbuf_r+0x40>
 801f3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f3d4:	e00e      	b.n	801f3f4 <__swhatbuf_r+0x42>
 801f3d6:	466a      	mov	r2, sp
 801f3d8:	f001 feac 	bl	8021134 <_fstat_r>
 801f3dc:	2800      	cmp	r0, #0
 801f3de:	dbf1      	blt.n	801f3c4 <__swhatbuf_r+0x12>
 801f3e0:	9a01      	ldr	r2, [sp, #4]
 801f3e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f3e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f3ea:	425a      	negs	r2, r3
 801f3ec:	415a      	adcs	r2, r3
 801f3ee:	602a      	str	r2, [r5, #0]
 801f3f0:	e7ee      	b.n	801f3d0 <__swhatbuf_r+0x1e>
 801f3f2:	2340      	movs	r3, #64	; 0x40
 801f3f4:	2000      	movs	r0, #0
 801f3f6:	6023      	str	r3, [r4, #0]
 801f3f8:	b016      	add	sp, #88	; 0x58
 801f3fa:	bd70      	pop	{r4, r5, r6, pc}

0801f3fc <__smakebuf_r>:
 801f3fc:	898b      	ldrh	r3, [r1, #12]
 801f3fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f400:	079d      	lsls	r5, r3, #30
 801f402:	4606      	mov	r6, r0
 801f404:	460c      	mov	r4, r1
 801f406:	d507      	bpl.n	801f418 <__smakebuf_r+0x1c>
 801f408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f40c:	6023      	str	r3, [r4, #0]
 801f40e:	6123      	str	r3, [r4, #16]
 801f410:	2301      	movs	r3, #1
 801f412:	6163      	str	r3, [r4, #20]
 801f414:	b002      	add	sp, #8
 801f416:	bd70      	pop	{r4, r5, r6, pc}
 801f418:	ab01      	add	r3, sp, #4
 801f41a:	466a      	mov	r2, sp
 801f41c:	f7ff ffc9 	bl	801f3b2 <__swhatbuf_r>
 801f420:	9900      	ldr	r1, [sp, #0]
 801f422:	4605      	mov	r5, r0
 801f424:	4630      	mov	r0, r6
 801f426:	f000 f8d5 	bl	801f5d4 <_malloc_r>
 801f42a:	b948      	cbnz	r0, 801f440 <__smakebuf_r+0x44>
 801f42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f430:	059a      	lsls	r2, r3, #22
 801f432:	d4ef      	bmi.n	801f414 <__smakebuf_r+0x18>
 801f434:	f023 0303 	bic.w	r3, r3, #3
 801f438:	f043 0302 	orr.w	r3, r3, #2
 801f43c:	81a3      	strh	r3, [r4, #12]
 801f43e:	e7e3      	b.n	801f408 <__smakebuf_r+0xc>
 801f440:	4b0d      	ldr	r3, [pc, #52]	; (801f478 <__smakebuf_r+0x7c>)
 801f442:	62b3      	str	r3, [r6, #40]	; 0x28
 801f444:	89a3      	ldrh	r3, [r4, #12]
 801f446:	6020      	str	r0, [r4, #0]
 801f448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f44c:	81a3      	strh	r3, [r4, #12]
 801f44e:	9b00      	ldr	r3, [sp, #0]
 801f450:	6163      	str	r3, [r4, #20]
 801f452:	9b01      	ldr	r3, [sp, #4]
 801f454:	6120      	str	r0, [r4, #16]
 801f456:	b15b      	cbz	r3, 801f470 <__smakebuf_r+0x74>
 801f458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f45c:	4630      	mov	r0, r6
 801f45e:	f001 fe7b 	bl	8021158 <_isatty_r>
 801f462:	b128      	cbz	r0, 801f470 <__smakebuf_r+0x74>
 801f464:	89a3      	ldrh	r3, [r4, #12]
 801f466:	f023 0303 	bic.w	r3, r3, #3
 801f46a:	f043 0301 	orr.w	r3, r3, #1
 801f46e:	81a3      	strh	r3, [r4, #12]
 801f470:	89a0      	ldrh	r0, [r4, #12]
 801f472:	4305      	orrs	r5, r0
 801f474:	81a5      	strh	r5, [r4, #12]
 801f476:	e7cd      	b.n	801f414 <__smakebuf_r+0x18>
 801f478:	0801f1c1 	.word	0x0801f1c1

0801f47c <malloc>:
 801f47c:	4b02      	ldr	r3, [pc, #8]	; (801f488 <malloc+0xc>)
 801f47e:	4601      	mov	r1, r0
 801f480:	6818      	ldr	r0, [r3, #0]
 801f482:	f000 b8a7 	b.w	801f5d4 <_malloc_r>
 801f486:	bf00      	nop
 801f488:	20000098 	.word	0x20000098

0801f48c <free>:
 801f48c:	4b02      	ldr	r3, [pc, #8]	; (801f498 <free+0xc>)
 801f48e:	4601      	mov	r1, r0
 801f490:	6818      	ldr	r0, [r3, #0]
 801f492:	f000 b833 	b.w	801f4fc <_free_r>
 801f496:	bf00      	nop
 801f498:	20000098 	.word	0x20000098

0801f49c <memcpy>:
 801f49c:	440a      	add	r2, r1
 801f49e:	4291      	cmp	r1, r2
 801f4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 801f4a4:	d100      	bne.n	801f4a8 <memcpy+0xc>
 801f4a6:	4770      	bx	lr
 801f4a8:	b510      	push	{r4, lr}
 801f4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f4b2:	4291      	cmp	r1, r2
 801f4b4:	d1f9      	bne.n	801f4aa <memcpy+0xe>
 801f4b6:	bd10      	pop	{r4, pc}

0801f4b8 <memmove>:
 801f4b8:	4288      	cmp	r0, r1
 801f4ba:	b510      	push	{r4, lr}
 801f4bc:	eb01 0402 	add.w	r4, r1, r2
 801f4c0:	d902      	bls.n	801f4c8 <memmove+0x10>
 801f4c2:	4284      	cmp	r4, r0
 801f4c4:	4623      	mov	r3, r4
 801f4c6:	d807      	bhi.n	801f4d8 <memmove+0x20>
 801f4c8:	1e43      	subs	r3, r0, #1
 801f4ca:	42a1      	cmp	r1, r4
 801f4cc:	d008      	beq.n	801f4e0 <memmove+0x28>
 801f4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f4d6:	e7f8      	b.n	801f4ca <memmove+0x12>
 801f4d8:	4402      	add	r2, r0
 801f4da:	4601      	mov	r1, r0
 801f4dc:	428a      	cmp	r2, r1
 801f4de:	d100      	bne.n	801f4e2 <memmove+0x2a>
 801f4e0:	bd10      	pop	{r4, pc}
 801f4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f4ea:	e7f7      	b.n	801f4dc <memmove+0x24>

0801f4ec <memset>:
 801f4ec:	4402      	add	r2, r0
 801f4ee:	4603      	mov	r3, r0
 801f4f0:	4293      	cmp	r3, r2
 801f4f2:	d100      	bne.n	801f4f6 <memset+0xa>
 801f4f4:	4770      	bx	lr
 801f4f6:	f803 1b01 	strb.w	r1, [r3], #1
 801f4fa:	e7f9      	b.n	801f4f0 <memset+0x4>

0801f4fc <_free_r>:
 801f4fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f4fe:	2900      	cmp	r1, #0
 801f500:	d044      	beq.n	801f58c <_free_r+0x90>
 801f502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f506:	9001      	str	r0, [sp, #4]
 801f508:	2b00      	cmp	r3, #0
 801f50a:	f1a1 0404 	sub.w	r4, r1, #4
 801f50e:	bfb8      	it	lt
 801f510:	18e4      	addlt	r4, r4, r3
 801f512:	f001 fe59 	bl	80211c8 <__malloc_lock>
 801f516:	4a1e      	ldr	r2, [pc, #120]	; (801f590 <_free_r+0x94>)
 801f518:	9801      	ldr	r0, [sp, #4]
 801f51a:	6813      	ldr	r3, [r2, #0]
 801f51c:	b933      	cbnz	r3, 801f52c <_free_r+0x30>
 801f51e:	6063      	str	r3, [r4, #4]
 801f520:	6014      	str	r4, [r2, #0]
 801f522:	b003      	add	sp, #12
 801f524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f528:	f001 be54 	b.w	80211d4 <__malloc_unlock>
 801f52c:	42a3      	cmp	r3, r4
 801f52e:	d908      	bls.n	801f542 <_free_r+0x46>
 801f530:	6825      	ldr	r5, [r4, #0]
 801f532:	1961      	adds	r1, r4, r5
 801f534:	428b      	cmp	r3, r1
 801f536:	bf01      	itttt	eq
 801f538:	6819      	ldreq	r1, [r3, #0]
 801f53a:	685b      	ldreq	r3, [r3, #4]
 801f53c:	1949      	addeq	r1, r1, r5
 801f53e:	6021      	streq	r1, [r4, #0]
 801f540:	e7ed      	b.n	801f51e <_free_r+0x22>
 801f542:	461a      	mov	r2, r3
 801f544:	685b      	ldr	r3, [r3, #4]
 801f546:	b10b      	cbz	r3, 801f54c <_free_r+0x50>
 801f548:	42a3      	cmp	r3, r4
 801f54a:	d9fa      	bls.n	801f542 <_free_r+0x46>
 801f54c:	6811      	ldr	r1, [r2, #0]
 801f54e:	1855      	adds	r5, r2, r1
 801f550:	42a5      	cmp	r5, r4
 801f552:	d10b      	bne.n	801f56c <_free_r+0x70>
 801f554:	6824      	ldr	r4, [r4, #0]
 801f556:	4421      	add	r1, r4
 801f558:	1854      	adds	r4, r2, r1
 801f55a:	42a3      	cmp	r3, r4
 801f55c:	6011      	str	r1, [r2, #0]
 801f55e:	d1e0      	bne.n	801f522 <_free_r+0x26>
 801f560:	681c      	ldr	r4, [r3, #0]
 801f562:	685b      	ldr	r3, [r3, #4]
 801f564:	6053      	str	r3, [r2, #4]
 801f566:	4421      	add	r1, r4
 801f568:	6011      	str	r1, [r2, #0]
 801f56a:	e7da      	b.n	801f522 <_free_r+0x26>
 801f56c:	d902      	bls.n	801f574 <_free_r+0x78>
 801f56e:	230c      	movs	r3, #12
 801f570:	6003      	str	r3, [r0, #0]
 801f572:	e7d6      	b.n	801f522 <_free_r+0x26>
 801f574:	6825      	ldr	r5, [r4, #0]
 801f576:	1961      	adds	r1, r4, r5
 801f578:	428b      	cmp	r3, r1
 801f57a:	bf04      	itt	eq
 801f57c:	6819      	ldreq	r1, [r3, #0]
 801f57e:	685b      	ldreq	r3, [r3, #4]
 801f580:	6063      	str	r3, [r4, #4]
 801f582:	bf04      	itt	eq
 801f584:	1949      	addeq	r1, r1, r5
 801f586:	6021      	streq	r1, [r4, #0]
 801f588:	6054      	str	r4, [r2, #4]
 801f58a:	e7ca      	b.n	801f522 <_free_r+0x26>
 801f58c:	b003      	add	sp, #12
 801f58e:	bd30      	pop	{r4, r5, pc}
 801f590:	20009a1c 	.word	0x20009a1c

0801f594 <sbrk_aligned>:
 801f594:	b570      	push	{r4, r5, r6, lr}
 801f596:	4e0e      	ldr	r6, [pc, #56]	; (801f5d0 <sbrk_aligned+0x3c>)
 801f598:	460c      	mov	r4, r1
 801f59a:	6831      	ldr	r1, [r6, #0]
 801f59c:	4605      	mov	r5, r0
 801f59e:	b911      	cbnz	r1, 801f5a6 <sbrk_aligned+0x12>
 801f5a0:	f000 fd9a 	bl	80200d8 <_sbrk_r>
 801f5a4:	6030      	str	r0, [r6, #0]
 801f5a6:	4621      	mov	r1, r4
 801f5a8:	4628      	mov	r0, r5
 801f5aa:	f000 fd95 	bl	80200d8 <_sbrk_r>
 801f5ae:	1c43      	adds	r3, r0, #1
 801f5b0:	d00a      	beq.n	801f5c8 <sbrk_aligned+0x34>
 801f5b2:	1cc4      	adds	r4, r0, #3
 801f5b4:	f024 0403 	bic.w	r4, r4, #3
 801f5b8:	42a0      	cmp	r0, r4
 801f5ba:	d007      	beq.n	801f5cc <sbrk_aligned+0x38>
 801f5bc:	1a21      	subs	r1, r4, r0
 801f5be:	4628      	mov	r0, r5
 801f5c0:	f000 fd8a 	bl	80200d8 <_sbrk_r>
 801f5c4:	3001      	adds	r0, #1
 801f5c6:	d101      	bne.n	801f5cc <sbrk_aligned+0x38>
 801f5c8:	f04f 34ff 	mov.w	r4, #4294967295
 801f5cc:	4620      	mov	r0, r4
 801f5ce:	bd70      	pop	{r4, r5, r6, pc}
 801f5d0:	20009a20 	.word	0x20009a20

0801f5d4 <_malloc_r>:
 801f5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5d8:	1ccd      	adds	r5, r1, #3
 801f5da:	f025 0503 	bic.w	r5, r5, #3
 801f5de:	3508      	adds	r5, #8
 801f5e0:	2d0c      	cmp	r5, #12
 801f5e2:	bf38      	it	cc
 801f5e4:	250c      	movcc	r5, #12
 801f5e6:	2d00      	cmp	r5, #0
 801f5e8:	4607      	mov	r7, r0
 801f5ea:	db01      	blt.n	801f5f0 <_malloc_r+0x1c>
 801f5ec:	42a9      	cmp	r1, r5
 801f5ee:	d905      	bls.n	801f5fc <_malloc_r+0x28>
 801f5f0:	230c      	movs	r3, #12
 801f5f2:	603b      	str	r3, [r7, #0]
 801f5f4:	2600      	movs	r6, #0
 801f5f6:	4630      	mov	r0, r6
 801f5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5fc:	4e2e      	ldr	r6, [pc, #184]	; (801f6b8 <_malloc_r+0xe4>)
 801f5fe:	f001 fde3 	bl	80211c8 <__malloc_lock>
 801f602:	6833      	ldr	r3, [r6, #0]
 801f604:	461c      	mov	r4, r3
 801f606:	bb34      	cbnz	r4, 801f656 <_malloc_r+0x82>
 801f608:	4629      	mov	r1, r5
 801f60a:	4638      	mov	r0, r7
 801f60c:	f7ff ffc2 	bl	801f594 <sbrk_aligned>
 801f610:	1c43      	adds	r3, r0, #1
 801f612:	4604      	mov	r4, r0
 801f614:	d14d      	bne.n	801f6b2 <_malloc_r+0xde>
 801f616:	6834      	ldr	r4, [r6, #0]
 801f618:	4626      	mov	r6, r4
 801f61a:	2e00      	cmp	r6, #0
 801f61c:	d140      	bne.n	801f6a0 <_malloc_r+0xcc>
 801f61e:	6823      	ldr	r3, [r4, #0]
 801f620:	4631      	mov	r1, r6
 801f622:	4638      	mov	r0, r7
 801f624:	eb04 0803 	add.w	r8, r4, r3
 801f628:	f000 fd56 	bl	80200d8 <_sbrk_r>
 801f62c:	4580      	cmp	r8, r0
 801f62e:	d13a      	bne.n	801f6a6 <_malloc_r+0xd2>
 801f630:	6821      	ldr	r1, [r4, #0]
 801f632:	3503      	adds	r5, #3
 801f634:	1a6d      	subs	r5, r5, r1
 801f636:	f025 0503 	bic.w	r5, r5, #3
 801f63a:	3508      	adds	r5, #8
 801f63c:	2d0c      	cmp	r5, #12
 801f63e:	bf38      	it	cc
 801f640:	250c      	movcc	r5, #12
 801f642:	4629      	mov	r1, r5
 801f644:	4638      	mov	r0, r7
 801f646:	f7ff ffa5 	bl	801f594 <sbrk_aligned>
 801f64a:	3001      	adds	r0, #1
 801f64c:	d02b      	beq.n	801f6a6 <_malloc_r+0xd2>
 801f64e:	6823      	ldr	r3, [r4, #0]
 801f650:	442b      	add	r3, r5
 801f652:	6023      	str	r3, [r4, #0]
 801f654:	e00e      	b.n	801f674 <_malloc_r+0xa0>
 801f656:	6822      	ldr	r2, [r4, #0]
 801f658:	1b52      	subs	r2, r2, r5
 801f65a:	d41e      	bmi.n	801f69a <_malloc_r+0xc6>
 801f65c:	2a0b      	cmp	r2, #11
 801f65e:	d916      	bls.n	801f68e <_malloc_r+0xba>
 801f660:	1961      	adds	r1, r4, r5
 801f662:	42a3      	cmp	r3, r4
 801f664:	6025      	str	r5, [r4, #0]
 801f666:	bf18      	it	ne
 801f668:	6059      	strne	r1, [r3, #4]
 801f66a:	6863      	ldr	r3, [r4, #4]
 801f66c:	bf08      	it	eq
 801f66e:	6031      	streq	r1, [r6, #0]
 801f670:	5162      	str	r2, [r4, r5]
 801f672:	604b      	str	r3, [r1, #4]
 801f674:	4638      	mov	r0, r7
 801f676:	f104 060b 	add.w	r6, r4, #11
 801f67a:	f001 fdab 	bl	80211d4 <__malloc_unlock>
 801f67e:	f026 0607 	bic.w	r6, r6, #7
 801f682:	1d23      	adds	r3, r4, #4
 801f684:	1af2      	subs	r2, r6, r3
 801f686:	d0b6      	beq.n	801f5f6 <_malloc_r+0x22>
 801f688:	1b9b      	subs	r3, r3, r6
 801f68a:	50a3      	str	r3, [r4, r2]
 801f68c:	e7b3      	b.n	801f5f6 <_malloc_r+0x22>
 801f68e:	6862      	ldr	r2, [r4, #4]
 801f690:	42a3      	cmp	r3, r4
 801f692:	bf0c      	ite	eq
 801f694:	6032      	streq	r2, [r6, #0]
 801f696:	605a      	strne	r2, [r3, #4]
 801f698:	e7ec      	b.n	801f674 <_malloc_r+0xa0>
 801f69a:	4623      	mov	r3, r4
 801f69c:	6864      	ldr	r4, [r4, #4]
 801f69e:	e7b2      	b.n	801f606 <_malloc_r+0x32>
 801f6a0:	4634      	mov	r4, r6
 801f6a2:	6876      	ldr	r6, [r6, #4]
 801f6a4:	e7b9      	b.n	801f61a <_malloc_r+0x46>
 801f6a6:	230c      	movs	r3, #12
 801f6a8:	603b      	str	r3, [r7, #0]
 801f6aa:	4638      	mov	r0, r7
 801f6ac:	f001 fd92 	bl	80211d4 <__malloc_unlock>
 801f6b0:	e7a1      	b.n	801f5f6 <_malloc_r+0x22>
 801f6b2:	6025      	str	r5, [r4, #0]
 801f6b4:	e7de      	b.n	801f674 <_malloc_r+0xa0>
 801f6b6:	bf00      	nop
 801f6b8:	20009a1c 	.word	0x20009a1c

0801f6bc <__cvt>:
 801f6bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f6c0:	ec55 4b10 	vmov	r4, r5, d0
 801f6c4:	2d00      	cmp	r5, #0
 801f6c6:	460e      	mov	r6, r1
 801f6c8:	4619      	mov	r1, r3
 801f6ca:	462b      	mov	r3, r5
 801f6cc:	bfbb      	ittet	lt
 801f6ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f6d2:	461d      	movlt	r5, r3
 801f6d4:	2300      	movge	r3, #0
 801f6d6:	232d      	movlt	r3, #45	; 0x2d
 801f6d8:	700b      	strb	r3, [r1, #0]
 801f6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f6dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f6e0:	4691      	mov	r9, r2
 801f6e2:	f023 0820 	bic.w	r8, r3, #32
 801f6e6:	bfbc      	itt	lt
 801f6e8:	4622      	movlt	r2, r4
 801f6ea:	4614      	movlt	r4, r2
 801f6ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f6f0:	d005      	beq.n	801f6fe <__cvt+0x42>
 801f6f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f6f6:	d100      	bne.n	801f6fa <__cvt+0x3e>
 801f6f8:	3601      	adds	r6, #1
 801f6fa:	2102      	movs	r1, #2
 801f6fc:	e000      	b.n	801f700 <__cvt+0x44>
 801f6fe:	2103      	movs	r1, #3
 801f700:	ab03      	add	r3, sp, #12
 801f702:	9301      	str	r3, [sp, #4]
 801f704:	ab02      	add	r3, sp, #8
 801f706:	9300      	str	r3, [sp, #0]
 801f708:	ec45 4b10 	vmov	d0, r4, r5
 801f70c:	4653      	mov	r3, sl
 801f70e:	4632      	mov	r2, r6
 801f710:	f000 ff22 	bl	8020558 <_dtoa_r>
 801f714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f718:	4607      	mov	r7, r0
 801f71a:	d102      	bne.n	801f722 <__cvt+0x66>
 801f71c:	f019 0f01 	tst.w	r9, #1
 801f720:	d022      	beq.n	801f768 <__cvt+0xac>
 801f722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f726:	eb07 0906 	add.w	r9, r7, r6
 801f72a:	d110      	bne.n	801f74e <__cvt+0x92>
 801f72c:	783b      	ldrb	r3, [r7, #0]
 801f72e:	2b30      	cmp	r3, #48	; 0x30
 801f730:	d10a      	bne.n	801f748 <__cvt+0x8c>
 801f732:	2200      	movs	r2, #0
 801f734:	2300      	movs	r3, #0
 801f736:	4620      	mov	r0, r4
 801f738:	4629      	mov	r1, r5
 801f73a:	f7e1 f99d 	bl	8000a78 <__aeabi_dcmpeq>
 801f73e:	b918      	cbnz	r0, 801f748 <__cvt+0x8c>
 801f740:	f1c6 0601 	rsb	r6, r6, #1
 801f744:	f8ca 6000 	str.w	r6, [sl]
 801f748:	f8da 3000 	ldr.w	r3, [sl]
 801f74c:	4499      	add	r9, r3
 801f74e:	2200      	movs	r2, #0
 801f750:	2300      	movs	r3, #0
 801f752:	4620      	mov	r0, r4
 801f754:	4629      	mov	r1, r5
 801f756:	f7e1 f98f 	bl	8000a78 <__aeabi_dcmpeq>
 801f75a:	b108      	cbz	r0, 801f760 <__cvt+0xa4>
 801f75c:	f8cd 900c 	str.w	r9, [sp, #12]
 801f760:	2230      	movs	r2, #48	; 0x30
 801f762:	9b03      	ldr	r3, [sp, #12]
 801f764:	454b      	cmp	r3, r9
 801f766:	d307      	bcc.n	801f778 <__cvt+0xbc>
 801f768:	9b03      	ldr	r3, [sp, #12]
 801f76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f76c:	1bdb      	subs	r3, r3, r7
 801f76e:	4638      	mov	r0, r7
 801f770:	6013      	str	r3, [r2, #0]
 801f772:	b004      	add	sp, #16
 801f774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f778:	1c59      	adds	r1, r3, #1
 801f77a:	9103      	str	r1, [sp, #12]
 801f77c:	701a      	strb	r2, [r3, #0]
 801f77e:	e7f0      	b.n	801f762 <__cvt+0xa6>

0801f780 <__exponent>:
 801f780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f782:	4603      	mov	r3, r0
 801f784:	2900      	cmp	r1, #0
 801f786:	bfb8      	it	lt
 801f788:	4249      	neglt	r1, r1
 801f78a:	f803 2b02 	strb.w	r2, [r3], #2
 801f78e:	bfb4      	ite	lt
 801f790:	222d      	movlt	r2, #45	; 0x2d
 801f792:	222b      	movge	r2, #43	; 0x2b
 801f794:	2909      	cmp	r1, #9
 801f796:	7042      	strb	r2, [r0, #1]
 801f798:	dd2a      	ble.n	801f7f0 <__exponent+0x70>
 801f79a:	f10d 0407 	add.w	r4, sp, #7
 801f79e:	46a4      	mov	ip, r4
 801f7a0:	270a      	movs	r7, #10
 801f7a2:	46a6      	mov	lr, r4
 801f7a4:	460a      	mov	r2, r1
 801f7a6:	fb91 f6f7 	sdiv	r6, r1, r7
 801f7aa:	fb07 1516 	mls	r5, r7, r6, r1
 801f7ae:	3530      	adds	r5, #48	; 0x30
 801f7b0:	2a63      	cmp	r2, #99	; 0x63
 801f7b2:	f104 34ff 	add.w	r4, r4, #4294967295
 801f7b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f7ba:	4631      	mov	r1, r6
 801f7bc:	dcf1      	bgt.n	801f7a2 <__exponent+0x22>
 801f7be:	3130      	adds	r1, #48	; 0x30
 801f7c0:	f1ae 0502 	sub.w	r5, lr, #2
 801f7c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f7c8:	1c44      	adds	r4, r0, #1
 801f7ca:	4629      	mov	r1, r5
 801f7cc:	4561      	cmp	r1, ip
 801f7ce:	d30a      	bcc.n	801f7e6 <__exponent+0x66>
 801f7d0:	f10d 0209 	add.w	r2, sp, #9
 801f7d4:	eba2 020e 	sub.w	r2, r2, lr
 801f7d8:	4565      	cmp	r5, ip
 801f7da:	bf88      	it	hi
 801f7dc:	2200      	movhi	r2, #0
 801f7de:	4413      	add	r3, r2
 801f7e0:	1a18      	subs	r0, r3, r0
 801f7e2:	b003      	add	sp, #12
 801f7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f7ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f7ee:	e7ed      	b.n	801f7cc <__exponent+0x4c>
 801f7f0:	2330      	movs	r3, #48	; 0x30
 801f7f2:	3130      	adds	r1, #48	; 0x30
 801f7f4:	7083      	strb	r3, [r0, #2]
 801f7f6:	70c1      	strb	r1, [r0, #3]
 801f7f8:	1d03      	adds	r3, r0, #4
 801f7fa:	e7f1      	b.n	801f7e0 <__exponent+0x60>

0801f7fc <_printf_float>:
 801f7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f800:	ed2d 8b02 	vpush	{d8}
 801f804:	b08d      	sub	sp, #52	; 0x34
 801f806:	460c      	mov	r4, r1
 801f808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f80c:	4616      	mov	r6, r2
 801f80e:	461f      	mov	r7, r3
 801f810:	4605      	mov	r5, r0
 801f812:	f001 fcb1 	bl	8021178 <_localeconv_r>
 801f816:	f8d0 a000 	ldr.w	sl, [r0]
 801f81a:	4650      	mov	r0, sl
 801f81c:	f7e0 fcb0 	bl	8000180 <strlen>
 801f820:	2300      	movs	r3, #0
 801f822:	930a      	str	r3, [sp, #40]	; 0x28
 801f824:	6823      	ldr	r3, [r4, #0]
 801f826:	9305      	str	r3, [sp, #20]
 801f828:	f8d8 3000 	ldr.w	r3, [r8]
 801f82c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f830:	3307      	adds	r3, #7
 801f832:	f023 0307 	bic.w	r3, r3, #7
 801f836:	f103 0208 	add.w	r2, r3, #8
 801f83a:	f8c8 2000 	str.w	r2, [r8]
 801f83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f842:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f846:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f84a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f84e:	9307      	str	r3, [sp, #28]
 801f850:	f8cd 8018 	str.w	r8, [sp, #24]
 801f854:	ee08 0a10 	vmov	s16, r0
 801f858:	4b9f      	ldr	r3, [pc, #636]	; (801fad8 <_printf_float+0x2dc>)
 801f85a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f85e:	f04f 32ff 	mov.w	r2, #4294967295
 801f862:	f7e1 f93b 	bl	8000adc <__aeabi_dcmpun>
 801f866:	bb88      	cbnz	r0, 801f8cc <_printf_float+0xd0>
 801f868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f86c:	4b9a      	ldr	r3, [pc, #616]	; (801fad8 <_printf_float+0x2dc>)
 801f86e:	f04f 32ff 	mov.w	r2, #4294967295
 801f872:	f7e1 f915 	bl	8000aa0 <__aeabi_dcmple>
 801f876:	bb48      	cbnz	r0, 801f8cc <_printf_float+0xd0>
 801f878:	2200      	movs	r2, #0
 801f87a:	2300      	movs	r3, #0
 801f87c:	4640      	mov	r0, r8
 801f87e:	4649      	mov	r1, r9
 801f880:	f7e1 f904 	bl	8000a8c <__aeabi_dcmplt>
 801f884:	b110      	cbz	r0, 801f88c <_printf_float+0x90>
 801f886:	232d      	movs	r3, #45	; 0x2d
 801f888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f88c:	4b93      	ldr	r3, [pc, #588]	; (801fadc <_printf_float+0x2e0>)
 801f88e:	4894      	ldr	r0, [pc, #592]	; (801fae0 <_printf_float+0x2e4>)
 801f890:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f894:	bf94      	ite	ls
 801f896:	4698      	movls	r8, r3
 801f898:	4680      	movhi	r8, r0
 801f89a:	2303      	movs	r3, #3
 801f89c:	6123      	str	r3, [r4, #16]
 801f89e:	9b05      	ldr	r3, [sp, #20]
 801f8a0:	f023 0204 	bic.w	r2, r3, #4
 801f8a4:	6022      	str	r2, [r4, #0]
 801f8a6:	f04f 0900 	mov.w	r9, #0
 801f8aa:	9700      	str	r7, [sp, #0]
 801f8ac:	4633      	mov	r3, r6
 801f8ae:	aa0b      	add	r2, sp, #44	; 0x2c
 801f8b0:	4621      	mov	r1, r4
 801f8b2:	4628      	mov	r0, r5
 801f8b4:	f000 f9d8 	bl	801fc68 <_printf_common>
 801f8b8:	3001      	adds	r0, #1
 801f8ba:	f040 8090 	bne.w	801f9de <_printf_float+0x1e2>
 801f8be:	f04f 30ff 	mov.w	r0, #4294967295
 801f8c2:	b00d      	add	sp, #52	; 0x34
 801f8c4:	ecbd 8b02 	vpop	{d8}
 801f8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8cc:	4642      	mov	r2, r8
 801f8ce:	464b      	mov	r3, r9
 801f8d0:	4640      	mov	r0, r8
 801f8d2:	4649      	mov	r1, r9
 801f8d4:	f7e1 f902 	bl	8000adc <__aeabi_dcmpun>
 801f8d8:	b140      	cbz	r0, 801f8ec <_printf_float+0xf0>
 801f8da:	464b      	mov	r3, r9
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	bfbc      	itt	lt
 801f8e0:	232d      	movlt	r3, #45	; 0x2d
 801f8e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f8e6:	487f      	ldr	r0, [pc, #508]	; (801fae4 <_printf_float+0x2e8>)
 801f8e8:	4b7f      	ldr	r3, [pc, #508]	; (801fae8 <_printf_float+0x2ec>)
 801f8ea:	e7d1      	b.n	801f890 <_printf_float+0x94>
 801f8ec:	6863      	ldr	r3, [r4, #4]
 801f8ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f8f2:	9206      	str	r2, [sp, #24]
 801f8f4:	1c5a      	adds	r2, r3, #1
 801f8f6:	d13f      	bne.n	801f978 <_printf_float+0x17c>
 801f8f8:	2306      	movs	r3, #6
 801f8fa:	6063      	str	r3, [r4, #4]
 801f8fc:	9b05      	ldr	r3, [sp, #20]
 801f8fe:	6861      	ldr	r1, [r4, #4]
 801f900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f904:	2300      	movs	r3, #0
 801f906:	9303      	str	r3, [sp, #12]
 801f908:	ab0a      	add	r3, sp, #40	; 0x28
 801f90a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f90e:	ab09      	add	r3, sp, #36	; 0x24
 801f910:	ec49 8b10 	vmov	d0, r8, r9
 801f914:	9300      	str	r3, [sp, #0]
 801f916:	6022      	str	r2, [r4, #0]
 801f918:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f91c:	4628      	mov	r0, r5
 801f91e:	f7ff fecd 	bl	801f6bc <__cvt>
 801f922:	9b06      	ldr	r3, [sp, #24]
 801f924:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f926:	2b47      	cmp	r3, #71	; 0x47
 801f928:	4680      	mov	r8, r0
 801f92a:	d108      	bne.n	801f93e <_printf_float+0x142>
 801f92c:	1cc8      	adds	r0, r1, #3
 801f92e:	db02      	blt.n	801f936 <_printf_float+0x13a>
 801f930:	6863      	ldr	r3, [r4, #4]
 801f932:	4299      	cmp	r1, r3
 801f934:	dd41      	ble.n	801f9ba <_printf_float+0x1be>
 801f936:	f1ab 0b02 	sub.w	fp, fp, #2
 801f93a:	fa5f fb8b 	uxtb.w	fp, fp
 801f93e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f942:	d820      	bhi.n	801f986 <_printf_float+0x18a>
 801f944:	3901      	subs	r1, #1
 801f946:	465a      	mov	r2, fp
 801f948:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f94c:	9109      	str	r1, [sp, #36]	; 0x24
 801f94e:	f7ff ff17 	bl	801f780 <__exponent>
 801f952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f954:	1813      	adds	r3, r2, r0
 801f956:	2a01      	cmp	r2, #1
 801f958:	4681      	mov	r9, r0
 801f95a:	6123      	str	r3, [r4, #16]
 801f95c:	dc02      	bgt.n	801f964 <_printf_float+0x168>
 801f95e:	6822      	ldr	r2, [r4, #0]
 801f960:	07d2      	lsls	r2, r2, #31
 801f962:	d501      	bpl.n	801f968 <_printf_float+0x16c>
 801f964:	3301      	adds	r3, #1
 801f966:	6123      	str	r3, [r4, #16]
 801f968:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	d09c      	beq.n	801f8aa <_printf_float+0xae>
 801f970:	232d      	movs	r3, #45	; 0x2d
 801f972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f976:	e798      	b.n	801f8aa <_printf_float+0xae>
 801f978:	9a06      	ldr	r2, [sp, #24]
 801f97a:	2a47      	cmp	r2, #71	; 0x47
 801f97c:	d1be      	bne.n	801f8fc <_printf_float+0x100>
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d1bc      	bne.n	801f8fc <_printf_float+0x100>
 801f982:	2301      	movs	r3, #1
 801f984:	e7b9      	b.n	801f8fa <_printf_float+0xfe>
 801f986:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f98a:	d118      	bne.n	801f9be <_printf_float+0x1c2>
 801f98c:	2900      	cmp	r1, #0
 801f98e:	6863      	ldr	r3, [r4, #4]
 801f990:	dd0b      	ble.n	801f9aa <_printf_float+0x1ae>
 801f992:	6121      	str	r1, [r4, #16]
 801f994:	b913      	cbnz	r3, 801f99c <_printf_float+0x1a0>
 801f996:	6822      	ldr	r2, [r4, #0]
 801f998:	07d0      	lsls	r0, r2, #31
 801f99a:	d502      	bpl.n	801f9a2 <_printf_float+0x1a6>
 801f99c:	3301      	adds	r3, #1
 801f99e:	440b      	add	r3, r1
 801f9a0:	6123      	str	r3, [r4, #16]
 801f9a2:	65a1      	str	r1, [r4, #88]	; 0x58
 801f9a4:	f04f 0900 	mov.w	r9, #0
 801f9a8:	e7de      	b.n	801f968 <_printf_float+0x16c>
 801f9aa:	b913      	cbnz	r3, 801f9b2 <_printf_float+0x1b6>
 801f9ac:	6822      	ldr	r2, [r4, #0]
 801f9ae:	07d2      	lsls	r2, r2, #31
 801f9b0:	d501      	bpl.n	801f9b6 <_printf_float+0x1ba>
 801f9b2:	3302      	adds	r3, #2
 801f9b4:	e7f4      	b.n	801f9a0 <_printf_float+0x1a4>
 801f9b6:	2301      	movs	r3, #1
 801f9b8:	e7f2      	b.n	801f9a0 <_printf_float+0x1a4>
 801f9ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9c0:	4299      	cmp	r1, r3
 801f9c2:	db05      	blt.n	801f9d0 <_printf_float+0x1d4>
 801f9c4:	6823      	ldr	r3, [r4, #0]
 801f9c6:	6121      	str	r1, [r4, #16]
 801f9c8:	07d8      	lsls	r0, r3, #31
 801f9ca:	d5ea      	bpl.n	801f9a2 <_printf_float+0x1a6>
 801f9cc:	1c4b      	adds	r3, r1, #1
 801f9ce:	e7e7      	b.n	801f9a0 <_printf_float+0x1a4>
 801f9d0:	2900      	cmp	r1, #0
 801f9d2:	bfd4      	ite	le
 801f9d4:	f1c1 0202 	rsble	r2, r1, #2
 801f9d8:	2201      	movgt	r2, #1
 801f9da:	4413      	add	r3, r2
 801f9dc:	e7e0      	b.n	801f9a0 <_printf_float+0x1a4>
 801f9de:	6823      	ldr	r3, [r4, #0]
 801f9e0:	055a      	lsls	r2, r3, #21
 801f9e2:	d407      	bmi.n	801f9f4 <_printf_float+0x1f8>
 801f9e4:	6923      	ldr	r3, [r4, #16]
 801f9e6:	4642      	mov	r2, r8
 801f9e8:	4631      	mov	r1, r6
 801f9ea:	4628      	mov	r0, r5
 801f9ec:	47b8      	blx	r7
 801f9ee:	3001      	adds	r0, #1
 801f9f0:	d12c      	bne.n	801fa4c <_printf_float+0x250>
 801f9f2:	e764      	b.n	801f8be <_printf_float+0xc2>
 801f9f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f9f8:	f240 80e0 	bls.w	801fbbc <_printf_float+0x3c0>
 801f9fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801fa00:	2200      	movs	r2, #0
 801fa02:	2300      	movs	r3, #0
 801fa04:	f7e1 f838 	bl	8000a78 <__aeabi_dcmpeq>
 801fa08:	2800      	cmp	r0, #0
 801fa0a:	d034      	beq.n	801fa76 <_printf_float+0x27a>
 801fa0c:	4a37      	ldr	r2, [pc, #220]	; (801faec <_printf_float+0x2f0>)
 801fa0e:	2301      	movs	r3, #1
 801fa10:	4631      	mov	r1, r6
 801fa12:	4628      	mov	r0, r5
 801fa14:	47b8      	blx	r7
 801fa16:	3001      	adds	r0, #1
 801fa18:	f43f af51 	beq.w	801f8be <_printf_float+0xc2>
 801fa1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fa20:	429a      	cmp	r2, r3
 801fa22:	db02      	blt.n	801fa2a <_printf_float+0x22e>
 801fa24:	6823      	ldr	r3, [r4, #0]
 801fa26:	07d8      	lsls	r0, r3, #31
 801fa28:	d510      	bpl.n	801fa4c <_printf_float+0x250>
 801fa2a:	ee18 3a10 	vmov	r3, s16
 801fa2e:	4652      	mov	r2, sl
 801fa30:	4631      	mov	r1, r6
 801fa32:	4628      	mov	r0, r5
 801fa34:	47b8      	blx	r7
 801fa36:	3001      	adds	r0, #1
 801fa38:	f43f af41 	beq.w	801f8be <_printf_float+0xc2>
 801fa3c:	f04f 0800 	mov.w	r8, #0
 801fa40:	f104 091a 	add.w	r9, r4, #26
 801fa44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa46:	3b01      	subs	r3, #1
 801fa48:	4543      	cmp	r3, r8
 801fa4a:	dc09      	bgt.n	801fa60 <_printf_float+0x264>
 801fa4c:	6823      	ldr	r3, [r4, #0]
 801fa4e:	079b      	lsls	r3, r3, #30
 801fa50:	f100 8105 	bmi.w	801fc5e <_printf_float+0x462>
 801fa54:	68e0      	ldr	r0, [r4, #12]
 801fa56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa58:	4298      	cmp	r0, r3
 801fa5a:	bfb8      	it	lt
 801fa5c:	4618      	movlt	r0, r3
 801fa5e:	e730      	b.n	801f8c2 <_printf_float+0xc6>
 801fa60:	2301      	movs	r3, #1
 801fa62:	464a      	mov	r2, r9
 801fa64:	4631      	mov	r1, r6
 801fa66:	4628      	mov	r0, r5
 801fa68:	47b8      	blx	r7
 801fa6a:	3001      	adds	r0, #1
 801fa6c:	f43f af27 	beq.w	801f8be <_printf_float+0xc2>
 801fa70:	f108 0801 	add.w	r8, r8, #1
 801fa74:	e7e6      	b.n	801fa44 <_printf_float+0x248>
 801fa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	dc39      	bgt.n	801faf0 <_printf_float+0x2f4>
 801fa7c:	4a1b      	ldr	r2, [pc, #108]	; (801faec <_printf_float+0x2f0>)
 801fa7e:	2301      	movs	r3, #1
 801fa80:	4631      	mov	r1, r6
 801fa82:	4628      	mov	r0, r5
 801fa84:	47b8      	blx	r7
 801fa86:	3001      	adds	r0, #1
 801fa88:	f43f af19 	beq.w	801f8be <_printf_float+0xc2>
 801fa8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fa90:	4313      	orrs	r3, r2
 801fa92:	d102      	bne.n	801fa9a <_printf_float+0x29e>
 801fa94:	6823      	ldr	r3, [r4, #0]
 801fa96:	07d9      	lsls	r1, r3, #31
 801fa98:	d5d8      	bpl.n	801fa4c <_printf_float+0x250>
 801fa9a:	ee18 3a10 	vmov	r3, s16
 801fa9e:	4652      	mov	r2, sl
 801faa0:	4631      	mov	r1, r6
 801faa2:	4628      	mov	r0, r5
 801faa4:	47b8      	blx	r7
 801faa6:	3001      	adds	r0, #1
 801faa8:	f43f af09 	beq.w	801f8be <_printf_float+0xc2>
 801faac:	f04f 0900 	mov.w	r9, #0
 801fab0:	f104 0a1a 	add.w	sl, r4, #26
 801fab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fab6:	425b      	negs	r3, r3
 801fab8:	454b      	cmp	r3, r9
 801faba:	dc01      	bgt.n	801fac0 <_printf_float+0x2c4>
 801fabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fabe:	e792      	b.n	801f9e6 <_printf_float+0x1ea>
 801fac0:	2301      	movs	r3, #1
 801fac2:	4652      	mov	r2, sl
 801fac4:	4631      	mov	r1, r6
 801fac6:	4628      	mov	r0, r5
 801fac8:	47b8      	blx	r7
 801faca:	3001      	adds	r0, #1
 801facc:	f43f aef7 	beq.w	801f8be <_printf_float+0xc2>
 801fad0:	f109 0901 	add.w	r9, r9, #1
 801fad4:	e7ee      	b.n	801fab4 <_printf_float+0x2b8>
 801fad6:	bf00      	nop
 801fad8:	7fefffff 	.word	0x7fefffff
 801fadc:	08023054 	.word	0x08023054
 801fae0:	08023058 	.word	0x08023058
 801fae4:	08023060 	.word	0x08023060
 801fae8:	0802305c 	.word	0x0802305c
 801faec:	08023064 	.word	0x08023064
 801faf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801faf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801faf4:	429a      	cmp	r2, r3
 801faf6:	bfa8      	it	ge
 801faf8:	461a      	movge	r2, r3
 801fafa:	2a00      	cmp	r2, #0
 801fafc:	4691      	mov	r9, r2
 801fafe:	dc37      	bgt.n	801fb70 <_printf_float+0x374>
 801fb00:	f04f 0b00 	mov.w	fp, #0
 801fb04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fb08:	f104 021a 	add.w	r2, r4, #26
 801fb0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fb0e:	9305      	str	r3, [sp, #20]
 801fb10:	eba3 0309 	sub.w	r3, r3, r9
 801fb14:	455b      	cmp	r3, fp
 801fb16:	dc33      	bgt.n	801fb80 <_printf_float+0x384>
 801fb18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fb1c:	429a      	cmp	r2, r3
 801fb1e:	db3b      	blt.n	801fb98 <_printf_float+0x39c>
 801fb20:	6823      	ldr	r3, [r4, #0]
 801fb22:	07da      	lsls	r2, r3, #31
 801fb24:	d438      	bmi.n	801fb98 <_printf_float+0x39c>
 801fb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb28:	9a05      	ldr	r2, [sp, #20]
 801fb2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fb2c:	1a9a      	subs	r2, r3, r2
 801fb2e:	eba3 0901 	sub.w	r9, r3, r1
 801fb32:	4591      	cmp	r9, r2
 801fb34:	bfa8      	it	ge
 801fb36:	4691      	movge	r9, r2
 801fb38:	f1b9 0f00 	cmp.w	r9, #0
 801fb3c:	dc35      	bgt.n	801fbaa <_printf_float+0x3ae>
 801fb3e:	f04f 0800 	mov.w	r8, #0
 801fb42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fb46:	f104 0a1a 	add.w	sl, r4, #26
 801fb4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fb4e:	1a9b      	subs	r3, r3, r2
 801fb50:	eba3 0309 	sub.w	r3, r3, r9
 801fb54:	4543      	cmp	r3, r8
 801fb56:	f77f af79 	ble.w	801fa4c <_printf_float+0x250>
 801fb5a:	2301      	movs	r3, #1
 801fb5c:	4652      	mov	r2, sl
 801fb5e:	4631      	mov	r1, r6
 801fb60:	4628      	mov	r0, r5
 801fb62:	47b8      	blx	r7
 801fb64:	3001      	adds	r0, #1
 801fb66:	f43f aeaa 	beq.w	801f8be <_printf_float+0xc2>
 801fb6a:	f108 0801 	add.w	r8, r8, #1
 801fb6e:	e7ec      	b.n	801fb4a <_printf_float+0x34e>
 801fb70:	4613      	mov	r3, r2
 801fb72:	4631      	mov	r1, r6
 801fb74:	4642      	mov	r2, r8
 801fb76:	4628      	mov	r0, r5
 801fb78:	47b8      	blx	r7
 801fb7a:	3001      	adds	r0, #1
 801fb7c:	d1c0      	bne.n	801fb00 <_printf_float+0x304>
 801fb7e:	e69e      	b.n	801f8be <_printf_float+0xc2>
 801fb80:	2301      	movs	r3, #1
 801fb82:	4631      	mov	r1, r6
 801fb84:	4628      	mov	r0, r5
 801fb86:	9205      	str	r2, [sp, #20]
 801fb88:	47b8      	blx	r7
 801fb8a:	3001      	adds	r0, #1
 801fb8c:	f43f ae97 	beq.w	801f8be <_printf_float+0xc2>
 801fb90:	9a05      	ldr	r2, [sp, #20]
 801fb92:	f10b 0b01 	add.w	fp, fp, #1
 801fb96:	e7b9      	b.n	801fb0c <_printf_float+0x310>
 801fb98:	ee18 3a10 	vmov	r3, s16
 801fb9c:	4652      	mov	r2, sl
 801fb9e:	4631      	mov	r1, r6
 801fba0:	4628      	mov	r0, r5
 801fba2:	47b8      	blx	r7
 801fba4:	3001      	adds	r0, #1
 801fba6:	d1be      	bne.n	801fb26 <_printf_float+0x32a>
 801fba8:	e689      	b.n	801f8be <_printf_float+0xc2>
 801fbaa:	9a05      	ldr	r2, [sp, #20]
 801fbac:	464b      	mov	r3, r9
 801fbae:	4442      	add	r2, r8
 801fbb0:	4631      	mov	r1, r6
 801fbb2:	4628      	mov	r0, r5
 801fbb4:	47b8      	blx	r7
 801fbb6:	3001      	adds	r0, #1
 801fbb8:	d1c1      	bne.n	801fb3e <_printf_float+0x342>
 801fbba:	e680      	b.n	801f8be <_printf_float+0xc2>
 801fbbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fbbe:	2a01      	cmp	r2, #1
 801fbc0:	dc01      	bgt.n	801fbc6 <_printf_float+0x3ca>
 801fbc2:	07db      	lsls	r3, r3, #31
 801fbc4:	d538      	bpl.n	801fc38 <_printf_float+0x43c>
 801fbc6:	2301      	movs	r3, #1
 801fbc8:	4642      	mov	r2, r8
 801fbca:	4631      	mov	r1, r6
 801fbcc:	4628      	mov	r0, r5
 801fbce:	47b8      	blx	r7
 801fbd0:	3001      	adds	r0, #1
 801fbd2:	f43f ae74 	beq.w	801f8be <_printf_float+0xc2>
 801fbd6:	ee18 3a10 	vmov	r3, s16
 801fbda:	4652      	mov	r2, sl
 801fbdc:	4631      	mov	r1, r6
 801fbde:	4628      	mov	r0, r5
 801fbe0:	47b8      	blx	r7
 801fbe2:	3001      	adds	r0, #1
 801fbe4:	f43f ae6b 	beq.w	801f8be <_printf_float+0xc2>
 801fbe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801fbec:	2200      	movs	r2, #0
 801fbee:	2300      	movs	r3, #0
 801fbf0:	f7e0 ff42 	bl	8000a78 <__aeabi_dcmpeq>
 801fbf4:	b9d8      	cbnz	r0, 801fc2e <_printf_float+0x432>
 801fbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbf8:	f108 0201 	add.w	r2, r8, #1
 801fbfc:	3b01      	subs	r3, #1
 801fbfe:	4631      	mov	r1, r6
 801fc00:	4628      	mov	r0, r5
 801fc02:	47b8      	blx	r7
 801fc04:	3001      	adds	r0, #1
 801fc06:	d10e      	bne.n	801fc26 <_printf_float+0x42a>
 801fc08:	e659      	b.n	801f8be <_printf_float+0xc2>
 801fc0a:	2301      	movs	r3, #1
 801fc0c:	4652      	mov	r2, sl
 801fc0e:	4631      	mov	r1, r6
 801fc10:	4628      	mov	r0, r5
 801fc12:	47b8      	blx	r7
 801fc14:	3001      	adds	r0, #1
 801fc16:	f43f ae52 	beq.w	801f8be <_printf_float+0xc2>
 801fc1a:	f108 0801 	add.w	r8, r8, #1
 801fc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc20:	3b01      	subs	r3, #1
 801fc22:	4543      	cmp	r3, r8
 801fc24:	dcf1      	bgt.n	801fc0a <_printf_float+0x40e>
 801fc26:	464b      	mov	r3, r9
 801fc28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fc2c:	e6dc      	b.n	801f9e8 <_printf_float+0x1ec>
 801fc2e:	f04f 0800 	mov.w	r8, #0
 801fc32:	f104 0a1a 	add.w	sl, r4, #26
 801fc36:	e7f2      	b.n	801fc1e <_printf_float+0x422>
 801fc38:	2301      	movs	r3, #1
 801fc3a:	4642      	mov	r2, r8
 801fc3c:	e7df      	b.n	801fbfe <_printf_float+0x402>
 801fc3e:	2301      	movs	r3, #1
 801fc40:	464a      	mov	r2, r9
 801fc42:	4631      	mov	r1, r6
 801fc44:	4628      	mov	r0, r5
 801fc46:	47b8      	blx	r7
 801fc48:	3001      	adds	r0, #1
 801fc4a:	f43f ae38 	beq.w	801f8be <_printf_float+0xc2>
 801fc4e:	f108 0801 	add.w	r8, r8, #1
 801fc52:	68e3      	ldr	r3, [r4, #12]
 801fc54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fc56:	1a5b      	subs	r3, r3, r1
 801fc58:	4543      	cmp	r3, r8
 801fc5a:	dcf0      	bgt.n	801fc3e <_printf_float+0x442>
 801fc5c:	e6fa      	b.n	801fa54 <_printf_float+0x258>
 801fc5e:	f04f 0800 	mov.w	r8, #0
 801fc62:	f104 0919 	add.w	r9, r4, #25
 801fc66:	e7f4      	b.n	801fc52 <_printf_float+0x456>

0801fc68 <_printf_common>:
 801fc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc6c:	4616      	mov	r6, r2
 801fc6e:	4699      	mov	r9, r3
 801fc70:	688a      	ldr	r2, [r1, #8]
 801fc72:	690b      	ldr	r3, [r1, #16]
 801fc74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fc78:	4293      	cmp	r3, r2
 801fc7a:	bfb8      	it	lt
 801fc7c:	4613      	movlt	r3, r2
 801fc7e:	6033      	str	r3, [r6, #0]
 801fc80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fc84:	4607      	mov	r7, r0
 801fc86:	460c      	mov	r4, r1
 801fc88:	b10a      	cbz	r2, 801fc8e <_printf_common+0x26>
 801fc8a:	3301      	adds	r3, #1
 801fc8c:	6033      	str	r3, [r6, #0]
 801fc8e:	6823      	ldr	r3, [r4, #0]
 801fc90:	0699      	lsls	r1, r3, #26
 801fc92:	bf42      	ittt	mi
 801fc94:	6833      	ldrmi	r3, [r6, #0]
 801fc96:	3302      	addmi	r3, #2
 801fc98:	6033      	strmi	r3, [r6, #0]
 801fc9a:	6825      	ldr	r5, [r4, #0]
 801fc9c:	f015 0506 	ands.w	r5, r5, #6
 801fca0:	d106      	bne.n	801fcb0 <_printf_common+0x48>
 801fca2:	f104 0a19 	add.w	sl, r4, #25
 801fca6:	68e3      	ldr	r3, [r4, #12]
 801fca8:	6832      	ldr	r2, [r6, #0]
 801fcaa:	1a9b      	subs	r3, r3, r2
 801fcac:	42ab      	cmp	r3, r5
 801fcae:	dc26      	bgt.n	801fcfe <_printf_common+0x96>
 801fcb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fcb4:	1e13      	subs	r3, r2, #0
 801fcb6:	6822      	ldr	r2, [r4, #0]
 801fcb8:	bf18      	it	ne
 801fcba:	2301      	movne	r3, #1
 801fcbc:	0692      	lsls	r2, r2, #26
 801fcbe:	d42b      	bmi.n	801fd18 <_printf_common+0xb0>
 801fcc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fcc4:	4649      	mov	r1, r9
 801fcc6:	4638      	mov	r0, r7
 801fcc8:	47c0      	blx	r8
 801fcca:	3001      	adds	r0, #1
 801fccc:	d01e      	beq.n	801fd0c <_printf_common+0xa4>
 801fcce:	6823      	ldr	r3, [r4, #0]
 801fcd0:	68e5      	ldr	r5, [r4, #12]
 801fcd2:	6832      	ldr	r2, [r6, #0]
 801fcd4:	f003 0306 	and.w	r3, r3, #6
 801fcd8:	2b04      	cmp	r3, #4
 801fcda:	bf08      	it	eq
 801fcdc:	1aad      	subeq	r5, r5, r2
 801fcde:	68a3      	ldr	r3, [r4, #8]
 801fce0:	6922      	ldr	r2, [r4, #16]
 801fce2:	bf0c      	ite	eq
 801fce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fce8:	2500      	movne	r5, #0
 801fcea:	4293      	cmp	r3, r2
 801fcec:	bfc4      	itt	gt
 801fcee:	1a9b      	subgt	r3, r3, r2
 801fcf0:	18ed      	addgt	r5, r5, r3
 801fcf2:	2600      	movs	r6, #0
 801fcf4:	341a      	adds	r4, #26
 801fcf6:	42b5      	cmp	r5, r6
 801fcf8:	d11a      	bne.n	801fd30 <_printf_common+0xc8>
 801fcfa:	2000      	movs	r0, #0
 801fcfc:	e008      	b.n	801fd10 <_printf_common+0xa8>
 801fcfe:	2301      	movs	r3, #1
 801fd00:	4652      	mov	r2, sl
 801fd02:	4649      	mov	r1, r9
 801fd04:	4638      	mov	r0, r7
 801fd06:	47c0      	blx	r8
 801fd08:	3001      	adds	r0, #1
 801fd0a:	d103      	bne.n	801fd14 <_printf_common+0xac>
 801fd0c:	f04f 30ff 	mov.w	r0, #4294967295
 801fd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd14:	3501      	adds	r5, #1
 801fd16:	e7c6      	b.n	801fca6 <_printf_common+0x3e>
 801fd18:	18e1      	adds	r1, r4, r3
 801fd1a:	1c5a      	adds	r2, r3, #1
 801fd1c:	2030      	movs	r0, #48	; 0x30
 801fd1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fd22:	4422      	add	r2, r4
 801fd24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fd28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fd2c:	3302      	adds	r3, #2
 801fd2e:	e7c7      	b.n	801fcc0 <_printf_common+0x58>
 801fd30:	2301      	movs	r3, #1
 801fd32:	4622      	mov	r2, r4
 801fd34:	4649      	mov	r1, r9
 801fd36:	4638      	mov	r0, r7
 801fd38:	47c0      	blx	r8
 801fd3a:	3001      	adds	r0, #1
 801fd3c:	d0e6      	beq.n	801fd0c <_printf_common+0xa4>
 801fd3e:	3601      	adds	r6, #1
 801fd40:	e7d9      	b.n	801fcf6 <_printf_common+0x8e>
	...

0801fd44 <_printf_i>:
 801fd44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fd48:	7e0f      	ldrb	r7, [r1, #24]
 801fd4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fd4c:	2f78      	cmp	r7, #120	; 0x78
 801fd4e:	4691      	mov	r9, r2
 801fd50:	4680      	mov	r8, r0
 801fd52:	460c      	mov	r4, r1
 801fd54:	469a      	mov	sl, r3
 801fd56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fd5a:	d807      	bhi.n	801fd6c <_printf_i+0x28>
 801fd5c:	2f62      	cmp	r7, #98	; 0x62
 801fd5e:	d80a      	bhi.n	801fd76 <_printf_i+0x32>
 801fd60:	2f00      	cmp	r7, #0
 801fd62:	f000 80d8 	beq.w	801ff16 <_printf_i+0x1d2>
 801fd66:	2f58      	cmp	r7, #88	; 0x58
 801fd68:	f000 80a3 	beq.w	801feb2 <_printf_i+0x16e>
 801fd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fd70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fd74:	e03a      	b.n	801fdec <_printf_i+0xa8>
 801fd76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fd7a:	2b15      	cmp	r3, #21
 801fd7c:	d8f6      	bhi.n	801fd6c <_printf_i+0x28>
 801fd7e:	a101      	add	r1, pc, #4	; (adr r1, 801fd84 <_printf_i+0x40>)
 801fd80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fd84:	0801fddd 	.word	0x0801fddd
 801fd88:	0801fdf1 	.word	0x0801fdf1
 801fd8c:	0801fd6d 	.word	0x0801fd6d
 801fd90:	0801fd6d 	.word	0x0801fd6d
 801fd94:	0801fd6d 	.word	0x0801fd6d
 801fd98:	0801fd6d 	.word	0x0801fd6d
 801fd9c:	0801fdf1 	.word	0x0801fdf1
 801fda0:	0801fd6d 	.word	0x0801fd6d
 801fda4:	0801fd6d 	.word	0x0801fd6d
 801fda8:	0801fd6d 	.word	0x0801fd6d
 801fdac:	0801fd6d 	.word	0x0801fd6d
 801fdb0:	0801fefd 	.word	0x0801fefd
 801fdb4:	0801fe21 	.word	0x0801fe21
 801fdb8:	0801fedf 	.word	0x0801fedf
 801fdbc:	0801fd6d 	.word	0x0801fd6d
 801fdc0:	0801fd6d 	.word	0x0801fd6d
 801fdc4:	0801ff1f 	.word	0x0801ff1f
 801fdc8:	0801fd6d 	.word	0x0801fd6d
 801fdcc:	0801fe21 	.word	0x0801fe21
 801fdd0:	0801fd6d 	.word	0x0801fd6d
 801fdd4:	0801fd6d 	.word	0x0801fd6d
 801fdd8:	0801fee7 	.word	0x0801fee7
 801fddc:	682b      	ldr	r3, [r5, #0]
 801fdde:	1d1a      	adds	r2, r3, #4
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	602a      	str	r2, [r5, #0]
 801fde4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fde8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fdec:	2301      	movs	r3, #1
 801fdee:	e0a3      	b.n	801ff38 <_printf_i+0x1f4>
 801fdf0:	6820      	ldr	r0, [r4, #0]
 801fdf2:	6829      	ldr	r1, [r5, #0]
 801fdf4:	0606      	lsls	r6, r0, #24
 801fdf6:	f101 0304 	add.w	r3, r1, #4
 801fdfa:	d50a      	bpl.n	801fe12 <_printf_i+0xce>
 801fdfc:	680e      	ldr	r6, [r1, #0]
 801fdfe:	602b      	str	r3, [r5, #0]
 801fe00:	2e00      	cmp	r6, #0
 801fe02:	da03      	bge.n	801fe0c <_printf_i+0xc8>
 801fe04:	232d      	movs	r3, #45	; 0x2d
 801fe06:	4276      	negs	r6, r6
 801fe08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe0c:	485e      	ldr	r0, [pc, #376]	; (801ff88 <_printf_i+0x244>)
 801fe0e:	230a      	movs	r3, #10
 801fe10:	e019      	b.n	801fe46 <_printf_i+0x102>
 801fe12:	680e      	ldr	r6, [r1, #0]
 801fe14:	602b      	str	r3, [r5, #0]
 801fe16:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fe1a:	bf18      	it	ne
 801fe1c:	b236      	sxthne	r6, r6
 801fe1e:	e7ef      	b.n	801fe00 <_printf_i+0xbc>
 801fe20:	682b      	ldr	r3, [r5, #0]
 801fe22:	6820      	ldr	r0, [r4, #0]
 801fe24:	1d19      	adds	r1, r3, #4
 801fe26:	6029      	str	r1, [r5, #0]
 801fe28:	0601      	lsls	r1, r0, #24
 801fe2a:	d501      	bpl.n	801fe30 <_printf_i+0xec>
 801fe2c:	681e      	ldr	r6, [r3, #0]
 801fe2e:	e002      	b.n	801fe36 <_printf_i+0xf2>
 801fe30:	0646      	lsls	r6, r0, #25
 801fe32:	d5fb      	bpl.n	801fe2c <_printf_i+0xe8>
 801fe34:	881e      	ldrh	r6, [r3, #0]
 801fe36:	4854      	ldr	r0, [pc, #336]	; (801ff88 <_printf_i+0x244>)
 801fe38:	2f6f      	cmp	r7, #111	; 0x6f
 801fe3a:	bf0c      	ite	eq
 801fe3c:	2308      	moveq	r3, #8
 801fe3e:	230a      	movne	r3, #10
 801fe40:	2100      	movs	r1, #0
 801fe42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fe46:	6865      	ldr	r5, [r4, #4]
 801fe48:	60a5      	str	r5, [r4, #8]
 801fe4a:	2d00      	cmp	r5, #0
 801fe4c:	bfa2      	ittt	ge
 801fe4e:	6821      	ldrge	r1, [r4, #0]
 801fe50:	f021 0104 	bicge.w	r1, r1, #4
 801fe54:	6021      	strge	r1, [r4, #0]
 801fe56:	b90e      	cbnz	r6, 801fe5c <_printf_i+0x118>
 801fe58:	2d00      	cmp	r5, #0
 801fe5a:	d04d      	beq.n	801fef8 <_printf_i+0x1b4>
 801fe5c:	4615      	mov	r5, r2
 801fe5e:	fbb6 f1f3 	udiv	r1, r6, r3
 801fe62:	fb03 6711 	mls	r7, r3, r1, r6
 801fe66:	5dc7      	ldrb	r7, [r0, r7]
 801fe68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fe6c:	4637      	mov	r7, r6
 801fe6e:	42bb      	cmp	r3, r7
 801fe70:	460e      	mov	r6, r1
 801fe72:	d9f4      	bls.n	801fe5e <_printf_i+0x11a>
 801fe74:	2b08      	cmp	r3, #8
 801fe76:	d10b      	bne.n	801fe90 <_printf_i+0x14c>
 801fe78:	6823      	ldr	r3, [r4, #0]
 801fe7a:	07de      	lsls	r6, r3, #31
 801fe7c:	d508      	bpl.n	801fe90 <_printf_i+0x14c>
 801fe7e:	6923      	ldr	r3, [r4, #16]
 801fe80:	6861      	ldr	r1, [r4, #4]
 801fe82:	4299      	cmp	r1, r3
 801fe84:	bfde      	ittt	le
 801fe86:	2330      	movle	r3, #48	; 0x30
 801fe88:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fe8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fe90:	1b52      	subs	r2, r2, r5
 801fe92:	6122      	str	r2, [r4, #16]
 801fe94:	f8cd a000 	str.w	sl, [sp]
 801fe98:	464b      	mov	r3, r9
 801fe9a:	aa03      	add	r2, sp, #12
 801fe9c:	4621      	mov	r1, r4
 801fe9e:	4640      	mov	r0, r8
 801fea0:	f7ff fee2 	bl	801fc68 <_printf_common>
 801fea4:	3001      	adds	r0, #1
 801fea6:	d14c      	bne.n	801ff42 <_printf_i+0x1fe>
 801fea8:	f04f 30ff 	mov.w	r0, #4294967295
 801feac:	b004      	add	sp, #16
 801feae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feb2:	4835      	ldr	r0, [pc, #212]	; (801ff88 <_printf_i+0x244>)
 801feb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801feb8:	6829      	ldr	r1, [r5, #0]
 801feba:	6823      	ldr	r3, [r4, #0]
 801febc:	f851 6b04 	ldr.w	r6, [r1], #4
 801fec0:	6029      	str	r1, [r5, #0]
 801fec2:	061d      	lsls	r5, r3, #24
 801fec4:	d514      	bpl.n	801fef0 <_printf_i+0x1ac>
 801fec6:	07df      	lsls	r7, r3, #31
 801fec8:	bf44      	itt	mi
 801feca:	f043 0320 	orrmi.w	r3, r3, #32
 801fece:	6023      	strmi	r3, [r4, #0]
 801fed0:	b91e      	cbnz	r6, 801feda <_printf_i+0x196>
 801fed2:	6823      	ldr	r3, [r4, #0]
 801fed4:	f023 0320 	bic.w	r3, r3, #32
 801fed8:	6023      	str	r3, [r4, #0]
 801feda:	2310      	movs	r3, #16
 801fedc:	e7b0      	b.n	801fe40 <_printf_i+0xfc>
 801fede:	6823      	ldr	r3, [r4, #0]
 801fee0:	f043 0320 	orr.w	r3, r3, #32
 801fee4:	6023      	str	r3, [r4, #0]
 801fee6:	2378      	movs	r3, #120	; 0x78
 801fee8:	4828      	ldr	r0, [pc, #160]	; (801ff8c <_printf_i+0x248>)
 801feea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801feee:	e7e3      	b.n	801feb8 <_printf_i+0x174>
 801fef0:	0659      	lsls	r1, r3, #25
 801fef2:	bf48      	it	mi
 801fef4:	b2b6      	uxthmi	r6, r6
 801fef6:	e7e6      	b.n	801fec6 <_printf_i+0x182>
 801fef8:	4615      	mov	r5, r2
 801fefa:	e7bb      	b.n	801fe74 <_printf_i+0x130>
 801fefc:	682b      	ldr	r3, [r5, #0]
 801fefe:	6826      	ldr	r6, [r4, #0]
 801ff00:	6961      	ldr	r1, [r4, #20]
 801ff02:	1d18      	adds	r0, r3, #4
 801ff04:	6028      	str	r0, [r5, #0]
 801ff06:	0635      	lsls	r5, r6, #24
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	d501      	bpl.n	801ff10 <_printf_i+0x1cc>
 801ff0c:	6019      	str	r1, [r3, #0]
 801ff0e:	e002      	b.n	801ff16 <_printf_i+0x1d2>
 801ff10:	0670      	lsls	r0, r6, #25
 801ff12:	d5fb      	bpl.n	801ff0c <_printf_i+0x1c8>
 801ff14:	8019      	strh	r1, [r3, #0]
 801ff16:	2300      	movs	r3, #0
 801ff18:	6123      	str	r3, [r4, #16]
 801ff1a:	4615      	mov	r5, r2
 801ff1c:	e7ba      	b.n	801fe94 <_printf_i+0x150>
 801ff1e:	682b      	ldr	r3, [r5, #0]
 801ff20:	1d1a      	adds	r2, r3, #4
 801ff22:	602a      	str	r2, [r5, #0]
 801ff24:	681d      	ldr	r5, [r3, #0]
 801ff26:	6862      	ldr	r2, [r4, #4]
 801ff28:	2100      	movs	r1, #0
 801ff2a:	4628      	mov	r0, r5
 801ff2c:	f7e0 f930 	bl	8000190 <memchr>
 801ff30:	b108      	cbz	r0, 801ff36 <_printf_i+0x1f2>
 801ff32:	1b40      	subs	r0, r0, r5
 801ff34:	6060      	str	r0, [r4, #4]
 801ff36:	6863      	ldr	r3, [r4, #4]
 801ff38:	6123      	str	r3, [r4, #16]
 801ff3a:	2300      	movs	r3, #0
 801ff3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ff40:	e7a8      	b.n	801fe94 <_printf_i+0x150>
 801ff42:	6923      	ldr	r3, [r4, #16]
 801ff44:	462a      	mov	r2, r5
 801ff46:	4649      	mov	r1, r9
 801ff48:	4640      	mov	r0, r8
 801ff4a:	47d0      	blx	sl
 801ff4c:	3001      	adds	r0, #1
 801ff4e:	d0ab      	beq.n	801fea8 <_printf_i+0x164>
 801ff50:	6823      	ldr	r3, [r4, #0]
 801ff52:	079b      	lsls	r3, r3, #30
 801ff54:	d413      	bmi.n	801ff7e <_printf_i+0x23a>
 801ff56:	68e0      	ldr	r0, [r4, #12]
 801ff58:	9b03      	ldr	r3, [sp, #12]
 801ff5a:	4298      	cmp	r0, r3
 801ff5c:	bfb8      	it	lt
 801ff5e:	4618      	movlt	r0, r3
 801ff60:	e7a4      	b.n	801feac <_printf_i+0x168>
 801ff62:	2301      	movs	r3, #1
 801ff64:	4632      	mov	r2, r6
 801ff66:	4649      	mov	r1, r9
 801ff68:	4640      	mov	r0, r8
 801ff6a:	47d0      	blx	sl
 801ff6c:	3001      	adds	r0, #1
 801ff6e:	d09b      	beq.n	801fea8 <_printf_i+0x164>
 801ff70:	3501      	adds	r5, #1
 801ff72:	68e3      	ldr	r3, [r4, #12]
 801ff74:	9903      	ldr	r1, [sp, #12]
 801ff76:	1a5b      	subs	r3, r3, r1
 801ff78:	42ab      	cmp	r3, r5
 801ff7a:	dcf2      	bgt.n	801ff62 <_printf_i+0x21e>
 801ff7c:	e7eb      	b.n	801ff56 <_printf_i+0x212>
 801ff7e:	2500      	movs	r5, #0
 801ff80:	f104 0619 	add.w	r6, r4, #25
 801ff84:	e7f5      	b.n	801ff72 <_printf_i+0x22e>
 801ff86:	bf00      	nop
 801ff88:	08023066 	.word	0x08023066
 801ff8c:	08023077 	.word	0x08023077

0801ff90 <iprintf>:
 801ff90:	b40f      	push	{r0, r1, r2, r3}
 801ff92:	4b0a      	ldr	r3, [pc, #40]	; (801ffbc <iprintf+0x2c>)
 801ff94:	b513      	push	{r0, r1, r4, lr}
 801ff96:	681c      	ldr	r4, [r3, #0]
 801ff98:	b124      	cbz	r4, 801ffa4 <iprintf+0x14>
 801ff9a:	69a3      	ldr	r3, [r4, #24]
 801ff9c:	b913      	cbnz	r3, 801ffa4 <iprintf+0x14>
 801ff9e:	4620      	mov	r0, r4
 801ffa0:	f7ff f942 	bl	801f228 <__sinit>
 801ffa4:	ab05      	add	r3, sp, #20
 801ffa6:	9a04      	ldr	r2, [sp, #16]
 801ffa8:	68a1      	ldr	r1, [r4, #8]
 801ffaa:	9301      	str	r3, [sp, #4]
 801ffac:	4620      	mov	r0, r4
 801ffae:	f001 fe65 	bl	8021c7c <_vfiprintf_r>
 801ffb2:	b002      	add	sp, #8
 801ffb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffb8:	b004      	add	sp, #16
 801ffba:	4770      	bx	lr
 801ffbc:	20000098 	.word	0x20000098

0801ffc0 <putchar>:
 801ffc0:	4b09      	ldr	r3, [pc, #36]	; (801ffe8 <putchar+0x28>)
 801ffc2:	b513      	push	{r0, r1, r4, lr}
 801ffc4:	681c      	ldr	r4, [r3, #0]
 801ffc6:	4601      	mov	r1, r0
 801ffc8:	b134      	cbz	r4, 801ffd8 <putchar+0x18>
 801ffca:	69a3      	ldr	r3, [r4, #24]
 801ffcc:	b923      	cbnz	r3, 801ffd8 <putchar+0x18>
 801ffce:	9001      	str	r0, [sp, #4]
 801ffd0:	4620      	mov	r0, r4
 801ffd2:	f7ff f929 	bl	801f228 <__sinit>
 801ffd6:	9901      	ldr	r1, [sp, #4]
 801ffd8:	68a2      	ldr	r2, [r4, #8]
 801ffda:	4620      	mov	r0, r4
 801ffdc:	b002      	add	sp, #8
 801ffde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffe2:	f001 bf7b 	b.w	8021edc <_putc_r>
 801ffe6:	bf00      	nop
 801ffe8:	20000098 	.word	0x20000098

0801ffec <_puts_r>:
 801ffec:	b570      	push	{r4, r5, r6, lr}
 801ffee:	460e      	mov	r6, r1
 801fff0:	4605      	mov	r5, r0
 801fff2:	b118      	cbz	r0, 801fffc <_puts_r+0x10>
 801fff4:	6983      	ldr	r3, [r0, #24]
 801fff6:	b90b      	cbnz	r3, 801fffc <_puts_r+0x10>
 801fff8:	f7ff f916 	bl	801f228 <__sinit>
 801fffc:	69ab      	ldr	r3, [r5, #24]
 801fffe:	68ac      	ldr	r4, [r5, #8]
 8020000:	b913      	cbnz	r3, 8020008 <_puts_r+0x1c>
 8020002:	4628      	mov	r0, r5
 8020004:	f7ff f910 	bl	801f228 <__sinit>
 8020008:	4b2c      	ldr	r3, [pc, #176]	; (80200bc <_puts_r+0xd0>)
 802000a:	429c      	cmp	r4, r3
 802000c:	d120      	bne.n	8020050 <_puts_r+0x64>
 802000e:	686c      	ldr	r4, [r5, #4]
 8020010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020012:	07db      	lsls	r3, r3, #31
 8020014:	d405      	bmi.n	8020022 <_puts_r+0x36>
 8020016:	89a3      	ldrh	r3, [r4, #12]
 8020018:	0598      	lsls	r0, r3, #22
 802001a:	d402      	bmi.n	8020022 <_puts_r+0x36>
 802001c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802001e:	f7ff f9c6 	bl	801f3ae <__retarget_lock_acquire_recursive>
 8020022:	89a3      	ldrh	r3, [r4, #12]
 8020024:	0719      	lsls	r1, r3, #28
 8020026:	d51d      	bpl.n	8020064 <_puts_r+0x78>
 8020028:	6923      	ldr	r3, [r4, #16]
 802002a:	b1db      	cbz	r3, 8020064 <_puts_r+0x78>
 802002c:	3e01      	subs	r6, #1
 802002e:	68a3      	ldr	r3, [r4, #8]
 8020030:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020034:	3b01      	subs	r3, #1
 8020036:	60a3      	str	r3, [r4, #8]
 8020038:	bb39      	cbnz	r1, 802008a <_puts_r+0x9e>
 802003a:	2b00      	cmp	r3, #0
 802003c:	da38      	bge.n	80200b0 <_puts_r+0xc4>
 802003e:	4622      	mov	r2, r4
 8020040:	210a      	movs	r1, #10
 8020042:	4628      	mov	r0, r5
 8020044:	f000 f918 	bl	8020278 <__swbuf_r>
 8020048:	3001      	adds	r0, #1
 802004a:	d011      	beq.n	8020070 <_puts_r+0x84>
 802004c:	250a      	movs	r5, #10
 802004e:	e011      	b.n	8020074 <_puts_r+0x88>
 8020050:	4b1b      	ldr	r3, [pc, #108]	; (80200c0 <_puts_r+0xd4>)
 8020052:	429c      	cmp	r4, r3
 8020054:	d101      	bne.n	802005a <_puts_r+0x6e>
 8020056:	68ac      	ldr	r4, [r5, #8]
 8020058:	e7da      	b.n	8020010 <_puts_r+0x24>
 802005a:	4b1a      	ldr	r3, [pc, #104]	; (80200c4 <_puts_r+0xd8>)
 802005c:	429c      	cmp	r4, r3
 802005e:	bf08      	it	eq
 8020060:	68ec      	ldreq	r4, [r5, #12]
 8020062:	e7d5      	b.n	8020010 <_puts_r+0x24>
 8020064:	4621      	mov	r1, r4
 8020066:	4628      	mov	r0, r5
 8020068:	f000 f96a 	bl	8020340 <__swsetup_r>
 802006c:	2800      	cmp	r0, #0
 802006e:	d0dd      	beq.n	802002c <_puts_r+0x40>
 8020070:	f04f 35ff 	mov.w	r5, #4294967295
 8020074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020076:	07da      	lsls	r2, r3, #31
 8020078:	d405      	bmi.n	8020086 <_puts_r+0x9a>
 802007a:	89a3      	ldrh	r3, [r4, #12]
 802007c:	059b      	lsls	r3, r3, #22
 802007e:	d402      	bmi.n	8020086 <_puts_r+0x9a>
 8020080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020082:	f7ff f995 	bl	801f3b0 <__retarget_lock_release_recursive>
 8020086:	4628      	mov	r0, r5
 8020088:	bd70      	pop	{r4, r5, r6, pc}
 802008a:	2b00      	cmp	r3, #0
 802008c:	da04      	bge.n	8020098 <_puts_r+0xac>
 802008e:	69a2      	ldr	r2, [r4, #24]
 8020090:	429a      	cmp	r2, r3
 8020092:	dc06      	bgt.n	80200a2 <_puts_r+0xb6>
 8020094:	290a      	cmp	r1, #10
 8020096:	d004      	beq.n	80200a2 <_puts_r+0xb6>
 8020098:	6823      	ldr	r3, [r4, #0]
 802009a:	1c5a      	adds	r2, r3, #1
 802009c:	6022      	str	r2, [r4, #0]
 802009e:	7019      	strb	r1, [r3, #0]
 80200a0:	e7c5      	b.n	802002e <_puts_r+0x42>
 80200a2:	4622      	mov	r2, r4
 80200a4:	4628      	mov	r0, r5
 80200a6:	f000 f8e7 	bl	8020278 <__swbuf_r>
 80200aa:	3001      	adds	r0, #1
 80200ac:	d1bf      	bne.n	802002e <_puts_r+0x42>
 80200ae:	e7df      	b.n	8020070 <_puts_r+0x84>
 80200b0:	6823      	ldr	r3, [r4, #0]
 80200b2:	250a      	movs	r5, #10
 80200b4:	1c5a      	adds	r2, r3, #1
 80200b6:	6022      	str	r2, [r4, #0]
 80200b8:	701d      	strb	r5, [r3, #0]
 80200ba:	e7db      	b.n	8020074 <_puts_r+0x88>
 80200bc:	08023010 	.word	0x08023010
 80200c0:	08023030 	.word	0x08023030
 80200c4:	08022ff0 	.word	0x08022ff0

080200c8 <puts>:
 80200c8:	4b02      	ldr	r3, [pc, #8]	; (80200d4 <puts+0xc>)
 80200ca:	4601      	mov	r1, r0
 80200cc:	6818      	ldr	r0, [r3, #0]
 80200ce:	f7ff bf8d 	b.w	801ffec <_puts_r>
 80200d2:	bf00      	nop
 80200d4:	20000098 	.word	0x20000098

080200d8 <_sbrk_r>:
 80200d8:	b538      	push	{r3, r4, r5, lr}
 80200da:	4d06      	ldr	r5, [pc, #24]	; (80200f4 <_sbrk_r+0x1c>)
 80200dc:	2300      	movs	r3, #0
 80200de:	4604      	mov	r4, r0
 80200e0:	4608      	mov	r0, r1
 80200e2:	602b      	str	r3, [r5, #0]
 80200e4:	f7e3 fbe4 	bl	80038b0 <_sbrk>
 80200e8:	1c43      	adds	r3, r0, #1
 80200ea:	d102      	bne.n	80200f2 <_sbrk_r+0x1a>
 80200ec:	682b      	ldr	r3, [r5, #0]
 80200ee:	b103      	cbz	r3, 80200f2 <_sbrk_r+0x1a>
 80200f0:	6023      	str	r3, [r4, #0]
 80200f2:	bd38      	pop	{r3, r4, r5, pc}
 80200f4:	20009a24 	.word	0x20009a24

080200f8 <siprintf>:
 80200f8:	b40e      	push	{r1, r2, r3}
 80200fa:	b500      	push	{lr}
 80200fc:	b09c      	sub	sp, #112	; 0x70
 80200fe:	ab1d      	add	r3, sp, #116	; 0x74
 8020100:	9002      	str	r0, [sp, #8]
 8020102:	9006      	str	r0, [sp, #24]
 8020104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020108:	4809      	ldr	r0, [pc, #36]	; (8020130 <siprintf+0x38>)
 802010a:	9107      	str	r1, [sp, #28]
 802010c:	9104      	str	r1, [sp, #16]
 802010e:	4909      	ldr	r1, [pc, #36]	; (8020134 <siprintf+0x3c>)
 8020110:	f853 2b04 	ldr.w	r2, [r3], #4
 8020114:	9105      	str	r1, [sp, #20]
 8020116:	6800      	ldr	r0, [r0, #0]
 8020118:	9301      	str	r3, [sp, #4]
 802011a:	a902      	add	r1, sp, #8
 802011c:	f001 fc84 	bl	8021a28 <_svfiprintf_r>
 8020120:	9b02      	ldr	r3, [sp, #8]
 8020122:	2200      	movs	r2, #0
 8020124:	701a      	strb	r2, [r3, #0]
 8020126:	b01c      	add	sp, #112	; 0x70
 8020128:	f85d eb04 	ldr.w	lr, [sp], #4
 802012c:	b003      	add	sp, #12
 802012e:	4770      	bx	lr
 8020130:	20000098 	.word	0x20000098
 8020134:	ffff0208 	.word	0xffff0208

08020138 <__sread>:
 8020138:	b510      	push	{r4, lr}
 802013a:	460c      	mov	r4, r1
 802013c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020140:	f001 ff14 	bl	8021f6c <_read_r>
 8020144:	2800      	cmp	r0, #0
 8020146:	bfab      	itete	ge
 8020148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802014a:	89a3      	ldrhlt	r3, [r4, #12]
 802014c:	181b      	addge	r3, r3, r0
 802014e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020152:	bfac      	ite	ge
 8020154:	6563      	strge	r3, [r4, #84]	; 0x54
 8020156:	81a3      	strhlt	r3, [r4, #12]
 8020158:	bd10      	pop	{r4, pc}

0802015a <__swrite>:
 802015a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802015e:	461f      	mov	r7, r3
 8020160:	898b      	ldrh	r3, [r1, #12]
 8020162:	05db      	lsls	r3, r3, #23
 8020164:	4605      	mov	r5, r0
 8020166:	460c      	mov	r4, r1
 8020168:	4616      	mov	r6, r2
 802016a:	d505      	bpl.n	8020178 <__swrite+0x1e>
 802016c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020170:	2302      	movs	r3, #2
 8020172:	2200      	movs	r2, #0
 8020174:	f001 f804 	bl	8021180 <_lseek_r>
 8020178:	89a3      	ldrh	r3, [r4, #12]
 802017a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802017e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020182:	81a3      	strh	r3, [r4, #12]
 8020184:	4632      	mov	r2, r6
 8020186:	463b      	mov	r3, r7
 8020188:	4628      	mov	r0, r5
 802018a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802018e:	f000 b8c5 	b.w	802031c <_write_r>

08020192 <__sseek>:
 8020192:	b510      	push	{r4, lr}
 8020194:	460c      	mov	r4, r1
 8020196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802019a:	f000 fff1 	bl	8021180 <_lseek_r>
 802019e:	1c43      	adds	r3, r0, #1
 80201a0:	89a3      	ldrh	r3, [r4, #12]
 80201a2:	bf15      	itete	ne
 80201a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80201a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80201aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80201ae:	81a3      	strheq	r3, [r4, #12]
 80201b0:	bf18      	it	ne
 80201b2:	81a3      	strhne	r3, [r4, #12]
 80201b4:	bd10      	pop	{r4, pc}

080201b6 <__sclose>:
 80201b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80201ba:	f000 b92f 	b.w	802041c <_close_r>

080201be <strncmp>:
 80201be:	b510      	push	{r4, lr}
 80201c0:	b17a      	cbz	r2, 80201e2 <strncmp+0x24>
 80201c2:	4603      	mov	r3, r0
 80201c4:	3901      	subs	r1, #1
 80201c6:	1884      	adds	r4, r0, r2
 80201c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80201cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80201d0:	4290      	cmp	r0, r2
 80201d2:	d101      	bne.n	80201d8 <strncmp+0x1a>
 80201d4:	42a3      	cmp	r3, r4
 80201d6:	d101      	bne.n	80201dc <strncmp+0x1e>
 80201d8:	1a80      	subs	r0, r0, r2
 80201da:	bd10      	pop	{r4, pc}
 80201dc:	2800      	cmp	r0, #0
 80201de:	d1f3      	bne.n	80201c8 <strncmp+0xa>
 80201e0:	e7fa      	b.n	80201d8 <strncmp+0x1a>
 80201e2:	4610      	mov	r0, r2
 80201e4:	e7f9      	b.n	80201da <strncmp+0x1c>

080201e6 <strncpy>:
 80201e6:	b510      	push	{r4, lr}
 80201e8:	3901      	subs	r1, #1
 80201ea:	4603      	mov	r3, r0
 80201ec:	b132      	cbz	r2, 80201fc <strncpy+0x16>
 80201ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80201f2:	f803 4b01 	strb.w	r4, [r3], #1
 80201f6:	3a01      	subs	r2, #1
 80201f8:	2c00      	cmp	r4, #0
 80201fa:	d1f7      	bne.n	80201ec <strncpy+0x6>
 80201fc:	441a      	add	r2, r3
 80201fe:	2100      	movs	r1, #0
 8020200:	4293      	cmp	r3, r2
 8020202:	d100      	bne.n	8020206 <strncpy+0x20>
 8020204:	bd10      	pop	{r4, pc}
 8020206:	f803 1b01 	strb.w	r1, [r3], #1
 802020a:	e7f9      	b.n	8020200 <strncpy+0x1a>

0802020c <strstr>:
 802020c:	780a      	ldrb	r2, [r1, #0]
 802020e:	b570      	push	{r4, r5, r6, lr}
 8020210:	b96a      	cbnz	r2, 802022e <strstr+0x22>
 8020212:	bd70      	pop	{r4, r5, r6, pc}
 8020214:	429a      	cmp	r2, r3
 8020216:	d109      	bne.n	802022c <strstr+0x20>
 8020218:	460c      	mov	r4, r1
 802021a:	4605      	mov	r5, r0
 802021c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8020220:	2b00      	cmp	r3, #0
 8020222:	d0f6      	beq.n	8020212 <strstr+0x6>
 8020224:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8020228:	429e      	cmp	r6, r3
 802022a:	d0f7      	beq.n	802021c <strstr+0x10>
 802022c:	3001      	adds	r0, #1
 802022e:	7803      	ldrb	r3, [r0, #0]
 8020230:	2b00      	cmp	r3, #0
 8020232:	d1ef      	bne.n	8020214 <strstr+0x8>
 8020234:	4618      	mov	r0, r3
 8020236:	e7ec      	b.n	8020212 <strstr+0x6>

08020238 <_vsiprintf_r>:
 8020238:	b500      	push	{lr}
 802023a:	b09b      	sub	sp, #108	; 0x6c
 802023c:	9100      	str	r1, [sp, #0]
 802023e:	9104      	str	r1, [sp, #16]
 8020240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020244:	9105      	str	r1, [sp, #20]
 8020246:	9102      	str	r1, [sp, #8]
 8020248:	4905      	ldr	r1, [pc, #20]	; (8020260 <_vsiprintf_r+0x28>)
 802024a:	9103      	str	r1, [sp, #12]
 802024c:	4669      	mov	r1, sp
 802024e:	f001 fbeb 	bl	8021a28 <_svfiprintf_r>
 8020252:	9b00      	ldr	r3, [sp, #0]
 8020254:	2200      	movs	r2, #0
 8020256:	701a      	strb	r2, [r3, #0]
 8020258:	b01b      	add	sp, #108	; 0x6c
 802025a:	f85d fb04 	ldr.w	pc, [sp], #4
 802025e:	bf00      	nop
 8020260:	ffff0208 	.word	0xffff0208

08020264 <vsiprintf>:
 8020264:	4613      	mov	r3, r2
 8020266:	460a      	mov	r2, r1
 8020268:	4601      	mov	r1, r0
 802026a:	4802      	ldr	r0, [pc, #8]	; (8020274 <vsiprintf+0x10>)
 802026c:	6800      	ldr	r0, [r0, #0]
 802026e:	f7ff bfe3 	b.w	8020238 <_vsiprintf_r>
 8020272:	bf00      	nop
 8020274:	20000098 	.word	0x20000098

08020278 <__swbuf_r>:
 8020278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802027a:	460e      	mov	r6, r1
 802027c:	4614      	mov	r4, r2
 802027e:	4605      	mov	r5, r0
 8020280:	b118      	cbz	r0, 802028a <__swbuf_r+0x12>
 8020282:	6983      	ldr	r3, [r0, #24]
 8020284:	b90b      	cbnz	r3, 802028a <__swbuf_r+0x12>
 8020286:	f7fe ffcf 	bl	801f228 <__sinit>
 802028a:	4b21      	ldr	r3, [pc, #132]	; (8020310 <__swbuf_r+0x98>)
 802028c:	429c      	cmp	r4, r3
 802028e:	d12b      	bne.n	80202e8 <__swbuf_r+0x70>
 8020290:	686c      	ldr	r4, [r5, #4]
 8020292:	69a3      	ldr	r3, [r4, #24]
 8020294:	60a3      	str	r3, [r4, #8]
 8020296:	89a3      	ldrh	r3, [r4, #12]
 8020298:	071a      	lsls	r2, r3, #28
 802029a:	d52f      	bpl.n	80202fc <__swbuf_r+0x84>
 802029c:	6923      	ldr	r3, [r4, #16]
 802029e:	b36b      	cbz	r3, 80202fc <__swbuf_r+0x84>
 80202a0:	6923      	ldr	r3, [r4, #16]
 80202a2:	6820      	ldr	r0, [r4, #0]
 80202a4:	1ac0      	subs	r0, r0, r3
 80202a6:	6963      	ldr	r3, [r4, #20]
 80202a8:	b2f6      	uxtb	r6, r6
 80202aa:	4283      	cmp	r3, r0
 80202ac:	4637      	mov	r7, r6
 80202ae:	dc04      	bgt.n	80202ba <__swbuf_r+0x42>
 80202b0:	4621      	mov	r1, r4
 80202b2:	4628      	mov	r0, r5
 80202b4:	f7fe ff24 	bl	801f100 <_fflush_r>
 80202b8:	bb30      	cbnz	r0, 8020308 <__swbuf_r+0x90>
 80202ba:	68a3      	ldr	r3, [r4, #8]
 80202bc:	3b01      	subs	r3, #1
 80202be:	60a3      	str	r3, [r4, #8]
 80202c0:	6823      	ldr	r3, [r4, #0]
 80202c2:	1c5a      	adds	r2, r3, #1
 80202c4:	6022      	str	r2, [r4, #0]
 80202c6:	701e      	strb	r6, [r3, #0]
 80202c8:	6963      	ldr	r3, [r4, #20]
 80202ca:	3001      	adds	r0, #1
 80202cc:	4283      	cmp	r3, r0
 80202ce:	d004      	beq.n	80202da <__swbuf_r+0x62>
 80202d0:	89a3      	ldrh	r3, [r4, #12]
 80202d2:	07db      	lsls	r3, r3, #31
 80202d4:	d506      	bpl.n	80202e4 <__swbuf_r+0x6c>
 80202d6:	2e0a      	cmp	r6, #10
 80202d8:	d104      	bne.n	80202e4 <__swbuf_r+0x6c>
 80202da:	4621      	mov	r1, r4
 80202dc:	4628      	mov	r0, r5
 80202de:	f7fe ff0f 	bl	801f100 <_fflush_r>
 80202e2:	b988      	cbnz	r0, 8020308 <__swbuf_r+0x90>
 80202e4:	4638      	mov	r0, r7
 80202e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80202e8:	4b0a      	ldr	r3, [pc, #40]	; (8020314 <__swbuf_r+0x9c>)
 80202ea:	429c      	cmp	r4, r3
 80202ec:	d101      	bne.n	80202f2 <__swbuf_r+0x7a>
 80202ee:	68ac      	ldr	r4, [r5, #8]
 80202f0:	e7cf      	b.n	8020292 <__swbuf_r+0x1a>
 80202f2:	4b09      	ldr	r3, [pc, #36]	; (8020318 <__swbuf_r+0xa0>)
 80202f4:	429c      	cmp	r4, r3
 80202f6:	bf08      	it	eq
 80202f8:	68ec      	ldreq	r4, [r5, #12]
 80202fa:	e7ca      	b.n	8020292 <__swbuf_r+0x1a>
 80202fc:	4621      	mov	r1, r4
 80202fe:	4628      	mov	r0, r5
 8020300:	f000 f81e 	bl	8020340 <__swsetup_r>
 8020304:	2800      	cmp	r0, #0
 8020306:	d0cb      	beq.n	80202a0 <__swbuf_r+0x28>
 8020308:	f04f 37ff 	mov.w	r7, #4294967295
 802030c:	e7ea      	b.n	80202e4 <__swbuf_r+0x6c>
 802030e:	bf00      	nop
 8020310:	08023010 	.word	0x08023010
 8020314:	08023030 	.word	0x08023030
 8020318:	08022ff0 	.word	0x08022ff0

0802031c <_write_r>:
 802031c:	b538      	push	{r3, r4, r5, lr}
 802031e:	4d07      	ldr	r5, [pc, #28]	; (802033c <_write_r+0x20>)
 8020320:	4604      	mov	r4, r0
 8020322:	4608      	mov	r0, r1
 8020324:	4611      	mov	r1, r2
 8020326:	2200      	movs	r2, #0
 8020328:	602a      	str	r2, [r5, #0]
 802032a:	461a      	mov	r2, r3
 802032c:	f7e1 f8a6 	bl	800147c <_write>
 8020330:	1c43      	adds	r3, r0, #1
 8020332:	d102      	bne.n	802033a <_write_r+0x1e>
 8020334:	682b      	ldr	r3, [r5, #0]
 8020336:	b103      	cbz	r3, 802033a <_write_r+0x1e>
 8020338:	6023      	str	r3, [r4, #0]
 802033a:	bd38      	pop	{r3, r4, r5, pc}
 802033c:	20009a24 	.word	0x20009a24

08020340 <__swsetup_r>:
 8020340:	4b32      	ldr	r3, [pc, #200]	; (802040c <__swsetup_r+0xcc>)
 8020342:	b570      	push	{r4, r5, r6, lr}
 8020344:	681d      	ldr	r5, [r3, #0]
 8020346:	4606      	mov	r6, r0
 8020348:	460c      	mov	r4, r1
 802034a:	b125      	cbz	r5, 8020356 <__swsetup_r+0x16>
 802034c:	69ab      	ldr	r3, [r5, #24]
 802034e:	b913      	cbnz	r3, 8020356 <__swsetup_r+0x16>
 8020350:	4628      	mov	r0, r5
 8020352:	f7fe ff69 	bl	801f228 <__sinit>
 8020356:	4b2e      	ldr	r3, [pc, #184]	; (8020410 <__swsetup_r+0xd0>)
 8020358:	429c      	cmp	r4, r3
 802035a:	d10f      	bne.n	802037c <__swsetup_r+0x3c>
 802035c:	686c      	ldr	r4, [r5, #4]
 802035e:	89a3      	ldrh	r3, [r4, #12]
 8020360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020364:	0719      	lsls	r1, r3, #28
 8020366:	d42c      	bmi.n	80203c2 <__swsetup_r+0x82>
 8020368:	06dd      	lsls	r5, r3, #27
 802036a:	d411      	bmi.n	8020390 <__swsetup_r+0x50>
 802036c:	2309      	movs	r3, #9
 802036e:	6033      	str	r3, [r6, #0]
 8020370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020374:	81a3      	strh	r3, [r4, #12]
 8020376:	f04f 30ff 	mov.w	r0, #4294967295
 802037a:	e03e      	b.n	80203fa <__swsetup_r+0xba>
 802037c:	4b25      	ldr	r3, [pc, #148]	; (8020414 <__swsetup_r+0xd4>)
 802037e:	429c      	cmp	r4, r3
 8020380:	d101      	bne.n	8020386 <__swsetup_r+0x46>
 8020382:	68ac      	ldr	r4, [r5, #8]
 8020384:	e7eb      	b.n	802035e <__swsetup_r+0x1e>
 8020386:	4b24      	ldr	r3, [pc, #144]	; (8020418 <__swsetup_r+0xd8>)
 8020388:	429c      	cmp	r4, r3
 802038a:	bf08      	it	eq
 802038c:	68ec      	ldreq	r4, [r5, #12]
 802038e:	e7e6      	b.n	802035e <__swsetup_r+0x1e>
 8020390:	0758      	lsls	r0, r3, #29
 8020392:	d512      	bpl.n	80203ba <__swsetup_r+0x7a>
 8020394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020396:	b141      	cbz	r1, 80203aa <__swsetup_r+0x6a>
 8020398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802039c:	4299      	cmp	r1, r3
 802039e:	d002      	beq.n	80203a6 <__swsetup_r+0x66>
 80203a0:	4630      	mov	r0, r6
 80203a2:	f7ff f8ab 	bl	801f4fc <_free_r>
 80203a6:	2300      	movs	r3, #0
 80203a8:	6363      	str	r3, [r4, #52]	; 0x34
 80203aa:	89a3      	ldrh	r3, [r4, #12]
 80203ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80203b0:	81a3      	strh	r3, [r4, #12]
 80203b2:	2300      	movs	r3, #0
 80203b4:	6063      	str	r3, [r4, #4]
 80203b6:	6923      	ldr	r3, [r4, #16]
 80203b8:	6023      	str	r3, [r4, #0]
 80203ba:	89a3      	ldrh	r3, [r4, #12]
 80203bc:	f043 0308 	orr.w	r3, r3, #8
 80203c0:	81a3      	strh	r3, [r4, #12]
 80203c2:	6923      	ldr	r3, [r4, #16]
 80203c4:	b94b      	cbnz	r3, 80203da <__swsetup_r+0x9a>
 80203c6:	89a3      	ldrh	r3, [r4, #12]
 80203c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80203cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80203d0:	d003      	beq.n	80203da <__swsetup_r+0x9a>
 80203d2:	4621      	mov	r1, r4
 80203d4:	4630      	mov	r0, r6
 80203d6:	f7ff f811 	bl	801f3fc <__smakebuf_r>
 80203da:	89a0      	ldrh	r0, [r4, #12]
 80203dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80203e0:	f010 0301 	ands.w	r3, r0, #1
 80203e4:	d00a      	beq.n	80203fc <__swsetup_r+0xbc>
 80203e6:	2300      	movs	r3, #0
 80203e8:	60a3      	str	r3, [r4, #8]
 80203ea:	6963      	ldr	r3, [r4, #20]
 80203ec:	425b      	negs	r3, r3
 80203ee:	61a3      	str	r3, [r4, #24]
 80203f0:	6923      	ldr	r3, [r4, #16]
 80203f2:	b943      	cbnz	r3, 8020406 <__swsetup_r+0xc6>
 80203f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80203f8:	d1ba      	bne.n	8020370 <__swsetup_r+0x30>
 80203fa:	bd70      	pop	{r4, r5, r6, pc}
 80203fc:	0781      	lsls	r1, r0, #30
 80203fe:	bf58      	it	pl
 8020400:	6963      	ldrpl	r3, [r4, #20]
 8020402:	60a3      	str	r3, [r4, #8]
 8020404:	e7f4      	b.n	80203f0 <__swsetup_r+0xb0>
 8020406:	2000      	movs	r0, #0
 8020408:	e7f7      	b.n	80203fa <__swsetup_r+0xba>
 802040a:	bf00      	nop
 802040c:	20000098 	.word	0x20000098
 8020410:	08023010 	.word	0x08023010
 8020414:	08023030 	.word	0x08023030
 8020418:	08022ff0 	.word	0x08022ff0

0802041c <_close_r>:
 802041c:	b538      	push	{r3, r4, r5, lr}
 802041e:	4d06      	ldr	r5, [pc, #24]	; (8020438 <_close_r+0x1c>)
 8020420:	2300      	movs	r3, #0
 8020422:	4604      	mov	r4, r0
 8020424:	4608      	mov	r0, r1
 8020426:	602b      	str	r3, [r5, #0]
 8020428:	f7e3 fa0d 	bl	8003846 <_close>
 802042c:	1c43      	adds	r3, r0, #1
 802042e:	d102      	bne.n	8020436 <_close_r+0x1a>
 8020430:	682b      	ldr	r3, [r5, #0]
 8020432:	b103      	cbz	r3, 8020436 <_close_r+0x1a>
 8020434:	6023      	str	r3, [r4, #0]
 8020436:	bd38      	pop	{r3, r4, r5, pc}
 8020438:	20009a24 	.word	0x20009a24

0802043c <quorem>:
 802043c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020440:	6903      	ldr	r3, [r0, #16]
 8020442:	690c      	ldr	r4, [r1, #16]
 8020444:	42a3      	cmp	r3, r4
 8020446:	4607      	mov	r7, r0
 8020448:	f2c0 8081 	blt.w	802054e <quorem+0x112>
 802044c:	3c01      	subs	r4, #1
 802044e:	f101 0814 	add.w	r8, r1, #20
 8020452:	f100 0514 	add.w	r5, r0, #20
 8020456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802045a:	9301      	str	r3, [sp, #4]
 802045c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020464:	3301      	adds	r3, #1
 8020466:	429a      	cmp	r2, r3
 8020468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802046c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020470:	fbb2 f6f3 	udiv	r6, r2, r3
 8020474:	d331      	bcc.n	80204da <quorem+0x9e>
 8020476:	f04f 0e00 	mov.w	lr, #0
 802047a:	4640      	mov	r0, r8
 802047c:	46ac      	mov	ip, r5
 802047e:	46f2      	mov	sl, lr
 8020480:	f850 2b04 	ldr.w	r2, [r0], #4
 8020484:	b293      	uxth	r3, r2
 8020486:	fb06 e303 	mla	r3, r6, r3, lr
 802048a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802048e:	b29b      	uxth	r3, r3
 8020490:	ebaa 0303 	sub.w	r3, sl, r3
 8020494:	f8dc a000 	ldr.w	sl, [ip]
 8020498:	0c12      	lsrs	r2, r2, #16
 802049a:	fa13 f38a 	uxtah	r3, r3, sl
 802049e:	fb06 e202 	mla	r2, r6, r2, lr
 80204a2:	9300      	str	r3, [sp, #0]
 80204a4:	9b00      	ldr	r3, [sp, #0]
 80204a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80204aa:	b292      	uxth	r2, r2
 80204ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80204b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80204b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80204b8:	4581      	cmp	r9, r0
 80204ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80204be:	f84c 3b04 	str.w	r3, [ip], #4
 80204c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80204c6:	d2db      	bcs.n	8020480 <quorem+0x44>
 80204c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80204cc:	b92b      	cbnz	r3, 80204da <quorem+0x9e>
 80204ce:	9b01      	ldr	r3, [sp, #4]
 80204d0:	3b04      	subs	r3, #4
 80204d2:	429d      	cmp	r5, r3
 80204d4:	461a      	mov	r2, r3
 80204d6:	d32e      	bcc.n	8020536 <quorem+0xfa>
 80204d8:	613c      	str	r4, [r7, #16]
 80204da:	4638      	mov	r0, r7
 80204dc:	f001 f902 	bl	80216e4 <__mcmp>
 80204e0:	2800      	cmp	r0, #0
 80204e2:	db24      	blt.n	802052e <quorem+0xf2>
 80204e4:	3601      	adds	r6, #1
 80204e6:	4628      	mov	r0, r5
 80204e8:	f04f 0c00 	mov.w	ip, #0
 80204ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80204f0:	f8d0 e000 	ldr.w	lr, [r0]
 80204f4:	b293      	uxth	r3, r2
 80204f6:	ebac 0303 	sub.w	r3, ip, r3
 80204fa:	0c12      	lsrs	r2, r2, #16
 80204fc:	fa13 f38e 	uxtah	r3, r3, lr
 8020500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020508:	b29b      	uxth	r3, r3
 802050a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802050e:	45c1      	cmp	r9, r8
 8020510:	f840 3b04 	str.w	r3, [r0], #4
 8020514:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020518:	d2e8      	bcs.n	80204ec <quorem+0xb0>
 802051a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802051e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020522:	b922      	cbnz	r2, 802052e <quorem+0xf2>
 8020524:	3b04      	subs	r3, #4
 8020526:	429d      	cmp	r5, r3
 8020528:	461a      	mov	r2, r3
 802052a:	d30a      	bcc.n	8020542 <quorem+0x106>
 802052c:	613c      	str	r4, [r7, #16]
 802052e:	4630      	mov	r0, r6
 8020530:	b003      	add	sp, #12
 8020532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020536:	6812      	ldr	r2, [r2, #0]
 8020538:	3b04      	subs	r3, #4
 802053a:	2a00      	cmp	r2, #0
 802053c:	d1cc      	bne.n	80204d8 <quorem+0x9c>
 802053e:	3c01      	subs	r4, #1
 8020540:	e7c7      	b.n	80204d2 <quorem+0x96>
 8020542:	6812      	ldr	r2, [r2, #0]
 8020544:	3b04      	subs	r3, #4
 8020546:	2a00      	cmp	r2, #0
 8020548:	d1f0      	bne.n	802052c <quorem+0xf0>
 802054a:	3c01      	subs	r4, #1
 802054c:	e7eb      	b.n	8020526 <quorem+0xea>
 802054e:	2000      	movs	r0, #0
 8020550:	e7ee      	b.n	8020530 <quorem+0xf4>
 8020552:	0000      	movs	r0, r0
 8020554:	0000      	movs	r0, r0
	...

08020558 <_dtoa_r>:
 8020558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802055c:	ed2d 8b04 	vpush	{d8-d9}
 8020560:	ec57 6b10 	vmov	r6, r7, d0
 8020564:	b093      	sub	sp, #76	; 0x4c
 8020566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802056c:	9106      	str	r1, [sp, #24]
 802056e:	ee10 aa10 	vmov	sl, s0
 8020572:	4604      	mov	r4, r0
 8020574:	9209      	str	r2, [sp, #36]	; 0x24
 8020576:	930c      	str	r3, [sp, #48]	; 0x30
 8020578:	46bb      	mov	fp, r7
 802057a:	b975      	cbnz	r5, 802059a <_dtoa_r+0x42>
 802057c:	2010      	movs	r0, #16
 802057e:	f7fe ff7d 	bl	801f47c <malloc>
 8020582:	4602      	mov	r2, r0
 8020584:	6260      	str	r0, [r4, #36]	; 0x24
 8020586:	b920      	cbnz	r0, 8020592 <_dtoa_r+0x3a>
 8020588:	4ba7      	ldr	r3, [pc, #668]	; (8020828 <_dtoa_r+0x2d0>)
 802058a:	21ea      	movs	r1, #234	; 0xea
 802058c:	48a7      	ldr	r0, [pc, #668]	; (802082c <_dtoa_r+0x2d4>)
 802058e:	f001 fd0d 	bl	8021fac <__assert_func>
 8020592:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020596:	6005      	str	r5, [r0, #0]
 8020598:	60c5      	str	r5, [r0, #12]
 802059a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802059c:	6819      	ldr	r1, [r3, #0]
 802059e:	b151      	cbz	r1, 80205b6 <_dtoa_r+0x5e>
 80205a0:	685a      	ldr	r2, [r3, #4]
 80205a2:	604a      	str	r2, [r1, #4]
 80205a4:	2301      	movs	r3, #1
 80205a6:	4093      	lsls	r3, r2
 80205a8:	608b      	str	r3, [r1, #8]
 80205aa:	4620      	mov	r0, r4
 80205ac:	f000 fe58 	bl	8021260 <_Bfree>
 80205b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80205b2:	2200      	movs	r2, #0
 80205b4:	601a      	str	r2, [r3, #0]
 80205b6:	1e3b      	subs	r3, r7, #0
 80205b8:	bfaa      	itet	ge
 80205ba:	2300      	movge	r3, #0
 80205bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80205c0:	f8c8 3000 	strge.w	r3, [r8]
 80205c4:	4b9a      	ldr	r3, [pc, #616]	; (8020830 <_dtoa_r+0x2d8>)
 80205c6:	bfbc      	itt	lt
 80205c8:	2201      	movlt	r2, #1
 80205ca:	f8c8 2000 	strlt.w	r2, [r8]
 80205ce:	ea33 030b 	bics.w	r3, r3, fp
 80205d2:	d11b      	bne.n	802060c <_dtoa_r+0xb4>
 80205d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80205d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80205da:	6013      	str	r3, [r2, #0]
 80205dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80205e0:	4333      	orrs	r3, r6
 80205e2:	f000 8592 	beq.w	802110a <_dtoa_r+0xbb2>
 80205e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80205e8:	b963      	cbnz	r3, 8020604 <_dtoa_r+0xac>
 80205ea:	4b92      	ldr	r3, [pc, #584]	; (8020834 <_dtoa_r+0x2dc>)
 80205ec:	e022      	b.n	8020634 <_dtoa_r+0xdc>
 80205ee:	4b92      	ldr	r3, [pc, #584]	; (8020838 <_dtoa_r+0x2e0>)
 80205f0:	9301      	str	r3, [sp, #4]
 80205f2:	3308      	adds	r3, #8
 80205f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80205f6:	6013      	str	r3, [r2, #0]
 80205f8:	9801      	ldr	r0, [sp, #4]
 80205fa:	b013      	add	sp, #76	; 0x4c
 80205fc:	ecbd 8b04 	vpop	{d8-d9}
 8020600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020604:	4b8b      	ldr	r3, [pc, #556]	; (8020834 <_dtoa_r+0x2dc>)
 8020606:	9301      	str	r3, [sp, #4]
 8020608:	3303      	adds	r3, #3
 802060a:	e7f3      	b.n	80205f4 <_dtoa_r+0x9c>
 802060c:	2200      	movs	r2, #0
 802060e:	2300      	movs	r3, #0
 8020610:	4650      	mov	r0, sl
 8020612:	4659      	mov	r1, fp
 8020614:	f7e0 fa30 	bl	8000a78 <__aeabi_dcmpeq>
 8020618:	ec4b ab19 	vmov	d9, sl, fp
 802061c:	4680      	mov	r8, r0
 802061e:	b158      	cbz	r0, 8020638 <_dtoa_r+0xe0>
 8020620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020622:	2301      	movs	r3, #1
 8020624:	6013      	str	r3, [r2, #0]
 8020626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020628:	2b00      	cmp	r3, #0
 802062a:	f000 856b 	beq.w	8021104 <_dtoa_r+0xbac>
 802062e:	4883      	ldr	r0, [pc, #524]	; (802083c <_dtoa_r+0x2e4>)
 8020630:	6018      	str	r0, [r3, #0]
 8020632:	1e43      	subs	r3, r0, #1
 8020634:	9301      	str	r3, [sp, #4]
 8020636:	e7df      	b.n	80205f8 <_dtoa_r+0xa0>
 8020638:	ec4b ab10 	vmov	d0, sl, fp
 802063c:	aa10      	add	r2, sp, #64	; 0x40
 802063e:	a911      	add	r1, sp, #68	; 0x44
 8020640:	4620      	mov	r0, r4
 8020642:	f001 f8f5 	bl	8021830 <__d2b>
 8020646:	f3cb 550a 	ubfx	r5, fp, #20, #11
 802064a:	ee08 0a10 	vmov	s16, r0
 802064e:	2d00      	cmp	r5, #0
 8020650:	f000 8084 	beq.w	802075c <_dtoa_r+0x204>
 8020654:	ee19 3a90 	vmov	r3, s19
 8020658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802065c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020660:	4656      	mov	r6, sl
 8020662:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020666:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802066a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802066e:	4b74      	ldr	r3, [pc, #464]	; (8020840 <_dtoa_r+0x2e8>)
 8020670:	2200      	movs	r2, #0
 8020672:	4630      	mov	r0, r6
 8020674:	4639      	mov	r1, r7
 8020676:	f7df fddf 	bl	8000238 <__aeabi_dsub>
 802067a:	a365      	add	r3, pc, #404	; (adr r3, 8020810 <_dtoa_r+0x2b8>)
 802067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020680:	f7df ff92 	bl	80005a8 <__aeabi_dmul>
 8020684:	a364      	add	r3, pc, #400	; (adr r3, 8020818 <_dtoa_r+0x2c0>)
 8020686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802068a:	f7df fdd7 	bl	800023c <__adddf3>
 802068e:	4606      	mov	r6, r0
 8020690:	4628      	mov	r0, r5
 8020692:	460f      	mov	r7, r1
 8020694:	f7df ff1e 	bl	80004d4 <__aeabi_i2d>
 8020698:	a361      	add	r3, pc, #388	; (adr r3, 8020820 <_dtoa_r+0x2c8>)
 802069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802069e:	f7df ff83 	bl	80005a8 <__aeabi_dmul>
 80206a2:	4602      	mov	r2, r0
 80206a4:	460b      	mov	r3, r1
 80206a6:	4630      	mov	r0, r6
 80206a8:	4639      	mov	r1, r7
 80206aa:	f7df fdc7 	bl	800023c <__adddf3>
 80206ae:	4606      	mov	r6, r0
 80206b0:	460f      	mov	r7, r1
 80206b2:	f7e0 fa29 	bl	8000b08 <__aeabi_d2iz>
 80206b6:	2200      	movs	r2, #0
 80206b8:	9000      	str	r0, [sp, #0]
 80206ba:	2300      	movs	r3, #0
 80206bc:	4630      	mov	r0, r6
 80206be:	4639      	mov	r1, r7
 80206c0:	f7e0 f9e4 	bl	8000a8c <__aeabi_dcmplt>
 80206c4:	b150      	cbz	r0, 80206dc <_dtoa_r+0x184>
 80206c6:	9800      	ldr	r0, [sp, #0]
 80206c8:	f7df ff04 	bl	80004d4 <__aeabi_i2d>
 80206cc:	4632      	mov	r2, r6
 80206ce:	463b      	mov	r3, r7
 80206d0:	f7e0 f9d2 	bl	8000a78 <__aeabi_dcmpeq>
 80206d4:	b910      	cbnz	r0, 80206dc <_dtoa_r+0x184>
 80206d6:	9b00      	ldr	r3, [sp, #0]
 80206d8:	3b01      	subs	r3, #1
 80206da:	9300      	str	r3, [sp, #0]
 80206dc:	9b00      	ldr	r3, [sp, #0]
 80206de:	2b16      	cmp	r3, #22
 80206e0:	d85a      	bhi.n	8020798 <_dtoa_r+0x240>
 80206e2:	9a00      	ldr	r2, [sp, #0]
 80206e4:	4b57      	ldr	r3, [pc, #348]	; (8020844 <_dtoa_r+0x2ec>)
 80206e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80206ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206ee:	ec51 0b19 	vmov	r0, r1, d9
 80206f2:	f7e0 f9cb 	bl	8000a8c <__aeabi_dcmplt>
 80206f6:	2800      	cmp	r0, #0
 80206f8:	d050      	beq.n	802079c <_dtoa_r+0x244>
 80206fa:	9b00      	ldr	r3, [sp, #0]
 80206fc:	3b01      	subs	r3, #1
 80206fe:	9300      	str	r3, [sp, #0]
 8020700:	2300      	movs	r3, #0
 8020702:	930b      	str	r3, [sp, #44]	; 0x2c
 8020704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020706:	1b5d      	subs	r5, r3, r5
 8020708:	1e6b      	subs	r3, r5, #1
 802070a:	9305      	str	r3, [sp, #20]
 802070c:	bf45      	ittet	mi
 802070e:	f1c5 0301 	rsbmi	r3, r5, #1
 8020712:	9304      	strmi	r3, [sp, #16]
 8020714:	2300      	movpl	r3, #0
 8020716:	2300      	movmi	r3, #0
 8020718:	bf4c      	ite	mi
 802071a:	9305      	strmi	r3, [sp, #20]
 802071c:	9304      	strpl	r3, [sp, #16]
 802071e:	9b00      	ldr	r3, [sp, #0]
 8020720:	2b00      	cmp	r3, #0
 8020722:	db3d      	blt.n	80207a0 <_dtoa_r+0x248>
 8020724:	9b05      	ldr	r3, [sp, #20]
 8020726:	9a00      	ldr	r2, [sp, #0]
 8020728:	920a      	str	r2, [sp, #40]	; 0x28
 802072a:	4413      	add	r3, r2
 802072c:	9305      	str	r3, [sp, #20]
 802072e:	2300      	movs	r3, #0
 8020730:	9307      	str	r3, [sp, #28]
 8020732:	9b06      	ldr	r3, [sp, #24]
 8020734:	2b09      	cmp	r3, #9
 8020736:	f200 8089 	bhi.w	802084c <_dtoa_r+0x2f4>
 802073a:	2b05      	cmp	r3, #5
 802073c:	bfc4      	itt	gt
 802073e:	3b04      	subgt	r3, #4
 8020740:	9306      	strgt	r3, [sp, #24]
 8020742:	9b06      	ldr	r3, [sp, #24]
 8020744:	f1a3 0302 	sub.w	r3, r3, #2
 8020748:	bfcc      	ite	gt
 802074a:	2500      	movgt	r5, #0
 802074c:	2501      	movle	r5, #1
 802074e:	2b03      	cmp	r3, #3
 8020750:	f200 8087 	bhi.w	8020862 <_dtoa_r+0x30a>
 8020754:	e8df f003 	tbb	[pc, r3]
 8020758:	59383a2d 	.word	0x59383a2d
 802075c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020760:	441d      	add	r5, r3
 8020762:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020766:	2b20      	cmp	r3, #32
 8020768:	bfc1      	itttt	gt
 802076a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802076e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020772:	fa0b f303 	lslgt.w	r3, fp, r3
 8020776:	fa26 f000 	lsrgt.w	r0, r6, r0
 802077a:	bfda      	itte	le
 802077c:	f1c3 0320 	rsble	r3, r3, #32
 8020780:	fa06 f003 	lslle.w	r0, r6, r3
 8020784:	4318      	orrgt	r0, r3
 8020786:	f7df fe95 	bl	80004b4 <__aeabi_ui2d>
 802078a:	2301      	movs	r3, #1
 802078c:	4606      	mov	r6, r0
 802078e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020792:	3d01      	subs	r5, #1
 8020794:	930e      	str	r3, [sp, #56]	; 0x38
 8020796:	e76a      	b.n	802066e <_dtoa_r+0x116>
 8020798:	2301      	movs	r3, #1
 802079a:	e7b2      	b.n	8020702 <_dtoa_r+0x1aa>
 802079c:	900b      	str	r0, [sp, #44]	; 0x2c
 802079e:	e7b1      	b.n	8020704 <_dtoa_r+0x1ac>
 80207a0:	9b04      	ldr	r3, [sp, #16]
 80207a2:	9a00      	ldr	r2, [sp, #0]
 80207a4:	1a9b      	subs	r3, r3, r2
 80207a6:	9304      	str	r3, [sp, #16]
 80207a8:	4253      	negs	r3, r2
 80207aa:	9307      	str	r3, [sp, #28]
 80207ac:	2300      	movs	r3, #0
 80207ae:	930a      	str	r3, [sp, #40]	; 0x28
 80207b0:	e7bf      	b.n	8020732 <_dtoa_r+0x1da>
 80207b2:	2300      	movs	r3, #0
 80207b4:	9308      	str	r3, [sp, #32]
 80207b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	dc55      	bgt.n	8020868 <_dtoa_r+0x310>
 80207bc:	2301      	movs	r3, #1
 80207be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80207c2:	461a      	mov	r2, r3
 80207c4:	9209      	str	r2, [sp, #36]	; 0x24
 80207c6:	e00c      	b.n	80207e2 <_dtoa_r+0x28a>
 80207c8:	2301      	movs	r3, #1
 80207ca:	e7f3      	b.n	80207b4 <_dtoa_r+0x25c>
 80207cc:	2300      	movs	r3, #0
 80207ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207d0:	9308      	str	r3, [sp, #32]
 80207d2:	9b00      	ldr	r3, [sp, #0]
 80207d4:	4413      	add	r3, r2
 80207d6:	9302      	str	r3, [sp, #8]
 80207d8:	3301      	adds	r3, #1
 80207da:	2b01      	cmp	r3, #1
 80207dc:	9303      	str	r3, [sp, #12]
 80207de:	bfb8      	it	lt
 80207e0:	2301      	movlt	r3, #1
 80207e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80207e4:	2200      	movs	r2, #0
 80207e6:	6042      	str	r2, [r0, #4]
 80207e8:	2204      	movs	r2, #4
 80207ea:	f102 0614 	add.w	r6, r2, #20
 80207ee:	429e      	cmp	r6, r3
 80207f0:	6841      	ldr	r1, [r0, #4]
 80207f2:	d93d      	bls.n	8020870 <_dtoa_r+0x318>
 80207f4:	4620      	mov	r0, r4
 80207f6:	f000 fcf3 	bl	80211e0 <_Balloc>
 80207fa:	9001      	str	r0, [sp, #4]
 80207fc:	2800      	cmp	r0, #0
 80207fe:	d13b      	bne.n	8020878 <_dtoa_r+0x320>
 8020800:	4b11      	ldr	r3, [pc, #68]	; (8020848 <_dtoa_r+0x2f0>)
 8020802:	4602      	mov	r2, r0
 8020804:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020808:	e6c0      	b.n	802058c <_dtoa_r+0x34>
 802080a:	2301      	movs	r3, #1
 802080c:	e7df      	b.n	80207ce <_dtoa_r+0x276>
 802080e:	bf00      	nop
 8020810:	636f4361 	.word	0x636f4361
 8020814:	3fd287a7 	.word	0x3fd287a7
 8020818:	8b60c8b3 	.word	0x8b60c8b3
 802081c:	3fc68a28 	.word	0x3fc68a28
 8020820:	509f79fb 	.word	0x509f79fb
 8020824:	3fd34413 	.word	0x3fd34413
 8020828:	08023095 	.word	0x08023095
 802082c:	080230ac 	.word	0x080230ac
 8020830:	7ff00000 	.word	0x7ff00000
 8020834:	08023091 	.word	0x08023091
 8020838:	08023088 	.word	0x08023088
 802083c:	08023065 	.word	0x08023065
 8020840:	3ff80000 	.word	0x3ff80000
 8020844:	080231a8 	.word	0x080231a8
 8020848:	08023107 	.word	0x08023107
 802084c:	2501      	movs	r5, #1
 802084e:	2300      	movs	r3, #0
 8020850:	9306      	str	r3, [sp, #24]
 8020852:	9508      	str	r5, [sp, #32]
 8020854:	f04f 33ff 	mov.w	r3, #4294967295
 8020858:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802085c:	2200      	movs	r2, #0
 802085e:	2312      	movs	r3, #18
 8020860:	e7b0      	b.n	80207c4 <_dtoa_r+0x26c>
 8020862:	2301      	movs	r3, #1
 8020864:	9308      	str	r3, [sp, #32]
 8020866:	e7f5      	b.n	8020854 <_dtoa_r+0x2fc>
 8020868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802086a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802086e:	e7b8      	b.n	80207e2 <_dtoa_r+0x28a>
 8020870:	3101      	adds	r1, #1
 8020872:	6041      	str	r1, [r0, #4]
 8020874:	0052      	lsls	r2, r2, #1
 8020876:	e7b8      	b.n	80207ea <_dtoa_r+0x292>
 8020878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802087a:	9a01      	ldr	r2, [sp, #4]
 802087c:	601a      	str	r2, [r3, #0]
 802087e:	9b03      	ldr	r3, [sp, #12]
 8020880:	2b0e      	cmp	r3, #14
 8020882:	f200 809d 	bhi.w	80209c0 <_dtoa_r+0x468>
 8020886:	2d00      	cmp	r5, #0
 8020888:	f000 809a 	beq.w	80209c0 <_dtoa_r+0x468>
 802088c:	9b00      	ldr	r3, [sp, #0]
 802088e:	2b00      	cmp	r3, #0
 8020890:	dd32      	ble.n	80208f8 <_dtoa_r+0x3a0>
 8020892:	4ab7      	ldr	r2, [pc, #732]	; (8020b70 <_dtoa_r+0x618>)
 8020894:	f003 030f 	and.w	r3, r3, #15
 8020898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802089c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80208a0:	9b00      	ldr	r3, [sp, #0]
 80208a2:	05d8      	lsls	r0, r3, #23
 80208a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80208a8:	d516      	bpl.n	80208d8 <_dtoa_r+0x380>
 80208aa:	4bb2      	ldr	r3, [pc, #712]	; (8020b74 <_dtoa_r+0x61c>)
 80208ac:	ec51 0b19 	vmov	r0, r1, d9
 80208b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80208b4:	f7df ffa2 	bl	80007fc <__aeabi_ddiv>
 80208b8:	f007 070f 	and.w	r7, r7, #15
 80208bc:	4682      	mov	sl, r0
 80208be:	468b      	mov	fp, r1
 80208c0:	2503      	movs	r5, #3
 80208c2:	4eac      	ldr	r6, [pc, #688]	; (8020b74 <_dtoa_r+0x61c>)
 80208c4:	b957      	cbnz	r7, 80208dc <_dtoa_r+0x384>
 80208c6:	4642      	mov	r2, r8
 80208c8:	464b      	mov	r3, r9
 80208ca:	4650      	mov	r0, sl
 80208cc:	4659      	mov	r1, fp
 80208ce:	f7df ff95 	bl	80007fc <__aeabi_ddiv>
 80208d2:	4682      	mov	sl, r0
 80208d4:	468b      	mov	fp, r1
 80208d6:	e028      	b.n	802092a <_dtoa_r+0x3d2>
 80208d8:	2502      	movs	r5, #2
 80208da:	e7f2      	b.n	80208c2 <_dtoa_r+0x36a>
 80208dc:	07f9      	lsls	r1, r7, #31
 80208de:	d508      	bpl.n	80208f2 <_dtoa_r+0x39a>
 80208e0:	4640      	mov	r0, r8
 80208e2:	4649      	mov	r1, r9
 80208e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80208e8:	f7df fe5e 	bl	80005a8 <__aeabi_dmul>
 80208ec:	3501      	adds	r5, #1
 80208ee:	4680      	mov	r8, r0
 80208f0:	4689      	mov	r9, r1
 80208f2:	107f      	asrs	r7, r7, #1
 80208f4:	3608      	adds	r6, #8
 80208f6:	e7e5      	b.n	80208c4 <_dtoa_r+0x36c>
 80208f8:	f000 809b 	beq.w	8020a32 <_dtoa_r+0x4da>
 80208fc:	9b00      	ldr	r3, [sp, #0]
 80208fe:	4f9d      	ldr	r7, [pc, #628]	; (8020b74 <_dtoa_r+0x61c>)
 8020900:	425e      	negs	r6, r3
 8020902:	4b9b      	ldr	r3, [pc, #620]	; (8020b70 <_dtoa_r+0x618>)
 8020904:	f006 020f 	and.w	r2, r6, #15
 8020908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802090c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020910:	ec51 0b19 	vmov	r0, r1, d9
 8020914:	f7df fe48 	bl	80005a8 <__aeabi_dmul>
 8020918:	1136      	asrs	r6, r6, #4
 802091a:	4682      	mov	sl, r0
 802091c:	468b      	mov	fp, r1
 802091e:	2300      	movs	r3, #0
 8020920:	2502      	movs	r5, #2
 8020922:	2e00      	cmp	r6, #0
 8020924:	d17a      	bne.n	8020a1c <_dtoa_r+0x4c4>
 8020926:	2b00      	cmp	r3, #0
 8020928:	d1d3      	bne.n	80208d2 <_dtoa_r+0x37a>
 802092a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802092c:	2b00      	cmp	r3, #0
 802092e:	f000 8082 	beq.w	8020a36 <_dtoa_r+0x4de>
 8020932:	4b91      	ldr	r3, [pc, #580]	; (8020b78 <_dtoa_r+0x620>)
 8020934:	2200      	movs	r2, #0
 8020936:	4650      	mov	r0, sl
 8020938:	4659      	mov	r1, fp
 802093a:	f7e0 f8a7 	bl	8000a8c <__aeabi_dcmplt>
 802093e:	2800      	cmp	r0, #0
 8020940:	d079      	beq.n	8020a36 <_dtoa_r+0x4de>
 8020942:	9b03      	ldr	r3, [sp, #12]
 8020944:	2b00      	cmp	r3, #0
 8020946:	d076      	beq.n	8020a36 <_dtoa_r+0x4de>
 8020948:	9b02      	ldr	r3, [sp, #8]
 802094a:	2b00      	cmp	r3, #0
 802094c:	dd36      	ble.n	80209bc <_dtoa_r+0x464>
 802094e:	9b00      	ldr	r3, [sp, #0]
 8020950:	4650      	mov	r0, sl
 8020952:	4659      	mov	r1, fp
 8020954:	1e5f      	subs	r7, r3, #1
 8020956:	2200      	movs	r2, #0
 8020958:	4b88      	ldr	r3, [pc, #544]	; (8020b7c <_dtoa_r+0x624>)
 802095a:	f7df fe25 	bl	80005a8 <__aeabi_dmul>
 802095e:	9e02      	ldr	r6, [sp, #8]
 8020960:	4682      	mov	sl, r0
 8020962:	468b      	mov	fp, r1
 8020964:	3501      	adds	r5, #1
 8020966:	4628      	mov	r0, r5
 8020968:	f7df fdb4 	bl	80004d4 <__aeabi_i2d>
 802096c:	4652      	mov	r2, sl
 802096e:	465b      	mov	r3, fp
 8020970:	f7df fe1a 	bl	80005a8 <__aeabi_dmul>
 8020974:	4b82      	ldr	r3, [pc, #520]	; (8020b80 <_dtoa_r+0x628>)
 8020976:	2200      	movs	r2, #0
 8020978:	f7df fc60 	bl	800023c <__adddf3>
 802097c:	46d0      	mov	r8, sl
 802097e:	46d9      	mov	r9, fp
 8020980:	4682      	mov	sl, r0
 8020982:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020986:	2e00      	cmp	r6, #0
 8020988:	d158      	bne.n	8020a3c <_dtoa_r+0x4e4>
 802098a:	4b7e      	ldr	r3, [pc, #504]	; (8020b84 <_dtoa_r+0x62c>)
 802098c:	2200      	movs	r2, #0
 802098e:	4640      	mov	r0, r8
 8020990:	4649      	mov	r1, r9
 8020992:	f7df fc51 	bl	8000238 <__aeabi_dsub>
 8020996:	4652      	mov	r2, sl
 8020998:	465b      	mov	r3, fp
 802099a:	4680      	mov	r8, r0
 802099c:	4689      	mov	r9, r1
 802099e:	f7e0 f893 	bl	8000ac8 <__aeabi_dcmpgt>
 80209a2:	2800      	cmp	r0, #0
 80209a4:	f040 8295 	bne.w	8020ed2 <_dtoa_r+0x97a>
 80209a8:	4652      	mov	r2, sl
 80209aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80209ae:	4640      	mov	r0, r8
 80209b0:	4649      	mov	r1, r9
 80209b2:	f7e0 f86b 	bl	8000a8c <__aeabi_dcmplt>
 80209b6:	2800      	cmp	r0, #0
 80209b8:	f040 8289 	bne.w	8020ece <_dtoa_r+0x976>
 80209bc:	ec5b ab19 	vmov	sl, fp, d9
 80209c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	f2c0 8148 	blt.w	8020c58 <_dtoa_r+0x700>
 80209c8:	9a00      	ldr	r2, [sp, #0]
 80209ca:	2a0e      	cmp	r2, #14
 80209cc:	f300 8144 	bgt.w	8020c58 <_dtoa_r+0x700>
 80209d0:	4b67      	ldr	r3, [pc, #412]	; (8020b70 <_dtoa_r+0x618>)
 80209d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80209d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80209da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209dc:	2b00      	cmp	r3, #0
 80209de:	f280 80d5 	bge.w	8020b8c <_dtoa_r+0x634>
 80209e2:	9b03      	ldr	r3, [sp, #12]
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	f300 80d1 	bgt.w	8020b8c <_dtoa_r+0x634>
 80209ea:	f040 826f 	bne.w	8020ecc <_dtoa_r+0x974>
 80209ee:	4b65      	ldr	r3, [pc, #404]	; (8020b84 <_dtoa_r+0x62c>)
 80209f0:	2200      	movs	r2, #0
 80209f2:	4640      	mov	r0, r8
 80209f4:	4649      	mov	r1, r9
 80209f6:	f7df fdd7 	bl	80005a8 <__aeabi_dmul>
 80209fa:	4652      	mov	r2, sl
 80209fc:	465b      	mov	r3, fp
 80209fe:	f7e0 f859 	bl	8000ab4 <__aeabi_dcmpge>
 8020a02:	9e03      	ldr	r6, [sp, #12]
 8020a04:	4637      	mov	r7, r6
 8020a06:	2800      	cmp	r0, #0
 8020a08:	f040 8245 	bne.w	8020e96 <_dtoa_r+0x93e>
 8020a0c:	9d01      	ldr	r5, [sp, #4]
 8020a0e:	2331      	movs	r3, #49	; 0x31
 8020a10:	f805 3b01 	strb.w	r3, [r5], #1
 8020a14:	9b00      	ldr	r3, [sp, #0]
 8020a16:	3301      	adds	r3, #1
 8020a18:	9300      	str	r3, [sp, #0]
 8020a1a:	e240      	b.n	8020e9e <_dtoa_r+0x946>
 8020a1c:	07f2      	lsls	r2, r6, #31
 8020a1e:	d505      	bpl.n	8020a2c <_dtoa_r+0x4d4>
 8020a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020a24:	f7df fdc0 	bl	80005a8 <__aeabi_dmul>
 8020a28:	3501      	adds	r5, #1
 8020a2a:	2301      	movs	r3, #1
 8020a2c:	1076      	asrs	r6, r6, #1
 8020a2e:	3708      	adds	r7, #8
 8020a30:	e777      	b.n	8020922 <_dtoa_r+0x3ca>
 8020a32:	2502      	movs	r5, #2
 8020a34:	e779      	b.n	802092a <_dtoa_r+0x3d2>
 8020a36:	9f00      	ldr	r7, [sp, #0]
 8020a38:	9e03      	ldr	r6, [sp, #12]
 8020a3a:	e794      	b.n	8020966 <_dtoa_r+0x40e>
 8020a3c:	9901      	ldr	r1, [sp, #4]
 8020a3e:	4b4c      	ldr	r3, [pc, #304]	; (8020b70 <_dtoa_r+0x618>)
 8020a40:	4431      	add	r1, r6
 8020a42:	910d      	str	r1, [sp, #52]	; 0x34
 8020a44:	9908      	ldr	r1, [sp, #32]
 8020a46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8020a4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020a4e:	2900      	cmp	r1, #0
 8020a50:	d043      	beq.n	8020ada <_dtoa_r+0x582>
 8020a52:	494d      	ldr	r1, [pc, #308]	; (8020b88 <_dtoa_r+0x630>)
 8020a54:	2000      	movs	r0, #0
 8020a56:	f7df fed1 	bl	80007fc <__aeabi_ddiv>
 8020a5a:	4652      	mov	r2, sl
 8020a5c:	465b      	mov	r3, fp
 8020a5e:	f7df fbeb 	bl	8000238 <__aeabi_dsub>
 8020a62:	9d01      	ldr	r5, [sp, #4]
 8020a64:	4682      	mov	sl, r0
 8020a66:	468b      	mov	fp, r1
 8020a68:	4649      	mov	r1, r9
 8020a6a:	4640      	mov	r0, r8
 8020a6c:	f7e0 f84c 	bl	8000b08 <__aeabi_d2iz>
 8020a70:	4606      	mov	r6, r0
 8020a72:	f7df fd2f 	bl	80004d4 <__aeabi_i2d>
 8020a76:	4602      	mov	r2, r0
 8020a78:	460b      	mov	r3, r1
 8020a7a:	4640      	mov	r0, r8
 8020a7c:	4649      	mov	r1, r9
 8020a7e:	f7df fbdb 	bl	8000238 <__aeabi_dsub>
 8020a82:	3630      	adds	r6, #48	; 0x30
 8020a84:	f805 6b01 	strb.w	r6, [r5], #1
 8020a88:	4652      	mov	r2, sl
 8020a8a:	465b      	mov	r3, fp
 8020a8c:	4680      	mov	r8, r0
 8020a8e:	4689      	mov	r9, r1
 8020a90:	f7df fffc 	bl	8000a8c <__aeabi_dcmplt>
 8020a94:	2800      	cmp	r0, #0
 8020a96:	d163      	bne.n	8020b60 <_dtoa_r+0x608>
 8020a98:	4642      	mov	r2, r8
 8020a9a:	464b      	mov	r3, r9
 8020a9c:	4936      	ldr	r1, [pc, #216]	; (8020b78 <_dtoa_r+0x620>)
 8020a9e:	2000      	movs	r0, #0
 8020aa0:	f7df fbca 	bl	8000238 <__aeabi_dsub>
 8020aa4:	4652      	mov	r2, sl
 8020aa6:	465b      	mov	r3, fp
 8020aa8:	f7df fff0 	bl	8000a8c <__aeabi_dcmplt>
 8020aac:	2800      	cmp	r0, #0
 8020aae:	f040 80b5 	bne.w	8020c1c <_dtoa_r+0x6c4>
 8020ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ab4:	429d      	cmp	r5, r3
 8020ab6:	d081      	beq.n	80209bc <_dtoa_r+0x464>
 8020ab8:	4b30      	ldr	r3, [pc, #192]	; (8020b7c <_dtoa_r+0x624>)
 8020aba:	2200      	movs	r2, #0
 8020abc:	4650      	mov	r0, sl
 8020abe:	4659      	mov	r1, fp
 8020ac0:	f7df fd72 	bl	80005a8 <__aeabi_dmul>
 8020ac4:	4b2d      	ldr	r3, [pc, #180]	; (8020b7c <_dtoa_r+0x624>)
 8020ac6:	4682      	mov	sl, r0
 8020ac8:	468b      	mov	fp, r1
 8020aca:	4640      	mov	r0, r8
 8020acc:	4649      	mov	r1, r9
 8020ace:	2200      	movs	r2, #0
 8020ad0:	f7df fd6a 	bl	80005a8 <__aeabi_dmul>
 8020ad4:	4680      	mov	r8, r0
 8020ad6:	4689      	mov	r9, r1
 8020ad8:	e7c6      	b.n	8020a68 <_dtoa_r+0x510>
 8020ada:	4650      	mov	r0, sl
 8020adc:	4659      	mov	r1, fp
 8020ade:	f7df fd63 	bl	80005a8 <__aeabi_dmul>
 8020ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ae4:	9d01      	ldr	r5, [sp, #4]
 8020ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ae8:	4682      	mov	sl, r0
 8020aea:	468b      	mov	fp, r1
 8020aec:	4649      	mov	r1, r9
 8020aee:	4640      	mov	r0, r8
 8020af0:	f7e0 f80a 	bl	8000b08 <__aeabi_d2iz>
 8020af4:	4606      	mov	r6, r0
 8020af6:	f7df fced 	bl	80004d4 <__aeabi_i2d>
 8020afa:	3630      	adds	r6, #48	; 0x30
 8020afc:	4602      	mov	r2, r0
 8020afe:	460b      	mov	r3, r1
 8020b00:	4640      	mov	r0, r8
 8020b02:	4649      	mov	r1, r9
 8020b04:	f7df fb98 	bl	8000238 <__aeabi_dsub>
 8020b08:	f805 6b01 	strb.w	r6, [r5], #1
 8020b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020b0e:	429d      	cmp	r5, r3
 8020b10:	4680      	mov	r8, r0
 8020b12:	4689      	mov	r9, r1
 8020b14:	f04f 0200 	mov.w	r2, #0
 8020b18:	d124      	bne.n	8020b64 <_dtoa_r+0x60c>
 8020b1a:	4b1b      	ldr	r3, [pc, #108]	; (8020b88 <_dtoa_r+0x630>)
 8020b1c:	4650      	mov	r0, sl
 8020b1e:	4659      	mov	r1, fp
 8020b20:	f7df fb8c 	bl	800023c <__adddf3>
 8020b24:	4602      	mov	r2, r0
 8020b26:	460b      	mov	r3, r1
 8020b28:	4640      	mov	r0, r8
 8020b2a:	4649      	mov	r1, r9
 8020b2c:	f7df ffcc 	bl	8000ac8 <__aeabi_dcmpgt>
 8020b30:	2800      	cmp	r0, #0
 8020b32:	d173      	bne.n	8020c1c <_dtoa_r+0x6c4>
 8020b34:	4652      	mov	r2, sl
 8020b36:	465b      	mov	r3, fp
 8020b38:	4913      	ldr	r1, [pc, #76]	; (8020b88 <_dtoa_r+0x630>)
 8020b3a:	2000      	movs	r0, #0
 8020b3c:	f7df fb7c 	bl	8000238 <__aeabi_dsub>
 8020b40:	4602      	mov	r2, r0
 8020b42:	460b      	mov	r3, r1
 8020b44:	4640      	mov	r0, r8
 8020b46:	4649      	mov	r1, r9
 8020b48:	f7df ffa0 	bl	8000a8c <__aeabi_dcmplt>
 8020b4c:	2800      	cmp	r0, #0
 8020b4e:	f43f af35 	beq.w	80209bc <_dtoa_r+0x464>
 8020b52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020b54:	1e6b      	subs	r3, r5, #1
 8020b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020b5c:	2b30      	cmp	r3, #48	; 0x30
 8020b5e:	d0f8      	beq.n	8020b52 <_dtoa_r+0x5fa>
 8020b60:	9700      	str	r7, [sp, #0]
 8020b62:	e049      	b.n	8020bf8 <_dtoa_r+0x6a0>
 8020b64:	4b05      	ldr	r3, [pc, #20]	; (8020b7c <_dtoa_r+0x624>)
 8020b66:	f7df fd1f 	bl	80005a8 <__aeabi_dmul>
 8020b6a:	4680      	mov	r8, r0
 8020b6c:	4689      	mov	r9, r1
 8020b6e:	e7bd      	b.n	8020aec <_dtoa_r+0x594>
 8020b70:	080231a8 	.word	0x080231a8
 8020b74:	08023180 	.word	0x08023180
 8020b78:	3ff00000 	.word	0x3ff00000
 8020b7c:	40240000 	.word	0x40240000
 8020b80:	401c0000 	.word	0x401c0000
 8020b84:	40140000 	.word	0x40140000
 8020b88:	3fe00000 	.word	0x3fe00000
 8020b8c:	9d01      	ldr	r5, [sp, #4]
 8020b8e:	4656      	mov	r6, sl
 8020b90:	465f      	mov	r7, fp
 8020b92:	4642      	mov	r2, r8
 8020b94:	464b      	mov	r3, r9
 8020b96:	4630      	mov	r0, r6
 8020b98:	4639      	mov	r1, r7
 8020b9a:	f7df fe2f 	bl	80007fc <__aeabi_ddiv>
 8020b9e:	f7df ffb3 	bl	8000b08 <__aeabi_d2iz>
 8020ba2:	4682      	mov	sl, r0
 8020ba4:	f7df fc96 	bl	80004d4 <__aeabi_i2d>
 8020ba8:	4642      	mov	r2, r8
 8020baa:	464b      	mov	r3, r9
 8020bac:	f7df fcfc 	bl	80005a8 <__aeabi_dmul>
 8020bb0:	4602      	mov	r2, r0
 8020bb2:	460b      	mov	r3, r1
 8020bb4:	4630      	mov	r0, r6
 8020bb6:	4639      	mov	r1, r7
 8020bb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8020bbc:	f7df fb3c 	bl	8000238 <__aeabi_dsub>
 8020bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8020bc4:	9e01      	ldr	r6, [sp, #4]
 8020bc6:	9f03      	ldr	r7, [sp, #12]
 8020bc8:	1bae      	subs	r6, r5, r6
 8020bca:	42b7      	cmp	r7, r6
 8020bcc:	4602      	mov	r2, r0
 8020bce:	460b      	mov	r3, r1
 8020bd0:	d135      	bne.n	8020c3e <_dtoa_r+0x6e6>
 8020bd2:	f7df fb33 	bl	800023c <__adddf3>
 8020bd6:	4642      	mov	r2, r8
 8020bd8:	464b      	mov	r3, r9
 8020bda:	4606      	mov	r6, r0
 8020bdc:	460f      	mov	r7, r1
 8020bde:	f7df ff73 	bl	8000ac8 <__aeabi_dcmpgt>
 8020be2:	b9d0      	cbnz	r0, 8020c1a <_dtoa_r+0x6c2>
 8020be4:	4642      	mov	r2, r8
 8020be6:	464b      	mov	r3, r9
 8020be8:	4630      	mov	r0, r6
 8020bea:	4639      	mov	r1, r7
 8020bec:	f7df ff44 	bl	8000a78 <__aeabi_dcmpeq>
 8020bf0:	b110      	cbz	r0, 8020bf8 <_dtoa_r+0x6a0>
 8020bf2:	f01a 0f01 	tst.w	sl, #1
 8020bf6:	d110      	bne.n	8020c1a <_dtoa_r+0x6c2>
 8020bf8:	4620      	mov	r0, r4
 8020bfa:	ee18 1a10 	vmov	r1, s16
 8020bfe:	f000 fb2f 	bl	8021260 <_Bfree>
 8020c02:	2300      	movs	r3, #0
 8020c04:	9800      	ldr	r0, [sp, #0]
 8020c06:	702b      	strb	r3, [r5, #0]
 8020c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c0a:	3001      	adds	r0, #1
 8020c0c:	6018      	str	r0, [r3, #0]
 8020c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	f43f acf1 	beq.w	80205f8 <_dtoa_r+0xa0>
 8020c16:	601d      	str	r5, [r3, #0]
 8020c18:	e4ee      	b.n	80205f8 <_dtoa_r+0xa0>
 8020c1a:	9f00      	ldr	r7, [sp, #0]
 8020c1c:	462b      	mov	r3, r5
 8020c1e:	461d      	mov	r5, r3
 8020c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020c24:	2a39      	cmp	r2, #57	; 0x39
 8020c26:	d106      	bne.n	8020c36 <_dtoa_r+0x6de>
 8020c28:	9a01      	ldr	r2, [sp, #4]
 8020c2a:	429a      	cmp	r2, r3
 8020c2c:	d1f7      	bne.n	8020c1e <_dtoa_r+0x6c6>
 8020c2e:	9901      	ldr	r1, [sp, #4]
 8020c30:	2230      	movs	r2, #48	; 0x30
 8020c32:	3701      	adds	r7, #1
 8020c34:	700a      	strb	r2, [r1, #0]
 8020c36:	781a      	ldrb	r2, [r3, #0]
 8020c38:	3201      	adds	r2, #1
 8020c3a:	701a      	strb	r2, [r3, #0]
 8020c3c:	e790      	b.n	8020b60 <_dtoa_r+0x608>
 8020c3e:	4ba6      	ldr	r3, [pc, #664]	; (8020ed8 <_dtoa_r+0x980>)
 8020c40:	2200      	movs	r2, #0
 8020c42:	f7df fcb1 	bl	80005a8 <__aeabi_dmul>
 8020c46:	2200      	movs	r2, #0
 8020c48:	2300      	movs	r3, #0
 8020c4a:	4606      	mov	r6, r0
 8020c4c:	460f      	mov	r7, r1
 8020c4e:	f7df ff13 	bl	8000a78 <__aeabi_dcmpeq>
 8020c52:	2800      	cmp	r0, #0
 8020c54:	d09d      	beq.n	8020b92 <_dtoa_r+0x63a>
 8020c56:	e7cf      	b.n	8020bf8 <_dtoa_r+0x6a0>
 8020c58:	9a08      	ldr	r2, [sp, #32]
 8020c5a:	2a00      	cmp	r2, #0
 8020c5c:	f000 80d7 	beq.w	8020e0e <_dtoa_r+0x8b6>
 8020c60:	9a06      	ldr	r2, [sp, #24]
 8020c62:	2a01      	cmp	r2, #1
 8020c64:	f300 80ba 	bgt.w	8020ddc <_dtoa_r+0x884>
 8020c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020c6a:	2a00      	cmp	r2, #0
 8020c6c:	f000 80b2 	beq.w	8020dd4 <_dtoa_r+0x87c>
 8020c70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020c74:	9e07      	ldr	r6, [sp, #28]
 8020c76:	9d04      	ldr	r5, [sp, #16]
 8020c78:	9a04      	ldr	r2, [sp, #16]
 8020c7a:	441a      	add	r2, r3
 8020c7c:	9204      	str	r2, [sp, #16]
 8020c7e:	9a05      	ldr	r2, [sp, #20]
 8020c80:	2101      	movs	r1, #1
 8020c82:	441a      	add	r2, r3
 8020c84:	4620      	mov	r0, r4
 8020c86:	9205      	str	r2, [sp, #20]
 8020c88:	f000 fba2 	bl	80213d0 <__i2b>
 8020c8c:	4607      	mov	r7, r0
 8020c8e:	2d00      	cmp	r5, #0
 8020c90:	dd0c      	ble.n	8020cac <_dtoa_r+0x754>
 8020c92:	9b05      	ldr	r3, [sp, #20]
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	dd09      	ble.n	8020cac <_dtoa_r+0x754>
 8020c98:	42ab      	cmp	r3, r5
 8020c9a:	9a04      	ldr	r2, [sp, #16]
 8020c9c:	bfa8      	it	ge
 8020c9e:	462b      	movge	r3, r5
 8020ca0:	1ad2      	subs	r2, r2, r3
 8020ca2:	9204      	str	r2, [sp, #16]
 8020ca4:	9a05      	ldr	r2, [sp, #20]
 8020ca6:	1aed      	subs	r5, r5, r3
 8020ca8:	1ad3      	subs	r3, r2, r3
 8020caa:	9305      	str	r3, [sp, #20]
 8020cac:	9b07      	ldr	r3, [sp, #28]
 8020cae:	b31b      	cbz	r3, 8020cf8 <_dtoa_r+0x7a0>
 8020cb0:	9b08      	ldr	r3, [sp, #32]
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	f000 80af 	beq.w	8020e16 <_dtoa_r+0x8be>
 8020cb8:	2e00      	cmp	r6, #0
 8020cba:	dd13      	ble.n	8020ce4 <_dtoa_r+0x78c>
 8020cbc:	4639      	mov	r1, r7
 8020cbe:	4632      	mov	r2, r6
 8020cc0:	4620      	mov	r0, r4
 8020cc2:	f000 fc45 	bl	8021550 <__pow5mult>
 8020cc6:	ee18 2a10 	vmov	r2, s16
 8020cca:	4601      	mov	r1, r0
 8020ccc:	4607      	mov	r7, r0
 8020cce:	4620      	mov	r0, r4
 8020cd0:	f000 fb94 	bl	80213fc <__multiply>
 8020cd4:	ee18 1a10 	vmov	r1, s16
 8020cd8:	4680      	mov	r8, r0
 8020cda:	4620      	mov	r0, r4
 8020cdc:	f000 fac0 	bl	8021260 <_Bfree>
 8020ce0:	ee08 8a10 	vmov	s16, r8
 8020ce4:	9b07      	ldr	r3, [sp, #28]
 8020ce6:	1b9a      	subs	r2, r3, r6
 8020ce8:	d006      	beq.n	8020cf8 <_dtoa_r+0x7a0>
 8020cea:	ee18 1a10 	vmov	r1, s16
 8020cee:	4620      	mov	r0, r4
 8020cf0:	f000 fc2e 	bl	8021550 <__pow5mult>
 8020cf4:	ee08 0a10 	vmov	s16, r0
 8020cf8:	2101      	movs	r1, #1
 8020cfa:	4620      	mov	r0, r4
 8020cfc:	f000 fb68 	bl	80213d0 <__i2b>
 8020d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	4606      	mov	r6, r0
 8020d06:	f340 8088 	ble.w	8020e1a <_dtoa_r+0x8c2>
 8020d0a:	461a      	mov	r2, r3
 8020d0c:	4601      	mov	r1, r0
 8020d0e:	4620      	mov	r0, r4
 8020d10:	f000 fc1e 	bl	8021550 <__pow5mult>
 8020d14:	9b06      	ldr	r3, [sp, #24]
 8020d16:	2b01      	cmp	r3, #1
 8020d18:	4606      	mov	r6, r0
 8020d1a:	f340 8081 	ble.w	8020e20 <_dtoa_r+0x8c8>
 8020d1e:	f04f 0800 	mov.w	r8, #0
 8020d22:	6933      	ldr	r3, [r6, #16]
 8020d24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020d28:	6918      	ldr	r0, [r3, #16]
 8020d2a:	f000 fb01 	bl	8021330 <__hi0bits>
 8020d2e:	f1c0 0020 	rsb	r0, r0, #32
 8020d32:	9b05      	ldr	r3, [sp, #20]
 8020d34:	4418      	add	r0, r3
 8020d36:	f010 001f 	ands.w	r0, r0, #31
 8020d3a:	f000 8092 	beq.w	8020e62 <_dtoa_r+0x90a>
 8020d3e:	f1c0 0320 	rsb	r3, r0, #32
 8020d42:	2b04      	cmp	r3, #4
 8020d44:	f340 808a 	ble.w	8020e5c <_dtoa_r+0x904>
 8020d48:	f1c0 001c 	rsb	r0, r0, #28
 8020d4c:	9b04      	ldr	r3, [sp, #16]
 8020d4e:	4403      	add	r3, r0
 8020d50:	9304      	str	r3, [sp, #16]
 8020d52:	9b05      	ldr	r3, [sp, #20]
 8020d54:	4403      	add	r3, r0
 8020d56:	4405      	add	r5, r0
 8020d58:	9305      	str	r3, [sp, #20]
 8020d5a:	9b04      	ldr	r3, [sp, #16]
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	dd07      	ble.n	8020d70 <_dtoa_r+0x818>
 8020d60:	ee18 1a10 	vmov	r1, s16
 8020d64:	461a      	mov	r2, r3
 8020d66:	4620      	mov	r0, r4
 8020d68:	f000 fc4c 	bl	8021604 <__lshift>
 8020d6c:	ee08 0a10 	vmov	s16, r0
 8020d70:	9b05      	ldr	r3, [sp, #20]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	dd05      	ble.n	8020d82 <_dtoa_r+0x82a>
 8020d76:	4631      	mov	r1, r6
 8020d78:	461a      	mov	r2, r3
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	f000 fc42 	bl	8021604 <__lshift>
 8020d80:	4606      	mov	r6, r0
 8020d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d06e      	beq.n	8020e66 <_dtoa_r+0x90e>
 8020d88:	ee18 0a10 	vmov	r0, s16
 8020d8c:	4631      	mov	r1, r6
 8020d8e:	f000 fca9 	bl	80216e4 <__mcmp>
 8020d92:	2800      	cmp	r0, #0
 8020d94:	da67      	bge.n	8020e66 <_dtoa_r+0x90e>
 8020d96:	9b00      	ldr	r3, [sp, #0]
 8020d98:	3b01      	subs	r3, #1
 8020d9a:	ee18 1a10 	vmov	r1, s16
 8020d9e:	9300      	str	r3, [sp, #0]
 8020da0:	220a      	movs	r2, #10
 8020da2:	2300      	movs	r3, #0
 8020da4:	4620      	mov	r0, r4
 8020da6:	f000 fa7d 	bl	80212a4 <__multadd>
 8020daa:	9b08      	ldr	r3, [sp, #32]
 8020dac:	ee08 0a10 	vmov	s16, r0
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	f000 81b1 	beq.w	8021118 <_dtoa_r+0xbc0>
 8020db6:	2300      	movs	r3, #0
 8020db8:	4639      	mov	r1, r7
 8020dba:	220a      	movs	r2, #10
 8020dbc:	4620      	mov	r0, r4
 8020dbe:	f000 fa71 	bl	80212a4 <__multadd>
 8020dc2:	9b02      	ldr	r3, [sp, #8]
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	4607      	mov	r7, r0
 8020dc8:	f300 808e 	bgt.w	8020ee8 <_dtoa_r+0x990>
 8020dcc:	9b06      	ldr	r3, [sp, #24]
 8020dce:	2b02      	cmp	r3, #2
 8020dd0:	dc51      	bgt.n	8020e76 <_dtoa_r+0x91e>
 8020dd2:	e089      	b.n	8020ee8 <_dtoa_r+0x990>
 8020dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020dda:	e74b      	b.n	8020c74 <_dtoa_r+0x71c>
 8020ddc:	9b03      	ldr	r3, [sp, #12]
 8020dde:	1e5e      	subs	r6, r3, #1
 8020de0:	9b07      	ldr	r3, [sp, #28]
 8020de2:	42b3      	cmp	r3, r6
 8020de4:	bfbf      	itttt	lt
 8020de6:	9b07      	ldrlt	r3, [sp, #28]
 8020de8:	9607      	strlt	r6, [sp, #28]
 8020dea:	1af2      	sublt	r2, r6, r3
 8020dec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8020dee:	bfb6      	itet	lt
 8020df0:	189b      	addlt	r3, r3, r2
 8020df2:	1b9e      	subge	r6, r3, r6
 8020df4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020df6:	9b03      	ldr	r3, [sp, #12]
 8020df8:	bfb8      	it	lt
 8020dfa:	2600      	movlt	r6, #0
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	bfb7      	itett	lt
 8020e00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8020e04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020e08:	1a9d      	sublt	r5, r3, r2
 8020e0a:	2300      	movlt	r3, #0
 8020e0c:	e734      	b.n	8020c78 <_dtoa_r+0x720>
 8020e0e:	9e07      	ldr	r6, [sp, #28]
 8020e10:	9d04      	ldr	r5, [sp, #16]
 8020e12:	9f08      	ldr	r7, [sp, #32]
 8020e14:	e73b      	b.n	8020c8e <_dtoa_r+0x736>
 8020e16:	9a07      	ldr	r2, [sp, #28]
 8020e18:	e767      	b.n	8020cea <_dtoa_r+0x792>
 8020e1a:	9b06      	ldr	r3, [sp, #24]
 8020e1c:	2b01      	cmp	r3, #1
 8020e1e:	dc18      	bgt.n	8020e52 <_dtoa_r+0x8fa>
 8020e20:	f1ba 0f00 	cmp.w	sl, #0
 8020e24:	d115      	bne.n	8020e52 <_dtoa_r+0x8fa>
 8020e26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020e2a:	b993      	cbnz	r3, 8020e52 <_dtoa_r+0x8fa>
 8020e2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020e30:	0d1b      	lsrs	r3, r3, #20
 8020e32:	051b      	lsls	r3, r3, #20
 8020e34:	b183      	cbz	r3, 8020e58 <_dtoa_r+0x900>
 8020e36:	9b04      	ldr	r3, [sp, #16]
 8020e38:	3301      	adds	r3, #1
 8020e3a:	9304      	str	r3, [sp, #16]
 8020e3c:	9b05      	ldr	r3, [sp, #20]
 8020e3e:	3301      	adds	r3, #1
 8020e40:	9305      	str	r3, [sp, #20]
 8020e42:	f04f 0801 	mov.w	r8, #1
 8020e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	f47f af6a 	bne.w	8020d22 <_dtoa_r+0x7ca>
 8020e4e:	2001      	movs	r0, #1
 8020e50:	e76f      	b.n	8020d32 <_dtoa_r+0x7da>
 8020e52:	f04f 0800 	mov.w	r8, #0
 8020e56:	e7f6      	b.n	8020e46 <_dtoa_r+0x8ee>
 8020e58:	4698      	mov	r8, r3
 8020e5a:	e7f4      	b.n	8020e46 <_dtoa_r+0x8ee>
 8020e5c:	f43f af7d 	beq.w	8020d5a <_dtoa_r+0x802>
 8020e60:	4618      	mov	r0, r3
 8020e62:	301c      	adds	r0, #28
 8020e64:	e772      	b.n	8020d4c <_dtoa_r+0x7f4>
 8020e66:	9b03      	ldr	r3, [sp, #12]
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	dc37      	bgt.n	8020edc <_dtoa_r+0x984>
 8020e6c:	9b06      	ldr	r3, [sp, #24]
 8020e6e:	2b02      	cmp	r3, #2
 8020e70:	dd34      	ble.n	8020edc <_dtoa_r+0x984>
 8020e72:	9b03      	ldr	r3, [sp, #12]
 8020e74:	9302      	str	r3, [sp, #8]
 8020e76:	9b02      	ldr	r3, [sp, #8]
 8020e78:	b96b      	cbnz	r3, 8020e96 <_dtoa_r+0x93e>
 8020e7a:	4631      	mov	r1, r6
 8020e7c:	2205      	movs	r2, #5
 8020e7e:	4620      	mov	r0, r4
 8020e80:	f000 fa10 	bl	80212a4 <__multadd>
 8020e84:	4601      	mov	r1, r0
 8020e86:	4606      	mov	r6, r0
 8020e88:	ee18 0a10 	vmov	r0, s16
 8020e8c:	f000 fc2a 	bl	80216e4 <__mcmp>
 8020e90:	2800      	cmp	r0, #0
 8020e92:	f73f adbb 	bgt.w	8020a0c <_dtoa_r+0x4b4>
 8020e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e98:	9d01      	ldr	r5, [sp, #4]
 8020e9a:	43db      	mvns	r3, r3
 8020e9c:	9300      	str	r3, [sp, #0]
 8020e9e:	f04f 0800 	mov.w	r8, #0
 8020ea2:	4631      	mov	r1, r6
 8020ea4:	4620      	mov	r0, r4
 8020ea6:	f000 f9db 	bl	8021260 <_Bfree>
 8020eaa:	2f00      	cmp	r7, #0
 8020eac:	f43f aea4 	beq.w	8020bf8 <_dtoa_r+0x6a0>
 8020eb0:	f1b8 0f00 	cmp.w	r8, #0
 8020eb4:	d005      	beq.n	8020ec2 <_dtoa_r+0x96a>
 8020eb6:	45b8      	cmp	r8, r7
 8020eb8:	d003      	beq.n	8020ec2 <_dtoa_r+0x96a>
 8020eba:	4641      	mov	r1, r8
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	f000 f9cf 	bl	8021260 <_Bfree>
 8020ec2:	4639      	mov	r1, r7
 8020ec4:	4620      	mov	r0, r4
 8020ec6:	f000 f9cb 	bl	8021260 <_Bfree>
 8020eca:	e695      	b.n	8020bf8 <_dtoa_r+0x6a0>
 8020ecc:	2600      	movs	r6, #0
 8020ece:	4637      	mov	r7, r6
 8020ed0:	e7e1      	b.n	8020e96 <_dtoa_r+0x93e>
 8020ed2:	9700      	str	r7, [sp, #0]
 8020ed4:	4637      	mov	r7, r6
 8020ed6:	e599      	b.n	8020a0c <_dtoa_r+0x4b4>
 8020ed8:	40240000 	.word	0x40240000
 8020edc:	9b08      	ldr	r3, [sp, #32]
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	f000 80ca 	beq.w	8021078 <_dtoa_r+0xb20>
 8020ee4:	9b03      	ldr	r3, [sp, #12]
 8020ee6:	9302      	str	r3, [sp, #8]
 8020ee8:	2d00      	cmp	r5, #0
 8020eea:	dd05      	ble.n	8020ef8 <_dtoa_r+0x9a0>
 8020eec:	4639      	mov	r1, r7
 8020eee:	462a      	mov	r2, r5
 8020ef0:	4620      	mov	r0, r4
 8020ef2:	f000 fb87 	bl	8021604 <__lshift>
 8020ef6:	4607      	mov	r7, r0
 8020ef8:	f1b8 0f00 	cmp.w	r8, #0
 8020efc:	d05b      	beq.n	8020fb6 <_dtoa_r+0xa5e>
 8020efe:	6879      	ldr	r1, [r7, #4]
 8020f00:	4620      	mov	r0, r4
 8020f02:	f000 f96d 	bl	80211e0 <_Balloc>
 8020f06:	4605      	mov	r5, r0
 8020f08:	b928      	cbnz	r0, 8020f16 <_dtoa_r+0x9be>
 8020f0a:	4b87      	ldr	r3, [pc, #540]	; (8021128 <_dtoa_r+0xbd0>)
 8020f0c:	4602      	mov	r2, r0
 8020f0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020f12:	f7ff bb3b 	b.w	802058c <_dtoa_r+0x34>
 8020f16:	693a      	ldr	r2, [r7, #16]
 8020f18:	3202      	adds	r2, #2
 8020f1a:	0092      	lsls	r2, r2, #2
 8020f1c:	f107 010c 	add.w	r1, r7, #12
 8020f20:	300c      	adds	r0, #12
 8020f22:	f7fe fabb 	bl	801f49c <memcpy>
 8020f26:	2201      	movs	r2, #1
 8020f28:	4629      	mov	r1, r5
 8020f2a:	4620      	mov	r0, r4
 8020f2c:	f000 fb6a 	bl	8021604 <__lshift>
 8020f30:	9b01      	ldr	r3, [sp, #4]
 8020f32:	f103 0901 	add.w	r9, r3, #1
 8020f36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8020f3a:	4413      	add	r3, r2
 8020f3c:	9305      	str	r3, [sp, #20]
 8020f3e:	f00a 0301 	and.w	r3, sl, #1
 8020f42:	46b8      	mov	r8, r7
 8020f44:	9304      	str	r3, [sp, #16]
 8020f46:	4607      	mov	r7, r0
 8020f48:	4631      	mov	r1, r6
 8020f4a:	ee18 0a10 	vmov	r0, s16
 8020f4e:	f7ff fa75 	bl	802043c <quorem>
 8020f52:	4641      	mov	r1, r8
 8020f54:	9002      	str	r0, [sp, #8]
 8020f56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020f5a:	ee18 0a10 	vmov	r0, s16
 8020f5e:	f000 fbc1 	bl	80216e4 <__mcmp>
 8020f62:	463a      	mov	r2, r7
 8020f64:	9003      	str	r0, [sp, #12]
 8020f66:	4631      	mov	r1, r6
 8020f68:	4620      	mov	r0, r4
 8020f6a:	f000 fbd7 	bl	802171c <__mdiff>
 8020f6e:	68c2      	ldr	r2, [r0, #12]
 8020f70:	f109 3bff 	add.w	fp, r9, #4294967295
 8020f74:	4605      	mov	r5, r0
 8020f76:	bb02      	cbnz	r2, 8020fba <_dtoa_r+0xa62>
 8020f78:	4601      	mov	r1, r0
 8020f7a:	ee18 0a10 	vmov	r0, s16
 8020f7e:	f000 fbb1 	bl	80216e4 <__mcmp>
 8020f82:	4602      	mov	r2, r0
 8020f84:	4629      	mov	r1, r5
 8020f86:	4620      	mov	r0, r4
 8020f88:	9207      	str	r2, [sp, #28]
 8020f8a:	f000 f969 	bl	8021260 <_Bfree>
 8020f8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020f92:	ea43 0102 	orr.w	r1, r3, r2
 8020f96:	9b04      	ldr	r3, [sp, #16]
 8020f98:	430b      	orrs	r3, r1
 8020f9a:	464d      	mov	r5, r9
 8020f9c:	d10f      	bne.n	8020fbe <_dtoa_r+0xa66>
 8020f9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020fa2:	d02a      	beq.n	8020ffa <_dtoa_r+0xaa2>
 8020fa4:	9b03      	ldr	r3, [sp, #12]
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	dd02      	ble.n	8020fb0 <_dtoa_r+0xa58>
 8020faa:	9b02      	ldr	r3, [sp, #8]
 8020fac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020fb0:	f88b a000 	strb.w	sl, [fp]
 8020fb4:	e775      	b.n	8020ea2 <_dtoa_r+0x94a>
 8020fb6:	4638      	mov	r0, r7
 8020fb8:	e7ba      	b.n	8020f30 <_dtoa_r+0x9d8>
 8020fba:	2201      	movs	r2, #1
 8020fbc:	e7e2      	b.n	8020f84 <_dtoa_r+0xa2c>
 8020fbe:	9b03      	ldr	r3, [sp, #12]
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	db04      	blt.n	8020fce <_dtoa_r+0xa76>
 8020fc4:	9906      	ldr	r1, [sp, #24]
 8020fc6:	430b      	orrs	r3, r1
 8020fc8:	9904      	ldr	r1, [sp, #16]
 8020fca:	430b      	orrs	r3, r1
 8020fcc:	d122      	bne.n	8021014 <_dtoa_r+0xabc>
 8020fce:	2a00      	cmp	r2, #0
 8020fd0:	ddee      	ble.n	8020fb0 <_dtoa_r+0xa58>
 8020fd2:	ee18 1a10 	vmov	r1, s16
 8020fd6:	2201      	movs	r2, #1
 8020fd8:	4620      	mov	r0, r4
 8020fda:	f000 fb13 	bl	8021604 <__lshift>
 8020fde:	4631      	mov	r1, r6
 8020fe0:	ee08 0a10 	vmov	s16, r0
 8020fe4:	f000 fb7e 	bl	80216e4 <__mcmp>
 8020fe8:	2800      	cmp	r0, #0
 8020fea:	dc03      	bgt.n	8020ff4 <_dtoa_r+0xa9c>
 8020fec:	d1e0      	bne.n	8020fb0 <_dtoa_r+0xa58>
 8020fee:	f01a 0f01 	tst.w	sl, #1
 8020ff2:	d0dd      	beq.n	8020fb0 <_dtoa_r+0xa58>
 8020ff4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020ff8:	d1d7      	bne.n	8020faa <_dtoa_r+0xa52>
 8020ffa:	2339      	movs	r3, #57	; 0x39
 8020ffc:	f88b 3000 	strb.w	r3, [fp]
 8021000:	462b      	mov	r3, r5
 8021002:	461d      	mov	r5, r3
 8021004:	3b01      	subs	r3, #1
 8021006:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802100a:	2a39      	cmp	r2, #57	; 0x39
 802100c:	d071      	beq.n	80210f2 <_dtoa_r+0xb9a>
 802100e:	3201      	adds	r2, #1
 8021010:	701a      	strb	r2, [r3, #0]
 8021012:	e746      	b.n	8020ea2 <_dtoa_r+0x94a>
 8021014:	2a00      	cmp	r2, #0
 8021016:	dd07      	ble.n	8021028 <_dtoa_r+0xad0>
 8021018:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802101c:	d0ed      	beq.n	8020ffa <_dtoa_r+0xaa2>
 802101e:	f10a 0301 	add.w	r3, sl, #1
 8021022:	f88b 3000 	strb.w	r3, [fp]
 8021026:	e73c      	b.n	8020ea2 <_dtoa_r+0x94a>
 8021028:	9b05      	ldr	r3, [sp, #20]
 802102a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802102e:	4599      	cmp	r9, r3
 8021030:	d047      	beq.n	80210c2 <_dtoa_r+0xb6a>
 8021032:	ee18 1a10 	vmov	r1, s16
 8021036:	2300      	movs	r3, #0
 8021038:	220a      	movs	r2, #10
 802103a:	4620      	mov	r0, r4
 802103c:	f000 f932 	bl	80212a4 <__multadd>
 8021040:	45b8      	cmp	r8, r7
 8021042:	ee08 0a10 	vmov	s16, r0
 8021046:	f04f 0300 	mov.w	r3, #0
 802104a:	f04f 020a 	mov.w	r2, #10
 802104e:	4641      	mov	r1, r8
 8021050:	4620      	mov	r0, r4
 8021052:	d106      	bne.n	8021062 <_dtoa_r+0xb0a>
 8021054:	f000 f926 	bl	80212a4 <__multadd>
 8021058:	4680      	mov	r8, r0
 802105a:	4607      	mov	r7, r0
 802105c:	f109 0901 	add.w	r9, r9, #1
 8021060:	e772      	b.n	8020f48 <_dtoa_r+0x9f0>
 8021062:	f000 f91f 	bl	80212a4 <__multadd>
 8021066:	4639      	mov	r1, r7
 8021068:	4680      	mov	r8, r0
 802106a:	2300      	movs	r3, #0
 802106c:	220a      	movs	r2, #10
 802106e:	4620      	mov	r0, r4
 8021070:	f000 f918 	bl	80212a4 <__multadd>
 8021074:	4607      	mov	r7, r0
 8021076:	e7f1      	b.n	802105c <_dtoa_r+0xb04>
 8021078:	9b03      	ldr	r3, [sp, #12]
 802107a:	9302      	str	r3, [sp, #8]
 802107c:	9d01      	ldr	r5, [sp, #4]
 802107e:	ee18 0a10 	vmov	r0, s16
 8021082:	4631      	mov	r1, r6
 8021084:	f7ff f9da 	bl	802043c <quorem>
 8021088:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802108c:	9b01      	ldr	r3, [sp, #4]
 802108e:	f805 ab01 	strb.w	sl, [r5], #1
 8021092:	1aea      	subs	r2, r5, r3
 8021094:	9b02      	ldr	r3, [sp, #8]
 8021096:	4293      	cmp	r3, r2
 8021098:	dd09      	ble.n	80210ae <_dtoa_r+0xb56>
 802109a:	ee18 1a10 	vmov	r1, s16
 802109e:	2300      	movs	r3, #0
 80210a0:	220a      	movs	r2, #10
 80210a2:	4620      	mov	r0, r4
 80210a4:	f000 f8fe 	bl	80212a4 <__multadd>
 80210a8:	ee08 0a10 	vmov	s16, r0
 80210ac:	e7e7      	b.n	802107e <_dtoa_r+0xb26>
 80210ae:	9b02      	ldr	r3, [sp, #8]
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	bfc8      	it	gt
 80210b4:	461d      	movgt	r5, r3
 80210b6:	9b01      	ldr	r3, [sp, #4]
 80210b8:	bfd8      	it	le
 80210ba:	2501      	movle	r5, #1
 80210bc:	441d      	add	r5, r3
 80210be:	f04f 0800 	mov.w	r8, #0
 80210c2:	ee18 1a10 	vmov	r1, s16
 80210c6:	2201      	movs	r2, #1
 80210c8:	4620      	mov	r0, r4
 80210ca:	f000 fa9b 	bl	8021604 <__lshift>
 80210ce:	4631      	mov	r1, r6
 80210d0:	ee08 0a10 	vmov	s16, r0
 80210d4:	f000 fb06 	bl	80216e4 <__mcmp>
 80210d8:	2800      	cmp	r0, #0
 80210da:	dc91      	bgt.n	8021000 <_dtoa_r+0xaa8>
 80210dc:	d102      	bne.n	80210e4 <_dtoa_r+0xb8c>
 80210de:	f01a 0f01 	tst.w	sl, #1
 80210e2:	d18d      	bne.n	8021000 <_dtoa_r+0xaa8>
 80210e4:	462b      	mov	r3, r5
 80210e6:	461d      	mov	r5, r3
 80210e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80210ec:	2a30      	cmp	r2, #48	; 0x30
 80210ee:	d0fa      	beq.n	80210e6 <_dtoa_r+0xb8e>
 80210f0:	e6d7      	b.n	8020ea2 <_dtoa_r+0x94a>
 80210f2:	9a01      	ldr	r2, [sp, #4]
 80210f4:	429a      	cmp	r2, r3
 80210f6:	d184      	bne.n	8021002 <_dtoa_r+0xaaa>
 80210f8:	9b00      	ldr	r3, [sp, #0]
 80210fa:	3301      	adds	r3, #1
 80210fc:	9300      	str	r3, [sp, #0]
 80210fe:	2331      	movs	r3, #49	; 0x31
 8021100:	7013      	strb	r3, [r2, #0]
 8021102:	e6ce      	b.n	8020ea2 <_dtoa_r+0x94a>
 8021104:	4b09      	ldr	r3, [pc, #36]	; (802112c <_dtoa_r+0xbd4>)
 8021106:	f7ff ba95 	b.w	8020634 <_dtoa_r+0xdc>
 802110a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802110c:	2b00      	cmp	r3, #0
 802110e:	f47f aa6e 	bne.w	80205ee <_dtoa_r+0x96>
 8021112:	4b07      	ldr	r3, [pc, #28]	; (8021130 <_dtoa_r+0xbd8>)
 8021114:	f7ff ba8e 	b.w	8020634 <_dtoa_r+0xdc>
 8021118:	9b02      	ldr	r3, [sp, #8]
 802111a:	2b00      	cmp	r3, #0
 802111c:	dcae      	bgt.n	802107c <_dtoa_r+0xb24>
 802111e:	9b06      	ldr	r3, [sp, #24]
 8021120:	2b02      	cmp	r3, #2
 8021122:	f73f aea8 	bgt.w	8020e76 <_dtoa_r+0x91e>
 8021126:	e7a9      	b.n	802107c <_dtoa_r+0xb24>
 8021128:	08023107 	.word	0x08023107
 802112c:	08023064 	.word	0x08023064
 8021130:	08023088 	.word	0x08023088

08021134 <_fstat_r>:
 8021134:	b538      	push	{r3, r4, r5, lr}
 8021136:	4d07      	ldr	r5, [pc, #28]	; (8021154 <_fstat_r+0x20>)
 8021138:	2300      	movs	r3, #0
 802113a:	4604      	mov	r4, r0
 802113c:	4608      	mov	r0, r1
 802113e:	4611      	mov	r1, r2
 8021140:	602b      	str	r3, [r5, #0]
 8021142:	f7e2 fb8c 	bl	800385e <_fstat>
 8021146:	1c43      	adds	r3, r0, #1
 8021148:	d102      	bne.n	8021150 <_fstat_r+0x1c>
 802114a:	682b      	ldr	r3, [r5, #0]
 802114c:	b103      	cbz	r3, 8021150 <_fstat_r+0x1c>
 802114e:	6023      	str	r3, [r4, #0]
 8021150:	bd38      	pop	{r3, r4, r5, pc}
 8021152:	bf00      	nop
 8021154:	20009a24 	.word	0x20009a24

08021158 <_isatty_r>:
 8021158:	b538      	push	{r3, r4, r5, lr}
 802115a:	4d06      	ldr	r5, [pc, #24]	; (8021174 <_isatty_r+0x1c>)
 802115c:	2300      	movs	r3, #0
 802115e:	4604      	mov	r4, r0
 8021160:	4608      	mov	r0, r1
 8021162:	602b      	str	r3, [r5, #0]
 8021164:	f7e2 fb8b 	bl	800387e <_isatty>
 8021168:	1c43      	adds	r3, r0, #1
 802116a:	d102      	bne.n	8021172 <_isatty_r+0x1a>
 802116c:	682b      	ldr	r3, [r5, #0]
 802116e:	b103      	cbz	r3, 8021172 <_isatty_r+0x1a>
 8021170:	6023      	str	r3, [r4, #0]
 8021172:	bd38      	pop	{r3, r4, r5, pc}
 8021174:	20009a24 	.word	0x20009a24

08021178 <_localeconv_r>:
 8021178:	4800      	ldr	r0, [pc, #0]	; (802117c <_localeconv_r+0x4>)
 802117a:	4770      	bx	lr
 802117c:	200001ec 	.word	0x200001ec

08021180 <_lseek_r>:
 8021180:	b538      	push	{r3, r4, r5, lr}
 8021182:	4d07      	ldr	r5, [pc, #28]	; (80211a0 <_lseek_r+0x20>)
 8021184:	4604      	mov	r4, r0
 8021186:	4608      	mov	r0, r1
 8021188:	4611      	mov	r1, r2
 802118a:	2200      	movs	r2, #0
 802118c:	602a      	str	r2, [r5, #0]
 802118e:	461a      	mov	r2, r3
 8021190:	f7e2 fb80 	bl	8003894 <_lseek>
 8021194:	1c43      	adds	r3, r0, #1
 8021196:	d102      	bne.n	802119e <_lseek_r+0x1e>
 8021198:	682b      	ldr	r3, [r5, #0]
 802119a:	b103      	cbz	r3, 802119e <_lseek_r+0x1e>
 802119c:	6023      	str	r3, [r4, #0]
 802119e:	bd38      	pop	{r3, r4, r5, pc}
 80211a0:	20009a24 	.word	0x20009a24

080211a4 <__ascii_mbtowc>:
 80211a4:	b082      	sub	sp, #8
 80211a6:	b901      	cbnz	r1, 80211aa <__ascii_mbtowc+0x6>
 80211a8:	a901      	add	r1, sp, #4
 80211aa:	b142      	cbz	r2, 80211be <__ascii_mbtowc+0x1a>
 80211ac:	b14b      	cbz	r3, 80211c2 <__ascii_mbtowc+0x1e>
 80211ae:	7813      	ldrb	r3, [r2, #0]
 80211b0:	600b      	str	r3, [r1, #0]
 80211b2:	7812      	ldrb	r2, [r2, #0]
 80211b4:	1e10      	subs	r0, r2, #0
 80211b6:	bf18      	it	ne
 80211b8:	2001      	movne	r0, #1
 80211ba:	b002      	add	sp, #8
 80211bc:	4770      	bx	lr
 80211be:	4610      	mov	r0, r2
 80211c0:	e7fb      	b.n	80211ba <__ascii_mbtowc+0x16>
 80211c2:	f06f 0001 	mvn.w	r0, #1
 80211c6:	e7f8      	b.n	80211ba <__ascii_mbtowc+0x16>

080211c8 <__malloc_lock>:
 80211c8:	4801      	ldr	r0, [pc, #4]	; (80211d0 <__malloc_lock+0x8>)
 80211ca:	f7fe b8f0 	b.w	801f3ae <__retarget_lock_acquire_recursive>
 80211ce:	bf00      	nop
 80211d0:	20009a18 	.word	0x20009a18

080211d4 <__malloc_unlock>:
 80211d4:	4801      	ldr	r0, [pc, #4]	; (80211dc <__malloc_unlock+0x8>)
 80211d6:	f7fe b8eb 	b.w	801f3b0 <__retarget_lock_release_recursive>
 80211da:	bf00      	nop
 80211dc:	20009a18 	.word	0x20009a18

080211e0 <_Balloc>:
 80211e0:	b570      	push	{r4, r5, r6, lr}
 80211e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80211e4:	4604      	mov	r4, r0
 80211e6:	460d      	mov	r5, r1
 80211e8:	b976      	cbnz	r6, 8021208 <_Balloc+0x28>
 80211ea:	2010      	movs	r0, #16
 80211ec:	f7fe f946 	bl	801f47c <malloc>
 80211f0:	4602      	mov	r2, r0
 80211f2:	6260      	str	r0, [r4, #36]	; 0x24
 80211f4:	b920      	cbnz	r0, 8021200 <_Balloc+0x20>
 80211f6:	4b18      	ldr	r3, [pc, #96]	; (8021258 <_Balloc+0x78>)
 80211f8:	4818      	ldr	r0, [pc, #96]	; (802125c <_Balloc+0x7c>)
 80211fa:	2166      	movs	r1, #102	; 0x66
 80211fc:	f000 fed6 	bl	8021fac <__assert_func>
 8021200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021204:	6006      	str	r6, [r0, #0]
 8021206:	60c6      	str	r6, [r0, #12]
 8021208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802120a:	68f3      	ldr	r3, [r6, #12]
 802120c:	b183      	cbz	r3, 8021230 <_Balloc+0x50>
 802120e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021210:	68db      	ldr	r3, [r3, #12]
 8021212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021216:	b9b8      	cbnz	r0, 8021248 <_Balloc+0x68>
 8021218:	2101      	movs	r1, #1
 802121a:	fa01 f605 	lsl.w	r6, r1, r5
 802121e:	1d72      	adds	r2, r6, #5
 8021220:	0092      	lsls	r2, r2, #2
 8021222:	4620      	mov	r0, r4
 8021224:	f000 fb60 	bl	80218e8 <_calloc_r>
 8021228:	b160      	cbz	r0, 8021244 <_Balloc+0x64>
 802122a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802122e:	e00e      	b.n	802124e <_Balloc+0x6e>
 8021230:	2221      	movs	r2, #33	; 0x21
 8021232:	2104      	movs	r1, #4
 8021234:	4620      	mov	r0, r4
 8021236:	f000 fb57 	bl	80218e8 <_calloc_r>
 802123a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802123c:	60f0      	str	r0, [r6, #12]
 802123e:	68db      	ldr	r3, [r3, #12]
 8021240:	2b00      	cmp	r3, #0
 8021242:	d1e4      	bne.n	802120e <_Balloc+0x2e>
 8021244:	2000      	movs	r0, #0
 8021246:	bd70      	pop	{r4, r5, r6, pc}
 8021248:	6802      	ldr	r2, [r0, #0]
 802124a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802124e:	2300      	movs	r3, #0
 8021250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021254:	e7f7      	b.n	8021246 <_Balloc+0x66>
 8021256:	bf00      	nop
 8021258:	08023095 	.word	0x08023095
 802125c:	08023122 	.word	0x08023122

08021260 <_Bfree>:
 8021260:	b570      	push	{r4, r5, r6, lr}
 8021262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021264:	4605      	mov	r5, r0
 8021266:	460c      	mov	r4, r1
 8021268:	b976      	cbnz	r6, 8021288 <_Bfree+0x28>
 802126a:	2010      	movs	r0, #16
 802126c:	f7fe f906 	bl	801f47c <malloc>
 8021270:	4602      	mov	r2, r0
 8021272:	6268      	str	r0, [r5, #36]	; 0x24
 8021274:	b920      	cbnz	r0, 8021280 <_Bfree+0x20>
 8021276:	4b09      	ldr	r3, [pc, #36]	; (802129c <_Bfree+0x3c>)
 8021278:	4809      	ldr	r0, [pc, #36]	; (80212a0 <_Bfree+0x40>)
 802127a:	218a      	movs	r1, #138	; 0x8a
 802127c:	f000 fe96 	bl	8021fac <__assert_func>
 8021280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021284:	6006      	str	r6, [r0, #0]
 8021286:	60c6      	str	r6, [r0, #12]
 8021288:	b13c      	cbz	r4, 802129a <_Bfree+0x3a>
 802128a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802128c:	6862      	ldr	r2, [r4, #4]
 802128e:	68db      	ldr	r3, [r3, #12]
 8021290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021294:	6021      	str	r1, [r4, #0]
 8021296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802129a:	bd70      	pop	{r4, r5, r6, pc}
 802129c:	08023095 	.word	0x08023095
 80212a0:	08023122 	.word	0x08023122

080212a4 <__multadd>:
 80212a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212a8:	690d      	ldr	r5, [r1, #16]
 80212aa:	4607      	mov	r7, r0
 80212ac:	460c      	mov	r4, r1
 80212ae:	461e      	mov	r6, r3
 80212b0:	f101 0c14 	add.w	ip, r1, #20
 80212b4:	2000      	movs	r0, #0
 80212b6:	f8dc 3000 	ldr.w	r3, [ip]
 80212ba:	b299      	uxth	r1, r3
 80212bc:	fb02 6101 	mla	r1, r2, r1, r6
 80212c0:	0c1e      	lsrs	r6, r3, #16
 80212c2:	0c0b      	lsrs	r3, r1, #16
 80212c4:	fb02 3306 	mla	r3, r2, r6, r3
 80212c8:	b289      	uxth	r1, r1
 80212ca:	3001      	adds	r0, #1
 80212cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80212d0:	4285      	cmp	r5, r0
 80212d2:	f84c 1b04 	str.w	r1, [ip], #4
 80212d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80212da:	dcec      	bgt.n	80212b6 <__multadd+0x12>
 80212dc:	b30e      	cbz	r6, 8021322 <__multadd+0x7e>
 80212de:	68a3      	ldr	r3, [r4, #8]
 80212e0:	42ab      	cmp	r3, r5
 80212e2:	dc19      	bgt.n	8021318 <__multadd+0x74>
 80212e4:	6861      	ldr	r1, [r4, #4]
 80212e6:	4638      	mov	r0, r7
 80212e8:	3101      	adds	r1, #1
 80212ea:	f7ff ff79 	bl	80211e0 <_Balloc>
 80212ee:	4680      	mov	r8, r0
 80212f0:	b928      	cbnz	r0, 80212fe <__multadd+0x5a>
 80212f2:	4602      	mov	r2, r0
 80212f4:	4b0c      	ldr	r3, [pc, #48]	; (8021328 <__multadd+0x84>)
 80212f6:	480d      	ldr	r0, [pc, #52]	; (802132c <__multadd+0x88>)
 80212f8:	21b5      	movs	r1, #181	; 0xb5
 80212fa:	f000 fe57 	bl	8021fac <__assert_func>
 80212fe:	6922      	ldr	r2, [r4, #16]
 8021300:	3202      	adds	r2, #2
 8021302:	f104 010c 	add.w	r1, r4, #12
 8021306:	0092      	lsls	r2, r2, #2
 8021308:	300c      	adds	r0, #12
 802130a:	f7fe f8c7 	bl	801f49c <memcpy>
 802130e:	4621      	mov	r1, r4
 8021310:	4638      	mov	r0, r7
 8021312:	f7ff ffa5 	bl	8021260 <_Bfree>
 8021316:	4644      	mov	r4, r8
 8021318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802131c:	3501      	adds	r5, #1
 802131e:	615e      	str	r6, [r3, #20]
 8021320:	6125      	str	r5, [r4, #16]
 8021322:	4620      	mov	r0, r4
 8021324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021328:	08023107 	.word	0x08023107
 802132c:	08023122 	.word	0x08023122

08021330 <__hi0bits>:
 8021330:	0c03      	lsrs	r3, r0, #16
 8021332:	041b      	lsls	r3, r3, #16
 8021334:	b9d3      	cbnz	r3, 802136c <__hi0bits+0x3c>
 8021336:	0400      	lsls	r0, r0, #16
 8021338:	2310      	movs	r3, #16
 802133a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802133e:	bf04      	itt	eq
 8021340:	0200      	lsleq	r0, r0, #8
 8021342:	3308      	addeq	r3, #8
 8021344:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021348:	bf04      	itt	eq
 802134a:	0100      	lsleq	r0, r0, #4
 802134c:	3304      	addeq	r3, #4
 802134e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021352:	bf04      	itt	eq
 8021354:	0080      	lsleq	r0, r0, #2
 8021356:	3302      	addeq	r3, #2
 8021358:	2800      	cmp	r0, #0
 802135a:	db05      	blt.n	8021368 <__hi0bits+0x38>
 802135c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021360:	f103 0301 	add.w	r3, r3, #1
 8021364:	bf08      	it	eq
 8021366:	2320      	moveq	r3, #32
 8021368:	4618      	mov	r0, r3
 802136a:	4770      	bx	lr
 802136c:	2300      	movs	r3, #0
 802136e:	e7e4      	b.n	802133a <__hi0bits+0xa>

08021370 <__lo0bits>:
 8021370:	6803      	ldr	r3, [r0, #0]
 8021372:	f013 0207 	ands.w	r2, r3, #7
 8021376:	4601      	mov	r1, r0
 8021378:	d00b      	beq.n	8021392 <__lo0bits+0x22>
 802137a:	07da      	lsls	r2, r3, #31
 802137c:	d423      	bmi.n	80213c6 <__lo0bits+0x56>
 802137e:	0798      	lsls	r0, r3, #30
 8021380:	bf49      	itett	mi
 8021382:	085b      	lsrmi	r3, r3, #1
 8021384:	089b      	lsrpl	r3, r3, #2
 8021386:	2001      	movmi	r0, #1
 8021388:	600b      	strmi	r3, [r1, #0]
 802138a:	bf5c      	itt	pl
 802138c:	600b      	strpl	r3, [r1, #0]
 802138e:	2002      	movpl	r0, #2
 8021390:	4770      	bx	lr
 8021392:	b298      	uxth	r0, r3
 8021394:	b9a8      	cbnz	r0, 80213c2 <__lo0bits+0x52>
 8021396:	0c1b      	lsrs	r3, r3, #16
 8021398:	2010      	movs	r0, #16
 802139a:	b2da      	uxtb	r2, r3
 802139c:	b90a      	cbnz	r2, 80213a2 <__lo0bits+0x32>
 802139e:	3008      	adds	r0, #8
 80213a0:	0a1b      	lsrs	r3, r3, #8
 80213a2:	071a      	lsls	r2, r3, #28
 80213a4:	bf04      	itt	eq
 80213a6:	091b      	lsreq	r3, r3, #4
 80213a8:	3004      	addeq	r0, #4
 80213aa:	079a      	lsls	r2, r3, #30
 80213ac:	bf04      	itt	eq
 80213ae:	089b      	lsreq	r3, r3, #2
 80213b0:	3002      	addeq	r0, #2
 80213b2:	07da      	lsls	r2, r3, #31
 80213b4:	d403      	bmi.n	80213be <__lo0bits+0x4e>
 80213b6:	085b      	lsrs	r3, r3, #1
 80213b8:	f100 0001 	add.w	r0, r0, #1
 80213bc:	d005      	beq.n	80213ca <__lo0bits+0x5a>
 80213be:	600b      	str	r3, [r1, #0]
 80213c0:	4770      	bx	lr
 80213c2:	4610      	mov	r0, r2
 80213c4:	e7e9      	b.n	802139a <__lo0bits+0x2a>
 80213c6:	2000      	movs	r0, #0
 80213c8:	4770      	bx	lr
 80213ca:	2020      	movs	r0, #32
 80213cc:	4770      	bx	lr
	...

080213d0 <__i2b>:
 80213d0:	b510      	push	{r4, lr}
 80213d2:	460c      	mov	r4, r1
 80213d4:	2101      	movs	r1, #1
 80213d6:	f7ff ff03 	bl	80211e0 <_Balloc>
 80213da:	4602      	mov	r2, r0
 80213dc:	b928      	cbnz	r0, 80213ea <__i2b+0x1a>
 80213de:	4b05      	ldr	r3, [pc, #20]	; (80213f4 <__i2b+0x24>)
 80213e0:	4805      	ldr	r0, [pc, #20]	; (80213f8 <__i2b+0x28>)
 80213e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80213e6:	f000 fde1 	bl	8021fac <__assert_func>
 80213ea:	2301      	movs	r3, #1
 80213ec:	6144      	str	r4, [r0, #20]
 80213ee:	6103      	str	r3, [r0, #16]
 80213f0:	bd10      	pop	{r4, pc}
 80213f2:	bf00      	nop
 80213f4:	08023107 	.word	0x08023107
 80213f8:	08023122 	.word	0x08023122

080213fc <__multiply>:
 80213fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021400:	4691      	mov	r9, r2
 8021402:	690a      	ldr	r2, [r1, #16]
 8021404:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021408:	429a      	cmp	r2, r3
 802140a:	bfb8      	it	lt
 802140c:	460b      	movlt	r3, r1
 802140e:	460c      	mov	r4, r1
 8021410:	bfbc      	itt	lt
 8021412:	464c      	movlt	r4, r9
 8021414:	4699      	movlt	r9, r3
 8021416:	6927      	ldr	r7, [r4, #16]
 8021418:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802141c:	68a3      	ldr	r3, [r4, #8]
 802141e:	6861      	ldr	r1, [r4, #4]
 8021420:	eb07 060a 	add.w	r6, r7, sl
 8021424:	42b3      	cmp	r3, r6
 8021426:	b085      	sub	sp, #20
 8021428:	bfb8      	it	lt
 802142a:	3101      	addlt	r1, #1
 802142c:	f7ff fed8 	bl	80211e0 <_Balloc>
 8021430:	b930      	cbnz	r0, 8021440 <__multiply+0x44>
 8021432:	4602      	mov	r2, r0
 8021434:	4b44      	ldr	r3, [pc, #272]	; (8021548 <__multiply+0x14c>)
 8021436:	4845      	ldr	r0, [pc, #276]	; (802154c <__multiply+0x150>)
 8021438:	f240 115d 	movw	r1, #349	; 0x15d
 802143c:	f000 fdb6 	bl	8021fac <__assert_func>
 8021440:	f100 0514 	add.w	r5, r0, #20
 8021444:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021448:	462b      	mov	r3, r5
 802144a:	2200      	movs	r2, #0
 802144c:	4543      	cmp	r3, r8
 802144e:	d321      	bcc.n	8021494 <__multiply+0x98>
 8021450:	f104 0314 	add.w	r3, r4, #20
 8021454:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021458:	f109 0314 	add.w	r3, r9, #20
 802145c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021460:	9202      	str	r2, [sp, #8]
 8021462:	1b3a      	subs	r2, r7, r4
 8021464:	3a15      	subs	r2, #21
 8021466:	f022 0203 	bic.w	r2, r2, #3
 802146a:	3204      	adds	r2, #4
 802146c:	f104 0115 	add.w	r1, r4, #21
 8021470:	428f      	cmp	r7, r1
 8021472:	bf38      	it	cc
 8021474:	2204      	movcc	r2, #4
 8021476:	9201      	str	r2, [sp, #4]
 8021478:	9a02      	ldr	r2, [sp, #8]
 802147a:	9303      	str	r3, [sp, #12]
 802147c:	429a      	cmp	r2, r3
 802147e:	d80c      	bhi.n	802149a <__multiply+0x9e>
 8021480:	2e00      	cmp	r6, #0
 8021482:	dd03      	ble.n	802148c <__multiply+0x90>
 8021484:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021488:	2b00      	cmp	r3, #0
 802148a:	d05a      	beq.n	8021542 <__multiply+0x146>
 802148c:	6106      	str	r6, [r0, #16]
 802148e:	b005      	add	sp, #20
 8021490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021494:	f843 2b04 	str.w	r2, [r3], #4
 8021498:	e7d8      	b.n	802144c <__multiply+0x50>
 802149a:	f8b3 a000 	ldrh.w	sl, [r3]
 802149e:	f1ba 0f00 	cmp.w	sl, #0
 80214a2:	d024      	beq.n	80214ee <__multiply+0xf2>
 80214a4:	f104 0e14 	add.w	lr, r4, #20
 80214a8:	46a9      	mov	r9, r5
 80214aa:	f04f 0c00 	mov.w	ip, #0
 80214ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80214b2:	f8d9 1000 	ldr.w	r1, [r9]
 80214b6:	fa1f fb82 	uxth.w	fp, r2
 80214ba:	b289      	uxth	r1, r1
 80214bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80214c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80214c4:	f8d9 2000 	ldr.w	r2, [r9]
 80214c8:	4461      	add	r1, ip
 80214ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80214ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80214d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80214d6:	b289      	uxth	r1, r1
 80214d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80214dc:	4577      	cmp	r7, lr
 80214de:	f849 1b04 	str.w	r1, [r9], #4
 80214e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80214e6:	d8e2      	bhi.n	80214ae <__multiply+0xb2>
 80214e8:	9a01      	ldr	r2, [sp, #4]
 80214ea:	f845 c002 	str.w	ip, [r5, r2]
 80214ee:	9a03      	ldr	r2, [sp, #12]
 80214f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80214f4:	3304      	adds	r3, #4
 80214f6:	f1b9 0f00 	cmp.w	r9, #0
 80214fa:	d020      	beq.n	802153e <__multiply+0x142>
 80214fc:	6829      	ldr	r1, [r5, #0]
 80214fe:	f104 0c14 	add.w	ip, r4, #20
 8021502:	46ae      	mov	lr, r5
 8021504:	f04f 0a00 	mov.w	sl, #0
 8021508:	f8bc b000 	ldrh.w	fp, [ip]
 802150c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021510:	fb09 220b 	mla	r2, r9, fp, r2
 8021514:	4492      	add	sl, r2
 8021516:	b289      	uxth	r1, r1
 8021518:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802151c:	f84e 1b04 	str.w	r1, [lr], #4
 8021520:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021524:	f8be 1000 	ldrh.w	r1, [lr]
 8021528:	0c12      	lsrs	r2, r2, #16
 802152a:	fb09 1102 	mla	r1, r9, r2, r1
 802152e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021532:	4567      	cmp	r7, ip
 8021534:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021538:	d8e6      	bhi.n	8021508 <__multiply+0x10c>
 802153a:	9a01      	ldr	r2, [sp, #4]
 802153c:	50a9      	str	r1, [r5, r2]
 802153e:	3504      	adds	r5, #4
 8021540:	e79a      	b.n	8021478 <__multiply+0x7c>
 8021542:	3e01      	subs	r6, #1
 8021544:	e79c      	b.n	8021480 <__multiply+0x84>
 8021546:	bf00      	nop
 8021548:	08023107 	.word	0x08023107
 802154c:	08023122 	.word	0x08023122

08021550 <__pow5mult>:
 8021550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021554:	4615      	mov	r5, r2
 8021556:	f012 0203 	ands.w	r2, r2, #3
 802155a:	4606      	mov	r6, r0
 802155c:	460f      	mov	r7, r1
 802155e:	d007      	beq.n	8021570 <__pow5mult+0x20>
 8021560:	4c25      	ldr	r4, [pc, #148]	; (80215f8 <__pow5mult+0xa8>)
 8021562:	3a01      	subs	r2, #1
 8021564:	2300      	movs	r3, #0
 8021566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802156a:	f7ff fe9b 	bl	80212a4 <__multadd>
 802156e:	4607      	mov	r7, r0
 8021570:	10ad      	asrs	r5, r5, #2
 8021572:	d03d      	beq.n	80215f0 <__pow5mult+0xa0>
 8021574:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021576:	b97c      	cbnz	r4, 8021598 <__pow5mult+0x48>
 8021578:	2010      	movs	r0, #16
 802157a:	f7fd ff7f 	bl	801f47c <malloc>
 802157e:	4602      	mov	r2, r0
 8021580:	6270      	str	r0, [r6, #36]	; 0x24
 8021582:	b928      	cbnz	r0, 8021590 <__pow5mult+0x40>
 8021584:	4b1d      	ldr	r3, [pc, #116]	; (80215fc <__pow5mult+0xac>)
 8021586:	481e      	ldr	r0, [pc, #120]	; (8021600 <__pow5mult+0xb0>)
 8021588:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802158c:	f000 fd0e 	bl	8021fac <__assert_func>
 8021590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021594:	6004      	str	r4, [r0, #0]
 8021596:	60c4      	str	r4, [r0, #12]
 8021598:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802159c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80215a0:	b94c      	cbnz	r4, 80215b6 <__pow5mult+0x66>
 80215a2:	f240 2171 	movw	r1, #625	; 0x271
 80215a6:	4630      	mov	r0, r6
 80215a8:	f7ff ff12 	bl	80213d0 <__i2b>
 80215ac:	2300      	movs	r3, #0
 80215ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80215b2:	4604      	mov	r4, r0
 80215b4:	6003      	str	r3, [r0, #0]
 80215b6:	f04f 0900 	mov.w	r9, #0
 80215ba:	07eb      	lsls	r3, r5, #31
 80215bc:	d50a      	bpl.n	80215d4 <__pow5mult+0x84>
 80215be:	4639      	mov	r1, r7
 80215c0:	4622      	mov	r2, r4
 80215c2:	4630      	mov	r0, r6
 80215c4:	f7ff ff1a 	bl	80213fc <__multiply>
 80215c8:	4639      	mov	r1, r7
 80215ca:	4680      	mov	r8, r0
 80215cc:	4630      	mov	r0, r6
 80215ce:	f7ff fe47 	bl	8021260 <_Bfree>
 80215d2:	4647      	mov	r7, r8
 80215d4:	106d      	asrs	r5, r5, #1
 80215d6:	d00b      	beq.n	80215f0 <__pow5mult+0xa0>
 80215d8:	6820      	ldr	r0, [r4, #0]
 80215da:	b938      	cbnz	r0, 80215ec <__pow5mult+0x9c>
 80215dc:	4622      	mov	r2, r4
 80215de:	4621      	mov	r1, r4
 80215e0:	4630      	mov	r0, r6
 80215e2:	f7ff ff0b 	bl	80213fc <__multiply>
 80215e6:	6020      	str	r0, [r4, #0]
 80215e8:	f8c0 9000 	str.w	r9, [r0]
 80215ec:	4604      	mov	r4, r0
 80215ee:	e7e4      	b.n	80215ba <__pow5mult+0x6a>
 80215f0:	4638      	mov	r0, r7
 80215f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215f6:	bf00      	nop
 80215f8:	08023270 	.word	0x08023270
 80215fc:	08023095 	.word	0x08023095
 8021600:	08023122 	.word	0x08023122

08021604 <__lshift>:
 8021604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021608:	460c      	mov	r4, r1
 802160a:	6849      	ldr	r1, [r1, #4]
 802160c:	6923      	ldr	r3, [r4, #16]
 802160e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021612:	68a3      	ldr	r3, [r4, #8]
 8021614:	4607      	mov	r7, r0
 8021616:	4691      	mov	r9, r2
 8021618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802161c:	f108 0601 	add.w	r6, r8, #1
 8021620:	42b3      	cmp	r3, r6
 8021622:	db0b      	blt.n	802163c <__lshift+0x38>
 8021624:	4638      	mov	r0, r7
 8021626:	f7ff fddb 	bl	80211e0 <_Balloc>
 802162a:	4605      	mov	r5, r0
 802162c:	b948      	cbnz	r0, 8021642 <__lshift+0x3e>
 802162e:	4602      	mov	r2, r0
 8021630:	4b2a      	ldr	r3, [pc, #168]	; (80216dc <__lshift+0xd8>)
 8021632:	482b      	ldr	r0, [pc, #172]	; (80216e0 <__lshift+0xdc>)
 8021634:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021638:	f000 fcb8 	bl	8021fac <__assert_func>
 802163c:	3101      	adds	r1, #1
 802163e:	005b      	lsls	r3, r3, #1
 8021640:	e7ee      	b.n	8021620 <__lshift+0x1c>
 8021642:	2300      	movs	r3, #0
 8021644:	f100 0114 	add.w	r1, r0, #20
 8021648:	f100 0210 	add.w	r2, r0, #16
 802164c:	4618      	mov	r0, r3
 802164e:	4553      	cmp	r3, sl
 8021650:	db37      	blt.n	80216c2 <__lshift+0xbe>
 8021652:	6920      	ldr	r0, [r4, #16]
 8021654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021658:	f104 0314 	add.w	r3, r4, #20
 802165c:	f019 091f 	ands.w	r9, r9, #31
 8021660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021664:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021668:	d02f      	beq.n	80216ca <__lshift+0xc6>
 802166a:	f1c9 0e20 	rsb	lr, r9, #32
 802166e:	468a      	mov	sl, r1
 8021670:	f04f 0c00 	mov.w	ip, #0
 8021674:	681a      	ldr	r2, [r3, #0]
 8021676:	fa02 f209 	lsl.w	r2, r2, r9
 802167a:	ea42 020c 	orr.w	r2, r2, ip
 802167e:	f84a 2b04 	str.w	r2, [sl], #4
 8021682:	f853 2b04 	ldr.w	r2, [r3], #4
 8021686:	4298      	cmp	r0, r3
 8021688:	fa22 fc0e 	lsr.w	ip, r2, lr
 802168c:	d8f2      	bhi.n	8021674 <__lshift+0x70>
 802168e:	1b03      	subs	r3, r0, r4
 8021690:	3b15      	subs	r3, #21
 8021692:	f023 0303 	bic.w	r3, r3, #3
 8021696:	3304      	adds	r3, #4
 8021698:	f104 0215 	add.w	r2, r4, #21
 802169c:	4290      	cmp	r0, r2
 802169e:	bf38      	it	cc
 80216a0:	2304      	movcc	r3, #4
 80216a2:	f841 c003 	str.w	ip, [r1, r3]
 80216a6:	f1bc 0f00 	cmp.w	ip, #0
 80216aa:	d001      	beq.n	80216b0 <__lshift+0xac>
 80216ac:	f108 0602 	add.w	r6, r8, #2
 80216b0:	3e01      	subs	r6, #1
 80216b2:	4638      	mov	r0, r7
 80216b4:	612e      	str	r6, [r5, #16]
 80216b6:	4621      	mov	r1, r4
 80216b8:	f7ff fdd2 	bl	8021260 <_Bfree>
 80216bc:	4628      	mov	r0, r5
 80216be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80216c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80216c6:	3301      	adds	r3, #1
 80216c8:	e7c1      	b.n	802164e <__lshift+0x4a>
 80216ca:	3904      	subs	r1, #4
 80216cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80216d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80216d4:	4298      	cmp	r0, r3
 80216d6:	d8f9      	bhi.n	80216cc <__lshift+0xc8>
 80216d8:	e7ea      	b.n	80216b0 <__lshift+0xac>
 80216da:	bf00      	nop
 80216dc:	08023107 	.word	0x08023107
 80216e0:	08023122 	.word	0x08023122

080216e4 <__mcmp>:
 80216e4:	b530      	push	{r4, r5, lr}
 80216e6:	6902      	ldr	r2, [r0, #16]
 80216e8:	690c      	ldr	r4, [r1, #16]
 80216ea:	1b12      	subs	r2, r2, r4
 80216ec:	d10e      	bne.n	802170c <__mcmp+0x28>
 80216ee:	f100 0314 	add.w	r3, r0, #20
 80216f2:	3114      	adds	r1, #20
 80216f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80216f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80216fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021700:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021704:	42a5      	cmp	r5, r4
 8021706:	d003      	beq.n	8021710 <__mcmp+0x2c>
 8021708:	d305      	bcc.n	8021716 <__mcmp+0x32>
 802170a:	2201      	movs	r2, #1
 802170c:	4610      	mov	r0, r2
 802170e:	bd30      	pop	{r4, r5, pc}
 8021710:	4283      	cmp	r3, r0
 8021712:	d3f3      	bcc.n	80216fc <__mcmp+0x18>
 8021714:	e7fa      	b.n	802170c <__mcmp+0x28>
 8021716:	f04f 32ff 	mov.w	r2, #4294967295
 802171a:	e7f7      	b.n	802170c <__mcmp+0x28>

0802171c <__mdiff>:
 802171c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021720:	460c      	mov	r4, r1
 8021722:	4606      	mov	r6, r0
 8021724:	4611      	mov	r1, r2
 8021726:	4620      	mov	r0, r4
 8021728:	4690      	mov	r8, r2
 802172a:	f7ff ffdb 	bl	80216e4 <__mcmp>
 802172e:	1e05      	subs	r5, r0, #0
 8021730:	d110      	bne.n	8021754 <__mdiff+0x38>
 8021732:	4629      	mov	r1, r5
 8021734:	4630      	mov	r0, r6
 8021736:	f7ff fd53 	bl	80211e0 <_Balloc>
 802173a:	b930      	cbnz	r0, 802174a <__mdiff+0x2e>
 802173c:	4b3a      	ldr	r3, [pc, #232]	; (8021828 <__mdiff+0x10c>)
 802173e:	4602      	mov	r2, r0
 8021740:	f240 2132 	movw	r1, #562	; 0x232
 8021744:	4839      	ldr	r0, [pc, #228]	; (802182c <__mdiff+0x110>)
 8021746:	f000 fc31 	bl	8021fac <__assert_func>
 802174a:	2301      	movs	r3, #1
 802174c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021754:	bfa4      	itt	ge
 8021756:	4643      	movge	r3, r8
 8021758:	46a0      	movge	r8, r4
 802175a:	4630      	mov	r0, r6
 802175c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021760:	bfa6      	itte	ge
 8021762:	461c      	movge	r4, r3
 8021764:	2500      	movge	r5, #0
 8021766:	2501      	movlt	r5, #1
 8021768:	f7ff fd3a 	bl	80211e0 <_Balloc>
 802176c:	b920      	cbnz	r0, 8021778 <__mdiff+0x5c>
 802176e:	4b2e      	ldr	r3, [pc, #184]	; (8021828 <__mdiff+0x10c>)
 8021770:	4602      	mov	r2, r0
 8021772:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021776:	e7e5      	b.n	8021744 <__mdiff+0x28>
 8021778:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802177c:	6926      	ldr	r6, [r4, #16]
 802177e:	60c5      	str	r5, [r0, #12]
 8021780:	f104 0914 	add.w	r9, r4, #20
 8021784:	f108 0514 	add.w	r5, r8, #20
 8021788:	f100 0e14 	add.w	lr, r0, #20
 802178c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021790:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021794:	f108 0210 	add.w	r2, r8, #16
 8021798:	46f2      	mov	sl, lr
 802179a:	2100      	movs	r1, #0
 802179c:	f859 3b04 	ldr.w	r3, [r9], #4
 80217a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80217a4:	fa1f f883 	uxth.w	r8, r3
 80217a8:	fa11 f18b 	uxtah	r1, r1, fp
 80217ac:	0c1b      	lsrs	r3, r3, #16
 80217ae:	eba1 0808 	sub.w	r8, r1, r8
 80217b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80217b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80217ba:	fa1f f888 	uxth.w	r8, r8
 80217be:	1419      	asrs	r1, r3, #16
 80217c0:	454e      	cmp	r6, r9
 80217c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80217c6:	f84a 3b04 	str.w	r3, [sl], #4
 80217ca:	d8e7      	bhi.n	802179c <__mdiff+0x80>
 80217cc:	1b33      	subs	r3, r6, r4
 80217ce:	3b15      	subs	r3, #21
 80217d0:	f023 0303 	bic.w	r3, r3, #3
 80217d4:	3304      	adds	r3, #4
 80217d6:	3415      	adds	r4, #21
 80217d8:	42a6      	cmp	r6, r4
 80217da:	bf38      	it	cc
 80217dc:	2304      	movcc	r3, #4
 80217de:	441d      	add	r5, r3
 80217e0:	4473      	add	r3, lr
 80217e2:	469e      	mov	lr, r3
 80217e4:	462e      	mov	r6, r5
 80217e6:	4566      	cmp	r6, ip
 80217e8:	d30e      	bcc.n	8021808 <__mdiff+0xec>
 80217ea:	f10c 0203 	add.w	r2, ip, #3
 80217ee:	1b52      	subs	r2, r2, r5
 80217f0:	f022 0203 	bic.w	r2, r2, #3
 80217f4:	3d03      	subs	r5, #3
 80217f6:	45ac      	cmp	ip, r5
 80217f8:	bf38      	it	cc
 80217fa:	2200      	movcc	r2, #0
 80217fc:	441a      	add	r2, r3
 80217fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021802:	b17b      	cbz	r3, 8021824 <__mdiff+0x108>
 8021804:	6107      	str	r7, [r0, #16]
 8021806:	e7a3      	b.n	8021750 <__mdiff+0x34>
 8021808:	f856 8b04 	ldr.w	r8, [r6], #4
 802180c:	fa11 f288 	uxtah	r2, r1, r8
 8021810:	1414      	asrs	r4, r2, #16
 8021812:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8021816:	b292      	uxth	r2, r2
 8021818:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802181c:	f84e 2b04 	str.w	r2, [lr], #4
 8021820:	1421      	asrs	r1, r4, #16
 8021822:	e7e0      	b.n	80217e6 <__mdiff+0xca>
 8021824:	3f01      	subs	r7, #1
 8021826:	e7ea      	b.n	80217fe <__mdiff+0xe2>
 8021828:	08023107 	.word	0x08023107
 802182c:	08023122 	.word	0x08023122

08021830 <__d2b>:
 8021830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021834:	4689      	mov	r9, r1
 8021836:	2101      	movs	r1, #1
 8021838:	ec57 6b10 	vmov	r6, r7, d0
 802183c:	4690      	mov	r8, r2
 802183e:	f7ff fccf 	bl	80211e0 <_Balloc>
 8021842:	4604      	mov	r4, r0
 8021844:	b930      	cbnz	r0, 8021854 <__d2b+0x24>
 8021846:	4602      	mov	r2, r0
 8021848:	4b25      	ldr	r3, [pc, #148]	; (80218e0 <__d2b+0xb0>)
 802184a:	4826      	ldr	r0, [pc, #152]	; (80218e4 <__d2b+0xb4>)
 802184c:	f240 310a 	movw	r1, #778	; 0x30a
 8021850:	f000 fbac 	bl	8021fac <__assert_func>
 8021854:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802185c:	bb35      	cbnz	r5, 80218ac <__d2b+0x7c>
 802185e:	2e00      	cmp	r6, #0
 8021860:	9301      	str	r3, [sp, #4]
 8021862:	d028      	beq.n	80218b6 <__d2b+0x86>
 8021864:	4668      	mov	r0, sp
 8021866:	9600      	str	r6, [sp, #0]
 8021868:	f7ff fd82 	bl	8021370 <__lo0bits>
 802186c:	9900      	ldr	r1, [sp, #0]
 802186e:	b300      	cbz	r0, 80218b2 <__d2b+0x82>
 8021870:	9a01      	ldr	r2, [sp, #4]
 8021872:	f1c0 0320 	rsb	r3, r0, #32
 8021876:	fa02 f303 	lsl.w	r3, r2, r3
 802187a:	430b      	orrs	r3, r1
 802187c:	40c2      	lsrs	r2, r0
 802187e:	6163      	str	r3, [r4, #20]
 8021880:	9201      	str	r2, [sp, #4]
 8021882:	9b01      	ldr	r3, [sp, #4]
 8021884:	61a3      	str	r3, [r4, #24]
 8021886:	2b00      	cmp	r3, #0
 8021888:	bf14      	ite	ne
 802188a:	2202      	movne	r2, #2
 802188c:	2201      	moveq	r2, #1
 802188e:	6122      	str	r2, [r4, #16]
 8021890:	b1d5      	cbz	r5, 80218c8 <__d2b+0x98>
 8021892:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021896:	4405      	add	r5, r0
 8021898:	f8c9 5000 	str.w	r5, [r9]
 802189c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80218a0:	f8c8 0000 	str.w	r0, [r8]
 80218a4:	4620      	mov	r0, r4
 80218a6:	b003      	add	sp, #12
 80218a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80218ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80218b0:	e7d5      	b.n	802185e <__d2b+0x2e>
 80218b2:	6161      	str	r1, [r4, #20]
 80218b4:	e7e5      	b.n	8021882 <__d2b+0x52>
 80218b6:	a801      	add	r0, sp, #4
 80218b8:	f7ff fd5a 	bl	8021370 <__lo0bits>
 80218bc:	9b01      	ldr	r3, [sp, #4]
 80218be:	6163      	str	r3, [r4, #20]
 80218c0:	2201      	movs	r2, #1
 80218c2:	6122      	str	r2, [r4, #16]
 80218c4:	3020      	adds	r0, #32
 80218c6:	e7e3      	b.n	8021890 <__d2b+0x60>
 80218c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80218cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80218d0:	f8c9 0000 	str.w	r0, [r9]
 80218d4:	6918      	ldr	r0, [r3, #16]
 80218d6:	f7ff fd2b 	bl	8021330 <__hi0bits>
 80218da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80218de:	e7df      	b.n	80218a0 <__d2b+0x70>
 80218e0:	08023107 	.word	0x08023107
 80218e4:	08023122 	.word	0x08023122

080218e8 <_calloc_r>:
 80218e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80218ea:	fba1 2402 	umull	r2, r4, r1, r2
 80218ee:	b94c      	cbnz	r4, 8021904 <_calloc_r+0x1c>
 80218f0:	4611      	mov	r1, r2
 80218f2:	9201      	str	r2, [sp, #4]
 80218f4:	f7fd fe6e 	bl	801f5d4 <_malloc_r>
 80218f8:	9a01      	ldr	r2, [sp, #4]
 80218fa:	4605      	mov	r5, r0
 80218fc:	b930      	cbnz	r0, 802190c <_calloc_r+0x24>
 80218fe:	4628      	mov	r0, r5
 8021900:	b003      	add	sp, #12
 8021902:	bd30      	pop	{r4, r5, pc}
 8021904:	220c      	movs	r2, #12
 8021906:	6002      	str	r2, [r0, #0]
 8021908:	2500      	movs	r5, #0
 802190a:	e7f8      	b.n	80218fe <_calloc_r+0x16>
 802190c:	4621      	mov	r1, r4
 802190e:	f7fd fded 	bl	801f4ec <memset>
 8021912:	e7f4      	b.n	80218fe <_calloc_r+0x16>

08021914 <_realloc_r>:
 8021914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021918:	4680      	mov	r8, r0
 802191a:	4614      	mov	r4, r2
 802191c:	460e      	mov	r6, r1
 802191e:	b921      	cbnz	r1, 802192a <_realloc_r+0x16>
 8021920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021924:	4611      	mov	r1, r2
 8021926:	f7fd be55 	b.w	801f5d4 <_malloc_r>
 802192a:	b92a      	cbnz	r2, 8021938 <_realloc_r+0x24>
 802192c:	f7fd fde6 	bl	801f4fc <_free_r>
 8021930:	4625      	mov	r5, r4
 8021932:	4628      	mov	r0, r5
 8021934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021938:	f000 fb68 	bl	802200c <_malloc_usable_size_r>
 802193c:	4284      	cmp	r4, r0
 802193e:	4607      	mov	r7, r0
 8021940:	d802      	bhi.n	8021948 <_realloc_r+0x34>
 8021942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021946:	d812      	bhi.n	802196e <_realloc_r+0x5a>
 8021948:	4621      	mov	r1, r4
 802194a:	4640      	mov	r0, r8
 802194c:	f7fd fe42 	bl	801f5d4 <_malloc_r>
 8021950:	4605      	mov	r5, r0
 8021952:	2800      	cmp	r0, #0
 8021954:	d0ed      	beq.n	8021932 <_realloc_r+0x1e>
 8021956:	42bc      	cmp	r4, r7
 8021958:	4622      	mov	r2, r4
 802195a:	4631      	mov	r1, r6
 802195c:	bf28      	it	cs
 802195e:	463a      	movcs	r2, r7
 8021960:	f7fd fd9c 	bl	801f49c <memcpy>
 8021964:	4631      	mov	r1, r6
 8021966:	4640      	mov	r0, r8
 8021968:	f7fd fdc8 	bl	801f4fc <_free_r>
 802196c:	e7e1      	b.n	8021932 <_realloc_r+0x1e>
 802196e:	4635      	mov	r5, r6
 8021970:	e7df      	b.n	8021932 <_realloc_r+0x1e>

08021972 <__ssputs_r>:
 8021972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021976:	688e      	ldr	r6, [r1, #8]
 8021978:	429e      	cmp	r6, r3
 802197a:	4682      	mov	sl, r0
 802197c:	460c      	mov	r4, r1
 802197e:	4690      	mov	r8, r2
 8021980:	461f      	mov	r7, r3
 8021982:	d838      	bhi.n	80219f6 <__ssputs_r+0x84>
 8021984:	898a      	ldrh	r2, [r1, #12]
 8021986:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802198a:	d032      	beq.n	80219f2 <__ssputs_r+0x80>
 802198c:	6825      	ldr	r5, [r4, #0]
 802198e:	6909      	ldr	r1, [r1, #16]
 8021990:	eba5 0901 	sub.w	r9, r5, r1
 8021994:	6965      	ldr	r5, [r4, #20]
 8021996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802199a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802199e:	3301      	adds	r3, #1
 80219a0:	444b      	add	r3, r9
 80219a2:	106d      	asrs	r5, r5, #1
 80219a4:	429d      	cmp	r5, r3
 80219a6:	bf38      	it	cc
 80219a8:	461d      	movcc	r5, r3
 80219aa:	0553      	lsls	r3, r2, #21
 80219ac:	d531      	bpl.n	8021a12 <__ssputs_r+0xa0>
 80219ae:	4629      	mov	r1, r5
 80219b0:	f7fd fe10 	bl	801f5d4 <_malloc_r>
 80219b4:	4606      	mov	r6, r0
 80219b6:	b950      	cbnz	r0, 80219ce <__ssputs_r+0x5c>
 80219b8:	230c      	movs	r3, #12
 80219ba:	f8ca 3000 	str.w	r3, [sl]
 80219be:	89a3      	ldrh	r3, [r4, #12]
 80219c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80219c4:	81a3      	strh	r3, [r4, #12]
 80219c6:	f04f 30ff 	mov.w	r0, #4294967295
 80219ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219ce:	6921      	ldr	r1, [r4, #16]
 80219d0:	464a      	mov	r2, r9
 80219d2:	f7fd fd63 	bl	801f49c <memcpy>
 80219d6:	89a3      	ldrh	r3, [r4, #12]
 80219d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80219dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80219e0:	81a3      	strh	r3, [r4, #12]
 80219e2:	6126      	str	r6, [r4, #16]
 80219e4:	6165      	str	r5, [r4, #20]
 80219e6:	444e      	add	r6, r9
 80219e8:	eba5 0509 	sub.w	r5, r5, r9
 80219ec:	6026      	str	r6, [r4, #0]
 80219ee:	60a5      	str	r5, [r4, #8]
 80219f0:	463e      	mov	r6, r7
 80219f2:	42be      	cmp	r6, r7
 80219f4:	d900      	bls.n	80219f8 <__ssputs_r+0x86>
 80219f6:	463e      	mov	r6, r7
 80219f8:	6820      	ldr	r0, [r4, #0]
 80219fa:	4632      	mov	r2, r6
 80219fc:	4641      	mov	r1, r8
 80219fe:	f7fd fd5b 	bl	801f4b8 <memmove>
 8021a02:	68a3      	ldr	r3, [r4, #8]
 8021a04:	1b9b      	subs	r3, r3, r6
 8021a06:	60a3      	str	r3, [r4, #8]
 8021a08:	6823      	ldr	r3, [r4, #0]
 8021a0a:	4433      	add	r3, r6
 8021a0c:	6023      	str	r3, [r4, #0]
 8021a0e:	2000      	movs	r0, #0
 8021a10:	e7db      	b.n	80219ca <__ssputs_r+0x58>
 8021a12:	462a      	mov	r2, r5
 8021a14:	f7ff ff7e 	bl	8021914 <_realloc_r>
 8021a18:	4606      	mov	r6, r0
 8021a1a:	2800      	cmp	r0, #0
 8021a1c:	d1e1      	bne.n	80219e2 <__ssputs_r+0x70>
 8021a1e:	6921      	ldr	r1, [r4, #16]
 8021a20:	4650      	mov	r0, sl
 8021a22:	f7fd fd6b 	bl	801f4fc <_free_r>
 8021a26:	e7c7      	b.n	80219b8 <__ssputs_r+0x46>

08021a28 <_svfiprintf_r>:
 8021a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a2c:	4698      	mov	r8, r3
 8021a2e:	898b      	ldrh	r3, [r1, #12]
 8021a30:	061b      	lsls	r3, r3, #24
 8021a32:	b09d      	sub	sp, #116	; 0x74
 8021a34:	4607      	mov	r7, r0
 8021a36:	460d      	mov	r5, r1
 8021a38:	4614      	mov	r4, r2
 8021a3a:	d50e      	bpl.n	8021a5a <_svfiprintf_r+0x32>
 8021a3c:	690b      	ldr	r3, [r1, #16]
 8021a3e:	b963      	cbnz	r3, 8021a5a <_svfiprintf_r+0x32>
 8021a40:	2140      	movs	r1, #64	; 0x40
 8021a42:	f7fd fdc7 	bl	801f5d4 <_malloc_r>
 8021a46:	6028      	str	r0, [r5, #0]
 8021a48:	6128      	str	r0, [r5, #16]
 8021a4a:	b920      	cbnz	r0, 8021a56 <_svfiprintf_r+0x2e>
 8021a4c:	230c      	movs	r3, #12
 8021a4e:	603b      	str	r3, [r7, #0]
 8021a50:	f04f 30ff 	mov.w	r0, #4294967295
 8021a54:	e0d1      	b.n	8021bfa <_svfiprintf_r+0x1d2>
 8021a56:	2340      	movs	r3, #64	; 0x40
 8021a58:	616b      	str	r3, [r5, #20]
 8021a5a:	2300      	movs	r3, #0
 8021a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8021a5e:	2320      	movs	r3, #32
 8021a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8021a68:	2330      	movs	r3, #48	; 0x30
 8021a6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021c14 <_svfiprintf_r+0x1ec>
 8021a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021a72:	f04f 0901 	mov.w	r9, #1
 8021a76:	4623      	mov	r3, r4
 8021a78:	469a      	mov	sl, r3
 8021a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021a7e:	b10a      	cbz	r2, 8021a84 <_svfiprintf_r+0x5c>
 8021a80:	2a25      	cmp	r2, #37	; 0x25
 8021a82:	d1f9      	bne.n	8021a78 <_svfiprintf_r+0x50>
 8021a84:	ebba 0b04 	subs.w	fp, sl, r4
 8021a88:	d00b      	beq.n	8021aa2 <_svfiprintf_r+0x7a>
 8021a8a:	465b      	mov	r3, fp
 8021a8c:	4622      	mov	r2, r4
 8021a8e:	4629      	mov	r1, r5
 8021a90:	4638      	mov	r0, r7
 8021a92:	f7ff ff6e 	bl	8021972 <__ssputs_r>
 8021a96:	3001      	adds	r0, #1
 8021a98:	f000 80aa 	beq.w	8021bf0 <_svfiprintf_r+0x1c8>
 8021a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a9e:	445a      	add	r2, fp
 8021aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8021aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	f000 80a2 	beq.w	8021bf0 <_svfiprintf_r+0x1c8>
 8021aac:	2300      	movs	r3, #0
 8021aae:	f04f 32ff 	mov.w	r2, #4294967295
 8021ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ab6:	f10a 0a01 	add.w	sl, sl, #1
 8021aba:	9304      	str	r3, [sp, #16]
 8021abc:	9307      	str	r3, [sp, #28]
 8021abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8021ac4:	4654      	mov	r4, sl
 8021ac6:	2205      	movs	r2, #5
 8021ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021acc:	4851      	ldr	r0, [pc, #324]	; (8021c14 <_svfiprintf_r+0x1ec>)
 8021ace:	f7de fb5f 	bl	8000190 <memchr>
 8021ad2:	9a04      	ldr	r2, [sp, #16]
 8021ad4:	b9d8      	cbnz	r0, 8021b0e <_svfiprintf_r+0xe6>
 8021ad6:	06d0      	lsls	r0, r2, #27
 8021ad8:	bf44      	itt	mi
 8021ada:	2320      	movmi	r3, #32
 8021adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ae0:	0711      	lsls	r1, r2, #28
 8021ae2:	bf44      	itt	mi
 8021ae4:	232b      	movmi	r3, #43	; 0x2b
 8021ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021aea:	f89a 3000 	ldrb.w	r3, [sl]
 8021aee:	2b2a      	cmp	r3, #42	; 0x2a
 8021af0:	d015      	beq.n	8021b1e <_svfiprintf_r+0xf6>
 8021af2:	9a07      	ldr	r2, [sp, #28]
 8021af4:	4654      	mov	r4, sl
 8021af6:	2000      	movs	r0, #0
 8021af8:	f04f 0c0a 	mov.w	ip, #10
 8021afc:	4621      	mov	r1, r4
 8021afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b02:	3b30      	subs	r3, #48	; 0x30
 8021b04:	2b09      	cmp	r3, #9
 8021b06:	d94e      	bls.n	8021ba6 <_svfiprintf_r+0x17e>
 8021b08:	b1b0      	cbz	r0, 8021b38 <_svfiprintf_r+0x110>
 8021b0a:	9207      	str	r2, [sp, #28]
 8021b0c:	e014      	b.n	8021b38 <_svfiprintf_r+0x110>
 8021b0e:	eba0 0308 	sub.w	r3, r0, r8
 8021b12:	fa09 f303 	lsl.w	r3, r9, r3
 8021b16:	4313      	orrs	r3, r2
 8021b18:	9304      	str	r3, [sp, #16]
 8021b1a:	46a2      	mov	sl, r4
 8021b1c:	e7d2      	b.n	8021ac4 <_svfiprintf_r+0x9c>
 8021b1e:	9b03      	ldr	r3, [sp, #12]
 8021b20:	1d19      	adds	r1, r3, #4
 8021b22:	681b      	ldr	r3, [r3, #0]
 8021b24:	9103      	str	r1, [sp, #12]
 8021b26:	2b00      	cmp	r3, #0
 8021b28:	bfbb      	ittet	lt
 8021b2a:	425b      	neglt	r3, r3
 8021b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8021b30:	9307      	strge	r3, [sp, #28]
 8021b32:	9307      	strlt	r3, [sp, #28]
 8021b34:	bfb8      	it	lt
 8021b36:	9204      	strlt	r2, [sp, #16]
 8021b38:	7823      	ldrb	r3, [r4, #0]
 8021b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8021b3c:	d10c      	bne.n	8021b58 <_svfiprintf_r+0x130>
 8021b3e:	7863      	ldrb	r3, [r4, #1]
 8021b40:	2b2a      	cmp	r3, #42	; 0x2a
 8021b42:	d135      	bne.n	8021bb0 <_svfiprintf_r+0x188>
 8021b44:	9b03      	ldr	r3, [sp, #12]
 8021b46:	1d1a      	adds	r2, r3, #4
 8021b48:	681b      	ldr	r3, [r3, #0]
 8021b4a:	9203      	str	r2, [sp, #12]
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	bfb8      	it	lt
 8021b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8021b54:	3402      	adds	r4, #2
 8021b56:	9305      	str	r3, [sp, #20]
 8021b58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021c24 <_svfiprintf_r+0x1fc>
 8021b5c:	7821      	ldrb	r1, [r4, #0]
 8021b5e:	2203      	movs	r2, #3
 8021b60:	4650      	mov	r0, sl
 8021b62:	f7de fb15 	bl	8000190 <memchr>
 8021b66:	b140      	cbz	r0, 8021b7a <_svfiprintf_r+0x152>
 8021b68:	2340      	movs	r3, #64	; 0x40
 8021b6a:	eba0 000a 	sub.w	r0, r0, sl
 8021b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8021b72:	9b04      	ldr	r3, [sp, #16]
 8021b74:	4303      	orrs	r3, r0
 8021b76:	3401      	adds	r4, #1
 8021b78:	9304      	str	r3, [sp, #16]
 8021b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b7e:	4826      	ldr	r0, [pc, #152]	; (8021c18 <_svfiprintf_r+0x1f0>)
 8021b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021b84:	2206      	movs	r2, #6
 8021b86:	f7de fb03 	bl	8000190 <memchr>
 8021b8a:	2800      	cmp	r0, #0
 8021b8c:	d038      	beq.n	8021c00 <_svfiprintf_r+0x1d8>
 8021b8e:	4b23      	ldr	r3, [pc, #140]	; (8021c1c <_svfiprintf_r+0x1f4>)
 8021b90:	bb1b      	cbnz	r3, 8021bda <_svfiprintf_r+0x1b2>
 8021b92:	9b03      	ldr	r3, [sp, #12]
 8021b94:	3307      	adds	r3, #7
 8021b96:	f023 0307 	bic.w	r3, r3, #7
 8021b9a:	3308      	adds	r3, #8
 8021b9c:	9303      	str	r3, [sp, #12]
 8021b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ba0:	4433      	add	r3, r6
 8021ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8021ba4:	e767      	b.n	8021a76 <_svfiprintf_r+0x4e>
 8021ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8021baa:	460c      	mov	r4, r1
 8021bac:	2001      	movs	r0, #1
 8021bae:	e7a5      	b.n	8021afc <_svfiprintf_r+0xd4>
 8021bb0:	2300      	movs	r3, #0
 8021bb2:	3401      	adds	r4, #1
 8021bb4:	9305      	str	r3, [sp, #20]
 8021bb6:	4619      	mov	r1, r3
 8021bb8:	f04f 0c0a 	mov.w	ip, #10
 8021bbc:	4620      	mov	r0, r4
 8021bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021bc2:	3a30      	subs	r2, #48	; 0x30
 8021bc4:	2a09      	cmp	r2, #9
 8021bc6:	d903      	bls.n	8021bd0 <_svfiprintf_r+0x1a8>
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d0c5      	beq.n	8021b58 <_svfiprintf_r+0x130>
 8021bcc:	9105      	str	r1, [sp, #20]
 8021bce:	e7c3      	b.n	8021b58 <_svfiprintf_r+0x130>
 8021bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8021bd4:	4604      	mov	r4, r0
 8021bd6:	2301      	movs	r3, #1
 8021bd8:	e7f0      	b.n	8021bbc <_svfiprintf_r+0x194>
 8021bda:	ab03      	add	r3, sp, #12
 8021bdc:	9300      	str	r3, [sp, #0]
 8021bde:	462a      	mov	r2, r5
 8021be0:	4b0f      	ldr	r3, [pc, #60]	; (8021c20 <_svfiprintf_r+0x1f8>)
 8021be2:	a904      	add	r1, sp, #16
 8021be4:	4638      	mov	r0, r7
 8021be6:	f7fd fe09 	bl	801f7fc <_printf_float>
 8021bea:	1c42      	adds	r2, r0, #1
 8021bec:	4606      	mov	r6, r0
 8021bee:	d1d6      	bne.n	8021b9e <_svfiprintf_r+0x176>
 8021bf0:	89ab      	ldrh	r3, [r5, #12]
 8021bf2:	065b      	lsls	r3, r3, #25
 8021bf4:	f53f af2c 	bmi.w	8021a50 <_svfiprintf_r+0x28>
 8021bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021bfa:	b01d      	add	sp, #116	; 0x74
 8021bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c00:	ab03      	add	r3, sp, #12
 8021c02:	9300      	str	r3, [sp, #0]
 8021c04:	462a      	mov	r2, r5
 8021c06:	4b06      	ldr	r3, [pc, #24]	; (8021c20 <_svfiprintf_r+0x1f8>)
 8021c08:	a904      	add	r1, sp, #16
 8021c0a:	4638      	mov	r0, r7
 8021c0c:	f7fe f89a 	bl	801fd44 <_printf_i>
 8021c10:	e7eb      	b.n	8021bea <_svfiprintf_r+0x1c2>
 8021c12:	bf00      	nop
 8021c14:	0802327c 	.word	0x0802327c
 8021c18:	08023286 	.word	0x08023286
 8021c1c:	0801f7fd 	.word	0x0801f7fd
 8021c20:	08021973 	.word	0x08021973
 8021c24:	08023282 	.word	0x08023282

08021c28 <__sfputc_r>:
 8021c28:	6893      	ldr	r3, [r2, #8]
 8021c2a:	3b01      	subs	r3, #1
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	b410      	push	{r4}
 8021c30:	6093      	str	r3, [r2, #8]
 8021c32:	da08      	bge.n	8021c46 <__sfputc_r+0x1e>
 8021c34:	6994      	ldr	r4, [r2, #24]
 8021c36:	42a3      	cmp	r3, r4
 8021c38:	db01      	blt.n	8021c3e <__sfputc_r+0x16>
 8021c3a:	290a      	cmp	r1, #10
 8021c3c:	d103      	bne.n	8021c46 <__sfputc_r+0x1e>
 8021c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c42:	f7fe bb19 	b.w	8020278 <__swbuf_r>
 8021c46:	6813      	ldr	r3, [r2, #0]
 8021c48:	1c58      	adds	r0, r3, #1
 8021c4a:	6010      	str	r0, [r2, #0]
 8021c4c:	7019      	strb	r1, [r3, #0]
 8021c4e:	4608      	mov	r0, r1
 8021c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c54:	4770      	bx	lr

08021c56 <__sfputs_r>:
 8021c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c58:	4606      	mov	r6, r0
 8021c5a:	460f      	mov	r7, r1
 8021c5c:	4614      	mov	r4, r2
 8021c5e:	18d5      	adds	r5, r2, r3
 8021c60:	42ac      	cmp	r4, r5
 8021c62:	d101      	bne.n	8021c68 <__sfputs_r+0x12>
 8021c64:	2000      	movs	r0, #0
 8021c66:	e007      	b.n	8021c78 <__sfputs_r+0x22>
 8021c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c6c:	463a      	mov	r2, r7
 8021c6e:	4630      	mov	r0, r6
 8021c70:	f7ff ffda 	bl	8021c28 <__sfputc_r>
 8021c74:	1c43      	adds	r3, r0, #1
 8021c76:	d1f3      	bne.n	8021c60 <__sfputs_r+0xa>
 8021c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021c7c <_vfiprintf_r>:
 8021c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c80:	460d      	mov	r5, r1
 8021c82:	b09d      	sub	sp, #116	; 0x74
 8021c84:	4614      	mov	r4, r2
 8021c86:	4698      	mov	r8, r3
 8021c88:	4606      	mov	r6, r0
 8021c8a:	b118      	cbz	r0, 8021c94 <_vfiprintf_r+0x18>
 8021c8c:	6983      	ldr	r3, [r0, #24]
 8021c8e:	b90b      	cbnz	r3, 8021c94 <_vfiprintf_r+0x18>
 8021c90:	f7fd faca 	bl	801f228 <__sinit>
 8021c94:	4b89      	ldr	r3, [pc, #548]	; (8021ebc <_vfiprintf_r+0x240>)
 8021c96:	429d      	cmp	r5, r3
 8021c98:	d11b      	bne.n	8021cd2 <_vfiprintf_r+0x56>
 8021c9a:	6875      	ldr	r5, [r6, #4]
 8021c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021c9e:	07d9      	lsls	r1, r3, #31
 8021ca0:	d405      	bmi.n	8021cae <_vfiprintf_r+0x32>
 8021ca2:	89ab      	ldrh	r3, [r5, #12]
 8021ca4:	059a      	lsls	r2, r3, #22
 8021ca6:	d402      	bmi.n	8021cae <_vfiprintf_r+0x32>
 8021ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021caa:	f7fd fb80 	bl	801f3ae <__retarget_lock_acquire_recursive>
 8021cae:	89ab      	ldrh	r3, [r5, #12]
 8021cb0:	071b      	lsls	r3, r3, #28
 8021cb2:	d501      	bpl.n	8021cb8 <_vfiprintf_r+0x3c>
 8021cb4:	692b      	ldr	r3, [r5, #16]
 8021cb6:	b9eb      	cbnz	r3, 8021cf4 <_vfiprintf_r+0x78>
 8021cb8:	4629      	mov	r1, r5
 8021cba:	4630      	mov	r0, r6
 8021cbc:	f7fe fb40 	bl	8020340 <__swsetup_r>
 8021cc0:	b1c0      	cbz	r0, 8021cf4 <_vfiprintf_r+0x78>
 8021cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021cc4:	07dc      	lsls	r4, r3, #31
 8021cc6:	d50e      	bpl.n	8021ce6 <_vfiprintf_r+0x6a>
 8021cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8021ccc:	b01d      	add	sp, #116	; 0x74
 8021cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cd2:	4b7b      	ldr	r3, [pc, #492]	; (8021ec0 <_vfiprintf_r+0x244>)
 8021cd4:	429d      	cmp	r5, r3
 8021cd6:	d101      	bne.n	8021cdc <_vfiprintf_r+0x60>
 8021cd8:	68b5      	ldr	r5, [r6, #8]
 8021cda:	e7df      	b.n	8021c9c <_vfiprintf_r+0x20>
 8021cdc:	4b79      	ldr	r3, [pc, #484]	; (8021ec4 <_vfiprintf_r+0x248>)
 8021cde:	429d      	cmp	r5, r3
 8021ce0:	bf08      	it	eq
 8021ce2:	68f5      	ldreq	r5, [r6, #12]
 8021ce4:	e7da      	b.n	8021c9c <_vfiprintf_r+0x20>
 8021ce6:	89ab      	ldrh	r3, [r5, #12]
 8021ce8:	0598      	lsls	r0, r3, #22
 8021cea:	d4ed      	bmi.n	8021cc8 <_vfiprintf_r+0x4c>
 8021cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021cee:	f7fd fb5f 	bl	801f3b0 <__retarget_lock_release_recursive>
 8021cf2:	e7e9      	b.n	8021cc8 <_vfiprintf_r+0x4c>
 8021cf4:	2300      	movs	r3, #0
 8021cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8021cf8:	2320      	movs	r3, #32
 8021cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8021d02:	2330      	movs	r3, #48	; 0x30
 8021d04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021ec8 <_vfiprintf_r+0x24c>
 8021d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021d0c:	f04f 0901 	mov.w	r9, #1
 8021d10:	4623      	mov	r3, r4
 8021d12:	469a      	mov	sl, r3
 8021d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021d18:	b10a      	cbz	r2, 8021d1e <_vfiprintf_r+0xa2>
 8021d1a:	2a25      	cmp	r2, #37	; 0x25
 8021d1c:	d1f9      	bne.n	8021d12 <_vfiprintf_r+0x96>
 8021d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8021d22:	d00b      	beq.n	8021d3c <_vfiprintf_r+0xc0>
 8021d24:	465b      	mov	r3, fp
 8021d26:	4622      	mov	r2, r4
 8021d28:	4629      	mov	r1, r5
 8021d2a:	4630      	mov	r0, r6
 8021d2c:	f7ff ff93 	bl	8021c56 <__sfputs_r>
 8021d30:	3001      	adds	r0, #1
 8021d32:	f000 80aa 	beq.w	8021e8a <_vfiprintf_r+0x20e>
 8021d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d38:	445a      	add	r2, fp
 8021d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8021d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	f000 80a2 	beq.w	8021e8a <_vfiprintf_r+0x20e>
 8021d46:	2300      	movs	r3, #0
 8021d48:	f04f 32ff 	mov.w	r2, #4294967295
 8021d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021d50:	f10a 0a01 	add.w	sl, sl, #1
 8021d54:	9304      	str	r3, [sp, #16]
 8021d56:	9307      	str	r3, [sp, #28]
 8021d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8021d5e:	4654      	mov	r4, sl
 8021d60:	2205      	movs	r2, #5
 8021d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d66:	4858      	ldr	r0, [pc, #352]	; (8021ec8 <_vfiprintf_r+0x24c>)
 8021d68:	f7de fa12 	bl	8000190 <memchr>
 8021d6c:	9a04      	ldr	r2, [sp, #16]
 8021d6e:	b9d8      	cbnz	r0, 8021da8 <_vfiprintf_r+0x12c>
 8021d70:	06d1      	lsls	r1, r2, #27
 8021d72:	bf44      	itt	mi
 8021d74:	2320      	movmi	r3, #32
 8021d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d7a:	0713      	lsls	r3, r2, #28
 8021d7c:	bf44      	itt	mi
 8021d7e:	232b      	movmi	r3, #43	; 0x2b
 8021d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021d84:	f89a 3000 	ldrb.w	r3, [sl]
 8021d88:	2b2a      	cmp	r3, #42	; 0x2a
 8021d8a:	d015      	beq.n	8021db8 <_vfiprintf_r+0x13c>
 8021d8c:	9a07      	ldr	r2, [sp, #28]
 8021d8e:	4654      	mov	r4, sl
 8021d90:	2000      	movs	r0, #0
 8021d92:	f04f 0c0a 	mov.w	ip, #10
 8021d96:	4621      	mov	r1, r4
 8021d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021d9c:	3b30      	subs	r3, #48	; 0x30
 8021d9e:	2b09      	cmp	r3, #9
 8021da0:	d94e      	bls.n	8021e40 <_vfiprintf_r+0x1c4>
 8021da2:	b1b0      	cbz	r0, 8021dd2 <_vfiprintf_r+0x156>
 8021da4:	9207      	str	r2, [sp, #28]
 8021da6:	e014      	b.n	8021dd2 <_vfiprintf_r+0x156>
 8021da8:	eba0 0308 	sub.w	r3, r0, r8
 8021dac:	fa09 f303 	lsl.w	r3, r9, r3
 8021db0:	4313      	orrs	r3, r2
 8021db2:	9304      	str	r3, [sp, #16]
 8021db4:	46a2      	mov	sl, r4
 8021db6:	e7d2      	b.n	8021d5e <_vfiprintf_r+0xe2>
 8021db8:	9b03      	ldr	r3, [sp, #12]
 8021dba:	1d19      	adds	r1, r3, #4
 8021dbc:	681b      	ldr	r3, [r3, #0]
 8021dbe:	9103      	str	r1, [sp, #12]
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	bfbb      	ittet	lt
 8021dc4:	425b      	neglt	r3, r3
 8021dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8021dca:	9307      	strge	r3, [sp, #28]
 8021dcc:	9307      	strlt	r3, [sp, #28]
 8021dce:	bfb8      	it	lt
 8021dd0:	9204      	strlt	r2, [sp, #16]
 8021dd2:	7823      	ldrb	r3, [r4, #0]
 8021dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8021dd6:	d10c      	bne.n	8021df2 <_vfiprintf_r+0x176>
 8021dd8:	7863      	ldrb	r3, [r4, #1]
 8021dda:	2b2a      	cmp	r3, #42	; 0x2a
 8021ddc:	d135      	bne.n	8021e4a <_vfiprintf_r+0x1ce>
 8021dde:	9b03      	ldr	r3, [sp, #12]
 8021de0:	1d1a      	adds	r2, r3, #4
 8021de2:	681b      	ldr	r3, [r3, #0]
 8021de4:	9203      	str	r2, [sp, #12]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	bfb8      	it	lt
 8021dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8021dee:	3402      	adds	r4, #2
 8021df0:	9305      	str	r3, [sp, #20]
 8021df2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021ed8 <_vfiprintf_r+0x25c>
 8021df6:	7821      	ldrb	r1, [r4, #0]
 8021df8:	2203      	movs	r2, #3
 8021dfa:	4650      	mov	r0, sl
 8021dfc:	f7de f9c8 	bl	8000190 <memchr>
 8021e00:	b140      	cbz	r0, 8021e14 <_vfiprintf_r+0x198>
 8021e02:	2340      	movs	r3, #64	; 0x40
 8021e04:	eba0 000a 	sub.w	r0, r0, sl
 8021e08:	fa03 f000 	lsl.w	r0, r3, r0
 8021e0c:	9b04      	ldr	r3, [sp, #16]
 8021e0e:	4303      	orrs	r3, r0
 8021e10:	3401      	adds	r4, #1
 8021e12:	9304      	str	r3, [sp, #16]
 8021e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e18:	482c      	ldr	r0, [pc, #176]	; (8021ecc <_vfiprintf_r+0x250>)
 8021e1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021e1e:	2206      	movs	r2, #6
 8021e20:	f7de f9b6 	bl	8000190 <memchr>
 8021e24:	2800      	cmp	r0, #0
 8021e26:	d03f      	beq.n	8021ea8 <_vfiprintf_r+0x22c>
 8021e28:	4b29      	ldr	r3, [pc, #164]	; (8021ed0 <_vfiprintf_r+0x254>)
 8021e2a:	bb1b      	cbnz	r3, 8021e74 <_vfiprintf_r+0x1f8>
 8021e2c:	9b03      	ldr	r3, [sp, #12]
 8021e2e:	3307      	adds	r3, #7
 8021e30:	f023 0307 	bic.w	r3, r3, #7
 8021e34:	3308      	adds	r3, #8
 8021e36:	9303      	str	r3, [sp, #12]
 8021e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e3a:	443b      	add	r3, r7
 8021e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8021e3e:	e767      	b.n	8021d10 <_vfiprintf_r+0x94>
 8021e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8021e44:	460c      	mov	r4, r1
 8021e46:	2001      	movs	r0, #1
 8021e48:	e7a5      	b.n	8021d96 <_vfiprintf_r+0x11a>
 8021e4a:	2300      	movs	r3, #0
 8021e4c:	3401      	adds	r4, #1
 8021e4e:	9305      	str	r3, [sp, #20]
 8021e50:	4619      	mov	r1, r3
 8021e52:	f04f 0c0a 	mov.w	ip, #10
 8021e56:	4620      	mov	r0, r4
 8021e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021e5c:	3a30      	subs	r2, #48	; 0x30
 8021e5e:	2a09      	cmp	r2, #9
 8021e60:	d903      	bls.n	8021e6a <_vfiprintf_r+0x1ee>
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d0c5      	beq.n	8021df2 <_vfiprintf_r+0x176>
 8021e66:	9105      	str	r1, [sp, #20]
 8021e68:	e7c3      	b.n	8021df2 <_vfiprintf_r+0x176>
 8021e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8021e6e:	4604      	mov	r4, r0
 8021e70:	2301      	movs	r3, #1
 8021e72:	e7f0      	b.n	8021e56 <_vfiprintf_r+0x1da>
 8021e74:	ab03      	add	r3, sp, #12
 8021e76:	9300      	str	r3, [sp, #0]
 8021e78:	462a      	mov	r2, r5
 8021e7a:	4b16      	ldr	r3, [pc, #88]	; (8021ed4 <_vfiprintf_r+0x258>)
 8021e7c:	a904      	add	r1, sp, #16
 8021e7e:	4630      	mov	r0, r6
 8021e80:	f7fd fcbc 	bl	801f7fc <_printf_float>
 8021e84:	4607      	mov	r7, r0
 8021e86:	1c78      	adds	r0, r7, #1
 8021e88:	d1d6      	bne.n	8021e38 <_vfiprintf_r+0x1bc>
 8021e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021e8c:	07d9      	lsls	r1, r3, #31
 8021e8e:	d405      	bmi.n	8021e9c <_vfiprintf_r+0x220>
 8021e90:	89ab      	ldrh	r3, [r5, #12]
 8021e92:	059a      	lsls	r2, r3, #22
 8021e94:	d402      	bmi.n	8021e9c <_vfiprintf_r+0x220>
 8021e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e98:	f7fd fa8a 	bl	801f3b0 <__retarget_lock_release_recursive>
 8021e9c:	89ab      	ldrh	r3, [r5, #12]
 8021e9e:	065b      	lsls	r3, r3, #25
 8021ea0:	f53f af12 	bmi.w	8021cc8 <_vfiprintf_r+0x4c>
 8021ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021ea6:	e711      	b.n	8021ccc <_vfiprintf_r+0x50>
 8021ea8:	ab03      	add	r3, sp, #12
 8021eaa:	9300      	str	r3, [sp, #0]
 8021eac:	462a      	mov	r2, r5
 8021eae:	4b09      	ldr	r3, [pc, #36]	; (8021ed4 <_vfiprintf_r+0x258>)
 8021eb0:	a904      	add	r1, sp, #16
 8021eb2:	4630      	mov	r0, r6
 8021eb4:	f7fd ff46 	bl	801fd44 <_printf_i>
 8021eb8:	e7e4      	b.n	8021e84 <_vfiprintf_r+0x208>
 8021eba:	bf00      	nop
 8021ebc:	08023010 	.word	0x08023010
 8021ec0:	08023030 	.word	0x08023030
 8021ec4:	08022ff0 	.word	0x08022ff0
 8021ec8:	0802327c 	.word	0x0802327c
 8021ecc:	08023286 	.word	0x08023286
 8021ed0:	0801f7fd 	.word	0x0801f7fd
 8021ed4:	08021c57 	.word	0x08021c57
 8021ed8:	08023282 	.word	0x08023282

08021edc <_putc_r>:
 8021edc:	b570      	push	{r4, r5, r6, lr}
 8021ede:	460d      	mov	r5, r1
 8021ee0:	4614      	mov	r4, r2
 8021ee2:	4606      	mov	r6, r0
 8021ee4:	b118      	cbz	r0, 8021eee <_putc_r+0x12>
 8021ee6:	6983      	ldr	r3, [r0, #24]
 8021ee8:	b90b      	cbnz	r3, 8021eee <_putc_r+0x12>
 8021eea:	f7fd f99d 	bl	801f228 <__sinit>
 8021eee:	4b1c      	ldr	r3, [pc, #112]	; (8021f60 <_putc_r+0x84>)
 8021ef0:	429c      	cmp	r4, r3
 8021ef2:	d124      	bne.n	8021f3e <_putc_r+0x62>
 8021ef4:	6874      	ldr	r4, [r6, #4]
 8021ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ef8:	07d8      	lsls	r0, r3, #31
 8021efa:	d405      	bmi.n	8021f08 <_putc_r+0x2c>
 8021efc:	89a3      	ldrh	r3, [r4, #12]
 8021efe:	0599      	lsls	r1, r3, #22
 8021f00:	d402      	bmi.n	8021f08 <_putc_r+0x2c>
 8021f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021f04:	f7fd fa53 	bl	801f3ae <__retarget_lock_acquire_recursive>
 8021f08:	68a3      	ldr	r3, [r4, #8]
 8021f0a:	3b01      	subs	r3, #1
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	60a3      	str	r3, [r4, #8]
 8021f10:	da05      	bge.n	8021f1e <_putc_r+0x42>
 8021f12:	69a2      	ldr	r2, [r4, #24]
 8021f14:	4293      	cmp	r3, r2
 8021f16:	db1c      	blt.n	8021f52 <_putc_r+0x76>
 8021f18:	b2eb      	uxtb	r3, r5
 8021f1a:	2b0a      	cmp	r3, #10
 8021f1c:	d019      	beq.n	8021f52 <_putc_r+0x76>
 8021f1e:	6823      	ldr	r3, [r4, #0]
 8021f20:	1c5a      	adds	r2, r3, #1
 8021f22:	6022      	str	r2, [r4, #0]
 8021f24:	701d      	strb	r5, [r3, #0]
 8021f26:	b2ed      	uxtb	r5, r5
 8021f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021f2a:	07da      	lsls	r2, r3, #31
 8021f2c:	d405      	bmi.n	8021f3a <_putc_r+0x5e>
 8021f2e:	89a3      	ldrh	r3, [r4, #12]
 8021f30:	059b      	lsls	r3, r3, #22
 8021f32:	d402      	bmi.n	8021f3a <_putc_r+0x5e>
 8021f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021f36:	f7fd fa3b 	bl	801f3b0 <__retarget_lock_release_recursive>
 8021f3a:	4628      	mov	r0, r5
 8021f3c:	bd70      	pop	{r4, r5, r6, pc}
 8021f3e:	4b09      	ldr	r3, [pc, #36]	; (8021f64 <_putc_r+0x88>)
 8021f40:	429c      	cmp	r4, r3
 8021f42:	d101      	bne.n	8021f48 <_putc_r+0x6c>
 8021f44:	68b4      	ldr	r4, [r6, #8]
 8021f46:	e7d6      	b.n	8021ef6 <_putc_r+0x1a>
 8021f48:	4b07      	ldr	r3, [pc, #28]	; (8021f68 <_putc_r+0x8c>)
 8021f4a:	429c      	cmp	r4, r3
 8021f4c:	bf08      	it	eq
 8021f4e:	68f4      	ldreq	r4, [r6, #12]
 8021f50:	e7d1      	b.n	8021ef6 <_putc_r+0x1a>
 8021f52:	4629      	mov	r1, r5
 8021f54:	4622      	mov	r2, r4
 8021f56:	4630      	mov	r0, r6
 8021f58:	f7fe f98e 	bl	8020278 <__swbuf_r>
 8021f5c:	4605      	mov	r5, r0
 8021f5e:	e7e3      	b.n	8021f28 <_putc_r+0x4c>
 8021f60:	08023010 	.word	0x08023010
 8021f64:	08023030 	.word	0x08023030
 8021f68:	08022ff0 	.word	0x08022ff0

08021f6c <_read_r>:
 8021f6c:	b538      	push	{r3, r4, r5, lr}
 8021f6e:	4d07      	ldr	r5, [pc, #28]	; (8021f8c <_read_r+0x20>)
 8021f70:	4604      	mov	r4, r0
 8021f72:	4608      	mov	r0, r1
 8021f74:	4611      	mov	r1, r2
 8021f76:	2200      	movs	r2, #0
 8021f78:	602a      	str	r2, [r5, #0]
 8021f7a:	461a      	mov	r2, r3
 8021f7c:	f7e1 fc46 	bl	800380c <_read>
 8021f80:	1c43      	adds	r3, r0, #1
 8021f82:	d102      	bne.n	8021f8a <_read_r+0x1e>
 8021f84:	682b      	ldr	r3, [r5, #0]
 8021f86:	b103      	cbz	r3, 8021f8a <_read_r+0x1e>
 8021f88:	6023      	str	r3, [r4, #0]
 8021f8a:	bd38      	pop	{r3, r4, r5, pc}
 8021f8c:	20009a24 	.word	0x20009a24

08021f90 <__ascii_wctomb>:
 8021f90:	b149      	cbz	r1, 8021fa6 <__ascii_wctomb+0x16>
 8021f92:	2aff      	cmp	r2, #255	; 0xff
 8021f94:	bf85      	ittet	hi
 8021f96:	238a      	movhi	r3, #138	; 0x8a
 8021f98:	6003      	strhi	r3, [r0, #0]
 8021f9a:	700a      	strbls	r2, [r1, #0]
 8021f9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021fa0:	bf98      	it	ls
 8021fa2:	2001      	movls	r0, #1
 8021fa4:	4770      	bx	lr
 8021fa6:	4608      	mov	r0, r1
 8021fa8:	4770      	bx	lr
	...

08021fac <__assert_func>:
 8021fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021fae:	4614      	mov	r4, r2
 8021fb0:	461a      	mov	r2, r3
 8021fb2:	4b09      	ldr	r3, [pc, #36]	; (8021fd8 <__assert_func+0x2c>)
 8021fb4:	681b      	ldr	r3, [r3, #0]
 8021fb6:	4605      	mov	r5, r0
 8021fb8:	68d8      	ldr	r0, [r3, #12]
 8021fba:	b14c      	cbz	r4, 8021fd0 <__assert_func+0x24>
 8021fbc:	4b07      	ldr	r3, [pc, #28]	; (8021fdc <__assert_func+0x30>)
 8021fbe:	9100      	str	r1, [sp, #0]
 8021fc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021fc4:	4906      	ldr	r1, [pc, #24]	; (8021fe0 <__assert_func+0x34>)
 8021fc6:	462b      	mov	r3, r5
 8021fc8:	f000 f80e 	bl	8021fe8 <fiprintf>
 8021fcc:	f000 f826 	bl	802201c <abort>
 8021fd0:	4b04      	ldr	r3, [pc, #16]	; (8021fe4 <__assert_func+0x38>)
 8021fd2:	461c      	mov	r4, r3
 8021fd4:	e7f3      	b.n	8021fbe <__assert_func+0x12>
 8021fd6:	bf00      	nop
 8021fd8:	20000098 	.word	0x20000098
 8021fdc:	0802328d 	.word	0x0802328d
 8021fe0:	0802329a 	.word	0x0802329a
 8021fe4:	080232c8 	.word	0x080232c8

08021fe8 <fiprintf>:
 8021fe8:	b40e      	push	{r1, r2, r3}
 8021fea:	b503      	push	{r0, r1, lr}
 8021fec:	4601      	mov	r1, r0
 8021fee:	ab03      	add	r3, sp, #12
 8021ff0:	4805      	ldr	r0, [pc, #20]	; (8022008 <fiprintf+0x20>)
 8021ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8021ff6:	6800      	ldr	r0, [r0, #0]
 8021ff8:	9301      	str	r3, [sp, #4]
 8021ffa:	f7ff fe3f 	bl	8021c7c <_vfiprintf_r>
 8021ffe:	b002      	add	sp, #8
 8022000:	f85d eb04 	ldr.w	lr, [sp], #4
 8022004:	b003      	add	sp, #12
 8022006:	4770      	bx	lr
 8022008:	20000098 	.word	0x20000098

0802200c <_malloc_usable_size_r>:
 802200c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022010:	1f18      	subs	r0, r3, #4
 8022012:	2b00      	cmp	r3, #0
 8022014:	bfbc      	itt	lt
 8022016:	580b      	ldrlt	r3, [r1, r0]
 8022018:	18c0      	addlt	r0, r0, r3
 802201a:	4770      	bx	lr

0802201c <abort>:
 802201c:	b508      	push	{r3, lr}
 802201e:	2006      	movs	r0, #6
 8022020:	f000 f82c 	bl	802207c <raise>
 8022024:	2001      	movs	r0, #1
 8022026:	f7e1 fbe7 	bl	80037f8 <_exit>

0802202a <_raise_r>:
 802202a:	291f      	cmp	r1, #31
 802202c:	b538      	push	{r3, r4, r5, lr}
 802202e:	4604      	mov	r4, r0
 8022030:	460d      	mov	r5, r1
 8022032:	d904      	bls.n	802203e <_raise_r+0x14>
 8022034:	2316      	movs	r3, #22
 8022036:	6003      	str	r3, [r0, #0]
 8022038:	f04f 30ff 	mov.w	r0, #4294967295
 802203c:	bd38      	pop	{r3, r4, r5, pc}
 802203e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022040:	b112      	cbz	r2, 8022048 <_raise_r+0x1e>
 8022042:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022046:	b94b      	cbnz	r3, 802205c <_raise_r+0x32>
 8022048:	4620      	mov	r0, r4
 802204a:	f000 f831 	bl	80220b0 <_getpid_r>
 802204e:	462a      	mov	r2, r5
 8022050:	4601      	mov	r1, r0
 8022052:	4620      	mov	r0, r4
 8022054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022058:	f000 b818 	b.w	802208c <_kill_r>
 802205c:	2b01      	cmp	r3, #1
 802205e:	d00a      	beq.n	8022076 <_raise_r+0x4c>
 8022060:	1c59      	adds	r1, r3, #1
 8022062:	d103      	bne.n	802206c <_raise_r+0x42>
 8022064:	2316      	movs	r3, #22
 8022066:	6003      	str	r3, [r0, #0]
 8022068:	2001      	movs	r0, #1
 802206a:	e7e7      	b.n	802203c <_raise_r+0x12>
 802206c:	2400      	movs	r4, #0
 802206e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022072:	4628      	mov	r0, r5
 8022074:	4798      	blx	r3
 8022076:	2000      	movs	r0, #0
 8022078:	e7e0      	b.n	802203c <_raise_r+0x12>
	...

0802207c <raise>:
 802207c:	4b02      	ldr	r3, [pc, #8]	; (8022088 <raise+0xc>)
 802207e:	4601      	mov	r1, r0
 8022080:	6818      	ldr	r0, [r3, #0]
 8022082:	f7ff bfd2 	b.w	802202a <_raise_r>
 8022086:	bf00      	nop
 8022088:	20000098 	.word	0x20000098

0802208c <_kill_r>:
 802208c:	b538      	push	{r3, r4, r5, lr}
 802208e:	4d07      	ldr	r5, [pc, #28]	; (80220ac <_kill_r+0x20>)
 8022090:	2300      	movs	r3, #0
 8022092:	4604      	mov	r4, r0
 8022094:	4608      	mov	r0, r1
 8022096:	4611      	mov	r1, r2
 8022098:	602b      	str	r3, [r5, #0]
 802209a:	f7e1 fb9d 	bl	80037d8 <_kill>
 802209e:	1c43      	adds	r3, r0, #1
 80220a0:	d102      	bne.n	80220a8 <_kill_r+0x1c>
 80220a2:	682b      	ldr	r3, [r5, #0]
 80220a4:	b103      	cbz	r3, 80220a8 <_kill_r+0x1c>
 80220a6:	6023      	str	r3, [r4, #0]
 80220a8:	bd38      	pop	{r3, r4, r5, pc}
 80220aa:	bf00      	nop
 80220ac:	20009a24 	.word	0x20009a24

080220b0 <_getpid_r>:
 80220b0:	f7e1 bb8a 	b.w	80037c8 <_getpid>

080220b4 <_init>:
 80220b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220b6:	bf00      	nop
 80220b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80220ba:	bc08      	pop	{r3}
 80220bc:	469e      	mov	lr, r3
 80220be:	4770      	bx	lr

080220c0 <_fini>:
 80220c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220c2:	bf00      	nop
 80220c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80220c6:	bc08      	pop	{r3}
 80220c8:	469e      	mov	lr, r3
 80220ca:	4770      	bx	lr
