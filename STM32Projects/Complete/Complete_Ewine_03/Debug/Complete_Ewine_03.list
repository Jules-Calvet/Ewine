
Complete_Ewine_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021afc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001194  08021c40  08021c40  00031c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022dd4  08022dd4  00032dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022ddc  08022ddc  00032ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022de0  08022de0  00032de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000254  20000008  08022de4  00040008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000975c  20000260  08023038  00040260  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200099bc  08023038  000499bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0004025c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006d0a4  00000000  00000000  0004028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000816f  00000000  00000000  000ad330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003948  00000000  00000000  000b54a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000035e8  00000000  00000000  000b8de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030e69  00000000  00000000  000bc3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043cfe  00000000  00000000  000ed239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011dbd7  00000000  00000000  00130f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024eb0e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010880  00000000  00000000  0024eb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000260 	.word	0x20000260
 800015c:	00000000 	.word	0x00000000
 8000160:	08021c24 	.word	0x08021c24

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000264 	.word	0x20000264
 800017c:	08021c24 	.word	0x08021c24

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9bf 	b.w	8000ef8 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f20:	68fb      	ldr	r3, [r7, #12]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f32:	2004      	movs	r0, #4
 8000f34:	f7ff ffe2 	bl	8000efc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ffdf 	bl	8000efc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	200b      	movs	r0, #11
 8000f44:	f017 f919 	bl	801817a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f48:	200b      	movs	r0, #11
 8000f4a:	f017 f930 	bl	80181ae <HAL_NVIC_EnableIRQ>

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f98:	2004      	movs	r0, #4
 8000f9a:	f7ff ffda 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f7ff ffd7 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ffd4 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2008      	movs	r0, #8
 8000fac:	f7ff ffd1 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f017 feac 	bl	8018d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2123      	movs	r1, #35	; 0x23
 8000fc0:	482a      	ldr	r0, [pc, #168]	; (800106c <MX_GPIO_Init+0xe8>)
 8000fc2:	f017 fea7 	bl	8018d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f017 fc33 	bl	8018848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481e      	ldr	r0, [pc, #120]	; (8001070 <MX_GPIO_Init+0xec>)
 8000ff6:	f017 fc27 	bl	8018848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ffa:	2323      	movs	r3, #35	; 0x23
 8000ffc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <MX_GPIO_Init+0xe8>)
 8001010:	f017 fc1a 	bl	8018848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001014:	2301      	movs	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4813      	ldr	r0, [pc, #76]	; (8001074 <MX_GPIO_Init+0xf0>)
 8001028:	f017 fc0e 	bl	8018848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 800102c:	2302      	movs	r3, #2
 800102e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001034:	2301      	movs	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0xf0>)
 800103e:	f017 fc03 	bl	8018848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2006      	movs	r0, #6
 8001048:	f017 f897 	bl	801817a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800104c:	2006      	movs	r0, #6
 800104e:	f017 f8ae 	bl	80181ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200a      	movs	r0, #10
 8001058:	f017 f88f 	bl	801817a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800105c:	200a      	movs	r0, #10
 800105e:	f017 f8a6 	bl	80181ae <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800
 8001074:	48000c00 	.word	0x48000c00

08001078 <LL_AHB2_GRP1_EnableClock>:
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001084:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f2:	4013      	ands	r3, r2
 80010f4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_I2C3_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <MX_I2C3_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_I2C3_Init+0x74>)
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <MX_I2C3_Init+0x7c>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_I2C3_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_I2C3_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_I2C3_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_I2C3_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C3_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C3_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C3_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <MX_I2C3_Init+0x74>)
 8001140:	f017 fe32 	bl	8018da8 <HAL_I2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 f9cb 	bl	80014e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <MX_I2C3_Init+0x74>)
 8001152:	f018 fdf3 	bl	8019d3c <HAL_I2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 f9c2 	bl	80014e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_I2C3_Init+0x74>)
 8001164:	f018 fe35 	bl	8019dd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 f9b9 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000027c 	.word	0x2000027c
 800117c:	40005c00 	.word	0x40005c00
 8001180:	00707cbb 	.word	0x00707cbb

08001184 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09c      	sub	sp, #112	; 0x70
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2250      	movs	r2, #80	; 0x50
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f01d ffb7 	bl	801f118 <memset>
  if(i2cHandle->Instance==I2C3)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_I2C_MspInit+0xb0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d13a      	bne.n	800122a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011b4:	2308      	movs	r3, #8
 80011b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011b8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4618      	mov	r0, r3
 80011c4:	f01a faa8 	bl	801b718 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011ce:	f000 f989 	bl	80014e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff ff50 	bl	8001078 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff ff4d 	bl	8001078 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e2:	2312      	movs	r3, #18
 80011e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ee:	2304      	movs	r3, #4
 80011f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f017 fb24 	bl	8018848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001204:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001206:	2312      	movs	r3, #18
 8001208:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001212:	2304      	movs	r3, #4
 8001214:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800121a:	4619      	mov	r1, r3
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <HAL_I2C_MspInit+0xb4>)
 800121e:	f017 fb13 	bl	8018848 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001222:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001226:	f7ff ff40 	bl	80010aa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	; 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005c00 	.word	0x40005c00
 8001238:	48000400 	.word	0x48000400

0800123c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_I2C_MspDeInit+0x38>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10d      	bne.n	800126a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800124e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001252:	f7ff ff43 	bl	80010dc <LL_APB1_GRP1_DisableClock>

    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125c:	f017 fc64 	bl	8018b28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <HAL_I2C_MspDeInit+0x3c>)
 8001266:	f017 fc5f 	bl	8018b28 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40005c00 	.word	0x40005c00
 8001278:	48000400 	.word	0x48000400

0800127c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001284:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001288:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001294:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001298:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800129c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012a4:	e000      	b.n	80012a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f9      	beq.n	80012a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	f023 0218 	bic.w	r2, r3, #24
 80012de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f016 fdb9 	bl	8017e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 f819 	bl	8001334 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001302:	f000 f88d 	bl	8001420 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f7ff fe3d 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f7ff fe10 	bl	8000f2e <MX_DMA_Init>
  MX_USB_PCD_Init();
 800130e:	f002 fce5 	bl	8003cdc <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8001312:	f002 fbdb 	bl	8003acc <MX_LPUART1_UART_Init>
  MX_TIM17_Init();
 8001316:	f002 fb6b 	bl	80039f0 <MX_TIM17_Init>
  MX_I2C3_Init();
 800131a:	f7ff fef3 	bl	8001104 <MX_I2C3_Init>
  MX_TOF_Init();
 800131e:	f01d fc0f 	bl	801eb40 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */

  IR_Init();
 8001322:	f01d f9e7 	bl	801e6f4 <IR_Init>
  wifi_init();
 8001326:	f01c fa79 	bl	801d81c <wifi_init>
  {
    /* USER CODE END WHILE */

  //MX_TOF_Process();
    /* USER CODE BEGIN 3 */
	  IR_Process();
 800132a:	f01d fa11 	bl	801e750 <IR_Process>
	 wifi_process();
 800132e:	f01c faa1 	bl	801d874 <wifi_process>
	  IR_Process();
 8001332:	e7fa      	b.n	800132a <main+0x34>

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09a      	sub	sp, #104	; 0x68
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2248      	movs	r2, #72	; 0x48
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f01d fee8 	bl	801f118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800135a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001368:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800136a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f023 0303 	bic.w	r3, r3, #3
 8001374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800137e:	f018 fe77 	bl	801a070 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff ffa1 	bl	80012ca <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <SystemClock_Config+0xe8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <SystemClock_Config+0xe8>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <SystemClock_Config+0xe8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80013a4:	2327      	movs	r3, #39	; 0x27
 80013a6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013bc:	2340      	movs	r3, #64	; 0x40
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013c4:	2360      	movs	r3, #96	; 0x60
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4618      	mov	r0, r3
 80013d2:	f019 f9e1 	bl	801a798 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013dc:	f000 f882 	bl	80014e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80013e0:	236f      	movs	r3, #111	; 0x6f
 80013e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80013e4:	2302      	movs	r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2101      	movs	r1, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f019 fd3d 	bl	801ae80 <HAL_RCC_ClockConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800140c:	f000 f86a 	bl	80014e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001410:	f01a faf8 	bl	801ba04 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001414:	bf00      	nop
 8001416:	3768      	adds	r7, #104	; 0x68
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	58000400 	.word	0x58000400

08001420 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2250      	movs	r2, #80	; 0x50
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f01d fe73 	bl	801f118 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800143c:	2300      	movs	r3, #0
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4618      	mov	r0, r3
 8001444:	f01a f968 	bl	801b718 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800144e:	f000 f849 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001452:	bf00      	nop
 8001454:	3750      	adds	r7, #80	; 0x50
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	printf("CALLBACK LPUART\n");
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <HAL_UART_RxCpltCallback+0x18>)
 8001466:	f01e fc2f 	bl	801fcc8 <puts>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	08021c40 	.word	0x08021c40

08001478 <_write>:

int _write(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e009      	b.n	800149e <_write+0x26>
	{
	//__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	60ba      	str	r2, [r7, #8]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fef2 	bl	800127c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbf1      	blt.n	800148a <_write+0x12>
	}
	return len;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d005      	beq.n	80014cc <HAL_GPIO_EXTI_Callback+0x1c>
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d107      	bne.n	80014d4 <HAL_GPIO_EXTI_Callback+0x24>
	{
	case B1_Pin:
		button_pushed = B1;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	801a      	strh	r2, [r3, #0]
		break;
 80014ca:	e003      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x24>
	case B2_Pin:
		button_pushed = B2;
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80014ce:	2202      	movs	r2, #2
 80014d0:	801a      	strh	r2, [r3, #0]
		break;
 80014d2:	bf00      	nop
	}
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	20008968 	.word	0x20008968

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <serialize_int>:

static char *parson_float_format = NULL;

// +BCH
int serialize_int(double num, char *buf)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0b02 	vstr	d0, [r7, #8]
 80014fa:	6078      	str	r0, [r7, #4]
	if(buf == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <serialize_int+0x18>
		return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e00a      	b.n	800151e <serialize_int+0x2e>

	return sprintf(buf,"%d",(int)num);
 8001508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800150c:	f7ff fafc 	bl	8000b08 <__aeabi_d2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <serialize_int+0x38>)
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f01e fbee 	bl	801fcf8 <siprintf>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	08021c50 	.word	0x08021c50

0800152c <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <parson_strndup+0x40>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	3201      	adds	r2, #1
 800153e:	4610      	mov	r0, r2
 8001540:	4798      	blx	r3
 8001542:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <parson_strndup+0x22>
        return NULL;
 800154a:	2300      	movs	r3, #0
 800154c:	e00a      	b.n	8001564 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f01d fdb3 	bl	801f0c8 <memcpy>
    return output_string;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000008 	.word	0x20000008

08001570 <parson_strdup>:

static char * parson_strdup(const char *string) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7fe fe01 	bl	8000180 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffd2 	bl	800152c <parson_strndup>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <hash_string>:
        }
    }
    return PARSON_TRUE;
}

static unsigned long hash_string(const char *string, size_t n) {
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 800159c:	f241 5305 	movw	r3, #5381	; 0x1505
 80015a0:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e011      	b.n	80015d0 <hash_string+0x3e>
        c = string[i];
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00e      	beq.n	80015da <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	441a      	add	r2, r3
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4413      	add	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3301      	adds	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3e9      	bcc.n	80015ac <hash_string+0x1a>
 80015d8:	e000      	b.n	80015dc <hash_string+0x4a>
            break;
 80015da:	bf00      	nop
    }
    return hash;
 80015dc:	697b      	ldr	r3, [r7, #20]
#endif
}
 80015de:	4618      	mov	r0, r3
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <json_object_make+0x50>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2024      	movs	r0, #36	; 0x24
 8001600:	4798      	blx	r3
 8001602:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <json_object_make+0x22>
        return NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	e011      	b.n	8001632 <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	68b8      	ldr	r0, [r7, #8]
 8001618:	f000 f814 	bl	8001644 <json_object_init>
 800161c:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <json_object_make+0x44>
        parson_free(new_obj);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <json_object_make+0x54>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68b8      	ldr	r0, [r7, #8]
 800162a:	4798      	blx	r3
        return NULL;
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <json_object_make+0x46>
    }
    return new_obj;
 8001630:	68bb      	ldr	r3, [r7, #8]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	2000000c 	.word	0x2000000c

08001644 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001686:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80017a4 <json_object_init+0x160>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001692:	ee17 2a90 	vmov	r2, s15
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <json_object_init+0x60>
        return JSONSuccess;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e07b      	b.n	800179c <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <json_object_init+0x164>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6a12      	ldr	r2, [r2, #32]
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4610      	mov	r0, r2
 80016b0:	4798      	blx	r3
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <json_object_init+0x164>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	69d2      	ldr	r2, [r2, #28]
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4610      	mov	r0, r2
 80016c4:	4798      	blx	r3
 80016c6:	4602      	mov	r2, r0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <json_object_init+0x164>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	69d2      	ldr	r2, [r2, #28]
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4610      	mov	r0, r2
 80016d8:	4798      	blx	r3
 80016da:	4602      	mov	r2, r0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <json_object_init+0x164>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	69d2      	ldr	r2, [r2, #28]
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	4610      	mov	r0, r2
 80016ec:	4798      	blx	r3
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <json_object_init+0x164>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	69d2      	ldr	r2, [r2, #28]
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4610      	mov	r0, r2
 8001700:	4798      	blx	r3
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d024      	beq.n	800175a <json_object_init+0x116>
        || object->names == NULL
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <json_object_init+0x116>
        || object->values == NULL
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01c      	beq.n	800175a <json_object_init+0x116>
        || object->cell_ixs == NULL
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d018      	beq.n	800175a <json_object_init+0x116>
        || object->hashes == NULL) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d014      	beq.n	800175a <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e00a      	b.n	800174c <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d3ef      	bcc.n	8001736 <json_object_init+0xf2>
    }
    return JSONSuccess;
 8001756:	2300      	movs	r3, #0
 8001758:	e020      	b.n	800179c <json_object_init+0x158>
        goto error;
 800175a:	bf00      	nop
error:
    parson_free(object->cells);
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <json_object_init+0x168>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6852      	ldr	r2, [r2, #4]
 8001764:	4610      	mov	r0, r2
 8001766:	4798      	blx	r3
    parson_free(object->names);
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <json_object_init+0x168>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68d2      	ldr	r2, [r2, #12]
 8001770:	4610      	mov	r0, r2
 8001772:	4798      	blx	r3
    parson_free(object->values);
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <json_object_init+0x168>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6912      	ldr	r2, [r2, #16]
 800177c:	4610      	mov	r0, r2
 800177e:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <json_object_init+0x168>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6952      	ldr	r2, [r2, #20]
 8001788:	4610      	mov	r0, r2
 800178a:	4798      	blx	r3
    parson_free(object->hashes);
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <json_object_init+0x168>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6892      	ldr	r2, [r2, #8]
 8001794:	4610      	mov	r0, r2
 8001796:	4798      	blx	r3
    return JSONFailure;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	3f333333 	.word	0x3f333333
 80017a8:	20000008 	.word	0x20000008
 80017ac:	2000000c 	.word	0x2000000c

080017b0 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e01b      	b.n	80017fe <json_object_deinit+0x4e>
        if (free_keys) {
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d009      	beq.n	80017e0 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <json_object_deinit+0xcc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	68d1      	ldr	r1, [r2, #12]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	440a      	add	r2, r1
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4610      	mov	r0, r2
 80017de:	4798      	blx	r3
        }
        if (free_values) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d008      	beq.n	80017f8 <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fb92 	bl	8002f1c <json_value_free>
    for (i = 0; i < object->count; i++) {
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	d3de      	bcc.n	80017c6 <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <json_object_deinit+0xcc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	6852      	ldr	r2, [r2, #4]
 8001822:	4610      	mov	r0, r2
 8001824:	4798      	blx	r3
    parson_free(object->names);
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <json_object_deinit+0xcc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	68d2      	ldr	r2, [r2, #12]
 800182e:	4610      	mov	r0, r2
 8001830:	4798      	blx	r3
    parson_free(object->values);
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <json_object_deinit+0xcc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	6912      	ldr	r2, [r2, #16]
 800183a:	4610      	mov	r0, r2
 800183c:	4798      	blx	r3
    parson_free(object->cell_ixs);
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <json_object_deinit+0xcc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	6952      	ldr	r2, [r2, #20]
 8001846:	4610      	mov	r0, r2
 8001848:	4798      	blx	r3
    parson_free(object->hashes);
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <json_object_deinit+0xcc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	6892      	ldr	r2, [r2, #8]
 8001852:	4610      	mov	r0, r2
 8001854:	4798      	blx	r3

    object->cells = NULL;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
}
 8001874:	bf00      	nop
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000000c 	.word	0x2000000c

08001880 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b092      	sub	sp, #72	; 0x48
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 8001888:	2300      	movs	r3, #0
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 800188c:	2300      	movs	r3, #0
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 8001890:	2300      	movs	r3, #0
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2b10      	cmp	r3, #16
 80018a0:	bf38      	it	cc
 80018a2:	2310      	movcc	r3, #16
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fec9 	bl	8001644 <json_object_init>
 80018b2:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 80018b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e046      	b.n	800194e <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f001 fa52 	bl	8002d6a <json_object_get_wrapping_value>
 80018c6:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 80018c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ca:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
 80018d0:	e028      	b.n	8001924 <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f897 	bl	8001a2a <json_object_add>
 80018fc:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 80018fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff4f 	bl	80017b0 <json_object_deinit>
            return JSONFailure;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e01a      	b.n	800194e <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8001918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800191c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 800191e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001920:	3301      	adds	r3, #1
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800192a:	429a      	cmp	r2, r3
 800192c:	d3d1      	bcc.n	80018d2 <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ff3c 	bl	80017b0 <json_object_deinit>
    *object = new_object;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	461d      	mov	r5, r3
 800193c:	f107 040c 	add.w	r4, r7, #12
 8001940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3748      	adds	r7, #72	; 0x48
 8001952:	46bd      	mov	sp, r7
 8001954:	bdb0      	pop	{r4, r5, r7, pc}

08001956 <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 8001956:	b580      	push	{r7, lr}
 8001958:	b08c      	sub	sp, #48	; 0x30
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	3b01      	subs	r3, #1
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4013      	ands	r3, r2
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 8001988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 800198e:	2300      	movs	r3, #0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001992:	e03f      	b.n	8001a14 <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 8001994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	441a      	add	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	3b01      	subs	r3, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d101      	bne.n	80019be <json_object_get_cell_ix+0x68>
            return ix;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	e031      	b.n	8001a22 <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d11b      	bne.n	8001a0c <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 80019e2:	69b8      	ldr	r0, [r7, #24]
 80019e4:	f7fe fbcc 	bl	8000180 <strlen>
 80019e8:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10d      	bne.n	8001a0e <json_object_get_cell_ix+0xb8>
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f01e f9e1 	bl	801fdbe <strncmp>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 8001a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
            return ix;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	e00a      	b.n	8001a22 <json_object_get_cell_ix+0xcc>
            continue;
 8001a0c:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 8001a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a10:	3301      	adds	r3, #1
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3ba      	bcc.n	8001994 <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3730      	adds	r7, #48	; 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b08a      	sub	sp, #40	; 0x28
 8001a2e:	af02      	add	r7, sp, #8
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <json_object_add+0x30>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <json_object_add+0x30>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <json_object_add+0x36>
        return JSONFailure;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e06e      	b.n	8001b3e <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8001a60:	68b8      	ldr	r0, [r7, #8]
 8001a62:	f7fe fb8d 	bl	8000180 <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	f7ff fd91 	bl	8001592 <hash_string>
 8001a70:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8001a76:	68b8      	ldr	r0, [r7, #8]
 8001a78:	f7fe fb82 	bl	8000180 <strlen>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff ff64 	bl	8001956 <json_object_get_cell_ix>
 8001a8e:	61f8      	str	r0, [r7, #28]
    if (found) {
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <json_object_add+0x72>
        return JSONFailure;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e050      	b.n	8001b3e <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d316      	bcc.n	8001ad6 <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff fee9 	bl	8001880 <json_object_grow_and_rehash>
 8001aae:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <json_object_add+0x92>
            return JSONFailure;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	e040      	b.n	8001b3e <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8001abc:	68b8      	ldr	r0, [r7, #8]
 8001abe:	f7fe fb5f 	bl	8000180 <strlen>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ff41 	bl	8001956 <json_object_get_cell_ix>
 8001ad4:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	6992      	ldr	r2, [r2, #24]
 8001af4:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	601a      	str	r2, [r3, #0]
    object->count++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f001 f91a 	bl	8002d6a <json_object_get_wrapping_value>
 8001b36:	4602      	mov	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8001b50:	2201      	movs	r2, #1
 8001b52:	2101      	movs	r1, #1
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fe2b 	bl	80017b0 <json_object_deinit>
    parson_free(object);
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <json_object_free+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000000c 	.word	0x2000000c

08001b70 <json_array_free>:
    array->items = new_items;
    array->capacity = new_capacity;
    return JSONSuccess;
}

static void json_array_free(JSON_Array *array) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e00b      	b.n	8001b96 <json_array_free+0x26>
        json_value_free(array->items[i]);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 f9c6 	bl	8002f1c <json_value_free>
    for (i = 0; i < array->count; i++) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3ee      	bcc.n	8001b7e <json_array_free+0xe>
    }
    parson_free(array->items);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <json_array_free+0x4c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6852      	ldr	r2, [r2, #4]
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4798      	blx	r3
    parson_free(array);
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <json_array_free+0x4c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000000c 	.word	0x2000000c

08001bc0 <json_serialize_to_buffer_r>:
                                    APPEND_STRING(PARSON_INDENT_STR);\
                                }\
                            } while (0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b098      	sub	sp, #96	; 0x60
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Value *temp_value = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Array *array = NULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Object *object = NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t i = 0, count = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	657b      	str	r3, [r7, #84]	; 0x54
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    double num = 0.0;
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t len = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f001 f8ed 	bl	8002de4 <json_value_get_type>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	f200 8355 	bhi.w	80022be <json_serialize_to_buffer_r+0x6fe>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <json_serialize_to_buffer_r+0x5c>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	080022b9 	.word	0x080022b9
 8001c20:	080022bf 	.word	0x080022bf
 8001c24:	08002285 	.word	0x08002285
 8001c28:	0800214b 	.word	0x0800214b
 8001c2c:	0800220b 	.word	0x0800220b
 8001c30:	08001e69 	.word	0x08001e69
 8001c34:	08001c3d 	.word	0x08001c3d
 8001c38:	08002199 	.word	0x08002199
        case JSONArray:
            array = json_value_get_array(value);
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f001 f8f5 	bl	8002e2c <json_value_get_array>
 8001c42:	62f8      	str	r0, [r7, #44]	; 0x2c
            count = json_array_get_count(array);
 8001c44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c46:	f001 f8bc 	bl	8002dc2 <json_array_get_count>
 8001c4a:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("[");
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00e      	beq.n	8001c74 <json_serialize_to_buffer_r+0xb4>
 8001c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c58:	461a      	mov	r2, r3
 8001c5a:	497e      	ldr	r1, [pc, #504]	; (8001e54 <json_serialize_to_buffer_r+0x294>)
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f01d fa33 	bl	801f0c8 <memcpy>
 8001c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	4413      	add	r3, r2
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c78:	4413      	add	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01a      	beq.n	8001cb8 <json_serialize_to_buffer_r+0xf8>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d017      	beq.n	8001cb8 <json_serialize_to_buffer_r+0xf8>
                APPEND_STRING("\n");
 8001c88:	2301      	movs	r3, #1
 8001c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00e      	beq.n	8001cb0 <json_serialize_to_buffer_r+0xf0>
 8001c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c94:	461a      	mov	r2, r3
 8001c96:	4970      	ldr	r1, [pc, #448]	; (8001e58 <json_serialize_to_buffer_r+0x298>)
 8001c98:	68b8      	ldr	r0, [r7, #8]
 8001c9a:	f01d fa15 	bl	801f0c8 <memcpy>
 8001c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4413      	add	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb4:	4413      	add	r3, r2
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	657b      	str	r3, [r7, #84]	; 0x54
 8001cbc:	e081      	b.n	8001dc2 <json_serialize_to_buffer_r+0x202>
                if (is_pretty) {
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d023      	beq.n	8001d0c <json_serialize_to_buffer_r+0x14c>
                    APPEND_INDENT(level+1);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ccc:	e01a      	b.n	8001d04 <json_serialize_to_buffer_r+0x144>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00e      	beq.n	8001cf6 <json_serialize_to_buffer_r+0x136>
 8001cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cda:	461a      	mov	r2, r3
 8001cdc:	495f      	ldr	r1, [pc, #380]	; (8001e5c <json_serialize_to_buffer_r+0x29c>)
 8001cde:	68b8      	ldr	r0, [r7, #8]
 8001ce0:	f01d f9f2 	bl	801f0c8 <memcpy>
 8001ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	4413      	add	r3, r2
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cfa:	4413      	add	r3, r2
 8001cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d00:	3301      	adds	r3, #1
 8001d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dae0      	bge.n	8001cce <json_serialize_to_buffer_r+0x10e>
                }
                temp_value = json_array_get_value(array, i);
 8001d0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d10:	f001 f83c 	bl	8002d8c <json_array_get_value>
 8001d14:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d24:	f7ff ff4c 	bl	8001bc0 <json_serialize_to_buffer_r>
 8001d28:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8001d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da02      	bge.n	8001d36 <json_serialize_to_buffer_r+0x176>
                    return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e2c5      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <json_serialize_to_buffer_r+0x184>
                    buf += written;
 8001d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	4413      	add	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8001d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d48:	4413      	add	r3, r2
 8001d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d217      	bcs.n	8001d86 <json_serialize_to_buffer_r+0x1c6>
                    APPEND_STRING(",");
 8001d56:	2301      	movs	r3, #1
 8001d58:	653b      	str	r3, [r7, #80]	; 0x50
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <json_serialize_to_buffer_r+0x1be>
 8001d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d62:	461a      	mov	r2, r3
 8001d64:	493e      	ldr	r1, [pc, #248]	; (8001e60 <json_serialize_to_buffer_r+0x2a0>)
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f01d f9ae 	bl	801f0c8 <memcpy>
 8001d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4413      	add	r3, r2
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d82:	4413      	add	r3, r2
 8001d84:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d017      	beq.n	8001dbc <json_serialize_to_buffer_r+0x1fc>
                    APPEND_STRING("\n");
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00e      	beq.n	8001db4 <json_serialize_to_buffer_r+0x1f4>
 8001d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d98:	461a      	mov	r2, r3
 8001d9a:	492f      	ldr	r1, [pc, #188]	; (8001e58 <json_serialize_to_buffer_r+0x298>)
 8001d9c:	68b8      	ldr	r0, [r7, #8]
 8001d9e:	f01d f993 	bl	801f0c8 <memcpy>
 8001da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	4413      	add	r3, r2
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db8:	4413      	add	r3, r2
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8001dc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	f4ff af79 	bcc.w	8001cbe <json_serialize_to_buffer_r+0xfe>
                }
            }
            if (count > 0 && is_pretty) {
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d026      	beq.n	8001e20 <json_serialize_to_buffer_r+0x260>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d023      	beq.n	8001e20 <json_serialize_to_buffer_r+0x260>
                APPEND_INDENT(level);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	647b      	str	r3, [r7, #68]	; 0x44
 8001ddc:	2300      	movs	r3, #0
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
 8001de0:	e01a      	b.n	8001e18 <json_serialize_to_buffer_r+0x258>
 8001de2:	2304      	movs	r3, #4
 8001de4:	653b      	str	r3, [r7, #80]	; 0x50
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <json_serialize_to_buffer_r+0x24a>
 8001dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dee:	461a      	mov	r2, r3
 8001df0:	491a      	ldr	r1, [pc, #104]	; (8001e5c <json_serialize_to_buffer_r+0x29c>)
 8001df2:	68b8      	ldr	r0, [r7, #8]
 8001df4:	f01d f968 	bl	801f0c8 <memcpy>
 8001df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	4413      	add	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e0e:	4413      	add	r3, r2
 8001e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e14:	3301      	adds	r3, #1
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
 8001e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbe0      	blt.n	8001de2 <json_serialize_to_buffer_r+0x222>
            }
            APPEND_STRING("]");
 8001e20:	2301      	movs	r3, #1
 8001e22:	653b      	str	r3, [r7, #80]	; 0x50
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <json_serialize_to_buffer_r+0x288>
 8001e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <json_serialize_to_buffer_r+0x2a4>)
 8001e30:	68b8      	ldr	r0, [r7, #8]
 8001e32:	f01d f949 	bl	801f0c8 <memcpy>
 8001e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4c:	4413      	add	r3, r2
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8001e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e52:	e236      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
 8001e54:	08021c78 	.word	0x08021c78
 8001e58:	08021c7c 	.word	0x08021c7c
 8001e5c:	08021c80 	.word	0x08021c80
 8001e60:	08021c88 	.word	0x08021c88
 8001e64:	08021c8c 	.word	0x08021c8c
        case JSONObject:
            object = json_value_get_object(value);
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 ffcd 	bl	8002e08 <json_value_get_object>
 8001e6e:	62b8      	str	r0, [r7, #40]	; 0x28
            count  = json_object_get_count(object);
 8001e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e72:	f000 ff33 	bl	8002cdc <json_object_get_count>
 8001e76:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("{");
 8001e78:	2301      	movs	r3, #1
 8001e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00e      	beq.n	8001ea0 <json_serialize_to_buffer_r+0x2e0>
 8001e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e84:	461a      	mov	r2, r3
 8001e86:	498e      	ldr	r1, [pc, #568]	; (80020c0 <json_serialize_to_buffer_r+0x500>)
 8001e88:	68b8      	ldr	r0, [r7, #8]
 8001e8a:	f01d f91d 	bl	801f0c8 <memcpy>
 8001e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea4:	4413      	add	r3, r2
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01a      	beq.n	8001ee4 <json_serialize_to_buffer_r+0x324>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d017      	beq.n	8001ee4 <json_serialize_to_buffer_r+0x324>
                APPEND_STRING("\n");
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00e      	beq.n	8001edc <json_serialize_to_buffer_r+0x31c>
 8001ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4980      	ldr	r1, [pc, #512]	; (80020c4 <json_serialize_to_buffer_r+0x504>)
 8001ec4:	68b8      	ldr	r0, [r7, #8]
 8001ec6:	f01d f8ff 	bl	801f0c8 <memcpy>
 8001eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	4413      	add	r3, r2
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee0:	4413      	add	r3, r2
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8001ee8:	e0da      	b.n	80020a0 <json_serialize_to_buffer_r+0x4e0>
                key = json_object_get_name(object, i);
 8001eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eee:	f000 ff06 	bl	8002cfe <json_object_get_name>
 8001ef2:	63b8      	str	r0, [r7, #56]	; 0x38
                if (key == NULL) {
 8001ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <json_serialize_to_buffer_r+0x340>
                    return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e1e0      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
                }
                if (is_pretty) {
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d023      	beq.n	8001f4e <json_serialize_to_buffer_r+0x38e>
                    APPEND_INDENT(level+1);
 8001f06:	2300      	movs	r3, #0
 8001f08:	643b      	str	r3, [r7, #64]	; 0x40
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f0e:	e01a      	b.n	8001f46 <json_serialize_to_buffer_r+0x386>
 8001f10:	2304      	movs	r3, #4
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00e      	beq.n	8001f38 <json_serialize_to_buffer_r+0x378>
 8001f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	496a      	ldr	r1, [pc, #424]	; (80020c8 <json_serialize_to_buffer_r+0x508>)
 8001f20:	68b8      	ldr	r0, [r7, #8]
 8001f22:	f01d f8d1 	bl	801f0c8 <memcpy>
 8001f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f3c:	4413      	add	r3, r2
 8001f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f42:	3301      	adds	r3, #1
 8001f44:	643b      	str	r3, [r7, #64]	; 0x40
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dae0      	bge.n	8001f10 <json_serialize_to_buffer_r+0x350>
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 8001f4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f50:	f7fe f916 	bl	8000180 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f5c:	f000 f9c6 	bl	80022ec <json_serialize_string>
 8001f60:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8001f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da02      	bge.n	8001f6e <json_serialize_to_buffer_r+0x3ae>
                    return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	e1a9      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <json_serialize_to_buffer_r+0x3bc>
                    buf += written;
 8001f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8001f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f80:	4413      	add	r3, r2
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
                APPEND_STRING(":");
 8001f84:	2301      	movs	r3, #1
 8001f86:	653b      	str	r3, [r7, #80]	; 0x50
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00e      	beq.n	8001fac <json_serialize_to_buffer_r+0x3ec>
 8001f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f90:	461a      	mov	r2, r3
 8001f92:	494e      	ldr	r1, [pc, #312]	; (80020cc <json_serialize_to_buffer_r+0x50c>)
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f01d f897 	bl	801f0c8 <memcpy>
 8001f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb0:	4413      	add	r3, r2
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (is_pretty) {
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d017      	beq.n	8001fea <json_serialize_to_buffer_r+0x42a>
                    APPEND_STRING(" ");
 8001fba:	2301      	movs	r3, #1
 8001fbc:	653b      	str	r3, [r7, #80]	; 0x50
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <json_serialize_to_buffer_r+0x422>
 8001fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4941      	ldr	r1, [pc, #260]	; (80020d0 <json_serialize_to_buffer_r+0x510>)
 8001fca:	68b8      	ldr	r0, [r7, #8]
 8001fcc:	f01d f87c 	bl	801f0c8 <memcpy>
 8001fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe6:	4413      	add	r3, r2
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                temp_value = json_object_get_value_at(object, i);
 8001fea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fee:	f000 fea1 	bl	8002d34 <json_object_get_value_at>
 8001ff2:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002002:	f7ff fddd 	bl	8001bc0 <json_serialize_to_buffer_r>
 8002006:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8002008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200a:	2b00      	cmp	r3, #0
 800200c:	da02      	bge.n	8002014 <json_serialize_to_buffer_r+0x454>
                    return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e156      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <json_serialize_to_buffer_r+0x462>
                    buf += written;
 800201a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	4413      	add	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8002022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002026:	4413      	add	r3, r2
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3b01      	subs	r3, #1
 800202e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002030:	429a      	cmp	r2, r3
 8002032:	d217      	bcs.n	8002064 <json_serialize_to_buffer_r+0x4a4>
                    APPEND_STRING(",");
 8002034:	2301      	movs	r3, #1
 8002036:	653b      	str	r3, [r7, #80]	; 0x50
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00e      	beq.n	800205c <json_serialize_to_buffer_r+0x49c>
 800203e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002040:	461a      	mov	r2, r3
 8002042:	4924      	ldr	r1, [pc, #144]	; (80020d4 <json_serialize_to_buffer_r+0x514>)
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f01d f83f 	bl	801f0c8 <memcpy>
 800204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	4413      	add	r3, r2
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4413      	add	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800205e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002060:	4413      	add	r3, r2
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d017      	beq.n	800209a <json_serialize_to_buffer_r+0x4da>
                    APPEND_STRING("\n");
 800206a:	2301      	movs	r3, #1
 800206c:	653b      	str	r3, [r7, #80]	; 0x50
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <json_serialize_to_buffer_r+0x4d2>
 8002074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002076:	461a      	mov	r2, r3
 8002078:	4912      	ldr	r1, [pc, #72]	; (80020c4 <json_serialize_to_buffer_r+0x504>)
 800207a:	68b8      	ldr	r0, [r7, #8]
 800207c:	f01d f824 	bl	801f0c8 <memcpy>
 8002080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4413      	add	r3, r2
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	4413      	add	r3, r2
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002096:	4413      	add	r3, r2
 8002098:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 800209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209c:	3301      	adds	r3, #1
 800209e:	657b      	str	r3, [r7, #84]	; 0x54
 80020a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f4ff af20 	bcc.w	8001eea <json_serialize_to_buffer_r+0x32a>
                }
            }
            if (count > 0 && is_pretty) {
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d032      	beq.n	8002116 <json_serialize_to_buffer_r+0x556>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02f      	beq.n	8002116 <json_serialize_to_buffer_r+0x556>
                APPEND_INDENT(level);
 80020b6:	2300      	movs	r3, #0
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ba:	2300      	movs	r3, #0
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020be:	e026      	b.n	800210e <json_serialize_to_buffer_r+0x54e>
 80020c0:	08021c90 	.word	0x08021c90
 80020c4:	08021c7c 	.word	0x08021c7c
 80020c8:	08021c80 	.word	0x08021c80
 80020cc:	08021c94 	.word	0x08021c94
 80020d0:	08021c98 	.word	0x08021c98
 80020d4:	08021c88 	.word	0x08021c88
 80020d8:	2304      	movs	r3, #4
 80020da:	653b      	str	r3, [r7, #80]	; 0x50
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00e      	beq.n	8002100 <json_serialize_to_buffer_r+0x540>
 80020e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e4:	461a      	mov	r2, r3
 80020e6:	4979      	ldr	r1, [pc, #484]	; (80022cc <json_serialize_to_buffer_r+0x70c>)
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	f01c ffed 	bl	801f0c8 <memcpy>
 80020ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4413      	add	r3, r2
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002104:	4413      	add	r3, r2
 8002106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	3301      	adds	r3, #1
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	dbe0      	blt.n	80020d8 <json_serialize_to_buffer_r+0x518>
            }
            APPEND_STRING("}");
 8002116:	2301      	movs	r3, #1
 8002118:	653b      	str	r3, [r7, #80]	; 0x50
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <json_serialize_to_buffer_r+0x57e>
 8002120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002122:	461a      	mov	r2, r3
 8002124:	496a      	ldr	r1, [pc, #424]	; (80022d0 <json_serialize_to_buffer_r+0x710>)
 8002126:	68b8      	ldr	r0, [r7, #8]
 8002128:	f01c ffce 	bl	801f0c8 <memcpy>
 800212c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	4413      	add	r3, r2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002142:	4413      	add	r3, r2
 8002144:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8002146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002148:	e0bb      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
        case JSONString:
            string = json_value_get_string(value);
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fe92 	bl	8002e74 <json_value_get_string>
 8002150:	6378      	str	r0, [r7, #52]	; 0x34
            if (string == NULL) {
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <json_serialize_to_buffer_r+0x59e>
                return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
 800215c:	e0b1      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
            }
            len = json_value_get_string_len(value);
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fe9b 	bl	8002e9a <json_value_get_string_len>
 8002164:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	6979      	ldr	r1, [r7, #20]
 800216a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800216c:	f000 f8be 	bl	80022ec <json_serialize_string>
 8002170:	6538      	str	r0, [r7, #80]	; 0x50
            if (written < 0) {
 8002172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002174:	2b00      	cmp	r3, #0
 8002176:	da02      	bge.n	800217e <json_serialize_to_buffer_r+0x5be>
                return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	e0a1      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <json_serialize_to_buffer_r+0x5cc>
                buf += written;
 8002184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	4413      	add	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 800218c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800218e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002190:	4413      	add	r3, r2
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002196:	e094      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 feac 	bl	8002ef6 <json_value_get_boolean>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d018      	beq.n	80021d6 <json_serialize_to_buffer_r+0x616>
                APPEND_STRING("true");
 80021a4:	2304      	movs	r3, #4
 80021a6:	653b      	str	r3, [r7, #80]	; 0x50
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00e      	beq.n	80021cc <json_serialize_to_buffer_r+0x60c>
 80021ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b0:	461a      	mov	r2, r3
 80021b2:	4948      	ldr	r1, [pc, #288]	; (80022d4 <json_serialize_to_buffer_r+0x714>)
 80021b4:	68b8      	ldr	r0, [r7, #8]
 80021b6:	f01c ff87 	bl	801f0c8 <memcpy>
 80021ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	4413      	add	r3, r2
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4413      	add	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d0:	4413      	add	r3, r2
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d4:	e017      	b.n	8002206 <json_serialize_to_buffer_r+0x646>
            } else {
                APPEND_STRING("false");
 80021d6:	2305      	movs	r3, #5
 80021d8:	653b      	str	r3, [r7, #80]	; 0x50
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <json_serialize_to_buffer_r+0x63e>
 80021e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e2:	461a      	mov	r2, r3
 80021e4:	493c      	ldr	r1, [pc, #240]	; (80022d8 <json_serialize_to_buffer_r+0x718>)
 80021e6:	68b8      	ldr	r0, [r7, #8]
 80021e8:	f01c ff6e 	bl	801f0c8 <memcpy>
 80021ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4413      	add	r3, r2
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	4413      	add	r3, r2
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002202:	4413      	add	r3, r2
 8002204:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            return written_total;
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002208:	e05b      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
        case JSONNumber:
            num = json_value_get_number(value);
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fe58 	bl	8002ec0 <json_value_get_number>
 8002210:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <json_serialize_to_buffer_r+0x65e>
                num_buf = buf;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	663b      	str	r3, [r7, #96]	; 0x60
            }
            if (parson_number_serialization_function) {
 800221e:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <json_serialize_to_buffer_r+0x71c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <json_serialize_to_buffer_r+0x676>
                written = parson_number_serialization_function(num, num_buf);
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <json_serialize_to_buffer_r+0x71c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800222c:	ed97 0b06 	vldr	d0, [r7, #24]
 8002230:	4798      	blx	r3
 8002232:	6538      	str	r0, [r7, #80]	; 0x50
 8002234:	e013      	b.n	800225e <json_serialize_to_buffer_r+0x69e>
            } else if (parson_float_format) {
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <json_serialize_to_buffer_r+0x720>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <json_serialize_to_buffer_r+0x690>
                written = sprintf(num_buf, parson_float_format, num);
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <json_serialize_to_buffer_r+0x720>)
 8002240:	6819      	ldr	r1, [r3, #0]
 8002242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002246:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002248:	f01d fd56 	bl	801fcf8 <siprintf>
 800224c:	6538      	str	r0, [r7, #80]	; 0x50
 800224e:	e006      	b.n	800225e <json_serialize_to_buffer_r+0x69e>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 8002250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002254:	4923      	ldr	r1, [pc, #140]	; (80022e4 <json_serialize_to_buffer_r+0x724>)
 8002256:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002258:	f01d fd4e 	bl	801fcf8 <siprintf>
 800225c:	6538      	str	r0, [r7, #80]	; 0x50
            }
            if (written < 0) {
 800225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002260:	2b00      	cmp	r3, #0
 8002262:	da02      	bge.n	800226a <json_serialize_to_buffer_r+0x6aa>
                return -1;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	e02b      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <json_serialize_to_buffer_r+0x6b8>
                buf += written;
 8002270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4413      	add	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 8002278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800227a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800227c:	4413      	add	r3, r2
 800227e:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8002280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002282:	e01e      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
        case JSONNull:
            APPEND_STRING("null");
 8002284:	2304      	movs	r3, #4
 8002286:	653b      	str	r3, [r7, #80]	; 0x50
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <json_serialize_to_buffer_r+0x6ec>
 800228e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002290:	461a      	mov	r2, r3
 8002292:	4915      	ldr	r1, [pc, #84]	; (80022e8 <json_serialize_to_buffer_r+0x728>)
 8002294:	68b8      	ldr	r0, [r7, #8]
 8002296:	f01c ff17 	bl	801f0c8 <memcpy>
 800229a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b0:	4413      	add	r3, r2
 80022b2:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80022b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b6:	e004      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
        case JSONError:
            return -1;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	e001      	b.n	80022c2 <json_serialize_to_buffer_r+0x702>
        default:
            return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3758      	adds	r7, #88	; 0x58
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	08021c80 	.word	0x08021c80
 80022d0:	08021c9c 	.word	0x08021c9c
 80022d4:	08021c60 	.word	0x08021c60
 80022d8:	08021c68 	.word	0x08021c68
 80022dc:	20000014 	.word	0x20000014
 80022e0:	200002dc 	.word	0x200002dc
 80022e4:	08021ca0 	.word	0x08021ca0
 80022e8:	08021c70 	.word	0x08021c70

080022ec <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 80022fc:	2300      	movs	r3, #0
 80022fe:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 8002300:	f04f 33ff 	mov.w	r3, #4294967295
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
    // +BCH
    //APPEND_STRING("\"");
    APPEND_STRING("\\\"");
 800230a:	2302      	movs	r3, #2
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <json_serialize_string+0x46>
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	461a      	mov	r2, r3
 8002318:	49b8      	ldr	r1, [pc, #736]	; (80025fc <json_serialize_string+0x310>)
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f01c fed4 	bl	801f0c8 <memcpy>
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	f000 bc9b 	b.w	8002c78 <json_serialize_string+0x98c>
        c = string[i];
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2b5c      	cmp	r3, #92	; 0x5c
 8002350:	f200 8482 	bhi.w	8002c58 <json_serialize_string+0x96c>
 8002354:	a201      	add	r2, pc, #4	; (adr r2, 800235c <json_serialize_string+0x70>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	08002647 	.word	0x08002647
 8002360:	08002679 	.word	0x08002679
 8002364:	080026ab 	.word	0x080026ab
 8002368:	080026dd 	.word	0x080026dd
 800236c:	0800270f 	.word	0x0800270f
 8002370:	08002741 	.word	0x08002741
 8002374:	08002773 	.word	0x08002773
 8002378:	080027a5 	.word	0x080027a5
 800237c:	08002535 	.word	0x08002535
 8002380:	08002615 	.word	0x08002615
 8002384:	08002599 	.word	0x08002599
 8002388:	080027d7 	.word	0x080027d7
 800238c:	08002567 	.word	0x08002567
 8002390:	080025cb 	.word	0x080025cb
 8002394:	08002809 	.word	0x08002809
 8002398:	0800283b 	.word	0x0800283b
 800239c:	0800289d 	.word	0x0800289d
 80023a0:	080028cf 	.word	0x080028cf
 80023a4:	08002901 	.word	0x08002901
 80023a8:	08002933 	.word	0x08002933
 80023ac:	08002965 	.word	0x08002965
 80023b0:	08002997 	.word	0x08002997
 80023b4:	080029c9 	.word	0x080029c9
 80023b8:	080029fb 	.word	0x080029fb
 80023bc:	08002a2d 	.word	0x08002a2d
 80023c0:	08002a5f 	.word	0x08002a5f
 80023c4:	08002a91 	.word	0x08002a91
 80023c8:	08002ac3 	.word	0x08002ac3
 80023cc:	08002b25 	.word	0x08002b25
 80023d0:	08002b57 	.word	0x08002b57
 80023d4:	08002b89 	.word	0x08002b89
 80023d8:	08002bbb 	.word	0x08002bbb
 80023dc:	08002c59 	.word	0x08002c59
 80023e0:	08002c59 	.word	0x08002c59
 80023e4:	080024d1 	.word	0x080024d1
 80023e8:	08002c59 	.word	0x08002c59
 80023ec:	08002c59 	.word	0x08002c59
 80023f0:	08002c59 	.word	0x08002c59
 80023f4:	08002c59 	.word	0x08002c59
 80023f8:	08002c59 	.word	0x08002c59
 80023fc:	08002c59 	.word	0x08002c59
 8002400:	08002c59 	.word	0x08002c59
 8002404:	08002c59 	.word	0x08002c59
 8002408:	08002c59 	.word	0x08002c59
 800240c:	08002c59 	.word	0x08002c59
 8002410:	08002c59 	.word	0x08002c59
 8002414:	08002c59 	.word	0x08002c59
 8002418:	08002bed 	.word	0x08002bed
 800241c:	08002c59 	.word	0x08002c59
 8002420:	08002c59 	.word	0x08002c59
 8002424:	08002c59 	.word	0x08002c59
 8002428:	08002c59 	.word	0x08002c59
 800242c:	08002c59 	.word	0x08002c59
 8002430:	08002c59 	.word	0x08002c59
 8002434:	08002c59 	.word	0x08002c59
 8002438:	08002c59 	.word	0x08002c59
 800243c:	08002c59 	.word	0x08002c59
 8002440:	08002c59 	.word	0x08002c59
 8002444:	08002c59 	.word	0x08002c59
 8002448:	08002c59 	.word	0x08002c59
 800244c:	08002c59 	.word	0x08002c59
 8002450:	08002c59 	.word	0x08002c59
 8002454:	08002c59 	.word	0x08002c59
 8002458:	08002c59 	.word	0x08002c59
 800245c:	08002c59 	.word	0x08002c59
 8002460:	08002c59 	.word	0x08002c59
 8002464:	08002c59 	.word	0x08002c59
 8002468:	08002c59 	.word	0x08002c59
 800246c:	08002c59 	.word	0x08002c59
 8002470:	08002c59 	.word	0x08002c59
 8002474:	08002c59 	.word	0x08002c59
 8002478:	08002c59 	.word	0x08002c59
 800247c:	08002c59 	.word	0x08002c59
 8002480:	08002c59 	.word	0x08002c59
 8002484:	08002c59 	.word	0x08002c59
 8002488:	08002c59 	.word	0x08002c59
 800248c:	08002c59 	.word	0x08002c59
 8002490:	08002c59 	.word	0x08002c59
 8002494:	08002c59 	.word	0x08002c59
 8002498:	08002c59 	.word	0x08002c59
 800249c:	08002c59 	.word	0x08002c59
 80024a0:	08002c59 	.word	0x08002c59
 80024a4:	08002c59 	.word	0x08002c59
 80024a8:	08002c59 	.word	0x08002c59
 80024ac:	08002c59 	.word	0x08002c59
 80024b0:	08002c59 	.word	0x08002c59
 80024b4:	08002c59 	.word	0x08002c59
 80024b8:	08002c59 	.word	0x08002c59
 80024bc:	08002c59 	.word	0x08002c59
 80024c0:	08002c59 	.word	0x08002c59
 80024c4:	08002c59 	.word	0x08002c59
 80024c8:	08002c59 	.word	0x08002c59
 80024cc:	08002503 	.word	0x08002503
        	case '\"': APPEND_STRING("\\\""); break;
 80024d0:	2302      	movs	r3, #2
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00e      	beq.n	80024f8 <json_serialize_string+0x20c>
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	461a      	mov	r2, r3
 80024de:	4947      	ldr	r1, [pc, #284]	; (80025fc <json_serialize_string+0x310>)
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f01c fdf1 	bl	801f0c8 <memcpy>
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	e3b7      	b.n	8002c72 <json_serialize_string+0x986>
            case '\\': APPEND_STRING("\\\\"); break;
 8002502:	2302      	movs	r3, #2
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <json_serialize_string+0x23e>
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	461a      	mov	r2, r3
 8002510:	493b      	ldr	r1, [pc, #236]	; (8002600 <json_serialize_string+0x314>)
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f01c fdd8 	bl	801f0c8 <memcpy>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e39e      	b.n	8002c72 <json_serialize_string+0x986>
            case '\b': APPEND_STRING("\\b"); break;
 8002534:	2302      	movs	r3, #2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00e      	beq.n	800255c <json_serialize_string+0x270>
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	461a      	mov	r2, r3
 8002542:	4930      	ldr	r1, [pc, #192]	; (8002604 <json_serialize_string+0x318>)
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f01c fdbf 	bl	801f0c8 <memcpy>
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e385      	b.n	8002c72 <json_serialize_string+0x986>
            case '\f': APPEND_STRING("\\f"); break;
 8002566:	2302      	movs	r3, #2
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <json_serialize_string+0x2a2>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	461a      	mov	r2, r3
 8002574:	4924      	ldr	r1, [pc, #144]	; (8002608 <json_serialize_string+0x31c>)
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f01c fda6 	bl	801f0c8 <memcpy>
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e36c      	b.n	8002c72 <json_serialize_string+0x986>
            case '\n': APPEND_STRING("\\n"); break;
 8002598:	2302      	movs	r3, #2
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <json_serialize_string+0x2d4>
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4919      	ldr	r1, [pc, #100]	; (800260c <json_serialize_string+0x320>)
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f01c fd8d 	bl	801f0c8 <memcpy>
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	e353      	b.n	8002c72 <json_serialize_string+0x986>
            case '\r': APPEND_STRING("\\r"); break;
 80025ca:	2302      	movs	r3, #2
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <json_serialize_string+0x306>
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	461a      	mov	r2, r3
 80025d8:	490d      	ldr	r1, [pc, #52]	; (8002610 <json_serialize_string+0x324>)
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f01c fd74 	bl	801f0c8 <memcpy>
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	e33a      	b.n	8002c72 <json_serialize_string+0x986>
 80025fc:	08021ca8 	.word	0x08021ca8
 8002600:	08021cac 	.word	0x08021cac
 8002604:	08021cb0 	.word	0x08021cb0
 8002608:	08021cb4 	.word	0x08021cb4
 800260c:	08021cb8 	.word	0x08021cb8
 8002610:	08021cbc 	.word	0x08021cbc
            case '\t': APPEND_STRING("\\t"); break;
 8002614:	2302      	movs	r3, #2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00e      	beq.n	800263c <json_serialize_string+0x350>
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	461a      	mov	r2, r3
 8002622:	4992      	ldr	r1, [pc, #584]	; (800286c <json_serialize_string+0x580>)
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f01c fd4f 	bl	801f0c8 <memcpy>
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	e315      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8002646:	2306      	movs	r3, #6
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <json_serialize_string+0x382>
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	461a      	mov	r2, r3
 8002654:	4986      	ldr	r1, [pc, #536]	; (8002870 <json_serialize_string+0x584>)
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f01c fd36 	bl	801f0c8 <memcpy>
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e2fc      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8002678:	2306      	movs	r3, #6
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00e      	beq.n	80026a0 <json_serialize_string+0x3b4>
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	461a      	mov	r2, r3
 8002686:	497b      	ldr	r1, [pc, #492]	; (8002874 <json_serialize_string+0x588>)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f01c fd1d 	bl	801f0c8 <memcpy>
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e2e3      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x02': APPEND_STRING("\\u0002"); break;
 80026aa:	2306      	movs	r3, #6
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <json_serialize_string+0x3e6>
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	461a      	mov	r2, r3
 80026b8:	496f      	ldr	r1, [pc, #444]	; (8002878 <json_serialize_string+0x58c>)
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f01c fd04 	bl	801f0c8 <memcpy>
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	e2ca      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x03': APPEND_STRING("\\u0003"); break;
 80026dc:	2306      	movs	r3, #6
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00e      	beq.n	8002704 <json_serialize_string+0x418>
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4964      	ldr	r1, [pc, #400]	; (800287c <json_serialize_string+0x590>)
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f01c fceb 	bl	801f0c8 <memcpy>
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	e2b1      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x04': APPEND_STRING("\\u0004"); break;
 800270e:	2306      	movs	r3, #6
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00e      	beq.n	8002736 <json_serialize_string+0x44a>
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	461a      	mov	r2, r3
 800271c:	4958      	ldr	r1, [pc, #352]	; (8002880 <json_serialize_string+0x594>)
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f01c fcd2 	bl	801f0c8 <memcpy>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e298      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8002740:	2306      	movs	r3, #6
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00e      	beq.n	8002768 <json_serialize_string+0x47c>
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	461a      	mov	r2, r3
 800274e:	494d      	ldr	r1, [pc, #308]	; (8002884 <json_serialize_string+0x598>)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f01c fcb9 	bl	801f0c8 <memcpy>
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	e27f      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8002772:	2306      	movs	r3, #6
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <json_serialize_string+0x4ae>
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	461a      	mov	r2, r3
 8002780:	4941      	ldr	r1, [pc, #260]	; (8002888 <json_serialize_string+0x59c>)
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f01c fca0 	bl	801f0c8 <memcpy>
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	e266      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x07': APPEND_STRING("\\u0007"); break;
 80027a4:	2306      	movs	r3, #6
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <json_serialize_string+0x4e0>
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4936      	ldr	r1, [pc, #216]	; (800288c <json_serialize_string+0x5a0>)
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f01c fc87 	bl	801f0c8 <memcpy>
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	e24d      	b.n	8002c72 <json_serialize_string+0x986>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 80027d6:	2306      	movs	r3, #6
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <json_serialize_string+0x512>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	461a      	mov	r2, r3
 80027e4:	492a      	ldr	r1, [pc, #168]	; (8002890 <json_serialize_string+0x5a4>)
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f01c fc6e 	bl	801f0c8 <memcpy>
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e234      	b.n	8002c72 <json_serialize_string+0x986>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 8002808:	2306      	movs	r3, #6
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <json_serialize_string+0x544>
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	461a      	mov	r2, r3
 8002816:	491f      	ldr	r1, [pc, #124]	; (8002894 <json_serialize_string+0x5a8>)
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f01c fc55 	bl	801f0c8 <memcpy>
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e21b      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 800283a:	2306      	movs	r3, #6
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00e      	beq.n	8002862 <json_serialize_string+0x576>
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	461a      	mov	r2, r3
 8002848:	4913      	ldr	r1, [pc, #76]	; (8002898 <json_serialize_string+0x5ac>)
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f01c fc3c 	bl	801f0c8 <memcpy>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e202      	b.n	8002c72 <json_serialize_string+0x986>
 800286c:	08021cc0 	.word	0x08021cc0
 8002870:	08021cc4 	.word	0x08021cc4
 8002874:	08021ccc 	.word	0x08021ccc
 8002878:	08021cd4 	.word	0x08021cd4
 800287c:	08021cdc 	.word	0x08021cdc
 8002880:	08021ce4 	.word	0x08021ce4
 8002884:	08021cec 	.word	0x08021cec
 8002888:	08021cf4 	.word	0x08021cf4
 800288c:	08021cfc 	.word	0x08021cfc
 8002890:	08021d04 	.word	0x08021d04
 8002894:	08021d0c 	.word	0x08021d0c
 8002898:	08021d14 	.word	0x08021d14
            case '\x10': APPEND_STRING("\\u0010"); break;
 800289c:	2306      	movs	r3, #6
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <json_serialize_string+0x5d8>
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4992      	ldr	r1, [pc, #584]	; (8002af4 <json_serialize_string+0x808>)
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f01c fc0b 	bl	801f0c8 <memcpy>
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e1d1      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x11': APPEND_STRING("\\u0011"); break;
 80028ce:	2306      	movs	r3, #6
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <json_serialize_string+0x60a>
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	461a      	mov	r2, r3
 80028dc:	4986      	ldr	r1, [pc, #536]	; (8002af8 <json_serialize_string+0x80c>)
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f01c fbf2 	bl	801f0c8 <memcpy>
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e1b8      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x12': APPEND_STRING("\\u0012"); break;
 8002900:	2306      	movs	r3, #6
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00e      	beq.n	8002928 <json_serialize_string+0x63c>
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	461a      	mov	r2, r3
 800290e:	497b      	ldr	r1, [pc, #492]	; (8002afc <json_serialize_string+0x810>)
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f01c fbd9 	bl	801f0c8 <memcpy>
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e19f      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8002932:	2306      	movs	r3, #6
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00e      	beq.n	800295a <json_serialize_string+0x66e>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	461a      	mov	r2, r3
 8002940:	496f      	ldr	r1, [pc, #444]	; (8002b00 <json_serialize_string+0x814>)
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f01c fbc0 	bl	801f0c8 <memcpy>
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e186      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x14': APPEND_STRING("\\u0014"); break;
 8002964:	2306      	movs	r3, #6
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00e      	beq.n	800298c <json_serialize_string+0x6a0>
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	461a      	mov	r2, r3
 8002972:	4964      	ldr	r1, [pc, #400]	; (8002b04 <json_serialize_string+0x818>)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f01c fba7 	bl	801f0c8 <memcpy>
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e16d      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x15': APPEND_STRING("\\u0015"); break;
 8002996:	2306      	movs	r3, #6
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <json_serialize_string+0x6d2>
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4958      	ldr	r1, [pc, #352]	; (8002b08 <json_serialize_string+0x81c>)
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f01c fb8e 	bl	801f0c8 <memcpy>
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e154      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x16': APPEND_STRING("\\u0016"); break;
 80029c8:	2306      	movs	r3, #6
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00e      	beq.n	80029f0 <json_serialize_string+0x704>
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	461a      	mov	r2, r3
 80029d6:	494d      	ldr	r1, [pc, #308]	; (8002b0c <json_serialize_string+0x820>)
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f01c fb75 	bl	801f0c8 <memcpy>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e13b      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x17': APPEND_STRING("\\u0017"); break;
 80029fa:	2306      	movs	r3, #6
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <json_serialize_string+0x736>
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4941      	ldr	r1, [pc, #260]	; (8002b10 <json_serialize_string+0x824>)
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f01c fb5c 	bl	801f0c8 <memcpy>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	e122      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x18': APPEND_STRING("\\u0018"); break;
 8002a2c:	2306      	movs	r3, #6
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00e      	beq.n	8002a54 <json_serialize_string+0x768>
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4936      	ldr	r1, [pc, #216]	; (8002b14 <json_serialize_string+0x828>)
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f01c fb43 	bl	801f0c8 <memcpy>
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e109      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x19': APPEND_STRING("\\u0019"); break;
 8002a5e:	2306      	movs	r3, #6
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <json_serialize_string+0x79a>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	492a      	ldr	r1, [pc, #168]	; (8002b18 <json_serialize_string+0x82c>)
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f01c fb2a 	bl	801f0c8 <memcpy>
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	e0f0      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8002a90:	2306      	movs	r3, #6
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00e      	beq.n	8002ab8 <json_serialize_string+0x7cc>
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	491f      	ldr	r1, [pc, #124]	; (8002b1c <json_serialize_string+0x830>)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f01c fb11 	bl	801f0c8 <memcpy>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e0d7      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <json_serialize_string+0x7fe>
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4913      	ldr	r1, [pc, #76]	; (8002b20 <json_serialize_string+0x834>)
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f01c faf8 	bl	801f0c8 <memcpy>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	e0be      	b.n	8002c72 <json_serialize_string+0x986>
 8002af4:	08021d1c 	.word	0x08021d1c
 8002af8:	08021d24 	.word	0x08021d24
 8002afc:	08021d2c 	.word	0x08021d2c
 8002b00:	08021d34 	.word	0x08021d34
 8002b04:	08021d3c 	.word	0x08021d3c
 8002b08:	08021d44 	.word	0x08021d44
 8002b0c:	08021d4c 	.word	0x08021d4c
 8002b10:	08021d54 	.word	0x08021d54
 8002b14:	08021d5c 	.word	0x08021d5c
 8002b18:	08021d64 	.word	0x08021d64
 8002b1c:	08021d6c 	.word	0x08021d6c
 8002b20:	08021d74 	.word	0x08021d74
            case '\x1c': APPEND_STRING("\\u001c"); break;
 8002b24:	2306      	movs	r3, #6
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00e      	beq.n	8002b4c <json_serialize_string+0x860>
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4962      	ldr	r1, [pc, #392]	; (8002cbc <json_serialize_string+0x9d0>)
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f01c fac7 	bl	801f0c8 <memcpy>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e08d      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 8002b56:	2306      	movs	r3, #6
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00e      	beq.n	8002b7e <json_serialize_string+0x892>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4956      	ldr	r1, [pc, #344]	; (8002cc0 <json_serialize_string+0x9d4>)
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f01c faae 	bl	801f0c8 <memcpy>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	e074      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 8002b88:	2306      	movs	r3, #6
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <json_serialize_string+0x8c4>
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	461a      	mov	r2, r3
 8002b96:	494b      	ldr	r1, [pc, #300]	; (8002cc4 <json_serialize_string+0x9d8>)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f01c fa95 	bl	801f0c8 <memcpy>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	e05b      	b.n	8002c72 <json_serialize_string+0x986>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8002bba:	2306      	movs	r3, #6
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <json_serialize_string+0x8f6>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	493f      	ldr	r1, [pc, #252]	; (8002cc8 <json_serialize_string+0x9dc>)
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f01c fa7c 	bl	801f0c8 <memcpy>
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	e042      	b.n	8002c72 <json_serialize_string+0x986>
            case '/':
                if (parson_escape_slashes) {
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <json_serialize_string+0x9e0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d018      	beq.n	8002c26 <json_serialize_string+0x93a>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <json_serialize_string+0x930>
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4933      	ldr	r1, [pc, #204]	; (8002cd0 <json_serialize_string+0x9e4>)
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f01c fa5f 	bl	801f0c8 <memcpy>
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 8002c24:	e025      	b.n	8002c72 <json_serialize_string+0x986>
                    APPEND_STRING("/");
 8002c26:	2301      	movs	r3, #1
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <json_serialize_string+0x962>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4927      	ldr	r1, [pc, #156]	; (8002cd4 <json_serialize_string+0x9e8>)
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f01c fa46 	bl	801f0c8 <memcpy>
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4413      	add	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
                break;
 8002c56:	e00c      	b.n	8002c72 <json_serialize_string+0x986>
            default:
                if (buf != NULL) {
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <json_serialize_string+0x97e>
                    buf[0] = c;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7dfa      	ldrb	r2, [r7, #23]
 8002c62:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3301      	adds	r3, #1
 8002c68:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
                break;
 8002c70:	bf00      	nop
    for (i = 0; i < len; i++) {
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f4ff ab60 	bcc.w	8002342 <json_serialize_string+0x56>
        }
    }
    // +BCH
	//APPEND_STRING("\"");
	APPEND_STRING("\\\"");
 8002c82:	2302      	movs	r3, #2
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00e      	beq.n	8002caa <json_serialize_string+0x9be>
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4911      	ldr	r1, [pc, #68]	; (8002cd8 <json_serialize_string+0x9ec>)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f01c fa18 	bl	801f0c8 <memcpy>
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
    return written_total;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08021d7c 	.word	0x08021d7c
 8002cc0:	08021d84 	.word	0x08021d84
 8002cc4:	08021d8c 	.word	0x08021d8c
 8002cc8:	08021d94 	.word	0x08021d94
 8002ccc:	20000010 	.word	0x20000010
 8002cd0:	08021d9c 	.word	0x08021d9c
 8002cd4:	08021da0 	.word	0x08021da0
 8002cd8:	08021ca8 	.word	0x08021ca8

08002cdc <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <json_object_get_count+0x14>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	e000      	b.n	8002cf2 <json_object_get_count+0x16>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <json_object_get_name+0x1e>
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffe4 	bl	8002cdc <json_object_get_count>
 8002d14:	4602      	mov	r2, r0
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d301      	bcc.n	8002d20 <json_object_get_name+0x22>
        return NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e005      	b.n	8002d2c <json_object_get_name+0x2e>
    }
    return object->names[index];
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <json_object_get_value_at+0x1e>
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ffc9 	bl	8002cdc <json_object_get_count>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d301      	bcc.n	8002d56 <json_object_get_value_at+0x22>
        return NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e005      	b.n	8002d62 <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	681b      	ldr	r3, [r3, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
    if (!object) {
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <json_object_get_wrapping_value+0x12>
        return NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e001      	b.n	8002d80 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <json_array_get_value+0x1e>
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f810 	bl	8002dc2 <json_array_get_count>
 8002da2:	4602      	mov	r2, r0
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d301      	bcc.n	8002dae <json_array_get_value+0x22>
        return NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e005      	b.n	8002dba <json_array_get_value+0x2e>
    }
    return array->items[index];
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	681b      	ldr	r3, [r3, #0]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <json_array_get_count+0x14>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	e000      	b.n	8002dd8 <json_array_get_count+0x16>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <json_value_get_type>:
    }
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <json_value_get_type+0x14>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	e001      	b.n	8002dfc <json_value_get_type+0x18>
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ffe7 	bl	8002de4 <json_value_get_type>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d102      	bne.n	8002e22 <json_value_get_object+0x1a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	e000      	b.n	8002e24 <json_value_get_object+0x1c>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ffd5 	bl	8002de4 <json_value_get_type>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d102      	bne.n	8002e46 <json_value_get_array+0x1a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	e000      	b.n	8002e48 <json_value_get_array+0x1c>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ffc3 	bl	8002de4 <json_value_get_type>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d102      	bne.n	8002e6a <json_value_get_string_desc+0x1a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3308      	adds	r3, #8
 8002e68:	e000      	b.n	8002e6c <json_value_get_string_desc+0x1c>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ffe7 	bl	8002e50 <json_value_get_string_desc>
 8002e82:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <json_value_get_string+0x1c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e000      	b.n	8002e92 <json_value_get_string+0x1e>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffd4 	bl	8002e50 <json_value_get_string_desc>
 8002ea8:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <json_value_get_string_len+0x1c>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	e000      	b.n	8002eb8 <json_value_get_string_len+0x1e>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff8b 	bl	8002de4 <json_value_get_type>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d103      	bne.n	8002edc <json_value_get_number+0x1c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002eda:	e003      	b.n	8002ee4 <json_value_get_number+0x24>
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	ec43 2b17 	vmov	d7, r2, r3
}
 8002ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8002eec:	eef0 0a67 	vmov.f32	s1, s15
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ff70 	bl	8002de4 <json_value_get_type>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d102      	bne.n	8002f10 <json_value_get_boolean+0x1a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	e001      	b.n	8002f14 <json_value_get_boolean+0x1e>
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff5d 	bl	8002de4 <json_value_get_type>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d012      	beq.n	8002f56 <json_value_free+0x3a>
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	dc16      	bgt.n	8002f62 <json_value_free+0x46>
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d007      	beq.n	8002f48 <json_value_free+0x2c>
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d112      	bne.n	8002f62 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fe01 	bl	8001b48 <json_object_free>
            break;
 8002f46:	e00d      	b.n	8002f64 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <json_value_free+0x58>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6892      	ldr	r2, [r2, #8]
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
            break;
 8002f54:	e006      	b.n	8002f64 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fe08 	bl	8001b70 <json_array_free>
            break;
 8002f60:	e000      	b.n	8002f64 <json_value_free+0x48>
        default:
            break;
 8002f62:	bf00      	nop
    }
    parson_free(value);
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <json_value_free+0x58>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	2000000c 	.word	0x2000000c

08002f78 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <json_value_init_object+0x50>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2010      	movs	r0, #16
 8002f84:	4798      	blx	r3
 8002f86:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <json_value_init_object+0x1a>
        return NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e016      	b.n	8002fc0 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fb24 	bl	80015ec <json_object_make>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <json_value_init_object+0x46>
        parson_free(new_value);
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <json_value_init_object+0x54>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
        return NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <json_value_init_object+0x48>
    }
    return new_value;
 8002fbe:	687b      	ldr	r3, [r7, #4]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000008 	.word	0x20000008
 8002fcc:	2000000c 	.word	0x2000000c

08002fd0 <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 8002fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fe6:	f7fd fd79 	bl	8000adc <__aeabi_dcmpun>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d121      	bne.n	8003034 <json_value_init_number+0x64>
 8002ff0:	683c      	ldr	r4, [r7, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	461e      	mov	r6, r3
 8002ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <json_value_init_number+0x9c>)
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f7fd fd69 	bl	8000adc <__aeabi_dcmpun>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <json_value_init_number+0x58>
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <json_value_init_number+0x9c>)
 8003016:	4620      	mov	r0, r4
 8003018:	4629      	mov	r1, r5
 800301a:	f7fd fd41 	bl	8000aa0 <__aeabi_dcmple>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <json_value_init_number+0x58>
 8003024:	2300      	movs	r3, #0
 8003026:	461e      	mov	r6, r3
 8003028:	b2f3      	uxtb	r3, r6
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <json_value_init_number+0x68>
        return NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	e015      	b.n	8003064 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <json_value_init_number+0xa0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2010      	movs	r0, #16
 800303e:	4798      	blx	r3
 8003040:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <json_value_init_number+0x7c>
        return NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	e00b      	b.n	8003064 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2203      	movs	r2, #3
 8003056:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800305e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306c:	7fefffff 	.word	0x7fefffff
 8003070:	20000008 	.word	0x20000008

08003074 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b096      	sub	sp, #88	; 0x58
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fe fd99 	bl	8001bc0 <json_serialize_to_buffer_r>
 800308e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8003090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003092:	2b00      	cmp	r3, #0
 8003094:	db02      	blt.n	800309c <json_serialization_size+0x28>
 8003096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003098:	3301      	adds	r3, #1
 800309a:	e000      	b.n	800309e <json_serialization_size+0x2a>
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3750      	adds	r7, #80	; 0x50
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b088      	sub	sp, #32
 80030aa:	af02      	add	r7, sp, #8
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
    int written = -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff ffdb 	bl	8003074 <json_serialization_size>
 80030be:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <json_serialize_to_buffer+0x28>
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d202      	bcs.n	80030d4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	e00f      	b.n	80030f4 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2300      	movs	r3, #0
 80030da:	2200      	movs	r2, #0
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7fe fd6e 	bl	8001bc0 <json_serialize_to_buffer_r>
 80030e4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da02      	bge.n	80030f2 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	e000      	b.n	80030f4 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ffb2 	bl	8003074 <json_serialization_size>
 8003110:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <json_serialize_to_string+0x24>
        return NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	e018      	b.n	8003152 <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <json_serialize_to_string+0x60>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6938      	ldr	r0, [r7, #16]
 8003126:	4798      	blx	r3
 8003128:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <json_serialize_to_string+0x38>
        return NULL;
 8003130:	2300      	movs	r3, #0
 8003132:	e00e      	b.n	8003152 <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffb4 	bl	80030a6 <json_serialize_to_buffer>
 800313e:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f80a 	bl	8003160 <json_free_serialized_string>
        return NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <json_serialize_to_string+0x56>
    }
    return buf;
 8003150:	68fb      	ldr	r3, [r7, #12]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000008 	.word	0x20000008

08003160 <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <json_free_serialized_string+0x18>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000000c 	.word	0x2000000c

0800317c <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	; 0x38
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <json_object_set_value+0x3e>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <json_object_set_value+0x3e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <json_object_set_value+0x3e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <json_object_set_value+0x44>
        return JSONFailure;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	e095      	b.n	80032ec <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 80031c0:	68b8      	ldr	r0, [r7, #8]
 80031c2:	f7fc ffdd 	bl	8000180 <strlen>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4619      	mov	r1, r3
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	f7fe f9e1 	bl	8001592 <hash_string>
 80031d0:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80031d6:	68b8      	ldr	r0, [r7, #8]
 80031d8:	f7fc ffd2 	bl	8000180 <strlen>
 80031dc:	4602      	mov	r2, r0
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7fe fbb4 	bl	8001956 <json_object_get_cell_ix>
 80031ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01f      	beq.n	8003236 <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 8003212:	6a38      	ldr	r0, [r7, #32]
 8003214:	f7ff fe82 	bl	8002f1c <json_value_free>
        object->values[item_ix] = value;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f7ff fd9f 	bl	8002d6a <json_object_get_wrapping_value>
 800322c:	4602      	mov	r2, r0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 8003232:	2300      	movs	r3, #0
 8003234:	e05a      	b.n	80032ec <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	429a      	cmp	r2, r3
 8003240:	d316      	bcc.n	8003270 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7fe fb1c 	bl	8001880 <json_object_grow_and_rehash>
 8003248:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <json_object_set_value+0xda>
            return JSONFailure;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	e04a      	b.n	80032ec <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f7fc ff92 	bl	8000180 <strlen>
 800325c:	4602      	mov	r2, r0
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7fe fb74 	bl	8001956 <json_object_get_cell_ix>
 800326e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 8003270:	68b8      	ldr	r0, [r7, #8]
 8003272:	f7fe f97d 	bl	8001570 <parson_strdup>
 8003276:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <json_object_set_value+0x108>
        return JSONFailure;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	e033      	b.n	80032ec <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	6992      	ldr	r2, [r2, #24]
 80032a2:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c2:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d2:	601a      	str	r2, [r3, #0]
    object->count++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff fd43 	bl	8002d6a <json_object_get_wrapping_value>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3730      	adds	r7, #48	; 0x30
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 8003302:	ed97 0b00 	vldr	d0, [r7]
 8003306:	f7ff fe63 	bl	8002fd0 <json_value_init_number>
 800330a:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff ff33 	bl	800317c <json_object_set_value>
 8003316:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <json_object_set_number+0x30>
        json_value_free(value);
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff fdfc 	bl	8002f1c <json_value_free>
    }
    return status;
 8003324:	693b      	ldr	r3, [r7, #16]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <NMI_Handler+0x4>

08003342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <MemManage_Handler+0x4>

0800334e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003352:	e7fe      	b.n	8003352 <BusFault_Handler+0x4>

08003354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <UsageFault_Handler+0x4>

0800335a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003388:	f014 fdcc 	bl	8017f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}

08003390 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003394:	2001      	movs	r0, #1
 8003396:	f015 fcef 	bl	8018d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}

0800339e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033a2:	2010      	movs	r0, #16
 80033a4:	f015 fce8 	bl	8018d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}

080033ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <DMA1_Channel1_IRQHandler+0x10>)
 80033b2:	f015 f8f8 	bl	80185a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000041c 	.word	0x2000041c

080033c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET)) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d039      	beq.n	800345a <LPUART1_IRQHandler+0x9a>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2210      	movs	r2, #16
 80033ec:	621a      	str	r2, [r3, #32]
		temp = hlpuart1.Instance->ISR;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	603b      	str	r3, [r7, #0]
		temp = hlpuart1.Instance->RDR;
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	603b      	str	r3, [r7, #0]
		//HAL_UART_DMAStop(&hlpuart1);
		temp = hlpuart1.hdmarx->Instance->CNDTR;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	603b      	str	r3, [r7, #0]
		// reset index dma buffer to 1024 (countdown)
		__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 800340c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 8003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
		hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 8003424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800342e:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 800343c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
		UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	425b      	negs	r3, r3
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <LPUART1_IRQHandler+0xac>)
 8003452:	701a      	strb	r2, [r3, #0]
		UART_ESP32_RecvEndFlag = 1;
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <LPUART1_IRQHandler+0xb0>)
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800345a:	4803      	ldr	r0, [pc, #12]	; (8003468 <LPUART1_IRQHandler+0xa8>)
 800345c:	f018 fdee 	bl	801c03c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000388 	.word	0x20000388
 800346c:	2000996c 	.word	0x2000996c
 8003470:	2000996d 	.word	0x2000996d

08003474 <LL_AHB2_GRP1_EnableClock>:
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4313      	orrs	r3, r2
 800348a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003498:	68fb      	ldr	r3, [r7, #12]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <LL_APB1_GRP1_EnableClock>:
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4013      	ands	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_APB1_GRP1_DisableClock>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ee:	4013      	ands	r3, r2
 80034f0:	658b      	str	r3, [r1, #88]	; 0x58
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <BSP_I2C1_Init+0x70>)
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <BSP_I2C1_Init+0x74>)
 800350e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <BSP_I2C1_Init+0x78>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	4918      	ldr	r1, [pc, #96]	; (8003578 <BSP_I2C1_Init+0x78>)
 8003518:	600a      	str	r2, [r1, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d122      	bne.n	8003564 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800351e:	4814      	ldr	r0, [pc, #80]	; (8003570 <BSP_I2C1_Init+0x70>)
 8003520:	f016 f90b 	bl	801973a <HAL_I2C_GetState>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11c      	bne.n	8003564 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800352a:	4811      	ldr	r0, [pc, #68]	; (8003570 <BSP_I2C1_Init+0x70>)
 800352c:	f000 f8ee 	bl	800370c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003536:	480e      	ldr	r0, [pc, #56]	; (8003570 <BSP_I2C1_Init+0x70>)
 8003538:	f000 f8a4 	bl	8003684 <MX_I2C1_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003542:	f06f 0307 	mvn.w	r3, #7
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	e00c      	b.n	8003564 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800354a:	2100      	movs	r1, #0
 800354c:	4808      	ldr	r0, [pc, #32]	; (8003570 <BSP_I2C1_Init+0x70>)
 800354e:	f016 fbf5 	bl	8019d3c <HAL_I2CEx_ConfigAnalogFilter>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003558:	f06f 0307 	mvn.w	r3, #7
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	e001      	b.n	8003564 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003564:	687b      	ldr	r3, [r7, #4]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200002e0 	.word	0x200002e0
 8003574:	40005400 	.word	0x40005400
 8003578:	20000334 	.word	0x20000334

0800357c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <BSP_I2C1_DeInit+0x48>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d014      	beq.n	80035b8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <BSP_I2C1_DeInit+0x48>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3b01      	subs	r3, #1
 8003594:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <BSP_I2C1_DeInit+0x48>)
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <BSP_I2C1_DeInit+0x48>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80035a0:	4809      	ldr	r0, [pc, #36]	; (80035c8 <BSP_I2C1_DeInit+0x4c>)
 80035a2:	f000 f8f7 	bl	8003794 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80035a6:	4808      	ldr	r0, [pc, #32]	; (80035c8 <BSP_I2C1_DeInit+0x4c>)
 80035a8:	f015 fc8d 	bl	8018ec6 <HAL_I2C_DeInit>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80035b2:	f06f 0307 	mvn.w	r3, #7
 80035b6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80035b8:	687b      	ldr	r3, [r7, #4]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000334 	.word	0x20000334
 80035c8:	200002e0 	.word	0x200002e0

080035cc <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	4603      	mov	r3, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	80fb      	strh	r3, [r7, #6]
 80035d8:	4613      	mov	r3, r2
 80035da:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80035e0:	88bb      	ldrh	r3, [r7, #4]
 80035e2:	88f9      	ldrh	r1, [r7, #6]
 80035e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	480b      	ldr	r0, [pc, #44]	; (800361c <BSP_I2C1_Send+0x50>)
 80035ee:	f015 fc99 	bl	8018f24 <HAL_I2C_Master_Transmit>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80035f8:	4808      	ldr	r0, [pc, #32]	; (800361c <BSP_I2C1_Send+0x50>)
 80035fa:	f016 f8ac 	bl	8019756 <HAL_I2C_GetError>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b04      	cmp	r3, #4
 8003602:	d003      	beq.n	800360c <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003604:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	e002      	b.n	8003612 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800360c:	f06f 0303 	mvn.w	r3, #3
 8003610:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	200002e0 	.word	0x200002e0

08003620 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	80fb      	strh	r3, [r7, #6]
 800362c:	4613      	mov	r3, r2
 800362e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003634:	88bb      	ldrh	r3, [r7, #4]
 8003636:	88f9      	ldrh	r1, [r7, #6]
 8003638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800363c:	9200      	str	r2, [sp, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	480b      	ldr	r0, [pc, #44]	; (8003670 <BSP_I2C1_Recv+0x50>)
 8003642:	f015 fd63 	bl	801910c <HAL_I2C_Master_Receive>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800364c:	4808      	ldr	r0, [pc, #32]	; (8003670 <BSP_I2C1_Recv+0x50>)
 800364e:	f016 f882 	bl	8019756 <HAL_I2C_GetError>
 8003652:	4603      	mov	r3, r0
 8003654:	2b04      	cmp	r3, #4
 8003656:	d003      	beq.n	8003660 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003658:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e002      	b.n	8003666 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003660:	f06f 0303 	mvn.w	r3, #3
 8003664:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200002e0 	.word	0x200002e0

08003674 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003678:	f014 fc68 	bl	8017f4c <HAL_GetTick>
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <MX_I2C1_Init+0x80>)
 8003694:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <MX_I2C1_Init+0x84>)
 800369a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f015 fb6e 	bl	8018da8 <HAL_I2C_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036d6:	2100      	movs	r1, #0
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f016 fb2f 	bl	8019d3c <HAL_I2CEx_ConfigAnalogFilter>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80036e8:	2100      	movs	r1, #0
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f016 fb71 	bl	8019dd2 <HAL_I2CEx_ConfigDigitalFilter>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40005400 	.word	0x40005400
 8003708:	00707cbb 	.word	0x00707cbb

0800370c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b09c      	sub	sp, #112	; 0x70
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	2250      	movs	r2, #80	; 0x50
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f01b fcfb 	bl	801f118 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003722:	2304      	movs	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003726:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800372c:	f107 030c 	add.w	r3, r7, #12
 8003730:	4618      	mov	r0, r3
 8003732:	f017 fff1 	bl	801b718 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	2002      	movs	r0, #2
 8003738:	f7ff fe9c 	bl	8003474 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800373c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003740:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003742:	2312      	movs	r3, #18
 8003744:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374a:	2300      	movs	r3, #0
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800374e:	2304      	movs	r3, #4
 8003750:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003752:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003756:	4619      	mov	r1, r3
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <I2C1_MspInit+0x84>)
 800375a:	f015 f875 	bl	8018848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800375e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003762:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003764:	2312      	movs	r3, #18
 8003766:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003770:	2304      	movs	r3, #4
 8003772:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003774:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003778:	4619      	mov	r1, r3
 800377a:	4805      	ldr	r0, [pc, #20]	; (8003790 <I2C1_MspInit+0x84>)
 800377c:	f015 f864 	bl	8018848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003780:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003784:	f7ff fe8f 	bl	80034a6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003788:	bf00      	nop
 800378a:	3770      	adds	r7, #112	; 0x70
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	48000400 	.word	0x48000400

08003794 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800379c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80037a0:	f7ff fe9a 	bl	80034d8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80037a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a8:	4805      	ldr	r0, [pc, #20]	; (80037c0 <I2C1_MspDeInit+0x2c>)
 80037aa:	f015 f9bd 	bl	8018b28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80037ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037b2:	4803      	ldr	r0, [pc, #12]	; (80037c0 <I2C1_MspDeInit+0x2c>)
 80037b4:	f015 f9b8 	bl	8018b28 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	48000400 	.word	0x48000400

080037c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return 1;
 80037c8:	2301      	movs	r3, #1
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <_kill>:

int _kill(int pid, int sig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037de:	f01b fa19 	bl	801ec14 <__errno>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2216      	movs	r2, #22
 80037e6:	601a      	str	r2, [r3, #0]
  return -1;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_exit>:

void _exit (int status)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ffe7 	bl	80037d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003806:	e7fe      	b.n	8003806 <_exit+0x12>

08003808 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e00a      	b.n	8003830 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800381a:	f3af 8000 	nop.w
 800381e:	4601      	mov	r1, r0
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	60ba      	str	r2, [r7, #8]
 8003826:	b2ca      	uxtb	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	3301      	adds	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	dbf0      	blt.n	800381a <_read+0x12>
  }

  return len;
 8003838:	687b      	ldr	r3, [r7, #4]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800386a:	605a      	str	r2, [r3, #4]
  return 0;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <_isatty>:

int _isatty(int file)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003882:	2301      	movs	r3, #1
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <_sbrk+0x5c>)
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <_sbrk+0x60>)
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <_sbrk+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <_sbrk+0x64>)
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <_sbrk+0x68>)
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <_sbrk+0x64>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d207      	bcs.n	80038ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038dc:	f01b f99a 	bl	801ec14 <__errno>
 80038e0:	4603      	mov	r3, r0
 80038e2:	220c      	movs	r2, #12
 80038e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	e009      	b.n	8003900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <_sbrk+0x64>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <_sbrk+0x64>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <_sbrk+0x64>)
 80038fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20030000 	.word	0x20030000
 800390c:	00000400 	.word	0x00000400
 8003910:	20000338 	.word	0x20000338
 8003914:	200099c0 	.word	0x200099c0

08003918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <SystemInit+0x98>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <SystemInit+0x98>)
 8003924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800393c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003940:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003944:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003950:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <SystemInit+0x9c>)
 8003952:	4013      	ands	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003962:	f023 0305 	bic.w	r3, r3, #5
 8003966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <SystemInit+0xa0>)
 8003984:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <SystemInit+0xa0>)
 800398c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00
 80039b4:	faf6fefb 	.word	0xfaf6fefb
 80039b8:	22041000 	.word	0x22041000

080039bc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039e0:	68fb      	ldr	r3, [r7, #12]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <MX_TIM17_Init+0x48>)
 80039f6:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <MX_TIM17_Init+0x4c>)
 80039f8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <MX_TIM17_Init+0x48>)
 80039fc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003a00:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <MX_TIM17_Init+0x48>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 30000;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <MX_TIM17_Init+0x48>)
 8003a0a:	f247 5230 	movw	r2, #30000	; 0x7530
 8003a0e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <MX_TIM17_Init+0x48>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <MX_TIM17_Init+0x48>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_TIM17_Init+0x48>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_TIM17_Init+0x48>)
 8003a24:	f018 f905 	bl	801bc32 <HAL_TIM_Base_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8003a2e:	f7fd fd59 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000033c 	.word	0x2000033c
 8003a3c:	40014800 	.word	0x40014800

08003a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <HAL_TIM_Base_MspInit+0x24>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d103      	bne.n	8003a5a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a52:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003a56:	f7ff ffb1 	bl	80039bc <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40014800 	.word	0x40014800

08003a68 <LL_AHB2_GRP1_EnableClock>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_APB1_GRP2_EnableClock>:
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4013      	ands	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <MX_LPUART1_UART_Init+0xb0>)
 8003ad4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003adc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003aea:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003af0:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003af2:	220c      	movs	r2, #12
 8003af4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003afc:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003b14:	4818      	ldr	r0, [pc, #96]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b16:	f018 f967 	bl	801bde8 <HAL_UART_Init>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b20:	f7fd fce0 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b24:	2100      	movs	r1, #0
 8003b26:	4814      	ldr	r0, [pc, #80]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b28:	f019 fc8c 	bl	801d444 <HAL_UARTEx_SetTxFifoThreshold>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b32:	f7fd fcd7 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b36:	2100      	movs	r1, #0
 8003b38:	480f      	ldr	r0, [pc, #60]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b3a:	f019 fcc1 	bl	801d4c0 <HAL_UARTEx_SetRxFifoThreshold>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b44:	f7fd fcce 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b4a:	f019 fc42 	bl	801d3d2 <HAL_UARTEx_DisableFifoMode>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b54:	f7fd fcc6 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0210 	orr.w	r2, r2, #16
 8003b66:	601a      	str	r2, [r3, #0]
      	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8003b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b6c:	4904      	ldr	r1, [pc, #16]	; (8003b80 <MX_LPUART1_UART_Init+0xb4>)
 8003b6e:	4802      	ldr	r0, [pc, #8]	; (8003b78 <MX_LPUART1_UART_Init+0xac>)
 8003b70:	f018 fa18 	bl	801bfa4 <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000388 	.word	0x20000388
 8003b7c:	40008000 	.word	0x40008000
 8003b80:	2000916c 	.word	0x2000916c

08003b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b09c      	sub	sp, #112	; 0x70
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	2250      	movs	r2, #80	; 0x50
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f01b fab7 	bl	801f118 <memset>
  if(uartHandle->Instance==LPUART1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <HAL_UART_MspInit+0xe4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d155      	bne.n	8003c60 <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bbc:	f107 030c 	add.w	r3, r7, #12
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f017 fda9 	bl	801b718 <HAL_RCCEx_PeriphCLKConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bcc:	f7fd fc8a 	bl	80014e4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	f7ff ff62 	bl	8003a9a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd6:	2004      	movs	r0, #4
 8003bd8:	f7ff ff46 	bl	8003a68 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be0:	2302      	movs	r3, #2
 8003be2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be8:	2300      	movs	r3, #0
 8003bea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003bec:	2308      	movs	r3, #8
 8003bee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	481d      	ldr	r0, [pc, #116]	; (8003c6c <HAL_UART_MspInit+0xe8>)
 8003bf8:	f014 fe26 	bl	8018848 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <HAL_UART_MspInit+0xf0>)
 8003c00:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003c02:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c04:	2210      	movs	r2, #16
 8003c06:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003c32:	480f      	ldr	r0, [pc, #60]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c34:	f014 fad6 	bl	80181e4 <HAL_DMA_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8003c3e:	f7fd fc51 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <HAL_UART_MspInit+0xec>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	2025      	movs	r0, #37	; 0x25
 8003c56:	f014 fa90 	bl	801817a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003c5a:	2025      	movs	r0, #37	; 0x25
 8003c5c:	f014 faa7 	bl	80181ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003c60:	bf00      	nop
 8003c62:	3770      	adds	r7, #112	; 0x70
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40008000 	.word	0x40008000
 8003c6c:	48000800 	.word	0x48000800
 8003c70:	2000041c 	.word	0x2000041c
 8003c74:	40020008 	.word	0x40020008

08003c78 <LL_AHB2_GRP1_EnableClock>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_APB1_GRP1_EnableClock>:
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003ce2:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <MX_USB_PCD_Init+0x4c>)
 8003ce4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003ce8:	2208      	movs	r2, #8
 8003cea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003cee:	2202      	movs	r2, #2
 8003cf0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003d10:	4804      	ldr	r0, [pc, #16]	; (8003d24 <MX_USB_PCD_Init+0x48>)
 8003d12:	f016 f8aa 	bl	8019e6a <HAL_PCD_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003d1c:	f7fd fbe2 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	2000047c 	.word	0x2000047c
 8003d28:	40006800 	.word	0x40006800

08003d2c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b09c      	sub	sp, #112	; 0x70
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	2250      	movs	r2, #80	; 0x50
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f01b f9e3 	bl	801f118 <memset>
  if(pcdHandle->Instance==USB)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <HAL_PCD_MspInit+0xa8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d136      	bne.n	8003dca <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d60:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8003d62:	2318      	movs	r3, #24
 8003d64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003d72:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003d76:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003d7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d82:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f017 fcc5 	bl	801b718 <HAL_RCCEx_PeriphCLKConfig>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8003d94:	f7fd fba6 	bl	80014e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7ff ff6d 	bl	8003c78 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003d9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003da2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da4:	2302      	movs	r3, #2
 8003da6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dac:	2300      	movs	r3, #0
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003db0:	230a      	movs	r3, #10
 8003db2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003db8:	4619      	mov	r1, r3
 8003dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dbe:	f014 fd43 	bl	8018848 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003dc2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003dc6:	f7ff ff70 	bl	8003caa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3770      	adds	r7, #112	; 0x70
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40006800 	.word	0x40006800

08003dd8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003dd8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dda:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ddc:	3304      	adds	r3, #4

08003dde <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dde:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003de2:	d3f9      	bcc.n	8003dd8 <CopyDataInit>
  bx lr
 8003de4:	4770      	bx	lr

08003de6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003de6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003de8:	3004      	adds	r0, #4

08003dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003dea:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003dec:	d3fb      	bcc.n	8003de6 <FillZerobss>
  bx lr
 8003dee:	4770      	bx	lr

08003df0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003df0:	480c      	ldr	r0, [pc, #48]	; (8003e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003df2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003df4:	f7ff fd90 	bl	8003918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003df8:	480b      	ldr	r0, [pc, #44]	; (8003e28 <LoopForever+0x6>)
 8003dfa:	490c      	ldr	r1, [pc, #48]	; (8003e2c <LoopForever+0xa>)
 8003dfc:	4a0c      	ldr	r2, [pc, #48]	; (8003e30 <LoopForever+0xe>)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f7ff ffed 	bl	8003dde <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003e04:	480b      	ldr	r0, [pc, #44]	; (8003e34 <LoopForever+0x12>)
 8003e06:	490c      	ldr	r1, [pc, #48]	; (8003e38 <LoopForever+0x16>)
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <LoopForever+0x1a>)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f7ff ffe7 	bl	8003dde <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <LoopForever+0x1e>)
 8003e12:	490c      	ldr	r1, [pc, #48]	; (8003e44 <LoopForever+0x22>)
 8003e14:	2300      	movs	r3, #0
 8003e16:	f7ff ffe8 	bl	8003dea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e1a:	f01b f8b9 	bl	801ef90 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003e1e:	f7fd fa6a 	bl	80012f6 <main>

08003e22 <LoopForever>:

LoopForever:
  b LoopForever
 8003e22:	e7fe      	b.n	8003e22 <LoopForever>
  ldr   r0, =_estack
 8003e24:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	2000025c 	.word	0x2000025c
 8003e30:	08022de4 	.word	0x08022de4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003e34:	20030000 	.word	0x20030000
 8003e38:	20030000 	.word	0x20030000
 8003e3c:	08023038 	.word	0x08023038
  INIT_BSS _sbss, _ebss
 8003e40:	20000260 	.word	0x20000260
 8003e44:	200099bc 	.word	0x200099bc

08003e48 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC1_IRQHandler>

08003e4a <LL_AHB2_GRP1_EnableClock>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8003e86:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <VL53L1A2_Init+0xe4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	4934      	ldr	r1, [pc, #208]	; (8003f60 <VL53L1A2_Init+0xe4>)
 8003e8e:	600a      	str	r2, [r1, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d154      	bne.n	8003f3e <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8003e94:	f000 f8d4 	bl	8004040 <_I2cFailRecover>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 8003ea0:	f7ff fb2e 	bl	8003500 <BSP_I2C1_Init>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d147      	bne.n	8003f42 <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8003eb2:	463a      	mov	r2, r7
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	2086      	movs	r0, #134	; 0x86
 8003eba:	f000 f953 	bl	8004164 <_ExpanderRd>
 8003ebe:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d13f      	bne.n	8003f46 <VL53L1A2_Init+0xca>
 8003ec6:	783b      	ldrb	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d13c      	bne.n	8003f46 <VL53L1A2_Init+0xca>
 8003ecc:	787b      	ldrb	r3, [r7, #1]
 8003ece:	2b16      	cmp	r3, #22
 8003ed0:	d139      	bne.n	8003f46 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8003ed2:	463a      	mov	r2, r7
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2084      	movs	r0, #132	; 0x84
 8003eda:	f000 f943 	bl	8004164 <_ExpanderRd>
 8003ede:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d131      	bne.n	8003f4a <VL53L1A2_Init+0xce>
 8003ee6:	783b      	ldrb	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d12e      	bne.n	8003f4a <VL53L1A2_Init+0xce>
 8003eec:	787b      	ldrb	r3, [r7, #1]
 8003eee:	2b16      	cmp	r3, #22
 8003ef0:	d12b      	bne.n	8003f4a <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <VL53L1A2_Init+0xe8>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8003ef8:	23ff      	movs	r3, #255	; 0xff
 8003efa:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8003efc:	23ff      	movs	r3, #255	; 0xff
 8003efe:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8003f00:	463a      	mov	r2, r7
 8003f02:	2302      	movs	r3, #2
 8003f04:	2114      	movs	r1, #20
 8003f06:	2086      	movs	r0, #134	; 0x86
 8003f08:	f000 f95e 	bl	80041c8 <_ExpanderWR>
 8003f0c:	6078      	str	r0, [r7, #4]

	  if (status)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d11c      	bne.n	8003f4e <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8003f14:	23ff      	movs	r3, #255	; 0xff
 8003f16:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8003f18:	23bf      	movs	r3, #191	; 0xbf
 8003f1a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8003f1c:	463a      	mov	r2, r7
 8003f1e:	2302      	movs	r3, #2
 8003f20:	2114      	movs	r1, #20
 8003f22:	2084      	movs	r0, #132	; 0x84
 8003f24:	f000 f950 	bl	80041c8 <_ExpanderWR>
 8003f28:	6078      	str	r0, [r7, #4]

	  if (status)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d110      	bne.n	8003f52 <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <VL53L1A2_Init+0xe8>)
 8003f32:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8003f36:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8003f38:	f000 f8f4 	bl	8004124 <_ExpandersSetAllIO>
 8003f3c:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8003f3e:	bf00      	nop
 8003f40:	e008      	b.n	8003f54 <VL53L1A2_Init+0xd8>
      goto done_err;
 8003f42:	bf00      	nop
 8003f44:	e006      	b.n	8003f54 <VL53L1A2_Init+0xd8>
      goto done_err;
 8003f46:	bf00      	nop
 8003f48:	e004      	b.n	8003f54 <VL53L1A2_Init+0xd8>
		  goto done_err;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <VL53L1A2_Init+0xd8>
		goto done_err;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <VL53L1A2_Init+0xd8>
		goto done_err;
 8003f52:	bf00      	nop
  return status;
 8003f54:	687b      	ldr	r3, [r7, #4]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000770 	.word	0x20000770
 8003f64:	20000774 	.word	0x20000774

08003f68 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460a      	mov	r2, r1
 8003f72:	71fb      	strb	r3, [r7, #7]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d037      	beq.n	8003fee <VL53L1A2_ResetId+0x86>
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	dc4e      	bgt.n	8004020 <VL53L1A2_ResetId+0xb8>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01a      	beq.n	8003fbc <VL53L1A2_ResetId+0x54>
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d14a      	bne.n	8004020 <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8003f8a:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003f8c:	78db      	ldrb	r3, [r3, #3]
 8003f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003f96:	70da      	strb	r2, [r3, #3]

      if (state)
 8003f98:	79bb      	ldrb	r3, [r7, #6]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d006      	beq.n	8003fac <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8003f9e:	4b25      	ldr	r3, [pc, #148]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003fa0:	78db      	ldrb	r3, [r3, #3]
 8003fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b22      	ldr	r3, [pc, #136]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003faa:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8003fac:	2301      	movs	r3, #1
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <VL53L1A2_ResetId+0xd0>)
 8003fb0:	2113      	movs	r1, #19
 8003fb2:	2084      	movs	r0, #132	; 0x84
 8003fb4:	f000 f908 	bl	80041c8 <_ExpanderWR>
 8003fb8:	60f8      	str	r0, [r7, #12]
      break;
 8003fba:	e035      	b.n	8004028 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003fc8:	705a      	strb	r2, [r3, #1]

      if (state)
 8003fca:	79bb      	ldrb	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d006      	beq.n	8003fde <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8003fd0:	4b18      	ldr	r3, [pc, #96]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	4b16      	ldr	r3, [pc, #88]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003fdc:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <VL53L1A2_ResetId+0xd4>)
 8003fe2:	2113      	movs	r1, #19
 8003fe4:	2086      	movs	r0, #134	; 0x86
 8003fe6:	f000 f8ef 	bl	80041c8 <_ExpanderWR>
 8003fea:	60f8      	str	r0, [r7, #12]
      break;
 8003fec:	e01c      	b.n	8004028 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8003ffa:	705a      	strb	r2, [r3, #1]

      if (state)
 8003ffc:	79bb      	ldrb	r3, [r7, #6]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800400a:	b2da      	uxtb	r2, r3
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <VL53L1A2_ResetId+0xcc>)
 800400e:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8004010:	2301      	movs	r3, #1
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <VL53L1A2_ResetId+0xd4>)
 8004014:	2113      	movs	r1, #19
 8004016:	2086      	movs	r0, #134	; 0x86
 8004018:	f000 f8d6 	bl	80041c8 <_ExpanderWR>
 800401c:	60f8      	str	r0, [r7, #12]
      break;
 800401e:	e003      	b.n	8004028 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	60fb      	str	r3, [r7, #12]
      goto done;
 8004026:	e000      	b.n	800402a <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8004028:	bf00      	nop
  return status;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000774 	.word	0x20000774
 8004038:	20000777 	.word	0x20000777
 800403c:	20000775 	.word	0x20000775

08004040 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <_I2cFailRecover+0xdc>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8004052:	2300      	movs	r3, #0
 8004054:	e05e      	b.n	8004114 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	2002      	movs	r0, #2
 8004058:	f7ff fef7 	bl	8003e4a <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 800405c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004060:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004062:	2311      	movs	r3, #17
 8004064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004066:	2301      	movs	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 800406a:	463b      	mov	r3, r7
 800406c:	4619      	mov	r1, r3
 800406e:	482c      	ldr	r0, [pc, #176]	; (8004120 <_I2cFailRecover+0xe0>)
 8004070:	f014 fbea 	bl	8018848 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8004074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004078:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800407a:	2311      	movs	r3, #17
 800407c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800407e:	2301      	movs	r3, #1
 8004080:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004082:	463b      	mov	r3, r7
 8004084:	4619      	mov	r1, r3
 8004086:	4826      	ldr	r0, [pc, #152]	; (8004120 <_I2cFailRecover+0xe0>)
 8004088:	f014 fbde 	bl	8018848 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800408c:	2201      	movs	r2, #1
 800408e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004092:	4823      	ldr	r0, [pc, #140]	; (8004120 <_I2cFailRecover+0xe0>)
 8004094:	f014 fe3e 	bl	8018d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8004098:	2201      	movs	r2, #1
 800409a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800409e:	4820      	ldr	r0, [pc, #128]	; (8004120 <_I2cFailRecover+0xe0>)
 80040a0:	f014 fe38 	bl	8018d14 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
 80040a8:	e014      	b.n	80040d4 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040b0:	481b      	ldr	r0, [pc, #108]	; (8004120 <_I2cFailRecover+0xe0>)
 80040b2:	f014 fe2f 	bl	8018d14 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80040b6:	2001      	movs	r0, #1
 80040b8:	f013 ff60 	bl	8017f7c <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80040bc:	2201      	movs	r2, #1
 80040be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c2:	4817      	ldr	r0, [pc, #92]	; (8004120 <_I2cFailRecover+0xe0>)
 80040c4:	f014 fe26 	bl	8018d14 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80040c8:	2001      	movs	r0, #1
 80040ca:	f013 ff57 	bl	8017f7c <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	3301      	adds	r3, #1
 80040d2:	75fb      	strb	r3, [r7, #23]
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	2b09      	cmp	r3, #9
 80040d8:	d9e7      	bls.n	80040aa <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 80040da:	7dbb      	ldrb	r3, [r7, #22]
 80040dc:	3301      	adds	r3, #1
 80040de:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80040e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040e4:	480e      	ldr	r0, [pc, #56]	; (8004120 <_I2cFailRecover+0xe0>)
 80040e6:	f014 fdfd 	bl	8018ce4 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <_I2cFailRecover+0xb6>
 80040f0:	7dbb      	ldrb	r3, [r7, #22]
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d9d6      	bls.n	80040a4 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80040f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040fa:	4809      	ldr	r0, [pc, #36]	; (8004120 <_I2cFailRecover+0xe0>)
 80040fc:	f014 fdf2 	bl	8018ce4 <HAL_GPIO_ReadPin>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d102      	bne.n	800410c <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8004106:	f06f 0304 	mvn.w	r3, #4
 800410a:	e003      	b.n	8004114 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <_I2cFailRecover+0xdc>)
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000778 	.word	0x20000778
 8004120:	48000400 	.word	0x48000400

08004124 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800412a:	2302      	movs	r3, #2
 800412c:	4a0b      	ldr	r2, [pc, #44]	; (800415c <_ExpandersSetAllIO+0x38>)
 800412e:	2112      	movs	r1, #18
 8004130:	2086      	movs	r0, #134	; 0x86
 8004132:	f000 f849 	bl	80041c8 <_ExpanderWR>
 8004136:	6078      	str	r0, [r7, #4]

  if (status)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d107      	bne.n	800414e <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800413e:	2302      	movs	r3, #2
 8004140:	4a07      	ldr	r2, [pc, #28]	; (8004160 <_ExpandersSetAllIO+0x3c>)
 8004142:	2112      	movs	r1, #18
 8004144:	2084      	movs	r0, #132	; 0x84
 8004146:	f000 f83f 	bl	80041c8 <_ExpanderWR>
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	e000      	b.n	8004150 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800414e:	bf00      	nop

done_err:
  return status;
 8004150:	687b      	ldr	r3, [r7, #4]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000774 	.word	0x20000774
 8004160:	20000776 	.word	0x20000776

08004164 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	b299      	uxth	r1, r3
 800417c:	f107 0213 	add.w	r2, r7, #19
 8004180:	2364      	movs	r3, #100	; 0x64
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	2301      	movs	r3, #1
 8004186:	480f      	ldr	r0, [pc, #60]	; (80041c4 <_ExpanderRd+0x60>)
 8004188:	f014 fecc 	bl	8018f24 <HAL_I2C_Master_Transmit>
 800418c:	4603      	mov	r3, r0
 800418e:	617b      	str	r3, [r7, #20]

    if (status)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d110      	bne.n	80041b8 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	b299      	uxth	r1, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b29a      	uxth	r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2064      	movs	r0, #100	; 0x64
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4805      	ldr	r0, [pc, #20]	; (80041c4 <_ExpanderRd+0x60>)
 80041ae:	f014 ffad 	bl	801910c <HAL_I2C_Master_Receive>
 80041b2:	4603      	mov	r3, r0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e000      	b.n	80041ba <_ExpanderRd+0x56>
      break;
 80041b8:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 80041ba:	697b      	ldr	r3, [r7, #20]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200002e0 	.word	0x200002e0

080041c8 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	3301      	adds	r3, #1
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f01a ff6e 	bl	801f0c8 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	b299      	uxth	r1, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f107 0214 	add.w	r2, r7, #20
 80041fc:	2064      	movs	r0, #100	; 0x64
 80041fe:	9000      	str	r0, [sp, #0]
 8004200:	4804      	ldr	r0, [pc, #16]	; (8004214 <_ExpanderWR+0x4c>)
 8004202:	f014 fe8f 	bl	8018f24 <HAL_I2C_Master_Transmit>
 8004206:	4603      	mov	r3, r0
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800420c:	4618      	mov	r0, r3
 800420e:	3728      	adds	r7, #40	; 0x28
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200002e0 	.word	0x200002e0

08004218 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d903      	bls.n	800422e <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004226:	f06f 0301 	mvn.w	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e014      	b.n	8004258 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 800422e:	f7ff fe25 	bl	8003e7c <VL53L1A2_Init>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8004238:	f06f 0303 	mvn.w	r3, #3
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e00b      	b.n	8004258 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8004240:	2101      	movs	r1, #1
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f85e 	bl	8004304 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8004248:	2100      	movs	r1, #0
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f85a 	bl	8004304 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f897 	bl	8004384 <VL53L1CB_Probe>
 8004256:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d903      	bls.n	800427c <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004274:	f06f 0301 	mvn.w	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e012      	b.n	80042a2 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	490b      	ldr	r1, [pc, #44]	; (80042b0 <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800428a:	6839      	ldr	r1, [r7, #0]
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	da03      	bge.n	800429e <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004296:	f06f 0304 	mvn.w	r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e001      	b.n	80042a2 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000788 	.word	0x20000788
 80042b0:	2000077c 	.word	0x2000077c

080042b4 <VL53L1A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d903      	bls.n	80042cc <VL53L1A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042c4:	f06f 0301 	mvn.w	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e012      	b.n	80042f2 <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <VL53L1A2_RANGING_SENSOR_SetAddress+0x48>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	490b      	ldr	r1, [pc, #44]	; (8004300 <VL53L1A2_RANGING_SENSOR_SetAddress+0x4c>)
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80042da:	6839      	ldr	r1, [r7, #0]
 80042dc:	4610      	mov	r0, r2
 80042de:	4798      	blx	r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da03      	bge.n	80042ee <VL53L1A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80042e6:	f06f 0304 	mvn.w	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e001      	b.n	80042f2 <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000788 	.word	0x20000788
 8004300:	2000077c 	.word	0x2000077c

08004304 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d903      	bls.n	800431c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004314:	f06f 0301 	mvn.w	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e02e      	b.n	800437a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d112      	bne.n	8004348 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fe1d 	bl	8003f68 <VL53L1A2_ResetId>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	da03      	bge.n	800433c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004334:	f06f 0303 	mvn.w	r3, #3
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e01e      	b.n	800437a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 800433c:	2002      	movs	r0, #2
 800433e:	f013 fe1d 	bl	8017f7c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e018      	b.n	800437a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d112      	bne.n	8004374 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fe07 	bl	8003f68 <VL53L1A2_ResetId>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	da03      	bge.n	8004368 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004360:	f06f 0303 	mvn.w	r3, #3
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e008      	b.n	800437a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8004368:	2002      	movs	r0, #2
 800436a:	f013 fe07 	bl	8017f7c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e002      	b.n	800437a <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004374:	f06f 0301 	mvn.w	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 800438c:	2352      	movs	r3, #82	; 0x52
 800438e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8004390:	4b38      	ldr	r3, [pc, #224]	; (8004474 <VL53L1CB_Probe+0xf0>)
 8004392:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8004394:	4b38      	ldr	r3, [pc, #224]	; (8004478 <VL53L1CB_Probe+0xf4>)
 8004396:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8004398:	4b38      	ldr	r3, [pc, #224]	; (800447c <VL53L1CB_Probe+0xf8>)
 800439a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 800439c:	4b38      	ldr	r3, [pc, #224]	; (8004480 <VL53L1CB_Probe+0xfc>)
 800439e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 80043a0:	4b38      	ldr	r3, [pc, #224]	; (8004484 <VL53L1CB_Probe+0x100>)
 80043a2:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f642 2290 	movw	r2, #10896	; 0x2a90
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	4a36      	ldr	r2, [pc, #216]	; (8004488 <VL53L1CB_Probe+0x104>)
 80043b0:	4413      	add	r3, r2
 80043b2:	f107 020c 	add.w	r2, r7, #12
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f013 f824 	bl	8017406 <VL53L1CB_RegisterBusIO>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043c4:	f06f 0304 	mvn.w	r3, #4
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	e04d      	b.n	8004468 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f642 2290 	movw	r2, #10896	; 0x2a90
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <VL53L1CB_Probe+0x104>)
 80043d8:	4413      	add	r3, r2
 80043da:	f107 0208 	add.w	r2, r7, #8
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f013 f8cc 	bl	801757e <VL53L1CB_ReadID>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043ec:	f06f 0304 	mvn.w	r3, #4
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	e039      	b.n	8004468 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80043fe:	f06f 0306 	mvn.w	r3, #6
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	e030      	b.n	8004468 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <VL53L1CB_Probe+0x108>)
 8004408:	4a21      	ldr	r2, [pc, #132]	; (8004490 <VL53L1CB_Probe+0x10c>)
 800440a:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f642 2290 	movw	r2, #10896	; 0x2a90
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <VL53L1CB_Probe+0x104>)
 8004418:	441a      	add	r2, r3
 800441a:	491e      	ldr	r1, [pc, #120]	; (8004494 <VL53L1CB_Probe+0x110>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <VL53L1CB_Probe+0x108>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	491a      	ldr	r1, [pc, #104]	; (8004494 <VL53L1CB_Probe+0x110>)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004430:	4610      	mov	r0, r2
 8004432:	4798      	blx	r3
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800443a:	f06f 0304 	mvn.w	r3, #4
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
 8004440:	e012      	b.n	8004468 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <VL53L1CB_Probe+0x108>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4912      	ldr	r1, [pc, #72]	; (8004494 <VL53L1CB_Probe+0x110>)
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004450:	4911      	ldr	r1, [pc, #68]	; (8004498 <VL53L1CB_Probe+0x114>)
 8004452:	4610      	mov	r0, r2
 8004454:	4798      	blx	r3
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800445c:	f06f 0304 	mvn.w	r3, #4
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e001      	b.n	8004468 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800446a:	4618      	mov	r0, r3
 800446c:	3728      	adds	r7, #40	; 0x28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	08003501 	.word	0x08003501
 8004478:	0800357d 	.word	0x0800357d
 800447c:	080035cd 	.word	0x080035cd
 8004480:	08003621 	.word	0x08003621
 8004484:	08003675 	.word	0x08003675
 8004488:	200007a0 	.word	0x200007a0
 800448c:	20000788 	.word	0x20000788
 8004490:	20000048 	.word	0x20000048
 8004494:	2000077c 	.word	0x2000077c
 8004498:	2000078c 	.word	0x2000078c

0800449c <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80044a8:	793b      	ldrb	r3, [r7, #4]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d808      	bhi.n	80044c0 <CheckValidRectRoi+0x24>
 80044ae:	797b      	ldrb	r3, [r7, #5]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d805      	bhi.n	80044c0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80044b4:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d802      	bhi.n	80044c0 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d901      	bls.n	80044c4 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80044c0:	23fc      	movs	r3, #252	; 0xfc
 80044c2:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 80044c4:	793a      	ldrb	r2, [r7, #4]
 80044c6:	79bb      	ldrb	r3, [r7, #6]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d803      	bhi.n	80044d4 <CheckValidRectRoi+0x38>
 80044cc:	797a      	ldrb	r2, [r7, #5]
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d201      	bcs.n	80044d8 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80044d4:	23fc      	movs	r3, #252	; 0xfc
 80044d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80044d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3318      	adds	r3, #24
 80044fc:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004504:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	2101      	movs	r1, #1
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f012 fd7d 	bl	8017010 <VL53L1_WrByte>
 8004516:	4603      	mov	r3, r0
 8004518:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800452a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8004542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800454a:	2101      	movs	r1, #1
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f002 fc56 	bl	8006dfe <VL53L1_data_init>
 8004552:	4603      	mov	r3, r0
 8004554:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8004556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3318      	adds	r3, #24
 8004562:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 800456a:	3308      	adds	r3, #8
 800456c:	220c      	movs	r2, #12
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f01a fdd1 	bl	801f118 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8004576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800458a:	2300      	movs	r3, #0
 800458c:	73bb      	strb	r3, [r7, #14]
 800458e:	e012      	b.n	80045b6 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8004590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d112      	bne.n	80045be <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8004598:	7bbb      	ldrb	r3, [r7, #14]
 800459a:	b29b      	uxth	r3, r3
 800459c:	2201      	movs	r2, #1
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fc90 	bl	8004ec6 <VL53L1_SetLimitCheckEnable>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	3301      	adds	r3, #1
 80045b4:	73bb      	strb	r3, [r7, #14]
 80045b6:	7bbb      	ldrb	r3, [r7, #14]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d9e9      	bls.n	8004590 <VL53L1_DataInit+0x5a>
 80045bc:	e000      	b.n	80045c0 <VL53L1_DataInit+0x8a>
		else
			break;
 80045be:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 80045c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 80045c8:	2102      	movs	r1, #2
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f005 faef 	bl	8009bae <VL53L1_set_dmax_mode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80045d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80045f2:	2203      	movs	r2, #3
 80045f4:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80045f8:	2320      	movs	r3, #32
 80045fa:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	7bba      	ldrb	r2, [r7, #14]
 8004600:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8004602:	2101      	movs	r1, #1
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f947 	bl	8004898 <VL53L1_SetPresetMode>
 800460a:	4603      	mov	r3, r0
 800460c:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 800460e:	2102      	movs	r1, #2
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f98b 	bl	800492c <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8004622:	2100      	movs	r1, #0
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 fe69 	bl	80062fc <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 800462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8004642:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f011 ffa1 	bl	801658e <VL53L1_poll_for_boot_completion>
 800464c:	4603      	mov	r3, r0
 800464e:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	603a      	str	r2, [r7, #0]
 8004666:	71fb      	strb	r3, [r7, #7]
 8004668:	460b      	mov	r3, r1
 800466a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800466c:	2300      	movs	r3, #0
 800466e:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8004670:	4a48      	ldr	r2, [pc, #288]	; (8004794 <ComputeDevicePresetMode+0x138>)
 8004672:	f107 0318 	add.w	r3, r7, #24
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	4611      	mov	r1, r2
 800467a:	8019      	strh	r1, [r3, #0]
 800467c:	3302      	adds	r3, #2
 800467e:	0c12      	lsrs	r2, r2, #16
 8004680:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8004682:	4a45      	ldr	r2, [pc, #276]	; (8004798 <ComputeDevicePresetMode+0x13c>)
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	4611      	mov	r1, r2
 800468c:	8019      	strh	r1, [r3, #0]
 800468e:	3302      	adds	r3, #2
 8004690:	0c12      	lsrs	r2, r2, #16
 8004692:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8004694:	4a41      	ldr	r2, [pc, #260]	; (800479c <ComputeDevicePresetMode+0x140>)
 8004696:	f107 0310 	add.w	r3, r7, #16
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4611      	mov	r1, r2
 800469e:	8019      	strh	r1, [r3, #0]
 80046a0:	3302      	adds	r3, #2
 80046a2:	0c12      	lsrs	r2, r2, #16
 80046a4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 80046a6:	4a3e      	ldr	r2, [pc, #248]	; (80047a0 <ComputeDevicePresetMode+0x144>)
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4611      	mov	r1, r2
 80046b0:	8019      	strh	r1, [r3, #0]
 80046b2:	3302      	adds	r3, #2
 80046b4:	0c12      	lsrs	r2, r2, #16
 80046b6:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80046b8:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <ComputeDevicePresetMode+0x148>)
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4611      	mov	r1, r2
 80046c2:	8019      	strh	r1, [r3, #0]
 80046c4:	3302      	adds	r3, #2
 80046c6:	0c12      	lsrs	r2, r2, #16
 80046c8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80046d0:	79bb      	ldrb	r3, [r7, #6]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d002      	beq.n	80046dc <ComputeDevicePresetMode+0x80>
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d003      	beq.n	80046e2 <ComputeDevicePresetMode+0x86>
 80046da:	e005      	b.n	80046e8 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	77bb      	strb	r3, [r7, #30]
		break;
 80046e0:	e004      	b.n	80046ec <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	77bb      	strb	r3, [r7, #30]
		break;
 80046e6:	e001      	b.n	80046ec <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 80046e8:	2302      	movs	r3, #2
 80046ea:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d845      	bhi.n	8004780 <ComputeDevicePresetMode+0x124>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <ComputeDevicePresetMode+0xa0>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004741 	.word	0x08004741
 8004704:	08004751 	.word	0x08004751
 8004708:	08004721 	.word	0x08004721
 800470c:	08004781 	.word	0x08004781
 8004710:	08004781 	.word	0x08004781
 8004714:	08004771 	.word	0x08004771
 8004718:	08004761 	.word	0x08004761
 800471c:	08004779 	.word	0x08004779
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8004720:	7fbb      	ldrb	r3, [r7, #30]
 8004722:	3320      	adds	r3, #32
 8004724:	443b      	add	r3, r7
 8004726:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	701a      	strb	r2, [r3, #0]
		break;
 800472e:	e029      	b.n	8004784 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8004730:	7fbb      	ldrb	r3, [r7, #30]
 8004732:	3320      	adds	r3, #32
 8004734:	443b      	add	r3, r7
 8004736:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	701a      	strb	r2, [r3, #0]
		break;
 800473e:	e021      	b.n	8004784 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8004740:	7fbb      	ldrb	r3, [r7, #30]
 8004742:	3320      	adds	r3, #32
 8004744:	443b      	add	r3, r7
 8004746:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	701a      	strb	r2, [r3, #0]
		break;
 800474e:	e019      	b.n	8004784 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8004750:	7fbb      	ldrb	r3, [r7, #30]
 8004752:	3320      	adds	r3, #32
 8004754:	443b      	add	r3, r7
 8004756:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	701a      	strb	r2, [r3, #0]
		break;
 800475e:	e011      	b.n	8004784 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8004760:	7fbb      	ldrb	r3, [r7, #30]
 8004762:	3320      	adds	r3, #32
 8004764:	443b      	add	r3, r7
 8004766:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	701a      	strb	r2, [r3, #0]
		break;
 800476e:	e009      	b.n	8004784 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2211      	movs	r2, #17
 8004774:	701a      	strb	r2, [r3, #0]
		break;
 8004776:	e005      	b.n	8004784 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2227      	movs	r2, #39	; 0x27
 800477c:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 800477e:	e001      	b.n	8004784 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004780:	23f8      	movs	r3, #248	; 0xf8
 8004782:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8004784:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3724      	adds	r7, #36	; 0x24
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	08021de0 	.word	0x08021de0
 8004798:	08021de4 	.word	0x08021de4
 800479c:	08021de8 	.word	0x08021de8
 80047a0:	08021dec 	.word	0x08021dec
 80047a4:	08021df0 	.word	0x08021df0

080047a8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80047a8:	b5b0      	push	{r4, r5, r7, lr}
 80047aa:	b08e      	sub	sp, #56	; 0x38
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	72fb      	strb	r3, [r7, #11]
 80047b6:	4613      	mov	r3, r2
 80047b8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80047d0:	7afb      	ldrb	r3, [r7, #11]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d002      	beq.n	80047dc <SetPresetMode+0x34>
 80047d6:	7afb      	ldrb	r3, [r7, #11]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d103      	bne.n	80047e4 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80047dc:	2340      	movs	r3, #64	; 0x40
 80047de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80047e2:	e002      	b.n	80047ea <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80047e4:	2320      	movs	r3, #32
 80047e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80047ea:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80047ee:	7ab9      	ldrb	r1, [r7, #10]
 80047f0:	7afb      	ldrb	r3, [r7, #11]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ff32 	bl	800465c <ComputeDevicePresetMode>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80047fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004802:	2b00      	cmp	r3, #0
 8004804:	d112      	bne.n	800482c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8004806:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800480a:	f107 001c 	add.w	r0, r7, #28
 800480e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	f107 0318 	add.w	r3, r7, #24
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4603      	mov	r3, r0
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f002 ffaf 	bl	8007784 <VL53L1_get_preset_mode_timing_cfg>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800482c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004830:	2b00      	cmp	r3, #0
 8004832:	d112      	bne.n	800485a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8004834:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8004838:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800483a:	69fd      	ldr	r5, [r7, #28]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	9102      	str	r1, [sp, #8]
 8004844:	9201      	str	r2, [sp, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	462b      	mov	r3, r5
 800484a:	4622      	mov	r2, r4
 800484c:	4601      	mov	r1, r0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f003 f8ee 	bl	8007a30 <VL53L1_set_preset_mode>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800485a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004868:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800486a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004878:	461a      	mov	r2, r3
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 800488c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004890:	4618      	mov	r0, r3
 8004892:	3728      	adds	r7, #40	; 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bdb0      	pop	{r4, r5, r7, pc}

08004898 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 80048a8:	2303      	movs	r3, #3
 80048aa:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f00c f94a 	bl	8010b46 <VL53L1_low_power_auto_data_init>
 80048b2:	4603      	mov	r3, r0
 80048b4:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	2b09      	cmp	r3, #9
 80048ba:	d101      	bne.n	80048c0 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 80048bc:	2301      	movs	r3, #1
 80048be:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 80048c0:	7bba      	ldrb	r2, [r7, #14]
 80048c2:	78f9      	ldrb	r1, [r7, #3]
 80048c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff6d 	bl	80047a8 <SetPresetMode>
 80048ce:	4603      	mov	r3, r0
 80048d0:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 80048d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d117      	bne.n	800490a <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d005      	beq.n	80048ec <VL53L1_SetPresetMode+0x54>
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d002      	beq.n	80048ec <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d107      	bne.n	80048fc <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80048ec:	f24a 0128 	movw	r1, #41000	; 0xa028
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8a9 	bl	8004a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80048f6:	4603      	mov	r3, r0
 80048f8:	73fb      	strb	r3, [r7, #15]
 80048fa:	e006      	b.n	800490a <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80048fc:	f248 2135 	movw	r1, #33333	; 0x8235
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8a1 	bl	8004a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004906:	4603      	mov	r3, r0
 8004908:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800490a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8004912:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa68 	bl	8004dec <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004920:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b0a2      	sub	sp, #136	; 0x88
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004950:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004954:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8004958:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800495c:	2b09      	cmp	r3, #9
 800495e:	d105      	bne.n	800496c <VL53L1_SetDistanceMode+0x40>
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d002      	beq.n	800496c <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8004966:	f06f 0303 	mvn.w	r3, #3
 800496a:	e069      	b.n	8004a40 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d008      	beq.n	8004984 <VL53L1_SetDistanceMode+0x58>
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d005      	beq.n	8004984 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d002      	beq.n	8004984 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800497e:	f06f 0303 	mvn.w	r3, #3
 8004982:	e05d      	b.n	8004a40 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8004984:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f002 fede 	bl	8007754 <VL53L1_get_zone_config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80049a6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80049ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80049b6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f002 fd8a 	bl	80074d4 <VL53L1_get_timeouts_us>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80049c6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80049d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fee5 	bl	80047a8 <SetPresetMode>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80049e4:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80049f2:	461a      	mov	r2, r3
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80049fa:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004a02:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004a04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f002 fd2a 	bl	8007462 <VL53L1_set_timeouts_us>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8004a14:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8004a1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004a22:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8004a2a:	f107 0308 	add.w	r3, r7, #8
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f002 fe4c 	bl	80076ce <VL53L1_set_zone_config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8004a3c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3788      	adds	r7, #136	; 0x88
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004a6c:	4b75      	ldr	r3, [pc, #468]	; (8004c44 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8004a6e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4a75      	ldr	r2, [pc, #468]	; (8004c48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d902      	bls.n	8004a7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004a78:	23fc      	movs	r3, #252	; 0xfc
 8004a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8004a7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004a86:	f107 031a 	add.w	r3, r7, #26
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2105      	movs	r1, #5
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fb9a 	bl	80051c8 <VL53L1_GetSequenceStepEnable>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004a9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004aa2:	f107 0319 	add.w	r3, r7, #25
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2106      	movs	r1, #6
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fb8c 	bl	80051c8 <VL53L1_GetSequenceStepEnable>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004ab6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8004abe:	f107 0314 	add.w	r3, r7, #20
 8004ac2:	f107 0210 	add.w	r2, r7, #16
 8004ac6:	f107 010c 	add.w	r1, r7, #12
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f002 fd02 	bl	80074d4 <VL53L1_get_timeouts_us>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8004ad6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 80a0 	bne.w	8004c20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ae6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004aea:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8004af0:	2301      	movs	r3, #1
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8004af4:	7efb      	ldrb	r3, [r7, #27]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d861      	bhi.n	8004bc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004ba9 	.word	0x08004ba9
 8004b08:	08004ba9 	.word	0x08004ba9
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b29 	.word	0x08004b29
 8004b14:	08004bc1 	.word	0x08004bc1
 8004b18:	08004bc1 	.word	0x08004bc1
 8004b1c:	08004bb5 	.word	0x08004bb5
 8004b20:	08004b6b 	.word	0x08004b6b
 8004b24:	08004ba9 	.word	0x08004ba9
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004b28:	7ebb      	ldrb	r3, [r7, #26]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d002      	beq.n	8004b34 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8004b2e:	7e7b      	ldrb	r3, [r7, #25]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d103      	bne.n	8004b3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8004b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8004b3a:	e044      	b.n	8004bc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8004b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004b42:	e040      	b.n	8004bc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004b4a:	7ebb      	ldrb	r3, [r7, #26]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d002      	beq.n	8004b56 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8004b50:	7e7b      	ldrb	r3, [r7, #25]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d103      	bne.n	8004b5e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8004b56:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5c:	e002      	b.n	8004b64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8004b5e:	f245 4360 	movw	r3, #21600	; 0x5460
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8004b64:	2302      	movs	r3, #2
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8004b68:	e02d      	b.n	8004bc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004b70:	23f5      	movs	r3, #245	; 0xf5
 8004b72:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8004b74:	f107 0308 	add.w	r3, r7, #8
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f248 0188 	movw	r1, #32904	; 0x8088
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f005 f88c 	bl	8009c9c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	dd07      	ble.n	8004b9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	22f5      	movs	r2, #245	; 0xf5
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	4413      	add	r3, r2
 8004b98:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8004ba6:	e00e      	b.n	8004bc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8004ba8:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8004bae:	2306      	movs	r3, #6
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8004bb2:	e008      	b.n	8004bc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004bba:	3308      	adds	r3, #8
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004bbe:	e002      	b.n	8004bc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004bc0:	23f8      	movs	r3, #248	; 0xf8
 8004bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d803      	bhi.n	8004bd6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004bce:	23fc      	movs	r3, #252	; 0xfc
 8004bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bd4:	e003      	b.n	8004bde <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8004bdc:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8004bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11c      	bne.n	8004c20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d203      	bcs.n	8004bf6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004bee:	23fc      	movs	r3, #252	; 0xfc
 8004bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bf4:	e00d      	b.n	8004c12 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f002 fc2b 	bl	8007462 <VL53L1_set_timeouts_us>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8004c12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d102      	bne.n	8004c20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8004c20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004c2e:	461a      	mov	r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3730      	adds	r7, #48	; 0x30
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	00086470 	.word	0x00086470
 8004c48:	00989680 	.word	0x00989680

08004c4c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8004c7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004c82:	f107 031b 	add.w	r3, r7, #27
 8004c86:	461a      	mov	r2, r3
 8004c88:	2105      	movs	r1, #5
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa9c 	bl	80051c8 <VL53L1_GetSequenceStepEnable>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004c96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004c9e:	f107 031a 	add.w	r3, r7, #26
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2106      	movs	r1, #6
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa8e 	bl	80051c8 <VL53L1_GetSequenceStepEnable>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004cb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8004cba:	f107 0310 	add.w	r3, r7, #16
 8004cbe:	f107 0214 	add.w	r2, r7, #20
 8004cc2:	f107 010c 	add.w	r1, r7, #12
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f002 fc04 	bl	80074d4 <VL53L1_get_timeouts_us>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8004cd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d179      	bne.n	8004dce <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ce0:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8004ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8004ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cec:	3b01      	subs	r3, #1
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d869      	bhi.n	8004dc6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004da5 	.word	0x08004da5
 8004cfc:	08004da5 	.word	0x08004da5
 8004d00:	08004d3f 	.word	0x08004d3f
 8004d04:	08004d1d 	.word	0x08004d1d
 8004d08:	08004dc7 	.word	0x08004dc7
 8004d0c:	08004dc7 	.word	0x08004dc7
 8004d10:	08004db7 	.word	0x08004db7
 8004d14:	08004d67 	.word	0x08004d67
 8004d18:	08004da5 	.word	0x08004da5
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004d1c:	7efb      	ldrb	r3, [r7, #27]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d002      	beq.n	8004d28 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 8004d22:	7ebb      	ldrb	r3, [r7, #26]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004d2e:	3308      	adds	r3, #8
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8004d32:	e04d      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004d3c:	e048      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004d3e:	7efb      	ldrb	r3, [r7, #27]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d002      	beq.n	8004d4a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8004d44:	7ebb      	ldrb	r3, [r7, #26]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d106      	bne.n	8004d58 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8004d50:	3334      	adds	r3, #52	; 0x34
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8004d56:	e03b      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8004d5e:	3330      	adds	r3, #48	; 0x30
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004d64:	e034      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004d66:	23f5      	movs	r3, #245	; 0xf5
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f248 0188 	movw	r1, #32904	; 0x8088
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f004 ff91 	bl	8009c9c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dd07      	ble.n	8004d90 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	22f5      	movs	r2, #245	; 0xf5
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	4413      	add	r3, r2
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8004d96:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004da2:	e015      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004db4:	e00c      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8004dc4:	e004      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004dc6:	23f8      	movs	r3, #248	; 0xf8
 8004dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004dcc:	e000      	b.n	8004dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 8004dce:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8004dd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ddc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004dde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3730      	adds	r7, #48	; 0x30
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop

08004dec <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	099b      	lsrs	r3, r3, #6
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f002 facc 	bl	80073b0 <VL53L1_set_inter_measurement_period_ms>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8004e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	10624dd3 	.word	0x10624dd3

08004e2c <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f002 fae3 	bl	800740c <VL53L1_get_inter_measurement_period_ms>
 8004e46:	4603      	mov	r3, r0
 8004e48:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	019b      	lsls	r3, r3, #6
 8004e50:	4907      	ldr	r1, [pc, #28]	; (8004e70 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8004e52:	fba1 1303 	umull	r1, r3, r1, r3
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <SetLimitValue+0x1e>
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d009      	beq.n	8004ea4 <SetLimitValue+0x30>
 8004e90:	e011      	b.n	8004eb6 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	0b9b      	lsrs	r3, r3, #14
 8004e96:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004e98:	8abb      	ldrh	r3, [r7, #20]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f003 f988 	bl	80081b2 <VL53L1_set_lite_sigma_threshold>
		break;
 8004ea2:	e00a      	b.n	8004eba <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	0a5b      	lsrs	r3, r3, #9
 8004ea8:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004eaa:	8abb      	ldrh	r3, [r7, #20]
 8004eac:	4619      	mov	r1, r3
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f003 f9ad 	bl	800820e <VL53L1_set_lite_min_count_rate>
		break;
 8004eb4:	e001      	b.n	8004eba <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004eb6:	23fc      	movs	r3, #252	; 0xfc
 8004eb8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	807b      	strh	r3, [r7, #2]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d902      	bls.n	8004eea <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004ee4:	23fc      	movs	r3, #252	; 0xfc
 8004ee6:	73fb      	strb	r3, [r7, #15]
 8004ee8:	e015      	b.n	8004f16 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8004eea:	787b      	ldrb	r3, [r7, #1]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	e007      	b.n	8004f06 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004ef6:	887b      	ldrh	r3, [r7, #2]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffb1 	bl	8004e74 <SetLimitValue>
 8004f12:	4603      	mov	r3, r0
 8004f14:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10e      	bne.n	8004f3c <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004f1e:	787b      	ldrb	r3, [r7, #1]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8004f36:	3334      	adds	r3, #52	; 0x34
 8004f38:	460a      	mov	r2, r1
 8004f3a:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8004f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	460b      	mov	r3, r1
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004f5a:	897b      	ldrh	r3, [r7, #10]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d905      	bls.n	8004f6c <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004f60:	23fc      	movs	r3, #252	; 0xfc
 8004f62:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e00a      	b.n	8004f82 <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f6c:	897b      	ldrh	r3, [r7, #10]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8004f76:	3334      	adds	r3, #52	; 0x34
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7dba      	ldrb	r2, [r7, #22]
 8004f80:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004fa8:	897b      	ldrh	r3, [r7, #10]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <VL53L1_GetLimitCheckValue+0x22>
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d00c      	beq.n	8004fcc <VL53L1_GetLimitCheckValue+0x3a>
 8004fb2:	e017      	b.n	8004fe4 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4619      	mov	r1, r3
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f003 f8e2 	bl	8008184 <VL53L1_get_lite_sigma_threshold>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8004fc4:	8abb      	ldrh	r3, [r7, #20]
 8004fc6:	039b      	lsls	r3, r3, #14
 8004fc8:	61bb      	str	r3, [r7, #24]
		break;
 8004fca:	e00d      	b.n	8004fe8 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004fcc:	f107 0316 	add.w	r3, r7, #22
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f003 f904 	bl	80081e0 <VL53L1_get_lite_min_count_rate>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8004fdc:	8afb      	ldrh	r3, [r7, #22]
 8004fde:	025b      	lsls	r3, r3, #9
 8004fe0:	61bb      	str	r3, [r7, #24]
		break;
 8004fe2:	e001      	b.n	8004fe8 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004fe4:	23fc      	movs	r3, #252	; 0xfc
 8004fe6:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004fe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d129      	bne.n	8005044 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d113      	bne.n	800501e <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800500c:	897b      	ldrh	r3, [r7, #10]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8005016:	3334      	adds	r3, #52	; 0x34
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e012      	b.n	8005044 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005024:	897b      	ldrh	r3, [r7, #10]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005034:	897b      	ldrh	r3, [r7, #10]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800503e:	3334      	adds	r3, #52	; 0x34
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8005044:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0a0      	sub	sp, #128	; 0x80
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800505a:	2300      	movs	r3, #0
 800505c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800506c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8005070:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 8005074:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8005078:	2b02      	cmp	r3, #2
 800507a:	d102      	bne.n	8005082 <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 800507c:	2310      	movs	r3, #16
 800507e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800508a:	429a      	cmp	r2, r3
 800508c:	d303      	bcc.n	8005096 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005096:	23fc      	movs	r3, #252	; 0xfc
 8005098:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 800509c:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d17e      	bne.n	80051a2 <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80050a4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80050a8:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80050ba:	e06a      	b.n	8005192 <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80050bc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	f107 0208 	add.w	r2, r7, #8
 80050ca:	3301      	adds	r3, #1
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80050d0:	68b8      	ldr	r0, [r7, #8]
 80050d2:	f7ff f9e3 	bl	800449c <CheckValidRectRoi>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 80050dc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d15d      	bne.n	80051a0 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80050e4:	7abb      	ldrb	r3, [r7, #10]
 80050e6:	461a      	mov	r2, r3
 80050e8:	7a3b      	ldrb	r3, [r7, #8]
 80050ea:	4413      	add	r3, r2
 80050ec:	3301      	adds	r3, #1
					/ 2;
 80050ee:	0fda      	lsrs	r2, r3, #31
 80050f0:	4413      	add	r3, r2
 80050f2:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80050f4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 80050f8:	7a7b      	ldrb	r3, [r7, #9]
 80050fa:	461a      	mov	r2, r3
 80050fc:	7afb      	ldrb	r3, [r7, #11]
 80050fe:	4413      	add	r3, r2
 8005100:	3301      	adds	r3, #1
					/ 2;
 8005102:	0fda      	lsrs	r2, r3, #31
 8005104:	4413      	add	r3, r2
 8005106:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8005108:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 800510c:	7aba      	ldrb	r2, [r7, #10]
 800510e:	7a3b      	ldrb	r3, [r7, #8]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8005116:	7a7a      	ldrb	r2, [r7, #9]
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8005120:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8005124:	2b02      	cmp	r3, #2
 8005126:	d903      	bls.n	8005130 <VL53L1_SetROI+0xe0>
 8005128:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800512c:	2b02      	cmp	r3, #2
 800512e:	d803      	bhi.n	8005138 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8005130:	23fc      	movs	r3, #252	; 0xfc
 8005132:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8005136:	e034      	b.n	80051a2 <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8005138:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800513c:	3306      	adds	r3, #6
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3380      	adds	r3, #128	; 0x80
 8005142:	443b      	add	r3, r7
 8005144:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8005148:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 800514c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8005150:	3306      	adds	r3, #6
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3380      	adds	r3, #128	; 0x80
 8005156:	443b      	add	r3, r7
 8005158:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 800515c:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8005160:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8005164:	3306      	adds	r3, #6
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	3380      	adds	r3, #128	; 0x80
 800516a:	443b      	add	r3, r7
 800516c:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8005170:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8005174:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8005178:	3306      	adds	r3, #6
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	3380      	adds	r3, #128	; 0x80
 800517e:	443b      	add	r3, r7
 8005180:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8005184:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8005188:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800518c:	3301      	adds	r3, #1
 800518e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 800519a:	429a      	cmp	r2, r3
 800519c:	d38e      	bcc.n	80050bc <VL53L1_SetROI+0x6c>
 800519e:	e000      	b.n	80051a2 <VL53L1_SetROI+0x152>
				break;
 80051a0:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 80051a2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d108      	bne.n	80051bc <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 80051aa:	f107 030c 	add.w	r3, r7, #12
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f002 fa8c 	bl	80076ce <VL53L1_set_zone_config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 80051bc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3780      	adds	r7, #128	; 0x80
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	460b      	mov	r3, r1
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80051da:	7afb      	ldrb	r3, [r7, #11]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f002 f9e3 	bl	80075ac <VL53L1_get_sequence_config_bit>
 80051e6:	4603      	mov	r3, r0
 80051e8:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 80051ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005200:	2300      	movs	r3, #0
 8005202:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3318      	adds	r3, #24
 8005208:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7edb      	ldrb	r3, [r3, #27]
 800520e:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d002      	beq.n	800521c <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 fc8e 	bl	8006b38 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800521c:	2300      	movs	r3, #0
 800521e:	77bb      	strb	r3, [r7, #30]
 8005220:	e01a      	b.n	8005258 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8005222:	7fbb      	ldrb	r3, [r7, #30]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800522a:	330c      	adds	r3, #12
 800522c:	2100      	movs	r1, #0
 800522e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8005232:	7fbb      	ldrb	r3, [r7, #30]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4413      	add	r3, r2
 8005238:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800523c:	3320      	adds	r3, #32
 800523e:	22ff      	movs	r2, #255	; 0xff
 8005240:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8005242:	7fbb      	ldrb	r3, [r7, #30]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4413      	add	r3, r2
 8005248:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800524c:	3324      	adds	r3, #36	; 0x24
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8005252:	7fbb      	ldrb	r3, [r7, #30]
 8005254:	3301      	adds	r3, #1
 8005256:	77bb      	strb	r3, [r7, #30]
 8005258:	7fbb      	ldrb	r3, [r7, #30]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d9e1      	bls.n	8005222 <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005264:	2200      	movs	r2, #0
 8005266:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005270:	2200      	movs	r2, #0
 8005272:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800527c:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8005280:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8005282:	7dbb      	ldrb	r3, [r7, #22]
 8005284:	2b63      	cmp	r3, #99	; 0x63
 8005286:	dc12      	bgt.n	80052ae <VL53L1_StartMeasurement+0xb6>
 8005288:	2b62      	cmp	r3, #98	; 0x62
 800528a:	da0d      	bge.n	80052a8 <VL53L1_StartMeasurement+0xb0>
 800528c:	2b05      	cmp	r3, #5
 800528e:	dc0e      	bgt.n	80052ae <VL53L1_StartMeasurement+0xb6>
 8005290:	2b04      	cmp	r3, #4
 8005292:	da09      	bge.n	80052a8 <VL53L1_StartMeasurement+0xb0>
 8005294:	2b02      	cmp	r3, #2
 8005296:	dc02      	bgt.n	800529e <VL53L1_StartMeasurement+0xa6>
 8005298:	2b00      	cmp	r3, #0
 800529a:	da05      	bge.n	80052a8 <VL53L1_StartMeasurement+0xb0>
 800529c:	e007      	b.n	80052ae <VL53L1_StartMeasurement+0xb6>
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d105      	bne.n	80052ae <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	77fb      	strb	r3, [r7, #31]
		break;
 80052a6:	e004      	b.n	80052b2 <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80052a8:	23f2      	movs	r3, #242	; 0xf2
 80052aa:	77fb      	strb	r3, [r7, #31]
		break;
 80052ac:	e001      	b.n	80052b2 <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80052ae:	23fd      	movs	r3, #253	; 0xfd
 80052b0:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 80052b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d11f      	bne.n	80052fa <VL53L1_StartMeasurement+0x102>
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d11c      	bne.n	80052fa <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80052c0:	f107 0310 	add.w	r3, r7, #16
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fcc0 	bl	8004c4c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80052cc:	4603      	mov	r3, r0
 80052ce:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4a18      	ldr	r2, [pc, #96]	; (8005334 <VL53L1_StartMeasurement+0x13c>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	099b      	lsrs	r3, r3, #6
 80052da:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80052dc:	f107 030c 	add.w	r3, r7, #12
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fda2 	bl	8004e2c <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80052e8:	4603      	mov	r3, r0
 80052ea:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d901      	bls.n	80052fa <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80052f6:	23fc      	movs	r3, #252	; 0xfc
 80052f8:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 80052fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2206      	movs	r2, #6
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f002 ff97 	bl	800823c <VL53L1_init_and_start_range>
 800530e:	4603      	mov	r3, r0
 8005310:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8005312:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d105      	bne.n	8005326 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005320:	2204      	movs	r2, #4
 8005322:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8005326:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	10624dd3 	.word	0x10624dd3

08005338 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f003 fa47 	bl	80087d8 <VL53L1_stop_range>
 800534a:	4603      	mov	r3, r0
 800534c:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	7edb      	ldrb	r3, [r3, #27]
 8005352:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d002      	beq.n	8005360 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 fd1a 	bl	8006d94 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8005360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800536e:	2203      	movs	r2, #3
 8005370:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8005374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7edb      	ldrb	r3, [r3, #27]
 8005390:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8005392:	7bbb      	ldrb	r3, [r7, #14]
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f003 ff4b 	bl	8009232 <VL53L1_clear_interrupt_and_enable_next_range>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80053a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f011 f8ac 	bl	801651a <VL53L1_is_new_data_ready>
 80053c2:	4603      	mov	r3, r0
 80053c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80053c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	4603      	mov	r3, r0
 80053da:	603a      	str	r2, [r7, #0]
 80053dc:	80fb      	strh	r3, [r7, #6]
 80053de:	460b      	mov	r3, r1
 80053e0:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 80053e2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80053e6:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 80053e8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80053ec:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 80053ee:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80053f2:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 80053f4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80053f8:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 80053fa:	797b      	ldrb	r3, [r7, #5]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d002      	beq.n	8005406 <GenNewPresetMode+0x34>
 8005400:	2b02      	cmp	r3, #2
 8005402:	d012      	beq.n	800542a <GenNewPresetMode+0x58>
 8005404:	e023      	b.n	800544e <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8005406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800540a:	893b      	ldrh	r3, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	dd03      	ble.n	8005418 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2203      	movs	r2, #3
 8005414:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8005416:	e02c      	b.n	8005472 <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8005418:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800541c:	89bb      	ldrh	r3, [r7, #12]
 800541e:	429a      	cmp	r2, r3
 8005420:	dd27      	ble.n	8005472 <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2202      	movs	r2, #2
 8005426:	701a      	strb	r2, [r3, #0]
		break;
 8005428:	e023      	b.n	8005472 <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 800542a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800542e:	893b      	ldrh	r3, [r7, #8]
 8005430:	429a      	cmp	r2, r3
 8005432:	dd03      	ble.n	800543c <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2203      	movs	r2, #3
 8005438:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 800543a:	e01c      	b.n	8005476 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 800543c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	429a      	cmp	r2, r3
 8005444:	da17      	bge.n	8005476 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
		break;
 800544c:	e013      	b.n	8005476 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 800544e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005452:	89fb      	ldrh	r3, [r7, #14]
 8005454:	429a      	cmp	r2, r3
 8005456:	da03      	bge.n	8005460 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 800545e:	e00c      	b.n	800547a <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8005460:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005464:	897b      	ldrh	r3, [r7, #10]
 8005466:	429a      	cmp	r2, r3
 8005468:	da07      	bge.n	800547a <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2202      	movs	r2, #2
 800546e:	701a      	strb	r2, [r3, #0]
		break;
 8005470:	e003      	b.n	800547a <GenNewPresetMode+0xa8>
		break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <GenNewPresetMode+0xaa>
		break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <GenNewPresetMode+0xaa>
		break;
 800547a:	bf00      	nop
	}
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	7ddb      	ldrb	r3, [r3, #23]
 800549c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <CheckAndChangeDistanceMode+0xbc>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3318      	adds	r3, #24
 80054aa:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 80054ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054b0:	2bff      	cmp	r3, #255	; 0xff
 80054b2:	d042      	beq.n	800553a <CheckAndChangeDistanceMode+0xb2>
 80054b4:	2bff      	cmp	r3, #255	; 0xff
 80054b6:	dc07      	bgt.n	80054c8 <CheckAndChangeDistanceMode+0x40>
 80054b8:	2b07      	cmp	r3, #7
 80054ba:	dc02      	bgt.n	80054c2 <CheckAndChangeDistanceMode+0x3a>
 80054bc:	2b06      	cmp	r3, #6
 80054be:	da3c      	bge.n	800553a <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 80054c0:	e002      	b.n	80054c8 <CheckAndChangeDistanceMode+0x40>
 80054c2:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d938      	bls.n	800553a <CheckAndChangeDistanceMode+0xb2>
		break;
 80054c8:	bf00      	nop
	}

	DmaxValid = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80054d6:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	429a      	cmp	r2, r3
 80054de:	db03      	blt.n	80054e8 <CheckAndChangeDistanceMode+0x60>
 80054e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054f4:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 80054f8:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	7dfa      	ldrb	r2, [r7, #23]
 80054fe:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8005500:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800550e:	7df9      	ldrb	r1, [r7, #23]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff ff5d 	bl	80053d2 <GenNewPresetMode>
 8005518:	e010      	b.n	800553c <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 800551a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8005522:	7df9      	ldrb	r1, [r7, #23]
 8005524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff51 	bl	80053d2 <GenNewPresetMode>
 8005530:	e004      	b.n	800553c <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2203      	movs	r2, #3
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e000      	b.n	800553c <CheckAndChangeDistanceMode+0xb4>
		return;
 800553a:	bf00      	nop
	}
}
 800553c:	3728      	adds	r7, #40	; 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	2000001c 	.word	0x2000001c

08005548 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8005548:	b480      	push	{r7}
 800554a:	b08d      	sub	sp, #52	; 0x34
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	603a      	str	r2, [r7, #0]
 8005552:	71fb      	strb	r3, [r7, #7]
 8005554:	460b      	mov	r3, r1
 8005556:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8005558:	2396      	movs	r3, #150	; 0x96
 800555a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 800555c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005560:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8005562:	231e      	movs	r3, #30
 8005564:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8005566:	4b39      	ldr	r3, [pc, #228]	; (800564c <ComputeRQL+0x104>)
 8005568:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 800556a:	4b39      	ldr	r3, [pc, #228]	; (8005650 <ComputeRQL+0x108>)
 800556c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 800556e:	f641 139a 	movw	r3, #6554	; 0x199a
 8005572:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <ComputeRQL+0x3a>
		returnvalue = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005580:	e05b      	b.n	800563a <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8005588:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8005590:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8005592:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8005596:	429a      	cmp	r2, r3
 8005598:	da02      	bge.n	80055a0 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 800559a:	79bb      	ldrb	r3, [r7, #6]
 800559c:	2b07      	cmp	r3, #7
 800559e:	d103      	bne.n	80055a8 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 80055a0:	2332      	movs	r3, #50	; 0x32
 80055a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055a6:	e048      	b.n	800563a <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80055ae:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80055b2:	429a      	cmp	r2, r3
 80055b4:	dd03      	ble.n	80055be <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 80055b6:	8c3b      	ldrh	r3, [r7, #32]
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055bc:	e007      	b.n	80055ce <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80055c4:	461a      	mov	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d020      	beq.n	8005616 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80055d8:	461a      	mov	r2, r3
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	429a      	cmp	r2, r3
 8005602:	d804      	bhi.n	800560e <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
 800560c:	e006      	b.n	800561c <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 800560e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	e002      	b.n	800561c <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8005616:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b32      	cmp	r3, #50	; 0x32
 8005626:	d905      	bls.n	8005634 <ComputeRQL+0xec>
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	bf28      	it	cs
 800562e:	2364      	movcs	r3, #100	; 0x64
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e000      	b.n	8005636 <ComputeRQL+0xee>
 8005634:	2332      	movs	r3, #50	; 0x32
 8005636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800563a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800563e:	4618      	mov	r0, r3
 8005640:	3734      	adds	r7, #52	; 0x34
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	0075b333 	.word	0x0075b333
 8005650:	0030cccd 	.word	0x0030cccd

08005654 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	3b04      	subs	r3, #4
 8005662:	2b0f      	cmp	r3, #15
 8005664:	d83d      	bhi.n	80056e2 <ConvertStatusLite+0x8e>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <ConvertStatusLite+0x18>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	080056bf 	.word	0x080056bf
 8005670:	080056b9 	.word	0x080056b9
 8005674:	080056c5 	.word	0x080056c5
 8005678:	080056cb 	.word	0x080056cb
 800567c:	080056d7 	.word	0x080056d7
 8005680:	080056dd 	.word	0x080056dd
 8005684:	080056e3 	.word	0x080056e3
 8005688:	080056e3 	.word	0x080056e3
 800568c:	080056d1 	.word	0x080056d1
 8005690:	080056e3 	.word	0x080056e3
 8005694:	080056e3 	.word	0x080056e3
 8005698:	080056e3 	.word	0x080056e3
 800569c:	080056e3 	.word	0x080056e3
 80056a0:	080056e3 	.word	0x080056e3
 80056a4:	080056ad 	.word	0x080056ad
 80056a8:	080056b3 	.word	0x080056b3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80056ac:	230a      	movs	r3, #10
 80056ae:	73fb      	strb	r3, [r7, #15]
		break;
 80056b0:	e019      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80056b2:	2306      	movs	r3, #6
 80056b4:	73fb      	strb	r3, [r7, #15]
		break;
 80056b6:	e016      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80056b8:	2304      	movs	r3, #4
 80056ba:	73fb      	strb	r3, [r7, #15]
		break;
 80056bc:	e013      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80056be:	2302      	movs	r3, #2
 80056c0:	73fb      	strb	r3, [r7, #15]
		break;
 80056c2:	e010      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
		break;
 80056c8:	e00d      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80056ca:	2307      	movs	r3, #7
 80056cc:	73fb      	strb	r3, [r7, #15]
		break;
 80056ce:	e00a      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80056d0:	2309      	movs	r3, #9
 80056d2:	73fb      	strb	r3, [r7, #15]
		break;
 80056d4:	e007      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80056d6:	2303      	movs	r3, #3
 80056d8:	73fb      	strb	r3, [r7, #15]
		break;
 80056da:	e004      	b.n	80056e6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80056dc:	2300      	movs	r3, #0
 80056de:	73fb      	strb	r3, [r7, #15]
		break;
 80056e0:	e001      	b.n	80056e6 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80056e2:	23ff      	movs	r3, #255	; 0xff
 80056e4:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	3b05      	subs	r3, #5
 8005702:	2b12      	cmp	r3, #18
 8005704:	d840      	bhi.n	8005788 <ConvertStatusHisto+0x94>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <ConvertStatusHisto+0x18>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005759 	.word	0x08005759
 8005710:	0800575f 	.word	0x0800575f
 8005714:	0800576b 	.word	0x0800576b
 8005718:	08005789 	.word	0x08005789
 800571c:	08005783 	.word	0x08005783
 8005720:	08005789 	.word	0x08005789
 8005724:	08005789 	.word	0x08005789
 8005728:	08005789 	.word	0x08005789
 800572c:	08005789 	.word	0x08005789
 8005730:	08005789 	.word	0x08005789
 8005734:	08005789 	.word	0x08005789
 8005738:	08005789 	.word	0x08005789
 800573c:	08005789 	.word	0x08005789
 8005740:	08005789 	.word	0x08005789
 8005744:	08005765 	.word	0x08005765
 8005748:	08005777 	.word	0x08005777
 800574c:	08005789 	.word	0x08005789
 8005750:	0800577d 	.word	0x0800577d
 8005754:	08005771 	.word	0x08005771
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8005758:	2304      	movs	r3, #4
 800575a:	73fb      	strb	r3, [r7, #15]
		break;
 800575c:	e016      	b.n	800578c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
		break;
 8005762:	e013      	b.n	800578c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8005764:	2306      	movs	r3, #6
 8005766:	73fb      	strb	r3, [r7, #15]
		break;
 8005768:	e010      	b.n	800578c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800576a:	2307      	movs	r3, #7
 800576c:	73fb      	strb	r3, [r7, #15]
		break;
 800576e:	e00d      	b.n	800578c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8005770:	230c      	movs	r3, #12
 8005772:	73fb      	strb	r3, [r7, #15]
		break;
 8005774:	e00a      	b.n	800578c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8005776:	2307      	movs	r3, #7
 8005778:	73fb      	strb	r3, [r7, #15]
		break;
 800577a:	e007      	b.n	800578c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 800577c:	230b      	movs	r3, #11
 800577e:	73fb      	strb	r3, [r7, #15]
		break;
 8005780:	e004      	b.n	800578c <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
		break;
 8005786:	e001      	b.n	800578c <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8005788:	23ff      	movs	r3, #255	; 0xff
 800578a:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b092      	sub	sp, #72	; 0x48
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	70fb      	strb	r3, [r7, #3]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70bb      	strb	r3, [r7, #2]
 80057b2:	4613      	mov	r3, r2
 80057b4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3318      	adds	r3, #24
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 80057c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80057ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80057dc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff feaf 	bl	8005548 <ComputeRQL>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461a      	mov	r2, r3
 80057ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057f0:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80057f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80057f6:	025b      	lsls	r3, r3, #9
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80057fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fe:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005802:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005804:	025b      	lsls	r3, r3, #9
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8005808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580c:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800580e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005810:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005812:	025b      	lsls	r3, r3, #9
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8005816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581a:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800581c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005824:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8005826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005828:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800582c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800582e:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8005830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005832:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8005836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005838:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 800583a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800583c:	2200      	movs	r2, #0
 800583e:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8005840:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005844:	2b11      	cmp	r3, #17
 8005846:	d009      	beq.n	800585c <SetTargetData+0xc0>
 8005848:	2b11      	cmp	r3, #17
 800584a:	dc0f      	bgt.n	800586c <SetTargetData+0xd0>
 800584c:	2b03      	cmp	r3, #3
 800584e:	dc02      	bgt.n	8005856 <SetTargetData+0xba>
 8005850:	2b00      	cmp	r3, #0
 8005852:	dc03      	bgt.n	800585c <SetTargetData+0xc0>
 8005854:	e00a      	b.n	800586c <SetTargetData+0xd0>
 8005856:	2b0d      	cmp	r3, #13
 8005858:	d004      	beq.n	8005864 <SetTargetData+0xc8>
 800585a:	e007      	b.n	800586c <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800585c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800585e:	2205      	movs	r2, #5
 8005860:	75da      	strb	r2, [r3, #23]
		break;
 8005862:	e006      	b.n	8005872 <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8005864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005866:	220d      	movs	r2, #13
 8005868:	75da      	strb	r2, [r3, #23]
		break;
 800586a:	e002      	b.n	8005872 <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800586c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800586e:	2200      	movs	r2, #0
 8005870:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8005872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005874:	7ddb      	ldrb	r3, [r3, #23]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d117      	bne.n	80058aa <SetTargetData+0x10e>
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d114      	bne.n	80058aa <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8005880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8005886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005888:	2200      	movs	r2, #0
 800588a:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 800588c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8005892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005894:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005898:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 800589a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800589c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80058a0:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 80058a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058a4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80058a8:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80058aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ac:	7ddb      	ldrb	r3, [r3, #23]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d125      	bne.n	80058fe <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80058b8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80058bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 80058c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d007      	beq.n	80058d8 <SetTargetData+0x13c>
 80058c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d003      	beq.n	80058d8 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 80058d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058d4:	2b09      	cmp	r3, #9
 80058d6:	d109      	bne.n	80058ec <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 80058d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff ff09 	bl	80056f4 <ConvertStatusHisto>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80058e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058e8:	75da      	strb	r2, [r3, #23]
 80058ea:	e008      	b.n	80058fe <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80058ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff feaf 	bl	8005654 <ConvertStatusLite>
 80058f6:	4603      	mov	r3, r0
 80058f8:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80058fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058fc:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80058fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005900:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005902:	025b      	lsls	r3, r3, #9
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800590c:	461a      	mov	r2, r3
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005916:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005918:	025b      	lsls	r3, r3, #9
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005922:	461a      	mov	r2, r3
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 800592a:	f107 0310 	add.w	r3, r7, #16
 800592e:	461a      	mov	r2, r3
 8005930:	2100      	movs	r1, #0
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fb2d 	bl	8004f92 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8005938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800593c:	2b06      	cmp	r3, #6
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8005946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 800594a:	f107 0315 	add.w	r3, r7, #21
 800594e:	461a      	mov	r2, r3
 8005950:	2100      	movs	r1, #0
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff faf8 	bl	8004f48 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8005958:	7d7b      	ldrb	r3, [r7, #21]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d105      	bne.n	800596a <SetTargetData+0x1ce>
 800595e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <SetTargetData+0x1ce>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <SetTargetData+0x1d0>
 800596a:	2300      	movs	r3, #0
 800596c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005976:	461a      	mov	r2, r3
 8005978:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800597c:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8005980:	f107 0310 	add.w	r3, r7, #16
 8005984:	461a      	mov	r2, r3
 8005986:	2101      	movs	r1, #1
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fb02 	bl	8004f92 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800598e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005992:	2b04      	cmp	r3, #4
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800599c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 80059a0:	f107 0315 	add.w	r3, r7, #21
 80059a4:	461a      	mov	r2, r3
 80059a6:	2101      	movs	r1, #1
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff facd 	bl	8004f48 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80059ae:	7d7b      	ldrb	r3, [r7, #21]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d105      	bne.n	80059c0 <SetTargetData+0x224>
 80059b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <SetTargetData+0x224>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <SetTargetData+0x226>
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059cc:	461a      	mov	r2, r3
 80059ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80059d2:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80059d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059d8:	8a9b      	ldrh	r3, [r3, #20]
 80059da:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80059dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059de:	7ddb      	ldrb	r3, [r3, #23]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d110      	bne.n	8005a06 <SetTargetData+0x26a>
 80059e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da0c      	bge.n	8005a06 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80059ec:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80059f0:	4ba3      	ldr	r3, [pc, #652]	; (8005c80 <SetTargetData+0x4e4>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	da03      	bge.n	8005a00 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 80059f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059fa:	220e      	movs	r2, #14
 80059fc:	75da      	strb	r2, [r3, #23]
 80059fe:	e002      	b.n	8005a06 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8005a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a02:	2200      	movs	r2, #0
 8005a04:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f248 01be 	movw	r1, #32958	; 0x80be
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f004 f943 	bl	8009c9c <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8005a1a:	787b      	ldrb	r3, [r7, #1]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8005a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a22:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d107      	bne.n	8005a38 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8005a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a2a:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d902      	bls.n	8005a38 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 8005a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a34:	220c      	movs	r2, #12
 8005a36:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f248 0191 	movw	r1, #32913	; 0x8091
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f004 f92a 	bl	8009c9c <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8005a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a58:	8a9b      	ldrh	r3, [r3, #20]
 8005a5a:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 8005a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a64:	2200      	movs	r2, #0
 8005a66:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d106      	bne.n	8005a7c <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a74:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d001      	beq.n	8005a80 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8250 	beq.w	8005f28 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8005a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a8a:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8005a8c:	2b07      	cmp	r3, #7
 8005a8e:	d004      	beq.n	8005a9a <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8005a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a92:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	f040 8247 	bne.w	8005f28 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8005a9a:	787b      	ldrb	r3, [r7, #1]
 8005a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005aa4:	3320      	adds	r3, #32
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b07      	cmp	r3, #7
 8005aaa:	d01c      	beq.n	8005ae6 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8005aac:	787b      	ldrb	r3, [r7, #1]
 8005aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005ab6:	3320      	adds	r3, #32
 8005ab8:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d013      	beq.n	8005ae6 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8005abe:	787b      	ldrb	r3, [r7, #1]
 8005ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005ac8:	3320      	adds	r3, #32
 8005aca:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 822b 	bne.w	8005f28 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8005ad2:	787b      	ldrb	r3, [r7, #1]
 8005ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005adc:	3324      	adds	r3, #36	; 0x24
 8005ade:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	f040 8221 	bne.w	8005f28 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 8005ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005aec:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8005af0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8005af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af4:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8005af8:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d00c      	beq.n	8005b18 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b04:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8005b08:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8005b10:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f040 81dc 	bne.w	8005ed0 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8005b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b1a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005b1e:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8005b20:	787b      	ldrb	r3, [r7, #1]
 8005b22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b24:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8005b28:	330c      	adds	r3, #12
 8005b2a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8005b2e:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	2b21      	cmp	r3, #33	; 0x21
 8005b42:	d008      	beq.n	8005b56 <SetTargetData+0x3ba>
 8005b44:	2b21      	cmp	r3, #33	; 0x21
 8005b46:	f300 81bf 	bgt.w	8005ec8 <SetTargetData+0x72c>
 8005b4a:	2b1b      	cmp	r3, #27
 8005b4c:	f000 8113 	beq.w	8005d76 <SetTargetData+0x5da>
 8005b50:	2b1e      	cmp	r3, #30
 8005b52:	d004      	beq.n	8005b5e <SetTargetData+0x3c2>
 8005b54:	e1b8      	b.n	8005ec8 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005b5c:	e1b9      	b.n	8005ed2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8005b64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	dd0f      	ble.n	8005b8c <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8005b72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	da08      	bge.n	8005b8c <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8005b7a:	7efb      	ldrb	r3, [r7, #27]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d105      	bne.n	8005b8c <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8005b86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b8a:	e0f3      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8005b8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8005b96:	425b      	negs	r3, r3
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	da10      	bge.n	8005bbe <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8005b9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8005ba6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	dd08      	ble.n	8005bbe <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8005bac:	7efb      	ldrb	r3, [r7, #27]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d105      	bne.n	8005bbe <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8005bb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005bbc:	e0da      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8005bc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	dd0f      	ble.n	8005bec <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8005bd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	da08      	bge.n	8005bec <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8005bda:	7efb      	ldrb	r3, [r7, #27]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8005be6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005bea:	e0c3      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8005bec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8005bf6:	425b      	negs	r3, r3
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	da10      	bge.n	8005c1e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8005bfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8005c06:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	dd08      	ble.n	8005c1e <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8005c0c:	7efb      	ldrb	r3, [r7, #27]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d105      	bne.n	8005c1e <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8005c18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c1c:	e0aa      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8005c24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	dd0f      	ble.n	8005c4c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8005c32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	da08      	bge.n	8005c4c <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8005c3a:	7efb      	ldrb	r3, [r7, #27]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005c46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c4a:	e093      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8005c4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8005c56:	425b      	negs	r3, r3
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	da13      	bge.n	8005c84 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8005c5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8005c66:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	dd0b      	ble.n	8005c84 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8005c6c:	7efb      	ldrb	r3, [r7, #27]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d108      	bne.n	8005c84 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8005c78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c7c:	e07a      	b.n	8005d74 <SetTargetData+0x5d8>
 8005c7e:	bf00      	nop
 8005c80:	2000001c 	.word	0x2000001c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8005c8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	dd0f      	ble.n	8005cb2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8005c98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	da08      	bge.n	8005cb2 <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8005ca0:	7efb      	ldrb	r3, [r7, #27]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005cac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cb0:	e060      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8005cb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8005cbc:	425b      	negs	r3, r3
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	da10      	bge.n	8005ce4 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8005cc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8005ccc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	dd08      	ble.n	8005ce4 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8005cd2:	7efb      	ldrb	r3, [r7, #27]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d105      	bne.n	8005ce4 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8005cde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ce2:	e047      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8005cea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	da0c      	bge.n	8005d0c <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8005cf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	dd05      	ble.n	8005d0c <SetTargetData+0x570>
					AddOffset =
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005d06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d0a:	e033      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8005d12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	dd0f      	ble.n	8005d3a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8005d20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	da08      	bge.n	8005d3a <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8005d28:	7efb      	ldrb	r3, [r7, #27]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d105      	bne.n	8005d3a <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8005d34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d38:	e01c      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8005d3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8005d44:	425b      	negs	r3, r3
 8005d46:	429a      	cmp	r2, r3
 8005d48:	da10      	bge.n	8005d6c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8005d4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8005d54:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8005d56:	429a      	cmp	r2, r3
 8005d58:	dd08      	ble.n	8005d6c <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8005d5a:	7efb      	ldrb	r3, [r7, #27]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005d66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d6a:	e003      	b.n	8005d74 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005d72:	e0ae      	b.n	8005ed2 <SetTargetData+0x736>
 8005d74:	e0ad      	b.n	8005ed2 <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8005d7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	dd0f      	ble.n	8005da4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8005d8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	da08      	bge.n	8005da4 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8005d92:	7efb      	ldrb	r3, [r7, #27]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8005d9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005da2:	e090      	b.n	8005ec6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8005da4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8005dae:	425b      	negs	r3, r3
 8005db0:	429a      	cmp	r2, r3
 8005db2:	da10      	bge.n	8005dd6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8005db4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8005dbe:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	dd08      	ble.n	8005dd6 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8005dc4:	7efb      	ldrb	r3, [r7, #27]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8005dd0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005dd4:	e077      	b.n	8005ec6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8005ddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	dd0f      	ble.n	8005e04 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8005dea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	da08      	bge.n	8005e04 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8005df2:	7efb      	ldrb	r3, [r7, #27]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d105      	bne.n	8005e04 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8005dfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e02:	e060      	b.n	8005ec6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8005e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8005e0e:	425b      	negs	r3, r3
 8005e10:	429a      	cmp	r2, r3
 8005e12:	da10      	bge.n	8005e36 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8005e14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8005e1e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8005e20:	429a      	cmp	r2, r3
 8005e22:	dd08      	ble.n	8005e36 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8005e24:	7efb      	ldrb	r3, [r7, #27]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d105      	bne.n	8005e36 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8005e30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e34:	e047      	b.n	8005ec6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8005e3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	da0c      	bge.n	8005e5e <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8005e4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	dd05      	ble.n	8005e5e <SetTargetData+0x6c2>
					AddOffset =
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8005e58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e5c:	e033      	b.n	8005ec6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8005e64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	dd0f      	ble.n	8005e8c <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8005e72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	da08      	bge.n	8005e8c <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8005e7a:	7efb      	ldrb	r3, [r7, #27]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8005e86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e8a:	e01c      	b.n	8005ec6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8005e8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8005e96:	425b      	negs	r3, r3
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	da10      	bge.n	8005ebe <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8005e9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8005ea6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	dd08      	ble.n	8005ebe <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8005eac:	7efb      	ldrb	r3, [r7, #27]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d105      	bne.n	8005ebe <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8005eb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ebc:	e003      	b.n	8005ec6 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005ec4:	e005      	b.n	8005ed2 <SetTargetData+0x736>
 8005ec6:	e004      	b.n	8005ed2 <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8005ece:	e000      	b.n	8005ed2 <SetTargetData+0x736>
			}
		}
 8005ed0:	bf00      	nop

		if (uwr_status) {
 8005ed2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d026      	beq.n	8005f28 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8005eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005edc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ee6:	4413      	add	r3, r2
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	b21a      	sxth	r2, r3
 8005eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eee:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8005ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005efc:	4413      	add	r3, r2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	b21a      	sxth	r2, r3
 8005f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f04:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8005f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f12:	4413      	add	r3, r2
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	b21a      	sxth	r2, r3
 8005f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f1a:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 8005f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f1e:	2201      	movs	r2, #1
 8005f20:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 8005f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f24:	2200      	movs	r2, #0
 8005f26:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8005f28:	787b      	ldrb	r3, [r7, #1]
 8005f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f2c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8005f30:	330c      	adds	r3, #12
 8005f32:	8b39      	ldrh	r1, [r7, #24]
 8005f34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8005f38:	787b      	ldrb	r3, [r7, #1]
 8005f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3c:	7dd1      	ldrb	r1, [r2, #23]
 8005f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005f46:	3320      	adds	r3, #32
 8005f48:	460a      	mov	r2, r1
 8005f4a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8005f4c:	787b      	ldrb	r3, [r7, #1]
 8005f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f50:	7e11      	ldrb	r1, [r2, #24]
 8005f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8005f5a:	3324      	adds	r3, #36	; 0x24
 8005f5c:	460a      	mov	r2, r1
 8005f5e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8005f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005f66:	461a      	mov	r2, r3
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 8005f6e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3748      	adds	r7, #72	; 0x48
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop

08005f7c <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b091      	sub	sp, #68	; 0x44
 8005f80:	af04      	add	r7, sp, #16
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	7c9a      	ldrb	r2, [r3, #18]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	789a      	ldrb	r2, [r3, #2]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	bfa8      	it	ge
 8005fca:	4613      	movge	r3, r2
 8005fcc:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005fd2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	78da      	ldrb	r2, [r3, #3]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005fea:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	7c9b      	ldrb	r3, [r3, #18]
 8005ff8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8005ffc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <SetMeasurementData+0x90>

		iteration = 1;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800600a:	e003      	b.n	8006014 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 800600c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006010:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8006014:	2300      	movs	r3, #0
 8006016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800601a:	e048      	b.n	80060ae <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 800601c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006020:	4613      	mov	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	3308      	adds	r3, #8
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8006030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006034:	224c      	movs	r2, #76	; 0x4c
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	3310      	adds	r3, #16
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	4413      	add	r3, r2
 8006040:	3304      	adds	r3, #4
 8006042:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8006044:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8006048:	2b00      	cmp	r3, #0
 800604a:	d114      	bne.n	8006076 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	7918      	ldrb	r0, [r3, #4]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	7c1b      	ldrb	r3, [r3, #16]
 8006054:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8006058:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	9202      	str	r2, [sp, #8]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	9201      	str	r2, [sp, #4]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4623      	mov	r3, r4
 8006068:	4602      	mov	r2, r0
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff fb96 	bl	800579c <SetTargetData>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	7ddb      	ldrb	r3, [r3, #23]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800608e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006092:	429a      	cmp	r2, r3
 8006094:	da06      	bge.n	80060a4 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	8a9b      	ldrh	r3, [r3, #20]
 800609a:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 800609c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80060a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060a8:	3301      	adds	r3, #1
 80060aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80060ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80060b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d3b0      	bcc.n	800601c <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80060c6:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80060ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80060d2:	e01f      	b.n	8006114 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80060d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80060de:	330c      	adds	r3, #12
 80060e0:	2100      	movs	r1, #0
 80060e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80060e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80060f2:	3320      	adds	r3, #32
 80060f4:	22ff      	movs	r2, #255	; 0xff
 80060f6:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80060f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fe:	4413      	add	r3, r2
 8006100:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800610a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800610e:	3301      	adds	r3, #1
 8006110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006118:	2b03      	cmp	r3, #3
 800611a:	d9db      	bls.n	80060d4 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 800611c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11b      	bne.n	800615c <SetMeasurementData+0x1e0>
 8006124:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006128:	2b00      	cmp	r3, #0
 800612a:	d017      	beq.n	800615c <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 800612c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006130:	4613      	mov	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	3308      	adds	r3, #8
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8006140:	2304      	movs	r3, #4
 8006142:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8006144:	7efb      	ldrb	r3, [r7, #27]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	4413      	add	r3, r2
 800614c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	337e      	adds	r3, #126	; 0x7e
 8006154:	69f9      	ldr	r1, [r7, #28]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff f996 	bl	8005488 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 800615c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8006160:	4618      	mov	r0, r3
 8006162:	3734      	adds	r7, #52	; 0x34
 8006164:	46bd      	mov	sp, r7
 8006166:	bd90      	pop	{r4, r7, pc}

08006168 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3318      	adds	r3, #24
 800617a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8006182:	3308      	adds	r3, #8
 8006184:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8006186:	2280      	movs	r2, #128	; 0x80
 8006188:	21ff      	movs	r1, #255	; 0xff
 800618a:	6838      	ldr	r0, [r7, #0]
 800618c:	f018 ffc4 	bl	801f118 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	2102      	movs	r1, #2
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f002 fc2e 	bl	80089f6 <VL53L1_get_device_results>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 800619e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d118      	bne.n	80061d8 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b07      	cmp	r3, #7
 80061ac:	d002      	beq.n	80061b4 <VL53L1_GetMultiRangingData+0x4c>
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d004      	beq.n	80061bc <VL53L1_GetMultiRangingData+0x54>
 80061b2:	e007      	b.n	80061c4 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2201      	movs	r2, #1
 80061b8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 80061ba:	e006      	b.n	80061ca <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2202      	movs	r2, #2
 80061c0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 80061c2:	e002      	b.n	80061ca <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2200      	movs	r2, #0
 80061c8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fed4 	bl	8005f7c <SetMeasurementData>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80061d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b090      	sub	sp, #64	; 0x40
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 80061f2:	f240 3305 	movw	r3, #773	; 0x305
 80061f6:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3318      	adds	r3, #24
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	3348      	adds	r3, #72	; 0x48
 8006202:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8006204:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006208:	2b00      	cmp	r3, #0
 800620a:	d11c      	bne.n	8006246 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006212:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8006216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 800621a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8e3 	bl	80063ec <VL53L1_run_ref_spad_char>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 800622c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006230:	2b00      	cmp	r3, #0
 8006232:	d108      	bne.n	8006246 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8006234:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fe fb2c 	bl	8004898 <VL53L1_SetPresetMode>
 8006240:	4603      	mov	r3, r0
 8006242:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8006246:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800624a:	f113 0f1d 	cmn.w	r3, #29
 800624e:	d14e      	bne.n	80062ee <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8006250:	f107 0310 	add.w	r3, r7, #16
 8006254:	2206      	movs	r2, #6
 8006256:	2128      	movs	r1, #40	; 0x28
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f00e fbf6 	bl	8014a4a <VL53L1_read_nvm_raw_data>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8006264:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 800626c:	f107 020c 	add.w	r2, r7, #12
 8006270:	2302      	movs	r3, #2
 8006272:	2114      	movs	r1, #20
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f010 fe5f 	bl	8016f38 <VL53L1_WriteMulti>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8006280:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006284:	2b00      	cmp	r3, #0
 8006286:	d105      	bne.n	8006294 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8006288:	7b3a      	ldrb	r2, [r7, #12]
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 800628e:	7b7a      	ldrb	r2, [r7, #13]
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8006294:	f107 0310 	add.w	r3, r7, #16
 8006298:	3310      	adds	r3, #16
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 800629c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d108      	bne.n	80062b6 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 80062a4:	2306      	movs	r3, #6
 80062a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a8:	210d      	movs	r1, #13
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f010 fe44 	bl	8016f38 <VL53L1_WriteMulti>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 80062b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d117      	bne.n	80062ee <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	785a      	ldrb	r2, [r3, #1]
 80062ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062cc:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	789a      	ldrb	r2, [r3, #2]
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	78da      	ldrb	r2, [r3, #3]
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	791a      	ldrb	r2, [r3, #4]
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	795a      	ldrb	r2, [r3, #5]
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 80062ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3740      	adds	r7, #64	; 0x40
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 800630c:	2300      	movs	r3, #0
 800630e:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8006310:	2300      	movs	r3, #0
 8006312:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8006314:	2300      	movs	r3, #0
 8006316:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	2b03      	cmp	r3, #3
 800631c:	d84a      	bhi.n	80063b4 <VL53L1_SmudgeCorrectionEnable+0xb8>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <VL53L1_SmudgeCorrectionEnable+0x28>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006335 	.word	0x08006335
 8006328:	08006355 	.word	0x08006355
 800632c:	08006375 	.word	0x08006375
 8006330:	08006395 	.word	0x08006395
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f004 fbee 	bl	800ab16 <VL53L1_dynamic_xtalk_correction_disable>
 800633a:	4603      	mov	r3, r0
 800633c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f004 fc17 	bl	800ab72 <VL53L1_dynamic_xtalk_correction_apply_disable>
 8006344:	4603      	mov	r3, r0
 8006346:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f004 fc40 	bl	800abce <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800634e:	4603      	mov	r3, r0
 8006350:	733b      	strb	r3, [r7, #12]
		break;
 8006352:	e032      	b.n	80063ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f004 fbc7 	bl	800aae8 <VL53L1_dynamic_xtalk_correction_enable>
 800635a:	4603      	mov	r3, r0
 800635c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f004 fbf0 	bl	800ab44 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8006364:	4603      	mov	r3, r0
 8006366:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f004 fc30 	bl	800abce <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800636e:	4603      	mov	r3, r0
 8006370:	733b      	strb	r3, [r7, #12]
		break;
 8006372:	e022      	b.n	80063ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f004 fbb7 	bl	800aae8 <VL53L1_dynamic_xtalk_correction_enable>
 800637a:	4603      	mov	r3, r0
 800637c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f004 fbe0 	bl	800ab44 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8006384:	4603      	mov	r3, r0
 8006386:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f004 fc09 	bl	800aba0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 800638e:	4603      	mov	r3, r0
 8006390:	733b      	strb	r3, [r7, #12]
		break;
 8006392:	e012      	b.n	80063ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f004 fba7 	bl	800aae8 <VL53L1_dynamic_xtalk_correction_enable>
 800639a:	4603      	mov	r3, r0
 800639c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f004 fbe7 	bl	800ab72 <VL53L1_dynamic_xtalk_correction_apply_disable>
 80063a4:	4603      	mov	r3, r0
 80063a6:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f004 fc10 	bl	800abce <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80063ae:	4603      	mov	r3, r0
 80063b0:	733b      	strb	r3, [r7, #12]
		break;
 80063b2:	e002      	b.n	80063ba <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80063b4:	23fc      	movs	r3, #252	; 0xfc
 80063b6:	73fb      	strb	r3, [r7, #15]
		break;
 80063b8:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 80063ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80063c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80063ce:	7b7b      	ldrb	r3, [r7, #13]
 80063d0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 80063d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 80063da:	7b3b      	ldrb	r3, [r7, #12]
 80063dc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop

080063ec <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 80063ec:	b5b0      	push	{r4, r5, r7, lr}
 80063ee:	b08c      	sub	sp, #48	; 0x30
 80063f0:	af04      	add	r7, sp, #16
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3318      	adds	r3, #24
 80063fe:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006406:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006408:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f007 fc99 	bl	800dd48 <VL53L1_enable_powerforce>
 8006416:	4603      	mov	r3, r0
 8006418:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 800641a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d117      	bne.n	8006452 <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	7858      	ldrb	r0, [r3, #1]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	685c      	ldr	r4, [r3, #4]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	891d      	ldrh	r5, [r3, #8]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	899b      	ldrh	r3, [r3, #12]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	8952      	ldrh	r2, [r2, #10]
 8006436:	69b9      	ldr	r1, [r7, #24]
 8006438:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 800643c:	9102      	str	r1, [sp, #8]
 800643e:	9201      	str	r2, [sp, #4]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	462b      	mov	r3, r5
 8006444:	4622      	mov	r2, r4
 8006446:	4601      	mov	r1, r0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f009 fbda 	bl	800fc02 <VL53L1_set_ref_spad_char_config>
 800644e:	4603      	mov	r3, r0
 8006450:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8006452:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f891 	bl	8006588 <VL53L1_run_device_test>
 8006466:	4603      	mov	r3, r0
 8006468:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 800646a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d108      	bne.n	8006484 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8006472:	f107 020c 	add.w	r2, r7, #12
 8006476:	2302      	movs	r3, #2
 8006478:	21d9      	movs	r1, #217	; 0xd9
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f010 fd92 	bl	8016fa4 <VL53L1_ReadMulti>
 8006480:	4603      	mov	r3, r0
 8006482:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8006484:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 800648c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006494:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8006498:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 80064a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d108      	bne.n	80064be <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 80064ac:	f107 020c 	add.w	r2, r7, #12
 80064b0:	2302      	movs	r3, #2
 80064b2:	2114      	movs	r1, #20
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f010 fd3f 	bl	8016f38 <VL53L1_WriteMulti>
 80064ba:	4603      	mov	r3, r0
 80064bc:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 80064be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d107      	bne.n	80064d6 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 80064c6:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 80064ce:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 80064d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d108      	bne.n	80064f0 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 80064de:	f107 020c 	add.w	r2, r7, #12
 80064e2:	2306      	movs	r3, #6
 80064e4:	21ac      	movs	r1, #172	; 0xac
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f010 fd5c 	bl	8016fa4 <VL53L1_ReadMulti>
 80064ec:	4603      	mov	r3, r0
 80064ee:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 80064f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d108      	bne.n	800650a <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 80064f8:	f107 020c 	add.w	r2, r7, #12
 80064fc:	2306      	movs	r3, #6
 80064fe:	210d      	movs	r1, #13
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f010 fd19 	bl	8016f38 <VL53L1_WriteMulti>
 8006506:	4603      	mov	r3, r0
 8006508:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 800650a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d117      	bne.n	8006542 <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8006512:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 800651a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8006522:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 800652a:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8006532:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 800653a:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8006542:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d114      	bne.n	8006574 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8006550:	2b10      	cmp	r3, #16
 8006552:	d00c      	beq.n	800656e <VL53L1_run_ref_spad_char+0x182>
 8006554:	2b10      	cmp	r3, #16
 8006556:	dc0e      	bgt.n	8006576 <VL53L1_run_ref_spad_char+0x18a>
 8006558:	2b0e      	cmp	r3, #14
 800655a:	d002      	beq.n	8006562 <VL53L1_run_ref_spad_char+0x176>
 800655c:	2b0f      	cmp	r3, #15
 800655e:	d003      	beq.n	8006568 <VL53L1_run_ref_spad_char+0x17c>
 8006560:	e009      	b.n	8006576 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8006562:	23e4      	movs	r3, #228	; 0xe4
 8006564:	77fb      	strb	r3, [r7, #31]
			break;
 8006566:	e006      	b.n	8006576 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8006568:	23e3      	movs	r3, #227	; 0xe3
 800656a:	77fb      	strb	r3, [r7, #31]
			break;
 800656c:	e003      	b.n	8006576 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 800656e:	23e2      	movs	r3, #226	; 0xe2
 8006570:	77fb      	strb	r3, [r7, #31]
			break;
 8006572:	e000      	b.n	8006576 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8006574:	bf00      	nop



	*pcal_status = status;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	7ffa      	ldrb	r2, [r7, #31]
 800657a:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 800657c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3720      	adds	r7, #32
 8006584:	46bd      	mov	sp, r7
 8006586:	bdb0      	pop	{r4, r5, r7, pc}

08006588 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3318      	adds	r3, #24
 800659c:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 80065a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d108      	bne.n	80065bc <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 80065aa:	f107 030b 	add.w	r3, r7, #11
 80065ae:	461a      	mov	r2, r3
 80065b0:	2130      	movs	r1, #48	; 0x30
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f010 fd88 	bl	80170c8 <VL53L1_RdByte>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 80065bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 80065c4:	7afa      	ldrb	r2, [r7, #11]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 80065cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f007 fb39 	bl	800dc50 <VL53L1_start_test>
 80065de:	4603      	mov	r3, r0
 80065e0:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 80065e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f00f ff5c 	bl	80164a8 <VL53L1_wait_for_test_completion>
 80065f0:	4603      	mov	r3, r0
 80065f2:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 80065f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d108      	bne.n	800660e <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 80065fc:	f107 020c 	add.w	r2, r7, #12
 8006600:	2302      	movs	r3, #2
 8006602:	2189      	movs	r1, #137	; 0x89
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f010 fccd 	bl	8016fa4 <VL53L1_ReadMulti>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 800660e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8006616:	7b3a      	ldrb	r2, [r7, #12]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 800661e:	7b7a      	ldrb	r2, [r7, #13]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	b2da      	uxtb	r2, r3
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8006638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d108      	bne.n	8006652 <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8006640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f007 fba1 	bl	800dd90 <VL53L1_clear_interrupt>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8006652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 800665a:	2100      	movs	r1, #0
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f007 faf7 	bl	800dc50 <VL53L1_start_test>
 8006662:	4603      	mov	r3, r0
 8006664:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8006666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b21      	cmp	r3, #33	; 0x21
 8006686:	d006      	beq.n	8006696 <select_offset_per_vcsel+0x24>
 8006688:	2b21      	cmp	r3, #33	; 0x21
 800668a:	dc2b      	bgt.n	80066e4 <select_offset_per_vcsel+0x72>
 800668c:	2b1b      	cmp	r3, #27
 800668e:	d01c      	beq.n	80066ca <select_offset_per_vcsel+0x58>
 8006690:	2b1e      	cmp	r3, #30
 8006692:	d00d      	beq.n	80066b0 <select_offset_per_vcsel+0x3e>
 8006694:	e026      	b.n	80066e4 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669c:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 80066a0:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a8:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 80066ac:	817b      	strh	r3, [r7, #10]
		break;
 80066ae:	e02b      	b.n	8006708 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b6:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 80066ba:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c2:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 80066c6:	817b      	strh	r3, [r7, #10]
		break;
 80066c8:	e01e      	b.n	8006708 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d0:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 80066d4:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066dc:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 80066e0:	817b      	strh	r3, [r7, #10]
		break;
 80066e2:	e011      	b.n	8006708 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ea:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 80066ee:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f6:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 80066fa:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80066fc:	23fc      	movs	r3, #252	; 0xfc
 80066fe:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	801a      	strh	r2, [r3, #0]
		break;
 8006706:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800670e:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8006710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8006718:	7a7b      	ldrb	r3, [r7, #9]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <select_offset_per_vcsel+0xb6>
 8006722:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006726:	e001      	b.n	800672c <select_offset_per_vcsel+0xba>
 8006728:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	8013      	strh	r3, [r2, #0]

	return status;
 8006730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8006740:	b490      	push	{r4, r7}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	4611      	mov	r1, r2
 800674c:	461a      	mov	r2, r3
 800674e:	460b      	mov	r3, r1
 8006750:	71fb      	strb	r3, [r7, #7]
 8006752:	4613      	mov	r3, r2
 8006754:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	b29b      	uxth	r3, r3
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006772:	e021      	b.n	80067b8 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8006774:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	461a      	mov	r2, r3
 8006780:	0052      	lsls	r2, r2, #1
 8006782:	441a      	add	r2, r3
 8006784:	00d3      	lsls	r3, r2, #3
 8006786:	461a      	mov	r2, r3
 8006788:	460b      	mov	r3, r1
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	440b      	add	r3, r1
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	4413      	add	r3, r2
 8006792:	4423      	add	r3, r4
 8006794:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8006798:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	4413      	add	r3, r2
 80067a0:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80067a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	3206      	adds	r2, #6
 80067a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80067b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067b4:	3301      	adds	r3, #1
 80067b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067b8:	79bb      	ldrb	r3, [r7, #6]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067be:	429a      	cmp	r2, r3
 80067c0:	d3d8      	bcc.n	8006774 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d047      	beq.n	8006858 <vl53l1_diff_histo_stddev+0x118>
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d044      	beq.n	8006858 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067d6:	e03a      	b.n	800684e <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80067d8:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	461a      	mov	r2, r3
 80067e4:	0052      	lsls	r2, r2, #1
 80067e6:	441a      	add	r2, r3
 80067e8:	00d3      	lsls	r3, r2, #3
 80067ea:	461a      	mov	r2, r3
 80067ec:	460b      	mov	r3, r1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	440b      	add	r3, r1
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	4413      	add	r3, r2
 80067f6:	4423      	add	r3, r4
 80067f8:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80067fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006800:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006808:	fb03 f202 	mul.w	r2, r3, r2
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006812:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8006814:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3206      	adds	r2, #6
 800681a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006822:	fb03 f202 	mul.w	r2, r3, r2
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	fb92 f3f3 	sdiv	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8006838:	69b8      	ldr	r0, [r7, #24]
 800683a:	6979      	ldr	r1, [r7, #20]
 800683c:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	441a      	add	r2, r3
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8006848:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800684a:	3301      	adds	r3, #1
 800684c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800684e:	79bb      	ldrb	r3, [r7, #6]
 8006850:	b29b      	uxth	r3, r3
 8006852:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006854:	429a      	cmp	r2, r3
 8006856:	d3bf      	bcc.n	80067d8 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8006858:	bf00      	nop
 800685a:	3728      	adds	r7, #40	; 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bc90      	pop	{r4, r7}
 8006860:	4770      	bx	lr

08006862 <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8006862:	b5b0      	push	{r4, r5, r7, lr}
 8006864:	b08c      	sub	sp, #48	; 0x30
 8006866:	af02      	add	r7, sp, #8
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3318      	adds	r3, #24
 8006870:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8006880:	2300      	movs	r3, #0
 8006882:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8006886:	2300      	movs	r3, #0
 8006888:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006892:	2318      	movs	r3, #24
 8006894:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8006896:	f107 0314 	add.w	r3, r7, #20
 800689a:	461a      	mov	r2, r3
 800689c:	f248 018f 	movw	r1, #32911	; 0x808f
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f003 f9fb 	bl	8009c9c <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80068a6:	f107 0310 	add.w	r3, r7, #16
 80068aa:	461a      	mov	r2, r3
 80068ac:	f248 018e 	movw	r1, #32910	; 0x808e
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f003 f9f3 	bl	8009c9c <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068bc:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f040 811b 	bne.w	8006afc <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 80068e0:	7efb      	ldrb	r3, [r7, #27]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	7eba      	ldrb	r2, [r7, #26]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f2:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006900:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006904:	3b01      	subs	r3, #1
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	e004      	b.n	8006916 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8006916:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800691a:	7efb      	ldrb	r3, [r7, #27]
 800691c:	69f8      	ldr	r0, [r7, #28]
 800691e:	461a      	mov	r2, r3
 8006920:	0052      	lsls	r2, r2, #1
 8006922:	441a      	add	r2, r3
 8006924:	0153      	lsls	r3, r2, #5
 8006926:	461a      	mov	r2, r3
 8006928:	460b      	mov	r3, r1
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	440b      	add	r3, r1
 800692e:	019b      	lsls	r3, r3, #6
 8006930:	4413      	add	r3, r2
 8006932:	4403      	add	r3, r0
 8006934:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8006938:	3308      	adds	r3, #8
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	dd0c      	ble.n	800695a <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8006940:	7e79      	ldrb	r1, [r7, #25]
 8006942:	7efa      	ldrb	r2, [r7, #27]
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	460b      	mov	r3, r1
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	69f8      	ldr	r0, [r7, #28]
 8006956:	f7ff fef3 	bl	8006740 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	429a      	cmp	r2, r3
 8006960:	db23      	blt.n	80069aa <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006968:	3318      	adds	r3, #24
 800696a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f018 fbd1 	bl	801f118 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8006988:	7efb      	ldrb	r3, [r7, #27]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006994:	2206      	movs	r2, #6
 8006996:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 800699a:	e034      	b.n	8006a06 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a2:	2207      	movs	r2, #7
 80069a4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80069a8:	e02d      	b.n	8006a06 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b0:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80069b4:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80069b6:	2300      	movs	r3, #0
 80069b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80069bc:	e01e      	b.n	80069fc <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80069be:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80069c2:	7e39      	ldrb	r1, [r7, #24]
 80069c4:	7efb      	ldrb	r3, [r7, #27]
 80069c6:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	3006      	adds	r0, #6
 80069ce:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80069d2:	69f8      	ldr	r0, [r7, #28]
 80069d4:	461a      	mov	r2, r3
 80069d6:	0052      	lsls	r2, r2, #1
 80069d8:	441a      	add	r2, r3
 80069da:	00d3      	lsls	r3, r2, #3
 80069dc:	461a      	mov	r2, r3
 80069de:	460b      	mov	r3, r1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	440b      	add	r3, r1
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	4413      	add	r3, r2
 80069e8:	442b      	add	r3, r5
 80069ea:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80069ee:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80069f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80069f6:	3301      	adds	r3, #1
 80069f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80069fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006a00:	7ebb      	ldrb	r3, [r7, #26]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3db      	bcc.n	80069be <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006a10:	461a      	mov	r2, r3
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d109      	bne.n	8006a2e <vl53l1_histo_merge+0x1cc>
 8006a1a:	7efb      	ldrb	r3, [r7, #27]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d106      	bne.n	8006a2e <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8006a2c:	e00e      	b.n	8006a4c <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 8006a2e:	7efb      	ldrb	r3, [r7, #27]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d10b      	bne.n	8006a4c <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8006a3e:	3301      	adds	r3, #1
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a48:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8006a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d102      	bne.n	8006a5a <vl53l1_histo_merge+0x1f8>
 8006a54:	7efb      	ldrb	r3, [r7, #27]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d069      	beq.n	8006b2e <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a60:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d162      	bne.n	8006b2e <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a6c:	e008      	b.n	8006a80 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8006a6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	3206      	adds	r2, #6
 8006a74:	2100      	movs	r1, #0
 8006a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8006a7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a80:	7ebb      	ldrb	r3, [r7, #26]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3f1      	bcc.n	8006a6e <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a8e:	e02f      	b.n	8006af0 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006a96:	e023      	b.n	8006ae0 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8006a98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3206      	adds	r2, #6
 8006a9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8006aa2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006aa6:	7efb      	ldrb	r3, [r7, #27]
 8006aa8:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8006aaa:	69fc      	ldr	r4, [r7, #28]
 8006aac:	461a      	mov	r2, r3
 8006aae:	0052      	lsls	r2, r2, #1
 8006ab0:	441a      	add	r2, r3
 8006ab2:	00d3      	lsls	r3, r2, #3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	440b      	add	r3, r1
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	4413      	add	r3, r2
 8006ac0:	442b      	add	r3, r5
 8006ac2:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8006ac6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8006aca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006acc:	18c1      	adds	r1, r0, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	3206      	adds	r2, #6
 8006ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8006ad6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006ada:	3301      	adds	r3, #1
 8006adc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006ae0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	dbd6      	blt.n	8006a98 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8006aea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aec:	3301      	adds	r3, #1
 8006aee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006af0:	7ebb      	ldrb	r3, [r7, #26]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d3ca      	bcc.n	8006a90 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8006afa:	e018      	b.n	8006b2e <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b02:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b10:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b1a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8006b1e:	2bff      	cmp	r3, #255	; 0xff
 8006b20:	d105      	bne.n	8006b2e <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 8006b2e:	bf00      	nop
 8006b30:	3728      	adds	r7, #40	; 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006b38 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b0c6      	sub	sp, #280	; 0x118
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b46:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8006b54:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8006b5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b64:	2200      	movs	r2, #0
 8006b66:	2185      	movs	r1, #133	; 0x85
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f010 fa51 	bl	8017010 <VL53L1_WrByte>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8006b74:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d106      	bne.n	8006b8a <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8006b7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	f007 f8df 	bl	800dd48 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8006b8a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8006b8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b96:	f248 018c 	movw	r1, #32908	; 0x808c
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	f003 f87e 	bl	8009c9c <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8006ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d81b      	bhi.n	8006be0 <VL53L1_load_patch+0xa8>
 8006ba8:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <VL53L1_load_patch+0x78>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006bc9 	.word	0x08006bc9
 8006bb8:	08006bd1 	.word	0x08006bd1
 8006bbc:	08006bd9 	.word	0x08006bd9
	case 0:
		patch_power = 0x00;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006bc6:	e00e      	b.n	8006be6 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006bce:	e00a      	b.n	8006be6 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8006bd0:	2320      	movs	r3, #32
 8006bd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006bd6:	e006      	b.n	8006be6 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8006bde:	e002      	b.n	8006be6 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 8006be6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d134      	bne.n	8006c58 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8006bee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006bf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bf6:	2229      	movs	r2, #41	; 0x29
 8006bf8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8006bfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c02:	22c9      	movs	r2, #201	; 0xc9
 8006c04:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8006c06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c0e:	220e      	movs	r2, #14
 8006c10:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8006c12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c1a:	2240      	movs	r2, #64	; 0x40
 8006c1c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8006c1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c26:	2228      	movs	r2, #40	; 0x28
 8006c28:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8006c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c38:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8006c3a:	f107 020c 	add.w	r2, r7, #12
 8006c3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c42:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006c46:	2306      	movs	r3, #6
 8006c48:	f240 4176 	movw	r1, #1142	; 0x476
 8006c4c:	6800      	ldr	r0, [r0, #0]
 8006c4e:	f010 f973 	bl	8016f38 <VL53L1_WriteMulti>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006c58:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d132      	bne.n	8006cc6 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8006c60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c68:	2203      	movs	r2, #3
 8006c6a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8006c6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c74:	226d      	movs	r2, #109	; 0x6d
 8006c76:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8006c78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c80:	2203      	movs	r2, #3
 8006c82:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8006c84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c8c:	226f      	movs	r2, #111	; 0x6f
 8006c8e:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8006c90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c98:	2207      	movs	r2, #7
 8006c9a:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8006c9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ca0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ca4:	2229      	movs	r2, #41	; 0x29
 8006ca6:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8006ca8:	f107 020c 	add.w	r2, r7, #12
 8006cac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006cb0:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006cb4:	2306      	movs	r3, #6
 8006cb6:	f240 4196 	movw	r1, #1174	; 0x496
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	f010 f93c 	bl	8016f38 <VL53L1_WriteMulti>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006cc6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d11a      	bne.n	8006d04 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8006cce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006cd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8006cda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006cde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ce2:	2207      	movs	r2, #7
 8006ce4:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8006ce6:	f107 020c 	add.w	r2, r7, #12
 8006cea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006cee:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	f240 4172 	movw	r1, #1138	; 0x472
 8006cf8:	6800      	ldr	r0, [r0, #0]
 8006cfa:	f010 f91d 	bl	8016f38 <VL53L1_WriteMulti>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006d04:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d11a      	bne.n	8006d42 <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8006d0c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d14:	2200      	movs	r2, #0
 8006d16:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8006d18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d20:	2207      	movs	r2, #7
 8006d22:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8006d24:	f107 020c 	add.w	r2, r7, #12
 8006d28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d2c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006d30:	2302      	movs	r3, #2
 8006d32:	f240 4174 	movw	r1, #1140	; 0x474
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	f010 f8fe 	bl	8016f38 <VL53L1_WriteMulti>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 8006d42:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10c      	bne.n	8006d64 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8006d4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006d52:	2201      	movs	r2, #1
 8006d54:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	f010 f959 	bl	8017010 <VL53L1_WrByte>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8006d64:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8006d6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006d74:	2201      	movs	r2, #1
 8006d76:	2185      	movs	r1, #133	; 0x85
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	f010 f949 	bl	8017010 <VL53L1_WrByte>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8006d84:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop

08006d94 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8006da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8006da8:	2200      	movs	r2, #0
 8006daa:	2185      	movs	r1, #133	; 0x85
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f010 f92f 	bl	8017010 <VL53L1_WrByte>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8006db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f006 ffd4 	bl	800dd6c <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 8006dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d107      	bne.n	8006ddc <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f010 f91c 	bl	8017010 <VL53L1_WrByte>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8006ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 8006de4:	2201      	movs	r2, #1
 8006de6:	2185      	movs	r1, #133	; 0x85
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f010 f911 	bl	8017010 <VL53L1_WrByte>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8006df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8006dfe:	b5b0      	push	{r4, r5, r7, lr}
 8006e00:	b08a      	sub	sp, #40	; 0x28
 8006e02:	af04      	add	r7, sp, #16
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3318      	adds	r3, #24
 8006e12:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 8006e22:	2162      	movs	r1, #98	; 0x62
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f006 f810 	bl	800ce4a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2210      	movs	r2, #16
 8006e3a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006e46:	2300      	movs	r3, #0
 8006e48:	75bb      	strb	r3, [r7, #22]
 8006e4a:	e01b      	b.n	8006e84 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8006e4c:	7dba      	ldrb	r2, [r7, #22]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3308      	adds	r3, #8
 8006e60:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006e7e:	7dbb      	ldrb	r3, [r7, #22]
 8006e80:	3301      	adds	r3, #1
 8006e82:	75bb      	strb	r3, [r7, #22]
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d9e0      	bls.n	8006e4c <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75bb      	strb	r3, [r7, #22]
 8006eae:	e039      	b.n	8006f24 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 8006eb0:	7dba      	ldrb	r2, [r7, #22]
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 8006ec6:	7dba      	ldrb	r2, [r7, #22]
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8006edc:	7dba      	ldrb	r2, [r7, #22]
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 8006ef2:	7dba      	ldrb	r2, [r7, #22]
 8006ef4:	68f9      	ldr	r1, [r7, #12]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8006f08:	7dba      	ldrb	r2, [r7, #22]
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006f1e:	7dbb      	ldrb	r3, [r7, #22]
 8006f20:	3301      	adds	r3, #1
 8006f22:	75bb      	strb	r3, [r7, #22]
 8006f24:	7dbb      	ldrb	r3, [r7, #22]
 8006f26:	2b0f      	cmp	r3, #15
 8006f28:	d9c2      	bls.n	8006eb0 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2201      	movs	r2, #1
 8006f34:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2201      	movs	r2, #1
 8006f46:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2201      	movs	r2, #1
 8006f52:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f5a:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006f62:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006f6a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2264      	movs	r2, #100	; 0x64
 8006f70:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006f78:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f88:	2203      	movs	r2, #3
 8006f8a:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f240 72db 	movw	r2, #2011	; 0x7db
 8006fa0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006faa:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f005 ff2e 	bl	800ce10 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006fba:	3318      	adds	r3, #24
 8006fbc:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f018 f8a8 	bl	801f118 <memset>
	pdev->bin_rec_pos = 0;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d008      	beq.n	8006ff8 <VL53L1_data_init+0x1fa>
 8006fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d104      	bne.n	8006ff8 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8b8 	bl	8007164 <VL53L1_read_p2p_data>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8006ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d107      	bne.n	8007010 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8007006:	4618      	mov	r0, r3
 8007008:	f003 fdf8 	bl	800abfc <VL53L1_init_refspadchar_config_struct>
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8007010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d107      	bne.n	8007028 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800701e:	4618      	mov	r0, r3
 8007020:	f003 fe10 	bl	800ac44 <VL53L1_init_ssc_config_struct>
 8007024:	4603      	mov	r3, r0
 8007026:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f003 fe21 	bl	800ac86 <VL53L1_init_xtalk_config_struct>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d107      	bne.n	8007060 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8007056:	4618      	mov	r0, r3
 8007058:	f003 fe89 	bl	800ad6e <VL53L1_init_xtalk_extract_config_struct>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007060:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d107      	bne.n	8007078 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800706e:	4618      	mov	r0, r3
 8007070:	f003 feac 	bl	800adcc <VL53L1_init_offset_cal_config_struct>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d107      	bne.n	8007090 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8007086:	4618      	mov	r0, r3
 8007088:	f003 fec7 	bl	800ae1a <VL53L1_init_zone_cal_config_struct>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8007090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f003 fedb 	bl	800ae62 <VL53L1_init_hist_post_process_config_struct>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80070b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d107      	bne.n	80070c8 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80070be:	4618      	mov	r0, r3
 80070c0:	f004 f8f6 	bl	800b2b0 <VL53L1_init_hist_gen3_dmax_config_struct>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80070c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d107      	bne.n	80070e0 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80070d6:	4618      	mov	r0, r3
 80070d8:	f003 ff32 	bl	800af40 <VL53L1_init_tuning_parm_storage_struct>
 80070dc:	4603      	mov	r3, r0
 80070de:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 80070e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d116      	bne.n	8007116 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	7858      	ldrb	r0, [r3, #1]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	8b1c      	ldrh	r4, [r3, #24]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	689d      	ldr	r5, [r3, #8]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	6912      	ldr	r2, [r2, #16]
 80070fc:	6939      	ldr	r1, [r7, #16]
 80070fe:	6949      	ldr	r1, [r1, #20]
 8007100:	9102      	str	r1, [sp, #8]
 8007102:	9201      	str	r2, [sp, #4]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	462b      	mov	r3, r5
 8007108:	4622      	mov	r2, r4
 800710a:	4601      	mov	r1, r0
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc8f 	bl	8007a30 <VL53L1_set_preset_mode>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800711c:	461a      	mov	r2, r3
 800711e:	2118      	movs	r1, #24
 8007120:	2000      	movs	r0, #0
 8007122:	f00a fa90 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800712c:	461a      	mov	r2, r3
 800712e:	2118      	movs	r1, #24
 8007130:	2000      	movs	r0, #0
 8007132:	f00a fa88 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800713c:	461a      	mov	r2, r3
 800713e:	210c      	movs	r1, #12
 8007140:	2000      	movs	r0, #0
 8007142:	f006 fc26 	bl	800d992 <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f009 fcd2 	bl	8010af0 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f009 fbd1 	bl	80108f4 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f009 fcf7 	bl	8010b46 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8007158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bdb0      	pop	{r4, r5, r7, pc}

08007164 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b091      	sub	sp, #68	; 0x44
 8007168:	af04      	add	r7, sp, #16
 800716a:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800716c:	2300      	movs	r3, #0
 800716e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3318      	adds	r3, #24
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	3348      	adds	r3, #72	; 0x48
 8007184:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	339c      	adds	r3, #156	; 0x9c
 800718a:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800718c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f00d fdd1 	bl	8014d44 <VL53L1_get_static_nvm_managed>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80071a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d108      	bne.n	80071c2 <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	3348      	adds	r3, #72	; 0x48
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f00d ff02 	bl	8014fc0 <VL53L1_get_customer_nvm_managed>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80071c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d117      	bne.n	80071fa <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f00e fdda 	bl	8015d8c <VL53L1_get_nvm_copy_data>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 80071de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f006 f921 	bl	800d43c <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 80071fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10e      	bne.n	8007220 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	895b      	ldrh	r3, [r3, #10]
 8007206:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8007220:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007224:	2b00      	cmp	r3, #0
 8007226:	d108      	bne.n	800723a <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	33c0      	adds	r3, #192	; 0xc0
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f00d fc3c 	bl	8014aac <VL53L1_read_nvm_optical_centre>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 800723a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	3360      	adds	r3, #96	; 0x60
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f00d fc52 	bl	8014af2 <VL53L1_read_nvm_cal_peak_rate_map>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8007254:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007258:	2b00      	cmp	r3, #0
 800725a:	d12d      	bne.n	80072b8 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	339c      	adds	r3, #156	; 0x9c
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f00d fc6b 	bl	8014b3e <VL53L1_read_nvm_additional_offset_cal_data>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	889b      	ldrh	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d120      	bne.n	80072b8 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800727a:	2b00      	cmp	r3, #0
 800727c:	d11c      	bne.n	80072b8 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2280      	movs	r2, #128	; 0x80
 8007282:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800728a:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	69f9      	ldr	r1, [r7, #28]
 80072a2:	3102      	adds	r1, #2
 80072a4:	9103      	str	r1, [sp, #12]
 80072a6:	9202      	str	r2, [sp, #8]
 80072a8:	2238      	movs	r2, #56	; 0x38
 80072aa:	9201      	str	r2, [sp, #4]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	23ff      	movs	r3, #255	; 0xff
 80072b0:	22c7      	movs	r2, #199	; 0xc7
 80072b2:	4621      	mov	r1, r4
 80072b4:	f008 f934 	bl	800f520 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 80072b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d12f      	bne.n	8007320 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 80072c0:	f107 030c 	add.w	r3, r7, #12
 80072c4:	461a      	mov	r2, r3
 80072c6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f00d fc5a 	bl	8014b84 <VL53L1_read_nvm_fmt_range_results_data>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 80072d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d120      	bne.n	8007320 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 80072de:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 80072e6:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80072ee:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d006      	beq.n	800730e <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800730c:	e003      	b.n	8007316 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	2214      	movs	r2, #20
 8007312:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800731c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8007320:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10b      	bne.n	8007340 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800732e:	3308      	adds	r3, #8
 8007330:	461a      	mov	r2, r3
 8007332:	21de      	movs	r1, #222	; 0xde
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f00f fefb 	bl	8017130 <VL53L1_RdWord>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d204      	bcs.n	8007356 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8007352:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8007356:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800735a:	2b00      	cmp	r3, #0
 800735c:	d108      	bne.n	8007370 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	33bc      	adds	r3, #188	; 0xbc
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f97d 	bl	8007664 <VL53L1_get_mode_mitigation_roi>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d114      	bne.n	80073a4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10f      	bne.n	80073a4 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80073a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3734      	adds	r7, #52	; 0x34
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd90      	pop	{r4, r7, pc}

080073b0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3318      	adds	r3, #24
 80073c2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ca:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80073d2:	23f1      	movs	r3, #241	; 0xf1
 80073d4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80073d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10e      	bne.n	80073fc <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ea:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 80073ee:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 80073fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3318      	adds	r3, #24
 800741e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007426:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800742e:	23f1      	movs	r3, #241	; 0xf1
 8007430:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8007432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007446:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 800744a:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8007452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b088      	sub	sp, #32
 8007466:	af02      	add	r7, sp, #8
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007470:	2300      	movs	r3, #0
 8007472:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3318      	adds	r3, #24
 8007478:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8007484:	23f1      	movs	r3, #241	; 0xf1
 8007486:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8007488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d11b      	bne.n	80074c8 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f203 3362 	addw	r3, r3, #866	; 0x362
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	f502 725e 	add.w	r2, r2, #888	; 0x378
 80074b4:	9201      	str	r2, [sp, #4]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	460b      	mov	r3, r1
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	f006 fe0b 	bl	800e0da <VL53L1_calc_timeout_register_values>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80074c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3318      	adds	r3, #24
 80074ea:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80074fe:	23f1      	movs	r3, #241	; 0xf1
 8007500:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8007502:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d14a      	bne.n	80075a0 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f006 fc56 	bl	800ddca <VL53L1_calc_macro_period_us>
 800751e:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8007526:	6979      	ldr	r1, [r7, #20]
 8007528:	4618      	mov	r0, r3
 800752a:	f006 fd14 	bl	800df56 <VL53L1_calc_timeout_us>
 800752e:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 800753a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800753c:	8a7b      	ldrh	r3, [r7, #18]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8007548:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800754a:	4413      	add	r3, r2
 800754c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800754e:	8a7b      	ldrh	r3, [r7, #18]
 8007550:	6979      	ldr	r1, [r7, #20]
 8007552:	4618      	mov	r0, r3
 8007554:	f006 fd66 	bl	800e024 <VL53L1_calc_decoded_timeout_us>
 8007558:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8007564:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8007566:	8a7b      	ldrh	r3, [r7, #18]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8007572:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8007574:	4413      	add	r3, r2
 8007576:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8007578:	8a7b      	ldrh	r3, [r7, #18]
 800757a:	6979      	ldr	r1, [r7, #20]
 800757c:	4618      	mov	r0, r3
 800757e:	f006 fd51 	bl	800e024 <VL53L1_calc_decoded_timeout_us>
 8007582:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80075a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	460b      	mov	r3, r1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3318      	adds	r3, #24
 80075c2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 80075c4:	2301      	movs	r3, #1
 80075c6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	2b07      	cmp	r3, #7
 80075cc:	d81c      	bhi.n	8007608 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	2201      	movs	r2, #1
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 80075e4:	7dbb      	ldrb	r3, [r7, #22]
 80075e6:	4013      	ands	r3, r2
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	fa42 f303 	asr.w	r3, r2, r3
 8007600:	b2da      	uxtb	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	701a      	strb	r2, [r3, #0]
 8007606:	e001      	b.n	800760c <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007608:	23fc      	movs	r3, #252	; 0xfc
 800760a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800760c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007610:	4618      	mov	r0, r3
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3318      	adds	r3, #24
 800762e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	7858      	ldrb	r0, [r3, #1]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	7819      	ldrb	r1, [r3, #0]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f203 339f 	addw	r3, r3, #927	; 0x39f
 800763e:	461a      	mov	r2, r3
 8007640:	f007 fdeb 	bl	800f21a <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	7898      	ldrb	r0, [r3, #2]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	78d9      	ldrb	r1, [r3, #3]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8007652:	461a      	mov	r2, r3
 8007654:	f007 fe20 	bl	800f298 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8007658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800766e:	2300      	movs	r3, #0
 8007670:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3318      	adds	r3, #24
 8007676:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800768a:	f107 020e 	add.w	r2, r7, #14
 800768e:	f107 010d 	add.w	r1, r7, #13
 8007692:	4618      	mov	r0, r3
 8007694:	f00a f880 	bl	8011798 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8007698:	7bba      	ldrb	r2, [r7, #14]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800769e:	7b7a      	ldrb	r2, [r7, #13]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 80076aa:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80076c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3318      	adds	r3, #24
 80076e0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f103 00de 	add.w	r0, r3, #222	; 0xde
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	331c      	adds	r3, #28
 80076ec:	2240      	movs	r2, #64	; 0x40
 80076ee:	4619      	mov	r1, r3
 80076f0:	f017 fcea 	bl	801f0c8 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	785a      	ldrb	r2, [r3, #1]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	33c2      	adds	r3, #194	; 0xc2
 800770c:	4618      	mov	r0, r3
 800770e:	f00f fbce 	bl	8016eae <VL53L1_init_zone_config_histogram_bins>
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8007726:	e00f      	b.n	8007748 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d807      	bhi.n	8007740 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	3301      	adds	r3, #1
 8007736:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800773e:	e003      	b.n	8007748 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2211      	movs	r2, #17
 8007744:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8007748:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3318      	adds	r3, #24
 8007766:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	33c2      	adds	r3, #194	; 0xc2
 800776c:	226c      	movs	r2, #108	; 0x6c
 800776e:	4619      	mov	r1, r3
 8007770:	6838      	ldr	r0, [r7, #0]
 8007772:	f017 fca9 	bl	801f0c8 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8007776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	460b      	mov	r3, r1
 8007792:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007794:	2300      	movs	r3, #0
 8007796:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3318      	adds	r3, #24
 800779c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800779e:	7afb      	ldrb	r3, [r7, #11]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	2b26      	cmp	r3, #38	; 0x26
 80077a4:	f200 8139 	bhi.w	8007a1a <VL53L1_get_preset_mode_timing_cfg+0x296>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	0800784d 	.word	0x0800784d
 80077b4:	0800784d 	.word	0x0800784d
 80077b8:	0800784d 	.word	0x0800784d
 80077bc:	0800784d 	.word	0x0800784d
 80077c0:	0800784d 	.word	0x0800784d
 80077c4:	08007877 	.word	0x08007877
 80077c8:	08007877 	.word	0x08007877
 80077cc:	08007877 	.word	0x08007877
 80077d0:	08007a1b 	.word	0x08007a1b
 80077d4:	08007a1b 	.word	0x08007a1b
 80077d8:	080078cb 	.word	0x080078cb
 80077dc:	08007973 	.word	0x08007973
 80077e0:	080078cb 	.word	0x080078cb
 80077e4:	08007a1b 	.word	0x08007a1b
 80077e8:	08007a1b 	.word	0x08007a1b
 80077ec:	08007a1b 	.word	0x08007a1b
 80077f0:	0800784d 	.word	0x0800784d
 80077f4:	08007877 	.word	0x08007877
 80077f8:	080078cb 	.word	0x080078cb
 80077fc:	080078cb 	.word	0x080078cb
 8007800:	080078cb 	.word	0x080078cb
 8007804:	080078cb 	.word	0x080078cb
 8007808:	080078cb 	.word	0x080078cb
 800780c:	080078f5 	.word	0x080078f5
 8007810:	0800791f 	.word	0x0800791f
 8007814:	08007949 	.word	0x08007949
 8007818:	080078cb 	.word	0x080078cb
 800781c:	080078cb 	.word	0x080078cb
 8007820:	080078cb 	.word	0x080078cb
 8007824:	0800799d 	.word	0x0800799d
 8007828:	0800799d 	.word	0x0800799d
 800782c:	0800799d 	.word	0x0800799d
 8007830:	080079c7 	.word	0x080079c7
 8007834:	080079c7 	.word	0x080079c7
 8007838:	080079c7 	.word	0x080079c7
 800783c:	080078a1 	.word	0x080078a1
 8007840:	080078a1 	.word	0x080078a1
 8007844:	080078a1 	.word	0x080078a1
 8007848:	080079f1 	.word	0x080079f1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	601a      	str	r2, [r3, #0]
	break;
 8007874:	e0d4      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	601a      	str	r2, [r3, #0]
	break;
 800789e:	e0bf      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	601a      	str	r2, [r3, #0]
	break;
 80078c8:	e0aa      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	601a      	str	r2, [r3, #0]

	break;
 80078f2:	e095      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	601a      	str	r2, [r3, #0]
	break;
 800791c:	e080      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	601a      	str	r2, [r3, #0]
	break;
 8007946:	e06b      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	601a      	str	r2, [r3, #0]
	break;
 8007970:	e056      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	601a      	str	r2, [r3, #0]
	break;
 800799a:	e041      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	601a      	str	r2, [r3, #0]
	break;
 80079c4:	e02c      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	601a      	str	r2, [r3, #0]
	break;
 80079ee:	e017      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	601a      	str	r2, [r3, #0]
	break;
 8007a18:	e002      	b.n	8007a20 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007a1a:	23fc      	movs	r3, #252	; 0xfc
 8007a1c:	75fb      	strb	r3, [r7, #23]
		break;
 8007a1e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b098      	sub	sp, #96	; 0x60
 8007a34:	af06      	add	r7, sp, #24
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	607b      	str	r3, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	72fb      	strb	r3, [r7, #11]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3318      	adds	r3, #24
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007a54:	3308      	adds	r3, #8
 8007a56:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007a5e:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8007a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a62:	f203 3342 	addw	r3, r3, #834	; 0x342
 8007a66:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8007a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6a:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8007a6e:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8007a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a72:	f203 3362 	addw	r3, r3, #866	; 0x362
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8007a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8007a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a82:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8007a8e:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8007a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a92:	33c2      	adds	r3, #194	; 0xc2
 8007a94:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8007a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a98:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007a9c:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8007a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8007aa4:	3318      	adds	r3, #24
 8007aa6:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8007aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aaa:	7afa      	ldrb	r2, [r7, #11]
 8007aac:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8007aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ab2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8007ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ab8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8007aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007abe:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8007ac0:	2103      	movs	r1, #3
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f005 f9c1 	bl	800ce4a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	2b26      	cmp	r3, #38	; 0x26
 8007ace:	f200 8321 	bhi.w	8008114 <VL53L1_set_preset_mode+0x6e4>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <VL53L1_set_preset_mode+0xa8>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007b75 	.word	0x08007b75
 8007adc:	08007b99 	.word	0x08007b99
 8007ae0:	08007bbd 	.word	0x08007bbd
 8007ae4:	08007be1 	.word	0x08007be1
 8007ae8:	08007c05 	.word	0x08007c05
 8007aec:	08007c29 	.word	0x08007c29
 8007af0:	08007c4d 	.word	0x08007c4d
 8007af4:	08007c71 	.word	0x08007c71
 8007af8:	08008115 	.word	0x08008115
 8007afc:	08008115 	.word	0x08008115
 8007b00:	08007c95 	.word	0x08007c95
 8007b04:	08007dfd 	.word	0x08007dfd
 8007b08:	08007f8d 	.word	0x08007f8d
 8007b0c:	08007fb5 	.word	0x08007fb5
 8007b10:	08007fdd 	.word	0x08007fdd
 8007b14:	08008005 	.word	0x08008005
 8007b18:	0800802d 	.word	0x0800802d
 8007b1c:	08008051 	.word	0x08008051
 8007b20:	08007dd5 	.word	0x08007dd5
 8007b24:	08007cbd 	.word	0x08007cbd
 8007b28:	08007ce5 	.word	0x08007ce5
 8007b2c:	08007d0d 	.word	0x08007d0d
 8007b30:	08007d35 	.word	0x08007d35
 8007b34:	08007d5d 	.word	0x08007d5d
 8007b38:	08007d85 	.word	0x08007d85
 8007b3c:	08007dad 	.word	0x08007dad
 8007b40:	08007e25 	.word	0x08007e25
 8007b44:	08007e4d 	.word	0x08007e4d
 8007b48:	08007e75 	.word	0x08007e75
 8007b4c:	08007e9d 	.word	0x08007e9d
 8007b50:	08007ec5 	.word	0x08007ec5
 8007b54:	08007eed 	.word	0x08007eed
 8007b58:	08007f15 	.word	0x08007f15
 8007b5c:	08007f3d 	.word	0x08007f3d
 8007b60:	08007f65 	.word	0x08007f65
 8007b64:	08008075 	.word	0x08008075
 8007b68:	0800809d 	.word	0x0800809d
 8007b6c:	080080c5 	.word	0x080080c5
 8007b70:	080080ed 	.word	0x080080ed

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b8c:	f003 fbc6 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007b96:	e2c1      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007bb0:	f003 fd2d 	bl	800b60e <VL53L1_preset_mode_standard_ranging_short_range>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007bba:	e2af      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	9303      	str	r3, [sp, #12]
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	9302      	str	r3, [sp, #8]
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007bd4:	f003 fd60 	bl	800b698 <VL53L1_preset_mode_standard_ranging_long_range>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007bde:	e29d      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	9302      	str	r3, [sp, #8]
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007bf8:	f003 fd93 	bl	800b722 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007c02:	e28b      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c1c:	f003 fdaa 	bl	800b774 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007c26:	e279      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	9303      	str	r3, [sp, #12]
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c40:	f003 fdc1 	bl	800b7c6 <VL53L1_preset_mode_timed_ranging>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007c4a:	e267      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	9303      	str	r3, [sp, #12]
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	9302      	str	r3, [sp, #8]
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c64:	f003 fded 	bl	800b842 <VL53L1_preset_mode_timed_ranging_short_range>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007c6e:	e255      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	9302      	str	r3, [sp, #8]
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c88:	f003 fe19 	bl	800b8be <VL53L1_preset_mode_timed_ranging_long_range>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007c92:	e243      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	9302      	str	r3, [sp, #8]
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cb0:	f003 fefb 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007cba:	e22f      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	9303      	str	r3, [sp, #12]
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cd8:	f003 ff7c 	bl	800bbd4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007ce2:	e21b      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	9302      	str	r3, [sp, #8]
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d00:	f003 ffcc 	bl	800bc9c <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d0a:	e207      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	9304      	str	r3, [sp, #16]
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d28:	f003 ffe0 	bl	800bcec <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d32:	e1f3      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	9303      	str	r3, [sp, #12]
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	9302      	str	r3, [sp, #8]
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d50:	f004 f830 	bl	800bdb4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d5a:	e1df      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	9304      	str	r3, [sp, #16]
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	9302      	str	r3, [sp, #8]
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d78:	f004 fe25 	bl	800c9c6 <VL53L1_preset_mode_histogram_multizone>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007d82:	e1cb      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	9302      	str	r3, [sp, #8]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007da0:	f004 fe63 	bl	800ca6a <VL53L1_preset_mode_histogram_multizone_short_range>
 8007da4:	4603      	mov	r3, r0
 8007da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007daa:	e1b7      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dc8:	f004 fea1 	bl	800cb0e <VL53L1_preset_mode_histogram_multizone_long_range>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007dd2:	e1a3      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	9303      	str	r3, [sp, #12]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007df0:	f004 ffde 	bl	800cdb0 <VL53L1_preset_mode_histogram_ranging_ref>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007dfa:	e18f      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e18:	f003 fff4 	bl	800be04 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e22:	e17b      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e40:	f004 f86c 	bl	800bf1c <VL53L1_preset_mode_histogram_long_range>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e4a:	e167      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e68:	f004 f8f6 	bl	800c058 <VL53L1_preset_mode_histogram_long_range_mm1>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e72:	e153      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	9302      	str	r3, [sp, #8]
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e90:	f004 f943 	bl	800c11a <VL53L1_preset_mode_histogram_long_range_mm2>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007e9a:	e13f      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	9303      	str	r3, [sp, #12]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	9302      	str	r3, [sp, #8]
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007eb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eb8:	f004 f957 	bl	800c16a <VL53L1_preset_mode_histogram_medium_range>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007ec2:	e12b      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	9303      	str	r3, [sp, #12]
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	9302      	str	r3, [sp, #8]
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007edc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ede:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ee0:	f004 f9e1 	bl	800c2a6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007eea:	e117      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f08:	f004 fa2e 	bl	800c368 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f12:	e103      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f30:	f004 fa42 	bl	800c3b8 <VL53L1_preset_mode_histogram_short_range>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f3a:	e0ef      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	9304      	str	r3, [sp, #16]
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f58:	f004 fb4c 	bl	800c5f4 <VL53L1_preset_mode_histogram_short_range_mm1>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f62:	e0db      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f80:	f004 fb99 	bl	800c6b6 <VL53L1_preset_mode_histogram_short_range_mm2>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007f8a:	e0c7      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	9303      	str	r3, [sp, #12]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	9302      	str	r3, [sp, #8]
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fa8:	f004 fbad 	bl	800c706 <VL53L1_preset_mode_histogram_characterisation>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007fb2:	e0b3      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	9302      	str	r3, [sp, #8]
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fd0:	f004 fbca 	bl	800c768 <VL53L1_preset_mode_histogram_xtalk_planar>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8007fda:	e09f      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	9302      	str	r3, [sp, #8]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ff8:	f004 fc2d 	bl	800c856 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8008002:	e08b      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800801e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008020:	f004 fcad 	bl	800c97e <VL53L1_preset_mode_histogram_xtalk_mm2>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800802a:	e077      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	9303      	str	r3, [sp, #12]
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008042:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008044:	f004 fdb5 	bl	800cbb2 <VL53L1_preset_mode_olt>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800804e:	e065      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	9303      	str	r3, [sp, #12]
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008066:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008068:	f003 fce5 	bl	800ba36 <VL53L1_preset_mode_singleshot_ranging>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8008072:	e053      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	9302      	str	r3, [sp, #8]
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800808e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008090:	f003 fc7d 	bl	800b98e <VL53L1_preset_mode_low_power_auto_short_ranging>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800809a:	e03f      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	9302      	str	r3, [sp, #8]
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080b8:	f003 fc3f 	bl	800b93a <VL53L1_preset_mode_low_power_auto_ranging>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80080c2:	e02b      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	9303      	str	r3, [sp, #12]
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	9302      	str	r3, [sp, #8]
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080e0:	f003 fc7f 	bl	800b9e2 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80080ea:	e017      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008104:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008106:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008108:	f004 f9f4 	bl	800c4f4 <VL53L1_preset_mode_special_histogram_short_range>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 8008112:	e003      	b.n	800811c <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008114:	23fc      	movs	r3, #252	; 0xfc
 8008116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 800811a:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 800811c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008120:	2b00      	cmp	r3, #0
 8008122:	d105      	bne.n	8008130 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	893a      	ldrh	r2, [r7, #8]
 8008128:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800812a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800812c:	893a      	ldrh	r2, [r7, #8]
 800812e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8008130:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8008138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800813a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff f98f 	bl	8007462 <VL53L1_set_timeouts_us>
 8008144:	4603      	mov	r3, r0
 8008146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800814a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8008152:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff f92b 	bl	80073b0 <VL53L1_set_inter_measurement_period_ms>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8008160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008162:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8008166:	3301      	adds	r3, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f005 fa82 	bl	800d67c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8008178:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800817c:	4618      	mov	r0, r3
 800817e:	3748      	adds	r7, #72	; 0x48
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3318      	adds	r3, #24
 8008196:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80081a2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3318      	adds	r3, #24
 80081c6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	887a      	ldrh	r2, [r7, #2]
 80081cc:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 80081d0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3318      	adds	r3, #24
 80081f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80081fe:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3318      	adds	r3, #24
 8008222:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	887a      	ldrh	r2, [r7, #2]
 8008228:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800822c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b0d2      	sub	sp, #328	; 0x148
 8008240:	af00      	add	r7, sp, #0
 8008242:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008246:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800824a:	6018      	str	r0, [r3, #0]
 800824c:	4608      	mov	r0, r1
 800824e:	4611      	mov	r1, r2
 8008250:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008254:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8008258:	4602      	mov	r2, r0
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008260:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008264:	460a      	mov	r2, r1
 8008266:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800826e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008272:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3318      	adds	r3, #24
 800827a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 800827e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008282:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800828c:	3308      	adds	r3, #8
 800828e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8008292:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008296:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800829a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800829e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082a2:	3348      	adds	r3, #72	; 0x48
 80082a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80082a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082ac:	f203 3342 	addw	r3, r3, #834	; 0x342
 80082b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80082b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082b8:	f203 3362 	addw	r3, r3, #866	; 0x362
 80082bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80082c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082c4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80082c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80082cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082d0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80082d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80082d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80082e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80082e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082e8:	332c      	adds	r3, #44	; 0x2c
 80082ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80082ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082f2:	3348      	adds	r3, #72	; 0x48
 80082f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8008318:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800831c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008320:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8008324:	7812      	ldrb	r2, [r2, #0]
 8008326:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8008328:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800832c:	791b      	ldrb	r3, [r3, #4]
 800832e:	b25b      	sxtb	r3, r3
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008336:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800833a:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 800833e:	f993 3000 	ldrsb.w	r3, [r3]
 8008342:	4313      	orrs	r3, r2
 8008344:	b25b      	sxtb	r3, r3
 8008346:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8008348:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800834c:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 800834e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008352:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8008356:	3336      	adds	r3, #54	; 0x36
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800835e:	4413      	add	r3, r2
 8008360:	1d9a      	adds	r2, r3, #6
 8008362:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008366:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800836a:	4611      	mov	r1, r2
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f7ff f955 	bl	800761c <VL53L1_set_user_zone>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8008378:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800837c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8008384:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008388:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800838c:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800839a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800839e:	4413      	add	r3, r2
 80083a0:	1c9a      	adds	r2, r3, #2
 80083a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80083a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80083aa:	4611      	mov	r1, r2
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f001 fbd7 	bl	8009b60 <VL53L1_set_zone_dss_config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 80083b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083bc:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10d      	bne.n	80083e4 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80083c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083cc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d107      	bne.n	80083e4 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80083d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083d8:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80083dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083e0:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80083e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ec:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 80083f0:	2bff      	cmp	r3, #255	; 0xff
 80083f2:	d106      	bne.n	8008402 <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80083f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008402:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840a:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 800840e:	2b01      	cmp	r3, #1
 8008410:	d139      	bne.n	8008486 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8008412:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800841e:	2b00      	cmp	r3, #0
 8008420:	d131      	bne.n	8008486 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8008422:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008426:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 800842a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800842e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008432:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8008436:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800843a:	2220      	movs	r2, #32
 800843c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8008440:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008444:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8008448:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800844c:	2b00      	cmp	r3, #0
 800844e:	d109      	bne.n	8008464 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8008450:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008454:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008458:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 800845a:	b21a      	sxth	r2, r3
 800845c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008460:	825a      	strh	r2, [r3, #18]
 8008462:	e003      	b.n	800846c <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8008464:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008468:	2200      	movs	r2, #0
 800846a:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 800846c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008470:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b04      	cmp	r3, #4
 8008478:	d805      	bhi.n	8008486 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800847a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800847e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008482:	2205      	movs	r2, #5
 8008484:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8008486:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800848a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848e:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8008492:	2b01      	cmp	r3, #1
 8008494:	d117      	bne.n	80084c6 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8008496:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800849a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800849e:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d10f      	bne.n	80084c6 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80084a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ae:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 80084b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084b6:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80084ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80084be:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80084c2:	2206      	movs	r2, #6
 80084c4:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 80084c6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 80084ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80084d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	f007 f98c 	bl	800f7f4 <VL53L1_save_cfg_data>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 80084e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80084e6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d826      	bhi.n	8008540 <VL53L1_init_and_start_range+0x304>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <VL53L1_init_and_start_range+0x2bc>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008539 	.word	0x08008539
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008529 	.word	0x08008529
 8008504:	08008521 	.word	0x08008521
 8008508:	08008519 	.word	0x08008519
 800850c:	08008511 	.word	0x08008511
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8008510:	2301      	movs	r3, #1
 8008512:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008516:	e017      	b.n	8008548 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8008518:	230d      	movs	r3, #13
 800851a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800851e:	e013      	b.n	8008548 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8008520:	2324      	movs	r3, #36	; 0x24
 8008522:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008526:	e00f      	b.n	8008548 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8008528:	2344      	movs	r3, #68	; 0x44
 800852a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800852e:	e00b      	b.n	8008548 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8008530:	235a      	movs	r3, #90	; 0x5a
 8008532:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008536:	e007      	b.n	8008548 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8008538:	2371      	movs	r3, #113	; 0x71
 800853a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800853e:	e003      	b.n	8008548 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8008540:	2383      	movs	r3, #131	; 0x83
 8008542:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8008546:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8008548:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800854c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8008550:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8008554:	f107 030c 	add.w	r3, r7, #12
 8008558:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800855c:	2300      	movs	r3, #0
 800855e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8008562:	e00b      	b.n	800857c <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8008564:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8008572:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8008576:	3301      	adds	r3, #1
 8008578:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800857c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8008580:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8008584:	429a      	cmp	r2, r3
 8008586:	d3ed      	bcc.n	8008564 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8008588:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800858c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b05      	cmp	r3, #5
 8008594:	d917      	bls.n	80085c6 <VL53L1_init_and_start_range+0x38a>
 8008596:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800859a:	2b00      	cmp	r3, #0
 800859c:	d113      	bne.n	80085c6 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800859e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80085a2:	f1c3 0301 	rsb	r3, r3, #1
 80085a6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80085aa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 80085ae:	f107 020c 	add.w	r2, r7, #12
 80085b2:	4413      	add	r3, r2
 80085b4:	461a      	mov	r2, r3
 80085b6:	210b      	movs	r1, #11
 80085b8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80085bc:	f00c fb0d 	bl	8014bda <VL53L1_i2c_encode_static_nvm_managed>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80085c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80085ca:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d917      	bls.n	8008604 <VL53L1_init_and_start_range+0x3c8>
 80085d4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d113      	bne.n	8008604 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80085dc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80085e0:	f1c3 030d 	rsb	r3, r3, #13
 80085e4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80085e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 80085ec:	f107 020c 	add.w	r2, r7, #12
 80085f0:	4413      	add	r3, r2
 80085f2:	461a      	mov	r2, r3
 80085f4:	2117      	movs	r1, #23
 80085f6:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80085fa:	f00c fbca 	bl	8014d92 <VL53L1_i2c_encode_customer_nvm_managed>
 80085fe:	4603      	mov	r3, r0
 8008600:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8008604:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008608:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b03      	cmp	r3, #3
 8008610:	d917      	bls.n	8008642 <VL53L1_init_and_start_range+0x406>
 8008612:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008616:	2b00      	cmp	r3, #0
 8008618:	d113      	bne.n	8008642 <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800861a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800861e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8008622:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8008626:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800862a:	f107 020c 	add.w	r2, r7, #12
 800862e:	4413      	add	r3, r2
 8008630:	461a      	mov	r2, r3
 8008632:	2120      	movs	r1, #32
 8008634:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8008638:	f00c fce9 	bl	801500e <VL53L1_i2c_encode_static_config>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8008642:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008646:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d917      	bls.n	8008680 <VL53L1_init_and_start_range+0x444>
 8008650:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008654:	2b00      	cmp	r3, #0
 8008656:	d113      	bne.n	8008680 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008658:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800865c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8008660:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8008664:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8008668:	f107 020c 	add.w	r2, r7, #12
 800866c:	4413      	add	r3, r2
 800866e:	461a      	mov	r2, r3
 8008670:	2116      	movs	r1, #22
 8008672:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008676:	f00c fdad 	bl	80151d4 <VL53L1_i2c_encode_general_config>
 800867a:	4603      	mov	r3, r0
 800867c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8008680:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008684:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d917      	bls.n	80086be <VL53L1_init_and_start_range+0x482>
 800868e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008692:	2b00      	cmp	r3, #0
 8008694:	d113      	bne.n	80086be <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008696:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800869a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800869e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80086a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 80086a6:	f107 020c 	add.w	r2, r7, #12
 80086aa:	4413      	add	r3, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	2117      	movs	r1, #23
 80086b0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80086b4:	f00c fe12 	bl	80152dc <VL53L1_i2c_encode_timing_config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80086be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80086c2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d036      	beq.n	800873a <VL53L1_init_and_start_range+0x4fe>
 80086cc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d132      	bne.n	800873a <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80086d4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80086d8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80086dc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80086e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d017      	beq.n	800871e <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f2:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086fe:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008704:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008710:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008716:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8008718:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800871c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800871e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8008722:	f107 020c 	add.w	r2, r7, #12
 8008726:	4413      	add	r3, r2
 8008728:	461a      	mov	r2, r3
 800872a:	2112      	movs	r1, #18
 800872c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008730:	f00c fe56 	bl	80153e0 <VL53L1_i2c_encode_dynamic_config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 800873a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800873e:	2b00      	cmp	r3, #0
 8008740:	d113      	bne.n	800876a <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8008742:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8008746:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800874a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800874e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8008752:	f107 020c 	add.w	r2, r7, #12
 8008756:	4413      	add	r3, r2
 8008758:	461a      	mov	r2, r3
 800875a:	2105      	movs	r1, #5
 800875c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8008760:	f00c fec3 	bl	80154ea <VL53L1_i2c_encode_system_control>
 8008764:	4603      	mov	r3, r0
 8008766:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 800876a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10f      	bne.n	8008792 <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8008772:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8008776:	f107 020c 	add.w	r2, r7, #12
 800877a:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800877e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8008782:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	f00e fbd6 	bl	8016f38 <VL53L1_WriteMulti>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8008792:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8008796:	2b00      	cmp	r3, #0
 8008798:	d109      	bne.n	80087ae <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800879a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800879e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	f004 fb82 	bl	800ceac <VL53L1_update_ll_driver_rd_state>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 80087ae:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80087b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80087ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	f004 fd15 	bl	800d1ee <VL53L1_update_ll_driver_cfg_state>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80087ca:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3318      	adds	r3, #24
 80087e8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80087f0:	3308      	adds	r3, #8
 80087f2:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80087fa:	b25b      	sxtb	r3, r3
 80087fc:	f003 030f 	and.w	r3, r3, #15
 8008800:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8008802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008806:	b25b      	sxtb	r3, r3
 8008808:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f00c fea1 	bl	8015560 <VL53L1_set_system_control>
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8008828:	f003 030f 	and.w	r3, r3, #15
 800882c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8008834:	2103      	movs	r1, #3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f004 fb07 	bl	800ce4a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8008842:	3301      	adds	r3, #1
 8008844:	b2da      	uxtb	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f004 ff14 	bl	800d67c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f004 ff46 	bl	800d6e6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008860:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8008864:	2b01      	cmp	r3, #1
 8008866:	d102      	bne.n	800886e <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f008 f9b4 	bl	8010bd6 <VL53L1_low_power_auto_data_stop_range>

	return status;
 800886e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b0c8      	sub	sp, #288	; 0x120
 800887e:	af00      	add	r7, sp, #0
 8008880:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008884:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008888:	6018      	str	r0, [r3, #0]
 800888a:	460a      	mov	r2, r1
 800888c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008890:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8008894:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008896:	2300      	movs	r3, #0
 8008898:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800889c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3318      	adds	r3, #24
 80088a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80088ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088b0:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80088b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80088b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088bc:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80088c0:	331c      	adds	r3, #28
 80088c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80088c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088ca:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80088ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 80088d2:	2388      	movs	r3, #136	; 0x88
 80088d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80088e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80088e8:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d008      	beq.n	8008904 <VL53L1_get_measurement_results+0x8a>
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d10d      	bne.n	8008912 <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80088f6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80088fa:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80088fe:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8008902:	e00a      	b.n	800891a <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8008904:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8008908:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800890c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8008910:	e003      	b.n	800891a <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8008912:	232c      	movs	r3, #44	; 0x2c
 8008914:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8008918:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 800891a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10f      	bne.n	8008942 <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8008922:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8008926:	f107 0208 	add.w	r2, r7, #8
 800892a:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800892e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008932:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8008936:	6800      	ldr	r0, [r0, #0]
 8008938:	f00e fb34 	bl	8016fa4 <VL53L1_ReadMulti>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8008942:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008946:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d917      	bls.n	8008980 <VL53L1_get_measurement_results+0x106>
 8008950:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008954:	2b00      	cmp	r3, #0
 8008956:	d113      	bne.n	8008980 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008958:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800895c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8008960:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8008964:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8008968:	f107 0208 	add.w	r2, r7, #8
 800896c:	4413      	add	r3, r2
 800896e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008972:	4619      	mov	r1, r3
 8008974:	2038      	movs	r0, #56	; 0x38
 8008976:	f00c ff71 	bl	801585c <VL53L1_i2c_decode_debug_results>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8008980:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008984:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d017      	beq.n	80089be <VL53L1_get_measurement_results+0x144>
 800898e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008992:	2b00      	cmp	r3, #0
 8008994:	d113      	bne.n	80089be <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8008996:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800899a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800899e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80089a2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 80089a6:	f107 0208 	add.w	r2, r7, #8
 80089aa:	4413      	add	r3, r2
 80089ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80089b0:	4619      	mov	r1, r3
 80089b2:	2021      	movs	r0, #33	; 0x21
 80089b4:	f00c fef1 	bl	801579a <VL53L1_i2c_decode_core_results>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80089be:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d110      	bne.n	80089e8 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80089cc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 80089d0:	f107 0208 	add.w	r2, r7, #8
 80089d4:	4413      	add	r3, r2
 80089d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80089da:	4619      	mov	r1, r3
 80089dc:	202c      	movs	r0, #44	; 0x2c
 80089de:	f00c fde6 	bl	80155ae <VL53L1_i2c_decode_system_results>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80089e8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80089f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fa:	b0a0      	sub	sp, #128	; 0x80
 80089fc:	af06      	add	r7, sp, #24
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	460b      	mov	r3, r1
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3318      	adds	r3, #24
 8008a10:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008a18:	3308      	adds	r3, #8
 8008a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8008a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a1e:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8008a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a22:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008a26:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8008a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a2a:	332c      	adds	r3, #44	; 0x2c
 8008a2c:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 8008a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a30:	33c2      	adds	r3, #194	; 0xc2
 8008a32:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8008a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a36:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8008a3a:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8008a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a44:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008a48:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8008a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a4c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8008a50:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8008a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a54:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8008a58:	3318      	adds	r3, #24
 8008a5a:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8008a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8008a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a66:	3348      	adds	r3, #72	; 0x48
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8008a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a6c:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8008a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a74:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8008a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a7c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d108      	bne.n	8008a96 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008a8a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <VL53L1_get_device_results+0xa0>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <VL53L1_get_device_results+0xa2>
 8008a96:	2300      	movs	r3, #0
 8008a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8008a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a9e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 82a9 	beq.w	8008ffe <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8008aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 fbd7 	bl	8009268 <VL53L1_get_histogram_bin_data>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8008ac0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d118      	bne.n	8008afa <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d114      	bne.n	8008afa <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8008ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ad6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8008ada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae2:	4413      	add	r3, r2
 8008ae4:	1d1a      	adds	r2, r3, #4
 8008ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ae8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f005 fb6c 	bl	800e1cc <VL53L1_hist_copy_and_scale_ambient_info>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8008afa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f040 8220 	bne.w	8008f44 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8008b04:	f107 0313 	add.w	r3, r7, #19
 8008b08:	4619      	mov	r1, r3
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f008 f91a 	bl	8010d44 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8008b10:	7cfb      	ldrb	r3, [r7, #19]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8008b16:	2301      	movs	r3, #1
 8008b18:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8008b1a:	7cfb      	ldrb	r3, [r7, #19]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 8008b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d007      	beq.n	8008b3a <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8008b2a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	3202      	adds	r2, #2
 8008b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8008b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b38:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8008b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b3c:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8008b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b42:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8008b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4610      	mov	r0, r2
 8008b52:	f005 fa41 	bl	800dfd8 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8008b56:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8008b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5a:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8008b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b64:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b68:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8008b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6e:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8008b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b72:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8008b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b76:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8008b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7c:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8008b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b80:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8008b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b86:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8008b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b8a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8008b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b90:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8008b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b96:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8008b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b9c:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8008ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ba2:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8008bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bae:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8008bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb8:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8008bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc0:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8008bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc4:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8008bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc8:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8008bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bcc:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8008bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f004 fc2f 	bl	800d43c <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8008bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008be0:	795b      	ldrb	r3, [r3, #5]
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d048      	beq.n	8008c78 <VL53L1_get_device_results+0x282>
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	dc56      	bgt.n	8008c98 <VL53L1_get_device_results+0x2a2>
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d002      	beq.n	8008bf4 <VL53L1_get_device_results+0x1fe>
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d02e      	beq.n	8008c50 <VL53L1_get_device_results+0x25a>
 8008bf2:	e051      	b.n	8008c98 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8008bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bf6:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8008bfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8008c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c0c:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8008c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c12:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8008c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c1e:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8008c22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008c24:	319c      	adds	r1, #156	; 0x9c
 8008c26:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008c28:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8008c2c:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8008c30:	b2a4      	uxth	r4, r4
 8008c32:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8008c34:	351c      	adds	r5, #28
 8008c36:	9505      	str	r5, [sp, #20]
 8008c38:	9404      	str	r4, [sp, #16]
 8008c3a:	9003      	str	r0, [sp, #12]
 8008c3c:	9102      	str	r1, [sp, #8]
 8008c3e:	9201      	str	r2, [sp, #4]
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	4643      	mov	r3, r8
 8008c44:	4672      	mov	r2, lr
 8008c46:	4661      	mov	r1, ip
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f006 fa36 	bl	800f0ba <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8008c4e:	e027      	b.n	8008ca0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8008c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8008c5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c5e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008c60:	4613      	mov	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	440b      	add	r3, r1
 8008c6a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008c6e:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8008c70:	b21a      	sxth	r2, r3
 8008c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c74:	839a      	strh	r2, [r3, #28]
		break;
 8008c76:	e013      	b.n	8008ca0 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8008c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c7a:	331c      	adds	r3, #28
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008c80:	f7fd fcf7 	bl	8006672 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8008c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c86:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	b21a      	sxth	r2, r3
 8008c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c94:	839a      	strh	r2, [r3, #28]
		break;
 8008c96:	e003      	b.n	8008ca0 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8008c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	839a      	strh	r2, [r3, #28]
		break;
 8008c9e:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8008ca0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f040 814f 	bne.w	8008f48 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8008caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cac:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb2:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8008cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cb8:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8008cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cbe:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 8008cc2:	b29c      	uxth	r4, r3
 8008cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cc6:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4623      	mov	r3, r4
 8008cce:	f006 fb99 	bl	800f404 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 8008cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd4:	7999      	ldrb	r1, [r3, #6]
 8008cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 ff7b 	bl	8009bda <VL53L1_get_dmax_calibration_data>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8008cea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f040 812c 	bne.w	8008f4c <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 8008cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cf6:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8008cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cfc:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8008d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d02:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8008d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d08:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8008d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d0e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8008d12:	3308      	adds	r3, #8
				pdev->wArea2,
 8008d14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d16:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8008d1a:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8008d1c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8008d1e:	9405      	str	r4, [sp, #20]
 8008d20:	f107 0413 	add.w	r4, r7, #19
 8008d24:	9404      	str	r4, [sp, #16]
 8008d26:	9203      	str	r2, [sp, #12]
 8008d28:	9302      	str	r3, [sp, #8]
 8008d2a:	9001      	str	r0, [sp, #4]
 8008d2c:	9100      	str	r1, [sp, #0]
 8008d2e:	4633      	mov	r3, r6
 8008d30:	462a      	mov	r2, r5
 8008d32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f00e fb45 	bl	80173c4 <VL53L1_ipp_hist_process_data>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8008d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d050      	beq.n	8008dea <VL53L1_get_device_results+0x3f4>
 8008d48:	7cfb      	ldrb	r3, [r7, #19]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d94d      	bls.n	8008dea <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008d54:	e045      	b.n	8008de2 <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8008d56:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008d5a:	224c      	movs	r2, #76	; 0x4c
 8008d5c:	fb02 f303 	mul.w	r3, r2, r3
 8008d60:	3310      	adds	r3, #16
 8008d62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d64:	4413      	add	r3, r2
 8008d66:	3304      	adds	r3, #4
 8008d68:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	7cfa      	ldrb	r2, [r7, #19]
 8008d70:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	7cfa      	ldrb	r2, [r7, #19]
 8008d7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	7cfa      	ldrb	r2, [r7, #19]
 8008d8c:	fb93 f2f2 	sdiv	r2, r3, r2
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008d98:	461a      	mov	r2, r3
 8008d9a:	7cfb      	ldrb	r3, [r7, #19]
 8008d9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008daa:	461a      	mov	r2, r3
 8008dac:	7cfb      	ldrb	r3, [r7, #19]
 8008dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	7cfb      	ldrb	r3, [r7, #19]
 8008dc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	7cfa      	ldrb	r2, [r7, #19]
 8008dd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8008dd8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008ddc:	3301      	adds	r3, #1
 8008dde:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008de2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d9b5      	bls.n	8008d56 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8008dea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f040 80ae 	bne.w	8008f50 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 8008df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008df6:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8008dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dfc:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8008e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e02:	330e      	adds	r3, #14
 8008e04:	461a      	mov	r2, r3
 8008e06:	f006 f922 	bl	800f04e <VL53L1_hist_wrap_dmax>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8008e10:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f040 809d 	bne.w	8008f54 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8008e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8008e24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2c:	4413      	add	r3, r2
 8008e2e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8008e30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8008e34:	4613      	mov	r3, r2
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e42:	4413      	add	r3, r2
 8008e44:	f103 0208 	add.w	r2, r3, #8
 8008e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f005 fc1d 	bl	800e68a <VL53L1_hist_phase_consistency_check>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 8008e56:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d17c      	bne.n	8008f58 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8008e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8008e68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e70:	4413      	add	r3, r2
 8008e72:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8008e74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8008e78:	4613      	mov	r3, r2
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e86:	4413      	add	r3, r2
 8008e88:	f103 0208 	add.w	r2, r3, #8
 8008e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f006 f883 	bl	800ef9e <VL53L1_hist_xmonitor_consistency_check>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 8008e9e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d15a      	bne.n	8008f5c <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8008ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8008eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008eb8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008eca:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8008ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ece:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 8008ed2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d222      	bcs.n	8008f20 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8008eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 8008ede:	011b      	lsls	r3, r3, #4
 8008ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eea:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8008eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eee:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8008ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ef6:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8008efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f00:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 8008f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f04:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8008f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f0a:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8008f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f14:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8008f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8008f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f1e:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 8008f20:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d11b      	bne.n	8008f60 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8008f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f2a:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8008f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f30:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 8008f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f36:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8008f3a:	331c      	adds	r3, #28
 8008f3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f3e:	f006 fbbe 	bl	800f6be <VL53L1_hist_copy_results_to_sys_and_core>
 8008f42:	e00e      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f44:	bf00      	nop
 8008f46:	e00c      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f48:	bf00      	nop
 8008f4a:	e00a      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f4c:	bf00      	nop
 8008f4e:	e008      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f50:	bf00      	nop
 8008f52:	e006      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f54:	bf00      	nop
 8008f56:	e004      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f58:	bf00      	nop
 8008f5a:	e002      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f5c:	bf00      	nop
 8008f5e:	e000      	b.n	8008f62 <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8008f60:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8008f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d036      	beq.n	8008fd8 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8008f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f6c:	79db      	ldrb	r3, [r3, #7]
 8008f6e:	2b06      	cmp	r3, #6
 8008f70:	d00a      	beq.n	8008f88 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 8008f72:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8008f7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f006 fc73 	bl	800f868 <VL53L1_dynamic_zone_update>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008f8e:	e015      	b.n	8008fbc <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8008f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f92:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8008f96:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <VL53L1_get_device_results+0x5ac>
 8008f9e:	2103      	movs	r1, #3
 8008fa0:	e000      	b.n	8008fa4 <VL53L1_get_device_results+0x5ae>
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008fa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008faa:	4413      	add	r3, r2
 8008fac:	460a      	mov	r2, r1
 8008fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8008fb2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008fbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008fc0:	2b0f      	cmp	r3, #15
 8008fc2:	d9e5      	bls.n	8008f90 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 8008fc4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d105      	bne.n	8008fd8 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f006 fcc6 	bl	800f95e <VL53L1_multizone_hist_bins_update>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8008fd8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d105      	bne.n	8008fec <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f007 f9d3 	bl	801038c <VL53L1_dynamic_xtalk_correction_corrector>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8008fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d043      	beq.n	800907c <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e03e      	b.n	800907c <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 8008ffe:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009002:	2b00      	cmp	r3, #0
 8009004:	d107      	bne.n	8009016 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8009006:	7afb      	ldrb	r3, [r7, #11]
 8009008:	4619      	mov	r1, r3
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fc35 	bl	800887a <VL53L1_get_measurement_results>
 8009010:	4603      	mov	r3, r0
 8009012:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8009016:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10d      	bne.n	800903a <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800901e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009020:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8009024:	4618      	mov	r0, r3
 8009026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009028:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 800902c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800902e:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 8009032:	321c      	adds	r2, #28
 8009034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009036:	f000 fc1f 	bl	8009878 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	785b      	ldrb	r3, [r3, #1]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d11c      	bne.n	800907c <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 8009042:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10d      	bne.n	8009066 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f007 fe24 	bl	8010ca0 <VL53L1_low_power_auto_setup_manual_calibration>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	2201      	movs	r2, #1
 8009062:	709a      	strb	r2, [r3, #2]
 8009064:	e00a      	b.n	800907c <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 8009066:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800906a:	2b00      	cmp	r3, #0
 800906c:	d106      	bne.n	800907c <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 8009072:	2b01      	cmp	r3, #1
 8009074:	d102      	bne.n	800907c <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	2202      	movs	r2, #2
 800907a:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800907c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800907e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009084:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009088:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800908c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800908e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8009090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009092:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009098:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 800909a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f040 80b0 	bne.w	8009204 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80090a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a6:	2210      	movs	r2, #16
 80090a8:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80090ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090ae:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80090b2:	3301      	adds	r3, #1
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090b8:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80090bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 80090c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c8:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80090cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80090d0:	429a      	cmp	r2, r3
 80090d2:	f080 8097 	bcs.w	8009204 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 80090d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 80090da:	4613      	mov	r3, r2
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80090e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090e8:	4413      	add	r3, r2
 80090ea:	3308      	adds	r3, #8
 80090ec:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 80090ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090f0:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 80090f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f4:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 80090f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090f8:	785a      	ldrb	r2, [r3, #1]
 80090fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090fc:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80090fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009100:	789a      	ldrb	r2, [r3, #2]
 8009102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009104:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8009106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009108:	78da      	ldrb	r2, [r3, #3]
 800910a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800910c:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800910e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009110:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8009114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8009118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800911a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800911e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009120:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 8009122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009124:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8009128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800912a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800912e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009130:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8009134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 800913a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800913c:	7c5a      	ldrb	r2, [r3, #17]
 800913e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009140:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8009142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009144:	7c9a      	ldrb	r2, [r3, #18]
 8009146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009148:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 800914a:	2300      	movs	r3, #0
 800914c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8009150:	e052      	b.n	80091f8 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8009152:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8009156:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800915a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800915c:	204c      	movs	r0, #76	; 0x4c
 800915e:	fb00 f303 	mul.w	r3, r0, r3
 8009162:	440b      	add	r3, r1
 8009164:	3338      	adds	r3, #56	; 0x38
 8009166:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8009168:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800916a:	4613      	mov	r3, r2
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4403      	add	r3, r0
 8009174:	3308      	adds	r3, #8
 8009176:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8009178:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 800917c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8009180:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009182:	204c      	movs	r0, #76	; 0x4c
 8009184:	fb00 f303 	mul.w	r3, r0, r3
 8009188:	440b      	add	r3, r1
 800918a:	333c      	adds	r3, #60	; 0x3c
 800918c:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 800918e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009190:	4613      	mov	r3, r2
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4403      	add	r3, r0
 800919a:	330c      	adds	r3, #12
 800919c:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800919e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80091a2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80091a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091a8:	204c      	movs	r0, #76	; 0x4c
 80091aa:	fb00 f303 	mul.w	r3, r0, r3
 80091ae:	440b      	add	r3, r1
 80091b0:	3354      	adds	r3, #84	; 0x54
 80091b2:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80091b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091b6:	4613      	mov	r3, r2
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	3310      	adds	r3, #16
 80091c2:	4602      	mov	r2, r0
 80091c4:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 80091c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 80091ca:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 80091ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091d0:	204c      	movs	r0, #76	; 0x4c
 80091d2:	fb00 f303 	mul.w	r3, r0, r3
 80091d6:	440b      	add	r3, r1
 80091d8:	335e      	adds	r3, #94	; 0x5e
 80091da:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 80091dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091de:	4613      	mov	r3, r2
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	3312      	adds	r3, #18
 80091ea:	4602      	mov	r2, r0
 80091ec:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 80091ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80091f2:	3301      	adds	r3, #1
 80091f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80091f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091fa:	7c9b      	ldrb	r3, [r3, #18]
 80091fc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8009200:	429a      	cmp	r2, r3
 8009202:	d3a6      	bcc.n	8009152 <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8009204:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009208:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f015 ff5c 	bl	801f0c8 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8009210:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f003 ff35 	bl	800d088 <VL53L1_check_ll_driver_rd_state>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8009224:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8009228:	4618      	mov	r0, r3
 800922a:	3768      	adds	r7, #104	; 0x68
 800922c:	46bd      	mov	sp, r7
 800922e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009232 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8009242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d107      	bne.n	800925a <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	2203      	movs	r2, #3
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7fe fff3 	bl	800823c <VL53L1_init_and_start_range>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800925a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b0d2      	sub	sp, #328	; 0x148
 800926c:	af00      	add	r7, sp, #0
 800926e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009272:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009276:	6018      	str	r0, [r3, #0]
 8009278:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800927c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009280:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009282:	2300      	movs	r3, #0
 8009284:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8009288:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800928c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3318      	adds	r3, #24
 8009294:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8009298:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800929c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80092a6:	3308      	adds	r3, #8
 80092a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80092ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092b0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80092b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80092b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092bc:	f203 3342 	addw	r3, r3, #834	; 0x342
 80092c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80092c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092c8:	f203 3362 	addw	r3, r3, #866	; 0x362
 80092cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80092d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092d4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80092d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 80092dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80092e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 80092e4:	f107 030c 	add.w	r3, r7, #12
 80092e8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 80092ec:	2300      	movs	r3, #0
 80092ee:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8009316:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800931a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8009322:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10d      	bne.n	8009346 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 800932a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800932e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8009332:	2353      	movs	r3, #83	; 0x53
 8009334:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8009338:	2188      	movs	r1, #136	; 0x88
 800933a:	6800      	ldr	r0, [r0, #0]
 800933c:	f00d fe32 	bl	8016fa4 <VL53L1_ReadMulti>
 8009340:	4603      	mov	r3, r0
 8009342:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8009346:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009350:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 800935a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800935e:	785a      	ldrb	r2, [r3, #1]
 8009360:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009364:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 800936e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009372:	789a      	ldrb	r2, [r3, #2]
 8009374:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009378:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8009382:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009386:	78da      	ldrb	r2, [r3, #3]
 8009388:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800938c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8009396:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800939a:	3304      	adds	r3, #4
 800939c:	4619      	mov	r1, r3
 800939e:	2002      	movs	r0, #2
 80093a0:	f004 fb75 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80093a4:	4603      	mov	r3, r0
 80093a6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80093a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 80093b6:	234e      	movs	r3, #78	; 0x4e
 80093b8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80093bc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80093c0:	f107 020c 	add.w	r2, r7, #12
 80093c4:	4413      	add	r3, r2
 80093c6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80093ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80093ce:	2002      	movs	r0, #2
 80093d0:	f004 fb5d 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80093d4:	4603      	mov	r3, r0
 80093d6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80093d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 80093e6:	2350      	movs	r3, #80	; 0x50
 80093e8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80093ec:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80093f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80093f4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80093f8:	5cd2      	ldrb	r2, [r2, r3]
 80093fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093fe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8009408:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800940c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8009416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800941a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800941e:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8009422:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009426:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8009430:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009438:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 800943c:	2351      	movs	r3, #81	; 0x51
 800943e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8009442:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8009446:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800944a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800944e:	5cd3      	ldrb	r3, [r2, r3]
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8009456:	2352      	movs	r3, #82	; 0x52
 8009458:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 800945c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8009460:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009464:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8009468:	5cd2      	ldrb	r2, [r2, r3]
 800946a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800946e:	4413      	add	r3, r2
 8009470:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8009474:	234d      	movs	r3, #77	; 0x4d
 8009476:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 800947a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800947e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009482:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8009486:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 800948a:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 800948c:	2306      	movs	r3, #6
 800948e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8009492:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8009496:	f107 020c 	add.w	r2, r7, #12
 800949a:	4413      	add	r3, r2
 800949c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 80094a0:	2300      	movs	r3, #0
 80094a2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80094a6:	e01a      	b.n	80094de <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 80094a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80094ac:	2003      	movs	r0, #3
 80094ae:	f004 fb8d 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 80094b2:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 80094b4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 80094b8:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 80094ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094be:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3206      	adds	r2, #6
 80094c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 80094ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094ce:	3303      	adds	r3, #3
 80094d0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 80094d4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80094d8:	3301      	adds	r3, #1
 80094da:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80094de:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80094e2:	2b17      	cmp	r3, #23
 80094e4:	d9e0      	bls.n	80094a8 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 80094e6:	f107 0208 	add.w	r2, r7, #8
 80094ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80094f2:	f248 018d 	movw	r1, #32909	; 0x808d
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	f000 fbd0 	bl	8009c9c <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 80094fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009500:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800950a:	2b00      	cmp	r3, #0
 800950c:	d118      	bne.n	8009540 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800950e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009512:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8009516:	3318      	adds	r3, #24
 8009518:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800951c:	2100      	movs	r1, #0
 800951e:	4618      	mov	r0, r3
 8009520:	f015 fdfa 	bl	801f118 <memset>
		pdev->bin_rec_pos = 0;
 8009524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8009532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8009540:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009544:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d10b      	bne.n	8009566 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 800954e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009552:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8009556:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800955a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800955e:	6811      	ldr	r1, [r2, #0]
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	f7fd f97e 	bl	8006862 <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8009566:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800956a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800956e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009572:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 800957a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800957e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2200      	movs	r2, #0
 8009586:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8009588:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800958c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2218      	movs	r2, #24
 8009594:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8009596:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800959a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2218      	movs	r2, #24
 80095a2:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 80095a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095a8:	78da      	ldrb	r2, [r3, #3]
 80095aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095ae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80095b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095bc:	799b      	ldrb	r3, [r3, #6]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 80095c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 80095d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095d6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80095e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095e4:	7c1b      	ldrb	r3, [r3, #16]
 80095e6:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 80095e8:	4413      	add	r3, r2
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80095fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fe:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8009600:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009604:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 800960e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009612:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8009616:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800961a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800961e:	6811      	ldr	r1, [r2, #0]
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	f004 fed4 	bl	800e3ce <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8009626:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800962a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800962e:	2b00      	cmp	r3, #0
 8009630:	d117      	bne.n	8009662 <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8009632:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009636:	791b      	ldrb	r3, [r3, #4]
 8009638:	b29b      	uxth	r3, r3
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 800963e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009642:	795b      	ldrb	r3, [r3, #5]
 8009644:	b29b      	uxth	r3, r3
		encoded_timeout =
 8009646:	4413      	add	r3, r2
 8009648:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 800964c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009650:	799a      	ldrb	r2, [r3, #6]
 8009652:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009656:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8009660:	e016      	b.n	8009690 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8009662:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009666:	79db      	ldrb	r3, [r3, #7]
 8009668:	b29b      	uxth	r3, r3
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800966e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009672:	7a1b      	ldrb	r3, [r3, #8]
 8009674:	b29b      	uxth	r3, r3
		encoded_timeout =
 8009676:	4413      	add	r3, r2
 8009678:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 800967c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009680:	7a5a      	ldrb	r2, [r3, #9]
 8009682:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009686:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8009690:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009694:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2200      	movs	r2, #0
 800969c:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800969e:	2300      	movs	r3, #0
 80096a0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80096a4:	e01f      	b.n	80096e6 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80096a6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80096aa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80096ae:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	4413      	add	r3, r2
 80096b6:	7b1b      	ldrb	r3, [r3, #12]
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	2b07      	cmp	r3, #7
 80096be:	d10d      	bne.n	80096dc <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 80096c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	7adb      	ldrb	r3, [r3, #11]
 80096cc:	3304      	adds	r3, #4
 80096ce:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 80096d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 80096dc:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80096e0:	3301      	adds	r3, #1
 80096e2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80096e6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80096ea:	2b05      	cmp	r3, #5
 80096ec:	d9db      	bls.n	80096a6 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 80096ee:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80096f2:	4618      	mov	r0, r3
 80096f4:	f004 fcdb 	bl	800e0ae <VL53L1_decode_timeout>
 80096f8:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 80096fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096fe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8009708:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800970c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009716:	4618      	mov	r0, r3
 8009718:	f007 fb54 	bl	8010dc4 <VL53L1_calc_pll_period_us>
 800971c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8009720:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009724:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972e:	3301      	adds	r3, #1
 8009730:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8009734:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009738:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8009742:	4619      	mov	r1, r3
 8009744:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800974c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8009750:	f007 fb4f 	bl	8010df2 <VL53L1_duration_maths>
 8009754:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8009756:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800975a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8009764:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009768:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8009774:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009778:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f007 fc5e 	bl	801103e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8009782:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009786:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	f008 f875 	bl	801187a <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009790:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009794:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009798:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800979c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80097a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80097a8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80097ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 80097b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	789b      	ldrb	r3, [r3, #2]
 80097c4:	461a      	mov	r2, r3
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80097d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80097d6:	4413      	add	r3, r2
 80097d8:	3302      	adds	r3, #2
 80097da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80097de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097e2:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80097e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80097f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097f6:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80097f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009806:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800980a:	2200      	movs	r2, #0
 800980c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800980e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009812:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800981c:	f003 031f 	and.w	r3, r3, #31
 8009820:	2b11      	cmp	r3, #17
 8009822:	bf8c      	ite	hi
 8009824:	2201      	movhi	r2, #1
 8009826:	2200      	movls	r2, #0
 8009828:	b2d2      	uxtb	r2, r2
 800982a:	2a00      	cmp	r2, #0
 800982c:	d11b      	bne.n	8009866 <VL53L1_get_histogram_bin_data+0x5fe>
 800982e:	2201      	movs	r2, #1
 8009830:	409a      	lsls	r2, r3
 8009832:	4b10      	ldr	r3, [pc, #64]	; (8009874 <VL53L1_get_histogram_bin_data+0x60c>)
 8009834:	4013      	ands	r3, r2
 8009836:	2b00      	cmp	r3, #0
 8009838:	bf14      	ite	ne
 800983a:	2301      	movne	r3, #1
 800983c:	2300      	moveq	r3, #0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d010      	beq.n	8009866 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8009844:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009848:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8009852:	f003 031f 	and.w	r3, r3, #31
 8009856:	b2da      	uxtb	r2, r3
 8009858:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800985c:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 800985e:	23fa      	movs	r3, #250	; 0xfa
 8009860:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8009864:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009866:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800986a:	4618      	mov	r0, r3
 800986c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	0002200e 	.word	0x0002200e

08009878 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8009878:	b480      	push	{r7}
 800987a:	b08b      	sub	sp, #44	; 0x2c
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2200      	movs	r2, #0
 8009898:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	78da      	ldrb	r2, [r3, #3]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2200      	movs	r2, #0
 80098a6:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2204      	movs	r2, #4
 80098ac:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2201      	movs	r2, #1
 80098b2:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	8a1b      	ldrh	r3, [r3, #16]
 80098b8:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	8a9b      	ldrh	r3, [r3, #20]
 80098be:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	8a5b      	ldrh	r3, [r3, #18]
 80098c4:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80098c6:	2300      	movs	r3, #0
 80098c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098cc:	e00b      	b.n	80098e6 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 80098ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	4413      	add	r3, r2
 80098d8:	2200      	movs	r2, #0
 80098da:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80098dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e0:	3301      	adds	r3, #1
 80098e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d9ef      	bls.n	80098ce <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	3314      	adds	r3, #20
 80098f2:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098fa:	e0fe      	b.n	8009afa <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009902:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	2200      	movs	r2, #0
 8009908:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	78db      	ldrb	r3, [r3, #3]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10a      	bne.n	8009928 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	785b      	ldrb	r3, [r3, #1]
 8009916:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800991a:	2b09      	cmp	r3, #9
 800991c:	d104      	bne.n	8009928 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	2213      	movs	r2, #19
 8009922:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8009926:	e007      	b.n	8009938 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	2200      	movs	r2, #0
 800993c:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	2200      	movs	r2, #0
 8009942:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2200      	movs	r2, #0
 8009948:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	2200      	movs	r2, #0
 800994e:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	2200      	movs	r2, #0
 8009954:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	2200      	movs	r2, #0
 800995a:	735a      	strb	r2, [r3, #13]

		switch (i) {
 800995c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8009964:	2b01      	cmp	r3, #1
 8009966:	d05c      	beq.n	8009a22 <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8009968:	e0a8      	b.n	8009abc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	789b      	ldrb	r3, [r3, #2]
 800996e:	2b07      	cmp	r3, #7
 8009970:	d103      	bne.n	800997a <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	8a7a      	ldrh	r2, [r7, #18]
 8009976:	82da      	strh	r2, [r3, #22]
 8009978:	e00b      	b.n	8009992 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	789b      	ldrb	r3, [r3, #2]
 800997e:	2b08      	cmp	r3, #8
 8009980:	d103      	bne.n	800998a <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	8aba      	ldrh	r2, [r7, #20]
 8009986:	82da      	strh	r2, [r3, #22]
 8009988:	e003      	b.n	8009992 <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	8afa      	ldrh	r2, [r7, #22]
 8009996:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	895b      	ldrh	r3, [r3, #10]
 80099ac:	015b      	lsls	r3, r3, #5
 80099ae:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b6:	d302      	bcc.n	80099be <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80099b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099bc:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80099d4:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	fb02 f303 	mul.w	r3, r2, r3
 80099de:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099e6:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	da01      	bge.n	80099f2 <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 80099ee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80099f2:	12db      	asrs	r3, r3, #11
 80099f4:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	b21a      	sxth	r2, r3
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8009a20:	e04c      	b.n	8009abc <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a38:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	8bdb      	ldrh	r3, [r3, #30]
 8009a46:	015b      	lsls	r3, r3, #5
 8009a48:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a50:	d302      	bcc.n	8009a58 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8009a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a56:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8009a6e:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	fb02 f303 	mul.w	r3, r2, r3
 8009a78:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a80:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	da01      	bge.n	8009a8c <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8009a88:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009a8c:	12db      	asrs	r3, r3, #11
 8009a8e:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	b21a      	sxth	r2, r3
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8009aba:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	334c      	adds	r3, #76	; 0x4c
 8009aee:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8009af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af4:	3301      	adds	r3, #1
 8009af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	f67f aefc 	bls.w	80098fc <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2200      	movs	r2, #0
 8009b08:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	f003 031f 	and.w	r3, r3, #31
 8009b12:	2b11      	cmp	r3, #17
 8009b14:	bf8c      	ite	hi
 8009b16:	2201      	movhi	r2, #1
 8009b18:	2200      	movls	r2, #0
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	d116      	bne.n	8009b4e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8009b20:	2201      	movs	r2, #1
 8009b22:	409a      	lsls	r2, r3
 8009b24:	4b0d      	ldr	r3, [pc, #52]	; (8009b5c <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8009b26:	4013      	ands	r3, r2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bf14      	ite	ne
 8009b2c:	2301      	movne	r3, #1
 8009b2e:	2300      	moveq	r3, #0
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00b      	beq.n	8009b4e <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	785b      	ldrb	r3, [r3, #1]
 8009b3a:	f003 031f 	and.w	r3, r3, #31
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8009b4c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8009b4e:	bf00      	nop
 8009b50:	372c      	adds	r7, #44	; 0x2c
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	0002200e 	.word	0x0002200e

08009b60 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	3318      	adds	r3, #24
 8009b72:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	332c      	adds	r3, #44	; 0x2c
 8009b78:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d109      	bne.n	8009b96 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2202      	movs	r2, #2
 8009b86:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 8009b94:	e003      	b.n	8009b9e <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8009b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3318      	adds	r3, #24
 8009bc2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	78fa      	ldrb	r2, [r7, #3]
 8009bc8:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8009bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b088      	sub	sp, #32
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	607b      	str	r3, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	72fb      	strb	r3, [r7, #11]
 8009be8:	4613      	mov	r3, r2
 8009bea:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3318      	adds	r3, #24
 8009bf4:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d006      	beq.n	8009c14 <VL53L1_get_dmax_calibration_data+0x3a>
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	dc3e      	bgt.n	8009c88 <VL53L1_get_dmax_calibration_data+0xae>
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d034      	beq.n	8009c78 <VL53L1_get_dmax_calibration_data+0x9e>
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d02a      	beq.n	8009c68 <VL53L1_get_dmax_calibration_data+0x8e>
 8009c12:	e039      	b.n	8009c88 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8009c14:	7aba      	ldrb	r2, [r7, #10]
 8009c16:	6979      	ldr	r1, [r7, #20]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	1a9b      	subs	r3, r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	440b      	add	r3, r1
 8009c22:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 8009c2e:	7aba      	ldrb	r2, [r7, #10]
 8009c30:	6979      	ldr	r1, [r7, #20]
 8009c32:	4613      	mov	r3, r2
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	1a9b      	subs	r3, r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	440b      	add	r3, r1
 8009c3c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 8009c4e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c64:	811a      	strh	r2, [r3, #8]
	break;
 8009c66:	e012      	b.n	8009c8e <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8009c6c:	220a      	movs	r2, #10
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f015 fa29 	bl	801f0c8 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8009c76:	e00a      	b.n	8009c8e <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f015 fa21 	bl	801f0c8 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8009c86:	e002      	b.n	8009c8e <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009c88:	23fc      	movs	r3, #252	; 0xfc
 8009c8a:	77fb      	strb	r3, [r7, #31]
	break;
 8009c8c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009c8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3720      	adds	r7, #32
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b089      	sub	sp, #36	; 0x24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3318      	adds	r3, #24
 8009cb2:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009cba:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8009cc2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8009cc4:	897b      	ldrh	r3, [r7, #10]
 8009cc6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009cca:	2bbe      	cmp	r3, #190	; 0xbe
 8009ccc:	f200 86fc 	bhi.w	800aac8 <VL53L1_get_tuning_parm+0xe2c>
 8009cd0:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <VL53L1_get_tuning_parm+0x3c>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009fd5 	.word	0x08009fd5
 8009cdc:	08009fe5 	.word	0x08009fe5
 8009ce0:	08009ff5 	.word	0x08009ff5
 8009ce4:	0800a005 	.word	0x0800a005
 8009ce8:	0800a013 	.word	0x0800a013
 8009cec:	0800a021 	.word	0x0800a021
 8009cf0:	0800a02f 	.word	0x0800a02f
 8009cf4:	0800a03d 	.word	0x0800a03d
 8009cf8:	0800a04b 	.word	0x0800a04b
 8009cfc:	0800a059 	.word	0x0800a059
 8009d00:	0800a067 	.word	0x0800a067
 8009d04:	0800a073 	.word	0x0800a073
 8009d08:	0800a081 	.word	0x0800a081
 8009d0c:	0800a08f 	.word	0x0800a08f
 8009d10:	0800a09b 	.word	0x0800a09b
 8009d14:	0800a0a9 	.word	0x0800a0a9
 8009d18:	0800a0b7 	.word	0x0800a0b7
 8009d1c:	0800a0c7 	.word	0x0800a0c7
 8009d20:	0800a0d7 	.word	0x0800a0d7
 8009d24:	0800a0e5 	.word	0x0800a0e5
 8009d28:	0800a0f5 	.word	0x0800a0f5
 8009d2c:	0800a103 	.word	0x0800a103
 8009d30:	0800a113 	.word	0x0800a113
 8009d34:	0800a123 	.word	0x0800a123
 8009d38:	0800a133 	.word	0x0800a133
 8009d3c:	0800a143 	.word	0x0800a143
 8009d40:	0800a153 	.word	0x0800a153
 8009d44:	0800a163 	.word	0x0800a163
 8009d48:	0800a173 	.word	0x0800a173
 8009d4c:	0800a183 	.word	0x0800a183
 8009d50:	0800a193 	.word	0x0800a193
 8009d54:	0800a1a1 	.word	0x0800a1a1
 8009d58:	0800a1b1 	.word	0x0800a1b1
 8009d5c:	0800a1c1 	.word	0x0800a1c1
 8009d60:	0800a1d1 	.word	0x0800a1d1
 8009d64:	0800a1e1 	.word	0x0800a1e1
 8009d68:	0800a1f1 	.word	0x0800a1f1
 8009d6c:	0800a201 	.word	0x0800a201
 8009d70:	0800a211 	.word	0x0800a211
 8009d74:	0800a221 	.word	0x0800a221
 8009d78:	0800a231 	.word	0x0800a231
 8009d7c:	0800a241 	.word	0x0800a241
 8009d80:	0800a251 	.word	0x0800a251
 8009d84:	0800a261 	.word	0x0800a261
 8009d88:	0800a271 	.word	0x0800a271
 8009d8c:	0800a281 	.word	0x0800a281
 8009d90:	0800a291 	.word	0x0800a291
 8009d94:	0800a2a1 	.word	0x0800a2a1
 8009d98:	0800a2b1 	.word	0x0800a2b1
 8009d9c:	0800a2c1 	.word	0x0800a2c1
 8009da0:	0800a2d1 	.word	0x0800a2d1
 8009da4:	0800a2df 	.word	0x0800a2df
 8009da8:	0800a2ed 	.word	0x0800a2ed
 8009dac:	0800a2fb 	.word	0x0800a2fb
 8009db0:	0800a309 	.word	0x0800a309
 8009db4:	0800a317 	.word	0x0800a317
 8009db8:	0800a325 	.word	0x0800a325
 8009dbc:	0800a333 	.word	0x0800a333
 8009dc0:	0800a341 	.word	0x0800a341
 8009dc4:	0800a34f 	.word	0x0800a34f
 8009dc8:	0800a35d 	.word	0x0800a35d
 8009dcc:	0800a36b 	.word	0x0800a36b
 8009dd0:	0800a379 	.word	0x0800a379
 8009dd4:	0800a387 	.word	0x0800a387
 8009dd8:	0800a395 	.word	0x0800a395
 8009ddc:	0800a3a3 	.word	0x0800a3a3
 8009de0:	0800a3b1 	.word	0x0800a3b1
 8009de4:	0800a3bf 	.word	0x0800a3bf
 8009de8:	0800a3cd 	.word	0x0800a3cd
 8009dec:	0800a3db 	.word	0x0800a3db
 8009df0:	0800a3e9 	.word	0x0800a3e9
 8009df4:	0800a3f7 	.word	0x0800a3f7
 8009df8:	0800a405 	.word	0x0800a405
 8009dfc:	0800a413 	.word	0x0800a413
 8009e00:	0800a41f 	.word	0x0800a41f
 8009e04:	0800a42d 	.word	0x0800a42d
 8009e08:	0800a43b 	.word	0x0800a43b
 8009e0c:	0800a447 	.word	0x0800a447
 8009e10:	0800a453 	.word	0x0800a453
 8009e14:	0800a45f 	.word	0x0800a45f
 8009e18:	0800a46b 	.word	0x0800a46b
 8009e1c:	0800a477 	.word	0x0800a477
 8009e20:	0800a483 	.word	0x0800a483
 8009e24:	0800a491 	.word	0x0800a491
 8009e28:	0800a49f 	.word	0x0800a49f
 8009e2c:	0800a4ad 	.word	0x0800a4ad
 8009e30:	0800a4bb 	.word	0x0800a4bb
 8009e34:	0800a4c9 	.word	0x0800a4c9
 8009e38:	0800a4d7 	.word	0x0800a4d7
 8009e3c:	0800a4e5 	.word	0x0800a4e5
 8009e40:	0800a4f3 	.word	0x0800a4f3
 8009e44:	0800a501 	.word	0x0800a501
 8009e48:	0800a50f 	.word	0x0800a50f
 8009e4c:	0800a51d 	.word	0x0800a51d
 8009e50:	0800a52b 	.word	0x0800a52b
 8009e54:	0800a539 	.word	0x0800a539
 8009e58:	0800a547 	.word	0x0800a547
 8009e5c:	0800a555 	.word	0x0800a555
 8009e60:	0800a563 	.word	0x0800a563
 8009e64:	0800a571 	.word	0x0800a571
 8009e68:	0800a57f 	.word	0x0800a57f
 8009e6c:	0800a58d 	.word	0x0800a58d
 8009e70:	0800a59b 	.word	0x0800a59b
 8009e74:	0800a5a9 	.word	0x0800a5a9
 8009e78:	0800a5b7 	.word	0x0800a5b7
 8009e7c:	0800a5c5 	.word	0x0800a5c5
 8009e80:	0800a5d3 	.word	0x0800a5d3
 8009e84:	0800a5e1 	.word	0x0800a5e1
 8009e88:	0800a5ef 	.word	0x0800a5ef
 8009e8c:	0800a5fd 	.word	0x0800a5fd
 8009e90:	0800a60b 	.word	0x0800a60b
 8009e94:	0800a619 	.word	0x0800a619
 8009e98:	0800a627 	.word	0x0800a627
 8009e9c:	0800a635 	.word	0x0800a635
 8009ea0:	0800a643 	.word	0x0800a643
 8009ea4:	0800a651 	.word	0x0800a651
 8009ea8:	0800a65f 	.word	0x0800a65f
 8009eac:	0800a66d 	.word	0x0800a66d
 8009eb0:	0800a67b 	.word	0x0800a67b
 8009eb4:	0800a68d 	.word	0x0800a68d
 8009eb8:	0800a69f 	.word	0x0800a69f
 8009ebc:	0800a6b1 	.word	0x0800a6b1
 8009ec0:	0800a6c3 	.word	0x0800a6c3
 8009ec4:	0800a6d5 	.word	0x0800a6d5
 8009ec8:	0800a6e7 	.word	0x0800a6e7
 8009ecc:	0800a6f9 	.word	0x0800a6f9
 8009ed0:	0800a70b 	.word	0x0800a70b
 8009ed4:	0800a71d 	.word	0x0800a71d
 8009ed8:	0800a72f 	.word	0x0800a72f
 8009edc:	0800a741 	.word	0x0800a741
 8009ee0:	0800a753 	.word	0x0800a753
 8009ee4:	0800a765 	.word	0x0800a765
 8009ee8:	0800a777 	.word	0x0800a777
 8009eec:	0800a789 	.word	0x0800a789
 8009ef0:	0800a79b 	.word	0x0800a79b
 8009ef4:	0800a7ad 	.word	0x0800a7ad
 8009ef8:	0800a7bf 	.word	0x0800a7bf
 8009efc:	0800a7d1 	.word	0x0800a7d1
 8009f00:	0800a7df 	.word	0x0800a7df
 8009f04:	0800a7ed 	.word	0x0800a7ed
 8009f08:	0800a7fb 	.word	0x0800a7fb
 8009f0c:	0800a809 	.word	0x0800a809
 8009f10:	0800a817 	.word	0x0800a817
 8009f14:	0800a825 	.word	0x0800a825
 8009f18:	0800a833 	.word	0x0800a833
 8009f1c:	0800a845 	.word	0x0800a845
 8009f20:	0800a853 	.word	0x0800a853
 8009f24:	0800a861 	.word	0x0800a861
 8009f28:	0800a86f 	.word	0x0800a86f
 8009f2c:	0800a87d 	.word	0x0800a87d
 8009f30:	0800a88b 	.word	0x0800a88b
 8009f34:	0800a899 	.word	0x0800a899
 8009f38:	0800a8a7 	.word	0x0800a8a7
 8009f3c:	0800a8b5 	.word	0x0800a8b5
 8009f40:	0800a8c3 	.word	0x0800a8c3
 8009f44:	0800a8d1 	.word	0x0800a8d1
 8009f48:	0800a8df 	.word	0x0800a8df
 8009f4c:	0800a8ed 	.word	0x0800a8ed
 8009f50:	0800a8fb 	.word	0x0800a8fb
 8009f54:	0800a909 	.word	0x0800a909
 8009f58:	0800a917 	.word	0x0800a917
 8009f5c:	0800a925 	.word	0x0800a925
 8009f60:	0800a933 	.word	0x0800a933
 8009f64:	0800a941 	.word	0x0800a941
 8009f68:	0800a94f 	.word	0x0800a94f
 8009f6c:	0800a95d 	.word	0x0800a95d
 8009f70:	0800a96b 	.word	0x0800a96b
 8009f74:	0800a979 	.word	0x0800a979
 8009f78:	0800a987 	.word	0x0800a987
 8009f7c:	0800a995 	.word	0x0800a995
 8009f80:	0800a9a3 	.word	0x0800a9a3
 8009f84:	0800a9b1 	.word	0x0800a9b1
 8009f88:	0800a9bf 	.word	0x0800a9bf
 8009f8c:	0800a9cd 	.word	0x0800a9cd
 8009f90:	0800a9db 	.word	0x0800a9db
 8009f94:	0800a9e9 	.word	0x0800a9e9
 8009f98:	0800a9f7 	.word	0x0800a9f7
 8009f9c:	0800aa05 	.word	0x0800aa05
 8009fa0:	0800aa13 	.word	0x0800aa13
 8009fa4:	0800aa21 	.word	0x0800aa21
 8009fa8:	0800aa2f 	.word	0x0800aa2f
 8009fac:	0800aa3d 	.word	0x0800aa3d
 8009fb0:	0800aa4b 	.word	0x0800aa4b
 8009fb4:	0800aa59 	.word	0x0800aa59
 8009fb8:	0800aa67 	.word	0x0800aa67
 8009fbc:	0800aa75 	.word	0x0800aa75
 8009fc0:	0800aa83 	.word	0x0800aa83
 8009fc4:	0800aa91 	.word	0x0800aa91
 8009fc8:	0800aa9f 	.word	0x0800aa9f
 8009fcc:	0800aaad 	.word	0x0800aaad
 8009fd0:	0800aabb 	.word	0x0800aabb

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8009fda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
	break;
 8009fe0:	f000 bd79 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8009fea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	601a      	str	r2, [r3, #0]
	break;
 8009ff0:	f000 bd71 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8009ffa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
	break;
 800a000:	f000 bd69 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	601a      	str	r2, [r3, #0]
	break;
 800a00e:	f000 bd62 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	601a      	str	r2, [r3, #0]
	break;
 800a01c:	f000 bd5b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	789b      	ldrb	r3, [r3, #2]
 800a024:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	601a      	str	r2, [r3, #0]
	break;
 800a02a:	f000 bd54 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	78db      	ldrb	r3, [r3, #3]
 800a032:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]
	break;
 800a038:	f000 bd4d 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	791b      	ldrb	r3, [r3, #4]
 800a040:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	601a      	str	r2, [r3, #0]
	break;
 800a046:	f000 bd46 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	795b      	ldrb	r3, [r3, #5]
 800a04e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	601a      	str	r2, [r3, #0]
	break;
 800a054:	f000 bd3f 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	799b      	ldrb	r3, [r3, #6]
 800a05c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	601a      	str	r2, [r3, #0]
	break;
 800a062:	f000 bd38 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	601a      	str	r2, [r3, #0]
	break;
 800a06e:	f000 bd32 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	891b      	ldrh	r3, [r3, #8]
 800a076:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	601a      	str	r2, [r3, #0]
	break;
 800a07c:	f000 bd2b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	8a1b      	ldrh	r3, [r3, #16]
 800a084:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	601a      	str	r2, [r3, #0]
	break;
 800a08a:	f000 bd24 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	601a      	str	r2, [r3, #0]
	break;
 800a096:	f000 bd1e 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	7e1b      	ldrb	r3, [r3, #24]
 800a09e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	601a      	str	r2, [r3, #0]
	break;
 800a0a4:	f000 bd17 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	8b5b      	ldrh	r3, [r3, #26]
 800a0ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	601a      	str	r2, [r3, #0]
	break;
 800a0b2:	f000 bd10 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800a0bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	601a      	str	r2, [r3, #0]
	break;
 800a0c2:	f000 bd08 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a0cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	601a      	str	r2, [r3, #0]
	break;
 800a0d2:	f000 bd00 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	601a      	str	r2, [r3, #0]
	break;
 800a0e0:	f000 bcf9 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a0ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]
	break;
 800a0f0:	f000 bcf1 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a0f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	601a      	str	r2, [r3, #0]
	break;
 800a0fe:	f000 bcea 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800a108:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	601a      	str	r2, [r3, #0]
	break;
 800a10e:	f000 bce2 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800a118:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
	break;
 800a11e:	f000 bcda 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800a128:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
	break;
 800a12e:	f000 bcd2 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800a138:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	601a      	str	r2, [r3, #0]
	break;
 800a13e:	f000 bcca 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800a148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
	break;
 800a14e:	f000 bcc2 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 800a158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	601a      	str	r2, [r3, #0]
	break;
 800a15e:	f000 bcba 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 800a168:	461a      	mov	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	601a      	str	r2, [r3, #0]
	break;
 800a16e:	f000 bcb2 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 800a178:	461a      	mov	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	601a      	str	r2, [r3, #0]
	break;
 800a17e:	f000 bcaa 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800a188:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	601a      	str	r2, [r3, #0]
	break;
 800a18e:	f000 bca2 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a196:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	601a      	str	r2, [r3, #0]
	break;
 800a19c:	f000 bc9b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	601a      	str	r2, [r3, #0]
	break;
 800a1ac:	f000 bc93 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	601a      	str	r2, [r3, #0]
	break;
 800a1bc:	f000 bc8b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 800a1c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	601a      	str	r2, [r3, #0]
	break;
 800a1cc:	f000 bc83 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800a1d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	601a      	str	r2, [r3, #0]
	break;
 800a1dc:	f000 bc7b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800a1e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	601a      	str	r2, [r3, #0]
	break;
 800a1ec:	f000 bc73 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800a1f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	601a      	str	r2, [r3, #0]
	break;
 800a1fc:	f000 bc6b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800a206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	601a      	str	r2, [r3, #0]
	break;
 800a20c:	f000 bc63 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 800a216:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	601a      	str	r2, [r3, #0]
	break;
 800a21c:	f000 bc5b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800a226:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	601a      	str	r2, [r3, #0]
	break;
 800a22c:	f000 bc53 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800a236:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	601a      	str	r2, [r3, #0]
	break;
 800a23c:	f000 bc4b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800a246:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	601a      	str	r2, [r3, #0]
	break;
 800a24c:	f000 bc43 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 800a256:	461a      	mov	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	601a      	str	r2, [r3, #0]
	break;
 800a25c:	f000 bc3b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800a266:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	601a      	str	r2, [r3, #0]
	break;
 800a26c:	f000 bc33 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 800a276:	461a      	mov	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	601a      	str	r2, [r3, #0]
	break;
 800a27c:	f000 bc2b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a286:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	601a      	str	r2, [r3, #0]
	break;
 800a28c:	f000 bc23 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a296:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	601a      	str	r2, [r3, #0]
	break;
 800a29c:	f000 bc1b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a2a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	601a      	str	r2, [r3, #0]
	break;
 800a2ac:	f000 bc13 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800a2b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	601a      	str	r2, [r3, #0]
	break;
 800a2bc:	f000 bc0b 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800a2c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	601a      	str	r2, [r3, #0]
	break;
 800a2cc:	f000 bc03 	b.w	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800a2d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
	break;
 800a2dc:	e3fb      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800a2e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	601a      	str	r2, [r3, #0]
	break;
 800a2ea:	e3f4      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 800a2f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	601a      	str	r2, [r3, #0]
	break;
 800a2f8:	e3ed      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800a300:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	601a      	str	r2, [r3, #0]
	break;
 800a306:	e3e6      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800a30e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	601a      	str	r2, [r3, #0]
	break;
 800a314:	e3df      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800a31c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	601a      	str	r2, [r3, #0]
	break;
 800a322:	e3d8      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800a32a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	601a      	str	r2, [r3, #0]
	break;
 800a330:	e3d1      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a338:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	601a      	str	r2, [r3, #0]
	break;
 800a33e:	e3ca      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800a346:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	601a      	str	r2, [r3, #0]
	break;
 800a34c:	e3c3      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800a354:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	601a      	str	r2, [r3, #0]
	break;
 800a35a:	e3bc      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800a362:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	601a      	str	r2, [r3, #0]
	break;
 800a368:	e3b5      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 800a370:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	601a      	str	r2, [r3, #0]
	break;
 800a376:	e3ae      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 800a37e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]
	break;
 800a384:	e3a7      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800a38c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	601a      	str	r2, [r3, #0]
	break;
 800a392:	e3a0      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 800a39a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	601a      	str	r2, [r3, #0]
	break;
 800a3a0:	e399      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800a3a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]
	break;
 800a3ae:	e392      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800a3b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	601a      	str	r2, [r3, #0]
	break;
 800a3bc:	e38b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800a3c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	601a      	str	r2, [r3, #0]
	break;
 800a3ca:	e384      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 800a3d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	601a      	str	r2, [r3, #0]
	break;
 800a3d8:	e37d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800a3e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	601a      	str	r2, [r3, #0]
	break;
 800a3e6:	e376      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800a3ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]
	break;
 800a3f4:	e36f      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800a3fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	601a      	str	r2, [r3, #0]
	break;
 800a402:	e368      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800a40a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	601a      	str	r2, [r3, #0]
	break;
 800a410:	e361      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	7c1b      	ldrb	r3, [r3, #16]
 800a416:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	601a      	str	r2, [r3, #0]
	break;
 800a41c:	e35b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a424:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
	break;
 800a42a:	e354      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a432:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
	break;
 800a438:	e34d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	601a      	str	r2, [r3, #0]
	break;
 800a444:	e347      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	601a      	str	r2, [r3, #0]
	break;
 800a450:	e341      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	8adb      	ldrh	r3, [r3, #22]
 800a456:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	601a      	str	r2, [r3, #0]
	break;
 800a45c:	e33b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	8b1b      	ldrh	r3, [r3, #24]
 800a462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	601a      	str	r2, [r3, #0]
	break;
 800a468:	e335      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]
	break;
 800a474:	e32f      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	601a      	str	r2, [r3, #0]
	break;
 800a480:	e329      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 800a488:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	601a      	str	r2, [r3, #0]
	break;
 800a48e:	e322      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a496:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	601a      	str	r2, [r3, #0]
	break;
 800a49c:	e31b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a4a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	601a      	str	r2, [r3, #0]
	break;
 800a4aa:	e314      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800a4b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]
	break;
 800a4b8:	e30d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a4c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
	break;
 800a4c6:	e306      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 800a4ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]
	break;
 800a4d4:	e2ff      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 800a4dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	601a      	str	r2, [r3, #0]
	break;
 800a4e2:	e2f8      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 800a4ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
	break;
 800a4f0:	e2f1      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800a4f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
	break;
 800a4fe:	e2ea      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a506:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	601a      	str	r2, [r3, #0]
	break;
 800a50c:	e2e3      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 800a514:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]
	break;
 800a51a:	e2dc      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800a522:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	601a      	str	r2, [r3, #0]
	break;
 800a528:	e2d5      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 800a530:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	601a      	str	r2, [r3, #0]
	break;
 800a536:	e2ce      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800a53e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	601a      	str	r2, [r3, #0]
	break;
 800a544:	e2c7      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 800a54c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	601a      	str	r2, [r3, #0]
	break;
 800a552:	e2c0      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 800a55a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	601a      	str	r2, [r3, #0]
	break;
 800a560:	e2b9      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 800a568:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	601a      	str	r2, [r3, #0]
	break;
 800a56e:	e2b2      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800a576:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	601a      	str	r2, [r3, #0]
	break;
 800a57c:	e2ab      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800a584:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	601a      	str	r2, [r3, #0]
	break;
 800a58a:	e2a4      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a592:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	601a      	str	r2, [r3, #0]
	break;
 800a598:	e29d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a5a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]
	break;
 800a5a6:	e296      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a5ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	601a      	str	r2, [r3, #0]
	break;
 800a5b4:	e28f      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800a5bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	601a      	str	r2, [r3, #0]
	break;
 800a5c2:	e288      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a5ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	601a      	str	r2, [r3, #0]
	break;
 800a5d0:	e281      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800a5d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	601a      	str	r2, [r3, #0]
	break;
 800a5de:	e27a      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800a5e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	601a      	str	r2, [r3, #0]
	break;
 800a5ec:	e273      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800a5f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	601a      	str	r2, [r3, #0]
	break;
 800a5fa:	e26c      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800a602:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	601a      	str	r2, [r3, #0]
	break;
 800a608:	e265      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a610:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	601a      	str	r2, [r3, #0]
	break;
 800a616:	e25e      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800a61e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
	break;
 800a624:	e257      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800a62c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	601a      	str	r2, [r3, #0]
	break;
 800a632:	e250      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800a63a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	601a      	str	r2, [r3, #0]
	break;
 800a640:	e249      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a648:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	601a      	str	r2, [r3, #0]
	break;
 800a64e:	e242      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a656:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	601a      	str	r2, [r3, #0]
	break;
 800a65c:	e23b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a664:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
	break;
 800a66a:	e234      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a672:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	601a      	str	r2, [r3, #0]
	break;
 800a678:	e22d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a680:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 800a684:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	601a      	str	r2, [r3, #0]
	break;
 800a68a:	e224      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a692:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a696:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	601a      	str	r2, [r3, #0]
	break;
 800a69c:	e21b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800a6a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
	break;
 800a6ae:	e212      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800a6ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
	break;
 800a6c0:	e209      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800a6cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	601a      	str	r2, [r3, #0]
	break;
 800a6d2:	e200      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6da:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800a6de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
	break;
 800a6e4:	e1f7      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ec:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800a6f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	601a      	str	r2, [r3, #0]
	break;
 800a6f6:	e1ee      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fe:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800a702:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	601a      	str	r2, [r3, #0]
	break;
 800a708:	e1e5      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a710:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a714:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	601a      	str	r2, [r3, #0]
	break;
 800a71a:	e1dc      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a722:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 800a726:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	601a      	str	r2, [r3, #0]
	break;
 800a72c:	e1d3      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a734:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 800a738:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]
	break;
 800a73e:	e1ca      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a746:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a74a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	601a      	str	r2, [r3, #0]
	break;
 800a750:	e1c1      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a758:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 800a75c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	601a      	str	r2, [r3, #0]
	break;
 800a762:	e1b8      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 800a76e:	461a      	mov	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	601a      	str	r2, [r3, #0]
	break;
 800a774:	e1af      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a780:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
	break;
 800a786:	e1a6      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a792:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]
	break;
 800a798:	e19d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a7a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	601a      	str	r2, [r3, #0]
	break;
 800a7aa:	e194      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800a7b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	601a      	str	r2, [r3, #0]
	break;
 800a7bc:	e18b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800a7c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	601a      	str	r2, [r3, #0]
	break;
 800a7ce:	e182      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a7d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	601a      	str	r2, [r3, #0]
	break;
 800a7dc:	e17b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a7e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	601a      	str	r2, [r3, #0]
	break;
 800a7ea:	e174      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a7f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	601a      	str	r2, [r3, #0]
	break;
 800a7f8:	e16d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a800:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
	break;
 800a806:	e166      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800a80e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	601a      	str	r2, [r3, #0]
	break;
 800a814:	e15f      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800a81c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	601a      	str	r2, [r3, #0]
	break;
 800a822:	e158      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800a82a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	601a      	str	r2, [r3, #0]
	break;
 800a830:	e151      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a838:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800a83c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	601a      	str	r2, [r3, #0]
	break;
 800a842:	e148      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800a84a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	601a      	str	r2, [r3, #0]
	break;
 800a850:	e141      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800a858:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	601a      	str	r2, [r3, #0]
	break;
 800a85e:	e13a      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 800a866:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	601a      	str	r2, [r3, #0]
	break;
 800a86c:	e133      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800a874:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	601a      	str	r2, [r3, #0]
	break;
 800a87a:	e12c      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800a882:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]
	break;
 800a888:	e125      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800a890:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]
	break;
 800a896:	e11e      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 800a89e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
	break;
 800a8a4:	e117      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800a8ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	601a      	str	r2, [r3, #0]
	break;
 800a8b2:	e110      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 800a8ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	601a      	str	r2, [r3, #0]
	break;
 800a8c0:	e109      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800a8c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	601a      	str	r2, [r3, #0]
	break;
 800a8ce:	e102      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800a8d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	601a      	str	r2, [r3, #0]
	break;
 800a8dc:	e0fb      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800a8e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	601a      	str	r2, [r3, #0]
	break;
 800a8ea:	e0f4      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800a8f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	601a      	str	r2, [r3, #0]
	break;
 800a8f8:	e0ed      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800a900:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	601a      	str	r2, [r3, #0]
	break;
 800a906:	e0e6      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 800a90e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]
	break;
 800a914:	e0df      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 800a91c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	601a      	str	r2, [r3, #0]
	break;
 800a922:	e0d8      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 800a92a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	601a      	str	r2, [r3, #0]
	break;
 800a930:	e0d1      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 800a938:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	601a      	str	r2, [r3, #0]
	break;
 800a93e:	e0ca      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 800a946:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	601a      	str	r2, [r3, #0]
	break;
 800a94c:	e0c3      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800a954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	601a      	str	r2, [r3, #0]
	break;
 800a95a:	e0bc      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800a962:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	601a      	str	r2, [r3, #0]
	break;
 800a968:	e0b5      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800a970:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
	break;
 800a976:	e0ae      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 800a97e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	601a      	str	r2, [r3, #0]
	break;
 800a984:	e0a7      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 800a98c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	601a      	str	r2, [r3, #0]
	break;
 800a992:	e0a0      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 800a99a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
	break;
 800a9a0:	e099      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 800a9a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	601a      	str	r2, [r3, #0]
	break;
 800a9ae:	e092      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800a9b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	601a      	str	r2, [r3, #0]
	break;
 800a9bc:	e08b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800a9c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	601a      	str	r2, [r3, #0]
	break;
 800a9ca:	e084      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800a9d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	601a      	str	r2, [r3, #0]
	break;
 800a9d8:	e07d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800a9e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	601a      	str	r2, [r3, #0]
	break;
 800a9e6:	e076      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 800a9ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	601a      	str	r2, [r3, #0]
	break;
 800a9f4:	e06f      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 800a9fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	601a      	str	r2, [r3, #0]
	break;
 800aa02:	e068      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 800aa0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	601a      	str	r2, [r3, #0]
	break;
 800aa10:	e061      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 800aa18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	601a      	str	r2, [r3, #0]
	break;
 800aa1e:	e05a      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 800aa26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	601a      	str	r2, [r3, #0]
	break;
 800aa2c:	e053      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800aa34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	601a      	str	r2, [r3, #0]
	break;
 800aa3a:	e04c      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800aa42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	601a      	str	r2, [r3, #0]
	break;
 800aa48:	e045      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800aa50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	601a      	str	r2, [r3, #0]
	break;
 800aa56:	e03e      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800aa5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
	break;
 800aa64:	e037      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 800aa6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	601a      	str	r2, [r3, #0]
	break;
 800aa72:	e030      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 800aa7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	601a      	str	r2, [r3, #0]
	break;
 800aa80:	e029      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 800aa88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	601a      	str	r2, [r3, #0]
	break;
 800aa8e:	e022      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800aa96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	601a      	str	r2, [r3, #0]
	break;
 800aa9c:	e01b      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 800aaa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	601a      	str	r2, [r3, #0]
	break;
 800aaaa:	e014      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 800aab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	601a      	str	r2, [r3, #0]
	break;
 800aab8:	e00d      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aac0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	601a      	str	r2, [r3, #0]
	break;
 800aac6:	e006      	b.n	800aad6 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800aace:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800aad0:	23fc      	movs	r3, #252	; 0xfc
 800aad2:	77fb      	strb	r3, [r7, #31]
	break;
 800aad4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800aad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3724      	adds	r7, #36	; 0x24
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop

0800aae8 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3318      	adds	r3, #24
 800aaf8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800ab06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3318      	adds	r3, #24
 800ab26:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800ab34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3318      	adds	r3, #24
 800ab54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800ab62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b085      	sub	sp, #20
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3318      	adds	r3, #24
 800ab82:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800ab90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3318      	adds	r3, #24
 800abb0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3318      	adds	r3, #24
 800abde:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800abec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2208      	movs	r2, #8
 800ac0c:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	220b      	movs	r2, #11
 800ac12:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac1a:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ac22:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800ac2a:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ac32:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ac34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2212      	movs	r2, #18
 800ac5a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	220f      	movs	r2, #15
 800ac60:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2202      	movs	r2, #2
 800ac66:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800ac6e:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	220c      	movs	r2, #12
 800ac74:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ac76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	895b      	ldrh	r3, [r3, #10]
 800ac98:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	895b      	ldrh	r3, [r3, #10]
 800acb6:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acd6:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2200      	movs	r2, #0
 800acdc:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2240      	movs	r2, #64	; 0x40
 800ace2:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10d      	bne.n	800ad08 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d108      	bne.n	800ad08 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2200      	movs	r2, #0
 800ad04:	741a      	strb	r2, [r3, #16]
 800ad06:	e002      	b.n	800ad0e <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800ad0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d114      	bne.n	800ad40 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d110      	bne.n	800ad40 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	7d9b      	ldrb	r3, [r3, #22]
 800ad32:	f003 f879 	bl	800de28 <VL53L1_calc_range_ignore_threshold>
 800ad36:	4603      	mov	r3, r0
 800ad38:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	831a      	strh	r2, [r3, #24]
 800ad3e:	e002      	b.n	800ad46 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2200      	movs	r2, #0
 800ad44:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800ad4c:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2232      	movs	r2, #50	; 0x32
 800ad52:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800ad5a:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	228c      	movs	r2, #140	; 0x8c
 800ad60:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ad62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b085      	sub	sp, #20
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ad80:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ad88:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2207      	movs	r2, #7
 800ad8e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f643 2298 	movw	r2, #15000	; 0x3a98
 800ad96:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ad9e:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800ada6:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2246      	movs	r2, #70	; 0x46
 800adac:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800adb4:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	228c      	movs	r2, #140	; 0x8c
 800adba:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800adbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800adde:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f643 2298 	movw	r2, #15000	; 0x3a98
 800ade6:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800adee:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800adf6:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2208      	movs	r2, #8
 800adfc:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2228      	movs	r2, #40	; 0x28
 800ae02:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2209      	movs	r2, #9
 800ae08:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ae0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b085      	sub	sp, #20
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ae2c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f643 2298 	movw	r2, #15000	; 0x3a98
 800ae34:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae3c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ae44:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2210      	movs	r2, #16
 800ae4a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2208      	movs	r2, #8
 800ae50:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800ae52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b085      	sub	sp, #20
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	4603      	mov	r3, r0
 800ae6a:	6039      	str	r1, [r7, #0]
 800ae6c:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2204      	movs	r2, #4
 800ae76:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	2201      	movs	r2, #1
 800ae82:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2202      	movs	r2, #2
 800ae88:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2250      	movs	r2, #80	; 0x50
 800ae94:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2270      	movs	r2, #112	; 0x70
 800ae9a:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	f241 023d 	movw	r2, #4157	; 0x103d
 800aea2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2210      	movs	r2, #16
 800aea8:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2232      	movs	r2, #50	; 0x32
 800aeae:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2264      	movs	r2, #100	; 0x64
 800aeb4:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	22a0      	movs	r2, #160	; 0xa0
 800aec0:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2200      	movs	r2, #0
 800aec6:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800aece:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2208      	movs	r2, #8
 800aed4:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2288      	movs	r2, #136	; 0x88
 800aedc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2208      	movs	r2, #8
 800aee4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aef6:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	22fa      	movs	r2, #250	; 0xfa
 800aefc:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	79fa      	ldrb	r2, [r7, #7]
 800af02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800af0c:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2232      	movs	r2, #50	; 0x32
 800af12:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800af1a:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	228c      	movs	r2, #140	; 0x8c
 800af20:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2250      	movs	r2, #80	; 0x50
 800af26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2232      	movs	r2, #50	; 0x32
 800af2e:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800af30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	220e      	movs	r2, #14
 800af56:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f642 7294 	movw	r2, #12180	; 0x2f94
 800af5e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	220e      	movs	r2, #14
 800af64:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	220a      	movs	r2, #10
 800af6a:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2206      	movs	r2, #6
 800af70:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	220e      	movs	r2, #14
 800af76:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	220a      	movs	r2, #10
 800af7c:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2206      	movs	r2, #6
 800af82:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2209      	movs	r2, #9
 800af88:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2205      	movs	r2, #5
 800af8e:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2203      	movs	r2, #3
 800af94:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2206      	movs	r2, #6
 800af9a:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2206      	movs	r2, #6
 800afa0:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2206      	movs	r2, #6
 800afa6:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2221      	movs	r2, #33	; 0x21
 800afb2:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	223c      	movs	r2, #60	; 0x3c
 800afc4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	223c      	movs	r2, #60	; 0x3c
 800afca:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	223c      	movs	r2, #60	; 0x3c
 800afd0:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2280      	movs	r2, #128	; 0x80
 800afd6:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2280      	movs	r2, #128	; 0x80
 800afdc:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2280      	movs	r2, #128	; 0x80
 800afe2:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2208      	movs	r2, #8
 800afe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2210      	movs	r2, #16
 800aff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b022:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b02a:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b032:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b03a:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b042:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b04a:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f242 3228 	movw	r2, #9000	; 0x2328
 800b052:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f241 7270 	movw	r2, #6000	; 0x1770
 800b05a:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b062:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f242 3228 	movw	r2, #9000	; 0x2328
 800b06a:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f241 7270 	movw	r2, #6000	; 0x1770
 800b072:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b07a:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b082:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b08a:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b092:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b09a:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f24f 6218 	movw	r2, #63000	; 0xf618
 800b0a2:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b0aa:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b0b2:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b0ba:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b0c8:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b0d0:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f242 7210 	movw	r2, #10000	; 0x2710
 800b0e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2206      	movs	r2, #6
 800b0f0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b102:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f640 22be 	movw	r2, #2750	; 0xabe
 800b10c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	22fa      	movs	r2, #250	; 0xfa
 800b114:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b11e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b128:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800b132:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b13c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800b146:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f64f 7238 	movw	r2, #65336	; 0xff38
 800b150:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	22c8      	movs	r2, #200	; 0xc8
 800b158:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	22fa      	movs	r2, #250	; 0xfa
 800b160:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b16a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f640 1206 	movw	r2, #2310	; 0x906
 800b174:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f640 1206 	movw	r2, #2310	; 0x906
 800b186:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b190:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800b19a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b1a4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800b1ae:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f641 022e 	movw	r2, #6190	; 0x182e
 800b1b8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f641 3230 	movw	r2, #6960	; 0x1b30
 800b1d2:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f641 022e 	movw	r2, #6190	; 0x182e
 800b1dc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	22fa      	movs	r2, #250	; 0xfa
 800b1e4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b1ee:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800b1f8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f241 1294 	movw	r2, #4500	; 0x1194
 800b202:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f64f 7238 	movw	r2, #65336	; 0xff38
 800b20c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	22c8      	movs	r2, #200	; 0xc8
 800b214:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f640 3222 	movw	r2, #2850	; 0xb22
 800b21e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f640 42e4 	movw	r2, #3300	; 0xce4
 800b228:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f640 721e 	movw	r2, #3870	; 0xf1e
 800b242:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f241 222a 	movw	r2, #4650	; 0x122a
 800b24c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f640 720a 	movw	r2, #3850	; 0xf0a
 800b256:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f641 6214 	movw	r2, #7700	; 0x1e14
 800b278:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800b282:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f641 1288 	movw	r2, #6536	; 0x1988
 800b29c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 800b2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b2c2:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2238      	movs	r2, #56	; 0x38
 800b2c8:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2270      	movs	r2, #112	; 0x70
 800b2d4:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2210      	movs	r2, #16
 800b2da:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2264      	movs	r2, #100	; 0x64
 800b2e0:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2e8:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	220f      	movs	r2, #15
 800b2ee:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2234      	movs	r2, #52	; 0x34
 800b2f4:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	22c8      	movs	r2, #200	; 0xc8
 800b2fa:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b302:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b30a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
 800b328:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b334:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2211      	movs	r2, #17
 800b376:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2202      	movs	r2, #2
 800b37c:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2202      	movs	r2, #2
 800b388:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2208      	movs	r2, #8
 800b38e:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	22ff      	movs	r2, #255	; 0xff
 800b3d0:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800b3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d4:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2220      	movs	r2, #32
 800b404:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	220b      	movs	r2, #11
 800b40a:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2202      	movs	r2, #2
 800b418:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	220d      	movs	r2, #13
 800b41e:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800b446:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2238      	movs	r2, #56	; 0x38
 800b452:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	22ff      	movs	r2, #255	; 0xff
 800b458:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	221a      	movs	r2, #26
 800b46a:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	2200      	movs	r2, #0
 800b470:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2220      	movs	r2, #32
 800b476:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	2201      	movs	r2, #1
 800b47c:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	22cc      	movs	r2, #204	; 0xcc
 800b482:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	220b      	movs	r2, #11
 800b488:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2201      	movs	r2, #1
 800b48e:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	22f5      	movs	r2, #245	; 0xf5
 800b494:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2209      	movs	r2, #9
 800b49a:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800b4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a6:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2208      	movs	r2, #8
 800b4b0:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2278      	movs	r2, #120	; 0x78
 800b4b6:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2207      	movs	r2, #7
 800b4c8:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2221      	movs	r2, #33	; 0x21
 800b4ce:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2243      	movs	r2, #67	; 0x43
 800b4d4:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2210      	movs	r2, #16
 800b4da:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2232      	movs	r2, #50	; 0x32
 800b4e0:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	2254      	movs	r2, #84	; 0x54
 800b4e6:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2207      	movs	r2, #7
 800b4ec:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	2221      	movs	r2, #33	; 0x21
 800b4f2:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2243      	movs	r2, #67	; 0x43
 800b4f8:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2210      	movs	r2, #16
 800b4fe:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2202      	movs	r2, #2
 800b504:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	2243      	movs	r2, #67	; 0x43
 800b50a:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	2205      	movs	r2, #5
 800b510:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2200      	movs	r2, #0
 800b516:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2207      	movs	r2, #7
 800b51c:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2221      	movs	r2, #33	; 0x21
 800b522:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	2243      	movs	r2, #67	; 0x43
 800b528:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2210      	movs	r2, #16
 800b52e:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	2232      	movs	r2, #50	; 0x32
 800b534:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2254      	movs	r2, #84	; 0x54
 800b53a:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b542:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b54a:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 800b552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b554:	2210      	movs	r2, #16
 800b556:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	2200      	movs	r2, #0
 800b55c:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	220f      	movs	r2, #15
 800b562:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	220f      	movs	r2, #15
 800b568:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	2208      	movs	r2, #8
 800b56e:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b572:	2208      	movs	r2, #8
 800b574:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	2201      	movs	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	2200      	movs	r2, #0
 800b580:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	2200      	movs	r2, #0
 800b586:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800b588:	6a3b      	ldr	r3, [r7, #32]
 800b58a:	2200      	movs	r2, #0
 800b58c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800b58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b590:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	220b      	movs	r2, #11
 800b59c:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	2209      	movs	r2, #9
 800b5a2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800b5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ae:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	22c7      	movs	r2, #199	; 0xc7
 800b5d2:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	22ff      	movs	r2, #255	; 0xff
 800b5d8:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	22db      	movs	r2, #219	; 0xdb
 800b5de:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	2221      	movs	r2, #33	; 0x21
 800b5fc:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800b5fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b08a      	sub	sp, #40	; 0x28
 800b612:	af04      	add	r7, sp, #16
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b61c:	2300      	movs	r3, #0
 800b61e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b622:	9303      	str	r3, [sp, #12]
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	9302      	str	r3, [sp, #8]
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	9301      	str	r3, [sp, #4]
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	68b9      	ldr	r1, [r7, #8]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f7ff fe70 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800b63c:	4603      	mov	r3, r0
 800b63e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d121      	bne.n	800b68c <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	2207      	movs	r2, #7
 800b64c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2205      	movs	r2, #5
 800b652:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2208      	movs	r2, #8
 800b668:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2238      	movs	r2, #56	; 0x38
 800b66e:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	2207      	movs	r2, #7
 800b674:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	2205      	movs	r2, #5
 800b67a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800b680:	6a3b      	ldr	r3, [r7, #32]
 800b682:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08a      	sub	sp, #40	; 0x28
 800b69c:	af04      	add	r7, sp, #16
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	9302      	str	r3, [sp, #8]
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	68b9      	ldr	r1, [r7, #8]
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f7ff fe2b 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b6ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d121      	bne.n	800b716 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	220f      	movs	r2, #15
 800b6d6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	220d      	movs	r2, #13
 800b6dc:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	22b8      	movs	r2, #184	; 0xb8
 800b6f8:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	220f      	movs	r2, #15
 800b6fe:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	220d      	movs	r2, #13
 800b704:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b708:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b08a      	sub	sp, #40	; 0x28
 800b726:	af04      	add	r7, sp, #16
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	607a      	str	r2, [r7, #4]
 800b72e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b730:	2300      	movs	r3, #0
 800b732:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	9303      	str	r3, [sp, #12]
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	9302      	str	r3, [sp, #8]
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	68b9      	ldr	r1, [r7, #8]
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f7ff fde6 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d105      	bne.n	800b768 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2202      	movs	r2, #2
 800b760:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	223b      	movs	r2, #59	; 0x3b
 800b766:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08a      	sub	sp, #40	; 0x28
 800b778:	af04      	add	r7, sp, #16
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
 800b780:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b782:	2300      	movs	r3, #0
 800b784:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	9303      	str	r3, [sp, #12]
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	9302      	str	r3, [sp, #8]
 800b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	68b9      	ldr	r1, [r7, #8]
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7ff fdbd 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b7a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d105      	bne.n	800b7ba <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	225b      	movs	r2, #91	; 0x5b
 800b7b8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b08a      	sub	sp, #40	; 0x28
 800b7ca:	af04      	add	r7, sp, #16
 800b7cc:	60f8      	str	r0, [r7, #12]
 800b7ce:	60b9      	str	r1, [r7, #8]
 800b7d0:	607a      	str	r2, [r7, #4]
 800b7d2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	9303      	str	r3, [sp, #12]
 800b7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7de:	9302      	str	r3, [sp, #8]
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	68b9      	ldr	r1, [r7, #8]
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff fd94 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b7f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d11a      	bne.n	800b836 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	2200      	movs	r2, #0
 800b804:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2200      	movs	r2, #0
 800b80a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	22b1      	movs	r2, #177	; 0xb1
 800b810:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2200      	movs	r2, #0
 800b816:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	22d4      	movs	r2, #212	; 0xd4
 800b81c:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b824:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	2240      	movs	r2, #64	; 0x40
 800b834:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b08a      	sub	sp, #40	; 0x28
 800b846:	af04      	add	r7, sp, #16
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
 800b84e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b850:	2300      	movs	r3, #0
 800b852:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	9303      	str	r3, [sp, #12]
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	9302      	str	r3, [sp, #8]
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7ff fecf 	bl	800b60e <VL53L1_preset_mode_standard_ranging_short_range>
 800b870:	4603      	mov	r3, r0
 800b872:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d11a      	bne.n	800b8b2 <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	2200      	movs	r2, #0
 800b880:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2201      	movs	r2, #1
 800b886:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2284      	movs	r2, #132	; 0x84
 800b88c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2201      	movs	r2, #1
 800b892:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	22b1      	movs	r2, #177	; 0xb1
 800b898:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b8a0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
 800b8aa:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	2240      	movs	r2, #64	; 0x40
 800b8b0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b08a      	sub	sp, #40	; 0x28
 800b8c2:	af04      	add	r7, sp, #16
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
 800b8ca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 800b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d2:	9303      	str	r3, [sp, #12]
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	68b9      	ldr	r1, [r7, #8]
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f7ff fed6 	bl	800b698 <VL53L1_preset_mode_standard_ranging_long_range>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b8f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d11a      	bne.n	800b92e <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800b8f8:	6a3b      	ldr	r3, [r7, #32]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2200      	movs	r2, #0
 800b902:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2297      	movs	r2, #151	; 0x97
 800b908:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2200      	movs	r2, #0
 800b90e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	22b1      	movs	r2, #177	; 0xb1
 800b914:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b91c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b920:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	2240      	movs	r2, #64	; 0x40
 800b92c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b92e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b08a      	sub	sp, #40	; 0x28
 800b93e:	af04      	add	r7, sp, #16
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	60b9      	str	r1, [r7, #8]
 800b944:	607a      	str	r2, [r7, #4]
 800b946:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b948:	2300      	movs	r3, #0
 800b94a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 800b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94e:	9303      	str	r3, [sp, #12]
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b952:	9302      	str	r3, [sp, #8]
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	68b9      	ldr	r1, [r7, #8]
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff ff2f 	bl	800b7c6 <VL53L1_preset_mode_timed_ranging>
 800b968:	4603      	mov	r3, r0
 800b96a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b96c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d106      	bne.n	800b982 <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800b974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b976:	6a39      	ldr	r1, [r7, #32]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f005 f978 	bl	8010c6e <VL53L1_config_low_power_auto_mode>
 800b97e:	4603      	mov	r3, r0
 800b980:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b08a      	sub	sp, #40	; 0x28
 800b992:	af04      	add	r7, sp, #16
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	60b9      	str	r1, [r7, #8]
 800b998:	607a      	str	r2, [r7, #4]
 800b99a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b99c:	2300      	movs	r3, #0
 800b99e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	9303      	str	r3, [sp, #12]
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	9302      	str	r3, [sp, #8]
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	6a3b      	ldr	r3, [r7, #32]
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	68b9      	ldr	r1, [r7, #8]
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f7ff ff43 	bl	800b842 <VL53L1_preset_mode_timed_ranging_short_range>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800b9c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d106      	bne.n	800b9d6 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800b9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ca:	6a39      	ldr	r1, [r7, #32]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f005 f94e 	bl	8010c6e <VL53L1_config_low_power_auto_mode>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b9d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b08a      	sub	sp, #40	; 0x28
 800b9e6:	af04      	add	r7, sp, #16
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	607a      	str	r2, [r7, #4]
 800b9ee:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff ff57 	bl	800b8be <VL53L1_preset_mode_timed_ranging_long_range>
 800ba10:	4603      	mov	r3, r0
 800ba12:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ba14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800ba1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba1e:	6a39      	ldr	r1, [r7, #32]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f005 f924 	bl	8010c6e <VL53L1_config_low_power_auto_mode>
 800ba26:	4603      	mov	r3, r0
 800ba28:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b08a      	sub	sp, #40	; 0x28
 800ba3a:	af04      	add	r7, sp, #16
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
 800ba42:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	9303      	str	r3, [sp, #12]
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	9302      	str	r3, [sp, #8]
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	9301      	str	r3, [sp, #4]
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	68b9      	ldr	r1, [r7, #8]
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff fc5c 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800ba64:	4603      	mov	r3, r0
 800ba66:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800ba68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d116      	bne.n	800ba9e <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800ba70:	6a3b      	ldr	r3, [r7, #32]
 800ba72:	2200      	movs	r2, #0
 800ba74:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	22b1      	movs	r2, #177	; 0xb1
 800ba80:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2200      	movs	r2, #0
 800ba86:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	22d4      	movs	r2, #212	; 0xd4
 800ba8c:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800ba94:	6a3b      	ldr	r3, [r7, #32]
 800ba96:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	2210      	movs	r2, #16
 800ba9c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b090      	sub	sp, #64	; 0x40
 800baae:	af0a      	add	r7, sp, #40	; 0x28
 800bab0:	60f8      	str	r0, [r7, #12]
 800bab2:	60b9      	str	r1, [r7, #8]
 800bab4:	607a      	str	r2, [r7, #4]
 800bab6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bab8:	2300      	movs	r3, #0
 800baba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	9303      	str	r3, [sp, #12]
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	9302      	str	r3, [sp, #8]
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	68b8      	ldr	r0, [r7, #8]
 800bad4:	f7ff fc22 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800bad8:	4603      	mov	r3, r0
 800bada:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800badc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d171      	bne.n	800bbc8 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800baea:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	9308      	str	r3, [sp, #32]
 800baf0:	2305      	movs	r3, #5
 800baf2:	9307      	str	r3, [sp, #28]
 800baf4:	2304      	movs	r3, #4
 800baf6:	9306      	str	r3, [sp, #24]
 800baf8:	2303      	movs	r3, #3
 800bafa:	9305      	str	r3, [sp, #20]
 800bafc:	2302      	movs	r3, #2
 800bafe:	9304      	str	r3, [sp, #16]
 800bb00:	2301      	movs	r3, #1
 800bb02:	9303      	str	r3, [sp, #12]
 800bb04:	2300      	movs	r3, #0
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	2304      	movs	r3, #4
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	2302      	movs	r3, #2
 800bb12:	2201      	movs	r2, #1
 800bb14:	2100      	movs	r1, #0
 800bb16:	2007      	movs	r0, #7
 800bb18:	f001 fe1b 	bl	800d752 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	3302      	adds	r3, #2
 800bb20:	9308      	str	r3, [sp, #32]
 800bb22:	2305      	movs	r3, #5
 800bb24:	9307      	str	r3, [sp, #28]
 800bb26:	2304      	movs	r3, #4
 800bb28:	9306      	str	r3, [sp, #24]
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	2302      	movs	r3, #2
 800bb30:	9304      	str	r3, [sp, #16]
 800bb32:	2301      	movs	r3, #1
 800bb34:	9303      	str	r3, [sp, #12]
 800bb36:	2300      	movs	r3, #0
 800bb38:	9302      	str	r3, [sp, #8]
 800bb3a:	2304      	movs	r3, #4
 800bb3c:	9301      	str	r3, [sp, #4]
 800bb3e:	2303      	movs	r3, #3
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	2302      	movs	r3, #2
 800bb44:	2201      	movs	r2, #1
 800bb46:	2100      	movs	r1, #0
 800bb48:	2007      	movs	r0, #7
 800bb4a:	f001 fe92 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	2209      	movs	r2, #9
 800bb52:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800bb54:	6a3b      	ldr	r3, [r7, #32]
 800bb56:	220b      	movs	r2, #11
 800bb58:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	2209      	movs	r2, #9
 800bb5e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	220b      	movs	r2, #11
 800bb64:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	2200      	movs	r2, #0
 800bb76:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	221a      	movs	r2, #26
 800bb7c:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	2200      	movs	r2, #0
 800bb82:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	2228      	movs	r2, #40	; 0x28
 800bb88:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	2221      	movs	r2, #33	; 0x21
 800bb94:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	22f5      	movs	r2, #245	; 0xf5
 800bb9a:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2208      	movs	r2, #8
 800bba0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2288      	movs	r2, #136	; 0x88
 800bba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	68b9      	ldr	r1, [r7, #8]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 f821 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800bbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbe:	229b      	movs	r2, #155	; 0x9b
 800bbc0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc4:	2226      	movs	r2, #38	; 0x26
 800bbc6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b090      	sub	sp, #64	; 0x40
 800bbd8:	af0a      	add	r7, sp, #40	; 0x28
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	9301      	str	r3, [sp, #4]
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	68b9      	ldr	r1, [r7, #8]
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff ff52 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800bc06:	4603      	mov	r3, r0
 800bc08:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bc0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d13e      	bne.n	800bc90 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	9308      	str	r3, [sp, #32]
 800bc16:	2305      	movs	r3, #5
 800bc18:	9307      	str	r3, [sp, #28]
 800bc1a:	2304      	movs	r3, #4
 800bc1c:	9306      	str	r3, [sp, #24]
 800bc1e:	2303      	movs	r3, #3
 800bc20:	9305      	str	r3, [sp, #20]
 800bc22:	230a      	movs	r3, #10
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	2309      	movs	r3, #9
 800bc28:	9303      	str	r3, [sp, #12]
 800bc2a:	2308      	movs	r3, #8
 800bc2c:	9302      	str	r3, [sp, #8]
 800bc2e:	2304      	movs	r3, #4
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	2303      	movs	r3, #3
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	2302      	movs	r3, #2
 800bc38:	2201      	movs	r2, #1
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	2007      	movs	r0, #7
 800bc3e:	f001 fd88 	bl	800d752 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	3302      	adds	r3, #2
 800bc46:	9308      	str	r3, [sp, #32]
 800bc48:	2305      	movs	r3, #5
 800bc4a:	9307      	str	r3, [sp, #28]
 800bc4c:	2304      	movs	r3, #4
 800bc4e:	9306      	str	r3, [sp, #24]
 800bc50:	2303      	movs	r3, #3
 800bc52:	9305      	str	r3, [sp, #20]
 800bc54:	230a      	movs	r3, #10
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	2309      	movs	r3, #9
 800bc5a:	9303      	str	r3, [sp, #12]
 800bc5c:	2308      	movs	r3, #8
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	2304      	movs	r3, #4
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	2303      	movs	r3, #3
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	2302      	movs	r3, #2
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	2007      	movs	r0, #7
 800bc70:	f001 fdff 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	68b9      	ldr	r1, [r7, #8]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 ffbd 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	22bb      	movs	r2, #187	; 0xbb
 800bc88:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	2226      	movs	r2, #38	; 0x26
 800bc8e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08c      	sub	sp, #48	; 0x30
 800bca0:	af06      	add	r7, sp, #24
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	9304      	str	r3, [sp, #16]
 800bcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb4:	9303      	str	r3, [sp, #12]
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	9302      	str	r3, [sp, #8]
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	68b9      	ldr	r1, [r7, #8]
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f7ff ff83 	bl	800bbd4 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bcd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d102      	bne.n	800bce0 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	22db      	movs	r2, #219	; 0xdb
 800bcde:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b090      	sub	sp, #64	; 0x40
 800bcf0:	af0a      	add	r7, sp, #40	; 0x28
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	9303      	str	r3, [sp, #12]
 800bd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd08:	9302      	str	r3, [sp, #8]
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0c:	9301      	str	r3, [sp, #4]
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	68b9      	ldr	r1, [r7, #8]
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f7ff fec6 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bd22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d13e      	bne.n	800bda8 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	9308      	str	r3, [sp, #32]
 800bd2e:	230d      	movs	r3, #13
 800bd30:	9307      	str	r3, [sp, #28]
 800bd32:	230c      	movs	r3, #12
 800bd34:	9306      	str	r3, [sp, #24]
 800bd36:	230b      	movs	r3, #11
 800bd38:	9305      	str	r3, [sp, #20]
 800bd3a:	230a      	movs	r3, #10
 800bd3c:	9304      	str	r3, [sp, #16]
 800bd3e:	2309      	movs	r3, #9
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	2308      	movs	r3, #8
 800bd44:	9302      	str	r3, [sp, #8]
 800bd46:	230c      	movs	r3, #12
 800bd48:	9301      	str	r3, [sp, #4]
 800bd4a:	230b      	movs	r3, #11
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	230a      	movs	r3, #10
 800bd50:	2209      	movs	r2, #9
 800bd52:	2108      	movs	r1, #8
 800bd54:	2007      	movs	r0, #7
 800bd56:	f001 fcfc 	bl	800d752 <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	3302      	adds	r3, #2
 800bd5e:	9308      	str	r3, [sp, #32]
 800bd60:	230d      	movs	r3, #13
 800bd62:	9307      	str	r3, [sp, #28]
 800bd64:	230c      	movs	r3, #12
 800bd66:	9306      	str	r3, [sp, #24]
 800bd68:	230b      	movs	r3, #11
 800bd6a:	9305      	str	r3, [sp, #20]
 800bd6c:	230a      	movs	r3, #10
 800bd6e:	9304      	str	r3, [sp, #16]
 800bd70:	2309      	movs	r3, #9
 800bd72:	9303      	str	r3, [sp, #12]
 800bd74:	2308      	movs	r3, #8
 800bd76:	9302      	str	r3, [sp, #8]
 800bd78:	230c      	movs	r3, #12
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	230b      	movs	r3, #11
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	230a      	movs	r3, #10
 800bd82:	2209      	movs	r2, #9
 800bd84:	2108      	movs	r1, #8
 800bd86:	2007      	movs	r0, #7
 800bd88:	f001 fd73 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 ff31 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	22bb      	movs	r2, #187	; 0xbb
 800bda6:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800bda8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08c      	sub	sp, #48	; 0x30
 800bdb8:	af06      	add	r7, sp, #24
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	9304      	str	r3, [sp, #16]
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdcc:	9303      	str	r3, [sp, #12]
 800bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd0:	9302      	str	r3, [sp, #8]
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	68b9      	ldr	r1, [r7, #8]
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f7ff ff83 	bl	800bcec <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800bde6:	4603      	mov	r3, r0
 800bde8:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 800bdea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d102      	bne.n	800bdf8 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800bdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf4:	22db      	movs	r2, #219	; 0xdb
 800bdf6:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800bdf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b090      	sub	sp, #64	; 0x40
 800be08:	af0a      	add	r7, sp, #40	; 0x28
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	9302      	str	r3, [sp, #8]
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	68b9      	ldr	r1, [r7, #8]
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff fe3a 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800be36:	4603      	mov	r3, r0
 800be38:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800be3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d166      	bne.n	800bf10 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800be48:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	9308      	str	r3, [sp, #32]
 800be4e:	2304      	movs	r3, #4
 800be50:	9307      	str	r3, [sp, #28]
 800be52:	2303      	movs	r3, #3
 800be54:	9306      	str	r3, [sp, #24]
 800be56:	2302      	movs	r3, #2
 800be58:	9305      	str	r3, [sp, #20]
 800be5a:	2301      	movs	r3, #1
 800be5c:	9304      	str	r3, [sp, #16]
 800be5e:	2300      	movs	r3, #0
 800be60:	9303      	str	r3, [sp, #12]
 800be62:	2307      	movs	r3, #7
 800be64:	9302      	str	r3, [sp, #8]
 800be66:	2304      	movs	r3, #4
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	2303      	movs	r3, #3
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	2302      	movs	r3, #2
 800be70:	2201      	movs	r2, #1
 800be72:	2100      	movs	r1, #0
 800be74:	2007      	movs	r0, #7
 800be76:	f001 fc6c 	bl	800d752 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	3302      	adds	r3, #2
 800be7e:	9308      	str	r3, [sp, #32]
 800be80:	2304      	movs	r3, #4
 800be82:	9307      	str	r3, [sp, #28]
 800be84:	2303      	movs	r3, #3
 800be86:	9306      	str	r3, [sp, #24]
 800be88:	2302      	movs	r3, #2
 800be8a:	9305      	str	r3, [sp, #20]
 800be8c:	2301      	movs	r3, #1
 800be8e:	9304      	str	r3, [sp, #16]
 800be90:	2300      	movs	r3, #0
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	2307      	movs	r3, #7
 800be96:	9302      	str	r3, [sp, #8]
 800be98:	2304      	movs	r3, #4
 800be9a:	9301      	str	r3, [sp, #4]
 800be9c:	2303      	movs	r3, #3
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	2302      	movs	r3, #2
 800bea2:	2201      	movs	r2, #1
 800bea4:	2100      	movs	r1, #0
 800bea6:	2007      	movs	r0, #7
 800bea8:	f001 fce3 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	6a3b      	ldr	r3, [r7, #32]
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	68b9      	ldr	r1, [r7, #8]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fea1 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	2204      	movs	r2, #4
 800bec0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	2203      	movs	r2, #3
 800bec6:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	2200      	movs	r2, #0
 800becc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	2242      	movs	r2, #66	; 0x42
 800bed2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	2200      	movs	r2, #0
 800bed8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 800beda:	6a3b      	ldr	r3, [r7, #32]
 800bedc:	2242      	movs	r2, #66	; 0x42
 800bede:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	2200      	movs	r2, #0
 800bee4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	2252      	movs	r2, #82	; 0x52
 800beea:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	2200      	movs	r2, #0
 800bef0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800bef2:	6a3b      	ldr	r3, [r7, #32]
 800bef4:	2266      	movs	r2, #102	; 0x66
 800bef6:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2204      	movs	r2, #4
 800befc:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	22a4      	movs	r2, #164	; 0xa4
 800bf02:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	229b      	movs	r2, #155	; 0x9b
 800bf08:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	2226      	movs	r2, #38	; 0x26
 800bf0e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bf10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b090      	sub	sp, #64	; 0x40
 800bf20:	af0a      	add	r7, sp, #40	; 0x28
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	9303      	str	r3, [sp, #12]
 800bf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf38:	9302      	str	r3, [sp, #8]
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f7ff fdae 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800bf52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d178      	bne.n	800c04c <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	9308      	str	r3, [sp, #32]
 800bf5e:	2305      	movs	r3, #5
 800bf60:	9307      	str	r3, [sp, #28]
 800bf62:	2304      	movs	r3, #4
 800bf64:	9306      	str	r3, [sp, #24]
 800bf66:	2303      	movs	r3, #3
 800bf68:	9305      	str	r3, [sp, #20]
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	2301      	movs	r3, #1
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	2300      	movs	r3, #0
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	2304      	movs	r3, #4
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	2302      	movs	r3, #2
 800bf80:	2201      	movs	r2, #1
 800bf82:	2100      	movs	r1, #0
 800bf84:	2007      	movs	r0, #7
 800bf86:	f001 fbe4 	bl	800d752 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	3302      	adds	r3, #2
 800bf8e:	9308      	str	r3, [sp, #32]
 800bf90:	2305      	movs	r3, #5
 800bf92:	9307      	str	r3, [sp, #28]
 800bf94:	2304      	movs	r3, #4
 800bf96:	9306      	str	r3, [sp, #24]
 800bf98:	2303      	movs	r3, #3
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	2302      	movs	r3, #2
 800bf9e:	9304      	str	r3, [sp, #16]
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	9303      	str	r3, [sp, #12]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9302      	str	r3, [sp, #8]
 800bfa8:	2304      	movs	r3, #4
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	2303      	movs	r3, #3
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	2007      	movs	r0, #7
 800bfb8:	f001 fc5b 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	68b9      	ldr	r1, [r7, #8]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fe19 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	2209      	movs	r2, #9
 800bfd0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800bfd2:	6a3b      	ldr	r3, [r7, #32]
 800bfd4:	220b      	movs	r2, #11
 800bfd6:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	2221      	movs	r2, #33	; 0x21
 800bfe2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	221b      	movs	r2, #27
 800bfee:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	2200      	movs	r2, #0
 800bff4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	2229      	movs	r2, #41	; 0x29
 800bffa:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	2200      	movs	r2, #0
 800c000:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	2222      	movs	r2, #34	; 0x22
 800c006:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2209      	movs	r2, #9
 800c00c:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	22f5      	movs	r2, #245	; 0xf5
 800c012:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	2209      	movs	r2, #9
 800c018:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	220b      	movs	r2, #11
 800c01e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2208      	movs	r2, #8
 800c034:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2288      	movs	r2, #136	; 0x88
 800c03c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	229b      	movs	r2, #155	; 0x9b
 800c044:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	2226      	movs	r2, #38	; 0x26
 800c04a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c04c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b090      	sub	sp, #64	; 0x40
 800c05c:	af0a      	add	r7, sp, #40	; 0x28
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c066:	2300      	movs	r3, #0
 800c068:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c070:	9303      	str	r3, [sp, #12]
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	9302      	str	r3, [sp, #8]
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	9301      	str	r3, [sp, #4]
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	68b9      	ldr	r1, [r7, #8]
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f7ff ff49 	bl	800bf1c <VL53L1_preset_mode_histogram_long_range>
 800c08a:	4603      	mov	r3, r0
 800c08c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d13b      	bne.n	800c10e <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	9308      	str	r3, [sp, #32]
 800c09a:	2305      	movs	r3, #5
 800c09c:	9307      	str	r3, [sp, #28]
 800c09e:	2304      	movs	r3, #4
 800c0a0:	9306      	str	r3, [sp, #24]
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	230a      	movs	r3, #10
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	2309      	movs	r3, #9
 800c0ac:	9303      	str	r3, [sp, #12]
 800c0ae:	2308      	movs	r3, #8
 800c0b0:	9302      	str	r3, [sp, #8]
 800c0b2:	2304      	movs	r3, #4
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	2201      	movs	r2, #1
 800c0be:	2100      	movs	r1, #0
 800c0c0:	2007      	movs	r0, #7
 800c0c2:	f001 fb46 	bl	800d752 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	3302      	adds	r3, #2
 800c0ca:	9308      	str	r3, [sp, #32]
 800c0cc:	2305      	movs	r3, #5
 800c0ce:	9307      	str	r3, [sp, #28]
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	9306      	str	r3, [sp, #24]
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	9305      	str	r3, [sp, #20]
 800c0d8:	230a      	movs	r3, #10
 800c0da:	9304      	str	r3, [sp, #16]
 800c0dc:	2309      	movs	r3, #9
 800c0de:	9303      	str	r3, [sp, #12]
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	9302      	str	r3, [sp, #8]
 800c0e4:	2304      	movs	r3, #4
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	2007      	movs	r0, #7
 800c0f4:	f001 fbbd 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	68b9      	ldr	r1, [r7, #8]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fd7b 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	22bb      	movs	r2, #187	; 0xbb
 800c10c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b08c      	sub	sp, #48	; 0x30
 800c11e:	af06      	add	r7, sp, #24
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	607a      	str	r2, [r7, #4]
 800c126:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c128:	2300      	movs	r3, #0
 800c12a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	9304      	str	r3, [sp, #16]
 800c130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c132:	9303      	str	r3, [sp, #12]
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	9302      	str	r3, [sp, #8]
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	68b9      	ldr	r1, [r7, #8]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff ff86 	bl	800c058 <VL53L1_preset_mode_histogram_long_range_mm1>
 800c14c:	4603      	mov	r3, r0
 800c14e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d102      	bne.n	800c15e <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	22db      	movs	r2, #219	; 0xdb
 800c15c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c15e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b090      	sub	sp, #64	; 0x40
 800c16e:	af0a      	add	r7, sp, #40	; 0x28
 800c170:	60f8      	str	r0, [r7, #12]
 800c172:	60b9      	str	r1, [r7, #8]
 800c174:	607a      	str	r2, [r7, #4]
 800c176:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c178:	2300      	movs	r3, #0
 800c17a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	9304      	str	r3, [sp, #16]
 800c180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c182:	9303      	str	r3, [sp, #12]
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	9302      	str	r3, [sp, #8]
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff fc87 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800c19c:	4603      	mov	r3, r0
 800c19e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c1a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d178      	bne.n	800c29a <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	9308      	str	r3, [sp, #32]
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	9307      	str	r3, [sp, #28]
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	9306      	str	r3, [sp, #24]
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	9305      	str	r3, [sp, #20]
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	9304      	str	r3, [sp, #16]
 800c1bc:	2301      	movs	r3, #1
 800c1be:	9303      	str	r3, [sp, #12]
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	9302      	str	r3, [sp, #8]
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	2007      	movs	r0, #7
 800c1d4:	f001 fabd 	bl	800d752 <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	3302      	adds	r3, #2
 800c1dc:	9308      	str	r3, [sp, #32]
 800c1de:	2303      	movs	r3, #3
 800c1e0:	9307      	str	r3, [sp, #28]
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	9306      	str	r3, [sp, #24]
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	9305      	str	r3, [sp, #20]
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	9304      	str	r3, [sp, #16]
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	9303      	str	r3, [sp, #12]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9302      	str	r3, [sp, #8]
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	2301      	movs	r3, #1
 800c200:	2201      	movs	r2, #1
 800c202:	2100      	movs	r1, #0
 800c204:	2007      	movs	r0, #7
 800c206:	f001 fb34 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fcf2 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800c21a:	6a3b      	ldr	r3, [r7, #32]
 800c21c:	2205      	movs	r2, #5
 800c21e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	2207      	movs	r2, #7
 800c224:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c226:	6a3b      	ldr	r3, [r7, #32]
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	2236      	movs	r2, #54	; 0x36
 800c230:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c232:	6a3b      	ldr	r3, [r7, #32]
 800c234:	2200      	movs	r2, #0
 800c236:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	2228      	movs	r2, #40	; 0x28
 800c23c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c23e:	6a3b      	ldr	r3, [r7, #32]
 800c240:	2200      	movs	r2, #0
 800c242:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	2244      	movs	r2, #68	; 0x44
 800c248:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c24a:	6a3b      	ldr	r3, [r7, #32]
 800c24c:	2200      	movs	r2, #0
 800c24e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	2233      	movs	r2, #51	; 0x33
 800c254:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2205      	movs	r2, #5
 800c25a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	22f5      	movs	r2, #245	; 0xf5
 800c260:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c264:	2205      	movs	r2, #5
 800c266:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	2207      	movs	r2, #7
 800c26c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c274:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2208      	movs	r2, #8
 800c282:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2248      	movs	r2, #72	; 0x48
 800c28a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c290:	229b      	movs	r2, #155	; 0x9b
 800c292:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	2226      	movs	r2, #38	; 0x26
 800c298:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c29a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b090      	sub	sp, #64	; 0x40
 800c2aa:	af0a      	add	r7, sp, #40	; 0x28
 800c2ac:	60f8      	str	r0, [r7, #12]
 800c2ae:	60b9      	str	r1, [r7, #8]
 800c2b0:	607a      	str	r2, [r7, #4]
 800c2b2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	9303      	str	r3, [sp, #12]
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	9302      	str	r3, [sp, #8]
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	68b9      	ldr	r1, [r7, #8]
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7ff ff49 	bl	800c16a <VL53L1_preset_mode_histogram_medium_range>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c2dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d13b      	bne.n	800c35c <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	9308      	str	r3, [sp, #32]
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	9307      	str	r3, [sp, #28]
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	9306      	str	r3, [sp, #24]
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	9305      	str	r3, [sp, #20]
 800c2f4:	230a      	movs	r3, #10
 800c2f6:	9304      	str	r3, [sp, #16]
 800c2f8:	2309      	movs	r3, #9
 800c2fa:	9303      	str	r3, [sp, #12]
 800c2fc:	2308      	movs	r3, #8
 800c2fe:	9302      	str	r3, [sp, #8]
 800c300:	2302      	movs	r3, #2
 800c302:	9301      	str	r3, [sp, #4]
 800c304:	2302      	movs	r3, #2
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	2301      	movs	r3, #1
 800c30a:	2201      	movs	r2, #1
 800c30c:	2100      	movs	r1, #0
 800c30e:	2007      	movs	r0, #7
 800c310:	f001 fa1f 	bl	800d752 <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	3302      	adds	r3, #2
 800c318:	9308      	str	r3, [sp, #32]
 800c31a:	2303      	movs	r3, #3
 800c31c:	9307      	str	r3, [sp, #28]
 800c31e:	2302      	movs	r3, #2
 800c320:	9306      	str	r3, [sp, #24]
 800c322:	2301      	movs	r3, #1
 800c324:	9305      	str	r3, [sp, #20]
 800c326:	230a      	movs	r3, #10
 800c328:	9304      	str	r3, [sp, #16]
 800c32a:	2309      	movs	r3, #9
 800c32c:	9303      	str	r3, [sp, #12]
 800c32e:	2308      	movs	r3, #8
 800c330:	9302      	str	r3, [sp, #8]
 800c332:	2302      	movs	r3, #2
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	2302      	movs	r3, #2
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	2301      	movs	r3, #1
 800c33c:	2201      	movs	r2, #1
 800c33e:	2100      	movs	r1, #0
 800c340:	2007      	movs	r0, #7
 800c342:	f001 fa96 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	68b9      	ldr	r1, [r7, #8]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fc54 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	22bb      	movs	r2, #187	; 0xbb
 800c35a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c35c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08c      	sub	sp, #48	; 0x30
 800c36c:	af06      	add	r7, sp, #24
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c376:	2300      	movs	r3, #0
 800c378:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	9304      	str	r3, [sp, #16]
 800c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c380:	9303      	str	r3, [sp, #12]
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	9302      	str	r3, [sp, #8]
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	68b9      	ldr	r1, [r7, #8]
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f7ff ff86 	bl	800c2a6 <VL53L1_preset_mode_histogram_medium_range_mm1>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c39e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d102      	bne.n	800c3ac <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	22db      	movs	r2, #219	; 0xdb
 800c3aa:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c3ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b090      	sub	sp, #64	; 0x40
 800c3bc:	af0a      	add	r7, sp, #40	; 0x28
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	9304      	str	r3, [sp, #16]
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	9303      	str	r3, [sp, #12]
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	9302      	str	r3, [sp, #8]
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d8:	9301      	str	r3, [sp, #4]
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7ff fb60 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c3ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d178      	bne.n	800c4e8 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	9308      	str	r3, [sp, #32]
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	9307      	str	r3, [sp, #28]
 800c3fe:	2302      	movs	r3, #2
 800c400:	9306      	str	r3, [sp, #24]
 800c402:	2301      	movs	r3, #1
 800c404:	9305      	str	r3, [sp, #20]
 800c406:	2301      	movs	r3, #1
 800c408:	9304      	str	r3, [sp, #16]
 800c40a:	2301      	movs	r3, #1
 800c40c:	9303      	str	r3, [sp, #12]
 800c40e:	2300      	movs	r3, #0
 800c410:	9302      	str	r3, [sp, #8]
 800c412:	2301      	movs	r3, #1
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	2301      	movs	r3, #1
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	2301      	movs	r3, #1
 800c41c:	2200      	movs	r2, #0
 800c41e:	2107      	movs	r1, #7
 800c420:	2007      	movs	r0, #7
 800c422:	f001 f996 	bl	800d752 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	3302      	adds	r3, #2
 800c42a:	9308      	str	r3, [sp, #32]
 800c42c:	2302      	movs	r3, #2
 800c42e:	9307      	str	r3, [sp, #28]
 800c430:	2302      	movs	r3, #2
 800c432:	9306      	str	r3, [sp, #24]
 800c434:	2301      	movs	r3, #1
 800c436:	9305      	str	r3, [sp, #20]
 800c438:	2301      	movs	r3, #1
 800c43a:	9304      	str	r3, [sp, #16]
 800c43c:	2301      	movs	r3, #1
 800c43e:	9303      	str	r3, [sp, #12]
 800c440:	2300      	movs	r3, #0
 800c442:	9302      	str	r3, [sp, #8]
 800c444:	2301      	movs	r3, #1
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	2301      	movs	r3, #1
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	2301      	movs	r3, #1
 800c44e:	2200      	movs	r2, #0
 800c450:	2107      	movs	r1, #7
 800c452:	2007      	movs	r0, #7
 800c454:	f001 fa0d 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	68b9      	ldr	r1, [r7, #8]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fbcb 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	2203      	movs	r2, #3
 800c46c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	2205      	movs	r2, #5
 800c472:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	2200      	movs	r2, #0
 800c478:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	2252      	movs	r2, #82	; 0x52
 800c47e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	2200      	movs	r2, #0
 800c484:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	2237      	movs	r2, #55	; 0x37
 800c48a:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	2200      	movs	r2, #0
 800c490:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	2266      	movs	r2, #102	; 0x66
 800c496:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	2200      	movs	r2, #0
 800c49c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	2244      	movs	r2, #68	; 0x44
 800c4a2:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2203      	movs	r2, #3
 800c4a8:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	22f5      	movs	r2, #245	; 0xf5
 800c4ae:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	2205      	movs	r2, #5
 800c4ba:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2208      	movs	r2, #8
 800c4d0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2228      	movs	r2, #40	; 0x28
 800c4d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	22bb      	movs	r2, #187	; 0xbb
 800c4e0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	2226      	movs	r2, #38	; 0x26
 800c4e6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c4e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b090      	sub	sp, #64	; 0x40
 800c4f8:	af0a      	add	r7, sp, #40	; 0x28
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c502:	2300      	movs	r3, #0
 800c504:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50c:	9303      	str	r3, [sp, #12]
 800c50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7ff ff49 	bl	800c3b8 <VL53L1_preset_mode_histogram_short_range>
 800c526:	4603      	mov	r3, r0
 800c528:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c52a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d15a      	bne.n	800c5e8 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	9308      	str	r3, [sp, #32]
 800c536:	2301      	movs	r3, #1
 800c538:	9307      	str	r3, [sp, #28]
 800c53a:	2301      	movs	r3, #1
 800c53c:	9306      	str	r3, [sp, #24]
 800c53e:	2301      	movs	r3, #1
 800c540:	9305      	str	r3, [sp, #20]
 800c542:	2300      	movs	r3, #0
 800c544:	9304      	str	r3, [sp, #16]
 800c546:	2300      	movs	r3, #0
 800c548:	9303      	str	r3, [sp, #12]
 800c54a:	2300      	movs	r3, #0
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	2301      	movs	r3, #1
 800c550:	9301      	str	r3, [sp, #4]
 800c552:	2301      	movs	r3, #1
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	2300      	movs	r3, #0
 800c558:	2200      	movs	r2, #0
 800c55a:	2107      	movs	r1, #7
 800c55c:	2007      	movs	r0, #7
 800c55e:	f001 f8f8 	bl	800d752 <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	3302      	adds	r3, #2
 800c566:	9308      	str	r3, [sp, #32]
 800c568:	2301      	movs	r3, #1
 800c56a:	9307      	str	r3, [sp, #28]
 800c56c:	2301      	movs	r3, #1
 800c56e:	9306      	str	r3, [sp, #24]
 800c570:	2301      	movs	r3, #1
 800c572:	9305      	str	r3, [sp, #20]
 800c574:	2300      	movs	r3, #0
 800c576:	9304      	str	r3, [sp, #16]
 800c578:	2300      	movs	r3, #0
 800c57a:	9303      	str	r3, [sp, #12]
 800c57c:	2300      	movs	r3, #0
 800c57e:	9302      	str	r3, [sp, #8]
 800c580:	2301      	movs	r3, #1
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	2301      	movs	r3, #1
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	2300      	movs	r3, #0
 800c58a:	2200      	movs	r2, #0
 800c58c:	2107      	movs	r1, #7
 800c58e:	2007      	movs	r0, #7
 800c590:	f001 f96f 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	68b9      	ldr	r1, [r7, #8]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fb2d 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	2203      	movs	r2, #3
 800c5ae:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2231      	movs	r2, #49	; 0x31
 800c5ba:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5be:	2202      	movs	r2, #2
 800c5c0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c4:	2203      	movs	r2, #3
 800c5c6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2210      	movs	r2, #16
 800c5dc:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2218      	movs	r2, #24
 800c5e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 800c5e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b090      	sub	sp, #64	; 0x40
 800c5f8:	af0a      	add	r7, sp, #40	; 0x28
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c602:	2300      	movs	r3, #0
 800c604:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800c606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	9303      	str	r3, [sp, #12]
 800c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c610:	9302      	str	r3, [sp, #8]
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c614:	9301      	str	r3, [sp, #4]
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	68b9      	ldr	r1, [r7, #8]
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f7ff fec9 	bl	800c3b8 <VL53L1_preset_mode_histogram_short_range>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c62a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d13b      	bne.n	800c6aa <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	9308      	str	r3, [sp, #32]
 800c636:	2302      	movs	r3, #2
 800c638:	9307      	str	r3, [sp, #28]
 800c63a:	2302      	movs	r3, #2
 800c63c:	9306      	str	r3, [sp, #24]
 800c63e:	2301      	movs	r3, #1
 800c640:	9305      	str	r3, [sp, #20]
 800c642:	2301      	movs	r3, #1
 800c644:	9304      	str	r3, [sp, #16]
 800c646:	2309      	movs	r3, #9
 800c648:	9303      	str	r3, [sp, #12]
 800c64a:	2308      	movs	r3, #8
 800c64c:	9302      	str	r3, [sp, #8]
 800c64e:	2301      	movs	r3, #1
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	2301      	movs	r3, #1
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	2301      	movs	r3, #1
 800c658:	2200      	movs	r2, #0
 800c65a:	2107      	movs	r1, #7
 800c65c:	2007      	movs	r0, #7
 800c65e:	f001 f878 	bl	800d752 <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	3302      	adds	r3, #2
 800c666:	9308      	str	r3, [sp, #32]
 800c668:	2302      	movs	r3, #2
 800c66a:	9307      	str	r3, [sp, #28]
 800c66c:	2302      	movs	r3, #2
 800c66e:	9306      	str	r3, [sp, #24]
 800c670:	2301      	movs	r3, #1
 800c672:	9305      	str	r3, [sp, #20]
 800c674:	2301      	movs	r3, #1
 800c676:	9304      	str	r3, [sp, #16]
 800c678:	2309      	movs	r3, #9
 800c67a:	9303      	str	r3, [sp, #12]
 800c67c:	2308      	movs	r3, #8
 800c67e:	9302      	str	r3, [sp, #8]
 800c680:	2301      	movs	r3, #1
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	2301      	movs	r3, #1
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	2301      	movs	r3, #1
 800c68a:	2200      	movs	r2, #0
 800c68c:	2107      	movs	r1, #7
 800c68e:	2007      	movs	r0, #7
 800c690:	f001 f8ef 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	68b9      	ldr	r1, [r7, #8]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 faad 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	22bb      	movs	r2, #187	; 0xbb
 800c6a8:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c6aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b08c      	sub	sp, #48	; 0x30
 800c6ba:	af06      	add	r7, sp, #24
 800c6bc:	60f8      	str	r0, [r7, #12]
 800c6be:	60b9      	str	r1, [r7, #8]
 800c6c0:	607a      	str	r2, [r7, #4]
 800c6c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	9303      	str	r3, [sp, #12]
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	9302      	str	r3, [sp, #8]
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	9301      	str	r3, [sp, #4]
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	68b9      	ldr	r1, [r7, #8]
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f7ff ff86 	bl	800c5f4 <VL53L1_preset_mode_histogram_short_range_mm1>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c6ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d102      	bne.n	800c6fa <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	22db      	movs	r2, #219	; 0xdb
 800c6f8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c6fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b08c      	sub	sp, #48	; 0x30
 800c70a:	af06      	add	r7, sp, #24
 800c70c:	60f8      	str	r0, [r7, #12]
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c714:	2300      	movs	r3, #0
 800c716:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	9304      	str	r3, [sp, #16]
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	9303      	str	r3, [sp, #12]
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	9302      	str	r3, [sp, #8]
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7ff f9b9 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800c738:	4603      	mov	r3, r0
 800c73a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c73c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10b      	bne.n	800c75c <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2201      	movs	r2, #1
 800c748:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	2201      	movs	r2, #1
 800c74e:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	2283      	movs	r2, #131	; 0x83
 800c754:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	222e      	movs	r2, #46	; 0x2e
 800c75a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3718      	adds	r7, #24
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b090      	sub	sp, #64	; 0x40
 800c76c:	af0a      	add	r7, sp, #40	; 0x28
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c776:	2300      	movs	r3, #0
 800c778:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	9304      	str	r3, [sp, #16]
 800c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	9302      	str	r3, [sp, #8]
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 f9ba 	bl	800cb0e <VL53L1_preset_mode_histogram_multizone_long_range>
 800c79a:	4603      	mov	r3, r0
 800c79c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c79e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d151      	bne.n	800c84a <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800c7a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7a8:	6838      	ldr	r0, [r7, #0]
 800c7aa:	f00a fb1c 	bl	8016de6 <VL53L1_zone_preset_xtalk_planar>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	2209      	movs	r2, #9
 800c7b6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	2209      	movs	r2, #9
 800c7bc:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	9308      	str	r3, [sp, #32]
 800c7c2:	2304      	movs	r3, #4
 800c7c4:	9307      	str	r3, [sp, #28]
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	9306      	str	r3, [sp, #24]
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	2307      	movs	r3, #7
 800c7d8:	9302      	str	r3, [sp, #8]
 800c7da:	2304      	movs	r3, #4
 800c7dc:	9301      	str	r3, [sp, #4]
 800c7de:	2303      	movs	r3, #3
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	2302      	movs	r3, #2
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	2007      	movs	r0, #7
 800c7ea:	f000 ffb2 	bl	800d752 <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	3302      	adds	r3, #2
 800c7f2:	9308      	str	r3, [sp, #32]
 800c7f4:	2304      	movs	r3, #4
 800c7f6:	9307      	str	r3, [sp, #28]
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	9306      	str	r3, [sp, #24]
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	2301      	movs	r3, #1
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	2300      	movs	r3, #0
 800c806:	9303      	str	r3, [sp, #12]
 800c808:	2307      	movs	r3, #7
 800c80a:	9302      	str	r3, [sp, #8]
 800c80c:	2304      	movs	r3, #4
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	2303      	movs	r3, #3
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	2302      	movs	r3, #2
 800c816:	2201      	movs	r2, #1
 800c818:	2100      	movs	r1, #0
 800c81a:	2007      	movs	r0, #7
 800c81c:	f001 f829 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800c820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d108      	bne.n	800c83a <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	3302      	adds	r3, #2
 800c82c:	461a      	mov	r2, r3
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c832:	f003 f97d 	bl	800fb30 <VL53L1_set_histogram_multizone_initial_bin_config>
 800c836:	4603      	mov	r3, r0
 800c838:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	6a3b      	ldr	r3, [r7, #32]
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	68b9      	ldr	r1, [r7, #8]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f9da 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b090      	sub	sp, #64	; 0x40
 800c85a:	af0a      	add	r7, sp, #40	; 0x28
 800c85c:	60f8      	str	r0, [r7, #12]
 800c85e:	60b9      	str	r1, [r7, #8]
 800c860:	607a      	str	r2, [r7, #4]
 800c862:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c864:	2300      	movs	r3, #0
 800c866:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	9304      	str	r3, [sp, #16]
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	68b9      	ldr	r1, [r7, #8]
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff f911 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800c888:	4603      	mov	r3, r0
 800c88a:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800c88c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d16e      	bne.n	800c972 <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	9308      	str	r3, [sp, #32]
 800c898:	230c      	movs	r3, #12
 800c89a:	9307      	str	r3, [sp, #28]
 800c89c:	230b      	movs	r3, #11
 800c89e:	9306      	str	r3, [sp, #24]
 800c8a0:	230a      	movs	r3, #10
 800c8a2:	9305      	str	r3, [sp, #20]
 800c8a4:	2309      	movs	r3, #9
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	2308      	movs	r3, #8
 800c8aa:	9303      	str	r3, [sp, #12]
 800c8ac:	230f      	movs	r3, #15
 800c8ae:	9302      	str	r3, [sp, #8]
 800c8b0:	230c      	movs	r3, #12
 800c8b2:	9301      	str	r3, [sp, #4]
 800c8b4:	230b      	movs	r3, #11
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	230a      	movs	r3, #10
 800c8ba:	2209      	movs	r2, #9
 800c8bc:	2108      	movs	r1, #8
 800c8be:	200f      	movs	r0, #15
 800c8c0:	f000 ff47 	bl	800d752 <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	3302      	adds	r3, #2
 800c8c8:	9308      	str	r3, [sp, #32]
 800c8ca:	230c      	movs	r3, #12
 800c8cc:	9307      	str	r3, [sp, #28]
 800c8ce:	230b      	movs	r3, #11
 800c8d0:	9306      	str	r3, [sp, #24]
 800c8d2:	230a      	movs	r3, #10
 800c8d4:	9305      	str	r3, [sp, #20]
 800c8d6:	2309      	movs	r3, #9
 800c8d8:	9304      	str	r3, [sp, #16]
 800c8da:	2308      	movs	r3, #8
 800c8dc:	9303      	str	r3, [sp, #12]
 800c8de:	230f      	movs	r3, #15
 800c8e0:	9302      	str	r3, [sp, #8]
 800c8e2:	230c      	movs	r3, #12
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	230b      	movs	r3, #11
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	230a      	movs	r3, #10
 800c8ec:	2209      	movs	r2, #9
 800c8ee:	2108      	movs	r1, #8
 800c8f0:	200f      	movs	r0, #15
 800c8f2:	f000 ffbe 	bl	800d872 <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	68b9      	ldr	r1, [r7, #8]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 f97c 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	2209      	movs	r2, #9
 800c90a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	2209      	movs	r2, #9
 800c910:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	2200      	movs	r2, #0
 800c916:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	2221      	movs	r2, #33	; 0x21
 800c91c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	2200      	movs	r2, #0
 800c922:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	2221      	movs	r2, #33	; 0x21
 800c928:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c92a:	6a3b      	ldr	r3, [r7, #32]
 800c92c:	2200      	movs	r2, #0
 800c92e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	2229      	movs	r2, #41	; 0x29
 800c934:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	2200      	movs	r2, #0
 800c93a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	2229      	movs	r2, #41	; 0x29
 800c940:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2209      	movs	r2, #9
 800c946:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	22f5      	movs	r2, #245	; 0xf5
 800c94c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800c94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c950:	2209      	movs	r2, #9
 800c952:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	2209      	movs	r2, #9
 800c958:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	2209      	movs	r2, #9
 800c95e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	2206      	movs	r2, #6
 800c964:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c968:	22bb      	movs	r2, #187	; 0xbb
 800c96a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	2226      	movs	r2, #38	; 0x26
 800c970:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b08c      	sub	sp, #48	; 0x30
 800c982:	af06      	add	r7, sp, #24
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	60b9      	str	r1, [r7, #8]
 800c988:	607a      	str	r2, [r7, #4]
 800c98a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c98c:	2300      	movs	r3, #0
 800c98e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800c990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	9303      	str	r3, [sp, #12]
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	9302      	str	r3, [sp, #8]
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	9301      	str	r3, [sp, #4]
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff ff53 	bl	800c856 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	22db      	movs	r2, #219	; 0xdb
 800c9b8:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800c9ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b08c      	sub	sp, #48	; 0x30
 800c9ca:	af06      	add	r7, sp, #24
 800c9cc:	60f8      	str	r0, [r7, #12]
 800c9ce:	60b9      	str	r1, [r7, #8]
 800c9d0:	607a      	str	r2, [r7, #4]
 800c9d2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	9304      	str	r3, [sp, #16]
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	9303      	str	r3, [sp, #12]
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	9302      	str	r3, [sp, #8]
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	68b9      	ldr	r1, [r7, #8]
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff fbb9 	bl	800c16a <VL53L1_preset_mode_histogram_medium_range>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800c9fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d12c      	bne.n	800ca5e <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	9304      	str	r3, [sp, #16]
 800ca08:	2307      	movs	r3, #7
 800ca0a:	9303      	str	r3, [sp, #12]
 800ca0c:	2307      	movs	r3, #7
 800ca0e:	9302      	str	r3, [sp, #8]
 800ca10:	2302      	movs	r3, #2
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	2308      	movs	r3, #8
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	2304      	movs	r3, #4
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	2108      	movs	r1, #8
 800ca1e:	2004      	movs	r0, #4
 800ca20:	f00a f96c 	bl	8016cfc <VL53L1_init_zone_config_structure>
 800ca24:	4603      	mov	r3, r0
 800ca26:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2a:	785b      	ldrb	r3, [r3, #1]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800ca34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d108      	bne.n	800ca4e <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3e:	3302      	adds	r3, #2
 800ca40:	461a      	mov	r2, r3
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca46:	f003 f873 	bl	800fb30 <VL53L1_set_histogram_multizone_initial_bin_config>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f8d0 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3718      	adds	r7, #24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b08c      	sub	sp, #48	; 0x30
 800ca6e:	af06      	add	r7, sp, #24
 800ca70:	60f8      	str	r0, [r7, #12]
 800ca72:	60b9      	str	r1, [r7, #8]
 800ca74:	607a      	str	r2, [r7, #4]
 800ca76:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7e:	9304      	str	r3, [sp, #16]
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	9303      	str	r3, [sp, #12]
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	9302      	str	r3, [sp, #8]
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	6a3b      	ldr	r3, [r7, #32]
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f7ff fc8e 	bl	800c3b8 <VL53L1_preset_mode_histogram_short_range>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800caa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d12c      	bne.n	800cb02 <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	9304      	str	r3, [sp, #16]
 800caac:	2307      	movs	r3, #7
 800caae:	9303      	str	r3, [sp, #12]
 800cab0:	2307      	movs	r3, #7
 800cab2:	9302      	str	r3, [sp, #8]
 800cab4:	2302      	movs	r3, #2
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	2308      	movs	r3, #8
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	2304      	movs	r3, #4
 800cabe:	2202      	movs	r2, #2
 800cac0:	2108      	movs	r1, #8
 800cac2:	2004      	movs	r0, #4
 800cac4:	f00a f91a 	bl	8016cfc <VL53L1_init_zone_config_structure>
 800cac8:	4603      	mov	r3, r0
 800caca:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	785b      	ldrb	r3, [r3, #1]
 800cad0:	3301      	adds	r3, #1
 800cad2:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800cad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d108      	bne.n	800caf2 <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	3302      	adds	r3, #2
 800cae4:	461a      	mov	r2, r3
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caea:	f003 f821 	bl	800fb30 <VL53L1_set_histogram_multizone_initial_bin_config>
 800caee:	4603      	mov	r3, r0
 800caf0:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	68b9      	ldr	r1, [r7, #8]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f87e 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cb02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b08c      	sub	sp, #48	; 0x30
 800cb12:	af06      	add	r7, sp, #24
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	607a      	str	r2, [r7, #4]
 800cb1a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	9304      	str	r3, [sp, #16]
 800cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb26:	9303      	str	r3, [sp, #12]
 800cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2a:	9302      	str	r3, [sp, #8]
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	68b9      	ldr	r1, [r7, #8]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f7ff f9ee 	bl	800bf1c <VL53L1_preset_mode_histogram_long_range>
 800cb40:	4603      	mov	r3, r0
 800cb42:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cb44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d12c      	bne.n	800cba6 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	9304      	str	r3, [sp, #16]
 800cb50:	2307      	movs	r3, #7
 800cb52:	9303      	str	r3, [sp, #12]
 800cb54:	2307      	movs	r3, #7
 800cb56:	9302      	str	r3, [sp, #8]
 800cb58:	2302      	movs	r3, #2
 800cb5a:	9301      	str	r3, [sp, #4]
 800cb5c:	2308      	movs	r3, #8
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	2304      	movs	r3, #4
 800cb62:	2202      	movs	r2, #2
 800cb64:	2108      	movs	r1, #8
 800cb66:	2004      	movs	r0, #4
 800cb68:	f00a f8c8 	bl	8016cfc <VL53L1_init_zone_config_structure>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	785b      	ldrb	r3, [r3, #1]
 800cb74:	3301      	adds	r3, #1
 800cb76:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800cb7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d108      	bne.n	800cb96 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800cb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb86:	3302      	adds	r3, #2
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6879      	ldr	r1, [r7, #4]
 800cb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb8e:	f002 ffcf 	bl	800fb30 <VL53L1_set_histogram_multizone_initial_bin_config>
 800cb92:	4603      	mov	r3, r0
 800cb94:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800cb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f82c 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3718      	adds	r7, #24
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b08a      	sub	sp, #40	; 0x28
 800cbb6:	af04      	add	r7, sp, #16
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
 800cbbe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc6:	9303      	str	r3, [sp, #12]
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	9302      	str	r3, [sp, #8]
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	68b9      	ldr	r1, [r7, #8]
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f7fe fb9e 	bl	800b31c <VL53L1_preset_mode_standard_ranging>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800cbe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d102      	bne.n	800cbf2 <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	2201      	movs	r2, #1
 800cbf0:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800cbf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b085      	sub	sp, #20
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	60f8      	str	r0, [r7, #12]
 800cc06:	60b9      	str	r1, [r7, #8]
 800cc08:	607a      	str	r2, [r7, #4]
 800cc0a:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	79db      	ldrb	r3, [r3, #7]
 800cc40:	b29b      	uxth	r3, r3
				<< 8)
 800cc42:	021b      	lsls	r3, r3, #8
 800cc44:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	7a1b      	ldrb	r3, [r3, #8]
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	4413      	add	r3, r2
 800cc4e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	785b      	ldrb	r3, [r3, #1]
 800cc88:	b29b      	uxth	r3, r3
				<< 8)
 800cc8a:	021b      	lsls	r3, r3, #8
 800cc8c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	789b      	ldrb	r3, [r3, #2]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	4413      	add	r3, r2
 800cc96:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	78db      	ldrb	r3, [r3, #3]
 800cca0:	b29b      	uxth	r3, r3
				<< 8)
 800cca2:	021b      	lsls	r3, r3, #8
 800cca4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	791b      	ldrb	r3, [r3, #4]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	4413      	add	r3, r2
 800ccae:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800ccdc:	bf00      	nop
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	79db      	ldrb	r3, [r3, #7]
 800cd28:	b29b      	uxth	r3, r3
				<< 8)
 800cd2a:	021b      	lsls	r3, r3, #8
 800cd2c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	7a1b      	ldrb	r3, [r3, #8]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	4413      	add	r3, r2
 800cd36:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	785b      	ldrb	r3, [r3, #1]
 800cd68:	b29b      	uxth	r3, r3
				<< 8)
 800cd6a:	021b      	lsls	r3, r3, #8
 800cd6c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	789b      	ldrb	r3, [r3, #2]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	4413      	add	r3, r2
 800cd76:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	78db      	ldrb	r3, [r3, #3]
 800cd80:	b29b      	uxth	r3, r3
				<< 8)
 800cd82:	021b      	lsls	r3, r3, #8
 800cd84:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	791b      	ldrb	r3, [r3, #4]
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	4413      	add	r3, r2
 800cd8e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800cda4:	bf00      	nop
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b08c      	sub	sp, #48	; 0x30
 800cdb4:	af06      	add	r7, sp, #24
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc8:	9303      	str	r3, [sp, #12]
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	9302      	str	r3, [sp, #8]
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f7fe fe64 	bl	800baaa <VL53L1_preset_mode_histogram_ranging>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800cde6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10a      	bne.n	800ce04 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff fefd 	bl	800cbfe <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ce04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3318      	adds	r3, #24
 800ce1c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2230      	movs	r2, #48	; 0x30
 800ce32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800ce3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ce3e:	bf00      	nop
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	460b      	mov	r3, r1
 800ce54:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	3318      	adds	r3, #24
 800ce5a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	332c      	adds	r3, #44	; 0x2c
 800ce60:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	78fa      	ldrb	r2, [r7, #3]
 800ce66:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	2202      	movs	r2, #2
 800ce72:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2200      	movs	r2, #0
 800ce78:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	78fa      	ldrb	r2, [r7, #3]
 800ce84:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	2202      	movs	r2, #2
 800ce90:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2200      	movs	r2, #0
 800ce96:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	735a      	strb	r2, [r3, #13]

}
 800ce9e:	bf00      	nop
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
	...

0800ceac <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3318      	adds	r3, #24
 800cebc:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	332c      	adds	r3, #44	; 0x2c
 800cec2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800ceca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d115      	bne.n	800cefe <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2203      	movs	r2, #3
 800ced6:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2202      	movs	r2, #2
 800ceee:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	735a      	strb	r2, [r3, #13]
 800cefc:	e0be      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	7a1b      	ldrb	r3, [r3, #8]
 800cf02:	2bff      	cmp	r3, #255	; 0xff
 800cf04:	d103      	bne.n	800cf0e <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2280      	movs	r2, #128	; 0x80
 800cf0a:	721a      	strb	r2, [r3, #8]
 800cf0c:	e005      	b.n	800cf1a <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	7a1b      	ldrb	r3, [r3, #8]
 800cf12:	3301      	adds	r3, #1
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	7a19      	ldrb	r1, [r3, #8]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f103 0209 	add.w	r2, r3, #9
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	330a      	adds	r3, #10
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f002 fdc2 	bl	800fab2 <VL53L1_update_internal_stream_counters>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	7adb      	ldrb	r3, [r3, #11]
 800cf36:	f083 0302 	eor.w	r3, r3, #2
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	79db      	ldrb	r3, [r3, #7]
 800cf44:	3b03      	subs	r3, #3
 800cf46:	2b05      	cmp	r3, #5
 800cf48:	f200 8082 	bhi.w	800d050 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800cf4c:	a201      	add	r2, pc, #4	; (adr r2, 800cf54 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800cf4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf52:	bf00      	nop
 800cf54:	0800cf6d 	.word	0x0800cf6d
 800cf58:	0800d051 	.word	0x0800d051
 800cf5c:	0800d051 	.word	0x0800d051
 800cf60:	0800cfbf 	.word	0x0800cfbf
 800cf64:	0800cff5 	.word	0x0800cff5
 800cf68:	0800d01f 	.word	0x0800d01f

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800cf72:	f003 0302 	and.w	r3, r3, #2
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	dd03      	ble.n	800cf82 <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2206      	movs	r2, #6
 800cf7e:	71da      	strb	r2, [r3, #7]
 800cf80:	e00d      	b.n	800cf9e <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d303      	bcc.n	800cf98 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2208      	movs	r2, #8
 800cf94:	71da      	strb	r2, [r3, #7]
 800cf96:	e002      	b.n	800cf9e <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2207      	movs	r2, #7
 800cf9c:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2200      	movs	r2, #0
 800cfae:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	735a      	strb	r2, [r3, #13]

			break;
 800cfbc:	e05e      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d303      	bcc.n	800cfec <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2208      	movs	r2, #8
 800cfe8:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800cfea:	e047      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2207      	movs	r2, #7
 800cff0:	71da      	strb	r2, [r3, #7]
			break;
 800cff2:	e043      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	7b5b      	ldrb	r3, [r3, #13]
 800cff8:	3301      	adds	r3, #1
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d303      	bcc.n	800d016 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2208      	movs	r2, #8
 800d012:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800d014:	e032      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2207      	movs	r2, #7
 800d01a:	71da      	strb	r2, [r3, #7]
			break;
 800d01c:	e02e      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	7b1b      	ldrb	r3, [r3, #12]
 800d028:	f083 0301 	eor.w	r3, r3, #1
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d303      	bcc.n	800d048 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2208      	movs	r2, #8
 800d044:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800d046:	e019      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2207      	movs	r2, #7
 800d04c:	71da      	strb	r2, [r3, #7]
			break;
 800d04e:	e015      	b.n	800d07c <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2203      	movs	r2, #3
 800d054:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2202      	movs	r2, #2
 800d06c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2200      	movs	r2, #0
 800d078:	735a      	strb	r2, [r3, #13]
			break;
 800d07a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800d07c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d088:	b480      	push	{r7}
 800d08a:	b08d      	sub	sp, #52	; 0x34
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d090:	2300      	movs	r3, #0
 800d092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	3318      	adds	r3, #24
 800d09a:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d0a2:	3308      	adds	r3, #8
 800d0a4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	332c      	adds	r3, #44	; 0x2c
 800d0aa:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800d0b2:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d0ba:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d0c2:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800d0e2:	f003 031f 	and.w	r3, r3, #31
 800d0e6:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	78db      	ldrb	r3, [r3, #3]
 800d0ec:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800d0f4:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bf14      	ite	ne
 800d0fc:	2301      	movne	r3, #1
 800d0fe:	2300      	moveq	r3, #0
 800d100:	b2db      	uxtb	r3, r3
	histogram_mode =
 800d102:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d108:	111b      	asrs	r3, r3, #4
 800d10a:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800d10c:	f003 0302 	and.w	r3, r3, #2
 800d110:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800d114:	7c7b      	ldrb	r3, [r7, #17]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d008      	beq.n	800d12c <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d120:	111b      	asrs	r3, r3, #4
 800d122:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800d124:	f003 0302 	and.w	r3, r3, #2
 800d128:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800d132:	f003 0320 	and.w	r3, r3, #32
 800d136:	2b00      	cmp	r3, #0
 800d138:	d04e      	beq.n	800d1d8 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	79db      	ldrb	r3, [r3, #7]
 800d13e:	2b06      	cmp	r3, #6
 800d140:	d109      	bne.n	800d156 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800d142:	7c7b      	ldrb	r3, [r7, #17]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d14a      	bne.n	800d1de <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800d148:	7cfb      	ldrb	r3, [r7, #19]
 800d14a:	2b12      	cmp	r3, #18
 800d14c:	d047      	beq.n	800d1de <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800d14e:	23ef      	movs	r3, #239	; 0xef
 800d150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d154:	e043      	b.n	800d1de <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	7a1b      	ldrb	r3, [r3, #8]
 800d15a:	7cba      	ldrb	r2, [r7, #18]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d002      	beq.n	800d166 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800d160:	23ee      	movs	r3, #238	; 0xee
 800d162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800d166:	6a3b      	ldr	r3, [r7, #32]
 800d168:	7adb      	ldrb	r3, [r3, #11]
 800d16a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d16e:	429a      	cmp	r2, r3
 800d170:	d002      	beq.n	800d178 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800d172:	23ed      	movs	r3, #237	; 0xed
 800d174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	7b5b      	ldrb	r3, [r3, #13]
 800d17c:	4619      	mov	r1, r3
		expected_stream_count =
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	460b      	mov	r3, r1
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	4413      	add	r3, r2
 800d18a:	3302      	adds	r3, #2
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	7b5b      	ldrb	r3, [r3, #13]
 800d194:	4619      	mov	r1, r3
		expected_gph_id =
 800d196:	697a      	ldr	r2, [r7, #20]
 800d198:	460b      	mov	r3, r1
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	440b      	add	r3, r1
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3303      	adds	r3, #3
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800d1a8:	7c3a      	ldrb	r2, [r7, #16]
 800d1aa:	7cbb      	ldrb	r3, [r7, #18]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d00a      	beq.n	800d1c6 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d102      	bne.n	800d1c0 <VL53L1_check_ll_driver_rd_state+0x138>
 800d1ba:	7cbb      	ldrb	r3, [r7, #18]
 800d1bc:	2bff      	cmp	r3, #255	; 0xff
 800d1be:	d002      	beq.n	800d1c6 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800d1c0:	23ec      	movs	r3, #236	; 0xec
 800d1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800d1c6:	7bfa      	ldrb	r2, [r7, #15]
 800d1c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d005      	beq.n	800d1dc <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800d1d0:	23eb      	movs	r3, #235	; 0xeb
 800d1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d1d6:	e002      	b.n	800d1de <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800d1d8:	bf00      	nop
 800d1da:	e000      	b.n	800d1de <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800d1dc:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800d1de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3734      	adds	r7, #52	; 0x34
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b088      	sub	sp, #32
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	3318      	adds	r3, #24
 800d1fe:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d206:	3308      	adds	r3, #8
 800d208:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	332c      	adds	r3, #44	; 0x2c
 800d20e:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d216:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800d21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d11b      	bne.n	800d25e <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	2203      	movs	r2, #3
 800d22a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	2200      	movs	r2, #0
 800d230:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	2200      	movs	r2, #0
 800d236:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	2200      	movs	r2, #0
 800d23c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	2202      	movs	r2, #2
 800d242:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	2200      	movs	r2, #0
 800d248:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	2200      	movs	r2, #0
 800d24e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	773b      	strb	r3, [r7, #28]
 800d25c:	e0b1      	b.n	800d3c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	791b      	ldrb	r3, [r3, #4]
 800d262:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	799b      	ldrb	r3, [r3, #6]
 800d268:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	785b      	ldrb	r3, [r3, #1]
 800d26e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	785b      	ldrb	r3, [r3, #1]
 800d274:	2bff      	cmp	r3, #255	; 0xff
 800d276:	d103      	bne.n	800d280 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2280      	movs	r2, #128	; 0x80
 800d27c:	705a      	strb	r2, [r3, #1]
 800d27e:	e005      	b.n	800d28c <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	785b      	ldrb	r3, [r3, #1]
 800d284:	3301      	adds	r3, #1
 800d286:	b2da      	uxtb	r2, r3
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	7859      	ldrb	r1, [r3, #1]
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	1c9a      	adds	r2, r3, #2
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	3303      	adds	r3, #3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f002 fc0a 	bl	800fab2 <VL53L1_update_internal_stream_counters>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	791b      	ldrb	r3, [r3, #4]
 800d2a6:	f083 0302 	eor.w	r3, r3, #2
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b05      	cmp	r3, #5
 800d2b6:	d053      	beq.n	800d360 <VL53L1_update_ll_driver_cfg_state+0x172>
 800d2b8:	2b05      	cmp	r3, #5
 800d2ba:	dc69      	bgt.n	800d390 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800d2bc:	2b03      	cmp	r3, #3
 800d2be:	d002      	beq.n	800d2c6 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800d2c0:	2b04      	cmp	r3, #4
 800d2c2:	d02d      	beq.n	800d320 <VL53L1_update_ll_driver_cfg_state+0x132>
 800d2c4:	e064      	b.n	800d390 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d909      	bls.n	800d2ee <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	795b      	ldrb	r3, [r3, #5]
 800d2e4:	f083 0301 	eor.w	r3, r3, #1
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d106      	bne.n	800d30c <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	2201      	movs	r2, #1
 800d302:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	2200      	movs	r2, #0
 800d308:	70da      	strb	r2, [r3, #3]
 800d30a:	e005      	b.n	800d318 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	2200      	movs	r2, #0
 800d310:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	2201      	movs	r2, #1
 800d316:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	2204      	movs	r2, #4
 800d31c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800d31e:	e050      	b.n	800d3c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	799b      	ldrb	r3, [r3, #6]
 800d324:	3301      	adds	r3, #1
 800d326:	b2da      	uxtb	r2, r3
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d336:	429a      	cmp	r2, r3
 800d338:	d940      	bls.n	800d3bc <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	2200      	movs	r2, #0
 800d33e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	795b      	ldrb	r3, [r3, #5]
 800d344:	f083 0301 	eor.w	r3, r3, #1
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d031      	beq.n	800d3bc <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	2205      	movs	r2, #5
 800d35c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800d35e:	e02d      	b.n	800d3bc <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	799b      	ldrb	r3, [r3, #6]
 800d364:	3301      	adds	r3, #1
 800d366:	b2da      	uxtb	r2, r3
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d376:	429a      	cmp	r2, r3
 800d378:	d922      	bls.n	800d3c0 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	2200      	movs	r2, #0
 800d37e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	795b      	ldrb	r3, [r3, #5]
 800d384:	f083 0301 	eor.w	r3, r3, #1
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	715a      	strb	r2, [r3, #5]
			}
			break;
 800d38e:	e017      	b.n	800d3c0 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	2203      	movs	r2, #3
 800d394:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2200      	movs	r2, #0
 800d39a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	719a      	strb	r2, [r3, #6]
			break;
 800d3ba:	e002      	b.n	800d3c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800d3bc:	bf00      	nop
 800d3be:	e000      	b.n	800d3c2 <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800d3c0:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d11d      	bne.n	800d408 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800d3cc:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800d3ce:	7f3b      	ldrb	r3, [r7, #28]
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	b2d8      	uxtb	r0, r3
 800d3d4:	68f9      	ldr	r1, [r7, #12]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4413      	add	r3, r2
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	440b      	add	r3, r1
 800d3e0:	3302      	adds	r3, #2
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	7b5b      	ldrb	r3, [r3, #13]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	7f7b      	ldrb	r3, [r7, #29]
 800d3ee:	f083 0302 	eor.w	r3, r3, #2
 800d3f2:	b2d8      	uxtb	r0, r3
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	440b      	add	r3, r1
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	4413      	add	r3, r2
 800d400:	3303      	adds	r3, #3
 800d402:	4602      	mov	r2, r0
 800d404:	701a      	strb	r2, [r3, #0]
 800d406:	e013      	b.n	800d430 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800d408:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800d40a:	68f9      	ldr	r1, [r7, #12]
 800d40c:	4613      	mov	r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	4413      	add	r3, r2
 800d412:	005b      	lsls	r3, r3, #1
 800d414:	440b      	add	r3, r1
 800d416:	3302      	adds	r3, #2
 800d418:	7f3a      	ldrb	r2, [r7, #28]
 800d41a:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800d41c:	7fba      	ldrb	r2, [r7, #30]
 800d41e:	68f9      	ldr	r1, [r7, #12]
 800d420:	4613      	mov	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	440b      	add	r3, r1
 800d42a:	3303      	adds	r3, #3
 800d42c:	7f7a      	ldrb	r2, [r7, #29]
 800d42e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800d430:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	7c1a      	ldrb	r2, [r3, #16]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	3301      	adds	r3, #1
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	7c52      	ldrb	r2, [r2, #17]
 800d456:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	3302      	adds	r3, #2
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	7c92      	ldrb	r2, [r2, #18]
 800d460:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	3303      	adds	r3, #3
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	7cd2      	ldrb	r2, [r2, #19]
 800d46a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	3304      	adds	r3, #4
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	7d12      	ldrb	r2, [r2, #20]
 800d474:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	3305      	adds	r3, #5
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	7d52      	ldrb	r2, [r2, #21]
 800d47e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	3306      	adds	r3, #6
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	7d92      	ldrb	r2, [r2, #22]
 800d488:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	3307      	adds	r3, #7
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	7dd2      	ldrb	r2, [r2, #23]
 800d492:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	3308      	adds	r3, #8
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	7e12      	ldrb	r2, [r2, #24]
 800d49c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	3309      	adds	r3, #9
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	7e52      	ldrb	r2, [r2, #25]
 800d4a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	330a      	adds	r3, #10
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	7e92      	ldrb	r2, [r2, #26]
 800d4b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	330b      	adds	r3, #11
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	7ed2      	ldrb	r2, [r2, #27]
 800d4ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	330c      	adds	r3, #12
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	7f12      	ldrb	r2, [r2, #28]
 800d4c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	330d      	adds	r3, #13
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	7f52      	ldrb	r2, [r2, #29]
 800d4ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	330e      	adds	r3, #14
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	7f92      	ldrb	r2, [r2, #30]
 800d4d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	330f      	adds	r3, #15
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	7fd2      	ldrb	r2, [r2, #31]
 800d4e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	3310      	adds	r3, #16
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d4ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	3311      	adds	r3, #17
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d4fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	3312      	adds	r3, #18
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800d506:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	3313      	adds	r3, #19
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800d512:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	3314      	adds	r3, #20
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d51e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	3315      	adds	r3, #21
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d52a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	3316      	adds	r3, #22
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d536:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	3317      	adds	r3, #23
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800d542:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	3318      	adds	r3, #24
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d54e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	3319      	adds	r3, #25
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800d55a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	331a      	adds	r3, #26
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800d566:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	331b      	adds	r3, #27
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d572:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	331c      	adds	r3, #28
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d57e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	331d      	adds	r3, #29
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d58a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	331e      	adds	r3, #30
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800d596:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	331f      	adds	r3, #31
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800d5a2:	701a      	strb	r2, [r3, #0]
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	22ff      	movs	r2, #255	; 0xff
 800d5bc:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	22ff      	movs	r2, #255	; 0xff
 800d5c2:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	22ff      	movs	r2, #255	; 0xff
 800d5c8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	22ff      	movs	r2, #255	; 0xff
 800d5ce:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5d6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5de:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5e6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ee:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5f6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5fe:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d606:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d60e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d616:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d61e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d626:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d62e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d636:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d63e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d646:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d64e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d656:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d65e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d666:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	22ff      	movs	r2, #255	; 0xff
 800d66c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	4603      	mov	r3, r0
 800d684:	6039      	str	r1, [r7, #0]
 800d686:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2210      	movs	r2, #16
 800d690:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	79fa      	ldrb	r2, [r7, #7]
 800d696:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800d698:	2300      	movs	r3, #0
 800d69a:	73fb      	strb	r3, [r7, #15]
 800d69c:	e017      	b.n	800d6ce <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800d69e:	7bfa      	ldrb	r2, [r7, #15]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	011b      	lsls	r3, r3, #4
 800d6a4:	4413      	add	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	3304      	adds	r3, #4
 800d6ae:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2203      	movs	r2, #3
 800d6b4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2203      	movs	r2, #3
 800d6ba:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2204      	movs	r2, #4
 800d6c0:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	73fb      	strb	r3, [r7, #15]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	7bfa      	ldrb	r2, [r7, #15]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d3e2      	bcc.n	800d69e <V53L1_init_zone_results_structure+0x22>
	}
}
 800d6d8:	bf00      	nop
 800d6da:	bf00      	nop
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b087      	sub	sp, #28
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d706:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800d708:	2300      	movs	r3, #0
 800d70a:	75fb      	strb	r3, [r7, #23]
 800d70c:	e016      	b.n	800d73c <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800d70e:	7dfa      	ldrb	r2, [r7, #23]
 800d710:	68b9      	ldr	r1, [r7, #8]
 800d712:	4613      	mov	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	440b      	add	r3, r1
 800d71c:	3304      	adds	r3, #4
 800d71e:	2201      	movs	r2, #1
 800d720:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800d722:	7dfa      	ldrb	r2, [r7, #23]
 800d724:	68b9      	ldr	r1, [r7, #8]
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	440b      	add	r3, r1
 800d730:	3306      	adds	r3, #6
 800d732:	2200      	movs	r2, #0
 800d734:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800d736:	7dfb      	ldrb	r3, [r7, #23]
 800d738:	3301      	adds	r3, #1
 800d73a:	75fb      	strb	r3, [r7, #23]
 800d73c:	7dfa      	ldrb	r2, [r7, #23]
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
 800d740:	429a      	cmp	r2, r3
 800d742:	d3e4      	bcc.n	800d70e <V53L1_init_zone_dss_configs+0x28>
	}
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop
 800d748:	371c      	adds	r7, #28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800d752:	b490      	push	{r4, r7}
 800d754:	b082      	sub	sp, #8
 800d756:	af00      	add	r7, sp, #0
 800d758:	4604      	mov	r4, r0
 800d75a:	4608      	mov	r0, r1
 800d75c:	4611      	mov	r1, r2
 800d75e:	461a      	mov	r2, r3
 800d760:	4623      	mov	r3, r4
 800d762:	71fb      	strb	r3, [r7, #7]
 800d764:	4603      	mov	r3, r0
 800d766:	71bb      	strb	r3, [r7, #6]
 800d768:	460b      	mov	r3, r1
 800d76a:	717b      	strb	r3, [r7, #5]
 800d76c:	4613      	mov	r3, r2
 800d76e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d770:	79bb      	ldrb	r3, [r7, #6]
 800d772:	011b      	lsls	r3, r3, #4
 800d774:	b2da      	uxtb	r2, r3
 800d776:	79fb      	ldrb	r3, [r7, #7]
 800d778:	4413      	add	r3, r2
 800d77a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d780:	793b      	ldrb	r3, [r7, #4]
 800d782:	011b      	lsls	r3, r3, #4
 800d784:	b2da      	uxtb	r2, r3
 800d786:	797b      	ldrb	r3, [r7, #5]
 800d788:	4413      	add	r3, r2
 800d78a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d790:	7d3b      	ldrb	r3, [r7, #20]
 800d792:	011b      	lsls	r3, r3, #4
 800d794:	b2da      	uxtb	r2, r3
 800d796:	7c3b      	ldrb	r3, [r7, #16]
 800d798:	4413      	add	r3, r2
 800d79a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79e:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800d7a0:	7f3b      	ldrb	r3, [r7, #28]
 800d7a2:	011b      	lsls	r3, r3, #4
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	7e3b      	ldrb	r3, [r7, #24]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800d7b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7b4:	011b      	lsls	r3, r3, #4
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7bc:	4413      	add	r3, r2
 800d7be:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c2:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800d7c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7d0:	4413      	add	r3, r2
 800d7d2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7da:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ee:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f2:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800d7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d7fe:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800d800:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d804:	011b      	lsls	r3, r3, #4
 800d806:	b2da      	uxtb	r2, r3
 800d808:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d80c:	4413      	add	r3, r2
 800d80e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d81a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800d81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81e:	2200      	movs	r2, #0
 800d820:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d830:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83c:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800d842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d844:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800d852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d858:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800d85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d860:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	2200      	movs	r2, #0
 800d866:	701a      	strb	r2, [r3, #0]

}
 800d868:	bf00      	nop
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bc90      	pop	{r4, r7}
 800d870:	4770      	bx	lr

0800d872 <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800d872:	b490      	push	{r4, r7}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	4604      	mov	r4, r0
 800d87a:	4608      	mov	r0, r1
 800d87c:	4611      	mov	r1, r2
 800d87e:	461a      	mov	r2, r3
 800d880:	4623      	mov	r3, r4
 800d882:	71fb      	strb	r3, [r7, #7]
 800d884:	4603      	mov	r3, r0
 800d886:	71bb      	strb	r3, [r7, #6]
 800d888:	460b      	mov	r3, r1
 800d88a:	717b      	strb	r3, [r7, #5]
 800d88c:	4613      	mov	r3, r2
 800d88e:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d890:	79bb      	ldrb	r3, [r7, #6]
 800d892:	011b      	lsls	r3, r3, #4
 800d894:	b2da      	uxtb	r2, r3
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	4413      	add	r3, r2
 800d89a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89e:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d8a0:	793b      	ldrb	r3, [r7, #4]
 800d8a2:	011b      	lsls	r3, r3, #4
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	797b      	ldrb	r3, [r7, #5]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ae:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d8b0:	7d3b      	ldrb	r3, [r7, #20]
 800d8b2:	011b      	lsls	r3, r3, #4
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	7c3b      	ldrb	r3, [r7, #16]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	789a      	ldrb	r2, [r3, #2]
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ce:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d2:	78da      	ldrb	r2, [r3, #3]
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e2:	789a      	ldrb	r2, [r3, #2]
 800d8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e6:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	78da      	ldrb	r2, [r3, #3]
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f2:	791a      	ldrb	r2, [r3, #4]
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d8fe:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800d900:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d904:	011b      	lsls	r3, r3, #4
 800d906:	b2da      	uxtb	r2, r3
 800d908:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d90c:	4413      	add	r3, r2
 800d90e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d91a:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	2200      	movs	r2, #0
 800d920:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800d922:	7f3b      	ldrb	r3, [r7, #28]
 800d924:	011b      	lsls	r3, r3, #4
 800d926:	b2da      	uxtb	r2, r3
 800d928:	7e3b      	ldrb	r3, [r7, #24]
 800d92a:	4413      	add	r3, r2
 800d92c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800d932:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d936:	011b      	lsls	r3, r3, #4
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d93e:	4413      	add	r3, r2
 800d940:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800d946:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d952:	4413      	add	r3, r2
 800d954:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	7bda      	ldrb	r2, [r3, #15]
 800d95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d960:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	7c1a      	ldrb	r2, [r3, #16]
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	7c5a      	ldrb	r2, [r3, #17]
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d978:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800d97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d980:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800d982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d984:	2200      	movs	r2, #0
 800d986:	701a      	strb	r2, [r3, #0]
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bc90      	pop	{r4, r7}
 800d990:	4770      	bx	lr

0800d992 <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800d992:	b480      	push	{r7}
 800d994:	b087      	sub	sp, #28
 800d996:	af00      	add	r7, sp, #0
 800d998:	60f8      	str	r0, [r7, #12]
 800d99a:	460b      	mov	r3, r1
 800d99c:	607a      	str	r2, [r7, #4]
 800d99e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	220c      	movs	r2, #12
 800d9ba:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800d9bc:	897b      	ldrh	r3, [r7, #10]
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	82fb      	strh	r3, [r7, #22]
 800d9f6:	e015      	b.n	800da24 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800d9f8:	8afa      	ldrh	r2, [r7, #22]
 800d9fa:	897b      	ldrh	r3, [r7, #10]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d207      	bcs.n	800da10 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800da00:	8afb      	ldrh	r3, [r7, #22]
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	3302      	adds	r3, #2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4413      	add	r3, r2
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	605a      	str	r2, [r3, #4]
 800da0e:	e006      	b.n	800da1e <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800da10:	8afb      	ldrh	r3, [r7, #22]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	3302      	adds	r3, #2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	2200      	movs	r2, #0
 800da1c:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800da1e:	8afb      	ldrh	r3, [r7, #22]
 800da20:	3301      	adds	r3, #1
 800da22:	82fb      	strh	r3, [r7, #22]
 800da24:	8afb      	ldrh	r3, [r7, #22]
 800da26:	2b0b      	cmp	r3, #11
 800da28:	d9e6      	bls.n	800d9f8 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800da2a:	bf00      	nop
 800da2c:	bf00      	nop
 800da2e:	371c      	adds	r7, #28
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	603a      	str	r2, [r7, #0]
 800da42:	80fb      	strh	r3, [r7, #6]
 800da44:	460b      	mov	r3, r1
 800da46:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800da50:	88fb      	ldrh	r3, [r7, #6]
 800da52:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800da54:	2300      	movs	r3, #0
 800da56:	81fb      	strh	r3, [r7, #14]
 800da58:	e00e      	b.n	800da78 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800da5a:	88ba      	ldrh	r2, [r7, #4]
 800da5c:	89fb      	ldrh	r3, [r7, #14]
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	3b01      	subs	r3, #1
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	4413      	add	r3, r2
 800da66:	89ba      	ldrh	r2, [r7, #12]
 800da68:	b2d2      	uxtb	r2, r2
 800da6a:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800da6c:	89bb      	ldrh	r3, [r7, #12]
 800da6e:	0a1b      	lsrs	r3, r3, #8
 800da70:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800da72:	89fb      	ldrh	r3, [r7, #14]
 800da74:	3301      	adds	r3, #1
 800da76:	81fb      	strh	r3, [r7, #14]
 800da78:	89fa      	ldrh	r2, [r7, #14]
 800da7a:	88bb      	ldrh	r3, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d3ec      	bcc.n	800da5a <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800da80:	bf00      	nop
 800da82:	bf00      	nop
 800da84:	3714      	adds	r7, #20
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800da8e:	b480      	push	{r7}
 800da90:	b085      	sub	sp, #20
 800da92:	af00      	add	r7, sp, #0
 800da94:	4603      	mov	r3, r0
 800da96:	6039      	str	r1, [r7, #0]
 800da98:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800da9a:	2300      	movs	r3, #0
 800da9c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800da9e:	e00a      	b.n	800dab6 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800daa0:	89fb      	ldrh	r3, [r7, #14]
 800daa2:	021b      	lsls	r3, r3, #8
 800daa4:	b21a      	sxth	r2, r3
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	1c59      	adds	r1, r3, #1
 800daaa:	6039      	str	r1, [r7, #0]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	b21b      	sxth	r3, r3
 800dab0:	4313      	orrs	r3, r2
 800dab2:	b21b      	sxth	r3, r3
 800dab4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800dab6:	88fb      	ldrh	r3, [r7, #6]
 800dab8:	1e5a      	subs	r2, r3, #1
 800daba:	80fa      	strh	r2, [r7, #6]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1ef      	bne.n	800daa0 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800dac0:	89fb      	ldrh	r3, [r7, #14]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3714      	adds	r7, #20
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dace:	b480      	push	{r7}
 800dad0:	b085      	sub	sp, #20
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	4603      	mov	r3, r0
 800dad6:	603a      	str	r2, [r7, #0]
 800dad8:	80fb      	strh	r3, [r7, #6]
 800dada:	460b      	mov	r3, r1
 800dadc:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800dae6:	88fb      	ldrh	r3, [r7, #6]
 800dae8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800daea:	2300      	movs	r3, #0
 800daec:	81fb      	strh	r3, [r7, #14]
 800daee:	e00f      	b.n	800db10 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800daf0:	88ba      	ldrh	r2, [r7, #4]
 800daf2:	89fb      	ldrh	r3, [r7, #14]
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	3b01      	subs	r3, #1
 800daf8:	683a      	ldr	r2, [r7, #0]
 800dafa:	4413      	add	r3, r2
 800dafc:	89ba      	ldrh	r2, [r7, #12]
 800dafe:	b2d2      	uxtb	r2, r2
 800db00:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800db02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800db06:	121b      	asrs	r3, r3, #8
 800db08:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800db0a:	89fb      	ldrh	r3, [r7, #14]
 800db0c:	3301      	adds	r3, #1
 800db0e:	81fb      	strh	r3, [r7, #14]
 800db10:	89fa      	ldrh	r2, [r7, #14]
 800db12:	88bb      	ldrh	r3, [r7, #4]
 800db14:	429a      	cmp	r2, r3
 800db16:	d3eb      	bcc.n	800daf0 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800db26:	b480      	push	{r7}
 800db28:	b085      	sub	sp, #20
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	4603      	mov	r3, r0
 800db2e:	6039      	str	r1, [r7, #0]
 800db30:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800db32:	2300      	movs	r3, #0
 800db34:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	b25b      	sxtb	r3, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	da0e      	bge.n	800db5e <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800db40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db44:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800db46:	e00a      	b.n	800db5e <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800db48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	b21a      	sxth	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	1c59      	adds	r1, r3, #1
 800db54:	6039      	str	r1, [r7, #0]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	b21b      	sxth	r3, r3
 800db5a:	4313      	orrs	r3, r2
 800db5c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800db5e:	88fb      	ldrh	r3, [r7, #6]
 800db60:	1e5a      	subs	r2, r3, #1
 800db62:	80fa      	strh	r2, [r7, #6]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1ef      	bne.n	800db48 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800db68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	460b      	mov	r3, r1
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800db92:	2300      	movs	r3, #0
 800db94:	82fb      	strh	r3, [r7, #22]
 800db96:	e00e      	b.n	800dbb6 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800db98:	897a      	ldrh	r2, [r7, #10]
 800db9a:	8afb      	ldrh	r3, [r7, #22]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	4413      	add	r3, r2
 800dba4:	693a      	ldr	r2, [r7, #16]
 800dba6:	b2d2      	uxtb	r2, r2
 800dba8:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	0a1b      	lsrs	r3, r3, #8
 800dbae:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800dbb0:	8afb      	ldrh	r3, [r7, #22]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	82fb      	strh	r3, [r7, #22]
 800dbb6:	8afa      	ldrh	r2, [r7, #22]
 800dbb8:	897b      	ldrh	r3, [r7, #10]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d3ec      	bcc.n	800db98 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800dbbe:	bf00      	nop
 800dbc0:	bf00      	nop
 800dbc2:	371c      	adds	r7, #28
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	6039      	str	r1, [r7, #0]
 800dbd6:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800dbdc:	e007      	b.n	800dbee <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	021a      	lsls	r2, r3, #8
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	1c59      	adds	r1, r3, #1
 800dbe6:	6039      	str	r1, [r7, #0]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800dbee:	88fb      	ldrh	r3, [r7, #6]
 800dbf0:	1e5a      	subs	r2, r3, #1
 800dbf2:	80fa      	strh	r2, [r7, #6]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1f2      	bne.n	800dbde <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b085      	sub	sp, #20
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	6039      	str	r1, [r7, #0]
 800dc10:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800dc12:	2300      	movs	r3, #0
 800dc14:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	b25b      	sxtb	r3, r3
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	da0b      	bge.n	800dc38 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800dc26:	e007      	b.n	800dc38 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	021a      	lsls	r2, r3, #8
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	1c59      	adds	r1, r3, #1
 800dc30:	6039      	str	r1, [r7, #0]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800dc38:	88fb      	ldrh	r3, [r7, #6]
 800dc3a:	1e5a      	subs	r2, r3, #1
 800dc3c:	80fa      	strh	r2, [r7, #6]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1f2      	bne.n	800dc28 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800dc42:	68fb      	ldr	r3, [r7, #12]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800dc60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d107      	bne.n	800dc78 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800dc68:	78fb      	ldrb	r3, [r7, #3]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	2127      	movs	r1, #39	; 0x27
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f009 f9ce 	bl	8017010 <VL53L1_WrByte>
 800dc74:	4603      	mov	r3, r0
 800dc76:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dc78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800dc90:	2300      	movs	r3, #0
 800dc92:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	3318      	adds	r3, #24
 800dc98:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	78fa      	ldrb	r2, [r7, #3]
 800dc9e:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800dca8:	461a      	mov	r2, r3
 800dcaa:	2185      	movs	r1, #133	; 0x85
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f009 f9af 	bl	8017010 <VL53L1_WrByte>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800dcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dcca:	2300      	movs	r3, #0
 800dccc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800dcce:	2101      	movs	r1, #1
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff ffd7 	bl	800dc84 <VL53L1_set_firmware_enable_register>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dcda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff ffc5 	bl	800dc84 <VL53L1_set_firmware_enable_register>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dcfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b084      	sub	sp, #16
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	460b      	mov	r3, r1
 800dd14:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dd16:	2300      	movs	r3, #0
 800dd18:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3318      	adds	r3, #24
 800dd1e:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	78fa      	ldrb	r2, [r7, #3]
 800dd24:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800dd2e:	461a      	mov	r2, r3
 800dd30:	2183      	movs	r1, #131	; 0x83
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f009 f96c 	bl	8017010 <VL53L1_WrByte>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800dd3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dd50:	2300      	movs	r3, #0
 800dd52:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800dd54:	2101      	movs	r1, #1
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff ffd7 	bl	800dd0a <VL53L1_set_powerforce_register>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dd60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800dd78:	2100      	movs	r1, #0
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ffc5 	bl	800dd0a <VL53L1_set_powerforce_register>
 800dd80:	4603      	mov	r3, r0
 800dd82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dd84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3318      	adds	r3, #24
 800dda0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	2186      	movs	r1, #134	; 0x86
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f009 f92b 	bl	8017010 <VL53L1_WrByte>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800ddbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b086      	sub	sp, #24
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	460a      	mov	r2, r1
 800ddd4:	80fb      	strh	r3, [r7, #6]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800ddde:	2300      	movs	r3, #0
 800dde0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800dde6:	88fb      	ldrh	r3, [r7, #6]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f002 ffeb 	bl	8010dc4 <VL53L1_calc_pll_period_us>
 800ddee:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800ddf0:	797b      	ldrb	r3, [r7, #5]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f003 fbd6 	bl	80115a4 <VL53L1_decode_vcsel_period>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	4613      	mov	r3, r2
 800de00:	00db      	lsls	r3, r3, #3
 800de02:	4413      	add	r3, r2
 800de04:	021b      	lsls	r3, r3, #8
 800de06:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	099b      	lsrs	r3, r3, #6
 800de0c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800de0e:	7cfa      	ldrb	r2, [r7, #19]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	fb02 f303 	mul.w	r3, r2, r3
 800de16:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	099b      	lsrs	r3, r3, #6
 800de1c:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800de1e:	68fb      	ldr	r3, [r7, #12]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800de28:	b480      	push	{r7}
 800de2a:	b089      	sub	sp, #36	; 0x24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	4608      	mov	r0, r1
 800de32:	4611      	mov	r1, r2
 800de34:	461a      	mov	r2, r3
 800de36:	4603      	mov	r3, r0
 800de38:	817b      	strh	r3, [r7, #10]
 800de3a:	460b      	mov	r3, r1
 800de3c:	813b      	strh	r3, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800de4a:	2300      	movs	r3, #0
 800de4c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	011b      	lsls	r3, r3, #4
 800de5a:	4a23      	ldr	r2, [pc, #140]	; (800dee8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800de5c:	fb82 1203 	smull	r1, r2, r2, r3
 800de60:	1192      	asrs	r2, r2, #6
 800de62:	17db      	asrs	r3, r3, #31
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800de68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	da03      	bge.n	800de78 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800de70:	897b      	ldrh	r3, [r7, #10]
 800de72:	425b      	negs	r3, r3
 800de74:	b29b      	uxth	r3, r3
 800de76:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800de78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da03      	bge.n	800de88 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800de80:	893b      	ldrh	r3, [r7, #8]
 800de82:	425b      	negs	r3, r3
 800de84:	b29b      	uxth	r3, r3
 800de86:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800de88:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800de8c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800de90:	4413      	add	r3, r2
 800de92:	015b      	lsls	r3, r3, #5
 800de94:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	4a13      	ldr	r2, [pc, #76]	; (800dee8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800de9a:	fb82 1203 	smull	r1, r2, r2, r3
 800de9e:	1192      	asrs	r2, r2, #6
 800dea0:	17db      	asrs	r3, r3, #31
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800dea6:	697a      	ldr	r2, [r7, #20]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	4413      	add	r3, r2
 800deac:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800deae:	79fa      	ldrb	r2, [r7, #7]
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	fb02 f303 	mul.w	r3, r2, r3
 800deb6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	3310      	adds	r3, #16
 800debc:	2b00      	cmp	r3, #0
 800debe:	da00      	bge.n	800dec2 <VL53L1_calc_range_ignore_threshold+0x9a>
 800dec0:	331f      	adds	r3, #31
 800dec2:	115b      	asrs	r3, r3, #5
 800dec4:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800decc:	db03      	blt.n	800ded6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800dece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ded2:	83fb      	strh	r3, [r7, #30]
 800ded4:	e001      	b.n	800deda <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800deda:	8bfb      	ldrh	r3, [r7, #30]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3724      	adds	r7, #36	; 0x24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	10624dd3 	.word	0x10624dd3

0800deec <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	e008      	b.n	800df18 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	031a      	lsls	r2, r3, #12
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	085b      	lsrs	r3, r3, #1
 800df0e:	441a      	add	r2, r3
		timeout_mclks =
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	fbb2 f3f3 	udiv	r3, r2, r3
 800df16:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800df18:	68fb      	ldr	r3, [r7, #12]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b084      	sub	sp, #16
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800df30:	2300      	movs	r3, #0
 800df32:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800df38:	6839      	ldr	r1, [r7, #0]
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff ffd6 	bl	800deec <VL53L1_calc_timeout_mclks>
 800df40:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f000 f887 	bl	800e056 <VL53L1_encode_timeout>
 800df48:	4603      	mov	r3, r0
 800df4a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800df4c:	897b      	ldrh	r3, [r7, #10]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800df56:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800df5a:	b087      	sub	sp, #28
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800df62:	2100      	movs	r1, #0
 800df64:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800df66:	f04f 0000 	mov.w	r0, #0
 800df6a:	f04f 0100 	mov.w	r1, #0
 800df6e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800df72:	6879      	ldr	r1, [r7, #4]
 800df74:	2000      	movs	r0, #0
 800df76:	4688      	mov	r8, r1
 800df78:	4681      	mov	r9, r0
 800df7a:	6839      	ldr	r1, [r7, #0]
 800df7c:	2000      	movs	r0, #0
 800df7e:	460c      	mov	r4, r1
 800df80:	4605      	mov	r5, r0
 800df82:	fb04 f009 	mul.w	r0, r4, r9
 800df86:	fb08 f105 	mul.w	r1, r8, r5
 800df8a:	4401      	add	r1, r0
 800df8c:	fba8 2304 	umull	r2, r3, r8, r4
 800df90:	4419      	add	r1, r3
 800df92:	460b      	mov	r3, r1
 800df94:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800df98:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800df9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dfa0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800dfa4:	f143 0b00 	adc.w	fp, r3, #0
 800dfa8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800dfac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfb0:	f04f 0200 	mov.w	r2, #0
 800dfb4:	f04f 0300 	mov.w	r3, #0
 800dfb8:	0b02      	lsrs	r2, r0, #12
 800dfba:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800dfbe:	0b0b      	lsrs	r3, r1, #12
 800dfc0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800dfc8:	697b      	ldr	r3, [r7, #20]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	371c      	adds	r7, #28
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dfd4:	4770      	bx	lr
	...

0800dfd8 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800dfec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800dff0:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800dff2:	4413      	add	r3, r2
 800dff4:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	da02      	bge.n	800e002 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	e005      	b.n	800e00e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e008:	db01      	blt.n	800e00e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800e00a:	4b05      	ldr	r3, [pc, #20]	; (800e020 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800e00c:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800e012:	68bb      	ldr	r3, [r7, #8]

}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	0003ffff 	.word	0x0003ffff

0800e024 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	4603      	mov	r3, r0
 800e02c:	6039      	str	r1, [r7, #0]
 800e02e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800e038:	88fb      	ldrh	r3, [r7, #6]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 f837 	bl	800e0ae <VL53L1_decode_timeout>
 800e040:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f7ff ff86 	bl	800df56 <VL53L1_calc_timeout_us>
 800e04a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e04c:	68bb      	ldr	r3, [r7, #8]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e056:	b480      	push	{r7}
 800e058:	b087      	sub	sp, #28
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e062:	2300      	movs	r3, #0
 800e064:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d017      	beq.n	800e0a0 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3b01      	subs	r3, #1
 800e074:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e076:	e005      	b.n	800e084 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	085b      	lsrs	r3, r3, #1
 800e07c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e07e:	89fb      	ldrh	r3, [r7, #14]
 800e080:	3301      	adds	r3, #1
 800e082:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1f4      	bne.n	800e078 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e08e:	89fb      	ldrh	r3, [r7, #14]
 800e090:	021b      	lsls	r3, r3, #8
 800e092:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	b29b      	uxth	r3, r3
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e09c:	4413      	add	r3, r2
 800e09e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e0a0:	8afb      	ldrh	r3, [r7, #22]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	371c      	adds	r7, #28
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e0ae:	b480      	push	{r7}
 800e0b0:	b085      	sub	sp, #20
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e0bc:	88fb      	ldrh	r3, [r7, #6]
 800e0be:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e0c0:	88fa      	ldrh	r2, [r7, #6]
 800e0c2:	0a12      	lsrs	r2, r2, #8
 800e0c4:	b292      	uxth	r2, r2
 800e0c6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3714      	adds	r7, #20
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b088      	sub	sp, #32
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	60f8      	str	r0, [r7, #12]
 800e0e2:	60b9      	str	r1, [r7, #8]
 800e0e4:	607a      	str	r2, [r7, #4]
 800e0e6:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e0f8:	887b      	ldrh	r3, [r7, #2]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d102      	bne.n	800e104 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e0fe:	23f1      	movs	r3, #241	; 0xf1
 800e100:	77fb      	strb	r3, [r7, #31]
 800e102:	e05d      	b.n	800e1c0 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	799a      	ldrb	r2, [r3, #6]
 800e108:	887b      	ldrh	r3, [r7, #2]
 800e10a:	4611      	mov	r1, r2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7ff fe5c 	bl	800ddca <VL53L1_calc_macro_period_us>
 800e112:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800e114:	6979      	ldr	r1, [r7, #20]
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f7ff fee8 	bl	800deec <VL53L1_calc_timeout_mclks>
 800e11c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	2bff      	cmp	r3, #255	; 0xff
 800e122:	d901      	bls.n	800e128 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e124:	23ff      	movs	r3, #255	; 0xff
 800e126:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12e:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e130:	6979      	ldr	r1, [r7, #20]
 800e132:	68b8      	ldr	r0, [r7, #8]
 800e134:	f7ff fef7 	bl	800df26 <VL53L1_calc_encoded_timeout>
 800e138:	4603      	mov	r3, r0
 800e13a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e13c:	8a7b      	ldrh	r3, [r7, #18]
 800e13e:	0a1b      	lsrs	r3, r3, #8
 800e140:	b29b      	uxth	r3, r3
 800e142:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e146:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e148:	8a7b      	ldrh	r3, [r7, #18]
 800e14a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800e150:	6979      	ldr	r1, [r7, #20]
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7ff fee7 	bl	800df26 <VL53L1_calc_encoded_timeout>
 800e158:	4603      	mov	r3, r0
 800e15a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e15c:	8a7b      	ldrh	r3, [r7, #18]
 800e15e:	0a1b      	lsrs	r3, r3, #8
 800e160:	b29b      	uxth	r3, r3
 800e162:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e166:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e168:	8a7b      	ldrh	r3, [r7, #18]
 800e16a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	7a5a      	ldrb	r2, [r3, #9]
 800e174:	887b      	ldrh	r3, [r7, #2]
 800e176:	4611      	mov	r1, r2
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff fe26 	bl	800ddca <VL53L1_calc_macro_period_us>
 800e17e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800e180:	6979      	ldr	r1, [r7, #20]
 800e182:	68b8      	ldr	r0, [r7, #8]
 800e184:	f7ff fecf 	bl	800df26 <VL53L1_calc_encoded_timeout>
 800e188:	4603      	mov	r3, r0
 800e18a:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e18c:	8a7b      	ldrh	r3, [r7, #18]
 800e18e:	0a1b      	lsrs	r3, r3, #8
 800e190:	b29b      	uxth	r3, r3
 800e192:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e198:	8a7b      	ldrh	r3, [r7, #18]
 800e19a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e1a0:	6979      	ldr	r1, [r7, #20]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7ff febf 	bl	800df26 <VL53L1_calc_encoded_timeout>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e1ac:	8a7b      	ldrh	r3, [r7, #18]
 800e1ae:	0a1b      	lsrs	r3, r3, #8
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e1b8:	8a7b      	ldrh	r3, [r7, #18]
 800e1ba:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e1c0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3720      	adds	r7, #32
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800e1cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1d0:	b09e      	sub	sp, #120	; 0x78
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6578      	str	r0, [r7, #84]	; 0x54
 800e1d6:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800e1de:	f04f 0200 	mov.w	r2, #0
 800e1e2:	f04f 0300 	mov.w	r3, #0
 800e1e6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800e1ea:	f04f 0200 	mov.w	r2, #0
 800e1ee:	f04f 0300 	mov.w	r3, #0
 800e1f2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800e1f6:	f04f 0200 	mov.w	r2, #0
 800e1fa:	f04f 0300 	mov.w	r3, #0
 800e1fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800e202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e204:	885b      	ldrh	r3, [r3, #2]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d103      	bne.n	800e212 <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e20a:	23f1      	movs	r3, #241	; 0xf1
 800e20c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e210:	e0d6      	b.n	800e3c0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800e212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e214:	785b      	ldrb	r3, [r3, #1]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f000 80d2 	beq.w	800e3c0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800e21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e21e:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800e220:	2b00      	cmp	r3, #0
 800e222:	f040 80cd 	bne.w	800e3c0 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800e226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e22c:	2200      	movs	r2, #0
 800e22e:	643b      	str	r3, [r7, #64]	; 0x40
 800e230:	647a      	str	r2, [r7, #68]	; 0x44
 800e232:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e236:	460b      	mov	r3, r1
 800e238:	3301      	adds	r3, #1
 800e23a:	623b      	str	r3, [r7, #32]
 800e23c:	4613      	mov	r3, r2
 800e23e:	f143 0300 	adc.w	r3, r3, #0
 800e242:	627b      	str	r3, [r7, #36]	; 0x24
 800e244:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e248:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800e24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e24e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e252:	b29b      	uxth	r3, r3
 800e254:	2200      	movs	r2, #0
 800e256:	64bb      	str	r3, [r7, #72]	; 0x48
 800e258:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800e25a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e25c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e260:	4602      	mov	r2, r0
 800e262:	fb02 f203 	mul.w	r2, r2, r3
 800e266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e268:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800e26c:	fb01 f303 	mul.w	r3, r1, r3
 800e270:	441a      	add	r2, r3
 800e272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e274:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e276:	fba3 4501 	umull	r4, r5, r3, r1
 800e27a:	1953      	adds	r3, r2, r5
 800e27c:	461d      	mov	r5, r3
 800e27e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800e282:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800e286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	2200      	movs	r2, #0
 800e28c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e28e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e290:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e294:	460b      	mov	r3, r1
 800e296:	3301      	adds	r3, #1
 800e298:	61bb      	str	r3, [r7, #24]
 800e29a:	4613      	mov	r3, r2
 800e29c:	f143 0300 	adc.w	r3, r3, #0
 800e2a0:	61fb      	str	r3, [r7, #28]
 800e2a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e2a6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800e2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2ac:	885b      	ldrh	r3, [r3, #2]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	633b      	str	r3, [r7, #48]	; 0x30
 800e2b4:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800e2b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e2bc:	4622      	mov	r2, r4
 800e2be:	fb02 f203 	mul.w	r2, r2, r3
 800e2c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	fb01 f303 	mul.w	r3, r1, r3
 800e2ca:	441a      	add	r2, r3
 800e2cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	fba3 ab01 	umull	sl, fp, r3, r1
 800e2d4:	eb02 030b 	add.w	r3, r2, fp
 800e2d8:	469b      	mov	fp, r3
 800e2da:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800e2de:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800e2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	17da      	asrs	r2, r3, #31
 800e2e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2ea:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800e2ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e2f2:	4622      	mov	r2, r4
 800e2f4:	fb02 f203 	mul.w	r2, r2, r3
 800e2f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	fb01 f303 	mul.w	r3, r1, r3
 800e300:	4413      	add	r3, r2
 800e302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e304:	4621      	mov	r1, r4
 800e306:	fba2 8901 	umull	r8, r9, r2, r1
 800e30a:	444b      	add	r3, r9
 800e30c:	4699      	mov	r9, r3
 800e30e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800e312:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800e316:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e31a:	0fd9      	lsrs	r1, r3, #31
 800e31c:	2000      	movs	r0, #0
 800e31e:	6139      	str	r1, [r7, #16]
 800e320:	6178      	str	r0, [r7, #20]
 800e322:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e326:	4621      	mov	r1, r4
 800e328:	1889      	adds	r1, r1, r2
 800e32a:	60b9      	str	r1, [r7, #8]
 800e32c:	4629      	mov	r1, r5
 800e32e:	eb43 0101 	adc.w	r1, r3, r1
 800e332:	60f9      	str	r1, [r7, #12]
 800e334:	f04f 0200 	mov.w	r2, #0
 800e338:	f04f 0300 	mov.w	r3, #0
 800e33c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e340:	4621      	mov	r1, r4
 800e342:	084a      	lsrs	r2, r1, #1
 800e344:	4629      	mov	r1, r5
 800e346:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e34a:	4629      	mov	r1, r5
 800e34c:	104b      	asrs	r3, r1, #1
 800e34e:	4610      	mov	r0, r2
 800e350:	4619      	mov	r1, r3
 800e352:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e356:	1814      	adds	r4, r2, r0
 800e358:	603c      	str	r4, [r7, #0]
 800e35a:	414b      	adcs	r3, r1
 800e35c:	607b      	str	r3, [r7, #4]
 800e35e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e362:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800e366:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e36a:	4313      	orrs	r3, r2
 800e36c:	d009      	beq.n	800e382 <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800e36e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e376:	f7f2 fbef 	bl	8000b58 <__aeabi_ldivmod>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800e382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e386:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800e38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e38c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800e390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e392:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800e396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800e39c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e39e:	7852      	ldrb	r2, [r2, #1]
 800e3a0:	0852      	lsrs	r2, r2, #1
 800e3a2:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800e3a4:	441a      	add	r2, r3
 800e3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800e3ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800e3b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3b4:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800e3b6:	fb93 f2f2 	sdiv	r2, r3, r2
 800e3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800e3c0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3778      	adds	r7, #120	; 0x78
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e3ce <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b087      	sub	sp, #28
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3318      	adds	r3, #24
 800e3dc:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800e3f0:	029b      	lsls	r3, r3, #10
 800e3f2:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800e3fa:	029b      	lsls	r3, r3, #10
 800e3fc:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e404:	f003 0301 	and.w	r3, r3, #1
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f040 8095 	bne.w	800e538 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800e414:	091b      	lsrs	r3, r3, #4
 800e416:	b2da      	uxtb	r2, r3
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800e422:	f003 030f 	and.w	r3, r3, #15
 800e426:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800e432:	091b      	lsrs	r3, r3, #4
 800e434:	b2da      	uxtb	r2, r3
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800e440:	f003 030f 	and.w	r3, r3, #15
 800e444:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800e450:	091b      	lsrs	r3, r3, #4
 800e452:	b2da      	uxtb	r2, r3
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800e45e:	f003 030f 	and.w	r3, r3, #15
 800e462:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	429a      	cmp	r2, r3
 800e472:	da2c      	bge.n	800e4ce <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800e47a:	091b      	lsrs	r3, r3, #4
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800e488:	f003 030f 	and.w	r3, r3, #15
 800e48c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800e498:	091b      	lsrs	r3, r3, #4
 800e49a:	b2da      	uxtb	r2, r3
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800e4a6:	f003 030f 	and.w	r3, r3, #15
 800e4aa:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800e4b6:	091b      	lsrs	r3, r3, #4
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800e4c4:	f003 030f 	and.w	r3, r3, #15
 800e4c8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	f340 80c2 	ble.w	800e660 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800e4e2:	091b      	lsrs	r3, r3, #4
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800e4f0:	f003 030f 	and.w	r3, r3, #15
 800e4f4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800e500:	091b      	lsrs	r3, r3, #4
 800e502:	b2da      	uxtb	r2, r3
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800e50e:	f003 030f 	and.w	r3, r3, #15
 800e512:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800e51e:	091b      	lsrs	r3, r3, #4
 800e520:	b2da      	uxtb	r2, r3
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	731a      	strb	r2, [r3, #12]
 800e536:	e093      	b.n	800e660 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800e53e:	f003 030f 	and.w	r3, r3, #15
 800e542:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800e54e:	f003 030f 	and.w	r3, r3, #15
 800e552:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800e55e:	091b      	lsrs	r3, r3, #4
 800e560:	b2da      	uxtb	r2, r3
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800e56c:	f003 030f 	and.w	r3, r3, #15
 800e570:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800e57c:	091b      	lsrs	r3, r3, #4
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800e58a:	f003 030f 	and.w	r3, r3, #15
 800e58e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	da2c      	bge.n	800e5fa <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800e5a6:	091b      	lsrs	r3, r3, #4
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800e5b4:	f003 030f 	and.w	r3, r3, #15
 800e5b8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800e5c4:	091b      	lsrs	r3, r3, #4
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800e5d2:	f003 030f 	and.w	r3, r3, #15
 800e5d6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800e5e2:	091b      	lsrs	r3, r3, #4
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800e5f0:	f003 030f 	and.w	r3, r3, #15
 800e5f4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	429a      	cmp	r2, r3
 800e604:	dd2c      	ble.n	800e660 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800e60c:	091b      	lsrs	r3, r3, #4
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800e61a:	f003 030f 	and.w	r3, r3, #15
 800e61e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800e62a:	091b      	lsrs	r3, r3, #4
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800e638:	f003 030f 	and.w	r3, r3, #15
 800e63c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800e648:	091b      	lsrs	r3, r3, #4
 800e64a:	b2da      	uxtb	r2, r3
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800e656:	f003 030f 	and.w	r3, r3, #15
 800e65a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e660:	2300      	movs	r3, #0
 800e662:	75fb      	strb	r3, [r7, #23]
 800e664:	e007      	b.n	800e676 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800e666:	7dfb      	ldrb	r3, [r7, #23]
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	4413      	add	r3, r2
 800e66c:	2201      	movs	r2, #1
 800e66e:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	3301      	adds	r3, #1
 800e674:	75fb      	strb	r3, [r7, #23]
 800e676:	7dfb      	ldrb	r3, [r7, #23]
 800e678:	2b05      	cmp	r3, #5
 800e67a:	d9f4      	bls.n	800e666 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800e67c:	bf00      	nop
 800e67e:	bf00      	nop
 800e680:	371c      	adds	r7, #28
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800e68a:	b590      	push	{r4, r7, lr}
 800e68c:	b093      	sub	sp, #76	; 0x4c
 800e68e:	af04      	add	r7, sp, #16
 800e690:	60f8      	str	r0, [r7, #12]
 800e692:	60b9      	str	r1, [r7, #8]
 800e694:	607a      	str	r2, [r7, #4]
 800e696:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e698:	2300      	movs	r3, #0
 800e69a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3318      	adds	r3, #24
 800e6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800e6ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800e6d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800e6dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800e6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e0:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800e6e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800e6e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6ec:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800e6ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6f0:	021b      	lsls	r3, r3, #8
 800e6f2:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	785b      	ldrb	r3, [r3, #1]
 800e6f8:	2b07      	cmp	r3, #7
 800e6fa:	d006      	beq.n	800e70a <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800e700:	2b08      	cmp	r3, #8
 800e702:	d002      	beq.n	800e70a <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800e704:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e708:	e0ec      	b.n	800e8e4 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800e70a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d102      	bne.n	800e716 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800e710:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e714:	e0e6      	b.n	800e8e4 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800e716:	2300      	movs	r3, #0
 800e718:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e71c:	e0d9      	b.n	800e8d2 <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800e71e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	214c      	movs	r1, #76	; 0x4c
 800e726:	fb01 f303 	mul.w	r3, r1, r3
 800e72a:	4413      	add	r3, r2
 800e72c:	335e      	adds	r3, #94	; 0x5e
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2b09      	cmp	r3, #9
 800e732:	d00b      	beq.n	800e74c <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800e734:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	214c      	movs	r1, #76	; 0x4c
 800e73c:	fb01 f303 	mul.w	r3, r1, r3
 800e740:	4413      	add	r3, r2
 800e742:	335e      	adds	r3, #94	; 0x5e
 800e744:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800e746:	2b13      	cmp	r3, #19
 800e748:	f040 80bd 	bne.w	800e8c6 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	795b      	ldrb	r3, [r3, #5]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10a      	bne.n	800e76a <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800e754:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	214c      	movs	r1, #76	; 0x4c
 800e75c:	fb01 f303 	mul.w	r3, r1, r3
 800e760:	4413      	add	r3, r2
 800e762:	335e      	adds	r3, #94	; 0x5e
 800e764:	2217      	movs	r2, #23
 800e766:	701a      	strb	r2, [r3, #0]
 800e768:	e009      	b.n	800e77e <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800e76a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	214c      	movs	r1, #76	; 0x4c
 800e772:	fb01 f303 	mul.w	r3, r1, r3
 800e776:	4413      	add	r3, r2
 800e778:	335e      	adds	r3, #94	; 0x5e
 800e77a:	2207      	movs	r2, #7
 800e77c:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800e77e:	2300      	movs	r3, #0
 800e780:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e784:	e097      	b.n	800e8b6 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800e786:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	214c      	movs	r1, #76	; 0x4c
 800e78e:	fb01 f303 	mul.w	r3, r1, r3
 800e792:	4413      	add	r3, r2
 800e794:	3354      	adds	r3, #84	; 0x54
 800e796:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800e798:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	005b      	lsls	r3, r3, #1
 800e7a2:	4413      	add	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4403      	add	r3, r0
 800e7a8:	3310      	adds	r3, #16
 800e7aa:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800e7ac:	4299      	cmp	r1, r3
 800e7ae:	d915      	bls.n	800e7dc <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800e7b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e7b4:	683a      	ldr	r2, [r7, #0]
 800e7b6:	214c      	movs	r1, #76	; 0x4c
 800e7b8:	fb01 f303 	mul.w	r3, r1, r3
 800e7bc:	4413      	add	r3, r2
 800e7be:	3354      	adds	r3, #84	; 0x54
 800e7c0:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800e7c2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	005b      	lsls	r3, r3, #1
 800e7cc:	4413      	add	r3, r2
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	4403      	add	r3, r0
 800e7d2:	3310      	adds	r3, #16
 800e7d4:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e7d6:	1acb      	subs	r3, r1, r3
 800e7d8:	867b      	strh	r3, [r7, #50]	; 0x32
 800e7da:	e014      	b.n	800e806 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800e7dc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e7e0:	6879      	ldr	r1, [r7, #4]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	4413      	add	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	440b      	add	r3, r1
 800e7ec:	3310      	adds	r3, #16
 800e7ee:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800e7f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	204c      	movs	r0, #76	; 0x4c
 800e7f8:	fb00 f303 	mul.w	r3, r0, r3
 800e7fc:	440b      	add	r3, r1
 800e7fe:	3354      	adds	r3, #84	; 0x54
 800e800:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800e806:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e808:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d24e      	bcs.n	800e8ac <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800e80e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e812:	2b00      	cmp	r3, #0
 800e814:	d125      	bne.n	800e862 <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800e816:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800e81a:	4613      	mov	r3, r2
 800e81c:	005b      	lsls	r3, r3, #1
 800e81e:	4413      	add	r3, r2
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	3308      	adds	r3, #8
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800e828:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800e82c:	224c      	movs	r2, #76	; 0x4c
 800e82e:	fb02 f303 	mul.w	r3, r2, r3
 800e832:	3310      	adds	r3, #16
 800e834:	683a      	ldr	r2, [r7, #0]
 800e836:	4413      	add	r3, r2
 800e838:	3304      	adds	r3, #4
 800e83a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e83c:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800e840:	f107 0217 	add.w	r2, r7, #23
 800e844:	9203      	str	r2, [sp, #12]
 800e846:	f107 021c 	add.w	r2, r7, #28
 800e84a:	9202      	str	r2, [sp, #8]
 800e84c:	f107 0218 	add.w	r2, r7, #24
 800e850:	9201      	str	r2, [sp, #4]
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	4623      	mov	r3, r4
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	f000 f848 	bl	800e8ec <VL53L1_hist_events_consistency_check>
 800e85c:	4603      	mov	r3, r0
 800e85e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800e862:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e866:	2b00      	cmp	r3, #0
 800e868:	d115      	bne.n	800e896 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800e86c:	2b09      	cmp	r3, #9
 800e86e:	d112      	bne.n	800e896 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800e870:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800e874:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800e878:	224c      	movs	r2, #76	; 0x4c
 800e87a:	fb02 f303 	mul.w	r3, r2, r3
 800e87e:	3310      	adds	r3, #16
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	4413      	add	r3, r2
 800e884:	3304      	adds	r3, #4
 800e886:	f107 0217 	add.w	r2, r7, #23
 800e88a:	4619      	mov	r1, r3
 800e88c:	f000 fb44 	bl	800ef18 <VL53L1_hist_merged_pulse_check>
 800e890:	4603      	mov	r3, r0
 800e892:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800e896:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e89a:	7df8      	ldrb	r0, [r7, #23]
 800e89c:	683a      	ldr	r2, [r7, #0]
 800e89e:	214c      	movs	r1, #76	; 0x4c
 800e8a0:	fb01 f303 	mul.w	r3, r1, r3
 800e8a4:	4413      	add	r3, r2
 800e8a6:	335e      	adds	r3, #94	; 0x5e
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800e8ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	795b      	ldrb	r3, [r3, #5]
 800e8ba:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	f4ff af61 	bcc.w	800e786 <VL53L1_hist_phase_consistency_check+0xfc>
 800e8c4:	e000      	b.n	800e8c8 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800e8c6:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800e8c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	7c9b      	ldrb	r3, [r3, #18]
 800e8d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	f4ff af1f 	bcc.w	800e71e <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e8e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	373c      	adds	r7, #60	; 0x3c
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd90      	pop	{r4, r7, pc}

0800e8ec <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800e8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8f0:	b0d4      	sub	sp, #336	; 0x150
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800e8f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800e902:	460b      	mov	r3, r1
 800e904:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e908:	2300      	movs	r3, #0
 800e90a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800e90e:	f04f 0200 	mov.w	r2, #0
 800e912:	f04f 0300 	mov.w	r3, #0
 800e916:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800e91a:	f04f 0200 	mov.w	r2, #0
 800e91e:	f04f 0300 	mov.w	r3, #0
 800e922:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800e926:	f04f 0200 	mov.w	r2, #0
 800e92a:	f04f 0300 	mov.w	r3, #0
 800e92e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800e932:	f04f 0200 	mov.w	r2, #0
 800e936:	f04f 0300 	mov.w	r3, #0
 800e93a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800e93e:	f04f 0200 	mov.w	r2, #0
 800e942:	f04f 0300 	mov.w	r3, #0
 800e946:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800e94a:	f04f 0200 	mov.w	r2, #0
 800e94e:	f04f 0300 	mov.w	r3, #0
 800e952:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800e956:	f04f 0200 	mov.w	r2, #0
 800e95a:	f04f 0300 	mov.w	r3, #0
 800e95e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800e962:	f04f 0200 	mov.w	r2, #0
 800e966:	f04f 0300 	mov.w	r3, #0
 800e96a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800e974:	2300      	movs	r3, #0
 800e976:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800e97a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d106      	bne.n	800e990 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800e982:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800e986:	2209      	movs	r2, #9
 800e988:	701a      	strb	r2, [r3, #0]
		return status;
 800e98a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800e98e:	e2bd      	b.n	800ef0c <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800e990:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	2200      	movs	r2, #0
 800e998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e99c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800e9a0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	f143 0300 	adc.w	r3, r3, #0
 800e9b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e9b6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e9ba:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800e9be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e9c2:	885b      	ldrh	r3, [r3, #2]
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	469a      	mov	sl, r3
 800e9ca:	4693      	mov	fp, r2
 800e9cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800e9d0:	fb0a f203 	mul.w	r2, sl, r3
 800e9d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e9d8:	fb0b f303 	mul.w	r3, fp, r3
 800e9dc:	441a      	add	r2, r3
 800e9de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e9e2:	fba3 450a 	umull	r4, r5, r3, sl
 800e9e6:	1953      	adds	r3, r2, r5
 800e9e8:	461d      	mov	r5, r3
 800e9ea:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800e9ee:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800e9f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e9f6:	699b      	ldr	r3, [r3, #24]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e9fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ea02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ea06:	460b      	mov	r3, r1
 800ea08:	3301      	adds	r3, #1
 800ea0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ea0e:	4613      	mov	r3, r2
 800ea10:	f143 0300 	adc.w	r3, r3, #0
 800ea14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea18:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800ea1c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800ea20:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ea24:	8adb      	ldrh	r3, [r3, #22]
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea2e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ea32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ea36:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800ea3a:	4622      	mov	r2, r4
 800ea3c:	fb02 f203 	mul.w	r2, r2, r3
 800ea40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ea44:	4629      	mov	r1, r5
 800ea46:	fb01 f303 	mul.w	r3, r1, r3
 800ea4a:	441a      	add	r2, r3
 800ea4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ea50:	4621      	mov	r1, r4
 800ea52:	fba3 8901 	umull	r8, r9, r3, r1
 800ea56:	eb02 0309 	add.w	r3, r2, r9
 800ea5a:	4699      	mov	r9, r3
 800ea5c:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800ea60:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800ea64:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800ea68:	f04f 0000 	mov.w	r0, #0
 800ea6c:	f04f 0100 	mov.w	r1, #0
 800ea70:	0319      	lsls	r1, r3, #12
 800ea72:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ea76:	0310      	lsls	r0, r2, #12
 800ea78:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800ea7c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800ea80:	0fd9      	lsrs	r1, r3, #31
 800ea82:	2000      	movs	r0, #0
 800ea84:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800ea88:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800ea8c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800ea90:	4621      	mov	r1, r4
 800ea92:	1889      	adds	r1, r1, r2
 800ea94:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ea98:	4629      	mov	r1, r5
 800ea9a:	eb43 0101 	adc.w	r1, r3, r1
 800ea9e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800eaa2:	f04f 0200 	mov.w	r2, #0
 800eaa6:	f04f 0300 	mov.w	r3, #0
 800eaaa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800eaae:	4621      	mov	r1, r4
 800eab0:	084a      	lsrs	r2, r1, #1
 800eab2:	4629      	mov	r1, r5
 800eab4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800eab8:	4629      	mov	r1, r5
 800eaba:	104b      	asrs	r3, r1, #1
 800eabc:	4610      	mov	r0, r2
 800eabe:	4619      	mov	r1, r3
 800eac0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800eac4:	1814      	adds	r4, r2, r0
 800eac6:	67bc      	str	r4, [r7, #120]	; 0x78
 800eac8:	414b      	adcs	r3, r1
 800eaca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eacc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800ead0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800ead4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800ead8:	4313      	orrs	r3, r2
 800eada:	d009      	beq.n	800eaf0 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800eadc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800eae0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800eae4:	f7f2 f838 	bl	8000b58 <__aeabi_ldivmod>
 800eae8:	4602      	mov	r2, r0
 800eaea:	460b      	mov	r3, r1
 800eaec:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800eaf0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800eaf4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eaf8:	fb03 f102 	mul.w	r1, r3, r2
 800eafc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800eb00:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eb04:	fb02 f303 	mul.w	r3, r2, r3
 800eb08:	18ca      	adds	r2, r1, r3
 800eb0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eb0e:	fba3 1303 	umull	r1, r3, r3, r3
 800eb12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eb16:	460b      	mov	r3, r1
 800eb18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800eb1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb20:	18d3      	adds	r3, r2, r3
 800eb22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eb26:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800eb2a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800eb2e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800eb32:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800eb36:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800eb3a:	6739      	str	r1, [r7, #112]	; 0x70
 800eb3c:	f143 0300 	adc.w	r3, r3, #0
 800eb40:	677b      	str	r3, [r7, #116]	; 0x74
 800eb42:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800eb46:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800eb4a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	da08      	bge.n	800eb64 <VL53L1_hist_events_consistency_check+0x278>
 800eb52:	f640 71ff 	movw	r1, #4095	; 0xfff
 800eb56:	1851      	adds	r1, r2, r1
 800eb58:	66b9      	str	r1, [r7, #104]	; 0x68
 800eb5a:	f143 0300 	adc.w	r3, r3, #0
 800eb5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb60:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800eb64:	f04f 0000 	mov.w	r0, #0
 800eb68:	f04f 0100 	mov.w	r1, #0
 800eb6c:	0b10      	lsrs	r0, r2, #12
 800eb6e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800eb72:	1319      	asrs	r1, r3, #12
 800eb74:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800eb78:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb7e:	2200      	movs	r2, #0
 800eb80:	663b      	str	r3, [r7, #96]	; 0x60
 800eb82:	667a      	str	r2, [r7, #100]	; 0x64
 800eb84:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800eb88:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800eb8c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb92:	2200      	movs	r2, #0
 800eb94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eb98:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800eb9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eba0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800eba4:	4621      	mov	r1, r4
 800eba6:	1a51      	subs	r1, r2, r1
 800eba8:	65b9      	str	r1, [r7, #88]	; 0x58
 800ebaa:	4629      	mov	r1, r5
 800ebac:	eb63 0301 	sbc.w	r3, r3, r1
 800ebb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebb2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800ebb6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800ebba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ebbe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ebc2:	fb03 f102 	mul.w	r1, r3, r2
 800ebc6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ebca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ebce:	fb02 f303 	mul.w	r3, r2, r3
 800ebd2:	4419      	add	r1, r3
 800ebd4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800ebd8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ebdc:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ebea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebee:	18cb      	adds	r3, r1, r3
 800ebf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ebf4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800ebf8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800ebfc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800ec00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ec04:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ec08:	6539      	str	r1, [r7, #80]	; 0x50
 800ec0a:	f143 0300 	adc.w	r3, r3, #0
 800ec0e:	657b      	str	r3, [r7, #84]	; 0x54
 800ec10:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800ec14:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800ec18:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	da08      	bge.n	800ec32 <VL53L1_hist_events_consistency_check+0x346>
 800ec20:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ec24:	1851      	adds	r1, r2, r1
 800ec26:	64b9      	str	r1, [r7, #72]	; 0x48
 800ec28:	f143 0300 	adc.w	r3, r3, #0
 800ec2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ec32:	f04f 0000 	mov.w	r0, #0
 800ec36:	f04f 0100 	mov.w	r1, #0
 800ec3a:	0b10      	lsrs	r0, r2, #12
 800ec3c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ec40:	1319      	asrs	r1, r3, #12
 800ec42:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800ec46:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ec4a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800ec4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ec52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec54:	2200      	movs	r2, #0
 800ec56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ec5a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ec5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ec62:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800ec66:	4622      	mov	r2, r4
 800ec68:	fb02 f203 	mul.w	r2, r2, r3
 800ec6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ec70:	4629      	mov	r1, r5
 800ec72:	fb01 f303 	mul.w	r3, r1, r3
 800ec76:	441a      	add	r2, r3
 800ec78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	fba3 1301 	umull	r1, r3, r3, r1
 800ec82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ec86:	460b      	mov	r3, r1
 800ec88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec90:	18d3      	adds	r3, r2, r3
 800ec92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ec96:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800ec9a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800ec9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800eca2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eca6:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ecaa:	6439      	str	r1, [r7, #64]	; 0x40
 800ecac:	f143 0300 	adc.w	r3, r3, #0
 800ecb0:	647b      	str	r3, [r7, #68]	; 0x44
 800ecb2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800ecb6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800ecba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	da08      	bge.n	800ecd4 <VL53L1_hist_events_consistency_check+0x3e8>
 800ecc2:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ecc6:	1851      	adds	r1, r2, r1
 800ecc8:	63b9      	str	r1, [r7, #56]	; 0x38
 800ecca:	f143 0300 	adc.w	r3, r3, #0
 800ecce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ecd4:	f04f 0000 	mov.w	r0, #0
 800ecd8:	f04f 0100 	mov.w	r1, #0
 800ecdc:	0b10      	lsrs	r0, r2, #12
 800ecde:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ece2:	1319      	asrs	r1, r3, #12
 800ece4:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800ece8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ecec:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800ecf0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ecf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ecfc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ed00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed04:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800ed08:	4622      	mov	r2, r4
 800ed0a:	fb02 f203 	mul.w	r2, r2, r3
 800ed0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ed12:	4629      	mov	r1, r5
 800ed14:	fb01 f303 	mul.w	r3, r1, r3
 800ed18:	441a      	add	r2, r3
 800ed1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ed1e:	4621      	mov	r1, r4
 800ed20:	fba3 1301 	umull	r1, r3, r3, r1
 800ed24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ed28:	460b      	mov	r3, r1
 800ed2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ed2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ed32:	18d3      	adds	r3, r2, r3
 800ed34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ed38:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800ed3c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800ed40:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800ed44:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ed48:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ed4c:	6339      	str	r1, [r7, #48]	; 0x30
 800ed4e:	f143 0300 	adc.w	r3, r3, #0
 800ed52:	637b      	str	r3, [r7, #52]	; 0x34
 800ed54:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ed58:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800ed5c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ed60:	4610      	mov	r0, r2
 800ed62:	4619      	mov	r1, r3
 800ed64:	2900      	cmp	r1, #0
 800ed66:	da08      	bge.n	800ed7a <VL53L1_hist_events_consistency_check+0x48e>
 800ed68:	f640 73ff 	movw	r3, #4095	; 0xfff
 800ed6c:	18c3      	adds	r3, r0, r3
 800ed6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed70:	f141 0300 	adc.w	r3, r1, #0
 800ed74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ed7a:	f04f 0200 	mov.w	r2, #0
 800ed7e:	f04f 0300 	mov.w	r3, #0
 800ed82:	0b02      	lsrs	r2, r0, #12
 800ed84:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800ed88:	130b      	asrs	r3, r1, #12
 800ed8a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800ed8e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ed92:	1c91      	adds	r1, r2, #2
 800ed94:	6239      	str	r1, [r7, #32]
 800ed96:	f143 0300 	adc.w	r3, r3, #0
 800ed9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed9c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800eda0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800eda4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	da06      	bge.n	800edba <VL53L1_hist_events_consistency_check+0x4ce>
 800edac:	1cd1      	adds	r1, r2, #3
 800edae:	61b9      	str	r1, [r7, #24]
 800edb0:	f143 0300 	adc.w	r3, r3, #0
 800edb4:	61fb      	str	r3, [r7, #28]
 800edb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800edba:	f04f 0000 	mov.w	r0, #0
 800edbe:	f04f 0100 	mov.w	r1, #0
 800edc2:	0890      	lsrs	r0, r2, #2
 800edc4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800edc8:	1099      	asrs	r1, r3, #2
 800edca:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800edce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edd2:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800edd4:	2200      	movs	r2, #0
 800edd6:	613b      	str	r3, [r7, #16]
 800edd8:	617a      	str	r2, [r7, #20]
 800edda:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800edde:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800ede2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800ede6:	1c91      	adds	r1, r2, #2
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	f143 0300 	adc.w	r3, r3, #0
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800edf4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800edf8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	da06      	bge.n	800ee0e <VL53L1_hist_events_consistency_check+0x522>
 800ee00:	1cd1      	adds	r1, r2, #3
 800ee02:	6039      	str	r1, [r7, #0]
 800ee04:	f143 0300 	adc.w	r3, r3, #0
 800ee08:	607b      	str	r3, [r7, #4]
 800ee0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee0e:	f04f 0000 	mov.w	r0, #0
 800ee12:	f04f 0100 	mov.w	r1, #0
 800ee16:	0890      	lsrs	r0, r2, #2
 800ee18:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ee1c:	1099      	asrs	r1, r3, #2
 800ee1e:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800ee22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee26:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800ee28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800ee2c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800ee2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800ee32:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800ee34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800ee38:	4413      	add	r3, r2
 800ee3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800ee3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ee42:	011b      	lsls	r3, r3, #4
 800ee44:	4618      	mov	r0, r3
 800ee46:	f002 f8c6 	bl	8010fd6 <VL53L1_isqrt>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	461a      	mov	r2, r3
	*pevents_tolerance =
 800ee4e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee52:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800ee54:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800ee5e:	fb03 f202 	mul.w	r2, r3, r2
 800ee62:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee66:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800ee68:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f103 0220 	add.w	r2, r3, #32
 800ee72:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee76:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800ee78:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	da00      	bge.n	800ee84 <VL53L1_hist_events_consistency_check+0x598>
 800ee82:	333f      	adds	r3, #63	; 0x3f
 800ee84:	119b      	asrs	r3, r3, #6
 800ee86:	461a      	mov	r2, r3
 800ee88:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee8c:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800ee8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800ee98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eea4:	1a9b      	subs	r3, r3, r2
 800eea6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800eeaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eeae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	da08      	bge.n	800eec8 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800eeb6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800eeba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eebe:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800eec0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	e007      	b.n	800eed8 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800eec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eecc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800eed0:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800eed2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800eed6:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800eed8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	dd0b      	ble.n	800ef00 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800eee8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eeec:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800eeee:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d204      	bcs.n	800ef00 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800eef6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800eefa:	2214      	movs	r2, #20
 800eefc:	701a      	strb	r2, [r3, #0]
 800eefe:	e003      	b.n	800ef08 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800ef00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800ef04:	2209      	movs	r2, #9
 800ef06:	701a      	strb	r2, [r3, #0]





	return status;
 800ef08:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800ef12:	46bd      	mov	sp, r7
 800ef14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ef18 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	4603      	mov	r3, r0
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800ef26:	2300      	movs	r3, #0
 800ef28:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	dd0b      	ble.n	800ef56 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	b29b      	uxth	r3, r3
		delta_mm =
 800ef52:	82fb      	strh	r3, [r7, #22]
 800ef54:	e00a      	b.n	800ef6c <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	b29b      	uxth	r3, r3
		delta_mm =
 800ef6a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800ef6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	dd09      	ble.n	800ef88 <VL53L1_hist_merged_pulse_check+0x70>
 800ef74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	dd03      	ble.n	800ef88 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2216      	movs	r2, #22
 800ef84:	701a      	strb	r2, [r3, #0]
 800ef86:	e002      	b.n	800ef8e <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2209      	movs	r2, #9
 800ef8c:	701a      	strb	r2, [r3, #0]

	return status;
 800ef8e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	371c      	adds	r7, #28
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b08e      	sub	sp, #56	; 0x38
 800efa2:	af04      	add	r7, sp, #16
 800efa4:	60f8      	str	r0, [r7, #12]
 800efa6:	60b9      	str	r1, [r7, #8]
 800efa8:	607a      	str	r2, [r7, #4]
 800efaa:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800efac:	2300      	movs	r3, #0
 800efae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3318      	adds	r3, #24
 800efb6:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800efb8:	2300      	movs	r3, #0
 800efba:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800efbc:	2300      	movs	r3, #0
 800efbe:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800efc0:	6a3b      	ldr	r3, [r7, #32]
 800efc2:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800efc6:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800efc8:	6a3b      	ldr	r3, [r7, #32]
 800efca:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800efce:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800efd6:	2b09      	cmp	r3, #9
 800efd8:	d009      	beq.n	800efee <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800efe0:	2b13      	cmp	r3, #19
 800efe2:	d004      	beq.n	800efee <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800efea:	2b14      	cmp	r3, #20
 800efec:	d129      	bne.n	800f042 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eff4:	2b09      	cmp	r3, #9
 800eff6:	d009      	beq.n	800f00c <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800effe:	2b13      	cmp	r3, #19
 800f000:	d004      	beq.n	800f00c <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800f008:	2b14      	cmp	r3, #20
 800f00a:	d11a      	bne.n	800f042 <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2209      	movs	r2, #9
 800f010:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800f01e:	8bb9      	ldrh	r1, [r7, #28]
 800f020:	7ff8      	ldrb	r0, [r7, #31]
 800f022:	9303      	str	r3, [sp, #12]
 800f024:	f107 0318 	add.w	r3, r7, #24
 800f028:	9302      	str	r3, [sp, #8]
 800f02a:	f107 0314 	add.w	r3, r7, #20
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	4613      	mov	r3, r2
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	f7ff fc58 	bl	800e8ec <VL53L1_hist_events_consistency_check>
 800f03c:	4603      	mov	r3, r0
 800f03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800f042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f046:	4618      	mov	r0, r3
 800f048:	3728      	adds	r7, #40	; 0x28
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800f04e:	b580      	push	{r7, lr}
 800f050:	b088      	sub	sp, #32
 800f052:	af00      	add	r7, sp, #0
 800f054:	60f8      	str	r0, [r7, #12]
 800f056:	60b9      	str	r1, [r7, #8]
 800f058:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f05a:	2300      	movs	r3, #0
 800f05c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800f05e:	2300      	movs	r3, #0
 800f060:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800f062:	2300      	movs	r3, #0
 800f064:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800f066:	2300      	movs	r3, #0
 800f068:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f076:	2b00      	cmp	r3, #0
 800f078:	d019      	beq.n	800f0ae <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f080:	4618      	mov	r0, r3
 800f082:	f002 f90f 	bl	80112a4 <VL53L1_calc_pll_period_mm>
 800f086:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800f08e:	021b      	lsls	r3, r3, #8
 800f090:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	69ba      	ldr	r2, [r7, #24]
 800f096:	fb02 f303 	mul.w	r3, r2, r3
 800f09a:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f0a2:	0bdb      	lsrs	r3, r3, #15
 800f0a4:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	b21a      	sxth	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f0ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3720      	adds	r7, #32
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800f0ba:	b590      	push	{r4, r7, lr}
 800f0bc:	b08d      	sub	sp, #52	; 0x34
 800f0be:	af04      	add	r7, sp, #16
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	4608      	mov	r0, r1
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	4623      	mov	r3, r4
 800f0ca:	80fb      	strh	r3, [r7, #6]
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	80bb      	strh	r3, [r7, #4]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	70fb      	strb	r3, [r7, #3]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800f0f8:	78b9      	ldrb	r1, [r7, #2]
 800f0fa:	78f8      	ldrb	r0, [r7, #3]
 800f0fc:	f107 030c 	add.w	r3, r7, #12
 800f100:	9303      	str	r3, [sp, #12]
 800f102:	f107 030e 	add.w	r3, r7, #14
 800f106:	9302      	str	r3, [sp, #8]
 800f108:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	23ff      	movs	r3, #255	; 0xff
 800f114:	22c7      	movs	r2, #199	; 0xc7
 800f116:	f000 fa03 	bl	800f520 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800f11a:	89fb      	ldrh	r3, [r7, #14]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d050      	beq.n	800f1c2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800f120:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800f122:	2b00      	cmp	r3, #0
 800f124:	d04d      	beq.n	800f1c2 <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800f126:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800f12a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800f12e:	78b9      	ldrb	r1, [r7, #2]
 800f130:	78f8      	ldrb	r0, [r7, #3]
 800f132:	f107 0308 	add.w	r3, r7, #8
 800f136:	9303      	str	r3, [sp, #12]
 800f138:	f107 030a 	add.w	r3, r7, #10
 800f13c:	9302      	str	r3, [sp, #8]
 800f13e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f142:	9301      	str	r3, [sp, #4]
 800f144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	4623      	mov	r3, r4
 800f14a:	f000 f9e9 	bl	800f520 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800f14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f150:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800f152:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800f154:	897b      	ldrh	r3, [r7, #10]
 800f156:	461a      	mov	r2, r3
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	fb02 f303 	mul.w	r3, r2, r3
 800f15e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800f160:	89fb      	ldrh	r3, [r7, #14]
 800f162:	461a      	mov	r2, r3
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	fbb3 f3f2 	udiv	r3, r3, r2
 800f16a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800f16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800f170:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800f172:	893b      	ldrh	r3, [r7, #8]
 800f174:	461a      	mov	r2, r3
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	fb02 f303 	mul.w	r3, r2, r3
 800f17c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800f17e:	89bb      	ldrh	r3, [r7, #12]
 800f180:	461a      	mov	r2, r3
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	fbb3 f3f2 	udiv	r3, r3, r2
 800f188:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800f18a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f18e:	69ba      	ldr	r2, [r7, #24]
 800f190:	fb02 f303 	mul.w	r3, r2, r3
 800f194:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800f196:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	fb02 f303 	mul.w	r3, r2, r3
 800f1a0:	69fa      	ldr	r2, [r7, #28]
 800f1a2:	4413      	add	r3, r2
 800f1a4:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800f1a6:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800f1a8:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800f1aa:	4413      	add	r3, r2
 800f1ac:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d008      	beq.n	800f1c6 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	009a      	lsls	r2, r3, #2
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1be:	61fb      	str	r3, [r7, #28]
 800f1c0:	e002      	b.n	800f1c8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800f1c2:	bf00      	nop
 800f1c4:	e000      	b.n	800f1c8 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800f1c6:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	b21a      	sxth	r2, r3
 800f1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ce:	801a      	strh	r2, [r3, #0]

}
 800f1d0:	bf00      	nop
 800f1d2:	3724      	adds	r7, #36	; 0x24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd90      	pop	{r4, r7, pc}

0800f1d8 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60b9      	str	r1, [r7, #8]
 800f1e0:	607a      	str	r2, [r7, #4]
 800f1e2:	603b      	str	r3, [r7, #0]
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800f1e8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ea:	08db      	lsrs	r3, r3, #3
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800f1f2:	7bfb      	ldrb	r3, [r7, #15]
 800f1f4:	f003 0307 	and.w	r3, r3, #7
 800f1f8:	b2da      	uxtb	r2, r3
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	2301      	movs	r3, #1
 800f206:	4093      	lsls	r3, r2
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	701a      	strb	r2, [r3, #0]

}
 800f20e:	bf00      	nop
 800f210:	3714      	adds	r7, #20
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr

0800f21a <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800f21a:	b480      	push	{r7}
 800f21c:	b083      	sub	sp, #12
 800f21e:	af00      	add	r7, sp, #0
 800f220:	4603      	mov	r3, r0
 800f222:	603a      	str	r2, [r7, #0]
 800f224:	71fb      	strb	r3, [r7, #7]
 800f226:	460b      	mov	r3, r1
 800f228:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800f22a:	79fb      	ldrb	r3, [r7, #7]
 800f22c:	2b07      	cmp	r3, #7
 800f22e:	d90a      	bls.n	800f246 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800f230:	79bb      	ldrb	r3, [r7, #6]
 800f232:	00db      	lsls	r3, r3, #3
 800f234:	b2da      	uxtb	r2, r3
 800f236:	79fb      	ldrb	r3, [r7, #7]
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	3b71      	subs	r3, #113	; 0x71
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800f244:	e00a      	b.n	800f25c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800f246:	79bb      	ldrb	r3, [r7, #6]
 800f248:	f1c3 030f 	rsb	r3, r3, #15
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	00db      	lsls	r3, r3, #3
 800f250:	b2da      	uxtb	r2, r3
 800f252:	79fb      	ldrb	r3, [r7, #7]
 800f254:	4413      	add	r3, r2
 800f256:	b2da      	uxtb	r2, r3
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	701a      	strb	r2, [r3, #0]
}
 800f25c:	bf00      	nop
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800f268:	b480      	push	{r7}
 800f26a:	b085      	sub	sp, #20
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	4603      	mov	r3, r0
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
 800f274:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800f276:	7bfb      	ldrb	r3, [r7, #15]
 800f278:	091b      	lsrs	r3, r3, #4
 800f27a:	b2da      	uxtb	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800f280:	7bfb      	ldrb	r3, [r7, #15]
 800f282:	f003 030f 	and.w	r3, r3, #15
 800f286:	b2da      	uxtb	r2, r3
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	701a      	strb	r2, [r3, #0]

}
 800f28c:	bf00      	nop
 800f28e:	3714      	adds	r7, #20
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	603a      	str	r2, [r7, #0]
 800f2a2:	71fb      	strb	r3, [r7, #7]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800f2a8:	79bb      	ldrb	r3, [r7, #6]
 800f2aa:	011b      	lsls	r3, r3, #4
 800f2ac:	b2da      	uxtb	r2, r3
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	701a      	strb	r2, [r3, #0]

}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60ba      	str	r2, [r7, #8]
 800f2cc:	607b      	str	r3, [r7, #4]
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	73fb      	strb	r3, [r7, #15]
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800f2e6:	f107 0217 	add.w	r2, r7, #23
 800f2ea:	f107 0116 	add.w	r1, r7, #22
 800f2ee:	7bfb      	ldrb	r3, [r7, #15]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f002 fa51 	bl	8011798 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800f2f6:	f107 0214 	add.w	r2, r7, #20
 800f2fa:	f107 0115 	add.w	r1, r7, #21
 800f2fe:	7bbb      	ldrb	r3, [r7, #14]
 800f300:	4618      	mov	r0, r3
 800f302:	f7ff ffb1 	bl	800f268 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800f306:	7dfb      	ldrb	r3, [r7, #23]
 800f308:	b29a      	uxth	r2, r3
 800f30a:	7d7b      	ldrb	r3, [r7, #21]
 800f30c:	3301      	adds	r3, #1
 800f30e:	0fd9      	lsrs	r1, r3, #31
 800f310:	440b      	add	r3, r1
 800f312:	105b      	asrs	r3, r3, #1
 800f314:	425b      	negs	r3, r3
 800f316:	b29b      	uxth	r3, r3
 800f318:	4413      	add	r3, r2
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	b21a      	sxth	r2, r3
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	da02      	bge.n	800f332 <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2200      	movs	r2, #0
 800f330:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f338:	b29a      	uxth	r2, r3
 800f33a:	7d7b      	ldrb	r3, [r7, #21]
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	4413      	add	r3, r2
 800f340:	b29b      	uxth	r3, r3
 800f342:	b21a      	sxth	r2, r3
 800f344:	6a3b      	ldr	r3, [r7, #32]
 800f346:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f34e:	2b0f      	cmp	r3, #15
 800f350:	dd02      	ble.n	800f358 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	220f      	movs	r2, #15
 800f356:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800f358:	7dbb      	ldrb	r3, [r7, #22]
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	7d3b      	ldrb	r3, [r7, #20]
 800f35e:	3301      	adds	r3, #1
 800f360:	0fd9      	lsrs	r1, r3, #31
 800f362:	440b      	add	r3, r1
 800f364:	105b      	asrs	r3, r3, #1
 800f366:	425b      	negs	r3, r3
 800f368:	b29b      	uxth	r3, r3
 800f36a:	4413      	add	r3, r2
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	b21a      	sxth	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	da02      	bge.n	800f384 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	7d3b      	ldrb	r3, [r7, #20]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	4413      	add	r3, r2
 800f392:	b29b      	uxth	r3, r3
 800f394:	b21a      	sxth	r2, r3
 800f396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f398:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3a0:	2b0f      	cmp	r3, #15
 800f3a2:	dd02      	ble.n	800f3aa <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	220f      	movs	r2, #15
 800f3a8:	801a      	strh	r2, [r3, #0]
}
 800f3aa:	bf00      	nop
 800f3ac:	3718      	adds	r7, #24
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800f3b2:	b480      	push	{r7}
 800f3b4:	b085      	sub	sp, #20
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	460a      	mov	r2, r1
 800f3bc:	71fb      	strb	r3, [r7, #7]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800f3c6:	79fb      	ldrb	r3, [r7, #7]
 800f3c8:	f003 0303 	and.w	r3, r3, #3
 800f3cc:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800f3ce:	79bb      	ldrb	r3, [r7, #6]
 800f3d0:	f003 0303 	and.w	r3, r3, #3
 800f3d4:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800f3d6:	7bbb      	ldrb	r3, [r7, #14]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d104      	bne.n	800f3e6 <VL53L1_is_aperture_location+0x34>
 800f3dc:	7b7b      	ldrb	r3, [r7, #13]
 800f3de:	2b02      	cmp	r3, #2
 800f3e0:	d101      	bne.n	800f3e6 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
 800f3e8:	2b02      	cmp	r3, #2
 800f3ea:	d104      	bne.n	800f3f6 <VL53L1_is_aperture_location+0x44>
 800f3ec:	7b7b      	ldrb	r3, [r7, #13]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d101      	bne.n	800f3f6 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800f3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3714      	adds	r7, #20
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800f404:	b590      	push	{r4, r7, lr}
 800f406:	b08b      	sub	sp, #44	; 0x2c
 800f408:	af02      	add	r7, sp, #8
 800f40a:	603a      	str	r2, [r7, #0]
 800f40c:	461a      	mov	r2, r3
 800f40e:	4603      	mov	r3, r0
 800f410:	71fb      	strb	r3, [r7, #7]
 800f412:	460b      	mov	r3, r1
 800f414:	71bb      	strb	r3, [r7, #6]
 800f416:	4613      	mov	r3, r2
 800f418:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800f42a:	2300      	movs	r3, #0
 800f42c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800f432:	2300      	movs	r3, #0
 800f434:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800f43a:	2300      	movs	r3, #0
 800f43c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800f43e:	2300      	movs	r3, #0
 800f440:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800f446:	f107 0416 	add.w	r4, r7, #22
 800f44a:	f107 0218 	add.w	r2, r7, #24
 800f44e:	79b9      	ldrb	r1, [r7, #6]
 800f450:	79f8      	ldrb	r0, [r7, #7]
 800f452:	f107 0312 	add.w	r3, r7, #18
 800f456:	9301      	str	r3, [sp, #4]
 800f458:	f107 0314 	add.w	r3, r7, #20
 800f45c:	9300      	str	r3, [sp, #0]
 800f45e:	4623      	mov	r3, r4
 800f460:	f7ff ff30 	bl	800f2c4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800f464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f466:	2200      	movs	r2, #0
 800f468:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f46a:	8afb      	ldrh	r3, [r7, #22]
 800f46c:	83bb      	strh	r3, [r7, #28]
 800f46e:	e04c      	b.n	800f50a <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f470:	8b3b      	ldrh	r3, [r7, #24]
 800f472:	83fb      	strh	r3, [r7, #30]
 800f474:	e03d      	b.n	800f4f2 <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800f476:	8bbb      	ldrh	r3, [r7, #28]
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	8bfa      	ldrh	r2, [r7, #30]
 800f47c:	b2d1      	uxtb	r1, r2
 800f47e:	f107 0211 	add.w	r2, r7, #17
 800f482:	4618      	mov	r0, r3
 800f484:	f7ff fec9 	bl	800f21a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800f488:	7c78      	ldrb	r0, [r7, #17]
 800f48a:	f107 030e 	add.w	r3, r7, #14
 800f48e:	f107 020f 	add.w	r2, r7, #15
 800f492:	f107 0110 	add.w	r1, r7, #16
 800f496:	f7ff fe9f 	bl	800f1d8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800f49a:	7c3b      	ldrb	r3, [r7, #16]
 800f49c:	461a      	mov	r2, r3
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	781a      	ldrb	r2, [r3, #0]
 800f4a4:	7bbb      	ldrb	r3, [r7, #14]
 800f4a6:	4013      	ands	r3, r2
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d01b      	beq.n	800f4e6 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800f4ae:	8bbb      	ldrh	r3, [r7, #28]
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	8bfa      	ldrh	r2, [r7, #30]
 800f4b4:	b2d2      	uxtb	r2, r2
 800f4b6:	4611      	mov	r1, r2
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7ff ff7a 	bl	800f3b2 <VL53L1_is_aperture_location>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800f4c2:	7efb      	ldrb	r3, [r7, #27]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d007      	beq.n	800f4d8 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	881a      	ldrh	r2, [r3, #0]
 800f4cc:	88bb      	ldrh	r3, [r7, #4]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d4:	801a      	strh	r2, [r3, #0]
 800f4d6:	e006      	b.n	800f4e6 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	881b      	ldrh	r3, [r3, #0]
 800f4dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f4e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	83fb      	strh	r3, [r7, #30]
 800f4f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f4f6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	ddbb      	ble.n	800f476 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f4fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f502:	b29b      	uxth	r3, r3
 800f504:	3301      	adds	r3, #1
 800f506:	b29b      	uxth	r3, r3
 800f508:	83bb      	strh	r3, [r7, #28]
 800f50a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f50e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f512:	429a      	cmp	r2, r3
 800f514:	ddac      	ble.n	800f470 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800f516:	bf00      	nop
 800f518:	bf00      	nop
 800f51a:	3724      	adds	r7, #36	; 0x24
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd90      	pop	{r4, r7, pc}

0800f520 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	b08d      	sub	sp, #52	; 0x34
 800f524:	af02      	add	r7, sp, #8
 800f526:	4604      	mov	r4, r0
 800f528:	4608      	mov	r0, r1
 800f52a:	4611      	mov	r1, r2
 800f52c:	461a      	mov	r2, r3
 800f52e:	4623      	mov	r3, r4
 800f530:	71fb      	strb	r3, [r7, #7]
 800f532:	4603      	mov	r3, r0
 800f534:	71bb      	strb	r3, [r7, #6]
 800f536:	460b      	mov	r3, r1
 800f538:	717b      	strb	r3, [r7, #5]
 800f53a:	4613      	mov	r3, r2
 800f53c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800f54e:	2300      	movs	r3, #0
 800f550:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800f556:	2300      	movs	r3, #0
 800f558:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800f56a:	2300      	movs	r3, #0
 800f56c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800f56e:	2300      	movs	r3, #0
 800f570:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800f580:	f107 041c 	add.w	r4, r7, #28
 800f584:	f107 021e 	add.w	r2, r7, #30
 800f588:	79b9      	ldrb	r1, [r7, #6]
 800f58a:	79f8      	ldrb	r0, [r7, #7]
 800f58c:	f107 0318 	add.w	r3, r7, #24
 800f590:	9301      	str	r3, [sp, #4]
 800f592:	f107 031a 	add.w	r3, r7, #26
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	4623      	mov	r3, r4
 800f59a:	f7ff fe93 	bl	800f2c4 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800f59e:	f107 0414 	add.w	r4, r7, #20
 800f5a2:	f107 0216 	add.w	r2, r7, #22
 800f5a6:	7939      	ldrb	r1, [r7, #4]
 800f5a8:	7978      	ldrb	r0, [r7, #5]
 800f5aa:	f107 0310 	add.w	r3, r7, #16
 800f5ae:	9301      	str	r3, [sp, #4]
 800f5b0:	f107 0312 	add.w	r3, r7, #18
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	4623      	mov	r3, r4
 800f5b8:	f7ff fe84 	bl	800f2c4 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800f5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5be:	2200      	movs	r2, #0
 800f5c0:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800f5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f5c8:	8abb      	ldrh	r3, [r7, #20]
 800f5ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f5cc:	e06c      	b.n	800f6a8 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f5ce:	8afb      	ldrh	r3, [r7, #22]
 800f5d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f5d2:	e05d      	b.n	800f690 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800f5d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f5da:	b2d1      	uxtb	r1, r2
 800f5dc:	f107 020f 	add.w	r2, r7, #15
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7ff fe1a 	bl	800f21a <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800f5e6:	7bf8      	ldrb	r0, [r7, #15]
 800f5e8:	f107 030c 	add.w	r3, r7, #12
 800f5ec:	f107 020d 	add.w	r2, r7, #13
 800f5f0:	f107 010e 	add.w	r1, r7, #14
 800f5f4:	f7ff fdf0 	bl	800f1d8 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	4413      	add	r3, r2
 800f600:	781a      	ldrb	r2, [r3, #0]
 800f602:	7b3b      	ldrb	r3, [r7, #12]
 800f604:	4013      	ands	r3, r2
 800f606:	b2db      	uxtb	r3, r3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d03b      	beq.n	800f684 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800f60c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f612:	b2d2      	uxtb	r2, r2
 800f614:	4611      	mov	r1, r2
 800f616:	4618      	mov	r0, r3
 800f618:	f7ff fecb 	bl	800f3b2 <VL53L1_is_aperture_location>
 800f61c:	4603      	mov	r3, r0
 800f61e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800f622:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f626:	2b00      	cmp	r3, #0
 800f628:	d002      	beq.n	800f630 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800f62a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f62c:	847b      	strh	r3, [r7, #34]	; 0x22
 800f62e:	e002      	b.n	800f636 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800f630:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f634:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f636:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f63a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f63e:	429a      	cmp	r2, r3
 800f640:	db19      	blt.n	800f676 <VL53L1_calc_mm_effective_spads+0x156>
 800f642:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f646:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f64a:	429a      	cmp	r2, r3
 800f64c:	dc13      	bgt.n	800f676 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f64e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f652:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f656:	429a      	cmp	r2, r3
 800f658:	db0d      	blt.n	800f676 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f65a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f65e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f662:	429a      	cmp	r2, r3
 800f664:	dc07      	bgt.n	800f676 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800f666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f668:	881a      	ldrh	r2, [r3, #0]
 800f66a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f66c:	4413      	add	r3, r2
 800f66e:	b29a      	uxth	r2, r3
 800f670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f672:	801a      	strh	r2, [r3, #0]
 800f674:	e006      	b.n	800f684 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800f676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f678:	881a      	ldrh	r2, [r3, #0]
 800f67a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f67c:	4413      	add	r3, r2
 800f67e:	b29a      	uxth	r2, r3
 800f680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f682:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f684:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f688:	b29b      	uxth	r3, r3
 800f68a:	3301      	adds	r3, #1
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f694:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f698:	429a      	cmp	r2, r3
 800f69a:	dd9b      	ble.n	800f5d4 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f69c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f6a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f6ac:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	dd8c      	ble.n	800f5ce <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	372c      	adds	r7, #44	; 0x2c
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd90      	pop	{r4, r7, pc}

0800f6be <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b086      	sub	sp, #24
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	60f8      	str	r0, [r7, #12]
 800f6c6:	60b9      	str	r1, [r7, #8]
 800f6c8:	607a      	str	r2, [r7, #4]
 800f6ca:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7fd ff6d 	bl	800d5b0 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	7c9a      	ldrb	r2, [r3, #18]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	3314      	adds	r3, #20
 800f700:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800f702:	2300      	movs	r3, #0
 800f704:	75fb      	strb	r3, [r7, #23]
 800f706:	e06b      	b.n	800f7e0 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800f708:	7dfb      	ldrb	r3, [r7, #23]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d002      	beq.n	800f714 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d034      	beq.n	800f77c <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800f712:	e05f      	b.n	800f7d4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f74c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	8a9a      	ldrh	r2, [r3, #20]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	601a      	str	r2, [r3, #0]

			break;
 800f77a:	e02b      	b.n	800f7d4 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f7ac:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	611a      	str	r2, [r3, #16]
			break;
 800f7d2:	bf00      	nop
		}

		pdata++;
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	334c      	adds	r3, #76	; 0x4c
 800f7d8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800f7da:	7dfb      	ldrb	r3, [r7, #23]
 800f7dc:	3301      	adds	r3, #1
 800f7de:	75fb      	strb	r3, [r7, #23]
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	7c9b      	ldrb	r3, [r3, #18]
 800f7e4:	7dfa      	ldrb	r2, [r7, #23]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d38e      	bcc.n	800f708 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800f7ea:	bf00      	nop
 800f7ec:	bf00      	nop
 800f7ee:	3718      	adds	r7, #24
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b089      	sub	sp, #36	; 0x24
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	3318      	adds	r3, #24
 800f804:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f80c:	3308      	adds	r3, #8
 800f80e:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800f816:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f81e:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800f820:	4613      	mov	r3, r2
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	4413      	add	r3, r2
 800f826:	005b      	lsls	r3, r3, #1
 800f828:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f82c:	697a      	ldr	r2, [r7, #20]
 800f82e:	4413      	add	r3, r2
 800f830:	3302      	adds	r3, #2
 800f832:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800f834:	69bb      	ldr	r3, [r7, #24]
 800f836:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800f858:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3724      	adds	r7, #36	; 0x24
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800f868:	b480      	push	{r7}
 800f86a:	b08b      	sub	sp, #44	; 0x2c
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f872:	2300      	movs	r3, #0
 800f874:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	3318      	adds	r3, #24
 800f87a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800f882:	3308      	adds	r3, #8
 800f884:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f88c:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f894:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800f89c:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800f89e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8a2:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800f8a4:	7bfa      	ldrb	r2, [r7, #15]
 800f8a6:	6939      	ldr	r1, [r7, #16]
 800f8a8:	4613      	mov	r3, r2
 800f8aa:	009b      	lsls	r3, r3, #2
 800f8ac:	4413      	add	r3, r2
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	440b      	add	r3, r1
 800f8b2:	3306      	adds	r3, #6
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f8be:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8c6:	e01a      	b.n	800f8fe <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800f8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8cc:	683a      	ldr	r2, [r7, #0]
 800f8ce:	214c      	movs	r1, #76	; 0x4c
 800f8d0:	fb01 f303 	mul.w	r3, r1, r3
 800f8d4:	4413      	add	r3, r2
 800f8d6:	334a      	adds	r3, #74	; 0x4a
 800f8d8:	881b      	ldrh	r3, [r3, #0]
 800f8da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d209      	bcs.n	800f8f4 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800f8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	214c      	movs	r1, #76	; 0x4c
 800f8e8:	fb01 f303 	mul.w	r3, r1, r3
 800f8ec:	4413      	add	r3, r2
 800f8ee:	334a      	adds	r3, #74	; 0x4a
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800f8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	7c9b      	ldrb	r3, [r3, #18]
 800f902:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f906:	429a      	cmp	r2, r3
 800f908:	d3de      	bcc.n	800f8c8 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800f90a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d103      	bne.n	800f918 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800f910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f914:	623b      	str	r3, [r7, #32]
 800f916:	e00e      	b.n	800f936 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800f918:	89bb      	ldrh	r3, [r7, #12]
 800f91a:	039b      	lsls	r3, r3, #14
 800f91c:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800f91e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f920:	6a3a      	ldr	r2, [r7, #32]
 800f922:	fbb2 f3f3 	udiv	r3, r2, r3
 800f926:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f92e:	d302      	bcc.n	800f936 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800f930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f934:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800f936:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800f938:	6a3b      	ldr	r3, [r7, #32]
 800f93a:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800f93c:	6939      	ldr	r1, [r7, #16]
 800f93e:	4613      	mov	r3, r2
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	4413      	add	r3, r2
 800f944:	005b      	lsls	r3, r3, #1
 800f946:	440b      	add	r3, r1
 800f948:	3306      	adds	r3, #6
 800f94a:	4602      	mov	r2, r0
 800f94c:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800f94e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f952:	4618      	mov	r0, r3
 800f954:	372c      	adds	r7, #44	; 0x2c
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr

0800f95e <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b08a      	sub	sp, #40	; 0x28
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f966:	2300      	movs	r3, #0
 800f968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	3318      	adds	r3, #24
 800f970:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800f972:	6a3b      	ldr	r3, [r7, #32]
 800f974:	332c      	adds	r3, #44	; 0x2c
 800f976:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800f978:	6a3b      	ldr	r3, [r7, #32]
 800f97a:	33c2      	adds	r3, #194	; 0xc2
 800f97c:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800f97e:	6a3b      	ldr	r3, [r7, #32]
 800f980:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800f984:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	3302      	adds	r3, #2
 800f98a:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	785b      	ldrb	r3, [r3, #1]
 800f990:	f003 0301 	and.w	r3, r3, #1
 800f994:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800f996:	6a3b      	ldr	r3, [r7, #32]
 800f998:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f99c:	461a      	mov	r2, r3
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f9a6:	2b01      	cmp	r3, #1
 800f9a8:	d11e      	bne.n	800f9e8 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800f9aa:	7bfb      	ldrb	r3, [r7, #15]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10b      	bne.n	800f9c8 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d05d      	beq.n	800fa8a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	719a      	strb	r2, [r3, #6]
 800f9e6:	e050      	b.n	800fa8a <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f9f8:	2b02      	cmp	r3, #2
 800f9fa:	d11e      	bne.n	800fa3a <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800f9fc:	7bfb      	ldrb	r3, [r7, #15]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d10b      	bne.n	800fa1a <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800fa1a:	7bfb      	ldrb	r3, [r7, #15]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d034      	beq.n	800fa8a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	719a      	strb	r2, [r3, #6]
 800fa38:	e027      	b.n	800fa8a <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800fa3a:	6a3b      	ldr	r3, [r7, #32]
 800fa3c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fa40:	461a      	mov	r2, r3
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	4413      	add	r3, r2
 800fa46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fa4a:	2b03      	cmp	r3, #3
 800fa4c:	d11d      	bne.n	800fa8a <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800fa4e:	7bfb      	ldrb	r3, [r7, #15]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d10b      	bne.n	800fa6c <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800fa6c:	7bfb      	ldrb	r3, [r7, #15]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00b      	beq.n	800fa8a <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800fa8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d109      	bne.n	800faa6 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	f203 3142 	addw	r1, r3, #834	; 0x342
 800fa98:	6a3b      	ldr	r3, [r7, #32]
 800fa9a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800fa9e:	461a      	mov	r2, r3
 800faa0:	6978      	ldr	r0, [r7, #20]
 800faa2:	f7fd f921 	bl	800cce8 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800faa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3728      	adds	r7, #40	; 0x28
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800fab2:	b480      	push	{r7}
 800fab4:	b089      	sub	sp, #36	; 0x24
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	60f8      	str	r0, [r7, #12]
 800faba:	607a      	str	r2, [r7, #4]
 800fabc:	603b      	str	r3, [r7, #0]
 800fabe:	460b      	mov	r3, r1
 800fac0:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fac2:	2300      	movs	r3, #0
 800fac4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	3318      	adds	r3, #24
 800faca:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800fad2:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800fad4:	7dfb      	ldrb	r3, [r7, #23]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d103      	bne.n	800fae2 <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	7afa      	ldrb	r2, [r7, #11]
 800fade:	701a      	strb	r2, [r3, #0]
 800fae0:	e01e      	b.n	800fb20 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	461a      	mov	r2, r3
 800fae8:	7dfb      	ldrb	r3, [r7, #23]
 800faea:	3b01      	subs	r3, #1
 800faec:	429a      	cmp	r2, r3
 800faee:	d111      	bne.n	800fb14 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2bff      	cmp	r3, #255	; 0xff
 800faf6:	d103      	bne.n	800fb00 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2280      	movs	r2, #128	; 0x80
 800fafc:	701a      	strb	r2, [r3, #0]
 800fafe:	e005      	b.n	800fb0c <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	3301      	adds	r3, #1
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	701a      	strb	r2, [r3, #0]
 800fb12:	e005      	b.n	800fb20 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	b2da      	uxtb	r2, r3
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800fb20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3724      	adds	r7, #36	; 0x24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b087      	sub	sp, #28
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d118      	bne.n	800fb7c <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	719a      	strb	r2, [r3, #6]
 800fb7a:	e03a      	b.n	800fbf2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb82:	2b02      	cmp	r3, #2
 800fb84:	d118      	bne.n	800fbb8 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	719a      	strb	r2, [r3, #6]
 800fbb6:	e01c      	b.n	800fbf2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	d117      	bne.n	800fbf2 <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800fbf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr

0800fc02 <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b08a      	sub	sp, #40	; 0x28
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	60f8      	str	r0, [r7, #12]
 800fc0a:	607a      	str	r2, [r7, #4]
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	460b      	mov	r3, r1
 800fc10:	72fb      	strb	r3, [r7, #11]
 800fc12:	4613      	mov	r3, r2
 800fc14:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fc16:	2300      	movs	r3, #0
 800fc18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3318      	adds	r3, #24
 800fc20:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800fc26:	2300      	movs	r3, #0
 800fc28:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800fc2a:	7afa      	ldrb	r2, [r7, #11]
 800fc2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fc2e:	4611      	mov	r1, r2
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fe f8ca 	bl	800ddca <VL53L1_calc_macro_period_us>
 800fc36:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800fc38:	6a3b      	ldr	r3, [r7, #32]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d101      	bne.n	800fc42 <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	031b      	lsls	r3, r3, #12
 800fc46:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800fc48:	6a3b      	ldr	r3, [r7, #32]
 800fc4a:	085b      	lsrs	r3, r3, #1
 800fc4c:	69ba      	ldr	r2, [r7, #24]
 800fc4e:	4413      	add	r3, r2
 800fc50:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800fc52:	69ba      	ldr	r2, [r7, #24]
 800fc54:	6a3b      	ldr	r3, [r7, #32]
 800fc56:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc5a:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	2bff      	cmp	r3, #255	; 0xff
 800fc60:	d904      	bls.n	800fc6c <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	22ff      	movs	r2, #255	; 0xff
 800fc66:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800fc6a:	e004      	b.n	800fc76 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	7afa      	ldrb	r2, [r7, #11]
 800fc7a:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800fc7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d10a      	bne.n	800fc9c <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	214b      	movs	r1, #75	; 0x4b
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f007 f9bd 	bl	8017010 <VL53L1_WrByte>
 800fc96:	4603      	mov	r3, r0
 800fc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800fc9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d10a      	bne.n	800fcba <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800fcaa:	461a      	mov	r2, r3
 800fcac:	2160      	movs	r1, #96	; 0x60
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	f007 f9ae 	bl	8017010 <VL53L1_WrByte>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800fcc0:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800fcc8:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800fcca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d109      	bne.n	800fce6 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800fcd2:	f107 0214 	add.w	r2, r7, #20
 800fcd6:	2302      	movs	r3, #2
 800fcd8:	2178      	movs	r1, #120	; 0x78
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f007 f92c 	bl	8016f38 <VL53L1_WriteMulti>
 800fce0:	4603      	mov	r3, r0
 800fce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	893a      	ldrh	r2, [r7, #8]
 800fcea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800fcee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d108      	bne.n	800fd08 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800fcf6:	893b      	ldrh	r3, [r7, #8]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	211c      	movs	r1, #28
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f007 f9b1 	bl	8017064 <VL53L1_WrWord>
 800fd02:	4603      	mov	r3, r0
 800fd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800fd08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d108      	bne.n	800fd22 <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800fd10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fd12:	461a      	mov	r2, r3
 800fd14:	2164      	movs	r1, #100	; 0x64
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f007 f9a4 	bl	8017064 <VL53L1_WrWord>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800fd22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d108      	bne.n	800fd3c <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800fd2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	2166      	movs	r1, #102	; 0x66
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f007 f997 	bl	8017064 <VL53L1_WrWord>
 800fd36:	4603      	mov	r3, r0
 800fd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800fd3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3728      	adds	r7, #40	; 0x28
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800fd48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd4c:	b0a2      	sub	sp, #136	; 0x88
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fd52:	2300      	movs	r3, #0
 800fd54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd5a:	3318      	adds	r3, #24
 800fd5c:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800fd5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd60:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800fd64:	3308      	adds	r3, #8
 800fd66:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800fd68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd6a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800fd6e:	3318      	adds	r3, #24
 800fd70:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800fd72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd74:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800fd78:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800fd7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd7c:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800fd7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fd84:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800fd86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd88:	69db      	ldr	r3, [r3, #28]
 800fd8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800fd8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d103      	bne.n	800fd9e <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800fd96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800fd9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fda0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800fda2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800fda6:	4413      	add	r3, r2
 800fda8:	2200      	movs	r2, #0
 800fdaa:	461c      	mov	r4, r3
 800fdac:	4615      	mov	r5, r2
 800fdae:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800fdb2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800fdb6:	4622      	mov	r2, r4
 800fdb8:	462b      	mov	r3, r5
 800fdba:	f04f 0000 	mov.w	r0, #0
 800fdbe:	f04f 0100 	mov.w	r1, #0
 800fdc2:	0159      	lsls	r1, r3, #5
 800fdc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fdc8:	0150      	lsls	r0, r2, #5
 800fdca:	4602      	mov	r2, r0
 800fdcc:	460b      	mov	r3, r1
 800fdce:	ebb2 0804 	subs.w	r8, r2, r4
 800fdd2:	eb63 0905 	sbc.w	r9, r3, r5
 800fdd6:	f04f 0200 	mov.w	r2, #0
 800fdda:	f04f 0300 	mov.w	r3, #0
 800fdde:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800fde2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800fde6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800fdea:	4690      	mov	r8, r2
 800fdec:	4699      	mov	r9, r3
 800fdee:	eb18 0304 	adds.w	r3, r8, r4
 800fdf2:	633b      	str	r3, [r7, #48]	; 0x30
 800fdf4:	eb49 0305 	adc.w	r3, r9, r5
 800fdf8:	637b      	str	r3, [r7, #52]	; 0x34
 800fdfa:	f04f 0200 	mov.w	r2, #0
 800fdfe:	f04f 0300 	mov.w	r3, #0
 800fe02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800fe06:	4629      	mov	r1, r5
 800fe08:	00cb      	lsls	r3, r1, #3
 800fe0a:	4621      	mov	r1, r4
 800fe0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fe10:	4621      	mov	r1, r4
 800fe12:	00ca      	lsls	r2, r1, #3
 800fe14:	4610      	mov	r0, r2
 800fe16:	4619      	mov	r1, r3
 800fe18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe20:	647a      	str	r2, [r7, #68]	; 0x44
 800fe22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fe26:	f7f0 fee7 	bl	8000bf8 <__aeabi_uldivmod>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800fe32:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800fe36:	4622      	mov	r2, r4
 800fe38:	462b      	mov	r3, r5
 800fe3a:	f04f 0000 	mov.w	r0, #0
 800fe3e:	f04f 0100 	mov.w	r1, #0
 800fe42:	0159      	lsls	r1, r3, #5
 800fe44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fe48:	0150      	lsls	r0, r2, #5
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	ebb2 0a04 	subs.w	sl, r2, r4
 800fe52:	eb63 0b05 	sbc.w	fp, r3, r5
 800fe56:	f04f 0200 	mov.w	r2, #0
 800fe5a:	f04f 0300 	mov.w	r3, #0
 800fe5e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fe62:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800fe66:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800fe6a:	4692      	mov	sl, r2
 800fe6c:	469b      	mov	fp, r3
 800fe6e:	eb1a 0304 	adds.w	r3, sl, r4
 800fe72:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe74:	eb4b 0305 	adc.w	r3, fp, r5
 800fe78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe7a:	f04f 0200 	mov.w	r2, #0
 800fe7e:	f04f 0300 	mov.w	r3, #0
 800fe82:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800fe86:	4629      	mov	r1, r5
 800fe88:	00cb      	lsls	r3, r1, #3
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fe90:	4621      	mov	r1, r4
 800fe92:	00ca      	lsls	r2, r1, #3
 800fe94:	4610      	mov	r0, r2
 800fe96:	4619      	mov	r1, r3
 800fe98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fea2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fea6:	f7f0 fea7 	bl	8000bf8 <__aeabi_uldivmod>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800feb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800feb8:	8ad2      	ldrh	r2, [r2, #22]
 800feba:	fb02 f303 	mul.w	r3, r2, r3
 800febe:	2200      	movs	r2, #0
 800fec0:	623b      	str	r3, [r7, #32]
 800fec2:	627a      	str	r2, [r7, #36]	; 0x24
 800fec4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800fec8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800fecc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fed0:	4313      	orrs	r3, r2
 800fed2:	d105      	bne.n	800fee0 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800fed4:	f04f 0201 	mov.w	r2, #1
 800fed8:	f04f 0300 	mov.w	r3, #0
 800fedc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800fee0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fee4:	4602      	mov	r2, r0
 800fee6:	460b      	mov	r3, r1
 800fee8:	f04f 0400 	mov.w	r4, #0
 800feec:	f04f 0500 	mov.w	r5, #0
 800fef0:	015d      	lsls	r5, r3, #5
 800fef2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800fef6:	0154      	lsls	r4, r2, #5
 800fef8:	4622      	mov	r2, r4
 800fefa:	462b      	mov	r3, r5
 800fefc:	1a14      	subs	r4, r2, r0
 800fefe:	61bc      	str	r4, [r7, #24]
 800ff00:	eb63 0301 	sbc.w	r3, r3, r1
 800ff04:	61fb      	str	r3, [r7, #28]
 800ff06:	f04f 0200 	mov.w	r2, #0
 800ff0a:	f04f 0300 	mov.w	r3, #0
 800ff0e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800ff12:	464c      	mov	r4, r9
 800ff14:	00a3      	lsls	r3, r4, #2
 800ff16:	4644      	mov	r4, r8
 800ff18:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ff1c:	4644      	mov	r4, r8
 800ff1e:	00a2      	lsls	r2, r4, #2
 800ff20:	4614      	mov	r4, r2
 800ff22:	461d      	mov	r5, r3
 800ff24:	4623      	mov	r3, r4
 800ff26:	181b      	adds	r3, r3, r0
 800ff28:	613b      	str	r3, [r7, #16]
 800ff2a:	462b      	mov	r3, r5
 800ff2c:	eb41 0303 	adc.w	r3, r1, r3
 800ff30:	617b      	str	r3, [r7, #20]
 800ff32:	f04f 0200 	mov.w	r2, #0
 800ff36:	f04f 0300 	mov.w	r3, #0
 800ff3a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ff3e:	4629      	mov	r1, r5
 800ff40:	02cb      	lsls	r3, r1, #11
 800ff42:	4621      	mov	r1, r4
 800ff44:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800ff48:	4621      	mov	r1, r4
 800ff4a:	02ca      	lsls	r2, r1, #11
 800ff4c:	461c      	mov	r4, r3
 800ff4e:	4613      	mov	r3, r2
 800ff50:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800ff54:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800ff58:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ff5c:	f7f0 fe4c 	bl	8000bf8 <__aeabi_uldivmod>
 800ff60:	4602      	mov	r2, r0
 800ff62:	460b      	mov	r3, r1
 800ff64:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800ff68:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	f04f 0400 	mov.w	r4, #0
 800ff74:	f04f 0500 	mov.w	r5, #0
 800ff78:	015d      	lsls	r5, r3, #5
 800ff7a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800ff7e:	0154      	lsls	r4, r2, #5
 800ff80:	4622      	mov	r2, r4
 800ff82:	462b      	mov	r3, r5
 800ff84:	1a14      	subs	r4, r2, r0
 800ff86:	60bc      	str	r4, [r7, #8]
 800ff88:	eb63 0301 	sbc.w	r3, r3, r1
 800ff8c:	60fb      	str	r3, [r7, #12]
 800ff8e:	f04f 0200 	mov.w	r2, #0
 800ff92:	f04f 0300 	mov.w	r3, #0
 800ff96:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800ff9a:	464c      	mov	r4, r9
 800ff9c:	00a3      	lsls	r3, r4, #2
 800ff9e:	4644      	mov	r4, r8
 800ffa0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ffa4:	4644      	mov	r4, r8
 800ffa6:	00a2      	lsls	r2, r4, #2
 800ffa8:	4614      	mov	r4, r2
 800ffaa:	461d      	mov	r5, r3
 800ffac:	4623      	mov	r3, r4
 800ffae:	181b      	adds	r3, r3, r0
 800ffb0:	603b      	str	r3, [r7, #0]
 800ffb2:	462b      	mov	r3, r5
 800ffb4:	eb41 0303 	adc.w	r3, r1, r3
 800ffb8:	607b      	str	r3, [r7, #4]
 800ffba:	f04f 0200 	mov.w	r2, #0
 800ffbe:	f04f 0300 	mov.w	r3, #0
 800ffc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	02cb      	lsls	r3, r1, #11
 800ffca:	4621      	mov	r1, r4
 800ffcc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	02ca      	lsls	r2, r1, #11
 800ffd4:	461c      	mov	r4, r3
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800ffdc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800ffe0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ffe4:	f7f0 fe08 	bl	8000bf8 <__aeabi_uldivmod>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	460b      	mov	r3, r1
 800ffec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800fff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fff4:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800fff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d802      	bhi.n	8010004 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800fffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010000:	2202      	movs	r2, #2
 8010002:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 8010004:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8010008:	4618      	mov	r0, r3
 801000a:	3788      	adds	r7, #136	; 0x88
 801000c:	46bd      	mov	sp, r7
 801000e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08010014 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b096      	sub	sp, #88	; 0x58
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
 8010020:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010022:	2300      	movs	r3, #0
 8010024:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3318      	adds	r3, #24
 801002c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 801002e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010030:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8010034:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 8010036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010038:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 801003c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 801003e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010040:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8010044:	2b01      	cmp	r3, #1
 8010046:	d108      	bne.n	801005a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801004e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8010052:	2b01      	cmp	r3, #1
 8010054:	d101      	bne.n	801005a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 8010056:	2301      	movs	r3, #1
 8010058:	e000      	b.n	801005c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 801005a:	2300      	movs	r3, #0
 801005c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 8010060:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8010064:	2b01      	cmp	r3, #1
 8010066:	d107      	bne.n	8010078 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	889b      	ldrh	r3, [r3, #4]
 801006c:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	609a      	str	r2, [r3, #8]
 8010076:	e002      	b.n	801007e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	68ba      	ldr	r2, [r7, #8]
 801007c:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 801007e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010080:	689b      	ldr	r3, [r3, #8]
 8010082:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 8010084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010086:	899b      	ldrh	r3, [r3, #12]
 8010088:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 801008c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008e:	89db      	ldrh	r3, [r3, #14]
 8010090:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801009a:	2b00      	cmp	r3, #0
 801009c:	d004      	beq.n	80100a8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d125      	bne.n	80100f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 80100a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100aa:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d021      	beq.n	80100f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80100b0:	f107 0313 	add.w	r3, r7, #19
 80100b4:	4619      	mov	r1, r3
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f000 fe44 	bl	8010d44 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80100bc:	7cfb      	ldrb	r3, [r7, #19]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d101      	bne.n	80100c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 80100c2:	2301      	movs	r3, #1
 80100c4:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 80100c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d103      	bne.n	80100d6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 80100ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	653b      	str	r3, [r7, #80]	; 0x50
 80100d4:	e006      	b.n	80100e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 80100d6:	7cfb      	ldrb	r3, [r7, #19]
 80100d8:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 80100da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100dc:	3202      	adds	r2, #2
 80100de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e2:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	889b      	ldrh	r3, [r3, #4]
 80100e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 80100ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ee:	88db      	ldrh	r3, [r3, #6]
 80100f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d10a      	bne.n	8010114 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 80100fe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010102:	2b00      	cmp	r3, #0
 8010104:	d106      	bne.n	8010114 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	795b      	ldrb	r3, [r3, #5]
 801010a:	f043 0301 	orr.w	r3, r3, #1
 801010e:	b2da      	uxtb	r2, r3
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801011a:	2b00      	cmp	r3, #0
 801011c:	d10a      	bne.n	8010134 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 801011e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010122:	2b00      	cmp	r3, #0
 8010124:	d106      	bne.n	8010134 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	795b      	ldrb	r3, [r3, #5]
 801012a:	f043 0302 	orr.w	r3, r3, #2
 801012e:	b2da      	uxtb	r2, r3
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 8010134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010136:	2b00      	cmp	r3, #0
 8010138:	d101      	bne.n	801013e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 801013a:	2301      	movs	r3, #1
 801013c:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010144:	2b01      	cmp	r3, #1
 8010146:	d108      	bne.n	801015a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801014c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010154:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8010158:	e019      	b.n	801018e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 801015a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801015e:	019b      	lsls	r3, r3, #6
 8010160:	461a      	mov	r2, r3
 8010162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010164:	fbb2 f3f3 	udiv	r3, r2, r3
 8010168:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8010172:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 8010174:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010178:	019b      	lsls	r3, r3, #6
 801017a:	461a      	mov	r2, r3
 801017c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010182:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801018c:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010194:	2b00      	cmp	r3, #0
 8010196:	d12a      	bne.n	80101ee <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	689b      	ldr	r3, [r3, #8]
 801019c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80101a0:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 80101a4:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 80101a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101a8:	119b      	asrs	r3, r3, #6
 80101aa:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 80101ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101b2:	db02      	blt.n	80101ba <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 80101b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101b8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 80101ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101bc:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	689b      	ldr	r3, [r3, #8]
 80101c6:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 80101ca:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 80101ce:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 80101d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101d2:	119b      	asrs	r3, r3, #6
 80101d4:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 80101d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101dc:	db02      	blt.n	80101e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 80101de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101e2:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 80101e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101e6:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	81da      	strh	r2, [r3, #14]
 80101ec:	e042      	b.n	8010274 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d13d      	bne.n	8010274 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 80101fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 8010202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010204:	2b00      	cmp	r3, #0
 8010206:	da00      	bge.n	801020a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 8010208:	330f      	adds	r3, #15
 801020a:	111b      	asrs	r3, r3, #4
 801020c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 801020e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 8010214:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801021a:	4413      	add	r3, r2
 801021c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 801021e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010224:	db02      	blt.n	801022c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 8010226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801022a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 801022c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801022e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 8010238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 801023e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010240:	4a51      	ldr	r2, [pc, #324]	; (8010388 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 8010242:	fb82 1203 	smull	r1, r2, r2, r3
 8010246:	1152      	asrs	r2, r2, #5
 8010248:	17db      	asrs	r3, r3, #31
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 801024e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 8010254:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801025a:	4413      	add	r3, r2
 801025c:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 801025e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010264:	db02      	blt.n	801026c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 8010266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801026a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 801026c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801026e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	785b      	ldrb	r3, [r3, #1]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d177      	bne.n	801036c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 801027c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8010280:	2b01      	cmp	r3, #1
 8010282:	d073      	beq.n	801036c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	2201      	movs	r2, #1
 8010288:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8010290:	f107 0313 	add.w	r3, r7, #19
 8010294:	4619      	mov	r1, r3
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f000 fd54 	bl	8010d44 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 801029c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801029e:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 80102a2:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 80102a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a6:	3308      	adds	r3, #8
 80102a8:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 80102aa:	7cfb      	ldrb	r3, [r7, #19]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d041      	beq.n	8010334 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 80102b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d03d      	beq.n	8010334 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 80102b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d03a      	beq.n	8010334 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 80102be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80102ca:	fb03 f202 	mul.w	r2, r3, r2
 80102ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80102d4:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d004      	beq.n	80102e6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 80102e0:	69ba      	ldr	r2, [r7, #24]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d303      	bcc.n	80102ee <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	2200      	movs	r2, #0
 80102ea:	719a      	strb	r2, [r3, #6]
 80102ec:	e022      	b.n	8010334 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 80102ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102f0:	6a3b      	ldr	r3, [r7, #32]
 80102f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102f6:	617b      	str	r3, [r7, #20]
				cval = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 80102fc:	2300      	movs	r3, #0
 80102fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010302:	e00e      	b.n	8010322 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 8010304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	4413      	add	r3, r2
 801030a:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 801030c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801030e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010310:	601a      	str	r2, [r3, #0]
					pcpo++;
 8010312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010314:	3304      	adds	r3, #4
 8010316:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 8010318:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801031c:	3301      	adds	r3, #1
 801031e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010322:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8010326:	6a3b      	ldr	r3, [r7, #32]
 8010328:	3b01      	subs	r3, #1
 801032a:	429a      	cmp	r2, r3
 801032c:	d3ea      	bcc.n	8010304 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 801032e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010332:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	799b      	ldrb	r3, [r3, #6]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d017      	beq.n	801036c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 8010340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010342:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8010354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010356:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	789b      	ldrb	r3, [r3, #2]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d105      	bne.n	801036c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2200      	movs	r2, #0
 8010364:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 801036c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8010370:	2b01      	cmp	r3, #1
 8010372:	d002      	beq.n	801037a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	2201      	movs	r2, #1
 8010378:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801037a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 801037e:	4618      	mov	r0, r3
 8010380:	3758      	adds	r7, #88	; 0x58
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	66666667 	.word	0x66666667

0801038c <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 801038c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010390:	b0a2      	sub	sp, #136	; 0x88
 8010392:	af02      	add	r7, sp, #8
 8010394:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010396:	2300      	movs	r3, #0
 8010398:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	3318      	adds	r3, #24
 80103a0:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80103a8:	3308      	adds	r3, #8
 80103aa:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 80103ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103ae:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80103b2:	3318      	adds	r3, #24
 80103b4:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 80103b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103b8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80103bc:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 80103be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80103c4:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 80103c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103c8:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 80103ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103cc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80103d0:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 80103d2:	2300      	movs	r3, #0
 80103d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 80103d8:	2300      	movs	r3, #0
 80103da:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 80103e4:	2300      	movs	r3, #0
 80103e6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 80103ee:	f04f 0200 	mov.w	r2, #0
 80103f2:	f04f 0300 	mov.w	r3, #0
 80103f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 80103fa:	2300      	movs	r3, #0
 80103fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 8010400:	2300      	movs	r3, #0
 8010402:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 8010408:	2300      	movs	r3, #0
 801040a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 801040c:	2300      	movs	r3, #0
 801040e:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 8010410:	2300      	movs	r3, #0
 8010412:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 8010416:	2300      	movs	r3, #0
 8010418:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 801041c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801041e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8010422:	2b01      	cmp	r3, #1
 8010424:	d108      	bne.n	8010438 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8010426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010428:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801042c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8010430:	2b01      	cmp	r3, #1
 8010432:	d101      	bne.n	8010438 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 8010434:	2301      	movs	r3, #1
 8010436:	e000      	b.n	801043a <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 8010438:	2300      	movs	r3, #0
 801043a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 801043e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8010442:	4619      	mov	r1, r3
 8010444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010446:	f000 fc7d 	bl	8010d44 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 801044a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801044e:	2b00      	cmp	r3, #0
 8010450:	d003      	beq.n	801045a <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 8010452:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010456:	2b00      	cmp	r3, #0
 8010458:	d102      	bne.n	8010460 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 801045a:	2301      	movs	r3, #1
 801045c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 8010460:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010462:	f000 fb15 	bl	8010a90 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8010466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00a      	beq.n	8010484 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 801046e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010476:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 801047a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801047c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8010480:	429a      	cmp	r2, r3
 8010482:	d901      	bls.n	8010488 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 8010484:	2301      	movs	r3, #1
 8010486:	e000      	b.n	801048a <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 8010488:	2300      	movs	r3, #0
 801048a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 801048e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010492:	2b00      	cmp	r3, #0
 8010494:	d006      	beq.n	80104a4 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 8010496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010498:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 801049c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d101      	bne.n	80104a8 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 80104a4:	2301      	movs	r3, #1
 80104a6:	e000      	b.n	80104aa <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 80104a8:	2300      	movs	r3, #0
 80104aa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 80104ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104b0:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d10e      	bne.n	80104d4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 80104b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00a      	beq.n	80104d4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 80104be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104c0:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 80104c4:	2b09      	cmp	r3, #9
 80104c6:	d105      	bne.n	80104d4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 80104c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 80104d0:	2301      	movs	r3, #1
 80104d2:	e000      	b.n	80104d6 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 80104d4:	2300      	movs	r3, #0
	run_smudge_detection =
 80104d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 80104da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104dc:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 80104e0:	2b09      	cmp	r3, #9
 80104e2:	f000 80a6 	beq.w	8010632 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 80104e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104e8:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	f040 80a1 	bne.w	8010632 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 80104f0:	2302      	movs	r3, #2
 80104f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 80104f6:	2300      	movs	r3, #0
 80104f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80104fc:	e02d      	b.n	801055a <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 80104fe:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8010502:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010504:	234c      	movs	r3, #76	; 0x4c
 8010506:	fb01 f303 	mul.w	r3, r1, r3
 801050a:	4413      	add	r3, r2
 801050c:	335e      	adds	r3, #94	; 0x5e
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	2b09      	cmp	r3, #9
 8010512:	d11d      	bne.n	8010550 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 8010514:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8010518:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801051a:	234c      	movs	r3, #76	; 0x4c
 801051c:	fb01 f303 	mul.w	r3, r1, r3
 8010520:	4413      	add	r3, r2
 8010522:	335a      	adds	r3, #90	; 0x5a
 8010524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010528:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 801052a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801052c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 801052e:	429a      	cmp	r2, r3
 8010530:	dc03      	bgt.n	801053a <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 8010532:	2300      	movs	r3, #0
 8010534:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010538:	e00a      	b.n	8010550 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 801053a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801053e:	2b02      	cmp	r3, #2
 8010540:	d106      	bne.n	8010550 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 8010542:	2301      	movs	r3, #1
 8010544:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 8010548:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801054c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 8010550:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010554:	3301      	adds	r3, #1
 8010556:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801055a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801055c:	7c9a      	ldrb	r2, [r3, #18]
 801055e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010562:	4293      	cmp	r3, r2
 8010564:	d3cb      	bcc.n	80104fe <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 8010566:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801056a:	2b02      	cmp	r3, #2
 801056c:	d102      	bne.n	8010574 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 801056e:	2300      	movs	r3, #0
 8010570:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 8010574:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 8010578:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801057a:	234c      	movs	r3, #76	; 0x4c
 801057c:	fb01 f303 	mul.w	r3, r1, r3
 8010580:	4413      	add	r3, r2
 8010582:	3348      	adds	r3, #72	; 0x48
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 8010588:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801058c:	2b01      	cmp	r3, #1
 801058e:	d150      	bne.n	8010632 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 8010590:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010592:	2200      	movs	r2, #0
 8010594:	469a      	mov	sl, r3
 8010596:	4693      	mov	fp, r2
 8010598:	4652      	mov	r2, sl
 801059a:	465b      	mov	r3, fp
 801059c:	f04f 0000 	mov.w	r0, #0
 80105a0:	f04f 0100 	mov.w	r1, #0
 80105a4:	0159      	lsls	r1, r3, #5
 80105a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80105aa:	0150      	lsls	r0, r2, #5
 80105ac:	4602      	mov	r2, r0
 80105ae:	460b      	mov	r3, r1
 80105b0:	ebb2 040a 	subs.w	r4, r2, sl
 80105b4:	eb63 050b 	sbc.w	r5, r3, fp
 80105b8:	f04f 0200 	mov.w	r2, #0
 80105bc:	f04f 0300 	mov.w	r3, #0
 80105c0:	00ab      	lsls	r3, r5, #2
 80105c2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80105c6:	00a2      	lsls	r2, r4, #2
 80105c8:	4614      	mov	r4, r2
 80105ca:	461d      	mov	r5, r3
 80105cc:	eb14 080a 	adds.w	r8, r4, sl
 80105d0:	eb45 090b 	adc.w	r9, r5, fp
 80105d4:	f04f 0200 	mov.w	r2, #0
 80105d8:	f04f 0300 	mov.w	r3, #0
 80105dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80105e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80105e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80105e8:	4690      	mov	r8, r2
 80105ea:	4699      	mov	r9, r3
 80105ec:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 80105f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80105f4:	f04f 0200 	mov.w	r2, #0
 80105f8:	f04f 0300 	mov.w	r3, #0
 80105fc:	024b      	lsls	r3, r1, #9
 80105fe:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8010602:	0242      	lsls	r2, r0, #9
 8010604:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8010608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801060c:	2200      	movs	r2, #0
 801060e:	61bb      	str	r3, [r7, #24]
 8010610:	61fa      	str	r2, [r7, #28]
 8010612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010616:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801061a:	4621      	mov	r1, r4
 801061c:	428a      	cmp	r2, r1
 801061e:	4629      	mov	r1, r5
 8010620:	418b      	sbcs	r3, r1
 8010622:	d203      	bcs.n	801062c <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 8010624:	2301      	movs	r3, #1
 8010626:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801062a:	e002      	b.n	8010632 <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 8010632:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 810b 	beq.w	8010852 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 801063c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801063e:	2200      	movs	r2, #0
 8010640:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 8010642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010644:	f7ff fb80 	bl	800fd48 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 8010648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801064a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801064e:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 8010650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 8010656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010658:	009b      	lsls	r3, r3, #2
 801065a:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 801065c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801065e:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 8010664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	1ad2      	subs	r2, r2, r3
 801066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066c:	4413      	add	r3, r2
 801066e:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 8010670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010672:	2b00      	cmp	r3, #0
 8010674:	da02      	bge.n	801067c <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 8010676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010678:	425b      	negs	r3, r3
 801067a:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 801067c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801067e:	699b      	ldr	r3, [r3, #24]
 8010680:	461a      	mov	r2, r3
 8010682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010684:	4293      	cmp	r3, r2
 8010686:	dd0c      	ble.n	80106a2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 8010688:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 801068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 801068c:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 801068e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010690:	429a      	cmp	r2, r3
 8010692:	da03      	bge.n	801069c <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 8010694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010696:	2201      	movs	r2, #1
 8010698:	709a      	strb	r2, [r3, #2]
 801069a:	e002      	b.n	80106a2 <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 801069c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801069e:	2202      	movs	r2, #2
 80106a0:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 80106a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	1c5a      	adds	r2, r3, #1
 80106a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106aa:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 80106ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106b2:	695b      	ldr	r3, [r3, #20]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d906      	bls.n	80106c6 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 80106b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106ba:	2201      	movs	r2, #1
 80106bc:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 80106be:	2302      	movs	r3, #2
 80106c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80106c4:	e014      	b.n	80106f0 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 80106c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80106cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106ce:	2000      	movs	r0, #0
 80106d0:	6139      	str	r1, [r7, #16]
 80106d2:	6178      	str	r0, [r7, #20]
 80106d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80106d8:	4621      	mov	r1, r4
 80106da:	1851      	adds	r1, r2, r1
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	4629      	mov	r1, r5
 80106e0:	eb43 0101 	adc.w	r1, r3, r1
 80106e4:	60f9      	str	r1, [r7, #12]
 80106e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80106ec:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 80106f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d202      	bcs.n	8010702 <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 80106fc:	2301      	movs	r3, #1
 80106fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 8010702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010704:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2200      	movs	r2, #0
 801070e:	603b      	str	r3, [r7, #0]
 8010710:	607a      	str	r2, [r7, #4]
 8010712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010716:	f7f0 fa6f 	bl	8000bf8 <__aeabi_uldivmod>
 801071a:	4602      	mov	r2, r0
 801071c:	460b      	mov	r3, r1
		xtalk_offset_out =
 801071e:	4613      	mov	r3, r2
 8010720:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 8010722:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010726:	1ad2      	subs	r2, r2, r3
 8010728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801072a:	4413      	add	r3, r2
 801072c:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 801072e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010730:	2b00      	cmp	r3, #0
 8010732:	da02      	bge.n	801073a <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 8010734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010736:	425b      	negs	r3, r3
 8010738:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 801073a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801073e:	2b00      	cmp	r3, #0
 8010740:	d112      	bne.n	8010768 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 8010742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010744:	69db      	ldr	r3, [r3, #28]
 8010746:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8010748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801074a:	4293      	cmp	r3, r2
 801074c:	db0c      	blt.n	8010768 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 801074e:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 8010750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 8010752:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 8010754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010756:	429a      	cmp	r2, r3
 8010758:	da03      	bge.n	8010762 <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 801075a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801075c:	2201      	movs	r2, #1
 801075e:	70da      	strb	r2, [r3, #3]
 8010760:	e002      	b.n	8010768 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 8010762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010764:	2202      	movs	r2, #2
 8010766:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 8010768:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801076c:	2b00      	cmp	r3, #0
 801076e:	d108      	bne.n	8010782 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 8010770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010772:	69db      	ldr	r3, [r3, #28]
 8010774:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8010776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010778:	4293      	cmp	r3, r2
 801077a:	da02      	bge.n	8010782 <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 801077c:	2302      	movs	r3, #2
 801077e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 8010782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010784:	2200      	movs	r2, #0
 8010786:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8010788:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801078c:	2b00      	cmp	r3, #0
 801078e:	d112      	bne.n	80107b6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 8010790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010792:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 8010794:	2b00      	cmp	r3, #0
 8010796:	d00e      	beq.n	80107b6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 8010798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801079a:	6a1b      	ldr	r3, [r3, #32]
 801079c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80107a0:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 80107a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d905      	bls.n	80107b6 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 80107aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107ac:	2201      	movs	r2, #1
 80107ae:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 80107b0:	2302      	movs	r3, #2
 80107b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 80107b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107b8:	7c1b      	ldrb	r3, [r3, #16]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d007      	beq.n	80107ce <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 80107be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107c0:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 80107c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d902      	bls.n	80107ce <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 80107c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 80107ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107d0:	7c1b      	ldrb	r3, [r3, #16]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d107      	bne.n	80107e6 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 80107d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107d8:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 80107da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80107dc:	429a      	cmp	r2, r3
 80107de:	d202      	bcs.n	80107e6 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 80107e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 80107e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107e8:	089b      	lsrs	r3, r3, #2
 80107ea:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 80107ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80107f2:	d301      	bcc.n	80107f8 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 80107f4:	4b3e      	ldr	r3, [pc, #248]	; (80108f0 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 80107f6:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 80107f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10d      	bne.n	801081c <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 8010800:	2300      	movs	r3, #0
 8010802:	9301      	str	r3, [sp, #4]
 8010804:	2301      	movs	r3, #1
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801080a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801080c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801080e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010810:	f7ff fc00 	bl	8010014 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 8010814:	2302      	movs	r3, #2
 8010816:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801081a:	e009      	b.n	8010830 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 801081c:	2301      	movs	r3, #1
 801081e:	9301      	str	r3, [sp, #4]
 8010820:	2301      	movs	r3, #1
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010826:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010828:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801082a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801082c:	f7ff fbf2 	bl	8010014 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 8010830:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010834:	2b02      	cmp	r3, #2
 8010836:	d10c      	bne.n	8010852 <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 8010838:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801083a:	f04f 0200 	mov.w	r2, #0
 801083e:	f04f 0300 	mov.w	r3, #0
 8010842:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 8010846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010848:	2200      	movs	r2, #0
 801084a:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 801084c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801084e:	2200      	movs	r2, #0
 8010850:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 8010852:	2300      	movs	r3, #0
 8010854:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 8010858:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801085c:	2b01      	cmp	r3, #1
 801085e:	d140      	bne.n	80108e2 <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 8010860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010862:	691b      	ldr	r3, [r3, #16]
 8010864:	1c5a      	adds	r2, r3, #1
 8010866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010868:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 801086a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801086c:	691a      	ldr	r2, [r3, #16]
 801086e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010872:	429a      	cmp	r2, r3
 8010874:	d202      	bcs.n	801087c <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 8010876:	2301      	movs	r3, #1
 8010878:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 801087c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801087e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010880:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 8010882:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010886:	2b00      	cmp	r3, #0
 8010888:	d110      	bne.n	80108ac <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 801088a:	2300      	movs	r3, #0
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	2300      	movs	r3, #0
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010896:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801089a:	f7ff fbbb 	bl	8010014 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 801089e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108a0:	2202      	movs	r2, #2
 80108a2:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 80108a4:	2302      	movs	r3, #2
 80108a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80108aa:	e009      	b.n	80108c0 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 80108ac:	2301      	movs	r3, #1
 80108ae:	9301      	str	r3, [sp, #4]
 80108b0:	2300      	movs	r3, #0
 80108b2:	9300      	str	r3, [sp, #0]
 80108b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80108b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80108ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108bc:	f7ff fbaa 	bl	8010014 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 80108c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	d10c      	bne.n	80108e2 <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 80108c8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80108ca:	f04f 0200 	mov.w	r2, #0
 80108ce:	f04f 0300 	mov.w	r3, #0
 80108d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 80108d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108d8:	2200      	movs	r2, #0
 80108da:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 80108dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108de:	2200      	movs	r2, #0
 80108e0:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80108e2:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3780      	adds	r7, #128	; 0x80
 80108ea:	46bd      	mov	sp, r7
 80108ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108f0:	0003ffff 	.word	0x0003ffff

080108f4 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b086      	sub	sp, #24
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80108fc:	2300      	movs	r3, #0
 80108fe:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3318      	adds	r3, #24
 8010904:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801090c:	3308      	adds	r3, #8
 801090e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010916:	2201      	movs	r2, #1
 8010918:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010922:	2201      	movs	r2, #1
 8010924:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801092e:	2200      	movs	r2, #0
 8010930:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801093e:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010948:	461a      	mov	r2, r3
 801094a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801094e:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010958:	461a      	mov	r2, r3
 801095a:	2300      	movs	r3, #0
 801095c:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010966:	2200      	movs	r2, #0
 8010968:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010972:	461a      	mov	r2, r3
 8010974:	23c8      	movs	r3, #200	; 0xc8
 8010976:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010980:	461a      	mov	r2, r3
 8010982:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8010986:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010990:	461a      	mov	r2, r3
 8010992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010996:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109a0:	461a      	mov	r2, r3
 80109a2:	4b3a      	ldr	r3, [pc, #232]	; (8010a8c <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 80109a4:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ae:	461a      	mov	r2, r3
 80109b0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80109b4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109be:	2200      	movs	r2, #0
 80109c0:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109dc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109e6:	2200      	movs	r2, #0
 80109e8:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109f2:	461a      	mov	r2, r3
 80109f4:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 80109f8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a02:	461a      	mov	r2, r3
 8010a04:	230a      	movs	r3, #10
 8010a06:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a10:	461a      	mov	r2, r3
 8010a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a16:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a20:	f44f 7261 	mov.w	r2, #900	; 0x384
 8010a24:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a2e:	461a      	mov	r2, r3
 8010a30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010a34:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a3e:	461a      	mov	r2, r3
 8010a40:	2300      	movs	r3, #0
 8010a42:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8010a5a:	3310      	adds	r3, #16
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	f04f 0200 	mov.w	r2, #0
 8010a62:	f04f 0300 	mov.w	r3, #0
 8010a66:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a70:	461a      	mov	r2, r3
 8010a72:	2300      	movs	r3, #0
 8010a74:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f000 f809 	bl	8010a90 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 8010a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3718      	adds	r7, #24
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	000ff800 	.word	0x000ff800

08010a90 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b085      	sub	sp, #20
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010aa2:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	2200      	movs	r2, #0
 8010aae:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	2200      	movs	r2, #0
 8010acc:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	2200      	movs	r2, #0
 8010ade:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 8010ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3714      	adds	r7, #20
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010af8:	2300      	movs	r3, #0
 8010afa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	3318      	adds	r3, #24
 8010b00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b08:	461a      	mov	r2, r3
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b16:	2200      	movs	r2, #0
 8010b18:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b22:	2200      	movs	r2, #0
 8010b24:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8010b2e:	3308      	adds	r3, #8
 8010b30:	2218      	movs	r2, #24
 8010b32:	2100      	movs	r1, #0
 8010b34:	4618      	mov	r0, r3
 8010b36:	f00e faef 	bl	801f118 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 8010b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}

08010b46 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8010b46:	b480      	push	{r7}
 8010b48:	b085      	sub	sp, #20
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	3318      	adds	r3, #24
 8010b56:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b5e:	2203      	movs	r2, #3
 8010b60:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b76:	2200      	movs	r2, #0
 8010b78:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b82:	2200      	movs	r2, #0
 8010b84:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 8010bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr

08010bd6 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	b085      	sub	sp, #20
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010bde:	2300      	movs	r3, #0
 8010be0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	3318      	adds	r3, #24
 8010be6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bee:	22ff      	movs	r2, #255	; 0xff
 8010bf0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c06:	461a      	mov	r2, r3
 8010c08:	2300      	movs	r3, #0
 8010c0a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c14:	2200      	movs	r2, #0
 8010c16:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c20:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d007      	beq.n	8010c38 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c2e:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c3e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d007      	beq.n	8010c56 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c4c:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 8010c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b087      	sub	sp, #28
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	60f8      	str	r0, [r7, #12]
 8010c76:	60b9      	str	r1, [r7, #8]
 8010c78:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2201      	movs	r2, #1
 8010c82:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	229b      	movs	r2, #155	; 0x9b
 8010c8e:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 8010c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	371c      	adds	r7, #28
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b085      	sub	sp, #20
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	3318      	adds	r3, #24
 8010cac:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cbe:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cce:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 8010cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8010cea:	f003 0303 	and.w	r3, r3, #3
 8010cee:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cf6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8010cfe:	4413      	add	r3, r2
 8010d00:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d16:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d20:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d2a:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 8010d34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3714      	adds	r7, #20
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	3318      	adds	r3, #24
 8010d52:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010d54:	2300      	movs	r3, #0
 8010d56:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010d62:	2b07      	cmp	r3, #7
 8010d64:	bf0c      	ite	eq
 8010d66:	2301      	moveq	r3, #1
 8010d68:	2300      	movne	r3, #0
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 8010d6e:	2300      	movs	r3, #0
 8010d70:	75fb      	strb	r3, [r7, #23]
 8010d72:	e019      	b.n	8010da8 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 8010d74:	7df9      	ldrb	r1, [r7, #23]
 8010d76:	7bbb      	ldrb	r3, [r7, #14]
 8010d78:	6938      	ldr	r0, [r7, #16]
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	0052      	lsls	r2, r2, #1
 8010d7e:	441a      	add	r2, r3
 8010d80:	0153      	lsls	r3, r2, #5
 8010d82:	461a      	mov	r2, r3
 8010d84:	460b      	mov	r3, r1
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	440b      	add	r3, r1
 8010d8a:	019b      	lsls	r3, r3, #6
 8010d8c:	4413      	add	r3, r2
 8010d8e:	4403      	add	r3, r0
 8010d90:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8010d94:	3314      	adds	r3, #20
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	dd02      	ble.n	8010da2 <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 8010d9c:	7dbb      	ldrb	r3, [r7, #22]
 8010d9e:	3301      	adds	r3, #1
 8010da0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 8010da2:	7dfb      	ldrb	r3, [r7, #23]
 8010da4:	3301      	adds	r3, #1
 8010da6:	75fb      	strb	r3, [r7, #23]
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
 8010daa:	2b05      	cmp	r3, #5
 8010dac:	d9e2      	bls.n	8010d74 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	7dba      	ldrb	r2, [r7, #22]
 8010db2:	701a      	strb	r2, [r3, #0]

	return status;
 8010db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	371c      	adds	r7, #28
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	4603      	mov	r3, r0
 8010dcc:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 8010dd2:	88fb      	ldrh	r3, [r7, #6]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d005      	beq.n	8010de4 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8010dd8:	88fb      	ldrh	r3, [r7, #6]
 8010dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010dde:	fb92 f3f3 	sdiv	r3, r2, r3
 8010de2:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 8010de4:	68fb      	ldr	r3, [r7, #12]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr

08010df2 <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 8010df2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010df6:	b089      	sub	sp, #36	; 0x24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	607a      	str	r2, [r7, #4]
 8010e00:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 8010e02:	f04f 0200 	mov.w	r2, #0
 8010e06:	f04f 0300 	mov.w	r3, #0
 8010e0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68fa      	ldr	r2, [r7, #12]
 8010e16:	fb02 f303 	mul.w	r3, r2, r3
 8010e1a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	0b1b      	lsrs	r3, r3, #12
 8010e20:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	2200      	movs	r2, #0
 8010e26:	469a      	mov	sl, r3
 8010e28:	4693      	mov	fp, r2
 8010e2a:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	68ba      	ldr	r2, [r7, #8]
 8010e32:	fb02 f303 	mul.w	r3, r2, r3
 8010e36:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	091b      	lsrs	r3, r3, #4
 8010e3c:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	2200      	movs	r2, #0
 8010e42:	4698      	mov	r8, r3
 8010e44:	4691      	mov	r9, r2
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	fb08 f203 	mul.w	r2, r8, r3
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	fb09 f303 	mul.w	r3, r9, r3
 8010e52:	4413      	add	r3, r2
 8010e54:	69ba      	ldr	r2, [r7, #24]
 8010e56:	fba2 4508 	umull	r4, r5, r2, r8
 8010e5a:	442b      	add	r3, r5
 8010e5c:	461d      	mov	r5, r3
 8010e5e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8010e62:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 8010e66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010e6a:	f04f 0200 	mov.w	r2, #0
 8010e6e:	f04f 0300 	mov.w	r3, #0
 8010e72:	0b02      	lsrs	r2, r0, #12
 8010e74:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8010e78:	0b0b      	lsrs	r3, r1, #12
 8010e7a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 8010e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d305      	bcc.n	8010e92 <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 8010e86:	f04f 32ff 	mov.w	r2, #4294967295
 8010e8a:	f04f 0300 	mov.w	r3, #0
 8010e8e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 8010e92:	69bb      	ldr	r3, [r7, #24]
 8010e94:	617b      	str	r3, [r7, #20]

	return duration_us;
 8010e96:	697b      	ldr	r3, [r7, #20]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3724      	adds	r7, #36	; 0x24
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010ea2:	4770      	bx	lr

08010ea4 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 8010ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ea8:	b096      	sub	sp, #88	; 0x58
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010eae:	460b      	mov	r3, r1
 8010eb0:	627a      	str	r2, [r7, #36]	; 0x24
 8010eb2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 8010eb4:	f04f 0200 	mov.w	r2, #0
 8010eb8:	f04f 0300 	mov.w	r3, #0
 8010ebc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 8010ec0:	f04f 0200 	mov.w	r2, #0
 8010ec4:	f04f 0300 	mov.w	r3, #0
 8010ec8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 8010ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed2:	17da      	asrs	r2, r3, #31
 8010ed4:	469a      	mov	sl, r3
 8010ed6:	4693      	mov	fp, r2
 8010ed8:	4652      	mov	r2, sl
 8010eda:	465b      	mov	r3, fp
 8010edc:	f04f 0000 	mov.w	r0, #0
 8010ee0:	f04f 0100 	mov.w	r1, #0
 8010ee4:	0159      	lsls	r1, r3, #5
 8010ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010eea:	0150      	lsls	r0, r2, #5
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8010ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8010ef8:	f04f 0200 	mov.w	r2, #0
 8010efc:	f04f 0300 	mov.w	r3, #0
 8010f00:	00ab      	lsls	r3, r5, #2
 8010f02:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010f06:	00a2      	lsls	r2, r4, #2
 8010f08:	4614      	mov	r4, r2
 8010f0a:	461d      	mov	r5, r3
 8010f0c:	eb14 080a 	adds.w	r8, r4, sl
 8010f10:	eb45 090b 	adc.w	r9, r5, fp
 8010f14:	f04f 0200 	mov.w	r2, #0
 8010f18:	f04f 0300 	mov.w	r3, #0
 8010f1c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8010f20:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 8010f24:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 8010f28:	4690      	mov	r8, r2
 8010f2a:	4699      	mov	r9, r3
 8010f2c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 8010f30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d00d      	beq.n	8010f52 <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 8010f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f38:	2200      	movs	r2, #0
 8010f3a:	61bb      	str	r3, [r7, #24]
 8010f3c:	61fa      	str	r2, [r7, #28]
 8010f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010f42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010f46:	f7ef fe57 	bl	8000bf8 <__aeabi_uldivmod>
 8010f4a:	4602      	mov	r2, r0
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 8010f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d02a      	beq.n	8010fae <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8010f58:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010f5c:	f04f 0200 	mov.w	r2, #0
 8010f60:	f04f 0300 	mov.w	r3, #0
 8010f64:	02cb      	lsls	r3, r1, #11
 8010f66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010f6a:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 8010f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f6e:	0849      	lsrs	r1, r1, #1
 8010f70:	2000      	movs	r0, #0
 8010f72:	6139      	str	r1, [r7, #16]
 8010f74:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8010f76:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010f7a:	4621      	mov	r1, r4
 8010f7c:	1851      	adds	r1, r2, r1
 8010f7e:	6039      	str	r1, [r7, #0]
 8010f80:	4629      	mov	r1, r5
 8010f82:	eb43 0101 	adc.w	r1, r3, r1
 8010f86:	6079      	str	r1, [r7, #4]
 8010f88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010f8c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 8010f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f92:	2200      	movs	r2, #0
 8010f94:	60bb      	str	r3, [r7, #8]
 8010f96:	60fa      	str	r2, [r7, #12]
 8010f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010fa0:	f7ef fe2a 	bl	8000bf8 <__aeabi_uldivmod>
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	460b      	mov	r3, r1
 8010fa8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8010fac:	e00b      	b.n	8010fc6 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 8010fae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010fb2:	f04f 0200 	mov.w	r2, #0
 8010fb6:	f04f 0300 	mov.w	r3, #0
 8010fba:	02cb      	lsls	r3, r1, #11
 8010fbc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010fc0:	02c2      	lsls	r2, r0, #11
 8010fc2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 8010fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fc8:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 8010fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3758      	adds	r7, #88	; 0x58
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010fd6 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b085      	sub	sp, #20
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8010fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010fe6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 8010fe8:	e002      	b.n	8010ff0 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	089b      	lsrs	r3, r3, #2
 8010fee:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8010ff0:	68ba      	ldr	r2, [r7, #8]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d8f8      	bhi.n	8010fea <VL53L1_isqrt+0x14>

	while (bit != 0) {
 8010ff8:	e017      	b.n	801102a <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 8010ffa:	68fa      	ldr	r2, [r7, #12]
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	4413      	add	r3, r2
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	429a      	cmp	r2, r3
 8011004:	d30b      	bcc.n	801101e <VL53L1_isqrt+0x48>
			num -= res + bit;
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	4413      	add	r3, r2
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	085b      	lsrs	r3, r3, #1
 8011016:	68ba      	ldr	r2, [r7, #8]
 8011018:	4413      	add	r3, r2
 801101a:	60fb      	str	r3, [r7, #12]
 801101c:	e002      	b.n	8011024 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	085b      	lsrs	r3, r3, #1
 8011022:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	089b      	lsrs	r3, r3, #2
 8011028:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1e4      	bne.n	8010ffa <VL53L1_isqrt+0x24>
	}

	return res;
 8011030:	68fb      	ldr	r3, [r7, #12]
}
 8011032:	4618      	mov	r0, r3
 8011034:	3714      	adds	r7, #20
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 8011046:	2300      	movs	r3, #0
 8011048:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011054:	4618      	mov	r0, r3
 8011056:	f000 faa5 	bl	80115a4 <VL53L1_decode_vcsel_period>
 801105a:	4603      	mov	r3, r0
	period = 2048 *
 801105c:	02db      	lsls	r3, r3, #11
 801105e:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801106a:	461a      	mov	r2, r3
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	4413      	add	r3, r2
 8011070:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011078:	02db      	lsls	r3, r3, #11
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	4413      	add	r3, r2
 801107e:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011086:	02db      	lsls	r3, r3, #11
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d009      	beq.n	80110a8 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	68ba      	ldr	r2, [r7, #8]
 8011098:	fbb3 f2f2 	udiv	r2, r3, r2
 801109c:	68b9      	ldr	r1, [r7, #8]
 801109e:	fb01 f202 	mul.w	r2, r1, r2
 80110a2:	1a9b      	subs	r3, r3, r2
 80110a4:	60fb      	str	r3, [r7, #12]
 80110a6:	e001      	b.n	80110ac <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 80110a8:	2300      	movs	r3, #0
 80110aa:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 80110b6:	bf00      	nop
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
 80110c6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 80110c8:	2300      	movs	r3, #0
 80110ca:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 80110cc:	2300      	movs	r3, #0
 80110ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 80110d0:	6838      	ldr	r0, [r7, #0]
 80110d2:	f000 fb90 	bl	80117f6 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff ff7a 	bl	8010fd6 <VL53L1_isqrt>
 80110e2:	4603      	mov	r3, r0
	VL53L1_p_032  =
 80110e4:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	fb02 f303 	mul.w	r3, r2, r3
 80110ee:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	3307      	adds	r3, #7
 80110f4:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	111b      	asrs	r3, r3, #4
 80110fa:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	4413      	add	r3, r2
 8011106:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	2200      	movs	r2, #0
 801110c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	2200      	movs	r2, #0
 8011114:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8011118:	2300      	movs	r3, #0
 801111a:	73fb      	strb	r3, [r7, #15]
 801111c:	e01e      	b.n	801115c <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 801111e:	7bfa      	ldrb	r2, [r7, #15]
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	3206      	adds	r2, #6
 8011124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011128:	68ba      	ldr	r2, [r7, #8]
 801112a:	429a      	cmp	r2, r3
 801112c:	dd13      	ble.n	8011156 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011134:	7bf9      	ldrb	r1, [r7, #15]
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	3106      	adds	r1, #6
 801113a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801113e:	441a      	add	r2, r3
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 801114c:	3301      	adds	r3, #1
 801114e:	b2da      	uxtb	r2, r3
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 8011156:	7bfb      	ldrb	r3, [r7, #15]
 8011158:	3301      	adds	r3, #1
 801115a:	73fb      	strb	r3, [r7, #15]
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	7a9b      	ldrb	r3, [r3, #10]
 8011160:	7bfa      	ldrb	r2, [r7, #15]
 8011162:	429a      	cmp	r2, r3
 8011164:	d3db      	bcc.n	801111e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 801116c:	2b00      	cmp	r3, #0
 801116e:	d01c      	beq.n	80111aa <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 8011182:	683a      	ldr	r2, [r7, #0]
 8011184:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 8011188:	0852      	lsrs	r2, r2, #1
 801118a:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 801118c:	441a      	add	r2, r3
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 801119a:	683a      	ldr	r2, [r7, #0]
 801119c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 80111a0:	fb93 f2f2 	sdiv	r2, r3, r2
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 80111aa:	bf00      	nop
 80111ac:	3710      	adds	r7, #16
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 80111b2:	b480      	push	{r7}
 80111b4:	b085      	sub	sp, #20
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 80111be:	2300      	movs	r3, #0
 80111c0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	7b1b      	ldrb	r3, [r3, #12]
 80111ca:	f003 0307 	and.w	r3, r3, #7
 80111ce:	2b07      	cmp	r3, #7
 80111d0:	d13a      	bne.n	8011248 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 80111d6:	2300      	movs	r3, #0
 80111d8:	73bb      	strb	r3, [r7, #14]
 80111da:	e01f      	b.n	801121c <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 80111dc:	7bbb      	ldrb	r3, [r7, #14]
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	4413      	add	r3, r2
 80111e2:	7b1b      	ldrb	r3, [r3, #12]
 80111e4:	f003 0307 	and.w	r3, r3, #7
 80111e8:	2b07      	cmp	r3, #7
 80111ea:	d014      	beq.n	8011216 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 80111ec:	7bba      	ldrb	r2, [r7, #14]
 80111ee:	7b7b      	ldrb	r3, [r7, #13]
 80111f0:	6879      	ldr	r1, [r7, #4]
 80111f2:	440a      	add	r2, r1
 80111f4:	7b11      	ldrb	r1, [r2, #12]
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	4413      	add	r3, r2
 80111fa:	460a      	mov	r2, r1
 80111fc:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 80111fe:	7bba      	ldrb	r2, [r7, #14]
 8011200:	7b7b      	ldrb	r3, [r7, #13]
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	440a      	add	r2, r1
 8011206:	7c91      	ldrb	r1, [r2, #18]
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	4413      	add	r3, r2
 801120c:	460a      	mov	r2, r1
 801120e:	749a      	strb	r2, [r3, #18]
				i++;
 8011210:	7b7b      	ldrb	r3, [r7, #13]
 8011212:	3301      	adds	r3, #1
 8011214:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011216:	7bbb      	ldrb	r3, [r7, #14]
 8011218:	3301      	adds	r3, #1
 801121a:	73bb      	strb	r3, [r7, #14]
 801121c:	7bbb      	ldrb	r3, [r7, #14]
 801121e:	2b05      	cmp	r3, #5
 8011220:	d9dc      	bls.n	80111dc <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011222:	7b7b      	ldrb	r3, [r7, #13]
 8011224:	73bb      	strb	r3, [r7, #14]
 8011226:	e00c      	b.n	8011242 <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 8011228:	7bbb      	ldrb	r3, [r7, #14]
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	4413      	add	r3, r2
 801122e:	2210      	movs	r2, #16
 8011230:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 8011232:	7bbb      	ldrb	r3, [r7, #14]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	4413      	add	r3, r2
 8011238:	2200      	movs	r2, #0
 801123a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 801123c:	7bbb      	ldrb	r3, [r7, #14]
 801123e:	3301      	adds	r3, #1
 8011240:	73bb      	strb	r3, [r7, #14]
 8011242:	7bbb      	ldrb	r3, [r7, #14]
 8011244:	2b05      	cmp	r3, #5
 8011246:	d9ef      	bls.n	8011228 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	7adb      	ldrb	r3, [r3, #11]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d023      	beq.n	8011298 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	7adb      	ldrb	r3, [r3, #11]
 8011254:	73fb      	strb	r3, [r7, #15]
 8011256:	e00f      	b.n	8011278 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 8011258:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 801125a:	7bfb      	ldrb	r3, [r7, #15]
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	7ad2      	ldrb	r2, [r2, #11]
 8011260:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	3106      	adds	r1, #6
 8011266:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	3206      	adds	r2, #6
 801126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 8011272:	7bfb      	ldrb	r3, [r7, #15]
 8011274:	3301      	adds	r3, #1
 8011276:	73fb      	strb	r3, [r7, #15]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 801127c:	7bfa      	ldrb	r2, [r7, #15]
 801127e:	429a      	cmp	r2, r3
 8011280:	d3ea      	bcc.n	8011258 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	72da      	strb	r2, [r3, #11]
	}
}
 8011298:	bf00      	nop
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	4603      	mov	r3, r0
 80112ac:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 80112b2:	2300      	movs	r3, #0
 80112b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80112b6:	88fb      	ldrh	r3, [r7, #6]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7ff fd83 	bl	8010dc4 <VL53L1_calc_pll_period_us>
 80112be:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 80112c4:	f249 2257 	movw	r2, #37463	; 0x9257
 80112c8:	fb02 f303 	mul.w	r3, r2, r3
 80112cc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80112d4:	0c1b      	lsrs	r3, r3, #16
 80112d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 80112d8:	68bb      	ldr	r3, [r7, #8]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 80112e2:	b480      	push	{r7}
 80112e4:	b087      	sub	sp, #28
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 80112ec:	2300      	movs	r3, #0
 80112ee:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 80112f0:	2307      	movs	r3, #7
 80112f2:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 80112f4:	2300      	movs	r3, #0
 80112f6:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80112fe:	db03      	blt.n	8011308 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 8011300:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011304:	617b      	str	r3, [r7, #20]
 8011306:	e004      	b.n	8011312 <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	dd01      	ble.n	8011312 <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011318:	dd02      	ble.n	8011320 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 801131a:	2303      	movs	r3, #3
 801131c:	613b      	str	r3, [r7, #16]
 801131e:	e001      	b.n	8011324 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 8011320:	2307      	movs	r3, #7
 8011322:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d009      	beq.n	801133e <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 801132a:	697a      	ldr	r2, [r7, #20]
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	409a      	lsls	r2, r3
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	085b      	lsrs	r3, r3, #1
 8011334:	441a      	add	r2, r3
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	fbb2 f3f3 	udiv	r3, r2, r3
 801133c:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011344:	dd02      	ble.n	801134c <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	011b      	lsls	r3, r3, #4
 801134a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011352:	d302      	bcc.n	801135a <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 8011354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011358:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 801135e:	89fb      	ldrh	r3, [r7, #14]
}
 8011360:	4618      	mov	r0, r3
 8011362:	371c      	adds	r7, #28
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 801136c:	b480      	push	{r7}
 801136e:	b087      	sub	sp, #28
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	603b      	str	r3, [r7, #0]
 8011378:	4613      	mov	r3, r2
 801137a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 801137c:	2300      	movs	r3, #0
 801137e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 8011380:	2300      	movs	r3, #0
 8011382:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 8011384:	88fb      	ldrh	r3, [r7, #6]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d010      	beq.n	80113ac <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	021a      	lsls	r2, r3, #8
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	fa02 f303 	lsl.w	r3, r2, r3
 8011394:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 8011396:	88fb      	ldrh	r3, [r7, #6]
 8011398:	085b      	lsrs	r3, r3, #1
 801139a:	b29b      	uxth	r3, r3
 801139c:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 80113a2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 80113a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80113a8:	617b      	str	r3, [r7, #20]
 80113aa:	e004      	b.n	80113b6 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 80113ac:	68ba      	ldr	r2, [r7, #8]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	fa02 f303 	lsl.w	r3, r2, r3
 80113b4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 80113b6:	697a      	ldr	r2, [r7, #20]
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d901      	bls.n	80113c2 <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 80113c6:	8a7b      	ldrh	r3, [r7, #18]
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	371c      	adds	r7, #28
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr

080113d4 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 80113d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d8:	b093      	sub	sp, #76	; 0x4c
 80113da:	af00      	add	r7, sp, #0
 80113dc:	461e      	mov	r6, r3
 80113de:	4603      	mov	r3, r0
 80113e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80113e2:	460b      	mov	r3, r1
 80113e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80113e6:	4613      	mov	r3, r2
 80113e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80113ea:	4633      	mov	r3, r6
 80113ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 80113f4:	f04f 0200 	mov.w	r2, #0
 80113f8:	f04f 0300 	mov.w	r3, #0
 80113fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 8011400:	2300      	movs	r3, #0
 8011402:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 8011404:	2300      	movs	r3, #0
 8011406:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8011408:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801140a:	4618      	mov	r0, r3
 801140c:	f7ff fcda 	bl	8010dc4 <VL53L1_calc_pll_period_us>
 8011410:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 8011412:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011414:	2200      	movs	r2, #0
 8011416:	623b      	str	r3, [r7, #32]
 8011418:	627a      	str	r2, [r7, #36]	; 0x24
 801141a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801141c:	2200      	movs	r2, #0
 801141e:	61bb      	str	r3, [r7, #24]
 8011420:	61fa      	str	r2, [r7, #28]
 8011422:	6a3b      	ldr	r3, [r7, #32]
 8011424:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011428:	4602      	mov	r2, r0
 801142a:	1a9b      	subs	r3, r3, r2
 801142c:	613b      	str	r3, [r7, #16]
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	460a      	mov	r2, r1
 8011432:	eb63 0302 	sbc.w	r3, r3, r2
 8011436:	617b      	str	r3, [r7, #20]
 8011438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801143c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8011440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011442:	2200      	movs	r2, #0
 8011444:	469a      	mov	sl, r3
 8011446:	4693      	mov	fp, r2
 8011448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801144a:	fb0a f203 	mul.w	r2, sl, r3
 801144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011450:	fb0b f303 	mul.w	r3, fp, r3
 8011454:	4413      	add	r3, r2
 8011456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011458:	fba2 890a 	umull	r8, r9, r2, sl
 801145c:	444b      	add	r3, r9
 801145e:	4699      	mov	r9, r3
 8011460:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8011464:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8011468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801146c:	2b00      	cmp	r3, #0
 801146e:	da08      	bge.n	8011482 <VL53L1_range_maths+0xae>
 8011470:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011474:	1851      	adds	r1, r2, r1
 8011476:	60b9      	str	r1, [r7, #8]
 8011478:	f143 0300 	adc.w	r3, r3, #0
 801147c:	60fb      	str	r3, [r7, #12]
 801147e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011482:	f04f 0000 	mov.w	r0, #0
 8011486:	f04f 0100 	mov.w	r1, #0
 801148a:	0a50      	lsrs	r0, r2, #9
 801148c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8011490:	1259      	asrs	r1, r3, #9
 8011492:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8011496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011498:	f249 2257 	movw	r2, #37463	; 0x9257
 801149c:	fb03 f202 	mul.w	r2, r3, r2
 80114a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a2:	2100      	movs	r1, #0
 80114a4:	fb01 f303 	mul.w	r3, r1, r3
 80114a8:	4413      	add	r3, r2
 80114aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114ac:	f249 2157 	movw	r1, #37463	; 0x9257
 80114b0:	fba2 4501 	umull	r4, r5, r2, r1
 80114b4:	442b      	add	r3, r5
 80114b6:	461d      	mov	r5, r3
 80114b8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 80114bc:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 80114c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	da07      	bge.n	80114d8 <VL53L1_range_maths+0x104>
 80114c8:	4934      	ldr	r1, [pc, #208]	; (801159c <VL53L1_range_maths+0x1c8>)
 80114ca:	1851      	adds	r1, r2, r1
 80114cc:	6039      	str	r1, [r7, #0]
 80114ce:	f143 0300 	adc.w	r3, r3, #0
 80114d2:	607b      	str	r3, [r7, #4]
 80114d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114d8:	f04f 0000 	mov.w	r0, #0
 80114dc:	f04f 0100 	mov.w	r1, #0
 80114e0:	0d90      	lsrs	r0, r2, #22
 80114e2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 80114e6:	1599      	asrs	r1, r3, #22
 80114e8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 80114ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80114f0:	4413      	add	r3, r2
 80114f2:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 80114f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80114f8:	fb02 f303 	mul.w	r3, r2, r3
 80114fc:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 80114fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011504:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 8011506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011508:	2b00      	cmp	r3, #0
 801150a:	da01      	bge.n	8011510 <VL53L1_range_maths+0x13c>
 801150c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8011510:	12db      	asrs	r3, r3, #11
 8011512:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 8011514:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011518:	2b00      	cmp	r3, #0
 801151a:	d130      	bne.n	801157e <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 801151c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801151e:	4613      	mov	r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4413      	add	r3, r2
 8011524:	005b      	lsls	r3, r3, #1
 8011526:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 8011528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801152a:	2b00      	cmp	r3, #0
 801152c:	da00      	bge.n	8011530 <VL53L1_range_maths+0x15c>
 801152e:	3303      	adds	r3, #3
 8011530:	109b      	asrs	r3, r3, #2
 8011532:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 8011534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011536:	4b1a      	ldr	r3, [pc, #104]	; (80115a0 <VL53L1_range_maths+0x1cc>)
 8011538:	fb83 2301 	smull	r2, r3, r3, r1
 801153c:	109a      	asrs	r2, r3, #2
 801153e:	17cb      	asrs	r3, r1, #31
 8011540:	1ad2      	subs	r2, r2, r3
 8011542:	4613      	mov	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4413      	add	r3, r2
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	1aca      	subs	r2, r1, r3
 801154c:	2a04      	cmp	r2, #4
 801154e:	dc09      	bgt.n	8011564 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 8011550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011552:	4a13      	ldr	r2, [pc, #76]	; (80115a0 <VL53L1_range_maths+0x1cc>)
 8011554:	fb82 1203 	smull	r1, r2, r2, r3
 8011558:	1092      	asrs	r2, r2, #2
 801155a:	17db      	asrs	r3, r3, #31
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	b21b      	sxth	r3, r3
 8011560:	647b      	str	r3, [r7, #68]	; 0x44
 8011562:	e015      	b.n	8011590 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 8011564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011566:	4a0e      	ldr	r2, [pc, #56]	; (80115a0 <VL53L1_range_maths+0x1cc>)
 8011568:	fb82 1203 	smull	r1, r2, r2, r3
 801156c:	1092      	asrs	r2, r2, #2
 801156e:	17db      	asrs	r3, r3, #31
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	b29b      	uxth	r3, r3
 8011574:	3301      	adds	r3, #1
 8011576:	b29b      	uxth	r3, r3
 8011578:	b21b      	sxth	r3, r3
 801157a:	647b      	str	r3, [r7, #68]	; 0x44
 801157c:	e008      	b.n	8011590 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 801157e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011582:	2b01      	cmp	r3, #1
 8011584:	d104      	bne.n	8011590 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 8011586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011588:	0fda      	lsrs	r2, r3, #31
 801158a:	4413      	add	r3, r2
 801158c:	105b      	asrs	r3, r3, #1
 801158e:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 8011590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011592:	4618      	mov	r0, r3
 8011594:	374c      	adds	r7, #76	; 0x4c
 8011596:	46bd      	mov	sp, r7
 8011598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159c:	003fffff 	.word	0x003fffff
 80115a0:	66666667 	.word	0x66666667

080115a4 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b085      	sub	sp, #20
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	4603      	mov	r3, r0
 80115ac:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	3301      	adds	r3, #1
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	005b      	lsls	r3, r3, #1
 80115ba:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3714      	adds	r7, #20
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr

080115ca <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 80115ca:	b480      	push	{r7}
 80115cc:	b083      	sub	sp, #12
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
 80115d2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	781a      	ldrb	r2, [r3, #0]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	7a5a      	ldrb	r2, [r3, #9]
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685a      	ldr	r2, [r3, #4]
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	605a      	str	r2, [r3, #4]
}
 801163a:	bf00      	nop
 801163c:	370c      	adds	r7, #12
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr

08011646 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 8011646:	b480      	push	{r7}
 8011648:	b087      	sub	sp, #28
 801164a:	af00      	add	r7, sp, #0
 801164c:	60f8      	str	r0, [r7, #12]
 801164e:	460b      	mov	r3, r1
 8011650:	607a      	str	r2, [r7, #4]
 8011652:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2203      	movs	r2, #3
 801165c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2203      	movs	r2, #3
 8011662:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2218      	movs	r2, #24
 801167a:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 801167c:	897b      	ldrh	r3, [r7, #10]
 801167e:	b2da      	uxtb	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2200      	movs	r2, #0
 8011688:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2200      	movs	r2, #0
 801168e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2200      	movs	r2, #0
 80116a6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2200      	movs	r2, #0
 80116ae:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2200      	movs	r2, #0
 80116b6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2200      	movs	r2, #0
 80116be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2200      	movs	r2, #0
 80116de:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2200      	movs	r2, #0
 80116e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2200      	movs	r2, #0
 80116ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2200      	movs	r2, #0
 80116fe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2200      	movs	r2, #0
 801170e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2200      	movs	r2, #0
 8011716:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801171a:	2300      	movs	r3, #0
 801171c:	82fb      	strh	r3, [r7, #22]
 801171e:	e009      	b.n	8011734 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 8011720:	8afb      	ldrh	r3, [r7, #22]
 8011722:	8afa      	ldrh	r2, [r7, #22]
 8011724:	b2d1      	uxtb	r1, r2
 8011726:	687a      	ldr	r2, [r7, #4]
 8011728:	4413      	add	r3, r2
 801172a:	460a      	mov	r2, r1
 801172c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801172e:	8afb      	ldrh	r3, [r7, #22]
 8011730:	3301      	adds	r3, #1
 8011732:	82fb      	strh	r3, [r7, #22]
 8011734:	8afb      	ldrh	r3, [r7, #22]
 8011736:	2b05      	cmp	r3, #5
 8011738:	d9f2      	bls.n	8011720 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801173a:	2300      	movs	r3, #0
 801173c:	82fb      	strh	r3, [r7, #22]
 801173e:	e007      	b.n	8011750 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 8011740:	8afb      	ldrh	r3, [r7, #22]
 8011742:	687a      	ldr	r2, [r7, #4]
 8011744:	4413      	add	r3, r2
 8011746:	2201      	movs	r2, #1
 8011748:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 801174a:	8afb      	ldrh	r3, [r7, #22]
 801174c:	3301      	adds	r3, #1
 801174e:	82fb      	strh	r3, [r7, #22]
 8011750:	8afb      	ldrh	r3, [r7, #22]
 8011752:	2b05      	cmp	r3, #5
 8011754:	d9f4      	bls.n	8011740 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 8011756:	2300      	movs	r3, #0
 8011758:	82fb      	strh	r3, [r7, #22]
 801175a:	e013      	b.n	8011784 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 801175c:	8afa      	ldrh	r2, [r7, #22]
 801175e:	897b      	ldrh	r3, [r7, #10]
 8011760:	429a      	cmp	r2, r3
 8011762:	d206      	bcs.n	8011772 <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 8011764:	8afa      	ldrh	r2, [r7, #22]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	3206      	adds	r2, #6
 801176a:	68f9      	ldr	r1, [r7, #12]
 801176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011770:	e005      	b.n	801177e <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 8011772:	8afa      	ldrh	r2, [r7, #22]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	3206      	adds	r2, #6
 8011778:	2100      	movs	r1, #0
 801177a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 801177e:	8afb      	ldrh	r3, [r7, #22]
 8011780:	3301      	adds	r3, #1
 8011782:	82fb      	strh	r3, [r7, #22]
 8011784:	8afb      	ldrh	r3, [r7, #22]
 8011786:	2b17      	cmp	r3, #23
 8011788:	d9e8      	bls.n	801175c <VL53L1_init_histogram_bin_data_struct+0x116>


}
 801178a:	bf00      	nop
 801178c:	bf00      	nop
 801178e:	371c      	adds	r7, #28
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8011798:	b480      	push	{r7}
 801179a:	b085      	sub	sp, #20
 801179c:	af00      	add	r7, sp, #0
 801179e:	4603      	mov	r3, r0
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
 80117a4:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 80117a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	da10      	bge.n	80117d0 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80117ae:	7bfb      	ldrb	r3, [r7, #15]
 80117b0:	43db      	mvns	r3, r3
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	f003 0307 	and.w	r3, r3, #7
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	3308      	adds	r3, #8
 80117bc:	b2da      	uxtb	r2, r3
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80117c2:	7bfb      	ldrb	r3, [r7, #15]
 80117c4:	3b80      	subs	r3, #128	; 0x80
 80117c6:	10db      	asrs	r3, r3, #3
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80117ce:	e00c      	b.n	80117ea <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80117d0:	7bfb      	ldrb	r3, [r7, #15]
 80117d2:	f003 0307 	and.w	r3, r3, #7
 80117d6:	b2da      	uxtb	r2, r3
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80117dc:	7bfb      	ldrb	r3, [r7, #15]
 80117de:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80117e2:	10db      	asrs	r3, r3, #3
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	701a      	strb	r2, [r3, #0]
}
 80117ea:	bf00      	nop
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 80117f6:	b480      	push	{r7}
 80117f8:	b085      	sub	sp, #20
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 8011802:	2300      	movs	r3, #0
 8011804:	73fb      	strb	r3, [r7, #15]
 8011806:	e02c      	b.n	8011862 <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 8011808:	7bfb      	ldrb	r3, [r7, #15]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d009      	beq.n	8011822 <VL53L1_hist_find_min_max_bin_values+0x2c>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011814:	7bf9      	ldrb	r1, [r7, #15]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	3106      	adds	r1, #6
 801181a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801181e:	429a      	cmp	r2, r3
 8011820:	db07      	blt.n	8011832 <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 8011822:	7bfa      	ldrb	r2, [r7, #15]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	3206      	adds	r2, #6
 8011828:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 8011832:	7bfb      	ldrb	r3, [r7, #15]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d009      	beq.n	801184c <VL53L1_hist_find_min_max_bin_values+0x56>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801183e:	7bf9      	ldrb	r1, [r7, #15]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	3106      	adds	r1, #6
 8011844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011848:	429a      	cmp	r2, r3
 801184a:	dc07      	bgt.n	801185c <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 801184c:	7bfa      	ldrb	r2, [r7, #15]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	3206      	adds	r2, #6
 8011852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 801185c:	7bfb      	ldrb	r3, [r7, #15]
 801185e:	3301      	adds	r3, #1
 8011860:	73fb      	strb	r3, [r7, #15]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	7a9b      	ldrb	r3, [r3, #10]
 8011866:	7bfa      	ldrb	r2, [r7, #15]
 8011868:	429a      	cmp	r2, r3
 801186a:	d3cd      	bcc.n	8011808 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 801186c:	bf00      	nop
 801186e:	bf00      	nop
 8011870:	3714      	adds	r7, #20
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr

0801187a <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 801187a:	b480      	push	{r7}
 801187c:	b085      	sub	sp, #20
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 8011882:	2300      	movs	r3, #0
 8011884:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	7adb      	ldrb	r3, [r3, #11]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d03a      	beq.n	8011904 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80118a0:	2300      	movs	r3, #0
 80118a2:	73fb      	strb	r3, [r7, #15]
 80118a4:	e00e      	b.n	80118c4 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80118ac:	7bf9      	ldrb	r1, [r7, #15]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	3106      	adds	r1, #6
 80118b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80118b6:	441a      	add	r2, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80118be:	7bfb      	ldrb	r3, [r7, #15]
 80118c0:	3301      	adds	r3, #1
 80118c2:	73fb      	strb	r3, [r7, #15]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	7adb      	ldrb	r3, [r3, #11]
 80118c8:	7bfa      	ldrb	r2, [r7, #15]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d3eb      	bcc.n	80118a6 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	7ad2      	ldrb	r2, [r2, #11]
 80118e4:	0852      	lsrs	r2, r2, #1
 80118e6:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 80118e8:	441a      	add	r2, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 80118fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 8011904:	bf00      	nop
 8011906:	3714      	adds	r7, #20
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr

08011910 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 8011910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011914:	b0ca      	sub	sp, #296	; 0x128
 8011916:	af00      	add	r7, sp, #0
 8011918:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 801191c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8011920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011924:	4603      	mov	r3, r0
 8011926:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 801192a:	2300      	movs	r3, #0
 801192c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 8011930:	2300      	movs	r3, #0
 8011932:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 801193c:	2300      	movs	r3, #0
 801193e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 8011942:	f04f 0200 	mov.w	r2, #0
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 801194e:	2300      	movs	r3, #0
 8011950:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 8011954:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011958:	2300      	movs	r3, #0
 801195a:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 801195c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011960:	2300      	movs	r3, #0
 8011962:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 8011964:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011968:	2300      	movs	r3, #0
 801196a:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 801196c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011970:	2300      	movs	r3, #0
 8011972:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 8011974:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011978:	2300      	movs	r3, #0
 801197a:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 801197c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011980:	2300      	movs	r3, #0
 8011982:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 8011984:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011988:	2300      	movs	r3, #0
 801198a:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 801198c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011990:	2300      	movs	r3, #0
 8011992:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 8011994:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011998:	2300      	movs	r3, #0
 801199a:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 801199c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f000 80e1 	beq.w	8011b6c <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 80119aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f000 80da 	beq.w	8011b6c <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 80119b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff f9ff 	bl	8010dc4 <VL53L1_calc_pll_period_us>
 80119c6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 80119ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119d2:	3301      	adds	r3, #1
 80119d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 80119d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80119dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119e0:	2110      	movs	r1, #16
 80119e2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80119e6:	f7ff fa04 	bl	8010df2 <VL53L1_duration_maths>
 80119ea:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 80119ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80119f0:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 80119f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119f6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80119fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	4619      	mov	r1, r3
 8011a02:	4610      	mov	r0, r2
 8011a04:	f7ff fc6d 	bl	80112e2 <VL53L1_rate_maths>
 8011a08:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 8011a0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011a0e:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 8011a10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011a14:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 8011a18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011a1c:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 8011a20:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	461a      	mov	r2, r3
 8011a28:	f7ff fa3c 	bl	8010ea4 <VL53L1_events_per_spad_maths>
 8011a2c:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 8011a2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011a32:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 8011a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a38:	8adb      	ldrh	r3, [r3, #22]
 8011a3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011a3e:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 8011a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a44:	8adb      	ldrh	r3, [r3, #22]
 8011a46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011a4a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 8011a4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011a50:	695b      	ldr	r3, [r3, #20]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 808a 	beq.w	8011b6c <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 8011a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a5c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	2200      	movs	r2, #0
 8011a62:	461c      	mov	r4, r3
 8011a64:	4615      	mov	r5, r2
 8011a66:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 8011a6a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011a6e:	4622      	mov	r2, r4
 8011a70:	462b      	mov	r3, r5
 8011a72:	f04f 0000 	mov.w	r0, #0
 8011a76:	f04f 0100 	mov.w	r1, #0
 8011a7a:	0159      	lsls	r1, r3, #5
 8011a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011a80:	0150      	lsls	r0, r2, #5
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	ebb2 0804 	subs.w	r8, r2, r4
 8011a8a:	eb63 0905 	sbc.w	r9, r3, r5
 8011a8e:	f04f 0200 	mov.w	r2, #0
 8011a92:	f04f 0300 	mov.w	r3, #0
 8011a96:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011a9a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011a9e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011aa2:	4690      	mov	r8, r2
 8011aa4:	4699      	mov	r9, r3
 8011aa6:	eb18 0a04 	adds.w	sl, r8, r4
 8011aaa:	eb49 0b05 	adc.w	fp, r9, r5
 8011aae:	f04f 0200 	mov.w	r2, #0
 8011ab2:	f04f 0300 	mov.w	r3, #0
 8011ab6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011aba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011abe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011ac2:	4692      	mov	sl, r2
 8011ac4:	469b      	mov	fp, r3
 8011ac6:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 8011aca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ace:	f04f 0000 	mov.w	r0, #0
 8011ad2:	f04f 0100 	mov.w	r1, #0
 8011ad6:	0319      	lsls	r1, r3, #12
 8011ad8:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8011adc:	0310      	lsls	r0, r2, #12
 8011ade:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 8011ae2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011ae6:	695b      	ldr	r3, [r3, #20]
 8011ae8:	085b      	lsrs	r3, r3, #1
 8011aea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 8011aee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011af2:	2200      	movs	r2, #0
 8011af4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011af8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011afc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011b00:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8011b04:	4621      	mov	r1, r4
 8011b06:	1851      	adds	r1, r2, r1
 8011b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	eb43 0101 	adc.w	r1, r3, r1
 8011b10:	65f9      	str	r1, [r7, #92]	; 0x5c
 8011b12:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8011b16:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 8011b1a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b1e:	695b      	ldr	r3, [r3, #20]
 8011b20:	2200      	movs	r2, #0
 8011b22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011b26:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011b2a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011b2e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011b32:	f7ef f861 	bl	8000bf8 <__aeabi_uldivmod>
 8011b36:	4602      	mov	r2, r0
 8011b38:	460b      	mov	r3, r1
 8011b3a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 8011b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b42:	8adb      	ldrh	r3, [r3, #22]
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	2200      	movs	r2, #0
 8011b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011b4c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8011b50:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011b54:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8011b58:	4621      	mov	r1, r4
 8011b5a:	428a      	cmp	r2, r1
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	418b      	sbcs	r3, r1
 8011b60:	d204      	bcs.n	8011b6c <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 8011b62:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8011b66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011b6a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 8011b6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011b70:	881b      	ldrh	r3, [r3, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f000 82e9 	beq.w	801214a <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 8011b78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b7c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f000 82e2 	beq.w	801214a <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 8011b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011b8a:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	f000 82dc 	beq.w	801214a <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 8011b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f000 82d5 	beq.w	801214a <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 8011ba0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ba4:	885b      	ldrh	r3, [r3, #2]
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	2200      	movs	r2, #0
 8011baa:	653b      	str	r3, [r7, #80]	; 0x50
 8011bac:	657a      	str	r2, [r7, #84]	; 0x54
 8011bae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8011bb2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 8011bb6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011bba:	4622      	mov	r2, r4
 8011bbc:	462b      	mov	r3, r5
 8011bbe:	f04f 0000 	mov.w	r0, #0
 8011bc2:	f04f 0100 	mov.w	r1, #0
 8011bc6:	0159      	lsls	r1, r3, #5
 8011bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011bcc:	0150      	lsls	r0, r2, #5
 8011bce:	4602      	mov	r2, r0
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	1b11      	subs	r1, r2, r4
 8011bd4:	64b9      	str	r1, [r7, #72]	; 0x48
 8011bd6:	eb63 0305 	sbc.w	r3, r3, r5
 8011bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bdc:	f04f 0200 	mov.w	r2, #0
 8011be0:	f04f 0300 	mov.w	r3, #0
 8011be4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8011be8:	4649      	mov	r1, r9
 8011bea:	008b      	lsls	r3, r1, #2
 8011bec:	4641      	mov	r1, r8
 8011bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011bf2:	4641      	mov	r1, r8
 8011bf4:	008a      	lsls	r2, r1, #2
 8011bf6:	4611      	mov	r1, r2
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	191b      	adds	r3, r3, r4
 8011bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8011c00:	4613      	mov	r3, r2
 8011c02:	eb45 0303 	adc.w	r3, r5, r3
 8011c06:	647b      	str	r3, [r7, #68]	; 0x44
 8011c08:	f04f 0200 	mov.w	r2, #0
 8011c0c:	f04f 0300 	mov.w	r3, #0
 8011c10:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011c14:	4629      	mov	r1, r5
 8011c16:	02cb      	lsls	r3, r1, #11
 8011c18:	4621      	mov	r1, r4
 8011c1a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8011c1e:	4621      	mov	r1, r4
 8011c20:	02ca      	lsls	r2, r1, #11
 8011c22:	461c      	mov	r4, r3
 8011c24:	4613      	mov	r3, r2
 8011c26:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 8011c2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011c2e:	881b      	ldrh	r3, [r3, #0]
 8011c30:	085b      	lsrs	r3, r3, #1
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 8011c38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011c42:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011c46:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011c4a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8011c4e:	4621      	mov	r1, r4
 8011c50:	1851      	adds	r1, r2, r1
 8011c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8011c54:	4629      	mov	r1, r5
 8011c56:	eb43 0101 	adc.w	r1, r3, r1
 8011c5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8011c5c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8011c60:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 8011c64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011c72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011c76:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8011c7a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011c7e:	f7ee ffbb 	bl	8000bf8 <__aeabi_uldivmod>
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 8011c8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011c8e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c92:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 8011c94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	011a      	lsls	r2, r3, #4
 8011c9c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011ca0:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 8011ca2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	633b      	str	r3, [r7, #48]	; 0x30
 8011cac:	637a      	str	r2, [r7, #52]	; 0x34
 8011cae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011cb2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 8011cb6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011cba:	695b      	ldr	r3, [r3, #20]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011cc2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011cca:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8011cce:	4622      	mov	r2, r4
 8011cd0:	fb02 f203 	mul.w	r2, r2, r3
 8011cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011cd8:	4629      	mov	r1, r5
 8011cda:	fb01 f303 	mul.w	r3, r1, r3
 8011cde:	441a      	add	r2, r3
 8011ce0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	fba3 1301 	umull	r1, r3, r3, r1
 8011cea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011cee:	460b      	mov	r3, r1
 8011cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011cf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011cf8:	18d3      	adds	r3, r2, r3
 8011cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011cfe:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8011d02:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011d06:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8011d0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011d0e:	8b5b      	ldrh	r3, [r3, #26]
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	2200      	movs	r2, #0
 8011d14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011d18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011d20:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011d24:	4622      	mov	r2, r4
 8011d26:	fb02 f203 	mul.w	r2, r2, r3
 8011d2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011d2e:	4629      	mov	r1, r5
 8011d30:	fb01 f303 	mul.w	r3, r1, r3
 8011d34:	441a      	add	r2, r3
 8011d36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011d3a:	4621      	mov	r1, r4
 8011d3c:	fba3 1301 	umull	r1, r3, r3, r1
 8011d40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011d44:	460b      	mov	r3, r1
 8011d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d4e:	18d3      	adds	r3, r2, r3
 8011d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011d54:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011d58:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011d5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8011d60:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011d64:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011d68:	62b9      	str	r1, [r7, #40]	; 0x28
 8011d6a:	f143 0300 	adc.w	r3, r3, #0
 8011d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8011d74:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011d78:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011d7c:	f04f 0000 	mov.w	r0, #0
 8011d80:	f04f 0100 	mov.w	r1, #0
 8011d84:	0cd0      	lsrs	r0, r2, #19
 8011d86:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8011d8a:	0cd9      	lsrs	r1, r3, #19
 8011d8c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 8011d90:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011d94:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8011d98:	6239      	str	r1, [r7, #32]
 8011d9a:	f143 0300 	adc.w	r3, r3, #0
 8011d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8011da0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011da4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 8011da8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011db0:	f04f 0300 	mov.w	r3, #0
 8011db4:	f7ee ff20 	bl	8000bf8 <__aeabi_uldivmod>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8011dc0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011dc4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011dc8:	f173 0300 	sbcs.w	r3, r3, #0
 8011dcc:	d305      	bcc.n	8011dda <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 8011dce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8011dd2:	f04f 0300 	mov.w	r3, #0
 8011dd6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 8011dda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011dde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011de2:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 8011de4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2200      	movs	r2, #0
 8011dec:	61bb      	str	r3, [r7, #24]
 8011dee:	61fa      	str	r2, [r7, #28]
 8011df0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011df4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 8011df8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011dfc:	691b      	ldr	r3, [r3, #16]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011e04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e0c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8011e10:	4622      	mov	r2, r4
 8011e12:	fb02 f203 	mul.w	r2, r2, r3
 8011e16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	fb01 f303 	mul.w	r3, r1, r3
 8011e20:	441a      	add	r2, r3
 8011e22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e26:	4621      	mov	r1, r4
 8011e28:	fba3 1301 	umull	r1, r3, r3, r1
 8011e2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011e30:	460b      	mov	r3, r1
 8011e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e3a:	18d3      	adds	r3, r2, r3
 8011e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011e40:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8011e44:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011e48:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 8011e4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e50:	8b5b      	ldrh	r3, [r3, #26]
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	2200      	movs	r2, #0
 8011e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e5a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8011e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e62:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8011e66:	4622      	mov	r2, r4
 8011e68:	fb02 f203 	mul.w	r2, r2, r3
 8011e6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e70:	4629      	mov	r1, r5
 8011e72:	fb01 f303 	mul.w	r3, r1, r3
 8011e76:	441a      	add	r2, r3
 8011e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e7c:	4621      	mov	r1, r4
 8011e7e:	fba3 1301 	umull	r1, r3, r3, r1
 8011e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011e86:	460b      	mov	r3, r1
 8011e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e90:	18d3      	adds	r3, r2, r3
 8011e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011e96:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8011e9a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011e9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8011ea2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ea6:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011eaa:	6139      	str	r1, [r7, #16]
 8011eac:	f143 0300 	adc.w	r3, r3, #0
 8011eb0:	617b      	str	r3, [r7, #20]
 8011eb2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011eb6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011eba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011ebe:	f04f 0000 	mov.w	r0, #0
 8011ec2:	f04f 0100 	mov.w	r1, #0
 8011ec6:	0cd0      	lsrs	r0, r2, #19
 8011ec8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8011ecc:	0cd9      	lsrs	r1, r3, #19
 8011ece:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 8011ed2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8011eda:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 8011edc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ee0:	891b      	ldrh	r3, [r3, #8]
 8011ee2:	b29b      	uxth	r3, r3
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8011ee8:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 8011eea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8011eee:	462b      	mov	r3, r5
 8011ef0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011ef4:	4642      	mov	r2, r8
 8011ef6:	fb02 f203 	mul.w	r2, r2, r3
 8011efa:	464b      	mov	r3, r9
 8011efc:	4621      	mov	r1, r4
 8011efe:	fb01 f303 	mul.w	r3, r1, r3
 8011f02:	4413      	add	r3, r2
 8011f04:	4622      	mov	r2, r4
 8011f06:	4641      	mov	r1, r8
 8011f08:	fba2 1201 	umull	r1, r2, r2, r1
 8011f0c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8011f10:	460a      	mov	r2, r1
 8011f12:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011f16:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011f1a:	4413      	add	r3, r2
 8011f1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011f24:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8011f28:	4622      	mov	r2, r4
 8011f2a:	fb02 f203 	mul.w	r2, r2, r3
 8011f2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011f32:	4629      	mov	r1, r5
 8011f34:	fb01 f303 	mul.w	r3, r1, r3
 8011f38:	4413      	add	r3, r2
 8011f3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011f3e:	4621      	mov	r1, r4
 8011f40:	fba2 1201 	umull	r1, r2, r2, r1
 8011f44:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8011f48:	460a      	mov	r2, r1
 8011f4a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8011f4e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011f52:	4413      	add	r3, r2
 8011f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011f58:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8011f5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011f60:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 8011f64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011f68:	88db      	ldrh	r3, [r3, #6]
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8011f70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011f72:	f04f 0200 	mov.w	r2, #0
 8011f76:	f04f 0300 	mov.w	r3, #0
 8011f7a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8011f7e:	4629      	mov	r1, r5
 8011f80:	01cb      	lsls	r3, r1, #7
 8011f82:	4621      	mov	r1, r4
 8011f84:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8011f88:	4621      	mov	r1, r4
 8011f8a:	01ca      	lsls	r2, r1, #7
 8011f8c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011f90:	1884      	adds	r4, r0, r2
 8011f92:	60bc      	str	r4, [r7, #8]
 8011f94:	eb41 0303 	adc.w	r3, r1, r3
 8011f98:	60fb      	str	r3, [r7, #12]
 8011f9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011f9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 8011fa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011fa6:	88db      	ldrh	r3, [r3, #6]
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	2200      	movs	r2, #0
 8011fac:	663b      	str	r3, [r7, #96]	; 0x60
 8011fae:	667a      	str	r2, [r7, #100]	; 0x64
 8011fb0:	f04f 0200 	mov.w	r2, #0
 8011fb4:	f04f 0300 	mov.w	r3, #0
 8011fb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	020b      	lsls	r3, r1, #8
 8011fc0:	4621      	mov	r1, r4
 8011fc2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	020a      	lsls	r2, r1, #8
 8011fca:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011fce:	f7ee fe13 	bl	8000bf8 <__aeabi_uldivmod>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 8011fda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011fde:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8011fe2:	6039      	str	r1, [r7, #0]
 8011fe4:	f143 0300 	adc.w	r3, r3, #0
 8011fe8:	607b      	str	r3, [r7, #4]
 8011fea:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011fee:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 8011ff2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011ffa:	f04f 0300 	mov.w	r3, #0
 8011ffe:	f7ee fdfb 	bl	8000bf8 <__aeabi_uldivmod>
 8012002:	4602      	mov	r2, r0
 8012004:	460b      	mov	r3, r1
 8012006:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 801200a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801200e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8012012:	f173 0300 	sbcs.w	r3, r3, #0
 8012016:	d305      	bcc.n	8012024 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 8012018:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801201c:	f04f 0300 	mov.w	r3, #0
 8012020:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 8012024:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8012028:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801202c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 801202e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012032:	69db      	ldr	r3, [r3, #28]
 8012034:	021b      	lsls	r3, r3, #8
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe ffcd 	bl	8010fd6 <VL53L1_isqrt>
 801203c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 8012040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012044:	785b      	ldrb	r3, [r3, #1]
 8012046:	461a      	mov	r2, r3
 8012048:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801204c:	fb02 f303 	mul.w	r3, r2, r3
 8012050:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 8012054:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012058:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 801205a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801205e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 8012060:	4293      	cmp	r3, r2
 8012062:	d218      	bcs.n	8012096 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 8012064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 801206c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012070:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 8012078:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801207c:	021b      	lsls	r3, r3, #8
 801207e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 8012082:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8012086:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801208a:	429a      	cmp	r2, r3
 801208c:	d203      	bcs.n	8012096 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 801208e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012092:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 8012096:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801209a:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 801209c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80120a0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 80120a2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 80120a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80120a8:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 80120aa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80120ae:	f000 f854 	bl	801215a <VL53L1_f_002>
 80120b2:	4603      	mov	r3, r0
 80120b4:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 80120b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80120ba:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 80120bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80120c0:	6a1b      	ldr	r3, [r3, #32]
 80120c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 80120c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80120ca:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80120ce:	461a      	mov	r2, r3
 80120d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80120d4:	fb02 f303 	mul.w	r3, r2, r3
 80120d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 80120dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80120e0:	3308      	adds	r3, #8
 80120e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 80120e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80120ea:	091b      	lsrs	r3, r3, #4
 80120ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 80120f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80120f4:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 80120f6:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 80120f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80120fc:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 80120fe:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8012100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012104:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 8012106:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801210a:	f000 f826 	bl	801215a <VL53L1_f_002>
 801210e:	4603      	mov	r3, r0
 8012110:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 8012112:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012116:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 8012118:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801211c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8012120:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012124:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012128:	429a      	cmp	r2, r3
 801212a:	da07      	bge.n	801213c <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 801212c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012130:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8012134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012138:	801a      	strh	r2, [r3, #0]
 801213a:	e006      	b.n	801214a <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 801213c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012140:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8012144:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012148:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 801214a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 801214e:	4618      	mov	r0, r3
 8012150:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8012154:	46bd      	mov	sp, r7
 8012156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801215a <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b086      	sub	sp, #24
 801215e:	af00      	add	r7, sp, #0
 8012160:	60f8      	str	r0, [r7, #12]
 8012162:	60b9      	str	r1, [r7, #8]
 8012164:	607a      	str	r2, [r7, #4]
 8012166:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 8012168:	2300      	movs	r3, #0
 801216a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	009b      	lsls	r3, r3, #2
 8012174:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	fb03 f303 	mul.w	r3, r3, r3
 801217c:	693a      	ldr	r2, [r7, #16]
 801217e:	4413      	add	r3, r2
 8012180:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 8012182:	6938      	ldr	r0, [r7, #16]
 8012184:	f7fe ff27 	bl	8010fd6 <VL53L1_isqrt>
 8012188:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 801218a:	693a      	ldr	r2, [r7, #16]
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	4413      	add	r3, r2
 8012190:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	011b      	lsls	r3, r3, #4
 8012196:	4618      	mov	r0, r3
 8012198:	f7fe ff1d 	bl	8010fd6 <VL53L1_isqrt>
 801219c:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	fb02 f303 	mul.w	r3, r2, r3
 80121a6:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d009      	beq.n	80121c2 <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 80121ae:	697a      	ldr	r2, [r7, #20]
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	4413      	add	r3, r2
 80121b4:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	005b      	lsls	r3, r3, #1
 80121ba:	697a      	ldr	r2, [r7, #20]
 80121bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80121c0:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 80121c2:	697b      	ldr	r3, [r7, #20]

}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3718      	adds	r7, #24
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 80121d4:	2300      	movs	r3, #0
 80121d6:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2218      	movs	r2, #24
 80121dc:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2200      	movs	r2, #0
 80121e2:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2200      	movs	r2, #0
 80121e8:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2200      	movs	r2, #0
 80121ee:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	73fb      	strb	r3, [r7, #15]
 8012202:	e01f      	b.n	8012244 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 8012204:	7bfb      	ldrb	r3, [r7, #15]
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	4413      	add	r3, r2
 801220a:	2200      	movs	r2, #0
 801220c:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 801220e:	7bfb      	ldrb	r3, [r7, #15]
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	4413      	add	r3, r2
 8012214:	2200      	movs	r2, #0
 8012216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 801221a:	7bfb      	ldrb	r3, [r7, #15]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	4413      	add	r3, r2
 8012220:	2200      	movs	r2, #0
 8012222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 8012226:	7bfa      	ldrb	r2, [r7, #15]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	322e      	adds	r2, #46	; 0x2e
 801222c:	2100      	movs	r1, #0
 801222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 8012232:	7bfa      	ldrb	r2, [r7, #15]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	3246      	adds	r2, #70	; 0x46
 8012238:	2100      	movs	r1, #0
 801223a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 801223e:	7bfb      	ldrb	r3, [r7, #15]
 8012240:	3301      	adds	r3, #1
 8012242:	73fb      	strb	r3, [r7, #15]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	785b      	ldrb	r3, [r3, #1]
 8012248:	7bfa      	ldrb	r2, [r7, #15]
 801224a:	429a      	cmp	r2, r3
 801224c:	d3da      	bcc.n	8012204 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2208      	movs	r2, #8
 801225a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2200      	movs	r2, #0
 8012262:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801226c:	461a      	mov	r2, r3
 801226e:	2118      	movs	r1, #24
 8012270:	2000      	movs	r0, #0
 8012272:	f7ff f9e8 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f503 7352 	add.w	r3, r3, #840	; 0x348
 801227c:	461a      	mov	r2, r3
 801227e:	2118      	movs	r1, #24
 8012280:	2000      	movs	r0, #0
 8012282:	f7ff f9e0 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801228c:	461a      	mov	r2, r3
 801228e:	2118      	movs	r1, #24
 8012290:	2000      	movs	r0, #0
 8012292:	f7ff f9d8 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 801229c:	461a      	mov	r2, r3
 801229e:	2118      	movs	r1, #24
 80122a0:	2000      	movs	r0, #0
 80122a2:	f7ff f9d0 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80122ac:	461a      	mov	r2, r3
 80122ae:	2118      	movs	r1, #24
 80122b0:	2000      	movs	r0, #0
 80122b2:	f7ff f9c8 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 80122b6:	bf00      	nop
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80122be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80122c2:	b090      	sub	sp, #64	; 0x40
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	61b9      	str	r1, [r7, #24]
 80122c8:	617a      	str	r2, [r7, #20]
 80122ca:	461a      	mov	r2, r3
 80122cc:	4603      	mov	r3, r0
 80122ce:	83fb      	strh	r3, [r7, #30]
 80122d0:	4613      	mov	r3, r2
 80122d2:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80122d4:	2300      	movs	r3, #0
 80122d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 80122da:	2300      	movs	r3, #0
 80122dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 80122e0:	2300      	movs	r3, #0
 80122e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 80122e6:	f04f 0200 	mov.w	r2, #0
 80122ea:	f04f 0300 	mov.w	r3, #0
 80122ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 80122f6:	2300      	movs	r3, #0
 80122f8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 80122fa:	2300      	movs	r3, #0
 80122fc:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 80122fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012300:	7a5a      	ldrb	r2, [r3, #9]
 8012302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012304:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 8012306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012308:	7a1a      	ldrb	r2, [r3, #8]
 801230a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801230c:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 801230e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012310:	7a9a      	ldrb	r2, [r3, #10]
 8012312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012314:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 8012316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012318:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801231c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801231e:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 8012320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012322:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012326:	4618      	mov	r0, r3
 8012328:	f7ff f93c 	bl	80115a4 <VL53L1_decode_vcsel_period>
 801232c:	4603      	mov	r3, r0
 801232e:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 8012330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012332:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 8012334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801233a:	17da      	asrs	r2, r3, #31
 801233c:	60bb      	str	r3, [r7, #8]
 801233e:	60fa      	str	r2, [r7, #12]
 8012340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012344:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 8012348:	8bfb      	ldrh	r3, [r7, #30]
 801234a:	2200      	movs	r2, #0
 801234c:	4698      	mov	r8, r3
 801234e:	4691      	mov	r9, r2
 8012350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012352:	fb08 f203 	mul.w	r2, r8, r3
 8012356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012358:	fb09 f303 	mul.w	r3, r9, r3
 801235c:	4413      	add	r3, r2
 801235e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012360:	fba2 4508 	umull	r4, r5, r2, r8
 8012364:	442b      	add	r3, r5
 8012366:	461d      	mov	r5, r3
 8012368:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801236c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 8012370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012374:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 8012378:	f143 0b00 	adc.w	fp, r3, #0
 801237c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 8012380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012384:	2b00      	cmp	r3, #0
 8012386:	da08      	bge.n	801239a <VL53L1_f_018+0xdc>
 8012388:	f640 71ff 	movw	r1, #4095	; 0xfff
 801238c:	1851      	adds	r1, r2, r1
 801238e:	6039      	str	r1, [r7, #0]
 8012390:	f143 0300 	adc.w	r3, r3, #0
 8012394:	607b      	str	r3, [r7, #4]
 8012396:	e9d7 2300 	ldrd	r2, r3, [r7]
 801239a:	f04f 0000 	mov.w	r0, #0
 801239e:	f04f 0100 	mov.w	r1, #0
 80123a2:	0b10      	lsrs	r0, r2, #12
 80123a4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80123a8:	1319      	asrs	r1, r3, #12
 80123aa:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 80123ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b0:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 80123b2:	2300      	movs	r3, #0
 80123b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80123b8:	e062      	b.n	8012480 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 80123ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123be:	089b      	lsrs	r3, r3, #2
 80123c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 80123c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80123c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80123ca:	4413      	add	r3, r2
 80123cc:	7c9b      	ldrb	r3, [r3, #18]
 80123ce:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 80123d0:	6a3b      	ldr	r3, [r7, #32]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	dd4f      	ble.n	8012476 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 80123d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123d8:	7a9b      	ldrb	r3, [r3, #10]
 80123da:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80123de:	429a      	cmp	r2, r3
 80123e0:	d20f      	bcs.n	8012402 <VL53L1_f_018+0x144>
 80123e2:	7f7b      	ldrb	r3, [r7, #29]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00c      	beq.n	8012402 <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 80123e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80123ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123ee:	3206      	adds	r2, #6
 80123f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	441a      	add	r2, r3
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	fb02 f303 	mul.w	r3, r2, r3
 80123fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8012400:	e004      	b.n	801240c <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 8012402:	6a3b      	ldr	r3, [r7, #32]
 8012404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012406:	fb02 f303 	mul.w	r3, r2, r3
 801240a:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 801240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240e:	4618      	mov	r0, r3
 8012410:	f7fe fde1 	bl	8010fd6 <VL53L1_isqrt>
 8012414:	4603      	mov	r3, r0
 8012416:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 8012418:	6a3b      	ldr	r3, [r7, #32]
 801241a:	0fda      	lsrs	r2, r3, #31
 801241c:	4413      	add	r3, r2
 801241e:	105b      	asrs	r3, r3, #1
 8012420:	461a      	mov	r2, r3
 8012422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012424:	4413      	add	r3, r2
 8012426:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 8012428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801242a:	6a3b      	ldr	r3, [r7, #32]
 801242c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012430:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 8012432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012434:	69ba      	ldr	r2, [r7, #24]
 8012436:	fb02 f303 	mul.w	r3, r2, r3
 801243a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 801243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801243e:	3308      	adds	r3, #8
 8012440:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 8012442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012444:	2b00      	cmp	r3, #0
 8012446:	da00      	bge.n	801244a <VL53L1_f_018+0x18c>
 8012448:	330f      	adds	r3, #15
 801244a:	111b      	asrs	r3, r3, #4
 801244c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 801244e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	4413      	add	r3, r2
 8012454:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 8012456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	429a      	cmp	r2, r3
 801245c:	da01      	bge.n	8012462 <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 8012462:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012468:	3216      	adds	r2, #22
 801246a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 8012470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012474:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 8012476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801247a:	3301      	adds	r3, #1
 801247c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012482:	7a9b      	ldrb	r3, [r3, #10]
 8012484:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012488:	429a      	cmp	r2, r3
 801248a:	d396      	bcc.n	80123ba <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 801248c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801248e:	2200      	movs	r2, #0
 8012490:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 8012492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012494:	7a1b      	ldrb	r3, [r3, #8]
 8012496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801249a:	e033      	b.n	8012504 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 801249c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80124a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124a2:	3206      	adds	r2, #6
 80124a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80124a8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80124ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124ae:	3116      	adds	r1, #22
 80124b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	dd13      	ble.n	80124e0 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 80124b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124be:	4413      	add	r3, r2
 80124c0:	2201      	movs	r2, #1
 80124c2:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 80124c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124ca:	4413      	add	r3, r2
 80124cc:	2201      	movs	r2, #1
 80124ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 80124d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124d4:	791b      	ldrb	r3, [r3, #4]
 80124d6:	3301      	adds	r3, #1
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124dc:	711a      	strb	r2, [r3, #4]
 80124de:	e00c      	b.n	80124fa <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 80124e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124e6:	4413      	add	r3, r2
 80124e8:	2200      	movs	r2, #0
 80124ea:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 80124ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124f2:	4413      	add	r3, r2
 80124f4:	2200      	movs	r2, #0
 80124f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 80124fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124fe:	3301      	adds	r3, #1
 8012500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012506:	7a9b      	ldrb	r3, [r3, #10]
 8012508:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801250c:	429a      	cmp	r2, r3
 801250e:	d3c5      	bcc.n	801249c <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012510:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8012514:	4618      	mov	r0, r3
 8012516:	3740      	adds	r7, #64	; 0x40
 8012518:	46bd      	mov	sp, r7
 801251a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801251e <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801251e:	b480      	push	{r7}
 8012520:	b085      	sub	sp, #20
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012526:	2300      	movs	r3, #0
 8012528:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8012532:	2300      	movs	r3, #0
 8012534:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2200      	movs	r2, #0
 801253a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 801253e:	2300      	movs	r3, #0
 8012540:	73fb      	strb	r3, [r7, #15]
 8012542:	e02d      	b.n	80125a0 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 8012544:	7bfb      	ldrb	r3, [r7, #15]
 8012546:	3301      	adds	r3, #1
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	78d2      	ldrb	r2, [r2, #3]
 801254c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012550:	fb01 f202 	mul.w	r2, r1, r2
 8012554:	1a9b      	subs	r3, r3, r2
 8012556:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	789b      	ldrb	r3, [r3, #2]
 801255c:	7bfa      	ldrb	r2, [r7, #15]
 801255e:	429a      	cmp	r2, r3
 8012560:	d21b      	bcs.n	801259a <VL53L1_f_019+0x7c>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	789b      	ldrb	r3, [r3, #2]
 8012566:	7b3a      	ldrb	r2, [r7, #12]
 8012568:	429a      	cmp	r2, r3
 801256a:	d216      	bcs.n	801259a <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 801256c:	7bfb      	ldrb	r3, [r7, #15]
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	4413      	add	r3, r2
 8012572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012576:	2b00      	cmp	r3, #0
 8012578:	d10f      	bne.n	801259a <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 801257a:	7b3b      	ldrb	r3, [r7, #12]
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	4413      	add	r3, r2
 8012580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 8012584:	2b01      	cmp	r3, #1
 8012586:	d108      	bne.n	801259a <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 8012588:	7bbb      	ldrb	r3, [r7, #14]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d105      	bne.n	801259a <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	7bfa      	ldrb	r2, [r7, #15]
 8012592:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 8012596:	2301      	movs	r3, #1
 8012598:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 801259a:	7bfb      	ldrb	r3, [r7, #15]
 801259c:	3301      	adds	r3, #1
 801259e:	73fb      	strb	r3, [r7, #15]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	78db      	ldrb	r3, [r3, #3]
 80125a4:	7bfa      	ldrb	r2, [r7, #15]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d3cc      	bcc.n	8012544 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80125aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3714      	adds	r7, #20
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr

080125ba <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80125ba:	b480      	push	{r7}
 80125bc:	b085      	sub	sp, #20
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80125c2:	2300      	movs	r3, #0
 80125c4:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 80125ca:	2300      	movs	r3, #0
 80125cc:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 80125ce:	2300      	movs	r3, #0
 80125d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80125d8:	73fb      	strb	r3, [r7, #15]
 80125da:	e05a      	b.n	8012692 <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	78da      	ldrb	r2, [r3, #3]
 80125e0:	7bfb      	ldrb	r3, [r7, #15]
 80125e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80125e6:	fb01 f202 	mul.w	r2, r1, r2
 80125ea:	1a9b      	subs	r3, r3, r2
 80125ec:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 80125ee:	7bfb      	ldrb	r3, [r7, #15]
 80125f0:	3301      	adds	r3, #1
 80125f2:	687a      	ldr	r2, [r7, #4]
 80125f4:	78d2      	ldrb	r2, [r2, #3]
 80125f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80125fa:	fb01 f202 	mul.w	r2, r1, r2
 80125fe:	1a9b      	subs	r3, r3, r2
 8012600:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	789b      	ldrb	r3, [r3, #2]
 8012606:	7b7a      	ldrb	r2, [r7, #13]
 8012608:	429a      	cmp	r2, r3
 801260a:	d23f      	bcs.n	801268c <VL53L1_f_020+0xd2>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	789b      	ldrb	r3, [r3, #2]
 8012610:	7b3a      	ldrb	r2, [r7, #12]
 8012612:	429a      	cmp	r2, r3
 8012614:	d23a      	bcs.n	801268c <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 8012616:	7b7b      	ldrb	r3, [r7, #13]
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	4413      	add	r3, r2
 801261c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012620:	2b00      	cmp	r3, #0
 8012622:	d10e      	bne.n	8012642 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 8012624:	7b3b      	ldrb	r3, [r7, #12]
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	4413      	add	r3, r2
 801262a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 801262e:	2b01      	cmp	r3, #1
 8012630:	d107      	bne.n	8012642 <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012638:	3301      	adds	r3, #1
 801263a:	b2da      	uxtb	r2, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801264e:	429a      	cmp	r2, r3
 8012650:	d905      	bls.n	801265e <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 801265e:	7b7b      	ldrb	r3, [r7, #13]
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	4413      	add	r3, r2
 8012664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012668:	2b00      	cmp	r3, #0
 801266a:	d009      	beq.n	8012680 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 801266c:	7b7b      	ldrb	r3, [r7, #13]
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	4413      	add	r3, r2
 8012678:	460a      	mov	r2, r1
 801267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801267e:	e005      	b.n	801268c <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 8012680:	7b7b      	ldrb	r3, [r7, #13]
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	4413      	add	r3, r2
 8012686:	2200      	movs	r2, #0
 8012688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 801268c:	7bfb      	ldrb	r3, [r7, #15]
 801268e:	3301      	adds	r3, #1
 8012690:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 8012692:	7bfa      	ldrb	r2, [r7, #15]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801269a:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 80126a0:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 80126a2:	429a      	cmp	r2, r3
 80126a4:	db9a      	blt.n	80125dc <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 80126a6:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3714      	adds	r7, #20
 80126ae:	46bd      	mov	sp, r7
 80126b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b4:	4770      	bx	lr

080126b6 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80126b6:	b480      	push	{r7}
 80126b8:	b087      	sub	sp, #28
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80126be:	2300      	movs	r3, #0
 80126c0:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80126c2:	2300      	movs	r3, #0
 80126c4:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 80126c6:	2300      	movs	r3, #0
 80126c8:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 80126ca:	2300      	movs	r3, #0
 80126cc:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 80126ce:	2300      	movs	r3, #0
 80126d0:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 80126d2:	2300      	movs	r3, #0
 80126d4:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	78db      	ldrb	r3, [r3, #3]
 80126da:	3b01      	subs	r3, #1
 80126dc:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 80126de:	7cbb      	ldrb	r3, [r7, #18]
 80126e0:	085b      	lsrs	r3, r3, #1
 80126e2:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80126ea:	75fb      	strb	r3, [r7, #23]
 80126ec:	e0a2      	b.n	8012834 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	78da      	ldrb	r2, [r3, #3]
 80126f2:	7dfb      	ldrb	r3, [r7, #23]
 80126f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80126f8:	fb01 f202 	mul.w	r2, r1, r2
 80126fc:	1a9b      	subs	r3, r3, r2
 80126fe:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 8012700:	7dfb      	ldrb	r3, [r7, #23]
 8012702:	3301      	adds	r3, #1
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	78d2      	ldrb	r2, [r2, #3]
 8012708:	fb93 f1f2 	sdiv	r1, r3, r2
 801270c:	fb01 f202 	mul.w	r2, r1, r2
 8012710:	1a9b      	subs	r3, r3, r2
 8012712:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	789b      	ldrb	r3, [r3, #2]
 8012718:	7d7a      	ldrb	r2, [r7, #21]
 801271a:	429a      	cmp	r2, r3
 801271c:	f080 8087 	bcs.w	801282e <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 8012724:	7d3a      	ldrb	r2, [r7, #20]
 8012726:	429a      	cmp	r2, r3
 8012728:	f080 8081 	bcs.w	801282e <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 801272c:	7d7b      	ldrb	r3, [r7, #21]
 801272e:	687a      	ldr	r2, [r7, #4]
 8012730:	4413      	add	r3, r2
 8012732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012736:	2b00      	cmp	r3, #0
 8012738:	d12f      	bne.n	801279a <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 801273a:	7d3b      	ldrb	r3, [r7, #20]
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	4413      	add	r3, r2
 8012740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 8012744:	2b00      	cmp	r3, #0
 8012746:	d028      	beq.n	801279a <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8012748:	7d3b      	ldrb	r3, [r7, #20]
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	4413      	add	r3, r2
 801274e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012752:	3b01      	subs	r3, #1
 8012754:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801275c:	7cfa      	ldrb	r2, [r7, #19]
 801275e:	429a      	cmp	r2, r3
 8012760:	d21b      	bcs.n	801279a <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012762:	7cfa      	ldrb	r2, [r7, #19]
 8012764:	4613      	mov	r3, r2
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	4413      	add	r3, r2
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	4413      	add	r3, r2
 8012774:	3304      	adds	r3, #4
 8012776:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	7dfa      	ldrb	r2, [r7, #23]
 801277c:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 801277e:	7dfb      	ldrb	r3, [r7, #23]
 8012780:	3301      	adds	r3, #1
 8012782:	b2da      	uxtb	r2, r3
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	22ff      	movs	r2, #255	; 0xff
 801278c:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2200      	movs	r2, #0
 8012792:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2200      	movs	r2, #0
 8012798:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 801279a:	7d7b      	ldrb	r3, [r7, #21]
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	4413      	add	r3, r2
 80127a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d042      	beq.n	801282e <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 80127a8:	7d3b      	ldrb	r3, [r7, #20]
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	4413      	add	r3, r2
 80127ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d13b      	bne.n	801282e <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 80127b6:	7d7b      	ldrb	r3, [r7, #21]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	4413      	add	r3, r2
 80127bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127c0:	3b01      	subs	r3, #1
 80127c2:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80127ca:	7cfa      	ldrb	r2, [r7, #19]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d22e      	bcs.n	801282e <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80127d0:	7cfa      	ldrb	r2, [r7, #19]
 80127d2:	4613      	mov	r3, r2
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	4413      	add	r3, r2
 80127d8:	009b      	lsls	r3, r3, #2
 80127da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	4413      	add	r3, r2
 80127e2:	3304      	adds	r3, #4
 80127e4:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	7dfa      	ldrb	r2, [r7, #23]
 80127ea:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 80127ec:	7dfb      	ldrb	r3, [r7, #23]
 80127ee:	3301      	adds	r3, #1
 80127f0:	b2da      	uxtb	r2, r3
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 80127fe:	1ad3      	subs	r3, r2, r3
 8012800:	b2db      	uxtb	r3, r3
 8012802:	3301      	adds	r3, #1
 8012804:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	b2db      	uxtb	r3, r3
 8012816:	3301      	adds	r3, #1
 8012818:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	799b      	ldrb	r3, [r3, #6]
 8012822:	7cba      	ldrb	r2, [r7, #18]
 8012824:	429a      	cmp	r2, r3
 8012826:	d202      	bcs.n	801282e <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	7cba      	ldrb	r2, [r7, #18]
 801282c:	719a      	strb	r2, [r3, #6]
		blb++) {
 801282e:	7dfb      	ldrb	r3, [r7, #23]
 8012830:	3301      	adds	r3, #1
 8012832:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 8012834:	7dfa      	ldrb	r2, [r7, #23]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801283c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 8012842:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 8012844:	429a      	cmp	r2, r3
 8012846:	f6ff af52 	blt.w	80126ee <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801284a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 801284e:	4618      	mov	r0, r3
 8012850:	371c      	adds	r7, #28
 8012852:	46bd      	mov	sp, r7
 8012854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012858:	4770      	bx	lr

0801285a <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801285a:	b580      	push	{r7, lr}
 801285c:	b090      	sub	sp, #64	; 0x40
 801285e:	af00      	add	r7, sp, #0
 8012860:	4603      	mov	r3, r0
 8012862:	6039      	str	r1, [r7, #0]
 8012864:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012866:	2300      	movs	r3, #0
 8012868:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 801286c:	f107 030c 	add.w	r3, r7, #12
 8012870:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 8012872:	2300      	movs	r3, #0
 8012874:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8012878:	2301      	movs	r3, #1
 801287a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012884:	2b01      	cmp	r3, #1
 8012886:	d965      	bls.n	8012954 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8012888:	e05f      	b.n	801294a <VL53L1_f_028+0xf0>

		swapped = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8012890:	2301      	movs	r3, #1
 8012892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012896:	e051      	b.n	801293c <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 8012898:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801289c:	1e5a      	subs	r2, r3, #1
 801289e:	4613      	mov	r3, r2
 80128a0:	00db      	lsls	r3, r3, #3
 80128a2:	4413      	add	r3, r2
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80128aa:	683a      	ldr	r2, [r7, #0]
 80128ac:	4413      	add	r3, r2
 80128ae:	3304      	adds	r3, #4
 80128b0:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 80128b2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80128b6:	4613      	mov	r3, r2
 80128b8:	00db      	lsls	r3, r3, #3
 80128ba:	4413      	add	r3, r2
 80128bc:	009b      	lsls	r3, r3, #2
 80128be:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80128c2:	683a      	ldr	r2, [r7, #0]
 80128c4:	4413      	add	r3, r2
 80128c6:	3304      	adds	r3, #4
 80128c8:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 80128ca:	79fb      	ldrb	r3, [r7, #7]
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	d118      	bne.n	8012902 <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 80128d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d2:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 80128d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d6:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 80128d8:	429a      	cmp	r2, r3
 80128da:	da2a      	bge.n	8012932 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80128dc:	2224      	movs	r2, #36	; 0x24
 80128de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80128e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128e2:	f00c fbf1 	bl	801f0c8 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80128e6:	2224      	movs	r2, #36	; 0x24
 80128e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80128ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128ec:	f00c fbec 	bl	801f0c8 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80128f0:	2224      	movs	r2, #36	; 0x24
 80128f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80128f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80128f6:	f00c fbe7 	bl	801f0c8 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 80128fa:	2301      	movs	r3, #1
 80128fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8012900:	e017      	b.n	8012932 <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 8012902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012904:	699a      	ldr	r2, [r3, #24]
 8012906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012908:	699b      	ldr	r3, [r3, #24]
 801290a:	429a      	cmp	r2, r3
 801290c:	d911      	bls.n	8012932 <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 801290e:	2224      	movs	r2, #36	; 0x24
 8012910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012912:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012914:	f00c fbd8 	bl	801f0c8 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8012918:	2224      	movs	r2, #36	; 0x24
 801291a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801291c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801291e:	f00c fbd3 	bl	801f0c8 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8012922:	2224      	movs	r2, #36	; 0x24
 8012924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012926:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012928:	f00c fbce 	bl	801f0c8 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 801292c:	2301      	movs	r3, #1
 801292e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8012932:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012936:	3301      	adds	r3, #1
 8012938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012942:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012946:	429a      	cmp	r2, r3
 8012948:	d3a6      	bcc.n	8012898 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 801294a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801294e:	2b00      	cmp	r3, #0
 8012950:	d19b      	bne.n	801288a <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 8012952:	e000      	b.n	8012956 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 8012954:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 8012956:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 801295a:	4618      	mov	r0, r3
 801295c:	3740      	adds	r7, #64	; 0x40
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8012962:	b480      	push	{r7}
 8012964:	b087      	sub	sp, #28
 8012966:	af00      	add	r7, sp, #0
 8012968:	4603      	mov	r3, r0
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
 801296e:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012970:	2300      	movs	r3, #0
 8012972:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8012974:	2300      	movs	r3, #0
 8012976:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8012978:	2300      	movs	r3, #0
 801297a:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801297c:	7bfa      	ldrb	r2, [r7, #15]
 801297e:	4613      	mov	r3, r2
 8012980:	00db      	lsls	r3, r3, #3
 8012982:	4413      	add	r3, r2
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	4413      	add	r3, r2
 801298e:	3304      	adds	r3, #4
 8012990:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	2200      	movs	r2, #0
 8012996:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	2200      	movs	r2, #0
 801299c:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	75fb      	strb	r3, [r7, #23]
 80129a4:	e01c      	b.n	80129e0 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	78da      	ldrb	r2, [r3, #3]
 80129aa:	7dfb      	ldrb	r3, [r7, #23]
 80129ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80129b0:	fb01 f202 	mul.w	r2, r1, r2
 80129b4:	1a9b      	subs	r3, r3, r2
 80129b6:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	68da      	ldr	r2, [r3, #12]
 80129bc:	7d79      	ldrb	r1, [r7, #21]
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	3106      	adds	r1, #6
 80129c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80129c6:	441a      	add	r2, r3
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	689a      	ldr	r2, [r3, #8]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	689b      	ldr	r3, [r3, #8]
 80129d4:	441a      	add	r2, r3
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80129da:	7dfb      	ldrb	r3, [r7, #23]
 80129dc:	3301      	adds	r3, #1
 80129de:	75fb      	strb	r3, [r7, #23]
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	791b      	ldrb	r3, [r3, #4]
 80129e4:	7dfa      	ldrb	r2, [r7, #23]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d9dd      	bls.n	80129a6 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	68da      	ldr	r2, [r3, #12]
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	689b      	ldr	r3, [r3, #8]
 80129f2:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 80129f8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	371c      	adds	r7, #28
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8012a08:	b590      	push	{r4, r7, lr}
 8012a0a:	b08d      	sub	sp, #52	; 0x34
 8012a0c:	af02      	add	r7, sp, #8
 8012a0e:	60ba      	str	r2, [r7, #8]
 8012a10:	607b      	str	r3, [r7, #4]
 8012a12:	4603      	mov	r3, r0
 8012a14:	73fb      	strb	r3, [r7, #15]
 8012a16:	460b      	mov	r3, r1
 8012a18:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8012a20:	2300      	movs	r3, #0
 8012a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 8012a26:	2300      	movs	r3, #0
 8012a28:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 8012a32:	2300      	movs	r3, #0
 8012a34:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012a36:	7bfa      	ldrb	r2, [r7, #15]
 8012a38:	4613      	mov	r3, r2
 8012a3a:	00db      	lsls	r3, r3, #3
 8012a3c:	4413      	add	r3, r2
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	4413      	add	r3, r2
 8012a48:	3304      	adds	r3, #4
 8012a4a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	789b      	ldrb	r3, [r3, #2]
 8012a50:	2bff      	cmp	r3, #255	; 0xff
 8012a52:	d102      	bne.n	8012a5a <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	2201      	movs	r2, #1
 8012a58:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	789b      	ldrb	r3, [r3, #2]
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	78d2      	ldrb	r2, [r2, #3]
 8012a62:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a66:	fb01 f202 	mul.w	r2, r1, r2
 8012a6a:	1a9b      	subs	r3, r3, r2
 8012a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8012a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a74:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	8c3b      	ldrh	r3, [r7, #32]
 8012a7e:	4413      	add	r3, r2
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 8012a84:	8c3a      	ldrh	r2, [r7, #32]
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	789b      	ldrb	r3, [r3, #2]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	1ad3      	subs	r3, r2, r3
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 8012a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a96:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	791b      	ldrb	r3, [r3, #4]
 8012a9c:	b29a      	uxth	r2, r3
 8012a9e:	8bfb      	ldrh	r3, [r7, #30]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 8012aa6:	8bfa      	ldrh	r2, [r7, #30]
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	789b      	ldrb	r3, [r3, #2]
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	1ad3      	subs	r3, r2, r3
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 8012ab4:	8bfa      	ldrh	r2, [r7, #30]
 8012ab6:	8c3b      	ldrh	r3, [r7, #32]
 8012ab8:	1ad3      	subs	r3, r2, r3
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 8012abe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012ac2:	2b03      	cmp	r3, #3
 8012ac4:	dd01      	ble.n	8012aca <VL53L1_f_027+0xc2>
		window_width = 3;
 8012ac6:	2303      	movs	r3, #3
 8012ac8:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8012aca:	8c3a      	ldrh	r2, [r7, #32]
 8012acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ace:	4413      	add	r3, r2
 8012ad0:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 8012ad2:	b219      	sxth	r1, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	78da      	ldrb	r2, [r3, #3]
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	3314      	adds	r3, #20
 8012adc:	7bbc      	ldrb	r4, [r7, #14]
 8012ade:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8012ae2:	9301      	str	r3, [sp, #4]
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	4623      	mov	r3, r4
 8012aea:	f000 f846 	bl	8012b7a <VL53L1_f_030>
 8012aee:	4603      	mov	r3, r0
 8012af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 8012af4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d114      	bne.n	8012b26 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8012afc:	8bfa      	ldrh	r2, [r7, #30]
 8012afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b00:	1ad3      	subs	r3, r2, r3
 8012b02:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 8012b04:	b218      	sxth	r0, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	78da      	ldrb	r2, [r3, #3]
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	331c      	adds	r3, #28
 8012b0e:	7bbc      	ldrb	r4, [r7, #14]
 8012b10:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8012b14:	9301      	str	r3, [sp, #4]
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	4623      	mov	r3, r4
 8012b1c:	f000 f82d 	bl	8012b7a <VL53L1_f_030>
 8012b20:	4603      	mov	r3, r0
 8012b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	695a      	ldr	r2, [r3, #20]
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	69db      	ldr	r3, [r3, #28]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d909      	bls.n	8012b46 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	695b      	ldr	r3, [r3, #20]
 8012b36:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	69da      	ldr	r2, [r3, #28]
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	69ba      	ldr	r2, [r7, #24]
 8012b44:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	699a      	ldr	r2, [r3, #24]
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	695b      	ldr	r3, [r3, #20]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d203      	bcs.n	8012b5a <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	699a      	ldr	r2, [r3, #24]
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	699a      	ldr	r2, [r3, #24]
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	69db      	ldr	r3, [r3, #28]
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d903      	bls.n	8012b6e <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	699a      	ldr	r2, [r3, #24]
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 8012b6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	372c      	adds	r7, #44	; 0x2c
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd90      	pop	{r4, r7, pc}

08012b7a <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8012b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7e:	b09d      	sub	sp, #116	; 0x74
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	461c      	mov	r4, r3
 8012b84:	4603      	mov	r3, r0
 8012b86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8012b8a:	460b      	mov	r3, r1
 8012b8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8012b90:	4613      	mov	r3, r2
 8012b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b96:	4623      	mov	r3, r4
 8012b98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 8012bae:	f04f 0200 	mov.w	r2, #0
 8012bb2:	f04f 0300 	mov.w	r3, #0
 8012bb6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8012bba:	f04f 0200 	mov.w	r2, #0
 8012bbe:	f04f 0300 	mov.w	r3, #0
 8012bc2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 8012bc6:	f04f 0200 	mov.w	r2, #0
 8012bca:	f04f 0300 	mov.w	r3, #0
 8012bce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 8012bd2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012bda:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8012bdc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	f000 809c 	beq.w	8012d1e <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8012be6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012bea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8012bee:	e08f      	b.n	8012d10 <VL53L1_f_030+0x196>

		if (lb < 0)
 8012bf0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	da09      	bge.n	8012c0c <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8012bf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012c02:	4413      	add	r3, r2
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8012c0a:	e00a      	b.n	8012c22 <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8012c0c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8012c10:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8012c14:	fb91 f3f2 	sdiv	r3, r1, r2
 8012c18:	fb02 f303 	mul.w	r3, r2, r3
 8012c1c:	1acb      	subs	r3, r1, r3
 8012c1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 8012c22:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	db6b      	blt.n	8012d02 <VL53L1_f_030+0x188>
 8012c2a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012c2e:	2b17      	cmp	r3, #23
 8012c30:	dc67      	bgt.n	8012d02 <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 8012c32:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012c36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012c3a:	3306      	adds	r3, #6
 8012c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c40:	17da      	asrs	r2, r3, #31
 8012c42:	633b      	str	r3, [r7, #48]	; 0x30
 8012c44:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 8012c46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012c4e:	17da      	asrs	r2, r3, #31
 8012c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c52:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 8012c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	1a9b      	subs	r3, r3, r2
 8012c5e:	623b      	str	r3, [r7, #32]
 8012c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c62:	460a      	mov	r2, r1
 8012c64:	eb63 0302 	sbc.w	r3, r3, r2
 8012c68:	627b      	str	r3, [r7, #36]	; 0x24
 8012c6a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012c6e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 8012c72:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d009      	beq.n	8012c8e <VL53L1_f_030+0x114>
 8012c7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	da05      	bge.n	8012c8e <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 8012c82:	f04f 0200 	mov.w	r2, #0
 8012c86:	f04f 0300 	mov.w	r3, #0
 8012c8a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 8012c8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8012c92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012c96:	1884      	adds	r4, r0, r2
 8012c98:	61bc      	str	r4, [r7, #24]
 8012c9a:	eb41 0303 	adc.w	r3, r1, r3
 8012c9e:	61fb      	str	r3, [r7, #28]
 8012ca0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8012ca4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 8012ca8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012cac:	17da      	asrs	r2, r3, #31
 8012cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012cb2:	f04f 0200 	mov.w	r2, #0
 8012cb6:	f04f 0300 	mov.w	r3, #0
 8012cba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012cbc:	02cb      	lsls	r3, r1, #11
 8012cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cc0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8012cc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cc6:	02ca      	lsls	r2, r1, #11
 8012cc8:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8012ccc:	f143 0600 	adc.w	r6, r3, #0
 8012cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cd2:	fb06 f203 	mul.w	r2, r6, r3
 8012cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012cd8:	fb05 f303 	mul.w	r3, r5, r3
 8012cdc:	441a      	add	r2, r3
 8012cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ce0:	fba3 ab05 	umull	sl, fp, r3, r5
 8012ce4:	eb02 030b 	add.w	r3, r2, fp
 8012ce8:	469b      	mov	fp, r3
			weighted_sum +=
 8012cea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012cee:	eb12 010a 	adds.w	r1, r2, sl
 8012cf2:	6139      	str	r1, [r7, #16]
 8012cf4:	eb43 030b 	adc.w	r3, r3, fp
 8012cf8:	617b      	str	r3, [r7, #20]
 8012cfa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012cfe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8012d02:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	3301      	adds	r3, #1
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8012d10:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8012d14:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	f77f af69 	ble.w	8012bf0 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 8012d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012d22:	2a01      	cmp	r2, #1
 8012d24:	f173 0300 	sbcs.w	r3, r3, #0
 8012d28:	db3b      	blt.n	8012da2 <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 8012d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012d2e:	0fd9      	lsrs	r1, r3, #31
 8012d30:	2000      	movs	r0, #0
 8012d32:	60b9      	str	r1, [r7, #8]
 8012d34:	60f8      	str	r0, [r7, #12]
 8012d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012d3a:	4621      	mov	r1, r4
 8012d3c:	eb11 0802 	adds.w	r8, r1, r2
 8012d40:	4629      	mov	r1, r5
 8012d42:	eb41 0903 	adc.w	r9, r1, r3
 8012d46:	f04f 0200 	mov.w	r2, #0
 8012d4a:	f04f 0300 	mov.w	r3, #0
 8012d4e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8012d52:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8012d56:	ea4f 0369 	mov.w	r3, r9, asr #1
 8012d5a:	4610      	mov	r0, r2
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012d62:	1814      	adds	r4, r2, r0
 8012d64:	603c      	str	r4, [r7, #0]
 8012d66:	414b      	adcs	r3, r1
 8012d68:	607b      	str	r3, [r7, #4]
 8012d6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012d6e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8012d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012d76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8012d7a:	f7ed feed 	bl	8000b58 <__aeabi_ldivmod>
 8012d7e:	4602      	mov	r2, r0
 8012d80:	460b      	mov	r3, r1
 8012d82:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 8012d86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	da05      	bge.n	8012d9a <VL53L1_f_030+0x220>
			weighted_sum = 0;
 8012d8e:	f04f 0200 	mov.w	r2, #0
 8012d92:	f04f 0300 	mov.w	r3, #0
 8012d96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8012d9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012da0:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8012da2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3774      	adds	r7, #116	; 0x74
 8012daa:	46bd      	mov	sp, r7
 8012dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012db0 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60b9      	str	r1, [r7, #8]
 8012db8:	607a      	str	r2, [r7, #4]
 8012dba:	603b      	str	r3, [r7, #0]
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8012dcc:	7bfa      	ldrb	r2, [r7, #15]
 8012dce:	4613      	mov	r3, r2
 8012dd0:	00db      	lsls	r3, r3, #3
 8012dd2:	4413      	add	r3, r2
 8012dd4:	009b      	lsls	r3, r3, #2
 8012dd6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	4413      	add	r3, r2
 8012dde:	3304      	adds	r3, #4
 8012de0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 8012de2:	22ac      	movs	r2, #172	; 0xac
 8012de4:	68b9      	ldr	r1, [r7, #8]
 8012de6:	6a38      	ldr	r0, [r7, #32]
 8012de8:	f00c f96e 	bl	801f0c8 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012df2:	75fb      	strb	r3, [r7, #23]
 8012df4:	e020      	b.n	8012e38 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	7dfa      	ldrb	r2, [r7, #23]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d304      	bcc.n	8012e0a <VL53L1_f_023+0x5a>
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	791b      	ldrb	r3, [r3, #4]
 8012e04:	7dfa      	ldrb	r2, [r7, #23]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d913      	bls.n	8012e32 <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	78da      	ldrb	r2, [r3, #3]
 8012e0e:	7dfb      	ldrb	r3, [r7, #23]
 8012e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e14:	fb01 f202 	mul.w	r2, r1, r2
 8012e18:	1a9b      	subs	r3, r3, r2
 8012e1a:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8012e1c:	6a3b      	ldr	r3, [r7, #32]
 8012e1e:	7a9b      	ldrb	r3, [r3, #10]
 8012e20:	7d7a      	ldrb	r2, [r7, #21]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d205      	bcs.n	8012e32 <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8012e26:	7d7a      	ldrb	r2, [r7, #21]
 8012e28:	6a3b      	ldr	r3, [r7, #32]
 8012e2a:	3206      	adds	r2, #6
 8012e2c:	6839      	ldr	r1, [r7, #0]
 8012e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 8012e32:	7dfb      	ldrb	r3, [r7, #23]
 8012e34:	3301      	adds	r3, #1
 8012e36:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8012e38:	7dfa      	ldrb	r2, [r7, #23]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012e40:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8012e46:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	dbd4      	blt.n	8012df6 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012e4c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3718      	adds	r7, #24
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8012e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5c:	b096      	sub	sp, #88	; 0x58
 8012e5e:	af08      	add	r7, sp, #32
 8012e60:	4604      	mov	r4, r0
 8012e62:	4608      	mov	r0, r1
 8012e64:	4611      	mov	r1, r2
 8012e66:	461a      	mov	r2, r3
 8012e68:	4623      	mov	r3, r4
 8012e6a:	73fb      	strb	r3, [r7, #15]
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	73bb      	strb	r3, [r7, #14]
 8012e70:	460b      	mov	r3, r1
 8012e72:	737b      	strb	r3, [r7, #13]
 8012e74:	4613      	mov	r3, r2
 8012e76:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 8012e84:	2300      	movs	r3, #0
 8012e86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 8012e92:	2300      	movs	r3, #0
 8012e94:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 8012e96:	2300      	movs	r3, #0
 8012e98:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8012eaa:	7b7b      	ldrb	r3, [r7, #13]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d106      	bne.n	8012ebe <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 8012eb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012eb6:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8012eb8:	f06f 030e 	mvn.w	r3, #14
 8012ebc:	e06f      	b.n	8012f9e <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 8012ebe:	7bfb      	ldrb	r3, [r7, #15]
 8012ec0:	7b7a      	ldrb	r2, [r7, #13]
 8012ec2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ec6:	fb01 f202 	mul.w	r2, r1, r2
 8012eca:	1a9b      	subs	r3, r3, r2
 8012ecc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 8012ed0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012ed4:	7b39      	ldrb	r1, [r7, #12]
 8012ed6:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8012eda:	f107 0320 	add.w	r3, r7, #32
 8012ede:	9301      	str	r3, [sp, #4]
 8012ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012eea:	f000 fddb 	bl	8013aa4 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 8012eee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012ef2:	7b39      	ldrb	r1, [r7, #12]
 8012ef4:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8012ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012efc:	9301      	str	r3, [sp, #4]
 8012efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	4613      	mov	r3, r2
 8012f06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f08:	f000 fdcc 	bl	8013aa4 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8012f0c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d00e      	beq.n	8012f32 <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8012f14:	f107 021c 	add.w	r2, r7, #28
 8012f18:	7b39      	ldrb	r1, [r7, #12]
 8012f1a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8012f1e:	f107 0314 	add.w	r3, r7, #20
 8012f22:	9301      	str	r3, [sp, #4]
 8012f24:	f107 0318 	add.w	r3, r7, #24
 8012f28:	9300      	str	r3, [sp, #0]
 8012f2a:	4613      	mov	r3, r2
 8012f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f2e:	f000 fdb9 	bl	8013aa4 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 8012f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f34:	469c      	mov	ip, r3
 8012f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f38:	469e      	mov	lr, r3
 8012f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f3c:	4698      	mov	r8, r3
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f40:	4619      	mov	r1, r3
 8012f42:	6a3b      	ldr	r3, [r7, #32]
 8012f44:	461c      	mov	r4, r3
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	461d      	mov	r5, r3
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	461e      	mov	r6, r3
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 8012f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8012f58:	607b      	str	r3, [r7, #4]
 8012f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f5c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8012f60:	7bb8      	ldrb	r0, [r7, #14]
 8012f62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012f64:	9207      	str	r2, [sp, #28]
 8012f66:	9306      	str	r3, [sp, #24]
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	9205      	str	r2, [sp, #20]
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	9304      	str	r3, [sp, #16]
 8012f70:	9603      	str	r6, [sp, #12]
 8012f72:	9502      	str	r5, [sp, #8]
 8012f74:	9401      	str	r4, [sp, #4]
 8012f76:	9100      	str	r1, [sp, #0]
 8012f78:	4643      	mov	r3, r8
 8012f7a:	4672      	mov	r2, lr
 8012f7c:	4661      	mov	r1, ip
 8012f7e:	f002 ff30 	bl	8015de2 <VL53L1_f_014>
 8012f82:	4603      	mov	r3, r0
 8012f84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8012f88:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8012f8c:	f113 0f0f 	cmn.w	r3, #15
 8012f90:	d103      	bne.n	8012f9a <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 8012f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f98:	801a      	strh	r2, [r3, #0]


	return status;
 8012f9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3738      	adds	r7, #56	; 0x38
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fa8 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8012fa8:	b490      	push	{r4, r7}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	4604      	mov	r4, r0
 8012fb0:	4608      	mov	r0, r1
 8012fb2:	4611      	mov	r1, r2
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	4623      	mov	r3, r4
 8012fb8:	71fb      	strb	r3, [r7, #7]
 8012fba:	4603      	mov	r3, r0
 8012fbc:	71bb      	strb	r3, [r7, #6]
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	717b      	strb	r3, [r7, #5]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 8012fce:	6a3b      	ldr	r3, [r7, #32]
 8012fd0:	79fa      	ldrb	r2, [r7, #7]
 8012fd2:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 8012fd4:	6a3b      	ldr	r3, [r7, #32]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8012fda:	69fb      	ldr	r3, [r7, #28]
 8012fdc:	781a      	ldrb	r2, [r3, #0]
 8012fde:	6a3b      	ldr	r3, [r7, #32]
 8012fe0:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	785a      	ldrb	r2, [r3, #1]
 8012fe6:	6a3b      	ldr	r3, [r7, #32]
 8012fe8:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8012fea:	69fb      	ldr	r3, [r7, #28]
 8012fec:	789a      	ldrb	r2, [r3, #2]
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	78da      	ldrb	r2, [r3, #3]
 8012ff6:	6a3b      	ldr	r3, [r7, #32]
 8012ff8:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	791a      	ldrb	r2, [r3, #4]
 8012ffe:	6a3b      	ldr	r3, [r7, #32]
 8013000:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 8013002:	69fb      	ldr	r3, [r7, #28]
 8013004:	795a      	ldrb	r2, [r3, #5]
 8013006:	6a3b      	ldr	r3, [r7, #32]
 8013008:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	791a      	ldrb	r2, [r3, #4]
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	b2db      	uxtb	r3, r3
 8013016:	3301      	adds	r3, #1
 8013018:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 801301a:	6a3b      	ldr	r3, [r7, #32]
 801301c:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8013024:	6a3b      	ldr	r3, [r7, #32]
 8013026:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8013028:	69fb      	ldr	r3, [r7, #28]
 801302a:	8c1a      	ldrh	r2, [r3, #32]
 801302c:	6a3b      	ldr	r3, [r7, #32]
 801302e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	695b      	ldr	r3, [r3, #20]
 8013034:	b29a      	uxth	r2, r3
 8013036:	6a3b      	ldr	r3, [r7, #32]
 8013038:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 801303a:	69fb      	ldr	r3, [r7, #28]
 801303c:	699b      	ldr	r3, [r3, #24]
 801303e:	b29a      	uxth	r2, r3
 8013040:	6a3b      	ldr	r3, [r7, #32]
 8013042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8013046:	69fb      	ldr	r3, [r7, #28]
 8013048:	69db      	ldr	r3, [r3, #28]
 801304a:	b29a      	uxth	r2, r3
 801304c:	6a3b      	ldr	r3, [r7, #32]
 801304e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	461a      	mov	r2, r3
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	691a      	ldr	r2, [r3, #16]
 8013060:	6a3b      	ldr	r3, [r7, #32]
 8013062:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	689b      	ldr	r3, [r3, #8]
 8013068:	461a      	mov	r2, r3
 801306a:	6a3b      	ldr	r3, [r7, #32]
 801306c:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8013074:	6a3b      	ldr	r3, [r7, #32]
 8013076:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8013078:	6a3b      	ldr	r3, [r7, #32]
 801307a:	2213      	movs	r2, #19
 801307c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8013080:	887b      	ldrh	r3, [r7, #2]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d00a      	beq.n	801309c <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 8013086:	69fb      	ldr	r3, [r7, #28]
 8013088:	8c1b      	ldrh	r3, [r3, #32]
 801308a:	461a      	mov	r2, r3
 801308c:	887b      	ldrh	r3, [r7, #2]
 801308e:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8013090:	429a      	cmp	r2, r3
 8013092:	d903      	bls.n	801309c <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8013094:	6a3b      	ldr	r3, [r7, #32]
 8013096:	2206      	movs	r2, #6
 8013098:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 801309c:	79bb      	ldrb	r3, [r7, #6]
 801309e:	b29b      	uxth	r3, r3
 80130a0:	021b      	lsls	r3, r3, #8
 80130a2:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80130a4:	6a3b      	ldr	r3, [r7, #32]
 80130a6:	8a9b      	ldrh	r3, [r3, #20]
 80130a8:	89fa      	ldrh	r2, [r7, #14]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d205      	bcs.n	80130ba <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80130ae:	6a3b      	ldr	r3, [r7, #32]
 80130b0:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80130b2:	89fb      	ldrh	r3, [r7, #14]
 80130b4:	1ad3      	subs	r3, r2, r3
 80130b6:	81fb      	strh	r3, [r7, #14]
 80130b8:	e001      	b.n	80130be <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80130ba:	2300      	movs	r3, #0
 80130bc:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80130be:	797b      	ldrb	r3, [r7, #5]
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	021b      	lsls	r3, r3, #8
 80130c4:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80130cc:	89bb      	ldrh	r3, [r7, #12]
 80130ce:	4413      	add	r3, r2
 80130d0:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80130d2:	6a3b      	ldr	r3, [r7, #32]
 80130d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80130d8:	89fa      	ldrh	r2, [r7, #14]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d805      	bhi.n	80130ea <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 80130de:	6a3b      	ldr	r3, [r7, #32]
 80130e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80130e4:	89ba      	ldrh	r2, [r7, #12]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d203      	bcs.n	80130f2 <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 80130ea:	6a3b      	ldr	r3, [r7, #32]
 80130ec:	2205      	movs	r2, #5
 80130ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 80130f2:	bf00      	nop
 80130f4:	3710      	adds	r7, #16
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bc90      	pop	{r4, r7}
 80130fa:	4770      	bx	lr

080130fc <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 80130fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130fe:	b08f      	sub	sp, #60	; 0x3c
 8013100:	af06      	add	r7, sp, #24
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
 8013108:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801310a:	2300      	movs	r3, #0
 801310c:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 801310e:	2300      	movs	r3, #0
 8013110:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 8013112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013114:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8013118:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 801311a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801311c:	f7ff f856 	bl	80121cc <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8013120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013122:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8013126:	22ac      	movs	r2, #172	; 0xac
 8013128:	6839      	ldr	r1, [r7, #0]
 801312a:	4618      	mov	r0, r3
 801312c:	f00b ffcc 	bl	801f0c8 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	781a      	ldrb	r2, [r3, #0]
 8013134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013136:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	785a      	ldrb	r2, [r3, #1]
 801313c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801313e:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	789a      	ldrb	r2, [r3, #2]
 8013144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013146:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 801314e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013150:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8013152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013154:	2200      	movs	r2, #0
 8013156:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8013158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801315a:	2204      	movs	r2, #4
 801315c:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 801315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013160:	2200      	movs	r2, #0
 8013162:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8013164:	2300      	movs	r3, #0
 8013166:	77bb      	strb	r3, [r7, #30]
 8013168:	e008      	b.n	801317c <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 801316a:	7fbb      	ldrb	r3, [r7, #30]
 801316c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	4413      	add	r3, r2
 8013172:	2200      	movs	r2, #0
 8013174:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8013176:	7fbb      	ldrb	r3, [r7, #30]
 8013178:	3301      	adds	r3, #1
 801317a:	77bb      	strb	r3, [r7, #30]
 801317c:	7fbb      	ldrb	r3, [r7, #30]
 801317e:	2b04      	cmp	r3, #4
 8013180:	d9f3      	bls.n	801316a <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8013182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013184:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8013188:	4618      	mov	r0, r3
 801318a:	f7fd ff58 	bl	801103e <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8013192:	461a      	mov	r2, r3
 8013194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013196:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801319a:	4619      	mov	r1, r3
 801319c:	4610      	mov	r0, r2
 801319e:	f7fd ff8e 	bl	80110be <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 80131a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7fe fb66 	bl	801187a <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 80131ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131b0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7fd fffc 	bl	80111b2 <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d009      	beq.n	80131d8 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 80131c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131c6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80131ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131cc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80131d0:	461a      	mov	r2, r3
 80131d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80131d4:	f000 fdae 	bl	8013d34 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 80131e0:	2300      	movs	r3, #0
 80131e2:	77bb      	strb	r3, [r7, #30]
 80131e4:	e01e      	b.n	8013224 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 80131e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d117      	bne.n	801321e <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 80131ee:	7fbb      	ldrb	r3, [r7, #30]
 80131f0:	68ba      	ldr	r2, [r7, #8]
 80131f2:	3304      	adds	r3, #4
 80131f4:	005b      	lsls	r3, r3, #1
 80131f6:	4413      	add	r3, r2
 80131f8:	8898      	ldrh	r0, [r3, #4]
 80131fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131fc:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8013200:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8013202:	005b      	lsls	r3, r3, #1
 8013204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013206:	4413      	add	r3, r2
 8013208:	3304      	adds	r3, #4
 801320a:	9301      	str	r3, [sp, #4]
 801320c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801320e:	9300      	str	r3, [sp, #0]
 8013210:	460b      	mov	r3, r1
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	68f9      	ldr	r1, [r7, #12]
 8013216:	f7fe fb7b 	bl	8011910 <VL53L1_f_001>
 801321a:	4603      	mov	r3, r0
 801321c:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 801321e:	7fbb      	ldrb	r3, [r7, #30]
 8013220:	3301      	adds	r3, #1
 8013222:	77bb      	strb	r3, [r7, #30]
 8013224:	7fbb      	ldrb	r3, [r7, #30]
 8013226:	2b04      	cmp	r3, #4
 8013228:	d9dd      	bls.n	80131e6 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 801322a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d11a      	bne.n	8013268 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 801323a:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8013246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013248:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801324c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801324e:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8013252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013254:	9102      	str	r1, [sp, #8]
 8013256:	9201      	str	r2, [sp, #4]
 8013258:	9300      	str	r3, [sp, #0]
 801325a:	462b      	mov	r3, r5
 801325c:	4622      	mov	r2, r4
 801325e:	4631      	mov	r1, r6
 8013260:	f7ff f82d 	bl	80122be <VL53L1_f_018>
 8013264:	4603      	mov	r3, r0
 8013266:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8013268:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d104      	bne.n	801327a <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8013270:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013272:	f7ff f954 	bl	801251e <VL53L1_f_019>
 8013276:	4603      	mov	r3, r0
 8013278:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 801327a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d104      	bne.n	801328c <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8013282:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013284:	f7ff f999 	bl	80125ba <VL53L1_f_020>
 8013288:	4603      	mov	r3, r0
 801328a:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 801328c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d104      	bne.n	801329e <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8013294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013296:	f7ff fa0e 	bl	80126b6 <VL53L1_f_021>
 801329a:	4603      	mov	r3, r0
 801329c:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 801329e:	2300      	movs	r3, #0
 80132a0:	77bb      	strb	r3, [r7, #30]
 80132a2:	e0a6      	b.n	80133f2 <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 80132a4:	7fba      	ldrb	r2, [r7, #30]
 80132a6:	4613      	mov	r3, r2
 80132a8:	00db      	lsls	r3, r3, #3
 80132aa:	4413      	add	r3, r2
 80132ac:	009b      	lsls	r3, r3, #2
 80132ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80132b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132b4:	4413      	add	r3, r2
 80132b6:	3304      	adds	r3, #4
 80132b8:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 80132ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d109      	bne.n	80132d6 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 80132c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132c4:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80132c8:	7fbb      	ldrb	r3, [r7, #30]
 80132ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7ff fb48 	bl	8012962 <VL53L1_f_022>
 80132d2:	4603      	mov	r3, r0
 80132d4:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 80132d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d110      	bne.n	8013300 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 80132de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132e0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80132ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132ec:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80132f0:	7fb8      	ldrb	r0, [r7, #30]
 80132f2:	9300      	str	r3, [sp, #0]
 80132f4:	4613      	mov	r3, r2
 80132f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132f8:	f7ff fd5a 	bl	8012db0 <VL53L1_f_023>
 80132fc:	4603      	mov	r3, r0
 80132fe:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8013300:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d10d      	bne.n	8013324 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8013308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801330a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013310:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8013314:	7fb8      	ldrb	r0, [r7, #30]
 8013316:	9300      	str	r3, [sp, #0]
 8013318:	2300      	movs	r3, #0
 801331a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801331c:	f7ff fd48 	bl	8012db0 <VL53L1_f_023>
 8013320:	4603      	mov	r3, r0
 8013322:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8013324:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d10d      	bne.n	8013348 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 801332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801332e:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8013332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013334:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8013338:	7fb8      	ldrb	r0, [r7, #30]
 801333a:	9300      	str	r3, [sp, #0]
 801333c:	2300      	movs	r3, #0
 801333e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013340:	f7ff fd36 	bl	8012db0 <VL53L1_f_023>
 8013344:	4603      	mov	r3, r0
 8013346:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8013348:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d109      	bne.n	8013364 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8013350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013352:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8013356:	7fb8      	ldrb	r0, [r7, #30]
 8013358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801335a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801335c:	f000 f8dd 	bl	801351a <VL53L1_f_034>
 8013360:	4603      	mov	r3, r0
 8013362:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8013364:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d108      	bne.n	801337e <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	8a19      	ldrh	r1, [r3, #16]
 8013370:	7fb8      	ldrb	r0, [r7, #30]
 8013372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013376:	f000 f95c 	bl	8013632 <VL53L1_f_035>
 801337a:	4603      	mov	r3, r0
 801337c:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 801337e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d124      	bne.n	80133d0 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	789d      	ldrb	r5, [r3, #2]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	7e1e      	ldrb	r6, [r3, #24]
 801338e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013390:	f893 c003 	ldrb.w	ip, [r3, #3]
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	f893 e006 	ldrb.w	lr, [r3, #6]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133a2:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 80133a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80133a8:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 80133ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80133ae:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 80133b2:	697c      	ldr	r4, [r7, #20]
 80133b4:	3420      	adds	r4, #32
 80133b6:	9404      	str	r4, [sp, #16]
 80133b8:	9003      	str	r0, [sp, #12]
 80133ba:	9102      	str	r1, [sp, #8]
 80133bc:	9201      	str	r2, [sp, #4]
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	4673      	mov	r3, lr
 80133c2:	4662      	mov	r2, ip
 80133c4:	4631      	mov	r1, r6
 80133c6:	4628      	mov	r0, r5
 80133c8:	f7ff fd46 	bl	8012e58 <VL53L1_f_026>
 80133cc:	4603      	mov	r3, r0
 80133ce:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 80133d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d109      	bne.n	80133ec <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 80133d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133da:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 80133de:	7fb8      	ldrb	r0, [r7, #30]
 80133e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133e2:	2101      	movs	r1, #1
 80133e4:	f7ff fb10 	bl	8012a08 <VL53L1_f_027>
 80133e8:	4603      	mov	r3, r0
 80133ea:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80133ec:	7fbb      	ldrb	r3, [r7, #30]
 80133ee:	3301      	adds	r3, #1
 80133f0:	77bb      	strb	r3, [r7, #30]
 80133f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133f4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80133f8:	7fba      	ldrb	r2, [r7, #30]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	f4ff af52 	bcc.w	80132a4 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8013400:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d107      	bne.n	8013418 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	785b      	ldrb	r3, [r3, #1]
 801340c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801340e:	4618      	mov	r0, r3
 8013410:	f7ff fa23 	bl	801285a <VL53L1_f_028>
 8013414:	4603      	mov	r3, r0
 8013416:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8013418:	2300      	movs	r3, #0
 801341a:	77bb      	strb	r3, [r7, #30]
 801341c:	e071      	b.n	8013502 <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 801341e:	7fba      	ldrb	r2, [r7, #30]
 8013420:	4613      	mov	r3, r2
 8013422:	00db      	lsls	r3, r3, #3
 8013424:	4413      	add	r3, r2
 8013426:	009b      	lsls	r3, r3, #2
 8013428:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801342c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801342e:	4413      	add	r3, r2
 8013430:	3304      	adds	r3, #4
 8013432:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8013434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013436:	7c9a      	ldrb	r2, [r3, #18]
 8013438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801343a:	7c5b      	ldrb	r3, [r3, #17]
 801343c:	429a      	cmp	r2, r3
 801343e:	d25c      	bcs.n	80134fa <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8013448:	429a      	cmp	r2, r3
 801344a:	dd57      	ble.n	80134fc <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8013450:	2bff      	cmp	r3, #255	; 0xff
 8013452:	d053      	beq.n	80134fc <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8013454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013456:	7c9b      	ldrb	r3, [r3, #18]
 8013458:	461a      	mov	r2, r3
			prange_data =
 801345a:	234c      	movs	r3, #76	; 0x4c
 801345c:	fb02 f303 	mul.w	r3, r2, r3
 8013460:	3310      	adds	r3, #16
 8013462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013464:	4413      	add	r3, r2
 8013466:	3304      	adds	r3, #4
 8013468:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 801346a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d115      	bne.n	801349e <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8013472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013474:	7c98      	ldrb	r0, [r3, #18]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f893 1020 	ldrb.w	r1, [r3, #32]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	8b5d      	ldrh	r5, [r3, #26]
 8013486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013488:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801348c:	693a      	ldr	r2, [r7, #16]
 801348e:	9202      	str	r2, [sp, #8]
 8013490:	697a      	ldr	r2, [r7, #20]
 8013492:	9201      	str	r2, [sp, #4]
 8013494:	9300      	str	r3, [sp, #0]
 8013496:	462b      	mov	r3, r5
 8013498:	4622      	mov	r2, r4
 801349a:	f7ff fd85 	bl	8012fa8 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 801349e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d115      	bne.n	80134d2 <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 80134ac:	69bb      	ldr	r3, [r7, #24]
 80134ae:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80134b2:	69bb      	ldr	r3, [r7, #24]
 80134b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80134b8:	69bb      	ldr	r3, [r7, #24]
 80134ba:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 80134be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80134c2:	9301      	str	r3, [sp, #4]
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	4623      	mov	r3, r4
 80134ca:	f000 fb44 	bl	8013b56 <VL53L1_f_011>
 80134ce:	4603      	mov	r3, r0
 80134d0:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 80134d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d108      	bne.n	80134ec <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	8bd8      	ldrh	r0, [r3, #30]
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80134e4:	693a      	ldr	r2, [r7, #16]
 80134e6:	4619      	mov	r1, r3
 80134e8:	f000 fbda 	bl	8013ca0 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 80134ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134ee:	7c9b      	ldrb	r3, [r3, #18]
 80134f0:	3301      	adds	r3, #1
 80134f2:	b2da      	uxtb	r2, r3
 80134f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134f6:	749a      	strb	r2, [r3, #18]
 80134f8:	e000      	b.n	80134fc <VL53L1_f_033+0x400>
			continue;
 80134fa:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80134fc:	7fbb      	ldrb	r3, [r7, #30]
 80134fe:	3301      	adds	r3, #1
 8013500:	77bb      	strb	r3, [r7, #30]
 8013502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013504:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8013508:	7fba      	ldrb	r2, [r7, #30]
 801350a:	429a      	cmp	r2, r3
 801350c:	d387      	bcc.n	801341e <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 801350e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013512:	4618      	mov	r0, r3
 8013514:	3724      	adds	r7, #36	; 0x24
 8013516:	46bd      	mov	sp, r7
 8013518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801351a <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 801351a:	b580      	push	{r7, lr}
 801351c:	b08c      	sub	sp, #48	; 0x30
 801351e:	af02      	add	r7, sp, #8
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	607a      	str	r2, [r7, #4]
 8013524:	603b      	str	r3, [r7, #0]
 8013526:	4603      	mov	r3, r0
 8013528:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 801352a:	2300      	movs	r3, #0
 801352c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8013530:	7bfa      	ldrb	r2, [r7, #15]
 8013532:	4613      	mov	r3, r2
 8013534:	00db      	lsls	r3, r3, #3
 8013536:	4413      	add	r3, r2
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801353e:	687a      	ldr	r2, [r7, #4]
 8013540:	4413      	add	r3, r2
 8013542:	3304      	adds	r3, #4
 8013544:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8013546:	2300      	movs	r3, #0
 8013548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 801354c:	2300      	movs	r3, #0
 801354e:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8013550:	2300      	movs	r3, #0
 8013552:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8013554:	2300      	movs	r3, #0
 8013556:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8013558:	2300      	movs	r3, #0
 801355a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	785a      	ldrb	r2, [r3, #1]
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	781a      	ldrb	r2, [r3, #0]
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	789a      	ldrb	r2, [r3, #2]
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8013574:	6a3b      	ldr	r3, [r7, #32]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801357c:	e04d      	b.n	801361a <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	78da      	ldrb	r2, [r3, #3]
 8013582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013586:	fbb3 f1f2 	udiv	r1, r3, r2
 801358a:	fb01 f202 	mul.w	r2, r1, r2
 801358e:	1a9b      	subs	r3, r3, r2
 8013590:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8013592:	6a3b      	ldr	r3, [r7, #32]
 8013594:	7999      	ldrb	r1, [r3, #6]
 8013596:	f107 0218 	add.w	r2, r7, #24
 801359a:	7ff8      	ldrb	r0, [r7, #31]
 801359c:	f107 0310 	add.w	r3, r7, #16
 80135a0:	9301      	str	r3, [sp, #4]
 80135a2:	f107 0314 	add.w	r3, r7, #20
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	4613      	mov	r3, r2
 80135aa:	68ba      	ldr	r2, [r7, #8]
 80135ac:	f000 fa7a 	bl	8013aa4 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 80135b0:	7ffb      	ldrb	r3, [r7, #31]
 80135b2:	69ba      	ldr	r2, [r7, #24]
 80135b4:	6839      	ldr	r1, [r7, #0]
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	440b      	add	r3, r1
 80135ba:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 80135bc:	7ffb      	ldrb	r3, [r7, #31]
 80135be:	697a      	ldr	r2, [r7, #20]
 80135c0:	6839      	ldr	r1, [r7, #0]
 80135c2:	3318      	adds	r3, #24
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	440b      	add	r3, r1
 80135c8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 80135ca:	7ffb      	ldrb	r3, [r7, #31]
 80135cc:	693a      	ldr	r2, [r7, #16]
 80135ce:	6839      	ldr	r1, [r7, #0]
 80135d0:	3330      	adds	r3, #48	; 0x30
 80135d2:	009b      	lsls	r3, r3, #2
 80135d4:	440b      	add	r3, r1
 80135d6:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 80135d8:	69ba      	ldr	r2, [r7, #24]
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	689a      	ldr	r2, [r3, #8]
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 80135e6:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 80135e8:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	3348      	adds	r3, #72	; 0x48
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	440b      	add	r3, r1
 80135f2:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 80135f4:	697a      	ldr	r2, [r7, #20]
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	689a      	ldr	r2, [r3, #8]
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8013602:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8013604:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8013606:	6839      	ldr	r1, [r7, #0]
 8013608:	3360      	adds	r3, #96	; 0x60
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	440b      	add	r3, r1
 801360e:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8013610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013614:	3301      	adds	r3, #1
 8013616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801361a:	6a3b      	ldr	r3, [r7, #32]
 801361c:	791b      	ldrb	r3, [r3, #4]
 801361e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013622:	429a      	cmp	r2, r3
 8013624:	d9ab      	bls.n	801357e <VL53L1_f_034+0x64>
	}

	return status;
 8013626:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 801362a:	4618      	mov	r0, r3
 801362c:	3728      	adds	r7, #40	; 0x28
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}

08013632 <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8013632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013634:	b08f      	sub	sp, #60	; 0x3c
 8013636:	af06      	add	r7, sp, #24
 8013638:	60ba      	str	r2, [r7, #8]
 801363a:	607b      	str	r3, [r7, #4]
 801363c:	4603      	mov	r3, r0
 801363e:	73fb      	strb	r3, [r7, #15]
 8013640:	460b      	mov	r3, r1
 8013642:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8013644:	2300      	movs	r3, #0
 8013646:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8013648:	2300      	movs	r3, #0
 801364a:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 801364c:	7bfa      	ldrb	r2, [r7, #15]
 801364e:	4613      	mov	r3, r2
 8013650:	00db      	lsls	r3, r3, #3
 8013652:	4413      	add	r3, r2
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	4413      	add	r3, r2
 801365e:	3304      	adds	r3, #4
 8013660:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8013666:	2300      	movs	r3, #0
 8013668:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 801366a:	2300      	movs	r3, #0
 801366c:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	77fb      	strb	r3, [r7, #31]
 8013674:	e0b9      	b.n	80137ea <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	78da      	ldrb	r2, [r3, #3]
 801367a:	7ffb      	ldrb	r3, [r7, #31]
 801367c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013680:	fb01 f202 	mul.w	r2, r1, r2
 8013684:	1a9b      	subs	r3, r3, r2
 8013686:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8013688:	7ffb      	ldrb	r3, [r7, #31]
 801368a:	3301      	adds	r3, #1
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	78d2      	ldrb	r2, [r2, #3]
 8013690:	fb93 f1f2 	sdiv	r1, r3, r2
 8013694:	fb01 f202 	mul.w	r2, r1, r2
 8013698:	1a9b      	subs	r3, r3, r2
 801369a:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	789b      	ldrb	r3, [r3, #2]
 80136a0:	7dfa      	ldrb	r2, [r7, #23]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	f080 809e 	bcs.w	80137e4 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 80136ac:	7dba      	ldrb	r2, [r7, #22]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	f080 8098 	bcs.w	80137e4 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
 80136b6:	68ba      	ldr	r2, [r7, #8]
 80136b8:	3348      	adds	r3, #72	; 0x48
 80136ba:	009b      	lsls	r3, r3, #2
 80136bc:	4413      	add	r3, r2
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d10e      	bne.n	80136e2 <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 80136c4:	7dfb      	ldrb	r3, [r7, #23]
 80136c6:	68ba      	ldr	r2, [r7, #8]
 80136c8:	3360      	adds	r3, #96	; 0x60
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	4413      	add	r3, r2
 80136ce:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d106      	bne.n	80136e2 <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 80136d4:	7dfb      	ldrb	r3, [r7, #23]
 80136d6:	68ba      	ldr	r2, [r7, #8]
 80136d8:	4413      	add	r3, r2
 80136da:	2200      	movs	r2, #0
 80136dc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80136e0:	e043      	b.n	801376a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 80136e2:	7dfb      	ldrb	r3, [r7, #23]
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	3348      	adds	r3, #72	; 0x48
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	4413      	add	r3, r2
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	db0e      	blt.n	8013710 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 80136f2:	7dfb      	ldrb	r3, [r7, #23]
 80136f4:	68ba      	ldr	r2, [r7, #8]
 80136f6:	3360      	adds	r3, #96	; 0x60
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	4413      	add	r3, r2
 80136fc:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 80136fe:	2b00      	cmp	r3, #0
 8013700:	db06      	blt.n	8013710 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8013702:	7dfb      	ldrb	r3, [r7, #23]
 8013704:	68ba      	ldr	r2, [r7, #8]
 8013706:	4413      	add	r3, r2
 8013708:	2201      	movs	r2, #1
 801370a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801370e:	e02c      	b.n	801376a <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8013710:	7dfb      	ldrb	r3, [r7, #23]
 8013712:	68ba      	ldr	r2, [r7, #8]
 8013714:	3348      	adds	r3, #72	; 0x48
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	4413      	add	r3, r2
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	2b00      	cmp	r3, #0
 801371e:	da1e      	bge.n	801375e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8013720:	7dfb      	ldrb	r3, [r7, #23]
 8013722:	68ba      	ldr	r2, [r7, #8]
 8013724:	3360      	adds	r3, #96	; 0x60
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	4413      	add	r3, r2
 801372a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 801372c:	2b00      	cmp	r3, #0
 801372e:	db16      	blt.n	801375e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8013730:	7dbb      	ldrb	r3, [r7, #22]
 8013732:	68ba      	ldr	r2, [r7, #8]
 8013734:	3348      	adds	r3, #72	; 0x48
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	4413      	add	r3, r2
 801373a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 801373c:	2b00      	cmp	r3, #0
 801373e:	db0e      	blt.n	801375e <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8013740:	7dbb      	ldrb	r3, [r7, #22]
 8013742:	68ba      	ldr	r2, [r7, #8]
 8013744:	3360      	adds	r3, #96	; 0x60
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	4413      	add	r3, r2
 801374a:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 801374c:	2b00      	cmp	r3, #0
 801374e:	da06      	bge.n	801375e <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8013750:	7dfb      	ldrb	r3, [r7, #23]
 8013752:	68ba      	ldr	r2, [r7, #8]
 8013754:	4413      	add	r3, r2
 8013756:	2201      	movs	r2, #1
 8013758:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801375c:	e005      	b.n	801376a <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 801375e:	7dfb      	ldrb	r3, [r7, #23]
 8013760:	68ba      	ldr	r2, [r7, #8]
 8013762:	4413      	add	r3, r2
 8013764:	2200      	movs	r2, #0
 8013766:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 801376a:	7dfb      	ldrb	r3, [r7, #23]
 801376c:	68ba      	ldr	r2, [r7, #8]
 801376e:	4413      	add	r3, r2
 8013770:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8013774:	2b00      	cmp	r3, #0
 8013776:	d035      	beq.n	80137e4 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	7ffa      	ldrb	r2, [r7, #31]
 801377c:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 801377e:	7dfb      	ldrb	r3, [r7, #23]
 8013780:	68ba      	ldr	r2, [r7, #8]
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	4413      	add	r3, r2
 8013786:	685c      	ldr	r4, [r3, #4]
 8013788:	7dfb      	ldrb	r3, [r7, #23]
 801378a:	68ba      	ldr	r2, [r7, #8]
 801378c:	3318      	adds	r3, #24
 801378e:	009b      	lsls	r3, r3, #2
 8013790:	4413      	add	r3, r2
 8013792:	685d      	ldr	r5, [r3, #4]
 8013794:	7dfb      	ldrb	r3, [r7, #23]
 8013796:	68ba      	ldr	r2, [r7, #8]
 8013798:	3330      	adds	r3, #48	; 0x30
 801379a:	009b      	lsls	r3, r3, #2
 801379c:	4413      	add	r3, r2
 801379e:	685e      	ldr	r6, [r3, #4]
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	78d2      	ldrb	r2, [r2, #3]
 80137a8:	69b9      	ldr	r1, [r7, #24]
 80137aa:	3118      	adds	r1, #24
 80137ac:	7ff8      	ldrb	r0, [r7, #31]
 80137ae:	9105      	str	r1, [sp, #20]
 80137b0:	9204      	str	r2, [sp, #16]
 80137b2:	9303      	str	r3, [sp, #12]
 80137b4:	2300      	movs	r3, #0
 80137b6:	9302      	str	r3, [sp, #8]
 80137b8:	2300      	movs	r3, #0
 80137ba:	9301      	str	r3, [sp, #4]
 80137bc:	2300      	movs	r3, #0
 80137be:	9300      	str	r3, [sp, #0]
 80137c0:	4633      	mov	r3, r6
 80137c2:	462a      	mov	r2, r5
 80137c4:	4621      	mov	r1, r4
 80137c6:	f000 f81c 	bl	8013802 <VL53L1_f_036>
 80137ca:	4603      	mov	r3, r0
 80137cc:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 80137ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80137d2:	f113 0f0f 	cmn.w	r3, #15
 80137d6:	d105      	bne.n	80137e4 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 80137d8:	7dfb      	ldrb	r3, [r7, #23]
 80137da:	68ba      	ldr	r2, [r7, #8]
 80137dc:	4413      	add	r3, r2
 80137de:	2200      	movs	r2, #0
 80137e0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 80137e4:	7ffb      	ldrb	r3, [r7, #31]
 80137e6:	3301      	adds	r3, #1
 80137e8:	77fb      	strb	r3, [r7, #31]
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	791b      	ldrb	r3, [r3, #4]
 80137ee:	7ffa      	ldrb	r2, [r7, #31]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	f4ff af40 	bcc.w	8013676 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 80137f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3724      	adds	r7, #36	; 0x24
 80137fe:	46bd      	mov	sp, r7
 8013800:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013802 <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8013802:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013806:	b0b2      	sub	sp, #200	; 0xc8
 8013808:	af00      	add	r7, sp, #0
 801380a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801380e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013816:	4603      	mov	r3, r0
 8013818:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801381c:	23f1      	movs	r3, #241	; 0xf1
 801381e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8013822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013826:	f04f 0300 	mov.w	r3, #0
 801382a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 801382e:	f04f 0200 	mov.w	r2, #0
 8013832:	f04f 0300 	mov.w	r3, #0
 8013836:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 801383a:	f04f 0200 	mov.w	r2, #0
 801383e:	f04f 0300 	mov.w	r3, #0
 8013842:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8013846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801384a:	17da      	asrs	r2, r3, #31
 801384c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8013854:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013858:	17da      	asrs	r2, r3, #31
 801385a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801385e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8013862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801386a:	4602      	mov	r2, r0
 801386c:	ebb3 0802 	subs.w	r8, r3, r2
 8013870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013874:	460a      	mov	r2, r1
 8013876:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 801387a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801387e:	17da      	asrs	r2, r3, #31
 8013880:	67bb      	str	r3, [r7, #120]	; 0x78
 8013882:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013884:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8013888:	460b      	mov	r3, r1
 801388a:	ebb8 0a03 	subs.w	sl, r8, r3
 801388e:	4613      	mov	r3, r2
 8013890:	eb69 0b03 	sbc.w	fp, r9, r3
 8013894:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013898:	17da      	asrs	r2, r3, #31
 801389a:	673b      	str	r3, [r7, #112]	; 0x70
 801389c:	677a      	str	r2, [r7, #116]	; 0x74
 801389e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80138a2:	460b      	mov	r3, r1
 80138a4:	ebba 0403 	subs.w	r4, sl, r3
 80138a8:	4613      	mov	r3, r2
 80138aa:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80138ae:	f04f 0200 	mov.w	r2, #0
 80138b2:	f04f 0300 	mov.w	r3, #0
 80138b6:	032b      	lsls	r3, r5, #12
 80138b8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80138bc:	0322      	lsls	r2, r4, #12
 80138be:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80138c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80138c6:	17da      	asrs	r2, r3, #31
 80138c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80138ca:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80138cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80138d0:	17da      	asrs	r2, r3, #31
 80138d2:	663b      	str	r3, [r7, #96]	; 0x60
 80138d4:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80138d6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80138da:	4623      	mov	r3, r4
 80138dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80138e0:	4602      	mov	r2, r0
 80138e2:	1a9b      	subs	r3, r3, r2
 80138e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80138e6:	462b      	mov	r3, r5
 80138e8:	460a      	mov	r2, r1
 80138ea:	eb63 0302 	sbc.w	r3, r3, r2
 80138ee:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80138f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138f4:	17da      	asrs	r2, r3, #31
 80138f6:	653b      	str	r3, [r7, #80]	; 0x50
 80138f8:	657a      	str	r2, [r7, #84]	; 0x54
 80138fa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80138fe:	4623      	mov	r3, r4
 8013900:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013904:	4602      	mov	r2, r0
 8013906:	1a9b      	subs	r3, r3, r2
 8013908:	64bb      	str	r3, [r7, #72]	; 0x48
 801390a:	462b      	mov	r3, r5
 801390c:	460a      	mov	r2, r1
 801390e:	eb63 0302 	sbc.w	r3, r3, r2
 8013912:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8013914:	f04f 0200 	mov.w	r2, #0
 8013918:	f04f 0300 	mov.w	r3, #0
 801391c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013920:	4629      	mov	r1, r5
 8013922:	030b      	lsls	r3, r1, #12
 8013924:	4621      	mov	r1, r4
 8013926:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 801392a:	4621      	mov	r1, r4
 801392c:	030a      	lsls	r2, r1, #12
 801392e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8013932:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8013936:	4313      	orrs	r3, r2
 8013938:	f000 80a8 	beq.w	8013a8c <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 801393c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8013940:	f04f 0000 	mov.w	r0, #0
 8013944:	f04f 0100 	mov.w	r1, #0
 8013948:	0319      	lsls	r1, r3, #12
 801394a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 801394e:	0310      	lsls	r0, r2, #12
 8013950:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8013954:	1814      	adds	r4, r2, r0
 8013956:	633c      	str	r4, [r7, #48]	; 0x30
 8013958:	414b      	adcs	r3, r1
 801395a:	637b      	str	r3, [r7, #52]	; 0x34
 801395c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013960:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8013964:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8013968:	1891      	adds	r1, r2, r2
 801396a:	62b9      	str	r1, [r7, #40]	; 0x28
 801396c:	415b      	adcs	r3, r3
 801396e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013974:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8013978:	f7ed f8ee 	bl	8000b58 <__aeabi_ldivmod>
 801397c:	4602      	mov	r2, r0
 801397e:	460b      	mov	r3, r1
 8013980:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8013984:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013988:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 801398c:	6239      	str	r1, [r7, #32]
 801398e:	f143 0300 	adc.w	r3, r3, #0
 8013992:	627b      	str	r3, [r7, #36]	; 0x24
 8013994:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013998:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 801399c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80139a0:	2200      	movs	r2, #0
 80139a2:	643b      	str	r3, [r7, #64]	; 0x40
 80139a4:	647a      	str	r2, [r7, #68]	; 0x44
 80139a6:	f04f 0200 	mov.w	r2, #0
 80139aa:	f04f 0300 	mov.w	r3, #0
 80139ae:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80139b2:	4629      	mov	r1, r5
 80139b4:	030b      	lsls	r3, r1, #12
 80139b6:	4621      	mov	r1, r4
 80139b8:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80139bc:	4621      	mov	r1, r4
 80139be:	030a      	lsls	r2, r1, #12
 80139c0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80139c4:	1884      	adds	r4, r0, r2
 80139c6:	61bc      	str	r4, [r7, #24]
 80139c8:	eb41 0303 	adc.w	r3, r1, r3
 80139cc:	61fb      	str	r3, [r7, #28]
 80139ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80139d2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 80139d6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80139da:	1c51      	adds	r1, r2, #1
 80139dc:	63b9      	str	r1, [r7, #56]	; 0x38
 80139de:	f143 0300 	adc.w	r3, r3, #0
 80139e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80139e8:	460b      	mov	r3, r1
 80139ea:	0fdb      	lsrs	r3, r3, #31
 80139ec:	2200      	movs	r2, #0
 80139ee:	613b      	str	r3, [r7, #16]
 80139f0:	617a      	str	r2, [r7, #20]
 80139f2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80139f6:	4623      	mov	r3, r4
 80139f8:	4602      	mov	r2, r0
 80139fa:	189b      	adds	r3, r3, r2
 80139fc:	60bb      	str	r3, [r7, #8]
 80139fe:	460b      	mov	r3, r1
 8013a00:	462a      	mov	r2, r5
 8013a02:	eb42 0303 	adc.w	r3, r2, r3
 8013a06:	60fb      	str	r3, [r7, #12]
 8013a08:	f04f 0200 	mov.w	r2, #0
 8013a0c:	f04f 0300 	mov.w	r3, #0
 8013a10:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013a14:	4621      	mov	r1, r4
 8013a16:	084a      	lsrs	r2, r1, #1
 8013a18:	4629      	mov	r1, r5
 8013a1a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013a1e:	4629      	mov	r1, r5
 8013a20:	104b      	asrs	r3, r1, #1
 8013a22:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8013a26:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	da05      	bge.n	8013a3a <VL53L1_f_036+0x238>
			mean_phase = 0;
 8013a2e:	f04f 0200 	mov.w	r2, #0
 8013a32:	f04f 0300 	mov.w	r3, #0
 8013a36:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8013a3a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013a3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013a42:	f173 0300 	sbcs.w	r3, r3, #0
 8013a46:	db05      	blt.n	8013a54 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8013a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a4c:	f04f 0300 	mov.w	r3, #0
 8013a50:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8013a54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8013a5c:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8013a60:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 8013a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013a66:	fb93 f1f2 	sdiv	r1, r3, r2
 8013a6a:	fb01 f202 	mul.w	r2, r1, r2
 8013a6e:	1a9b      	subs	r3, r3, r2
 8013a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8013a74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013a78:	17da      	asrs	r2, r3, #31
 8013a7a:	603b      	str	r3, [r7, #0]
 8013a7c:	607a      	str	r2, [r7, #4]
 8013a7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013a82:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8013a86:	2300      	movs	r3, #0
 8013a88:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8013a8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013a94:	601a      	str	r2, [r3, #0]

	return status;
 8013a96:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	37c8      	adds	r7, #200	; 0xc8
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013aa4 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b087      	sub	sp, #28
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	60ba      	str	r2, [r7, #8]
 8013aac:	607b      	str	r3, [r7, #4]
 8013aae:	4603      	mov	r3, r0
 8013ab0:	73fb      	strb	r3, [r7, #15]
 8013ab2:	460b      	mov	r3, r1
 8013ab4:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8013aba:	2300      	movs	r3, #0
 8013abc:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 8013ac4:	7bfa      	ldrb	r2, [r7, #15]
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	3206      	adds	r2, #6
 8013aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013ace:	6a3b      	ldr	r3, [r7, #32]
 8013ad0:	601a      	str	r2, [r3, #0]
	*pc = 0;
 8013ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8013ad8:	2300      	movs	r3, #0
 8013ada:	75fb      	strb	r3, [r7, #23]
 8013adc:	e02f      	b.n	8013b3e <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8013ade:	7bfa      	ldrb	r2, [r7, #15]
 8013ae0:	7dfb      	ldrb	r3, [r7, #23]
 8013ae2:	4413      	add	r3, r2
 8013ae4:	68ba      	ldr	r2, [r7, #8]
 8013ae6:	7a92      	ldrb	r2, [r2, #10]
 8013ae8:	441a      	add	r2, r3
 8013aea:	7bbb      	ldrb	r3, [r7, #14]
 8013aec:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8013aee:	68ba      	ldr	r2, [r7, #8]
 8013af0:	7a92      	ldrb	r2, [r2, #10]
 8013af2:	fb93 f1f2 	sdiv	r1, r3, r2
 8013af6:	fb01 f202 	mul.w	r2, r1, r2
 8013afa:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8013afc:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8013afe:	7dfa      	ldrb	r2, [r7, #23]
 8013b00:	7bbb      	ldrb	r3, [r7, #14]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d20a      	bcs.n	8013b1c <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	7db9      	ldrb	r1, [r7, #22]
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	3106      	adds	r1, #6
 8013b10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013b14:	441a      	add	r2, r3
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	601a      	str	r2, [r3, #0]
 8013b1a:	e00d      	b.n	8013b38 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8013b1c:	7dfa      	ldrb	r2, [r7, #23]
 8013b1e:	7bbb      	ldrb	r3, [r7, #14]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d909      	bls.n	8013b38 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8013b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	7db9      	ldrb	r1, [r7, #22]
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	3106      	adds	r1, #6
 8013b2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013b32:	441a      	add	r2, r3
 8013b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b36:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8013b38:	7dfb      	ldrb	r3, [r7, #23]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	75fb      	strb	r3, [r7, #23]
 8013b3e:	7bbb      	ldrb	r3, [r7, #14]
 8013b40:	005a      	lsls	r2, r3, #1
 8013b42:	7dfb      	ldrb	r3, [r7, #23]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	daca      	bge.n	8013ade <VL53L1_f_013+0x3a>
	}
}
 8013b48:	bf00      	nop
 8013b4a:	bf00      	nop
 8013b4c:	371c      	adds	r7, #28
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b54:	4770      	bx	lr

08013b56 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b088      	sub	sp, #32
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	60ba      	str	r2, [r7, #8]
 8013b5e:	461a      	mov	r2, r3
 8013b60:	4603      	mov	r3, r0
 8013b62:	81fb      	strh	r3, [r7, #14]
 8013b64:	460b      	mov	r3, r1
 8013b66:	81bb      	strh	r3, [r7, #12]
 8013b68:	4613      	mov	r3, r2
 8013b6a:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8013b70:	2300      	movs	r3, #0
 8013b72:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8013b74:	2300      	movs	r3, #0
 8013b76:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8013b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7e:	89fa      	ldrh	r2, [r7, #14]
 8013b80:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	89ba      	ldrh	r2, [r7, #12]
 8013b86:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8013b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8a:	68ba      	ldr	r2, [r7, #8]
 8013b8c:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8013b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b90:	88fa      	ldrh	r2, [r7, #6]
 8013b92:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 8013b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b96:	8a5b      	ldrh	r3, [r3, #18]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d101      	bne.n	8013ba0 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013b9c:	23f1      	movs	r3, #241	; 0xf1
 8013b9e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8013ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d101      	bne.n	8013bac <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013ba8:	23f1      	movs	r3, #241	; 0xf1
 8013baa:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8013bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d16f      	bne.n	8013c94 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8013bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb6:	8a5b      	ldrh	r3, [r3, #18]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fd f903 	bl	8010dc4 <VL53L1_calc_pll_period_us>
 8013bbe:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8013bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc2:	699b      	ldr	r3, [r3, #24]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8013bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bca:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8013bcc:	4619      	mov	r1, r3
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013bd4:	6978      	ldr	r0, [r7, #20]
 8013bd6:	f7fd f90c 	bl	8010df2 <VL53L1_duration_maths>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bde:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8013be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be2:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8013be4:	0119      	lsls	r1, r3, #4
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013bec:	6978      	ldr	r0, [r7, #20]
 8013bee:	f7fd f900 	bl	8010df2 <VL53L1_duration_maths>
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf6:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8013bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8013bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfe:	69db      	ldr	r3, [r3, #28]
 8013c00:	4619      	mov	r1, r3
 8013c02:	4610      	mov	r0, r2
 8013c04:	f7fd fb6d 	bl	80112e2 <VL53L1_rate_maths>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0e:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8013c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8013c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c16:	6a1b      	ldr	r3, [r3, #32]
 8013c18:	4619      	mov	r1, r3
 8013c1a:	4610      	mov	r0, r2
 8013c1c:	f7fd fb61 	bl	80112e2 <VL53L1_rate_maths>
 8013c20:	4603      	mov	r3, r0
 8013c22:	461a      	mov	r2, r3
 8013c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c26:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8013c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c30:	6a1b      	ldr	r3, [r3, #32]
 8013c32:	4619      	mov	r1, r3
 8013c34:	4610      	mov	r0, r2
 8013c36:	f7fd fb54 	bl	80112e2 <VL53L1_rate_maths>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c40:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8013c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c44:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8013c46:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8013c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8013c4c:	4413      	add	r3, r2
 8013c4e:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8013c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013c54:	2b01      	cmp	r3, #1
 8013c56:	d905      	bls.n	8013c64 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8013c58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013c5c:	69ba      	ldr	r2, [r7, #24]
 8013c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c62:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8013c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c66:	8ada      	ldrh	r2, [r3, #22]
 8013c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c6c:	69b9      	ldr	r1, [r7, #24]
 8013c6e:	2006      	movs	r0, #6
 8013c70:	f7fd fb7c 	bl	801136c <VL53L1_rate_per_spad_maths>
 8013c74:	4603      	mov	r3, r0
 8013c76:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8013c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8013c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c82:	8ad9      	ldrh	r1, [r3, #22]
 8013c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c86:	69db      	ldr	r3, [r3, #28]
 8013c88:	461a      	mov	r2, r3
 8013c8a:	f7fd f90b 	bl	8010ea4 <VL53L1_events_per_spad_maths>
 8013c8e:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8013c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c92:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8013c94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3720      	adds	r7, #32
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8013ca0:	b590      	push	{r4, r7, lr}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af02      	add	r7, sp, #8
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	603a      	str	r2, [r7, #0]
 8013caa:	80fb      	strh	r3, [r7, #6]
 8013cac:	460b      	mov	r3, r1
 8013cae:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	8a58      	ldrh	r0, [r3, #18]
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	8a9c      	ldrh	r4, [r3, #20]
 8013cbc:	88fb      	ldrh	r3, [r7, #6]
 8013cbe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013cc2:	9201      	str	r2, [sp, #4]
 8013cc4:	9300      	str	r3, [sp, #0]
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	4622      	mov	r2, r4
 8013cca:	f7fd fb83 	bl	80113d4 <VL53L1_range_maths>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	8a58      	ldrh	r0, [r3, #18]
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	8a9c      	ldrh	r4, [r3, #20]
 8013ce6:	88fb      	ldrh	r3, [r7, #6]
 8013ce8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013cec:	9201      	str	r2, [sp, #4]
 8013cee:	9300      	str	r3, [sp, #0]
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	4622      	mov	r2, r4
 8013cf4:	f7fd fb6e 	bl	80113d4 <VL53L1_range_maths>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	8a58      	ldrh	r0, [r3, #18]
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	8a9c      	ldrh	r4, [r3, #20]
 8013d10:	88fb      	ldrh	r3, [r7, #6]
 8013d12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013d16:	9201      	str	r2, [sp, #4]
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	4622      	mov	r2, r4
 8013d1e:	f7fd fb59 	bl	80113d4 <VL53L1_range_maths>
 8013d22:	4603      	mov	r3, r0
 8013d24:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8013d2c:	bf00      	nop
 8013d2e:	370c      	adds	r7, #12
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd90      	pop	{r4, r7, pc}

08013d34 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b086      	sub	sp, #24
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8013d40:	2300      	movs	r3, #0
 8013d42:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8013d44:	2300      	movs	r3, #0
 8013d46:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	757b      	strb	r3, [r7, #21]





	memcpy(
 8013d50:	22ac      	movs	r2, #172	; 0xac
 8013d52:	68b9      	ldr	r1, [r7, #8]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f00b f9b7 	bl	801f0c8 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	75fb      	strb	r3, [r7, #23]
 8013d5e:	e008      	b.n	8013d72 <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8013d60:	7dfa      	ldrb	r2, [r7, #23]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	3206      	adds	r2, #6
 8013d66:	2100      	movs	r1, #0
 8013d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8013d6c:	7dfb      	ldrb	r3, [r7, #23]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	75fb      	strb	r3, [r7, #23]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	7a5b      	ldrb	r3, [r3, #9]
 8013d76:	7dfa      	ldrb	r2, [r7, #23]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d3f1      	bcc.n	8013d60 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8013d7c:	68f9      	ldr	r1, [r7, #12]
 8013d7e:	68b8      	ldr	r0, [r7, #8]
 8013d80:	f000 f878 	bl	8013e74 <VL53L1_f_038>
 8013d84:	4603      	mov	r3, r0
 8013d86:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	7a9a      	ldrb	r2, [r3, #10]
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	7a9b      	ldrb	r3, [r3, #10]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d203      	bcs.n	8013d9c <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	7a9b      	ldrb	r3, [r3, #10]
 8013d98:	75bb      	strb	r3, [r7, #22]
 8013d9a:	e002      	b.n	8013da2 <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	7a9b      	ldrb	r3, [r3, #10]
 8013da0:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 8013da2:	2300      	movs	r3, #0
 8013da4:	75fb      	strb	r3, [r7, #23]
 8013da6:	e05c      	b.n	8013e62 <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8013da8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	db0f      	blt.n	8013dd0 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013db4:	461a      	mov	r2, r3
 8013db6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013dba:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8013dbc:	68ba      	ldr	r2, [r7, #8]
 8013dbe:	7a92      	ldrb	r2, [r2, #10]
 8013dc0:	b252      	sxtb	r2, r2
 8013dc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8013dc6:	fb01 f202 	mul.w	r2, r1, r2
 8013dca:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013dcc:	757b      	strb	r3, [r7, #21]
 8013dce:	e013      	b.n	8013df8 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	7a9b      	ldrb	r3, [r3, #10]
 8013dd4:	b25b      	sxtb	r3, r3
 8013dd6:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8013dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013ddc:	4619      	mov	r1, r3
 8013dde:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013de2:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8013de4:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 8013de6:	68ba      	ldr	r2, [r7, #8]
 8013de8:	7a92      	ldrb	r2, [r2, #10]
 8013dea:	b252      	sxtb	r2, r2
 8013dec:	fb93 f1f2 	sdiv	r1, r3, r2
 8013df0:	fb01 f202 	mul.w	r2, r1, r2
 8013df4:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8013df6:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8013df8:	7d7b      	ldrb	r3, [r7, #21]
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	3206      	adds	r2, #6
 8013e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8013e04:	7df9      	ldrb	r1, [r7, #23]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	3106      	adds	r1, #6
 8013e0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	dd12      	ble.n	8013e38 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 8013e12:	7d7b      	ldrb	r3, [r7, #21]
 8013e14:	461a      	mov	r2, r3
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	3206      	adds	r2, #6
 8013e1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 8013e1e:	7df9      	ldrb	r1, [r7, #23]
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	3106      	adds	r1, #6
 8013e24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8013e28:	7d79      	ldrb	r1, [r7, #21]
 8013e2a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8013e2c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	1d82      	adds	r2, r0, #6
 8013e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013e36:	e006      	b.n	8013e46 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8013e38:	7d7b      	ldrb	r3, [r7, #21]
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	3206      	adds	r2, #6
 8013e40:	2100      	movs	r1, #0
 8013e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8013e46:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8013e48:	7d7b      	ldrb	r3, [r7, #21]
 8013e4a:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3206      	adds	r2, #6
 8013e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	1d82      	adds	r2, r0, #6
 8013e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8013e5c:	7dfb      	ldrb	r3, [r7, #23]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	75fb      	strb	r3, [r7, #23]
 8013e62:	7dfa      	ldrb	r2, [r7, #23]
 8013e64:	7dbb      	ldrb	r3, [r7, #22]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d39e      	bcc.n	8013da8 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8013e6a:	bf00      	nop
 8013e6c:	bf00      	nop
 8013e6e:	3718      	adds	r7, #24
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b086      	sub	sp, #24
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 8013e82:	2300      	movs	r3, #0
 8013e84:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8013e86:	2300      	movs	r3, #0
 8013e88:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fd fb85 	bl	80115a4 <VL53L1_decode_vcsel_period>
 8013e9a:	4603      	mov	r3, r0
	period = 2048 *
 8013e9c:	02db      	lsls	r3, r3, #11
 8013e9e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d00a      	beq.n	8013ebc <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8013eac:	68ba      	ldr	r2, [r7, #8]
 8013eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8013eb2:	68b9      	ldr	r1, [r7, #8]
 8013eb4:	fb01 f202 	mul.w	r2, r1, r2
 8013eb8:	1a9b      	subs	r3, r3, r2
 8013eba:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8013ec2:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 8013ec4:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	dd09      	ble.n	8013ee4 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	da01      	bge.n	8013ede <VL53L1_f_038+0x6a>
 8013eda:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8013ede:	12db      	asrs	r3, r3, #11
 8013ee0:	75fb      	strb	r3, [r7, #23]
 8013ee2:	e008      	b.n	8013ef6 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	da01      	bge.n	8013ef2 <VL53L1_f_038+0x7e>
 8013eee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8013ef2:	12db      	asrs	r3, r3, #11
 8013ef4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8013ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3718      	adds	r7, #24
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b08e      	sub	sp, #56	; 0x38
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
 8013f0a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 8013f12:	2300      	movs	r3, #0
 8013f14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8013f18:	2300      	movs	r3, #0
 8013f1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 8013f22:	2300      	movs	r3, #0
 8013f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8013f34:	22ac      	movs	r2, #172	; 0xac
 8013f36:	6879      	ldr	r1, [r7, #4]
 8013f38:	6838      	ldr	r0, [r7, #0]
 8013f3a:	f00b f8c5 	bl	801f0c8 <memcpy>


	podata->VL53L1_p_024 = 0;
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2200      	movs	r2, #0
 8013f42:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8013f44:	2300      	movs	r3, #0
 8013f46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f4a:	e00a      	b.n	8013f62 <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8013f4c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f50:	683a      	ldr	r2, [r7, #0]
 8013f52:	4413      	add	r3, r2
 8013f54:	2210      	movs	r2, #16
 8013f56:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8013f58:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f62:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f66:	2b05      	cmp	r3, #5
 8013f68:	d9f0      	bls.n	8013f4c <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f70:	e00b      	b.n	8013f8a <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 8013f72:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	3206      	adds	r2, #6
 8013f7a:	2100      	movs	r1, #0
 8013f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8013f80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f84:	3301      	adds	r3, #1
 8013f86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	7a5b      	ldrb	r3, [r3, #9]
 8013f8e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d3ed      	bcc.n	8013f72 <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013f96:	2300      	movs	r3, #0
 8013f98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f9c:	e012      	b.n	8013fc4 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 8013f9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013fa2:	3338      	adds	r3, #56	; 0x38
 8013fa4:	443b      	add	r3, r7
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8013fac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013fb0:	3338      	adds	r3, #56	; 0x38
 8013fb2:	443b      	add	r3, r7
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013fba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013fc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013fc8:	2b0f      	cmp	r3, #15
 8013fca:	d9e8      	bls.n	8013f9e <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013fd8:	e068      	b.n	80140ac <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8013fda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	7b1b      	ldrb	r3, [r3, #12]
 8013fe4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8013fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013fec:	3338      	adds	r3, #56	; 0x38
 8013fee:	443b      	add	r3, r7
 8013ff0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d115      	bne.n	8014024 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8013ff8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ffc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014000:	0092      	lsls	r2, r2, #2
 8014002:	b2d2      	uxtb	r2, r2
 8014004:	3338      	adds	r3, #56	; 0x38
 8014006:	443b      	add	r3, r7
 8014008:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 801400c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014010:	683a      	ldr	r2, [r7, #0]
 8014012:	4413      	add	r3, r2
 8014014:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8014018:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 801401a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801401e:	3301      	adds	r3, #1
 8014020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8014024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014028:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801402c:	443a      	add	r2, r7
 801402e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8014032:	3201      	adds	r2, #1
 8014034:	b2d2      	uxtb	r2, r2
 8014036:	3338      	adds	r3, #56	; 0x38
 8014038:	443b      	add	r3, r7
 801403a:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801403e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014042:	3338      	adds	r3, #56	; 0x38
 8014044:	443b      	add	r3, r7
 8014046:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801404e:	2300      	movs	r3, #0
 8014050:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8014054:	e021      	b.n	801409a <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 8014056:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801405a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801405e:	441a      	add	r2, r3
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	3206      	adds	r2, #6
 8014064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8014068:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801406c:	009a      	lsls	r2, r3, #2
 801406e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014072:	441a      	add	r2, r3
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	3206      	adds	r2, #6
 8014078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 801407c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8014080:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8014084:	4402      	add	r2, r0
 8014086:	4419      	add	r1, r3
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	3206      	adds	r2, #6
 801408c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8014090:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014094:	3301      	adds	r3, #1
 8014096:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 801409a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801409e:	2b03      	cmp	r3, #3
 80140a0:	d9d9      	bls.n	8014056 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80140a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140a6:	3301      	adds	r3, #1
 80140a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80140ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140b0:	2b05      	cmp	r3, #5
 80140b2:	d992      	bls.n	8013fda <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80140b4:	2300      	movs	r3, #0
 80140b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80140ba:	e022      	b.n	8014102 <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80140bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140c0:	683a      	ldr	r2, [r7, #0]
 80140c2:	4413      	add	r3, r2
 80140c4:	7b1b      	ldrb	r3, [r3, #12]
 80140c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80140ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80140ce:	2b0f      	cmp	r3, #15
 80140d0:	d80c      	bhi.n	80140ec <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80140d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80140d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 80140da:	3238      	adds	r2, #56	; 0x38
 80140dc:	443a      	add	r2, r7
 80140de:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 80140e2:	683a      	ldr	r2, [r7, #0]
 80140e4:	4413      	add	r3, r2
 80140e6:	460a      	mov	r2, r1
 80140e8:	749a      	strb	r2, [r3, #18]
 80140ea:	e005      	b.n	80140f8 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 80140ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140f0:	683a      	ldr	r2, [r7, #0]
 80140f2:	4413      	add	r3, r2
 80140f4:	2200      	movs	r2, #0
 80140f6:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80140f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140fc:	3301      	adds	r3, #1
 80140fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8014102:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014106:	2b05      	cmp	r3, #5
 8014108:	d9d8      	bls.n	80140bc <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 801410a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	b2da      	uxtb	r2, r3
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8014116:	2300      	movs	r3, #0
 8014118:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801411c:	e050      	b.n	80141c0 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801411e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014122:	3338      	adds	r3, #56	; 0x38
 8014124:	443b      	add	r3, r7
 8014126:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 801412a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 801412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412e:	2b00      	cmp	r3, #0
 8014130:	dd41      	ble.n	80141b6 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 8014132:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014136:	3338      	adds	r3, #56	; 0x38
 8014138:	443b      	add	r3, r7
 801413a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801413e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8014142:	2300      	movs	r3, #0
 8014144:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8014148:	e031      	b.n	80141ae <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 801414a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801414e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014152:	441a      	add	r2, r3
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	3206      	adds	r2, #6
 8014158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 801415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415e:	0fda      	lsrs	r2, r3, #31
 8014160:	4413      	add	r3, r2
 8014162:	105b      	asrs	r3, r3, #1
 8014164:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8014166:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801416a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801416e:	441a      	add	r2, r3
 8014170:	4401      	add	r1, r0
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	3206      	adds	r2, #6
 8014176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 801417a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801417e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014182:	441a      	add	r2, r3
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	3206      	adds	r2, #6
 8014188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801418c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8014190:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014194:	441a      	add	r2, r3
 8014196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014198:	fb91 f1f3 	sdiv	r1, r1, r3
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	3206      	adds	r2, #6
 80141a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 80141a4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80141a8:	3301      	adds	r3, #1
 80141aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80141ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80141b2:	2b03      	cmp	r3, #3
 80141b4:	d9c9      	bls.n	801414a <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80141b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80141ba:	3301      	adds	r3, #1
 80141bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80141c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80141c4:	2b0f      	cmp	r3, #15
 80141c6:	d9aa      	bls.n	801411e <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	2200      	movs	r2, #0
 80141cc:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 80141ce:	7bfb      	ldrb	r3, [r7, #15]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d102      	bne.n	80141da <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 80141d4:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d002      	beq.n	80141e0 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	2204      	movs	r2, #4
 80141de:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 80141e0:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3738      	adds	r7, #56	; 0x38
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 80141ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ee:	b0cb      	sub	sp, #300	; 0x12c
 80141f0:	af06      	add	r7, sp, #24
 80141f2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80141f6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80141fa:	6020      	str	r0, [r4, #0]
 80141fc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8014200:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8014204:	6001      	str	r1, [r0, #0]
 8014206:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801420a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801420e:	600a      	str	r2, [r1, #0]
 8014210:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014214:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8014218:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801421a:	2300      	movs	r3, #0
 801421c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8014220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014224:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8014228:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801422c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8014230:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014234:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8014238:	f107 0318 	add.w	r3, r7, #24
 801423c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8014240:	2300      	movs	r3, #0
 8014242:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8014244:	2300      	movs	r3, #0
 8014246:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 801424a:	2300      	movs	r3, #0
 801424c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8014250:	2300      	movs	r3, #0
 8014252:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8014256:	2300      	movs	r3, #0
 8014258:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 801425c:	2300      	movs	r3, #0
 801425e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8014262:	2300      	movs	r3, #0
 8014264:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8014268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801426c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014270:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8014274:	6818      	ldr	r0, [r3, #0]
 8014276:	f7ff fe44 	bl	8013f02 <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 801427a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801427e:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8014280:	b299      	uxth	r1, r3
 8014282:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014286:	3348      	adds	r3, #72	; 0x48
 8014288:	461a      	mov	r2, r3
 801428a:	2000      	movs	r0, #0
 801428c:	f7fd f9db 	bl	8011646 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8014290:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014298:	3348      	adds	r3, #72	; 0x48
 801429a:	4619      	mov	r1, r3
 801429c:	4610      	mov	r0, r2
 801429e:	f7fd f994 	bl	80115ca <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 80142a2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d142      	bne.n	8014330 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80142aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80142ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d039      	beq.n	8014330 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 80142bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80142c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80142c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80142cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 80142d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80142da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 80142e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80142e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80142f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80142f6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80142fa:	6812      	ldr	r2, [r2, #0]
 80142fc:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8014300:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8014304:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8014308:	6809      	ldr	r1, [r1, #0]
 801430a:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 801430e:	f107 0014 	add.w	r0, r7, #20
 8014312:	9004      	str	r0, [sp, #16]
 8014314:	9103      	str	r1, [sp, #12]
 8014316:	9202      	str	r2, [sp, #8]
 8014318:	9301      	str	r3, [sp, #4]
 801431a:	2300      	movs	r3, #0
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	2300      	movs	r3, #0
 8014320:	4632      	mov	r2, r6
 8014322:	4629      	mov	r1, r5
 8014324:	4620      	mov	r0, r4
 8014326:	f002 f98c 	bl	8016642 <VL53L1_f_040>
 801432a:	4603      	mov	r3, r0
 801432c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8014330:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8014334:	2b00      	cmp	r3, #0
 8014336:	d115      	bne.n	8014364 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8014338:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801433c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8014346:	2b00      	cmp	r3, #0
 8014348:	d00c      	beq.n	8014364 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 801434a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801434e:	697a      	ldr	r2, [r7, #20]
 8014350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014354:	3348      	adds	r3, #72	; 0x48
 8014356:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801435a:	f002 fbe4 	bl	8016b26 <VL53L1_f_041>
 801435e:	4603      	mov	r3, r0
 8014360:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8014364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014368:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 801436c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014370:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8014374:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014378:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 801437c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014380:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8014384:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014388:	2200      	movs	r2, #0
 801438a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 801438e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014392:	2200      	movs	r2, #0
 8014394:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8014398:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801439c:	2200      	movs	r2, #0
 801439e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80143a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80143a6:	2200      	movs	r2, #0
 80143a8:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 80143ac:	2300      	movs	r3, #0
 80143ae:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80143b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80143b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d002      	beq.n	80143ca <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 80143c4:	2301      	movs	r3, #1
 80143c6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 80143ca:	2300      	movs	r3, #0
 80143cc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80143d0:	e108      	b.n	80145e4 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80143d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80143d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80143e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 80143e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80143e8:	3348      	adds	r3, #72	; 0x48
 80143ea:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80143ee:	7814      	ldrb	r4, [r2, #0]
 80143f0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80143f4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80143f8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80143fc:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8014400:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8014404:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8014408:	9405      	str	r4, [sp, #20]
 801440a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 801440e:	9404      	str	r4, [sp, #16]
 8014410:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8014414:	9403      	str	r4, [sp, #12]
 8014416:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 801441a:	9402      	str	r4, [sp, #8]
 801441c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8014420:	9401      	str	r4, [sp, #4]
 8014422:	9300      	str	r3, [sp, #0]
 8014424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014428:	6812      	ldr	r2, [r2, #0]
 801442a:	6809      	ldr	r1, [r1, #0]
 801442c:	6800      	ldr	r0, [r0, #0]
 801442e:	f7fe fe65 	bl	80130fc <VL53L1_f_033>
 8014432:	4603      	mov	r3, r0
 8014434:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8014438:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 801443c:	2b00      	cmp	r3, #0
 801443e:	f040 80cb 	bne.w	80145d8 <VL53L1_hist_process_data+0x3ec>
 8014442:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8014446:	2b00      	cmp	r3, #0
 8014448:	f040 80c6 	bne.w	80145d8 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 801444c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014450:	7c9b      	ldrb	r3, [r3, #18]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d110      	bne.n	8014478 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8014456:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801445a:	3314      	adds	r3, #20
 801445c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8014460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014464:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8014466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801446a:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 801446c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014470:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8014472:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014476:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8014478:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801447c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8014484:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8014488:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	461a      	mov	r2, r3
 8014490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014494:	fb02 f303 	mul.w	r3, r2, r3
 8014498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 801449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80144a0:	011b      	lsls	r3, r3, #4
 80144a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 80144a6:	2300      	movs	r3, #0
 80144a8:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80144ac:	e08b      	b.n	80145c6 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 80144ae:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80144b2:	224c      	movs	r2, #76	; 0x4c
 80144b4:	fb02 f303 	mul.w	r3, r2, r3
 80144b8:	3310      	adds	r3, #16
 80144ba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80144be:	4413      	add	r3, r2
 80144c0:	3304      	adds	r3, #4
 80144c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 80144c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144ca:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80144ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144d2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80144d6:	429a      	cmp	r2, r3
 80144d8:	dd0e      	ble.n	80144f8 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 80144da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144de:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80144e2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 80144e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144e8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80144ec:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	b29b      	uxth	r3, r3
				delta_mm =
 80144f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80144f6:	e00d      	b.n	8014514 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 80144f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144fc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014500:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8014502:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014506:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 801450a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 801450c:	1ad3      	subs	r3, r2, r3
 801450e:	b29b      	uxth	r3, r3
				delta_mm =
 8014510:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8014514:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014518:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8014520:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8014524:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	461a      	mov	r2, r3
 801452c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014530:	fb02 f303 	mul.w	r3, r2, r3
 8014534:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8014538:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801453c:	015b      	lsls	r3, r3, #5
 801453e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8014542:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014546:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 801454a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801454e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8014558:	429a      	cmp	r2, r3
 801455a:	dd2f      	ble.n	80145bc <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 801455c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014560:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8014564:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014568:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8014572:	429a      	cmp	r2, r3
 8014574:	da22      	bge.n	80145bc <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8014576:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 801457c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8014580:	429a      	cmp	r2, r3
 8014582:	d91b      	bls.n	80145bc <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8014584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014588:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801458a:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 801458c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014590:	4293      	cmp	r3, r2
 8014592:	d913      	bls.n	80145bc <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8014594:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8014598:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801459c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80145a0:	6812      	ldr	r2, [r2, #0]
 80145a2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 80145a4:	4293      	cmp	r3, r2
 80145a6:	da09      	bge.n	80145bc <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 80145a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80145ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 80145b0:	224c      	movs	r2, #76	; 0x4c
 80145b2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80145b6:	4618      	mov	r0, r3
 80145b8:	f00a fd86 	bl	801f0c8 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 80145bc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80145c0:	3301      	adds	r3, #1
 80145c2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80145c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80145ca:	7c9b      	ldrb	r3, [r3, #18]
 80145cc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80145d0:	429a      	cmp	r2, r3
 80145d2:	f4ff af6c 	bcc.w	80144ae <VL53L1_hist_process_data+0x2c2>
 80145d6:	e000      	b.n	80145da <VL53L1_hist_process_data+0x3ee>
			continue;
 80145d8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 80145da:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80145de:	3301      	adds	r3, #1
 80145e0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 80145e4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80145e8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80145ec:	429a      	cmp	r2, r3
 80145ee:	f67f aef0 	bls.w	80143d2 <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 80145f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80145f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8014600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8014604:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8014608:	4618      	mov	r0, r3
 801460a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 801460e:	46bd      	mov	sp, r7
 8014610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014612 <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8014612:	b580      	push	{r7, lr}
 8014614:	b086      	sub	sp, #24
 8014616:	af00      	add	r7, sp, #0
 8014618:	60f8      	str	r0, [r7, #12]
 801461a:	460b      	mov	r3, r1
 801461c:	607a      	str	r2, [r7, #4]
 801461e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014620:	2300      	movs	r3, #0
 8014622:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8014624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d104      	bne.n	8014636 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 801462c:	68f8      	ldr	r0, [r7, #12]
 801462e:	f7f9 fb5a 	bl	800dce6 <VL53L1_disable_firmware>
 8014632:	4603      	mov	r3, r0
 8014634:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8014636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d104      	bne.n	8014648 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 801463e:	68f8      	ldr	r0, [r7, #12]
 8014640:	f7f9 fb82 	bl	800dd48 <VL53L1_enable_powerforce>
 8014644:	4603      	mov	r3, r0
 8014646:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8014648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d105      	bne.n	801465c <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8014650:	21fa      	movs	r1, #250	; 0xfa
 8014652:	68f8      	ldr	r0, [r7, #12]
 8014654:	f002 fdd0 	bl	80171f8 <VL53L1_WaitUs>
 8014658:	4603      	mov	r3, r0
 801465a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 801465c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d107      	bne.n	8014674 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8014664:	2201      	movs	r2, #1
 8014666:	f240 7181 	movw	r1, #1921	; 0x781
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f002 fcd0 	bl	8017010 <VL53L1_WrByte>
 8014670:	4603      	mov	r3, r0
 8014672:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8014674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d107      	bne.n	801468c <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 801467c:	2205      	movs	r2, #5
 801467e:	f240 6183 	movw	r1, #1667	; 0x683
 8014682:	68f8      	ldr	r0, [r7, #12]
 8014684:	f002 fcc4 	bl	8017010 <VL53L1_WrByte>
 8014688:	4603      	mov	r3, r0
 801468a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 801468c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d105      	bne.n	80146a0 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8014694:	6879      	ldr	r1, [r7, #4]
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	f002 fdae 	bl	80171f8 <VL53L1_WaitUs>
 801469c:	4603      	mov	r3, r0
 801469e:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 80146a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d107      	bne.n	80146b8 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 80146a8:	2201      	movs	r2, #1
 80146aa:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f002 fcae 	bl	8017010 <VL53L1_WrByte>
 80146b4:	4603      	mov	r3, r0
 80146b6:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 80146b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d108      	bne.n	80146d2 <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 80146c0:	897b      	ldrh	r3, [r7, #10]
 80146c2:	461a      	mov	r2, r3
 80146c4:	f240 7184 	movw	r1, #1924	; 0x784
 80146c8:	68f8      	ldr	r0, [r7, #12]
 80146ca:	f002 fccb 	bl	8017064 <VL53L1_WrWord>
 80146ce:	4603      	mov	r3, r0
 80146d0:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 80146d2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3718      	adds	r7, #24
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}

080146de <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b086      	sub	sp, #24
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	60f8      	str	r0, [r7, #12]
 80146e6:	607b      	str	r3, [r7, #4]
 80146e8:	460b      	mov	r3, r1
 80146ea:	72fb      	strb	r3, [r7, #11]
 80146ec:	4613      	mov	r3, r2
 80146ee:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80146f0:	2300      	movs	r3, #0
 80146f2:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 80146f4:	2300      	movs	r3, #0
 80146f6:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 80146f8:	7afb      	ldrb	r3, [r7, #11]
 80146fa:	75bb      	strb	r3, [r7, #22]
 80146fc:	e041      	b.n	8014782 <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 80146fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d108      	bne.n	8014718 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8014706:	7dbb      	ldrb	r3, [r7, #22]
 8014708:	461a      	mov	r2, r3
 801470a:	f240 7194 	movw	r1, #1940	; 0x794
 801470e:	68f8      	ldr	r0, [r7, #12]
 8014710:	f002 fc7e 	bl	8017010 <VL53L1_WrByte>
 8014714:	4603      	mov	r3, r0
 8014716:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8014718:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d107      	bne.n	8014730 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8014720:	2200      	movs	r2, #0
 8014722:	f240 7183 	movw	r1, #1923	; 0x783
 8014726:	68f8      	ldr	r0, [r7, #12]
 8014728:	f002 fc72 	bl	8017010 <VL53L1_WrByte>
 801472c:	4603      	mov	r3, r0
 801472e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8014730:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d105      	bne.n	8014744 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8014738:	2105      	movs	r1, #5
 801473a:	68f8      	ldr	r0, [r7, #12]
 801473c:	f002 fd5c 	bl	80171f8 <VL53L1_WaitUs>
 8014740:	4603      	mov	r3, r0
 8014742:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8014744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d107      	bne.n	801475c <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 801474c:	2201      	movs	r2, #1
 801474e:	f240 7183 	movw	r1, #1923	; 0x783
 8014752:	68f8      	ldr	r0, [r7, #12]
 8014754:	f002 fc5c 	bl	8017010 <VL53L1_WrByte>
 8014758:	4603      	mov	r3, r0
 801475a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 801475c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d108      	bne.n	8014776 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8014764:	2304      	movs	r3, #4
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f002 fc19 	bl	8016fa4 <VL53L1_ReadMulti>
 8014772:	4603      	mov	r3, r0
 8014774:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	3304      	adds	r3, #4
 801477a:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 801477c:	7dbb      	ldrb	r3, [r7, #22]
 801477e:	3301      	adds	r3, #1
 8014780:	75bb      	strb	r3, [r7, #22]
 8014782:	7dba      	ldrb	r2, [r7, #22]
 8014784:	7af9      	ldrb	r1, [r7, #11]
 8014786:	7abb      	ldrb	r3, [r7, #10]
 8014788:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 801478a:	429a      	cmp	r2, r3
 801478c:	dbb7      	blt.n	80146fe <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 801478e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3718      	adds	r7, #24
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b084      	sub	sp, #16
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80147a2:	2300      	movs	r3, #0
 80147a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80147a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d107      	bne.n	80147be <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 80147ae:	2201      	movs	r2, #1
 80147b0:	f240 7183 	movw	r1, #1923	; 0x783
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f002 fc2b 	bl	8017010 <VL53L1_WrByte>
 80147ba:	4603      	mov	r3, r0
 80147bc:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80147be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d107      	bne.n	80147d6 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 80147c6:	2200      	movs	r2, #0
 80147c8:	f240 7181 	movw	r1, #1921	; 0x781
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f002 fc1f 	bl	8017010 <VL53L1_WrByte>
 80147d2:	4603      	mov	r3, r0
 80147d4:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 80147d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d104      	bne.n	80147e8 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f7f9 fac4 	bl	800dd6c <VL53L1_disable_powerforce>
 80147e4:	4603      	mov	r3, r0
 80147e6:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 80147e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d104      	bne.n	80147fa <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7f9 fa66 	bl	800dcc2 <VL53L1_enable_firmware>
 80147f6:	4603      	mov	r3, r0
 80147f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80147fa:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80147fe:	4618      	mov	r0, r3
 8014800:	3710      	adds	r7, #16
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}

08014806 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8014806:	b480      	push	{r7}
 8014808:	b087      	sub	sp, #28
 801480a:	af00      	add	r7, sp, #0
 801480c:	4603      	mov	r3, r0
 801480e:	60b9      	str	r1, [r7, #8]
 8014810:	607a      	str	r2, [r7, #4]
 8014812:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014814:	2300      	movs	r3, #0
 8014816:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8014818:	2300      	movs	r3, #0
 801481a:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 801481c:	89fb      	ldrh	r3, [r7, #14]
 801481e:	2b03      	cmp	r3, #3
 8014820:	d802      	bhi.n	8014828 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8014822:	f06f 0308 	mvn.w	r3, #8
 8014826:	e018      	b.n	801485a <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8014828:	f44f 7380 	mov.w	r3, #256	; 0x100
 801482c:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	3302      	adds	r3, #2
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	b29b      	uxth	r3, r3
 8014836:	8afa      	ldrh	r2, [r7, #22]
 8014838:	1ad3      	subs	r3, r2, r3
 801483a:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 801483c:	8afb      	ldrh	r3, [r7, #22]
 801483e:	2bff      	cmp	r3, #255	; 0xff
 8014840:	d901      	bls.n	8014846 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8014842:	2300      	movs	r3, #0
 8014844:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8014846:	8afb      	ldrh	r3, [r7, #22]
 8014848:	b2da      	uxtb	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	78da      	ldrb	r2, [r3, #3]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	705a      	strb	r2, [r3, #1]

	return status;
 8014856:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801485a:	4618      	mov	r0, r3
 801485c:	371c      	adds	r7, #28
 801485e:	46bd      	mov	sp, r7
 8014860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014864:	4770      	bx	lr

08014866 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8014866:	b590      	push	{r4, r7, lr}
 8014868:	b087      	sub	sp, #28
 801486a:	af00      	add	r7, sp, #0
 801486c:	4603      	mov	r3, r0
 801486e:	60b9      	str	r1, [r7, #8]
 8014870:	607a      	str	r2, [r7, #4]
 8014872:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014874:	2300      	movs	r3, #0
 8014876:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8014878:	2300      	movs	r3, #0
 801487a:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 801487c:	2300      	movs	r3, #0
 801487e:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8014880:	89fb      	ldrh	r3, [r7, #14]
 8014882:	2b37      	cmp	r3, #55	; 0x37
 8014884:	d802      	bhi.n	801488c <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8014886:	f06f 0308 	mvn.w	r3, #8
 801488a:	e03e      	b.n	801490a <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 801488c:	68b9      	ldr	r1, [r7, #8]
 801488e:	2002      	movs	r0, #2
 8014890:	f7f9 f8fd 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014894:	4603      	mov	r3, r0
 8014896:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	3302      	adds	r3, #2
 80148a0:	4619      	mov	r1, r3
 80148a2:	2002      	movs	r0, #2
 80148a4:	f7f9 f8f3 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80148a8:	4603      	mov	r3, r0
 80148aa:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 80148b4:	099b      	lsrs	r3, r3, #6
 80148b6:	b29a      	uxth	r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2219      	movs	r2, #25
 80148c0:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2205      	movs	r2, #5
 80148c6:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2205      	movs	r2, #5
 80148cc:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	3304      	adds	r3, #4
 80148d2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80148d4:	2300      	movs	r3, #0
 80148d6:	74fb      	strb	r3, [r7, #19]
 80148d8:	e012      	b.n	8014900 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 80148da:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 80148dc:	6979      	ldr	r1, [r7, #20]
 80148de:	2002      	movs	r0, #2
 80148e0:	f7f9 f8d5 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80148e4:	4603      	mov	r3, r0
 80148e6:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	1d23      	adds	r3, r4, #4
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	4413      	add	r3, r2
 80148f0:	460a      	mov	r2, r1
 80148f2:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 80148f4:	697b      	ldr	r3, [r7, #20]
 80148f6:	3302      	adds	r3, #2
 80148f8:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80148fa:	7cfb      	ldrb	r3, [r7, #19]
 80148fc:	3301      	adds	r3, #1
 80148fe:	74fb      	strb	r3, [r7, #19]
 8014900:	7cfb      	ldrb	r3, [r7, #19]
 8014902:	2b18      	cmp	r3, #24
 8014904:	d9e9      	bls.n	80148da <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8014906:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801490a:	4618      	mov	r0, r3
 801490c:	371c      	adds	r7, #28
 801490e:	46bd      	mov	sp, r7
 8014910:	bd90      	pop	{r4, r7, pc}

08014912 <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8014912:	b580      	push	{r7, lr}
 8014914:	b086      	sub	sp, #24
 8014916:	af00      	add	r7, sp, #0
 8014918:	4603      	mov	r3, r0
 801491a:	60b9      	str	r1, [r7, #8]
 801491c:	607a      	str	r2, [r7, #4]
 801491e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014920:	2300      	movs	r3, #0
 8014922:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8014924:	89fb      	ldrh	r3, [r7, #14]
 8014926:	2b07      	cmp	r3, #7
 8014928:	d802      	bhi.n	8014930 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801492a:	f06f 0308 	mvn.w	r3, #8
 801492e:	e027      	b.n	8014980 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8014930:	68b9      	ldr	r1, [r7, #8]
 8014932:	2002      	movs	r0, #2
 8014934:	f7f9 f8ab 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014938:	4603      	mov	r3, r0
 801493a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	3302      	adds	r3, #2
 8014944:	4619      	mov	r1, r3
 8014946:	2002      	movs	r0, #2
 8014948:	f7f9 f8a1 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801494c:	4603      	mov	r3, r0
 801494e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	3304      	adds	r3, #4
 8014958:	4619      	mov	r1, r3
 801495a:	2002      	movs	r0, #2
 801495c:	f7f9 f897 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014960:	4603      	mov	r3, r0
 8014962:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	3306      	adds	r3, #6
 801496c:	4619      	mov	r1, r3
 801496e:	2002      	movs	r0, #2
 8014970:	f7f9 f88d 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014974:	4603      	mov	r3, r0
 8014976:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	80da      	strh	r2, [r3, #6]

	return status;
 801497c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014980:	4618      	mov	r0, r3
 8014982:	3718      	adds	r7, #24
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b086      	sub	sp, #24
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	60b9      	str	r1, [r7, #8]
 8014992:	607a      	str	r2, [r7, #4]
 8014994:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8014996:	2300      	movs	r3, #0
 8014998:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 801499a:	89fb      	ldrh	r3, [r7, #14]
 801499c:	2b0f      	cmp	r3, #15
 801499e:	d802      	bhi.n	80149a6 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80149a0:	f06f 0308 	mvn.w	r3, #8
 80149a4:	e04d      	b.n	8014a42 <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80149a6:	68b9      	ldr	r1, [r7, #8]
 80149a8:	2002      	movs	r0, #2
 80149aa:	f7f9 f870 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80149ae:	4603      	mov	r3, r0
 80149b0:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	789a      	ldrb	r2, [r3, #2]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	78da      	ldrb	r2, [r3, #3]
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	3304      	adds	r3, #4
 80149ca:	4619      	mov	r1, r3
 80149cc:	2002      	movs	r0, #2
 80149ce:	f7f9 f85e 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80149d2:	4603      	mov	r3, r0
 80149d4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	3306      	adds	r3, #6
 80149de:	4619      	mov	r1, r3
 80149e0:	2002      	movs	r0, #2
 80149e2:	f7f9 f854 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80149e6:	4603      	mov	r3, r0
 80149e8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	3308      	adds	r3, #8
 80149f2:	4619      	mov	r1, r3
 80149f4:	2002      	movs	r0, #2
 80149f6:	f7f9 f84a 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80149fa:	4603      	mov	r3, r0
 80149fc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	330a      	adds	r3, #10
 8014a06:	4619      	mov	r1, r3
 8014a08:	2002      	movs	r0, #2
 8014a0a:	f7f9 f840 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	330c      	adds	r3, #12
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	2002      	movs	r0, #2
 8014a1e:	f7f9 f836 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014a22:	4603      	mov	r3, r0
 8014a24:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	330e      	adds	r3, #14
 8014a2e:	4619      	mov	r1, r3
 8014a30:	2002      	movs	r0, #2
 8014a32:	f7f9 f82c 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014a36:	4603      	mov	r3, r0
 8014a38:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	81da      	strh	r2, [r3, #14]

	return status;
 8014a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3718      	adds	r7, #24
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}

08014a4a <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8014a4a:	b580      	push	{r7, lr}
 8014a4c:	b086      	sub	sp, #24
 8014a4e:	af00      	add	r7, sp, #0
 8014a50:	60f8      	str	r0, [r7, #12]
 8014a52:	607b      	str	r3, [r7, #4]
 8014a54:	460b      	mov	r3, r1
 8014a56:	72fb      	strb	r3, [r7, #11]
 8014a58:	4613      	mov	r3, r2
 8014a5a:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8014a60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d106      	bne.n	8014a76 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8014a68:	2232      	movs	r2, #50	; 0x32
 8014a6a:	2104      	movs	r1, #4
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f7ff fdd0 	bl	8014612 <VL53L1_nvm_enable>
 8014a72:	4603      	mov	r3, r0
 8014a74:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8014a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d107      	bne.n	8014a8e <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8014a7e:	7aba      	ldrb	r2, [r7, #10]
 8014a80:	7af9      	ldrb	r1, [r7, #11]
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	68f8      	ldr	r0, [r7, #12]
 8014a86:	f7ff fe2a 	bl	80146de <VL53L1_nvm_read>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8014a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d104      	bne.n	8014aa0 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8014a96:	68f8      	ldr	r0, [r7, #12]
 8014a98:	f7ff fe7f 	bl	801479a <VL53L1_nvm_disable>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8014aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3718      	adds	r7, #24
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}

08014aac <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b084      	sub	sp, #16
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014aba:	f107 0308 	add.w	r3, r7, #8
 8014abe:	2201      	movs	r2, #1
 8014ac0:	212e      	movs	r1, #46	; 0x2e
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f7ff ffc1 	bl	8014a4a <VL53L1_read_nvm_raw_data>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d108      	bne.n	8014ae6 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 8014ad4:	f107 0308 	add.w	r3, r7, #8
 8014ad8:	683a      	ldr	r2, [r7, #0]
 8014ada:	4619      	mov	r1, r3
 8014adc:	2004      	movs	r0, #4
 8014ade:	f7ff fe92 	bl	8014806 <VL53L1_nvm_decode_optical_centre>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8014ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3710      	adds	r7, #16
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}

08014af2 <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 8014af2:	b580      	push	{r7, lr}
 8014af4:	b092      	sub	sp, #72	; 0x48
 8014af6:	af00      	add	r7, sp, #0
 8014af8:	6078      	str	r0, [r7, #4]
 8014afa:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014afc:	2300      	movs	r3, #0
 8014afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014b02:	f107 030c 	add.w	r3, r7, #12
 8014b06:	220e      	movs	r2, #14
 8014b08:	2157      	movs	r1, #87	; 0x57
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f7ff ff9d 	bl	8014a4a <VL53L1_read_nvm_raw_data>
 8014b10:	4603      	mov	r3, r0
 8014b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014b16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d109      	bne.n	8014b32 <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 8014b1e:	f107 030c 	add.w	r3, r7, #12
 8014b22:	683a      	ldr	r2, [r7, #0]
 8014b24:	4619      	mov	r1, r3
 8014b26:	2038      	movs	r0, #56	; 0x38
 8014b28:	f7ff fe9d 	bl	8014866 <VL53L1_nvm_decode_cal_peak_rate_map>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8014b32:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3748      	adds	r7, #72	; 0x48
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}

08014b3e <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 8014b3e:	b580      	push	{r7, lr}
 8014b40:	b086      	sub	sp, #24
 8014b42:	af00      	add	r7, sp, #0
 8014b44:	6078      	str	r0, [r7, #4]
 8014b46:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8014b4c:	f107 030c 	add.w	r3, r7, #12
 8014b50:	2202      	movs	r2, #2
 8014b52:	2165      	movs	r1, #101	; 0x65
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f7ff ff78 	bl	8014a4a <VL53L1_read_nvm_raw_data>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d108      	bne.n	8014b78 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8014b66:	f107 030c 	add.w	r3, r7, #12
 8014b6a:	683a      	ldr	r2, [r7, #0]
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	2008      	movs	r0, #8
 8014b70:	f7ff fecf 	bl	8014912 <VL53L1_nvm_decode_additional_offset_cal_data>
 8014b74:	4603      	mov	r3, r0
 8014b76:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8014b78:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3718      	adds	r7, #24
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}

08014b84 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b08a      	sub	sp, #40	; 0x28
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	607a      	str	r2, [r7, #4]
 8014b90:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014b92:	2300      	movs	r3, #0
 8014b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8014b98:	897b      	ldrh	r3, [r7, #10]
 8014b9a:	089b      	lsrs	r3, r3, #2
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	b2d9      	uxtb	r1, r3
 8014ba0:	f107 0314 	add.w	r3, r7, #20
 8014ba4:	2204      	movs	r2, #4
 8014ba6:	68f8      	ldr	r0, [r7, #12]
 8014ba8:	f7ff ff4f 	bl	8014a4a <VL53L1_read_nvm_raw_data>
 8014bac:	4603      	mov	r3, r0
 8014bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8014bb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d109      	bne.n	8014bce <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8014bba:	f107 0314 	add.w	r3, r7, #20
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	2010      	movs	r0, #16
 8014bc4:	f7ff fee0 	bl	8014988 <VL53L1_nvm_decode_fmt_range_results_data>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8014bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3728      	adds	r7, #40	; 0x28
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b086      	sub	sp, #24
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	60f8      	str	r0, [r7, #12]
 8014be2:	460b      	mov	r3, r1
 8014be4:	607a      	str	r2, [r7, #4]
 8014be6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014be8:	2300      	movs	r3, #0
 8014bea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8014bec:	897b      	ldrh	r3, [r7, #10]
 8014bee:	2b0a      	cmp	r3, #10
 8014bf0:	d802      	bhi.n	8014bf8 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014bf2:	f06f 0309 	mvn.w	r3, #9
 8014bf6:	e047      	b.n	8014c88 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c00:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014c0e:	f002 020f 	and.w	r2, r2, #15
 8014c12:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8014c14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014c22:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014c24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014c2e:	f002 0203 	and.w	r2, r2, #3
 8014c32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014c34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014c42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014c44:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	88d8      	ldrh	r0, [r3, #6]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	3305      	adds	r3, #5
 8014c4e:	461a      	mov	r2, r3
 8014c50:	2102      	movs	r1, #2
 8014c52:	f7f8 fef1 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8014c5a:	68fa      	ldr	r2, [r7, #12]
 8014c5c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8014c5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8014c64:	68fa      	ldr	r2, [r7, #12]
 8014c66:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8014c68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8014c72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014c76:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014c78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8014c7e:	68fa      	ldr	r2, [r7, #12]
 8014c80:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8014c82:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	3718      	adds	r7, #24
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}

08014c90 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b086      	sub	sp, #24
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	4603      	mov	r3, r0
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	607a      	str	r2, [r7, #4]
 8014c9c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8014ca2:	89fb      	ldrh	r3, [r7, #14]
 8014ca4:	2b0a      	cmp	r3, #10
 8014ca6:	d802      	bhi.n	8014cae <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014ca8:	f06f 0309 	mvn.w	r3, #9
 8014cac:	e046      	b.n	8014d3c <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cb6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	f003 030f 	and.w	r3, r3, #15
 8014cc6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	3302      	adds	r3, #2
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cd6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	3303      	adds	r3, #3
 8014ce0:	781b      	ldrb	r3, [r3, #0]
 8014ce2:	f003 0303 	and.w	r3, r3, #3
 8014ce6:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	3304      	adds	r3, #4
 8014cf0:	781b      	ldrb	r3, [r3, #0]
 8014cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cf6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	3305      	adds	r3, #5
 8014d00:	4619      	mov	r1, r3
 8014d02:	2002      	movs	r0, #2
 8014d04:	f7f8 fec3 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	79da      	ldrb	r2, [r3, #7]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	7a1a      	ldrb	r2, [r3, #8]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	3309      	adds	r3, #9
 8014d24:	781b      	ldrb	r3, [r3, #0]
 8014d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d2a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	7a9a      	ldrb	r2, [r3, #10]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8014d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3718      	adds	r7, #24
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b086      	sub	sp, #24
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d108      	bne.n	8014d6c <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8014d5a:	f107 020c 	add.w	r2, r7, #12
 8014d5e:	230b      	movs	r3, #11
 8014d60:	2101      	movs	r1, #1
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f002 f91e 	bl	8016fa4 <VL53L1_ReadMulti>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d108      	bne.n	8014d86 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8014d74:	f107 030c 	add.w	r3, r7, #12
 8014d78:	683a      	ldr	r2, [r7, #0]
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	200b      	movs	r0, #11
 8014d7e:	f7ff ff87 	bl	8014c90 <VL53L1_i2c_decode_static_nvm_managed>
 8014d82:	4603      	mov	r3, r0
 8014d84:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8014d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3718      	adds	r7, #24
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b086      	sub	sp, #24
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	60f8      	str	r0, [r7, #12]
 8014d9a:	460b      	mov	r3, r1
 8014d9c:	607a      	str	r2, [r7, #4]
 8014d9e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014da0:	2300      	movs	r3, #0
 8014da2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8014da4:	897b      	ldrh	r3, [r7, #10]
 8014da6:	2b16      	cmp	r3, #22
 8014da8:	d802      	bhi.n	8014db0 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014daa:	f06f 0309 	mvn.w	r3, #9
 8014dae:	e076      	b.n	8014e9e <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8014dbc:	68fa      	ldr	r2, [r7, #12]
 8014dbe:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8014dc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8014dc6:	68fa      	ldr	r2, [r7, #12]
 8014dc8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8014dca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8014dd0:	68fa      	ldr	r2, [r7, #12]
 8014dd2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8014dd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8014dda:	68fa      	ldr	r2, [r7, #12]
 8014ddc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8014dde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014de8:	f002 020f 	and.w	r2, r2, #15
 8014dec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014dee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8014df8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014e02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014e06:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014e08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8014e12:	f002 0203 	and.w	r2, r2, #3
 8014e16:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8014e18:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	8958      	ldrh	r0, [r3, #10]
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	3309      	adds	r3, #9
 8014e22:	461a      	mov	r2, r3
 8014e24:	2102      	movs	r1, #2
 8014e26:	f7f8 fe07 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	330b      	adds	r3, #11
 8014e34:	461a      	mov	r2, r3
 8014e36:	2102      	movs	r1, #2
 8014e38:	f7f8 fe49 	bl	800dace <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	330d      	adds	r3, #13
 8014e46:	461a      	mov	r2, r3
 8014e48:	2102      	movs	r1, #2
 8014e4a:	f7f8 fe40 	bl	800dace <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	8a18      	ldrh	r0, [r3, #16]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	330f      	adds	r3, #15
 8014e56:	461a      	mov	r2, r3
 8014e58:	2102      	movs	r1, #2
 8014e5a:	f7f8 fded 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8014e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e68:	b218      	sxth	r0, r3
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	3311      	adds	r3, #17
 8014e6e:	461a      	mov	r2, r3
 8014e70:	2102      	movs	r1, #2
 8014e72:	f7f8 fe2c 	bl	800dace <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	3313      	adds	r3, #19
 8014e80:	461a      	mov	r2, r3
 8014e82:	2102      	movs	r1, #2
 8014e84:	f7f8 fe23 	bl	800dace <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	3315      	adds	r3, #21
 8014e92:	461a      	mov	r2, r3
 8014e94:	2102      	movs	r1, #2
 8014e96:	f7f8 fe1a 	bl	800dace <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8014e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3718      	adds	r7, #24
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b086      	sub	sp, #24
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	4603      	mov	r3, r0
 8014eae:	60b9      	str	r1, [r7, #8]
 8014eb0:	607a      	str	r2, [r7, #4]
 8014eb2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8014eb8:	89fb      	ldrh	r3, [r7, #14]
 8014eba:	2b16      	cmp	r3, #22
 8014ebc:	d802      	bhi.n	8014ec4 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014ebe:	f06f 0309 	mvn.w	r3, #9
 8014ec2:	e079      	b.n	8014fb8 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	785a      	ldrb	r2, [r3, #1]
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	789a      	ldrb	r2, [r3, #2]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	78da      	ldrb	r2, [r3, #3]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	791a      	ldrb	r2, [r3, #4]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	3305      	adds	r3, #5
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	f003 030f 	and.w	r3, r3, #15
 8014ef6:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	799a      	ldrb	r2, [r3, #6]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	3307      	adds	r3, #7
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f0e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	3308      	adds	r3, #8
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	f003 0303 	and.w	r3, r3, #3
 8014f1e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	3309      	adds	r3, #9
 8014f28:	4619      	mov	r1, r3
 8014f2a:	2002      	movs	r0, #2
 8014f2c:	f7f8 fdaf 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014f30:	4603      	mov	r3, r0
 8014f32:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	330b      	adds	r3, #11
 8014f3c:	4619      	mov	r1, r3
 8014f3e:	2002      	movs	r0, #2
 8014f40:	f7f8 fdf1 	bl	800db26 <VL53L1_i2c_decode_int16_t>
 8014f44:	4603      	mov	r3, r0
 8014f46:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	330d      	adds	r3, #13
 8014f50:	4619      	mov	r1, r3
 8014f52:	2002      	movs	r0, #2
 8014f54:	f7f8 fde7 	bl	800db26 <VL53L1_i2c_decode_int16_t>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	330f      	adds	r3, #15
 8014f64:	4619      	mov	r1, r3
 8014f66:	2002      	movs	r0, #2
 8014f68:	f7f8 fd91 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	3311      	adds	r3, #17
 8014f78:	4619      	mov	r1, r3
 8014f7a:	2002      	movs	r0, #2
 8014f7c:	f7f8 fdd3 	bl	800db26 <VL53L1_i2c_decode_int16_t>
 8014f80:	4603      	mov	r3, r0
 8014f82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f86:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	3313      	adds	r3, #19
 8014f90:	4619      	mov	r1, r3
 8014f92:	2002      	movs	r0, #2
 8014f94:	f7f8 fdc7 	bl	800db26 <VL53L1_i2c_decode_int16_t>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	3315      	adds	r3, #21
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	2002      	movs	r0, #2
 8014fa8:	f7f8 fdbd 	bl	800db26 <VL53L1_i2c_decode_int16_t>
 8014fac:	4603      	mov	r3, r0
 8014fae:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8014fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3718      	adds	r7, #24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b088      	sub	sp, #32
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014fce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d108      	bne.n	8014fe8 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8014fd6:	f107 0208 	add.w	r2, r7, #8
 8014fda:	2317      	movs	r3, #23
 8014fdc:	210d      	movs	r1, #13
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f001 ffe0 	bl	8016fa4 <VL53L1_ReadMulti>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014fe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d108      	bne.n	8015002 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8014ff0:	f107 0308 	add.w	r3, r7, #8
 8014ff4:	683a      	ldr	r2, [r7, #0]
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	2017      	movs	r0, #23
 8014ffa:	f7ff ff54 	bl	8014ea6 <VL53L1_i2c_decode_customer_nvm_managed>
 8014ffe:	4603      	mov	r3, r0
 8015000:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8015002:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015006:	4618      	mov	r0, r3
 8015008:	3720      	adds	r7, #32
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}

0801500e <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801500e:	b580      	push	{r7, lr}
 8015010:	b086      	sub	sp, #24
 8015012:	af00      	add	r7, sp, #0
 8015014:	60f8      	str	r0, [r7, #12]
 8015016:	460b      	mov	r3, r1
 8015018:	607a      	str	r2, [r7, #4]
 801501a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801501c:	2300      	movs	r3, #0
 801501e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8015020:	897b      	ldrh	r3, [r7, #10]
 8015022:	2b1f      	cmp	r3, #31
 8015024:	d802      	bhi.n	801502c <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015026:	f06f 0309 	mvn.w	r3, #9
 801502a:	e0cf      	b.n	80151cc <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	881b      	ldrh	r3, [r3, #0]
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	2102      	movs	r1, #2
 8015034:	4618      	mov	r0, r3
 8015036:	f7f8 fcff 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8015042:	f002 0201 	and.w	r2, r2, #1
 8015046:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8015048:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8015052:	f002 020f 	and.w	r2, r2, #15
 8015056:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8015058:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8015062:	f002 020f 	and.w	r2, r2, #15
 8015066:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8015068:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8015072:	f002 021f 	and.w	r2, r2, #31
 8015076:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8015078:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8015082:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015086:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8015088:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8015092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015096:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8015098:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80150a2:	f002 0201 	and.w	r2, r2, #1
 80150a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80150a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80150b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80150bc:	f002 0201 	and.w	r2, r2, #1
 80150c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80150c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80150cc:	f002 0203 	and.w	r2, r2, #3
 80150d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80150d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80150dc:	f002 021f 	and.w	r2, r2, #31
 80150e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80150e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80150ec:	f002 0203 	and.w	r2, r2, #3
 80150f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80150f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80150fc:	f002 0203 	and.w	r2, r2, #3
 8015100:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8015102:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801510c:	f002 0207 	and.w	r2, r2, #7
 8015110:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8015112:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801511c:	f002 021f 	and.w	r2, r2, #31
 8015120:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8015122:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801512c:	f002 0201 	and.w	r2, r2, #1
 8015130:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8015132:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8015138:	68fa      	ldr	r2, [r7, #12]
 801513a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801513c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8015142:	68fa      	ldr	r2, [r7, #12]
 8015144:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8015146:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 801514c:	68fa      	ldr	r2, [r7, #12]
 801514e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8015150:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8015156:	68fa      	ldr	r2, [r7, #12]
 8015158:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801515a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8015160:	68fa      	ldr	r2, [r7, #12]
 8015162:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8015164:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 801516a:	68fa      	ldr	r2, [r7, #12]
 801516c:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 801516e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	8b18      	ldrh	r0, [r3, #24]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	3318      	adds	r3, #24
 8015178:	461a      	mov	r2, r3
 801517a:	2102      	movs	r1, #2
 801517c:	f7f8 fc5c 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8015184:	68fa      	ldr	r2, [r7, #12]
 8015186:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8015188:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8015192:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 801519c:	f002 020f 	and.w	r2, r2, #15
 80151a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80151a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80151a8:	68fa      	ldr	r2, [r7, #12]
 80151aa:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80151ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80151b6:	f002 020f 	and.w	r2, r2, #15
 80151ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80151bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80151c2:	68fa      	ldr	r2, [r7, #12]
 80151c4:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80151c6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80151c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	460b      	mov	r3, r1
 80151de:	607a      	str	r2, [r7, #4]
 80151e0:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80151e2:	2300      	movs	r3, #0
 80151e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 80151e6:	897b      	ldrh	r3, [r7, #10]
 80151e8:	2b15      	cmp	r3, #21
 80151ea:	d802      	bhi.n	80151f2 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80151ec:	f06f 0309 	mvn.w	r3, #9
 80151f0:	e070      	b.n	80152d4 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 80151fe:	68fa      	ldr	r2, [r7, #12]
 8015200:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8015202:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8015208:	68fa      	ldr	r2, [r7, #12]
 801520a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 801520c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8015216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801521a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801521c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8015222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015226:	b298      	uxth	r0, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	3304      	adds	r3, #4
 801522c:	461a      	mov	r2, r3
 801522e:	2102      	movs	r1, #2
 8015230:	f7f8 fc02 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 801523c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015240:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8015242:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 801524c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8015252:	68fa      	ldr	r2, [r7, #12]
 8015254:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8015256:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8015260:	f002 0201 	and.w	r2, r2, #1
 8015264:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8015266:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8015270:	f002 0207 	and.w	r2, r2, #7
 8015274:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8015276:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	8998      	ldrh	r0, [r3, #12]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	330c      	adds	r3, #12
 8015280:	461a      	mov	r2, r3
 8015282:	2102      	movs	r1, #2
 8015284:	f7f8 fbd8 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	89d8      	ldrh	r0, [r3, #14]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	330e      	adds	r3, #14
 8015290:	461a      	mov	r2, r3
 8015292:	2102      	movs	r1, #2
 8015294:	f7f8 fbd0 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	8a18      	ldrh	r0, [r3, #16]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	3310      	adds	r3, #16
 80152a0:	461a      	mov	r2, r3
 80152a2:	2102      	movs	r1, #2
 80152a4:	f7f8 fbc8 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80152ac:	68fa      	ldr	r2, [r7, #12]
 80152ae:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80152b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80152b6:	68fa      	ldr	r2, [r7, #12]
 80152b8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80152ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80152c0:	68fa      	ldr	r2, [r7, #12]
 80152c2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80152c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80152ca:	68fa      	ldr	r2, [r7, #12]
 80152cc:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80152ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80152d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3718      	adds	r7, #24
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}

080152dc <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b086      	sub	sp, #24
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	60f8      	str	r0, [r7, #12]
 80152e4:	460b      	mov	r3, r1
 80152e6:	607a      	str	r2, [r7, #4]
 80152e8:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80152ea:	2300      	movs	r3, #0
 80152ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 80152ee:	897b      	ldrh	r3, [r7, #10]
 80152f0:	2b16      	cmp	r3, #22
 80152f2:	d802      	bhi.n	80152fa <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80152f4:	f06f 0309 	mvn.w	r3, #9
 80152f8:	e06e      	b.n	80153d8 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	f003 030f 	and.w	r3, r3, #15
 8015302:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 801530c:	68fa      	ldr	r2, [r7, #12]
 801530e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8015310:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801531a:	f002 020f 	and.w	r2, r2, #15
 801531e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8015320:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8015326:	68fa      	ldr	r2, [r7, #12]
 8015328:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801532a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8015334:	f002 020f 	and.w	r2, r2, #15
 8015338:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801533a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8015340:	68fa      	ldr	r2, [r7, #12]
 8015342:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8015344:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 801534e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8015352:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8015354:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801535e:	f002 020f 	and.w	r2, r2, #15
 8015362:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8015364:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 801536a:	68fa      	ldr	r2, [r7, #12]
 801536c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801536e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8015378:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801537c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801537e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	8958      	ldrh	r0, [r3, #10]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	330a      	adds	r3, #10
 8015388:	461a      	mov	r2, r3
 801538a:	2102      	movs	r1, #2
 801538c:	f7f8 fb54 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	8998      	ldrh	r0, [r3, #12]
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	330c      	adds	r3, #12
 8015398:	461a      	mov	r2, r3
 801539a:	2102      	movs	r1, #2
 801539c:	f7f8 fb4c 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80153a4:	68fa      	ldr	r2, [r7, #12]
 80153a6:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80153a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80153ae:	68fa      	ldr	r2, [r7, #12]
 80153b0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80153b2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	6918      	ldr	r0, [r3, #16]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	3312      	adds	r3, #18
 80153bc:	461a      	mov	r2, r3
 80153be:	2104      	movs	r1, #4
 80153c0:	f7f8 fbda 	bl	800db78 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80153cc:	f002 0201 	and.w	r2, r2, #1
 80153d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80153d2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80153d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153d8:	4618      	mov	r0, r3
 80153da:	3718      	adds	r7, #24
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}

080153e0 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b086      	sub	sp, #24
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	460b      	mov	r3, r1
 80153ea:	607a      	str	r2, [r7, #4]
 80153ec:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80153ee:	2300      	movs	r3, #0
 80153f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 80153f2:	897b      	ldrh	r3, [r7, #10]
 80153f4:	2b11      	cmp	r3, #17
 80153f6:	d802      	bhi.n	80153fe <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80153f8:	f06f 0309 	mvn.w	r3, #9
 80153fc:	e071      	b.n	80154e2 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	f003 0303 	and.w	r3, r3, #3
 8015406:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	8858      	ldrh	r0, [r3, #2]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	3301      	adds	r3, #1
 8015414:	461a      	mov	r2, r3
 8015416:	2102      	movs	r1, #2
 8015418:	f7f8 fb0e 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	8898      	ldrh	r0, [r3, #4]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	3303      	adds	r3, #3
 8015424:	461a      	mov	r2, r3
 8015426:	2102      	movs	r1, #2
 8015428:	f7f8 fb06 	bl	800da38 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8015434:	f002 0201 	and.w	r2, r2, #1
 8015438:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801543a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8015444:	f002 0207 	and.w	r2, r2, #7
 8015448:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801544a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8015450:	68fa      	ldr	r2, [r7, #12]
 8015452:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8015454:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 801545e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8015468:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801546c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801546e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8015478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801547c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801547e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8015488:	f002 0203 	and.w	r2, r2, #3
 801548c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801548e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8015498:	f002 0203 	and.w	r2, r2, #3
 801549c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801549e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80154a8:	f002 020f 	and.w	r2, r2, #15
 80154ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80154ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80154b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80154be:	68fa      	ldr	r2, [r7, #12]
 80154c0:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80154c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80154cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80154d6:	f002 0203 	and.w	r2, r2, #3
 80154da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80154dc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80154de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3718      	adds	r7, #24
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80154ea:	b480      	push	{r7}
 80154ec:	b087      	sub	sp, #28
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	60f8      	str	r0, [r7, #12]
 80154f2:	460b      	mov	r3, r1
 80154f4:	607a      	str	r2, [r7, #4]
 80154f6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80154f8:	2300      	movs	r3, #0
 80154fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 80154fc:	897b      	ldrh	r3, [r7, #10]
 80154fe:	2b04      	cmp	r3, #4
 8015500:	d802      	bhi.n	8015508 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015502:	f06f 0309 	mvn.w	r3, #9
 8015506:	e025      	b.n	8015554 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	f003 0301 	and.w	r3, r3, #1
 8015510:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 801551e:	f002 0201 	and.w	r2, r2, #1
 8015522:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8015524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 801552e:	f002 0201 	and.w	r2, r2, #1
 8015532:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8015534:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 801553e:	f002 0203 	and.w	r2, r2, #3
 8015542:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8015544:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	3304      	adds	r3, #4
		pdata->system__mode_start;
 801554a:	68fa      	ldr	r2, [r7, #12]
 801554c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801554e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015550:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015554:	4618      	mov	r0, r3
 8015556:	371c      	adds	r7, #28
 8015558:	46bd      	mov	sp, r7
 801555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555e:	4770      	bx	lr

08015560 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801556a:	2300      	movs	r3, #0
 801556c:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801556e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d108      	bne.n	8015588 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8015576:	f107 0308 	add.w	r3, r7, #8
 801557a:	461a      	mov	r2, r3
 801557c:	2105      	movs	r1, #5
 801557e:	6838      	ldr	r0, [r7, #0]
 8015580:	f7ff ffb3 	bl	80154ea <VL53L1_i2c_encode_system_control>
 8015584:	4603      	mov	r3, r0
 8015586:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8015588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d108      	bne.n	80155a2 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8015590:	f107 0208 	add.w	r2, r7, #8
 8015594:	2305      	movs	r3, #5
 8015596:	2183      	movs	r1, #131	; 0x83
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f001 fccd 	bl	8016f38 <VL53L1_WriteMulti>
 801559e:	4603      	mov	r3, r0
 80155a0:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80155a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3710      	adds	r7, #16
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b086      	sub	sp, #24
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	4603      	mov	r3, r0
 80155b6:	60b9      	str	r1, [r7, #8]
 80155b8:	607a      	str	r2, [r7, #4]
 80155ba:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80155bc:	2300      	movs	r3, #0
 80155be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 80155c0:	89fb      	ldrh	r3, [r7, #14]
 80155c2:	2b2b      	cmp	r3, #43	; 0x2b
 80155c4:	d802      	bhi.n	80155cc <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80155c6:	f06f 0309 	mvn.w	r3, #9
 80155ca:	e0e2      	b.n	8015792 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	781b      	ldrb	r3, [r3, #0]
 80155d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80155d4:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	785a      	ldrb	r2, [r3, #1]
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	3302      	adds	r3, #2
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	f003 030f 	and.w	r3, r3, #15
 80155ec:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	78da      	ldrb	r2, [r3, #3]
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	3304      	adds	r3, #4
 80155fe:	4619      	mov	r1, r3
 8015600:	2002      	movs	r0, #2
 8015602:	f7f8 fa44 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015606:	4603      	mov	r3, r0
 8015608:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	3306      	adds	r3, #6
 8015612:	4619      	mov	r1, r3
 8015614:	2002      	movs	r0, #2
 8015616:	f7f8 fa3a 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801561a:	4603      	mov	r3, r0
 801561c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	3308      	adds	r3, #8
 8015626:	4619      	mov	r1, r3
 8015628:	2002      	movs	r0, #2
 801562a:	f7f8 fa30 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801562e:	4603      	mov	r3, r0
 8015630:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	330a      	adds	r3, #10
 801563a:	4619      	mov	r1, r3
 801563c:	2002      	movs	r0, #2
 801563e:	f7f8 fa26 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015642:	4603      	mov	r3, r0
 8015644:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	330c      	adds	r3, #12
 801564e:	4619      	mov	r1, r3
 8015650:	2002      	movs	r0, #2
 8015652:	f7f8 fa1c 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015656:	4603      	mov	r3, r0
 8015658:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	330e      	adds	r3, #14
 8015662:	4619      	mov	r1, r3
 8015664:	2002      	movs	r0, #2
 8015666:	f7f8 fa12 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801566a:	4603      	mov	r3, r0
 801566c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	3310      	adds	r3, #16
 8015676:	4619      	mov	r1, r3
 8015678:	2002      	movs	r0, #2
 801567a:	f7f8 fa08 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801567e:	4603      	mov	r3, r0
 8015680:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	3312      	adds	r3, #18
 801568a:	4619      	mov	r1, r3
 801568c:	2002      	movs	r0, #2
 801568e:	f7f8 f9fe 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015692:	4603      	mov	r3, r0
 8015694:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	3314      	adds	r3, #20
 801569e:	4619      	mov	r1, r3
 80156a0:	2002      	movs	r0, #2
 80156a2:	f7f8 f9f4 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80156a6:	4603      	mov	r3, r0
 80156a8:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	3316      	adds	r3, #22
 80156b2:	4619      	mov	r1, r3
 80156b4:	2002      	movs	r0, #2
 80156b6:	f7f8 f9ea 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80156ba:	4603      	mov	r3, r0
 80156bc:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	3318      	adds	r3, #24
 80156c6:	4619      	mov	r1, r3
 80156c8:	2002      	movs	r0, #2
 80156ca:	f7f8 f9e0 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80156ce:	4603      	mov	r3, r0
 80156d0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	331a      	adds	r3, #26
 80156da:	4619      	mov	r1, r3
 80156dc:	2002      	movs	r0, #2
 80156de:	f7f8 f9d6 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80156e2:	4603      	mov	r3, r0
 80156e4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	331c      	adds	r3, #28
 80156ee:	4619      	mov	r1, r3
 80156f0:	2002      	movs	r0, #2
 80156f2:	f7f8 f9cc 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80156f6:	4603      	mov	r3, r0
 80156f8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	331e      	adds	r3, #30
 8015702:	4619      	mov	r1, r3
 8015704:	2002      	movs	r0, #2
 8015706:	f7f8 f9c2 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801570a:	4603      	mov	r3, r0
 801570c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	3320      	adds	r3, #32
 8015716:	4619      	mov	r1, r3
 8015718:	2002      	movs	r0, #2
 801571a:	f7f8 f9b8 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801571e:	4603      	mov	r3, r0
 8015720:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	3322      	adds	r3, #34	; 0x22
 801572a:	4619      	mov	r1, r3
 801572c:	2002      	movs	r0, #2
 801572e:	f7f8 f9ae 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015732:	4603      	mov	r3, r0
 8015734:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	3324      	adds	r3, #36	; 0x24
 801573e:	4619      	mov	r1, r3
 8015740:	2002      	movs	r0, #2
 8015742:	f7f8 f9a4 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015746:	4603      	mov	r3, r0
 8015748:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	3326      	adds	r3, #38	; 0x26
 8015752:	4619      	mov	r1, r3
 8015754:	2002      	movs	r0, #2
 8015756:	f7f8 f99a 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801575a:	4603      	mov	r3, r0
 801575c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	3328      	adds	r3, #40	; 0x28
 8015766:	4619      	mov	r1, r3
 8015768:	2002      	movs	r0, #2
 801576a:	f7f8 f990 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801576e:	4603      	mov	r3, r0
 8015770:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 801578e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015792:	4618      	mov	r0, r3
 8015794:	3718      	adds	r7, #24
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}

0801579a <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 801579a:	b580      	push	{r7, lr}
 801579c:	b086      	sub	sp, #24
 801579e:	af00      	add	r7, sp, #0
 80157a0:	4603      	mov	r3, r0
 80157a2:	60b9      	str	r1, [r7, #8]
 80157a4:	607a      	str	r2, [r7, #4]
 80157a6:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80157a8:	2300      	movs	r3, #0
 80157aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 80157ac:	89fb      	ldrh	r3, [r7, #14]
 80157ae:	2b20      	cmp	r3, #32
 80157b0:	d802      	bhi.n	80157b8 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80157b2:	f06f 0309 	mvn.w	r3, #9
 80157b6:	e04d      	b.n	8015854 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80157b8:	68b9      	ldr	r1, [r7, #8]
 80157ba:	2004      	movs	r0, #4
 80157bc:	f7f8 fa06 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 80157c0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	3304      	adds	r3, #4
 80157ca:	4619      	mov	r1, r3
 80157cc:	2004      	movs	r0, #4
 80157ce:	f7f8 f9fd 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 80157d2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	3308      	adds	r3, #8
 80157dc:	4619      	mov	r1, r3
 80157de:	2004      	movs	r0, #4
 80157e0:	f7f8 fa11 	bl	800dc06 <VL53L1_i2c_decode_int32_t>
 80157e4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	330c      	adds	r3, #12
 80157ee:	4619      	mov	r1, r3
 80157f0:	2004      	movs	r0, #4
 80157f2:	f7f8 f9eb 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 80157f6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	3310      	adds	r3, #16
 8015800:	4619      	mov	r1, r3
 8015802:	2004      	movs	r0, #4
 8015804:	f7f8 f9e2 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 8015808:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	3314      	adds	r3, #20
 8015812:	4619      	mov	r1, r3
 8015814:	2004      	movs	r0, #4
 8015816:	f7f8 f9d9 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 801581a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	3318      	adds	r3, #24
 8015824:	4619      	mov	r1, r3
 8015826:	2004      	movs	r0, #4
 8015828:	f7f8 f9ed 	bl	800dc06 <VL53L1_i2c_decode_int32_t>
 801582c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	331c      	adds	r3, #28
 8015836:	4619      	mov	r1, r3
 8015838:	2004      	movs	r0, #4
 801583a:	f7f8 f9c7 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 801583e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	f893 2020 	ldrb.w	r2, [r3, #32]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8015850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015854:	4618      	mov	r0, r3
 8015856:	3718      	adds	r7, #24
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b086      	sub	sp, #24
 8015860:	af00      	add	r7, sp, #0
 8015862:	4603      	mov	r3, r0
 8015864:	60b9      	str	r1, [r7, #8]
 8015866:	607a      	str	r2, [r7, #4]
 8015868:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801586a:	2300      	movs	r3, #0
 801586c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 801586e:	89fb      	ldrh	r3, [r7, #14]
 8015870:	2b37      	cmp	r3, #55	; 0x37
 8015872:	d802      	bhi.n	801587a <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015874:	f06f 0309 	mvn.w	r3, #9
 8015878:	e15e      	b.n	8015b38 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 801587a:	68b9      	ldr	r1, [r7, #8]
 801587c:	2002      	movs	r0, #2
 801587e:	f7f8 f906 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015882:	4603      	mov	r3, r0
 8015884:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	3302      	adds	r3, #2
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015894:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	3303      	adds	r3, #3
 801589e:	781b      	ldrb	r3, [r3, #0]
 80158a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80158a4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	3304      	adds	r3, #4
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	f003 0303 	and.w	r3, r3, #3
 80158b4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	3305      	adds	r3, #5
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	f003 0301 	and.w	r3, r3, #1
 80158c4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	3306      	adds	r3, #6
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80158d4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	3307      	adds	r3, #7
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80158e4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80158ea:	68bb      	ldr	r3, [r7, #8]
 80158ec:	3308      	adds	r3, #8
 80158ee:	4619      	mov	r1, r3
 80158f0:	2002      	movs	r0, #2
 80158f2:	f7f8 f8cc 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80158f6:	4603      	mov	r3, r0
 80158f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80158fc:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	330a      	adds	r3, #10
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	f003 0303 	and.w	r3, r3, #3
 801590c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8015912:	68bb      	ldr	r3, [r7, #8]
 8015914:	330b      	adds	r3, #11
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	f003 0303 	and.w	r3, r3, #3
 801591c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8015922:	68bb      	ldr	r3, [r7, #8]
 8015924:	330c      	adds	r3, #12
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	f003 030f 	and.w	r3, r3, #15
 801592c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	330d      	adds	r3, #13
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	f003 0307 	and.w	r3, r3, #7
 801593c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8015942:	68bb      	ldr	r3, [r7, #8]
 8015944:	330e      	adds	r3, #14
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	f003 0301 	and.w	r3, r3, #1
 801594c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	330f      	adds	r3, #15
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	f003 0303 	and.w	r3, r3, #3
 801595c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	7c1a      	ldrb	r2, [r3, #16]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	7c5a      	ldrb	r2, [r3, #17]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	3312      	adds	r3, #18
 8015976:	4619      	mov	r1, r3
 8015978:	2002      	movs	r0, #2
 801597a:	f7f8 f888 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 801597e:	4603      	mov	r3, r0
 8015980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015984:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	3316      	adds	r3, #22
 801598e:	4619      	mov	r1, r3
 8015990:	2002      	movs	r0, #2
 8015992:	f7f8 f87c 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015996:	4603      	mov	r3, r0
 8015998:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	3318      	adds	r3, #24
 80159a2:	4619      	mov	r1, r3
 80159a4:	2002      	movs	r0, #2
 80159a6:	f7f8 f872 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 80159aa:	4603      	mov	r3, r0
 80159ac:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80159b2:	68bb      	ldr	r3, [r7, #8]
 80159b4:	331a      	adds	r3, #26
 80159b6:	781b      	ldrb	r3, [r3, #0]
 80159b8:	f003 0301 	and.w	r3, r3, #1
 80159bc:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80159c2:	68bb      	ldr	r3, [r7, #8]
 80159c4:	331b      	adds	r3, #27
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	f003 0307 	and.w	r3, r3, #7
 80159cc:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	7f1a      	ldrb	r2, [r3, #28]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	7f5a      	ldrb	r2, [r3, #29]
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	331e      	adds	r3, #30
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159ec:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	331f      	adds	r3, #31
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159fc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	3320      	adds	r3, #32
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	f003 0303 	and.w	r3, r3, #3
 8015a0c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8015a12:	68bb      	ldr	r3, [r7, #8]
 8015a14:	3321      	adds	r3, #33	; 0x21
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	f003 030f 	and.w	r3, r3, #15
 8015a1c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	3325      	adds	r3, #37	; 0x25
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	f003 0301 	and.w	r3, r3, #1
 8015a50:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	3326      	adds	r3, #38	; 0x26
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	f003 0303 	and.w	r3, r3, #3
 8015a62:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	3327      	adds	r3, #39	; 0x27
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	f003 031f 	and.w	r3, r3, #31
 8015a74:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	3328      	adds	r3, #40	; 0x28
 8015a80:	781b      	ldrb	r3, [r3, #0]
 8015a82:	f003 031f 	and.w	r3, r3, #31
 8015a86:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	3329      	adds	r3, #41	; 0x29
 8015a92:	781b      	ldrb	r3, [r3, #0]
 8015a94:	f003 031f 	and.w	r3, r3, #31
 8015a98:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	332a      	adds	r3, #42	; 0x2a
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	f003 0301 	and.w	r3, r3, #1
 8015aaa:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8015ab2:	68bb      	ldr	r3, [r7, #8]
 8015ab4:	332b      	adds	r3, #43	; 0x2b
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	f003 0301 	and.w	r3, r3, #1
 8015abc:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	332c      	adds	r3, #44	; 0x2c
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	f003 0303 	and.w	r3, r3, #3
 8015ace:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	332d      	adds	r3, #45	; 0x2d
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ae0:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	332e      	adds	r3, #46	; 0x2e
 8015aec:	4619      	mov	r1, r3
 8015aee:	2004      	movs	r0, #4
 8015af0:	f7f8 f86c 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 8015af4:	4603      	mov	r3, r0
 8015af6:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8015afe:	68bb      	ldr	r3, [r7, #8]
 8015b00:	3332      	adds	r3, #50	; 0x32
 8015b02:	4619      	mov	r1, r3
 8015b04:	2004      	movs	r0, #4
 8015b06:	f7f8 f861 	bl	800dbcc <VL53L1_i2c_decode_uint32_t>
 8015b0a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	3336      	adds	r3, #54	; 0x36
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	f003 0301 	and.w	r3, r3, #1
 8015b1a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	3337      	adds	r3, #55	; 0x37
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	f003 0301 	and.w	r3, r3, #1
 8015b2c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8015b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3718      	adds	r7, #24
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b086      	sub	sp, #24
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	4603      	mov	r3, r0
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
 8015b4c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8015b52:	89fb      	ldrh	r3, [r7, #14]
 8015b54:	2b30      	cmp	r3, #48	; 0x30
 8015b56:	d802      	bhi.n	8015b5e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015b58:	f06f 0309 	mvn.w	r3, #9
 8015b5c:	e112      	b.n	8015d84 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	785a      	ldrb	r2, [r3, #1]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8015b6e:	68bb      	ldr	r3, [r7, #8]
 8015b70:	789a      	ldrb	r2, [r3, #2]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	3303      	adds	r3, #3
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	2002      	movs	r0, #2
 8015b7e:	f7f7 ff86 	bl	800da8e <VL53L1_i2c_decode_uint16_t>
 8015b82:	4603      	mov	r3, r0
 8015b84:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	3305      	adds	r3, #5
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b94:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	3306      	adds	r3, #6
 8015b9e:	781b      	ldrb	r3, [r3, #0]
 8015ba0:	f003 0307 	and.w	r3, r3, #7
 8015ba4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	3307      	adds	r3, #7
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	f003 0307 	and.w	r3, r3, #7
 8015bb4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	3308      	adds	r3, #8
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015bc4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	3309      	adds	r3, #9
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015bd4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	330a      	adds	r3, #10
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	f003 0301 	and.w	r3, r3, #1
 8015be4:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	330b      	adds	r3, #11
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bf4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	330c      	adds	r3, #12
 8015bfe:	781b      	ldrb	r3, [r3, #0]
 8015c00:	f003 0301 	and.w	r3, r3, #1
 8015c04:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	330d      	adds	r3, #13
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c14:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	330e      	adds	r3, #14
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c24:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	7bda      	ldrb	r2, [r3, #15]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	7c1a      	ldrb	r2, [r3, #16]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	7c5a      	ldrb	r2, [r3, #17]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	7c9a      	ldrb	r2, [r3, #18]
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	7cda      	ldrb	r2, [r3, #19]
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8015c52:	68bb      	ldr	r3, [r7, #8]
 8015c54:	7d1a      	ldrb	r2, [r3, #20]
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	7d5a      	ldrb	r2, [r3, #21]
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	7d9a      	ldrb	r2, [r3, #22]
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8015c6a:	68bb      	ldr	r3, [r7, #8]
 8015c6c:	7dda      	ldrb	r2, [r3, #23]
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	7e1a      	ldrb	r2, [r3, #24]
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8015c7a:	68bb      	ldr	r3, [r7, #8]
 8015c7c:	7e5a      	ldrb	r2, [r3, #25]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	7e9a      	ldrb	r2, [r3, #26]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	7eda      	ldrb	r2, [r3, #27]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	7f1a      	ldrb	r2, [r3, #28]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	7f5a      	ldrb	r2, [r3, #29]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	7f9a      	ldrb	r2, [r3, #30]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8015caa:	68bb      	ldr	r3, [r7, #8]
 8015cac:	7fda      	ldrb	r2, [r3, #31]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8015cfc:	68bb      	ldr	r3, [r7, #8]
 8015cfe:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8015d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d84:	4618      	mov	r0, r3
 8015d86:	3718      	adds	r7, #24
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}

08015d8c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b090      	sub	sp, #64	; 0x40
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015d96:	2300      	movs	r3, #0
 8015d98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8015d9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d10a      	bne.n	8015dba <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8015da4:	f107 020c 	add.w	r2, r7, #12
 8015da8:	2331      	movs	r3, #49	; 0x31
 8015daa:	f240 110f 	movw	r1, #271	; 0x10f
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f001 f8f8 	bl	8016fa4 <VL53L1_ReadMulti>
 8015db4:	4603      	mov	r3, r0
 8015db6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8015dba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d109      	bne.n	8015dd6 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8015dc2:	f107 030c 	add.w	r3, r7, #12
 8015dc6:	683a      	ldr	r2, [r7, #0]
 8015dc8:	4619      	mov	r1, r3
 8015dca:	2031      	movs	r0, #49	; 0x31
 8015dcc:	f7ff feb8 	bl	8015b40 <VL53L1_i2c_decode_nvm_copy_data>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8015dd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8015dda:	4618      	mov	r0, r3
 8015ddc:	3740      	adds	r7, #64	; 0x40
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}

08015de2 <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8015de2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015de6:	b0d6      	sub	sp, #344	; 0x158
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8015dee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8015df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015df6:	4603      	mov	r3, r0
 8015df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8015dfc:	23f1      	movs	r3, #241	; 0xf1
 8015dfe:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 8015e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8015e10:	f04f 0200 	mov.w	r2, #0
 8015e14:	f04f 0300 	mov.w	r3, #0
 8015e18:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8015e1c:	f04f 0200 	mov.w	r2, #0
 8015e20:	f04f 0300 	mov.w	r3, #0
 8015e24:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8015e28:	f04f 0200 	mov.w	r2, #0
 8015e2c:	f04f 0300 	mov.w	r3, #0
 8015e30:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8015e34:	f04f 0200 	mov.w	r2, #0
 8015e38:	f04f 0300 	mov.w	r3, #0
 8015e3c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8015e40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8015e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e48:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8015e4a:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f000 8322 	beq.w	8016498 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 8015e54:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7fb fa23 	bl	80112a4 <VL53L1_calc_pll_period_mm>
 8015e5e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 8015e62:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d91a      	bls.n	8015ea4 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8015e6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015e72:	2200      	movs	r2, #0
 8015e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015e78:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8015e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015e80:	2200      	movs	r2, #0
 8015e82:	4698      	mov	r8, r3
 8015e84:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8015e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015e8a:	460b      	mov	r3, r1
 8015e8c:	ebb3 0308 	subs.w	r3, r3, r8
 8015e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8015e92:	4613      	mov	r3, r2
 8015e94:	eb63 0309 	sbc.w	r3, r3, r9
 8015e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015e9a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8015e9e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8015ea2:	e013      	b.n	8015ecc <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8015ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	469a      	mov	sl, r3
 8015eac:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 8015eae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	461c      	mov	r4, r3
 8015eb6:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8015eb8:	ebba 0304 	subs.w	r3, sl, r4
 8015ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8015ebe:	eb6b 0305 	sbc.w	r3, fp, r5
 8015ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8015ec4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8015ec8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8015ecc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015ed0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d91f      	bls.n	8015f18 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8015ed8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015edc:	2200      	movs	r2, #0
 8015ede:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015ee2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 8015ee6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015eea:	2200      	movs	r2, #0
 8015eec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015ef0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8015ef4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8015ef8:	4623      	mov	r3, r4
 8015efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015efe:	4602      	mov	r2, r0
 8015f00:	1a9b      	subs	r3, r3, r2
 8015f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8015f04:	462b      	mov	r3, r5
 8015f06:	460a      	mov	r2, r1
 8015f08:	eb63 0302 	sbc.w	r3, r3, r2
 8015f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f0e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8015f12:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8015f16:	e01e      	b.n	8015f56 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8015f18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015f22:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8015f26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015f30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8015f34:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8015f38:	4623      	mov	r3, r4
 8015f3a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8015f3e:	4602      	mov	r2, r0
 8015f40:	1a9b      	subs	r3, r3, r2
 8015f42:	623b      	str	r3, [r7, #32]
 8015f44:	462b      	mov	r3, r5
 8015f46:	460a      	mov	r2, r1
 8015f48:	eb63 0302 	sbc.w	r3, r3, r2
 8015f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8015f4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8015f52:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8015f56:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015f5a:	4313      	orrs	r3, r2
 8015f5c:	f000 829c 	beq.w	8016498 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8015f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015f64:	2200      	movs	r2, #0
 8015f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015f6a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8015f6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015f72:	2200      	movs	r2, #0
 8015f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015f78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015f7c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8015f80:	4623      	mov	r3, r4
 8015f82:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8015f86:	4602      	mov	r2, r0
 8015f88:	189b      	adds	r3, r3, r2
 8015f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015f8e:	460b      	mov	r3, r1
 8015f90:	462a      	mov	r2, r5
 8015f92:	eb42 0303 	adc.w	r3, r2, r3
 8015f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 8015f9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015fa4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8015fa8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8015fac:	4623      	mov	r3, r4
 8015fae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015fb2:	4602      	mov	r2, r0
 8015fb4:	189b      	adds	r3, r3, r2
 8015fb6:	61bb      	str	r3, [r7, #24]
 8015fb8:	460b      	mov	r3, r1
 8015fba:	462a      	mov	r2, r5
 8015fbc:	eb42 0303 	adc.w	r3, r2, r3
 8015fc0:	61fb      	str	r3, [r7, #28]
 8015fc2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8015fc6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8015fca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015fce:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8015fd2:	f173 0300 	sbcs.w	r3, r3, #0
 8015fd6:	d305      	bcc.n	8015fe4 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8015fd8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8015fdc:	f04f 0300 	mov.w	r3, #0
 8015fe0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8015fe4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015fe8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015fec:	fb03 f102 	mul.w	r1, r3, r2
 8015ff0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015ff4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015ff8:	fb02 f303 	mul.w	r3, r2, r3
 8015ffc:	18ca      	adds	r2, r1, r3
 8015ffe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016002:	fba3 1303 	umull	r1, r3, r3, r3
 8016006:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801600a:	460b      	mov	r3, r1
 801600c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8016010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016014:	18d3      	adds	r3, r2, r3
 8016016:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801601a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801601e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8016022:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8016026:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801602a:	f04f 0000 	mov.w	r0, #0
 801602e:	f04f 0100 	mov.w	r1, #0
 8016032:	0219      	lsls	r1, r3, #8
 8016034:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8016038:	0210      	lsls	r0, r2, #8
 801603a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801603e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016042:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016046:	d305      	bcc.n	8016054 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8016048:	f04f 32ff 	mov.w	r2, #4294967295
 801604c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016050:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8016054:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016058:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801605c:	f7ea fdcc 	bl	8000bf8 <__aeabi_uldivmod>
 8016060:	4602      	mov	r2, r0
 8016062:	460b      	mov	r3, r1
 8016064:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8016068:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801606c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8016070:	f7ea fdc2 	bl	8000bf8 <__aeabi_uldivmod>
 8016074:	4602      	mov	r2, r0
 8016076:	460b      	mov	r3, r1
 8016078:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 801607c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016080:	2b80      	cmp	r3, #128	; 0x80
 8016082:	d305      	bcc.n	8016090 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 8016084:	f04f 32ff 	mov.w	r2, #4294967295
 8016088:	f04f 037f 	mov.w	r3, #127	; 0x7f
 801608c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8016090:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016094:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016098:	fb03 f102 	mul.w	r1, r3, r2
 801609c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80160a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80160a4:	fb02 f303 	mul.w	r3, r2, r3
 80160a8:	4419      	add	r1, r3
 80160aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80160ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80160b2:	fba2 2303 	umull	r2, r3, r2, r3
 80160b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80160ba:	4613      	mov	r3, r2
 80160bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80160c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80160c4:	18cb      	adds	r3, r1, r3
 80160c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80160ca:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80160ce:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80160d2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80160d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80160da:	2200      	movs	r2, #0
 80160dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80160e0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80160e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80160e8:	2200      	movs	r2, #0
 80160ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80160ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80160f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80160f6:	4623      	mov	r3, r4
 80160f8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80160fc:	4602      	mov	r2, r0
 80160fe:	189b      	adds	r3, r3, r2
 8016100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016104:	460b      	mov	r3, r1
 8016106:	462a      	mov	r2, r5
 8016108:	eb42 0303 	adc.w	r3, r2, r3
 801610c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8016110:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016114:	2200      	movs	r2, #0
 8016116:	67bb      	str	r3, [r7, #120]	; 0x78
 8016118:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801611a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801611e:	4623      	mov	r3, r4
 8016120:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8016124:	4602      	mov	r2, r0
 8016126:	189b      	adds	r3, r3, r2
 8016128:	673b      	str	r3, [r7, #112]	; 0x70
 801612a:	460b      	mov	r3, r1
 801612c:	462a      	mov	r2, r5
 801612e:	eb42 0303 	adc.w	r3, r2, r3
 8016132:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8016134:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8016138:	2200      	movs	r2, #0
 801613a:	66bb      	str	r3, [r7, #104]	; 0x68
 801613c:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801613e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8016142:	4623      	mov	r3, r4
 8016144:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016148:	4602      	mov	r2, r0
 801614a:	189b      	adds	r3, r3, r2
 801614c:	613b      	str	r3, [r7, #16]
 801614e:	460b      	mov	r3, r1
 8016150:	462a      	mov	r2, r5
 8016152:	eb42 0303 	adc.w	r3, r2, r3
 8016156:	617b      	str	r3, [r7, #20]
 8016158:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801615c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8016160:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016164:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8016168:	f173 0300 	sbcs.w	r3, r3, #0
 801616c:	d305      	bcc.n	801617a <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 801616e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8016172:	f04f 0300 	mov.w	r3, #0
 8016176:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 801617a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801617e:	f04f 0000 	mov.w	r0, #0
 8016182:	f04f 0100 	mov.w	r1, #0
 8016186:	0219      	lsls	r1, r3, #8
 8016188:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801618c:	0210      	lsls	r0, r2, #8
 801618e:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8016192:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016196:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801619a:	1884      	adds	r4, r0, r2
 801619c:	60bc      	str	r4, [r7, #8]
 801619e:	eb41 0303 	adc.w	r3, r1, r3
 80161a2:	60fb      	str	r3, [r7, #12]
 80161a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80161a8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 80161ac:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	da05      	bge.n	80161c0 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 80161b4:	f04f 32ff 	mov.w	r2, #4294967295
 80161b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80161bc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80161c0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	d331      	bcc.n	801622c <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80161c8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80161cc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80161d0:	f7ea fd12 	bl	8000bf8 <__aeabi_uldivmod>
 80161d4:	4602      	mov	r2, r0
 80161d6:	460b      	mov	r3, r1
 80161d8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80161dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80161e0:	2200      	movs	r2, #0
 80161e2:	663b      	str	r3, [r7, #96]	; 0x60
 80161e4:	667a      	str	r2, [r7, #100]	; 0x64
 80161e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80161ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80161ee:	4622      	mov	r2, r4
 80161f0:	fb02 f203 	mul.w	r2, r2, r3
 80161f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161f8:	4629      	mov	r1, r5
 80161fa:	fb01 f303 	mul.w	r3, r1, r3
 80161fe:	441a      	add	r2, r3
 8016200:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016204:	4621      	mov	r1, r4
 8016206:	fba3 1301 	umull	r1, r3, r3, r1
 801620a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801620e:	460b      	mov	r3, r1
 8016210:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8016214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8016218:	18d3      	adds	r3, r2, r3
 801621a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801621e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8016222:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016226:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801622a:	e030      	b.n	801628e <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 801622c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016230:	2200      	movs	r2, #0
 8016232:	65bb      	str	r3, [r7, #88]	; 0x58
 8016234:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801623a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801623e:	4622      	mov	r2, r4
 8016240:	fb02 f203 	mul.w	r2, r2, r3
 8016244:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016248:	4629      	mov	r1, r5
 801624a:	fb01 f303 	mul.w	r3, r1, r3
 801624e:	441a      	add	r2, r3
 8016250:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016254:	4621      	mov	r1, r4
 8016256:	fba3 1301 	umull	r1, r3, r3, r1
 801625a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801625e:	460b      	mov	r3, r1
 8016260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8016264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016268:	18d3      	adds	r3, r2, r3
 801626a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801626e:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8016272:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016276:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801627a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801627e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016282:	f7ea fcb9 	bl	8000bf8 <__aeabi_uldivmod>
 8016286:	4602      	mov	r2, r0
 8016288:	460b      	mov	r3, r1
 801628a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 801628e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016292:	2b00      	cmp	r3, #0
 8016294:	da05      	bge.n	80162a2 <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8016296:	f04f 32ff 	mov.w	r2, #4294967295
 801629a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801629e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80162a2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d33d      	bcc.n	8016326 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80162aa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80162ae:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80162b2:	f7ea fca1 	bl	8000bf8 <__aeabi_uldivmod>
 80162b6:	4602      	mov	r2, r0
 80162b8:	460b      	mov	r3, r1
 80162ba:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80162be:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80162c2:	f04f 0200 	mov.w	r2, #0
 80162c6:	f04f 0300 	mov.w	r3, #0
 80162ca:	0882      	lsrs	r2, r0, #2
 80162cc:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80162d0:	088b      	lsrs	r3, r1, #2
 80162d2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80162d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80162da:	2200      	movs	r2, #0
 80162dc:	653b      	str	r3, [r7, #80]	; 0x50
 80162de:	657a      	str	r2, [r7, #84]	; 0x54
 80162e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80162e4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80162e8:	4622      	mov	r2, r4
 80162ea:	fb02 f203 	mul.w	r2, r2, r3
 80162ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80162f2:	4629      	mov	r1, r5
 80162f4:	fb01 f303 	mul.w	r3, r1, r3
 80162f8:	4413      	add	r3, r2
 80162fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80162fe:	4621      	mov	r1, r4
 8016300:	fba2 1201 	umull	r1, r2, r2, r1
 8016304:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8016308:	460a      	mov	r2, r1
 801630a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801630e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8016312:	4413      	add	r3, r2
 8016314:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8016318:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 801631c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016320:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016324:	e03c      	b.n	80163a0 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8016326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801632a:	2200      	movs	r2, #0
 801632c:	64bb      	str	r3, [r7, #72]	; 0x48
 801632e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016330:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016334:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8016338:	4622      	mov	r2, r4
 801633a:	fb02 f203 	mul.w	r2, r2, r3
 801633e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016342:	4629      	mov	r1, r5
 8016344:	fb01 f303 	mul.w	r3, r1, r3
 8016348:	4413      	add	r3, r2
 801634a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801634e:	4621      	mov	r1, r4
 8016350:	fba2 1201 	umull	r1, r2, r2, r1
 8016354:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8016358:	460a      	mov	r2, r1
 801635a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801635e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016362:	4413      	add	r3, r2
 8016364:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8016368:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 801636c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016370:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8016374:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016378:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801637c:	f7ea fc3c 	bl	8000bf8 <__aeabi_uldivmod>
 8016380:	4602      	mov	r2, r0
 8016382:	460b      	mov	r3, r1
 8016384:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8016388:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801638c:	f04f 0200 	mov.w	r2, #0
 8016390:	f04f 0300 	mov.w	r3, #0
 8016394:	0882      	lsrs	r2, r0, #2
 8016396:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801639a:	088b      	lsrs	r3, r1, #2
 801639c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80163a0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	da05      	bge.n	80163b4 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 80163a8:	f04f 32ff 	mov.w	r2, #4294967295
 80163ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80163b0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 80163b4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80163b8:	f04f 0200 	mov.w	r2, #0
 80163bc:	f04f 0300 	mov.w	r3, #0
 80163c0:	0882      	lsrs	r2, r0, #2
 80163c2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80163c6:	088b      	lsrs	r3, r1, #2
 80163c8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 80163cc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80163d0:	2b01      	cmp	r3, #1
 80163d2:	d305      	bcc.n	80163e0 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 80163d4:	f04f 32ff 	mov.w	r2, #4294967295
 80163d8:	f04f 0300 	mov.w	r3, #0
 80163dc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80163e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80163e4:	2200      	movs	r2, #0
 80163e6:	643b      	str	r3, [r7, #64]	; 0x40
 80163e8:	647a      	str	r2, [r7, #68]	; 0x44
 80163ea:	f04f 0200 	mov.w	r2, #0
 80163ee:	f04f 0300 	mov.w	r3, #0
 80163f2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80163f6:	4629      	mov	r1, r5
 80163f8:	01cb      	lsls	r3, r1, #7
 80163fa:	4621      	mov	r1, r4
 80163fc:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8016400:	4621      	mov	r1, r4
 8016402:	01ca      	lsls	r2, r1, #7
 8016404:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8016408:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801640c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016410:	fb03 f202 	mul.w	r2, r3, r2
 8016414:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016418:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801641c:	fb01 f303 	mul.w	r3, r1, r3
 8016420:	441a      	add	r2, r3
 8016422:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016426:	fba3 1303 	umull	r1, r3, r3, r3
 801642a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801642e:	460b      	mov	r3, r1
 8016430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016438:	18d3      	adds	r3, r2, r3
 801643a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801643e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8016442:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8016446:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 801644a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801644e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016452:	1884      	adds	r4, r0, r2
 8016454:	603c      	str	r4, [r7, #0]
 8016456:	eb41 0303 	adc.w	r3, r1, r3
 801645a:	607b      	str	r3, [r7, #4]
 801645c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016460:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8016464:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016468:	2b01      	cmp	r3, #1
 801646a:	d305      	bcc.n	8016478 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 801646c:	f04f 32ff 	mov.w	r2, #4294967295
 8016470:	f04f 0300 	mov.w	r3, #0
 8016474:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8016478:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801647c:	4618      	mov	r0, r3
 801647e:	f7fa fdaa 	bl	8010fd6 <VL53L1_isqrt>
 8016482:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8016486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801648a:	b29a      	uxth	r2, r3
 801648c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8016490:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8016492:	2300      	movs	r3, #0
 8016494:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8016498:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 801649c:	4618      	mov	r0, r3
 801649e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80164a2:	46bd      	mov	sp, r7
 80164a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080164a8 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b086      	sub	sp, #24
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80164b0:	2300      	movs	r3, #0
 80164b2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	3318      	adds	r3, #24
 80164b8:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 80164ba:	2300      	movs	r3, #0
 80164bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d107      	bne.n	80164d6 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 80164c6:	f64e 2160 	movw	r1, #60000	; 0xea60
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f000 f88b 	bl	80165e6 <VL53L1_poll_for_range_completion>
 80164d0:	4603      	mov	r3, r0
 80164d2:	75fb      	strb	r3, [r7, #23]
 80164d4:	e01b      	b.n	801650e <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 80164d6:	2300      	movs	r3, #0
 80164d8:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 80164da:	e011      	b.n	8016500 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 80164dc:	f107 030f 	add.w	r3, r7, #15
 80164e0:	4619      	mov	r1, r3
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f000 f819 	bl	801651a <VL53L1_is_new_data_ready>
 80164e8:	4603      	mov	r3, r0
 80164ea:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 80164ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d105      	bne.n	8016500 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 80164f4:	2101      	movs	r1, #1
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f000 fe6e 	bl	80171d8 <VL53L1_WaitMs>
 80164fc:	4603      	mov	r3, r0
 80164fe:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8016500:	7bfb      	ldrb	r3, [r7, #15]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d103      	bne.n	801650e <VL53L1_wait_for_test_completion+0x66>
 8016506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d0e6      	beq.n	80164dc <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801650e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016512:	4618      	mov	r0, r3
 8016514:	3718      	adds	r7, #24
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}

0801651a <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 801651a:	b580      	push	{r7, lr}
 801651c:	b086      	sub	sp, #24
 801651e:	af00      	add	r7, sp, #0
 8016520:	6078      	str	r0, [r7, #4]
 8016522:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016524:	2300      	movs	r3, #0
 8016526:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	3318      	adds	r3, #24
 801652c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801652e:	2300      	movs	r3, #0
 8016530:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8016532:	2300      	movs	r3, #0
 8016534:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8016536:	2300      	movs	r3, #0
 8016538:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8016540:	f003 0310 	and.w	r3, r3, #16
 8016544:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8016546:	7bfb      	ldrb	r3, [r7, #15]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d102      	bne.n	8016552 <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 801654c:	2301      	movs	r3, #1
 801654e:	75fb      	strb	r3, [r7, #23]
 8016550:	e001      	b.n	8016556 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8016552:	2300      	movs	r3, #0
 8016554:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8016556:	f107 030e 	add.w	r3, r7, #14
 801655a:	461a      	mov	r2, r3
 801655c:	2131      	movs	r1, #49	; 0x31
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f000 fdb2 	bl	80170c8 <VL53L1_RdByte>
 8016564:	4603      	mov	r3, r0
 8016566:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8016568:	7bbb      	ldrb	r3, [r7, #14]
 801656a:	f003 0201 	and.w	r2, r3, #1
 801656e:	7dfb      	ldrb	r3, [r7, #23]
 8016570:	429a      	cmp	r2, r3
 8016572:	d103      	bne.n	801657c <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	2201      	movs	r2, #1
 8016578:	701a      	strb	r2, [r3, #0]
 801657a:	e002      	b.n	8016582 <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	2200      	movs	r2, #0
 8016580:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8016582:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8016586:	4618      	mov	r0, r3
 8016588:	3718      	adds	r7, #24
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 801658e:	b580      	push	{r7, lr}
 8016590:	b086      	sub	sp, #24
 8016592:	af02      	add	r7, sp, #8
 8016594:	6078      	str	r0, [r7, #4]
 8016596:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8016598:	2300      	movs	r3, #0
 801659a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 801659c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 fe29 	bl	80171f8 <VL53L1_WaitUs>
 80165a6:	4603      	mov	r3, r0
 80165a8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 80165aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d10b      	bne.n	80165ca <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 80165b2:	2301      	movs	r3, #1
 80165b4:	9301      	str	r3, [sp, #4]
 80165b6:	2301      	movs	r3, #1
 80165b8:	9300      	str	r3, [sp, #0]
 80165ba:	2301      	movs	r3, #1
 80165bc:	22e5      	movs	r2, #229	; 0xe5
 80165be:	6839      	ldr	r1, [r7, #0]
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f000 fe31 	bl	8017228 <VL53L1_WaitValueMaskEx>
 80165c6:	4603      	mov	r3, r0
 80165c8:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 80165ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d103      	bne.n	80165da <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 80165d2:	2103      	movs	r1, #3
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f7f6 fc38 	bl	800ce4a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80165da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3710      	adds	r7, #16
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}

080165e6 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 80165e6:	b580      	push	{r7, lr}
 80165e8:	b088      	sub	sp, #32
 80165ea:	af02      	add	r7, sp, #8
 80165ec:	6078      	str	r0, [r7, #4]
 80165ee:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80165f0:	2300      	movs	r3, #0
 80165f2:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	3318      	adds	r3, #24
 80165f8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80165fa:	2300      	movs	r3, #0
 80165fc:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 80165fe:	2300      	movs	r3, #0
 8016600:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8016602:	693b      	ldr	r3, [r7, #16]
 8016604:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8016608:	f003 0310 	and.w	r3, r3, #16
 801660c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801660e:	7bfb      	ldrb	r3, [r7, #15]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d102      	bne.n	801661a <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8016614:	2301      	movs	r3, #1
 8016616:	75fb      	strb	r3, [r7, #23]
 8016618:	e001      	b.n	801661e <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 801661a:	2300      	movs	r3, #0
 801661c:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 801661e:	7dfb      	ldrb	r3, [r7, #23]
 8016620:	2201      	movs	r2, #1
 8016622:	9201      	str	r2, [sp, #4]
 8016624:	2201      	movs	r2, #1
 8016626:	9200      	str	r2, [sp, #0]
 8016628:	2231      	movs	r2, #49	; 0x31
 801662a:	6839      	ldr	r1, [r7, #0]
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f000 fdfb 	bl	8017228 <VL53L1_WaitValueMaskEx>
 8016632:	4603      	mov	r3, r0
 8016634:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8016636:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801663a:	4618      	mov	r0, r3
 801663c:	3718      	adds	r7, #24
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}

08016642 <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8016642:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016646:	b0c0      	sub	sp, #256	; 0x100
 8016648:	af00      	add	r7, sp, #0
 801664a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 801664e:	4618      	mov	r0, r3
 8016650:	460b      	mov	r3, r1
 8016652:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8016656:	4613      	mov	r3, r2
 8016658:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 801665c:	4603      	mov	r3, r0
 801665e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016662:	2300      	movs	r3, #0
 8016664:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8016668:	2300      	movs	r3, #0
 801666a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8016674:	2300      	movs	r3, #0
 8016676:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 801667a:	2300      	movs	r3, #0
 801667c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8016680:	2300      	movs	r3, #0
 8016682:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8016686:	2300      	movs	r3, #0
 8016688:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 801668c:	f04f 0200 	mov.w	r2, #0
 8016690:	f04f 0300 	mov.w	r3, #0
 8016694:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8016698:	f04f 0200 	mov.w	r2, #0
 801669c:	f04f 0300 	mov.w	r3, #0
 80166a0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 80166a4:	f04f 0200 	mov.w	r2, #0
 80166a8:	f04f 0300 	mov.w	r3, #0
 80166ac:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 80166b0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d108      	bne.n	80166ca <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 80166b8:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 80166bc:	f107 01de 	add.w	r1, r7, #222	; 0xde
 80166c0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fb f867 	bl	8011798 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 80166ca:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d165      	bne.n	801679e <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 80166d2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80166d6:	091b      	lsrs	r3, r3, #4
 80166d8:	b2db      	uxtb	r3, r3
 80166da:	f003 0301 	and.w	r3, r3, #1
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d00e      	beq.n	8016700 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 80166e2:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80166e6:	b29a      	uxth	r2, r3
 80166e8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80166ec:	095b      	lsrs	r3, r3, #5
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	b29b      	uxth	r3, r3
 80166f2:	1ad3      	subs	r3, r2, r3
 80166f4:	b29b      	uxth	r3, r3
 80166f6:	3b01      	subs	r3, #1
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80166fe:	e00b      	b.n	8016718 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8016700:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8016704:	b29a      	uxth	r2, r3
 8016706:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801670a:	095b      	lsrs	r3, r3, #5
 801670c:	b2db      	uxtb	r3, r3
 801670e:	b29b      	uxth	r3, r3
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	b29b      	uxth	r3, r3
 8016714:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8016718:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 801671c:	b29a      	uxth	r2, r3
 801671e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016722:	095b      	lsrs	r3, r3, #5
 8016724:	b2db      	uxtb	r3, r3
 8016726:	b29b      	uxth	r3, r3
 8016728:	4413      	add	r3, r2
 801672a:	b29b      	uxth	r3, r3
 801672c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8016730:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016734:	f003 0301 	and.w	r3, r3, #1
 8016738:	2b00      	cmp	r3, #0
 801673a:	d011      	beq.n	8016760 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 801673c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8016740:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8016742:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016746:	f003 020f 	and.w	r2, r3, #15
 801674a:	0fd3      	lsrs	r3, r2, #31
 801674c:	4413      	add	r3, r2
 801674e:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8016750:	b29b      	uxth	r3, r3
 8016752:	1acb      	subs	r3, r1, r3
 8016754:	b29b      	uxth	r3, r3
 8016756:	3b01      	subs	r3, #1
 8016758:	b29b      	uxth	r3, r3
 801675a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 801675e:	e00f      	b.n	8016780 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8016760:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8016764:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8016766:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801676a:	f003 020f 	and.w	r2, r3, #15
 801676e:	0fd3      	lsrs	r3, r2, #31
 8016770:	4413      	add	r3, r2
 8016772:	105b      	asrs	r3, r3, #1
 8016774:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8016776:	b29b      	uxth	r3, r3
 8016778:	440b      	add	r3, r1
 801677a:	b29b      	uxth	r3, r3
 801677c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8016780:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8016784:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8016786:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801678a:	f003 020f 	and.w	r2, r3, #15
 801678e:	0fd3      	lsrs	r3, r2, #31
 8016790:	4413      	add	r3, r2
 8016792:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8016794:	b29b      	uxth	r3, r3
 8016796:	440b      	add	r3, r1
 8016798:	b29b      	uxth	r3, r3
 801679a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 801679e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d133      	bne.n	801680e <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80167a6:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80167b0:	4413      	add	r3, r2
 80167b2:	b29b      	uxth	r3, r3
 80167b4:	005b      	lsls	r3, r3, #1
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	3b0f      	subs	r3, #15
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80167c0:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80167c4:	b29a      	uxth	r2, r3
 80167c6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80167ca:	4413      	add	r3, r2
 80167cc:	b29b      	uxth	r3, r3
 80167ce:	005b      	lsls	r3, r3, #1
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	3b0f      	subs	r3, #15
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80167da:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80167de:	b29a      	uxth	r2, r3
 80167e0:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80167e4:	4413      	add	r3, r2
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	3b0f      	subs	r3, #15
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80167f4:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80167f8:	b29a      	uxth	r2, r3
 80167fa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80167fe:	4413      	add	r3, r2
 8016800:	b29b      	uxth	r3, r3
 8016802:	005b      	lsls	r3, r3, #1
 8016804:	b29b      	uxth	r3, r3
 8016806:	3b0f      	subs	r3, #15
 8016808:	b29b      	uxth	r3, r3
 801680a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 801680e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016812:	2b00      	cmp	r3, #0
 8016814:	f040 8135 	bne.w	8016a82 <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8016818:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 801681c:	17da      	asrs	r2, r3, #31
 801681e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016822:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8016826:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801682a:	17da      	asrs	r2, r3, #31
 801682c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016830:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8016834:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8016838:	460b      	mov	r3, r1
 801683a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801683e:	fb02 f203 	mul.w	r2, r2, r3
 8016842:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016846:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 801684a:	4601      	mov	r1, r0
 801684c:	fb01 f303 	mul.w	r3, r1, r3
 8016850:	4413      	add	r3, r2
 8016852:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016856:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801685a:	fba2 4501 	umull	r4, r5, r2, r1
 801685e:	442b      	add	r3, r5
 8016860:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8016862:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8016866:	17da      	asrs	r2, r3, #31
 8016868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801686c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8016870:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8016874:	17da      	asrs	r2, r3, #31
 8016876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801687a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801687e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8016882:	460b      	mov	r3, r1
 8016884:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016888:	fb02 f203 	mul.w	r2, r2, r3
 801688c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016890:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8016894:	4601      	mov	r1, r0
 8016896:	fb01 f303 	mul.w	r3, r1, r3
 801689a:	4413      	add	r3, r2
 801689c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80168a0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80168a4:	fba2 8901 	umull	r8, r9, r2, r1
 80168a8:	444b      	add	r3, r9
 80168aa:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80168ac:	eb14 0308 	adds.w	r3, r4, r8
 80168b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80168b2:	eb45 0309 	adc.w	r3, r5, r9
 80168b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80168b8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80168bc:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80168c0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80168c4:	1c51      	adds	r1, r2, #1
 80168c6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80168ca:	f143 0300 	adc.w	r3, r3, #0
 80168ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80168d2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80168d6:	460b      	mov	r3, r1
 80168d8:	0fdb      	lsrs	r3, r3, #31
 80168da:	2200      	movs	r2, #0
 80168dc:	643b      	str	r3, [r7, #64]	; 0x40
 80168de:	647a      	str	r2, [r7, #68]	; 0x44
 80168e0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80168e4:	4623      	mov	r3, r4
 80168e6:	4602      	mov	r2, r0
 80168e8:	189b      	adds	r3, r3, r2
 80168ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80168ec:	460b      	mov	r3, r1
 80168ee:	462a      	mov	r2, r5
 80168f0:	eb42 0303 	adc.w	r3, r2, r3
 80168f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80168f6:	f04f 0200 	mov.w	r2, #0
 80168fa:	f04f 0300 	mov.w	r3, #0
 80168fe:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8016902:	4621      	mov	r1, r4
 8016904:	084a      	lsrs	r2, r1, #1
 8016906:	4629      	mov	r1, r5
 8016908:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801690c:	4629      	mov	r1, r5
 801690e:	104b      	asrs	r3, r1, #1
 8016910:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8016914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016918:	2200      	movs	r2, #0
 801691a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801691e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016922:	f04f 0000 	mov.w	r0, #0
 8016926:	f04f 0100 	mov.w	r1, #0
 801692a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801692e:	462b      	mov	r3, r5
 8016930:	0099      	lsls	r1, r3, #2
 8016932:	4623      	mov	r3, r4
 8016934:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8016938:	4623      	mov	r3, r4
 801693a:	0098      	lsls	r0, r3, #2
 801693c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8016940:	1814      	adds	r4, r2, r0
 8016942:	633c      	str	r4, [r7, #48]	; 0x30
 8016944:	414b      	adcs	r3, r1
 8016946:	637b      	str	r3, [r7, #52]	; 0x34
 8016948:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801694c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8016950:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8016954:	17da      	asrs	r2, r3, #31
 8016956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801695a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801695e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8016962:	17da      	asrs	r2, r3, #31
 8016964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016968:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801696c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8016970:	462b      	mov	r3, r5
 8016972:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8016976:	4642      	mov	r2, r8
 8016978:	fb02 f203 	mul.w	r2, r2, r3
 801697c:	464b      	mov	r3, r9
 801697e:	4621      	mov	r1, r4
 8016980:	fb01 f303 	mul.w	r3, r1, r3
 8016984:	4413      	add	r3, r2
 8016986:	4622      	mov	r2, r4
 8016988:	4641      	mov	r1, r8
 801698a:	fba2 ab01 	umull	sl, fp, r2, r1
 801698e:	445b      	add	r3, fp
 8016990:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8016992:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8016996:	17da      	asrs	r2, r3, #31
 8016998:	67bb      	str	r3, [r7, #120]	; 0x78
 801699a:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 801699c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80169a0:	17da      	asrs	r2, r3, #31
 80169a2:	673b      	str	r3, [r7, #112]	; 0x70
 80169a4:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80169a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80169aa:	462b      	mov	r3, r5
 80169ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80169b0:	4642      	mov	r2, r8
 80169b2:	fb02 f203 	mul.w	r2, r2, r3
 80169b6:	464b      	mov	r3, r9
 80169b8:	4621      	mov	r1, r4
 80169ba:	fb01 f303 	mul.w	r3, r1, r3
 80169be:	4413      	add	r3, r2
 80169c0:	4622      	mov	r2, r4
 80169c2:	4641      	mov	r1, r8
 80169c4:	fba2 1201 	umull	r1, r2, r2, r1
 80169c8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80169cc:	460a      	mov	r2, r1
 80169ce:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80169d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80169d6:	4413      	add	r3, r2
 80169d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80169dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80169e0:	460b      	mov	r3, r1
 80169e2:	eb1a 0303 	adds.w	r3, sl, r3
 80169e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80169e8:	4613      	mov	r3, r2
 80169ea:	eb4b 0303 	adc.w	r3, fp, r3
 80169ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80169f0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80169f4:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 80169f8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80169fc:	1c51      	adds	r1, r2, #1
 80169fe:	66b9      	str	r1, [r7, #104]	; 0x68
 8016a00:	f143 0300 	adc.w	r3, r3, #0
 8016a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016a0a:	460b      	mov	r3, r1
 8016a0c:	0fdb      	lsrs	r3, r3, #31
 8016a0e:	2200      	movs	r2, #0
 8016a10:	623b      	str	r3, [r7, #32]
 8016a12:	627a      	str	r2, [r7, #36]	; 0x24
 8016a14:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8016a18:	4623      	mov	r3, r4
 8016a1a:	4602      	mov	r2, r0
 8016a1c:	189b      	adds	r3, r3, r2
 8016a1e:	61bb      	str	r3, [r7, #24]
 8016a20:	460b      	mov	r3, r1
 8016a22:	462a      	mov	r2, r5
 8016a24:	eb42 0303 	adc.w	r3, r2, r3
 8016a28:	61fb      	str	r3, [r7, #28]
 8016a2a:	f04f 0200 	mov.w	r2, #0
 8016a2e:	f04f 0300 	mov.w	r3, #0
 8016a32:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8016a36:	4621      	mov	r1, r4
 8016a38:	084a      	lsrs	r2, r1, #1
 8016a3a:	4629      	mov	r1, r5
 8016a3c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016a40:	4629      	mov	r1, r5
 8016a42:	104b      	asrs	r3, r1, #1
 8016a44:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8016a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8016a50:	667a      	str	r2, [r7, #100]	; 0x64
 8016a52:	f04f 0200 	mov.w	r2, #0
 8016a56:	f04f 0300 	mov.w	r3, #0
 8016a5a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8016a5e:	4629      	mov	r1, r5
 8016a60:	008b      	lsls	r3, r1, #2
 8016a62:	4621      	mov	r1, r4
 8016a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016a68:	4621      	mov	r1, r4
 8016a6a:	008a      	lsls	r2, r1, #2
 8016a6c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8016a70:	1884      	adds	r4, r0, r2
 8016a72:	613c      	str	r4, [r7, #16]
 8016a74:	eb41 0303 	adc.w	r3, r1, r3
 8016a78:	617b      	str	r3, [r7, #20]
 8016a7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016a7e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 8016a82:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d132      	bne.n	8016af0 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8016a8a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8016a8e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8016a92:	1884      	adds	r4, r0, r2
 8016a94:	65bc      	str	r4, [r7, #88]	; 0x58
 8016a96:	eb41 0303 	adc.w	r3, r1, r3
 8016a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016a9c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	653b      	str	r3, [r7, #80]	; 0x50
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	f143 0300 	adc.w	r3, r3, #0
 8016aac:	657b      	str	r3, [r7, #84]	; 0x54
 8016aae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016ab2:	460b      	mov	r3, r1
 8016ab4:	0fdb      	lsrs	r3, r3, #31
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	60bb      	str	r3, [r7, #8]
 8016aba:	60fa      	str	r2, [r7, #12]
 8016abc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016ac0:	4623      	mov	r3, r4
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	189b      	adds	r3, r3, r2
 8016ac6:	603b      	str	r3, [r7, #0]
 8016ac8:	460b      	mov	r3, r1
 8016aca:	462a      	mov	r2, r5
 8016acc:	eb42 0303 	adc.w	r3, r2, r3
 8016ad0:	607b      	str	r3, [r7, #4]
 8016ad2:	f04f 0200 	mov.w	r2, #0
 8016ad6:	f04f 0300 	mov.w	r3, #0
 8016ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016ade:	4621      	mov	r1, r4
 8016ae0:	084a      	lsrs	r2, r1, #1
 8016ae2:	4629      	mov	r1, r5
 8016ae4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016ae8:	4629      	mov	r1, r5
 8016aea:	104b      	asrs	r3, r1, #1
 8016aec:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8016af0:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d109      	bne.n	8016b0c <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8016af8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	da05      	bge.n	8016b0c <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8016b00:	f04f 0200 	mov.w	r2, #0
 8016b04:	f04f 0300 	mov.w	r3, #0
 8016b08:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8016b0c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016b10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016b14:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8016b16:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8016b20:	46bd      	mov	sp, r7
 8016b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016b26 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8016b26:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016b2a:	b09a      	sub	sp, #104	; 0x68
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6478      	str	r0, [r7, #68]	; 0x44
 8016b30:	6439      	str	r1, [r7, #64]	; 0x40
 8016b32:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016b34:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8016b36:	2300      	movs	r3, #0
 8016b38:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8016b3c:	f04f 0200 	mov.w	r2, #0
 8016b40:	f04f 0300 	mov.w	r3, #0
 8016b44:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8016b48:	f04f 0200 	mov.w	r2, #0
 8016b4c:	f04f 0300 	mov.w	r3, #0
 8016b50:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8016b54:	f04f 0200 	mov.w	r2, #0
 8016b58:	f04f 0300 	mov.w	r3, #0
 8016b5c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8016b60:	2300      	movs	r3, #0
 8016b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8016b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b68:	2200      	movs	r2, #0
 8016b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8016b6c:	637a      	str	r2, [r7, #52]	; 0x34
 8016b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b74:	2200      	movs	r2, #0
 8016b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016b7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016b7e:	460b      	mov	r3, r1
 8016b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b82:	fb02 f203 	mul.w	r2, r2, r3
 8016b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b88:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8016b8c:	4601      	mov	r1, r0
 8016b8e:	fb01 f303 	mul.w	r3, r1, r3
 8016b92:	4413      	add	r3, r2
 8016b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b98:	fba2 4501 	umull	r4, r5, r2, r1
 8016b9c:	442b      	add	r3, r5
 8016b9e:	461d      	mov	r5, r3
 8016ba0:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 8016ba4:	623b      	str	r3, [r7, #32]
 8016ba6:	f145 0300 	adc.w	r3, r5, #0
 8016baa:	627b      	str	r3, [r7, #36]	; 0x24
 8016bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016bb0:	f04f 0300 	mov.w	r3, #0
 8016bb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016bb8:	f7ea f81e 	bl	8000bf8 <__aeabi_uldivmod>
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	460b      	mov	r3, r1
 8016bc0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8016bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bc6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8016bca:	b29b      	uxth	r3, r3
 8016bcc:	2200      	movs	r2, #0
 8016bce:	61bb      	str	r3, [r7, #24]
 8016bd0:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8016bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016bd4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8016bd8:	4622      	mov	r2, r4
 8016bda:	fb02 f203 	mul.w	r2, r2, r3
 8016bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016be0:	4629      	mov	r1, r5
 8016be2:	fb01 f303 	mul.w	r3, r1, r3
 8016be6:	4413      	add	r3, r2
 8016be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016bea:	4621      	mov	r1, r4
 8016bec:	fba2 ab01 	umull	sl, fp, r2, r1
 8016bf0:	445b      	add	r3, fp
 8016bf2:	469b      	mov	fp, r3
 8016bf4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8016bf8:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8016bfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016c00:	f04f 0200 	mov.w	r2, #0
 8016c04:	f04f 0300 	mov.w	r3, #0
 8016c08:	0a02      	lsrs	r2, r0, #8
 8016c0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016c0e:	0a0b      	lsrs	r3, r1, #8
 8016c10:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8016c14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8016c18:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8016c1c:	6139      	str	r1, [r7, #16]
 8016c1e:	f143 0300 	adc.w	r3, r3, #0
 8016c22:	617b      	str	r3, [r7, #20]
 8016c24:	f04f 0200 	mov.w	r2, #0
 8016c28:	f04f 0300 	mov.w	r3, #0
 8016c2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8016c30:	4621      	mov	r1, r4
 8016c32:	0aca      	lsrs	r2, r1, #11
 8016c34:	4629      	mov	r1, r5
 8016c36:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8016c3a:	4629      	mov	r1, r5
 8016c3c:	0acb      	lsrs	r3, r1, #11
 8016c3e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8016c42:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8016c46:	2b01      	cmp	r3, #1
 8016c48:	d305      	bcc.n	8016c56 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8016c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c4e:	f04f 0300 	mov.w	r3, #0
 8016c52:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8016c56:	2300      	movs	r3, #0
 8016c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016c5c:	e041      	b.n	8016ce2 <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8016c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016c64:	3302      	adds	r3, #2
 8016c66:	009b      	lsls	r3, r3, #2
 8016c68:	4413      	add	r3, r2
 8016c6a:	685b      	ldr	r3, [r3, #4]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	60bb      	str	r3, [r7, #8]
 8016c70:	60fa      	str	r2, [r7, #12]
 8016c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016c74:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016c78:	4622      	mov	r2, r4
 8016c7a:	fb02 f203 	mul.w	r2, r2, r3
 8016c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016c80:	4629      	mov	r1, r5
 8016c82:	fb01 f303 	mul.w	r3, r1, r3
 8016c86:	4413      	add	r3, r2
 8016c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016c8a:	4621      	mov	r1, r4
 8016c8c:	fba2 8901 	umull	r8, r9, r2, r1
 8016c90:	444b      	add	r3, r9
 8016c92:	4699      	mov	r9, r3
 8016c94:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8016c98:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8016c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016ca0:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 8016ca4:	6039      	str	r1, [r7, #0]
 8016ca6:	f143 0300 	adc.w	r3, r3, #0
 8016caa:	607b      	str	r3, [r7, #4]
 8016cac:	f04f 0200 	mov.w	r2, #0
 8016cb0:	f04f 0300 	mov.w	r3, #0
 8016cb4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016cb8:	4621      	mov	r1, r4
 8016cba:	0a8a      	lsrs	r2, r1, #10
 8016cbc:	4629      	mov	r1, r5
 8016cbe:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8016cc2:	4629      	mov	r1, r5
 8016cc4:	0a8b      	lsrs	r3, r1, #10
 8016cc6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8016cca:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016cce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd2:	3206      	adds	r2, #6
 8016cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8016cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016cdc:	3301      	adds	r3, #1
 8016cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ce4:	7a9b      	ldrb	r3, [r3, #10]
 8016ce6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016cea:	429a      	cmp	r2, r3
 8016cec:	d3b7      	bcc.n	8016c5e <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016cee:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3768      	adds	r7, #104	; 0x68
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016cfc <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8016cfc:	b590      	push	{r4, r7, lr}
 8016cfe:	b085      	sub	sp, #20
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	4604      	mov	r4, r0
 8016d04:	4608      	mov	r0, r1
 8016d06:	4611      	mov	r1, r2
 8016d08:	461a      	mov	r2, r3
 8016d0a:	4623      	mov	r3, r4
 8016d0c:	71fb      	strb	r3, [r7, #7]
 8016d0e:	4603      	mov	r3, r0
 8016d10:	71bb      	strb	r3, [r7, #6]
 8016d12:	460b      	mov	r3, r1
 8016d14:	717b      	strb	r3, [r7, #5]
 8016d16:	4613      	mov	r3, r2
 8016d18:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 8016d1e:	2300      	movs	r3, #0
 8016d20:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 8016d22:	2300      	movs	r3, #0
 8016d24:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8016d26:	2300      	movs	r3, #0
 8016d28:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8016d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2c:	2210      	movs	r2, #16
 8016d2e:	701a      	strb	r2, [r3, #0]

	i = 0;
 8016d30:	2300      	movs	r3, #0
 8016d32:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8016d34:	2300      	movs	r3, #0
 8016d36:	73fb      	strb	r3, [r7, #15]
 8016d38:	e046      	b.n	8016dc8 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	73bb      	strb	r3, [r7, #14]
 8016d3e:	e03b      	b.n	8016db8 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8016d40:	89bb      	ldrh	r3, [r7, #12]
 8016d42:	2b0f      	cmp	r3, #15
 8016d44:	d832      	bhi.n	8016dac <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8016d46:	89bb      	ldrh	r3, [r7, #12]
 8016d48:	b2da      	uxtb	r2, r3
 8016d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d4c:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 8016d4e:	89bb      	ldrh	r3, [r7, #12]
 8016d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d52:	3306      	adds	r3, #6
 8016d54:	009b      	lsls	r3, r3, #2
 8016d56:	4413      	add	r3, r2
 8016d58:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016d5c:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8016d5e:	89bb      	ldrh	r3, [r7, #12]
 8016d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d62:	3306      	adds	r3, #6
 8016d64:	009b      	lsls	r3, r3, #2
 8016d66:	4413      	add	r3, r2
 8016d68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016d6c:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8016d6e:	7bfa      	ldrb	r2, [r7, #15]
 8016d70:	79bb      	ldrb	r3, [r7, #6]
 8016d72:	fb12 f303 	smulbb	r3, r2, r3
 8016d76:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8016d78:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8016d7a:	79fa      	ldrb	r2, [r7, #7]
 8016d7c:	440a      	add	r2, r1
 8016d7e:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8016d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d82:	3306      	adds	r3, #6
 8016d84:	009b      	lsls	r3, r3, #2
 8016d86:	4413      	add	r3, r2
 8016d88:	460a      	mov	r2, r1
 8016d8a:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8016d8c:	7bba      	ldrb	r2, [r7, #14]
 8016d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016d92:	fb12 f303 	smulbb	r3, r2, r3
 8016d96:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8016d98:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8016d9a:	793a      	ldrb	r2, [r7, #4]
 8016d9c:	440a      	add	r2, r1
 8016d9e:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 8016da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016da2:	3306      	adds	r3, #6
 8016da4:	009b      	lsls	r3, r3, #2
 8016da6:	4413      	add	r3, r2
 8016da8:	460a      	mov	r2, r1
 8016daa:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8016dac:	89bb      	ldrh	r3, [r7, #12]
 8016dae:	3301      	adds	r3, #1
 8016db0:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 8016db2:	7bbb      	ldrb	r3, [r7, #14]
 8016db4:	3301      	adds	r3, #1
 8016db6:	73bb      	strb	r3, [r7, #14]
 8016db8:	7bba      	ldrb	r2, [r7, #14]
 8016dba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d3be      	bcc.n	8016d40 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 8016dc2:	7bfb      	ldrb	r3, [r7, #15]
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	73fb      	strb	r3, [r7, #15]
 8016dc8:	7bfa      	ldrb	r2, [r7, #15]
 8016dca:	797b      	ldrb	r3, [r7, #5]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d3b4      	bcc.n	8016d3a <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 8016dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dd2:	f000 f86c 	bl	8016eae <VL53L1_init_zone_config_histogram_bins>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8016dda:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3714      	adds	r7, #20
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd90      	pop	{r4, r7, pc}

08016de6 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 8016de6:	b580      	push	{r7, lr}
 8016de8:	b084      	sub	sp, #16
 8016dea:	af00      	add	r7, sp, #0
 8016dec:	6078      	str	r0, [r7, #4]
 8016dee:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016df0:	2300      	movs	r3, #0
 8016df2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2205      	movs	r2, #5
 8016df8:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	2204      	movs	r2, #4
 8016dfe:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	220f      	movs	r2, #15
 8016e04:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	2207      	movs	r2, #7
 8016e0a:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	2204      	movs	r2, #4
 8016e10:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	2208      	movs	r2, #8
 8016e16:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	220f      	movs	r2, #15
 8016e1c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	2207      	movs	r2, #7
 8016e24:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	220c      	movs	r2, #12
 8016e2c:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 8016e30:	683b      	ldr	r3, [r7, #0]
 8016e32:	2208      	movs	r2, #8
 8016e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	2207      	movs	r2, #7
 8016e3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8016e40:	683b      	ldr	r3, [r7, #0]
 8016e42:	220f      	movs	r2, #15
 8016e44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	2208      	movs	r2, #8
 8016e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	2204      	movs	r2, #4
 8016e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	2207      	movs	r2, #7
 8016e5c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	220f      	movs	r2, #15
 8016e64:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	2208      	movs	r2, #8
 8016e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	220c      	movs	r2, #12
 8016e74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	220f      	movs	r2, #15
 8016e7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8016e80:	683b      	ldr	r3, [r7, #0]
 8016e82:	220f      	movs	r2, #15
 8016e84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	2208      	movs	r2, #8
 8016e8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	2208      	movs	r2, #8
 8016e94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8016e98:	6838      	ldr	r0, [r7, #0]
 8016e9a:	f000 f808 	bl	8016eae <VL53L1_init_zone_config_histogram_bins>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 8016ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3710      	adds	r7, #16
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}

08016eae <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 8016eae:	b480      	push	{r7}
 8016eb0:	b085      	sub	sp, #20
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8016eba:	2300      	movs	r3, #0
 8016ebc:	73fb      	strb	r3, [r7, #15]
 8016ebe:	e008      	b.n	8016ed2 <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 8016ec0:	7bfb      	ldrb	r3, [r7, #15]
 8016ec2:	687a      	ldr	r2, [r7, #4]
 8016ec4:	4413      	add	r3, r2
 8016ec6:	2201      	movs	r2, #1
 8016ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8016ecc:	7bfb      	ldrb	r3, [r7, #15]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	73fb      	strb	r3, [r7, #15]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	781b      	ldrb	r3, [r3, #0]
 8016ed6:	7bfa      	ldrb	r2, [r7, #15]
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d3f1      	bcc.n	8016ec0 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8016edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3714      	adds	r7, #20
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eea:	4770      	bx	lr

08016eec <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b084      	sub	sp, #16
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	60f8      	str	r0, [r7, #12]
 8016ef4:	60b9      	str	r1, [r7, #8]
 8016ef6:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	68fa      	ldr	r2, [r7, #12]
 8016efe:	8910      	ldrh	r0, [r2, #8]
 8016f00:	687a      	ldr	r2, [r7, #4]
 8016f02:	b292      	uxth	r2, r2
 8016f04:	68b9      	ldr	r1, [r7, #8]
 8016f06:	4798      	blx	r3
 8016f08:	4603      	mov	r3, r0
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3710      	adds	r7, #16
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}

08016f12 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8016f12:	b580      	push	{r7, lr}
 8016f14:	b084      	sub	sp, #16
 8016f16:	af00      	add	r7, sp, #0
 8016f18:	60f8      	str	r0, [r7, #12]
 8016f1a:	60b9      	str	r1, [r7, #8]
 8016f1c:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	691b      	ldr	r3, [r3, #16]
 8016f22:	68fa      	ldr	r2, [r7, #12]
 8016f24:	8910      	ldrh	r0, [r2, #8]
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	b292      	uxth	r2, r2
 8016f2a:	68b9      	ldr	r1, [r7, #8]
 8016f2c:	4798      	blx	r3
 8016f2e:	4603      	mov	r3, r0
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3710      	adds	r7, #16
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}

08016f38 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b086      	sub	sp, #24
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	607a      	str	r2, [r7, #4]
 8016f42:	603b      	str	r3, [r7, #0]
 8016f44:	460b      	mov	r3, r1
 8016f46:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016f48:	2300      	movs	r3, #0
 8016f4a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	2bff      	cmp	r3, #255	; 0xff
 8016f50:	d902      	bls.n	8016f58 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8016f52:	f06f 0303 	mvn.w	r3, #3
 8016f56:	e01d      	b.n	8016f94 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8016f58:	897b      	ldrh	r3, [r7, #10]
 8016f5a:	0a1b      	lsrs	r3, r3, #8
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	b2da      	uxtb	r2, r3
 8016f60:	4b0e      	ldr	r3, [pc, #56]	; (8016f9c <VL53L1_WriteMulti+0x64>)
 8016f62:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016f64:	897b      	ldrh	r3, [r7, #10]
 8016f66:	b2da      	uxtb	r2, r3
 8016f68:	4b0c      	ldr	r3, [pc, #48]	; (8016f9c <VL53L1_WriteMulti+0x64>)
 8016f6a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8016f6c:	683a      	ldr	r2, [r7, #0]
 8016f6e:	6879      	ldr	r1, [r7, #4]
 8016f70:	480b      	ldr	r0, [pc, #44]	; (8016fa0 <VL53L1_WriteMulti+0x68>)
 8016f72:	f008 f8a9 	bl	801f0c8 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	3302      	adds	r3, #2
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	4907      	ldr	r1, [pc, #28]	; (8016f9c <VL53L1_WriteMulti+0x64>)
 8016f7e:	68f8      	ldr	r0, [r7, #12]
 8016f80:	f7ff ffb4 	bl	8016eec <_I2CWrite>
 8016f84:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d001      	beq.n	8016f90 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016f8c:	23f3      	movs	r3, #243	; 0xf3
 8016f8e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8016f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3718      	adds	r7, #24
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}
 8016f9c:	20008750 	.word	0x20008750
 8016fa0:	20008752 	.word	0x20008752

08016fa4 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b086      	sub	sp, #24
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	607a      	str	r2, [r7, #4]
 8016fae:	603b      	str	r3, [r7, #0]
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016fb8:	897b      	ldrh	r3, [r7, #10]
 8016fba:	0a1b      	lsrs	r3, r3, #8
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	b2da      	uxtb	r2, r3
 8016fc0:	4b12      	ldr	r3, [pc, #72]	; (801700c <VL53L1_ReadMulti+0x68>)
 8016fc2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016fc4:	897b      	ldrh	r3, [r7, #10]
 8016fc6:	b2da      	uxtb	r2, r3
 8016fc8:	4b10      	ldr	r3, [pc, #64]	; (801700c <VL53L1_ReadMulti+0x68>)
 8016fca:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8016fcc:	2202      	movs	r2, #2
 8016fce:	490f      	ldr	r1, [pc, #60]	; (801700c <VL53L1_ReadMulti+0x68>)
 8016fd0:	68f8      	ldr	r0, [r7, #12]
 8016fd2:	f7ff ff8b 	bl	8016eec <_I2CWrite>
 8016fd6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016fd8:	693b      	ldr	r3, [r7, #16]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d002      	beq.n	8016fe4 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016fde:	23f3      	movs	r3, #243	; 0xf3
 8016fe0:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016fe2:	e00c      	b.n	8016ffe <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8016fe4:	683a      	ldr	r2, [r7, #0]
 8016fe6:	6879      	ldr	r1, [r7, #4]
 8016fe8:	68f8      	ldr	r0, [r7, #12]
 8016fea:	f7ff ff92 	bl	8016f12 <_I2CRead>
 8016fee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d002      	beq.n	8016ffc <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8016ff6:	23f3      	movs	r3, #243	; 0xf3
 8016ff8:	75fb      	strb	r3, [r7, #23]
 8016ffa:	e000      	b.n	8016ffe <VL53L1_ReadMulti+0x5a>
    }
done:
 8016ffc:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8016ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017002:	4618      	mov	r0, r3
 8017004:	3718      	adds	r7, #24
 8017006:	46bd      	mov	sp, r7
 8017008:	bd80      	pop	{r7, pc}
 801700a:	bf00      	nop
 801700c:	20008750 	.word	0x20008750

08017010 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8017010:	b580      	push	{r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
 8017018:	460b      	mov	r3, r1
 801701a:	807b      	strh	r3, [r7, #2]
 801701c:	4613      	mov	r3, r2
 801701e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8017020:	2300      	movs	r3, #0
 8017022:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8017024:	887b      	ldrh	r3, [r7, #2]
 8017026:	0a1b      	lsrs	r3, r3, #8
 8017028:	b29b      	uxth	r3, r3
 801702a:	b2da      	uxtb	r2, r3
 801702c:	4b0c      	ldr	r3, [pc, #48]	; (8017060 <VL53L1_WrByte+0x50>)
 801702e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8017030:	887b      	ldrh	r3, [r7, #2]
 8017032:	b2da      	uxtb	r2, r3
 8017034:	4b0a      	ldr	r3, [pc, #40]	; (8017060 <VL53L1_WrByte+0x50>)
 8017036:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8017038:	4a09      	ldr	r2, [pc, #36]	; (8017060 <VL53L1_WrByte+0x50>)
 801703a:	787b      	ldrb	r3, [r7, #1]
 801703c:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801703e:	2203      	movs	r2, #3
 8017040:	4907      	ldr	r1, [pc, #28]	; (8017060 <VL53L1_WrByte+0x50>)
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f7ff ff52 	bl	8016eec <_I2CWrite>
 8017048:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d001      	beq.n	8017054 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017050:	23f3      	movs	r3, #243	; 0xf3
 8017052:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8017054:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017058:	4618      	mov	r0, r3
 801705a:	3710      	adds	r7, #16
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	20008750 	.word	0x20008750

08017064 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8017064:	b580      	push	{r7, lr}
 8017066:	b084      	sub	sp, #16
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	460b      	mov	r3, r1
 801706e:	807b      	strh	r3, [r7, #2]
 8017070:	4613      	mov	r3, r2
 8017072:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8017074:	2300      	movs	r3, #0
 8017076:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8017078:	887b      	ldrh	r3, [r7, #2]
 801707a:	0a1b      	lsrs	r3, r3, #8
 801707c:	b29b      	uxth	r3, r3
 801707e:	b2da      	uxtb	r2, r3
 8017080:	4b10      	ldr	r3, [pc, #64]	; (80170c4 <VL53L1_WrWord+0x60>)
 8017082:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8017084:	887b      	ldrh	r3, [r7, #2]
 8017086:	b2da      	uxtb	r2, r3
 8017088:	4b0e      	ldr	r3, [pc, #56]	; (80170c4 <VL53L1_WrWord+0x60>)
 801708a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 801708c:	883b      	ldrh	r3, [r7, #0]
 801708e:	0a1b      	lsrs	r3, r3, #8
 8017090:	b29b      	uxth	r3, r3
 8017092:	b2da      	uxtb	r2, r3
 8017094:	4b0b      	ldr	r3, [pc, #44]	; (80170c4 <VL53L1_WrWord+0x60>)
 8017096:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8017098:	883b      	ldrh	r3, [r7, #0]
 801709a:	b2da      	uxtb	r2, r3
 801709c:	4b09      	ldr	r3, [pc, #36]	; (80170c4 <VL53L1_WrWord+0x60>)
 801709e:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80170a0:	2204      	movs	r2, #4
 80170a2:	4908      	ldr	r1, [pc, #32]	; (80170c4 <VL53L1_WrWord+0x60>)
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7ff ff21 	bl	8016eec <_I2CWrite>
 80170aa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d001      	beq.n	80170b6 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80170b2:	23f3      	movs	r3, #243	; 0xf3
 80170b4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80170b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	3710      	adds	r7, #16
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	bf00      	nop
 80170c4:	20008750 	.word	0x20008750

080170c8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b086      	sub	sp, #24
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	60f8      	str	r0, [r7, #12]
 80170d0:	460b      	mov	r3, r1
 80170d2:	607a      	str	r2, [r7, #4]
 80170d4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80170d6:	2300      	movs	r3, #0
 80170d8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80170da:	897b      	ldrh	r3, [r7, #10]
 80170dc:	0a1b      	lsrs	r3, r3, #8
 80170de:	b29b      	uxth	r3, r3
 80170e0:	b2da      	uxtb	r2, r3
 80170e2:	4b12      	ldr	r3, [pc, #72]	; (801712c <VL53L1_RdByte+0x64>)
 80170e4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80170e6:	897b      	ldrh	r3, [r7, #10]
 80170e8:	b2da      	uxtb	r2, r3
 80170ea:	4b10      	ldr	r3, [pc, #64]	; (801712c <VL53L1_RdByte+0x64>)
 80170ec:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80170ee:	2202      	movs	r2, #2
 80170f0:	490e      	ldr	r1, [pc, #56]	; (801712c <VL53L1_RdByte+0x64>)
 80170f2:	68f8      	ldr	r0, [r7, #12]
 80170f4:	f7ff fefa 	bl	8016eec <_I2CWrite>
 80170f8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d002      	beq.n	8017106 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017100:	23f3      	movs	r3, #243	; 0xf3
 8017102:	75fb      	strb	r3, [r7, #23]
        goto done;
 8017104:	e00c      	b.n	8017120 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8017106:	2201      	movs	r2, #1
 8017108:	6879      	ldr	r1, [r7, #4]
 801710a:	68f8      	ldr	r0, [r7, #12]
 801710c:	f7ff ff01 	bl	8016f12 <_I2CRead>
 8017110:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8017112:	693b      	ldr	r3, [r7, #16]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d002      	beq.n	801711e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017118:	23f3      	movs	r3, #243	; 0xf3
 801711a:	75fb      	strb	r3, [r7, #23]
 801711c:	e000      	b.n	8017120 <VL53L1_RdByte+0x58>
    }
done:
 801711e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8017120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017124:	4618      	mov	r0, r3
 8017126:	3718      	adds	r7, #24
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}
 801712c:	20008750 	.word	0x20008750

08017130 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8017130:	b580      	push	{r7, lr}
 8017132:	b086      	sub	sp, #24
 8017134:	af00      	add	r7, sp, #0
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	460b      	mov	r3, r1
 801713a:	607a      	str	r2, [r7, #4]
 801713c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801713e:	2300      	movs	r3, #0
 8017140:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8017142:	897b      	ldrh	r3, [r7, #10]
 8017144:	0a1b      	lsrs	r3, r3, #8
 8017146:	b29b      	uxth	r3, r3
 8017148:	b2da      	uxtb	r2, r3
 801714a:	4b18      	ldr	r3, [pc, #96]	; (80171ac <VL53L1_RdWord+0x7c>)
 801714c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801714e:	897b      	ldrh	r3, [r7, #10]
 8017150:	b2da      	uxtb	r2, r3
 8017152:	4b16      	ldr	r3, [pc, #88]	; (80171ac <VL53L1_RdWord+0x7c>)
 8017154:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8017156:	2202      	movs	r2, #2
 8017158:	4914      	ldr	r1, [pc, #80]	; (80171ac <VL53L1_RdWord+0x7c>)
 801715a:	68f8      	ldr	r0, [r7, #12]
 801715c:	f7ff fec6 	bl	8016eec <_I2CWrite>
 8017160:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8017162:	693b      	ldr	r3, [r7, #16]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d002      	beq.n	801716e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017168:	23f3      	movs	r3, #243	; 0xf3
 801716a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801716c:	e017      	b.n	801719e <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801716e:	2202      	movs	r2, #2
 8017170:	490e      	ldr	r1, [pc, #56]	; (80171ac <VL53L1_RdWord+0x7c>)
 8017172:	68f8      	ldr	r0, [r7, #12]
 8017174:	f7ff fecd 	bl	8016f12 <_I2CRead>
 8017178:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d002      	beq.n	8017186 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8017180:	23f3      	movs	r3, #243	; 0xf3
 8017182:	75fb      	strb	r3, [r7, #23]
        goto done;
 8017184:	e00b      	b.n	801719e <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8017186:	4b09      	ldr	r3, [pc, #36]	; (80171ac <VL53L1_RdWord+0x7c>)
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	b29b      	uxth	r3, r3
 801718c:	021b      	lsls	r3, r3, #8
 801718e:	b29a      	uxth	r2, r3
 8017190:	4b06      	ldr	r3, [pc, #24]	; (80171ac <VL53L1_RdWord+0x7c>)
 8017192:	785b      	ldrb	r3, [r3, #1]
 8017194:	b29b      	uxth	r3, r3
 8017196:	4413      	add	r3, r2
 8017198:	b29a      	uxth	r2, r3
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 801719e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3718      	adds	r7, #24
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}
 80171aa:	bf00      	nop
 80171ac:	20008750 	.word	0x20008750

080171b0 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b084      	sub	sp, #16
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
 80171b8:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80171ba:	2300      	movs	r3, #0
 80171bc:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	695b      	ldr	r3, [r3, #20]
 80171c2:	4798      	blx	r3
 80171c4:	4603      	mov	r3, r0
 80171c6:	461a      	mov	r2, r3
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80171cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	3710      	adds	r7, #16
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}

080171d8 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	4619      	mov	r1, r3
 80171e6:	6878      	ldr	r0, [r7, #4]
 80171e8:	f000 f8d2 	bl	8017390 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 80171ec:	2300      	movs	r3, #0
}
 80171ee:	4618      	mov	r0, r3
 80171f0:	3708      	adds	r7, #8
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}
	...

080171f8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b082      	sub	sp, #8
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	4a07      	ldr	r2, [pc, #28]	; (8017224 <VL53L1_WaitUs+0x2c>)
 8017206:	fb82 1203 	smull	r1, r2, r2, r3
 801720a:	1192      	asrs	r2, r2, #6
 801720c:	17db      	asrs	r3, r3, #31
 801720e:	1ad3      	subs	r3, r2, r3
 8017210:	4619      	mov	r1, r3
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f000 f8bc 	bl	8017390 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8017218:	2300      	movs	r3, #0
}
 801721a:	4618      	mov	r0, r3
 801721c:	3708      	adds	r7, #8
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}
 8017222:	bf00      	nop
 8017224:	10624dd3 	.word	0x10624dd3

08017228 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8017228:	b590      	push	{r4, r7, lr}
 801722a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801722e:	af00      	add	r7, sp, #0
 8017230:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8017234:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8017238:	6020      	str	r0, [r4, #0]
 801723a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 801723e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8017242:	6001      	str	r1, [r0, #0]
 8017244:	4619      	mov	r1, r3
 8017246:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801724a:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 801724e:	801a      	strh	r2, [r3, #0]
 8017250:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017254:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8017258:	460a      	mov	r2, r1
 801725a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 801725c:	2300      	movs	r3, #0
 801725e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8017262:	2300      	movs	r3, #0
 8017264:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8017268:	2300      	movs	r3, #0
 801726a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 801726e:	2300      	movs	r3, #0
 8017270:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8017274:	2300      	movs	r3, #0
 8017276:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 801727a:	2300      	movs	r3, #0
 801727c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8017280:	f107 0310 	add.w	r3, r7, #16
 8017284:	f240 12ff 	movw	r2, #511	; 0x1ff
 8017288:	4940      	ldr	r1, [pc, #256]	; (801738c <VL53L1_WaitValueMaskEx+0x164>)
 801728a:	4618      	mov	r0, r3
 801728c:	f008 fdab 	bl	801fde6 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8017290:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8017294:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017298:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801729c:	4611      	mov	r1, r2
 801729e:	6818      	ldr	r0, [r3, #0]
 80172a0:	f7ff ff86 	bl	80171b0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80172a4:	e04e      	b.n	8017344 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 80172a6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d110      	bne.n	80172d0 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 80172ae:	f207 2213 	addw	r2, r7, #531	; 0x213
 80172b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80172b6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80172ba:	8819      	ldrh	r1, [r3, #0]
 80172bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80172c0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80172c4:	6818      	ldr	r0, [r3, #0]
 80172c6:	f7ff feff 	bl	80170c8 <VL53L1_RdByte>
 80172ca:	4603      	mov	r3, r0
 80172cc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80172d0:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80172d4:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 80172d8:	4013      	ands	r3, r2
 80172da:	b2db      	uxtb	r3, r3
 80172dc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80172e0:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 80172e4:	7812      	ldrb	r2, [r2, #0]
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d102      	bne.n	80172f0 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 80172ea:	2301      	movs	r3, #1
 80172ec:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 80172f0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d114      	bne.n	8017322 <VL53L1_WaitValueMaskEx+0xfa>
 80172f8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d110      	bne.n	8017322 <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8017300:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8017304:	2b00      	cmp	r3, #0
 8017306:	d00c      	beq.n	8017322 <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8017308:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801730c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017310:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017314:	4611      	mov	r1, r2
 8017316:	6818      	ldr	r0, [r3, #0]
 8017318:	f7ff ff5e 	bl	80171d8 <VL53L1_WaitMs>
 801731c:	4603      	mov	r3, r0
 801731e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8017322:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8017326:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801732a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801732e:	4611      	mov	r1, r2
 8017330:	6818      	ldr	r0, [r3, #0]
 8017332:	f7ff ff3d 	bl	80171b0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8017336:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801733a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8017344:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8017348:	2b00      	cmp	r3, #0
 801734a:	d10c      	bne.n	8017366 <VL53L1_WaitValueMaskEx+0x13e>
 801734c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017350:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8017354:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	429a      	cmp	r2, r3
 801735c:	d203      	bcs.n	8017366 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 801735e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8017362:	2b00      	cmp	r3, #0
 8017364:	d09f      	beq.n	80172a6 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8017366:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801736a:	2b00      	cmp	r3, #0
 801736c:	d106      	bne.n	801737c <VL53L1_WaitValueMaskEx+0x154>
 801736e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8017372:	2b00      	cmp	r3, #0
 8017374:	d102      	bne.n	801737c <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8017376:	23f9      	movs	r3, #249	; 0xf9
 8017378:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 801737c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8017380:	4618      	mov	r0, r3
 8017382:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8017386:	46bd      	mov	sp, r7
 8017388:	bd90      	pop	{r4, r7, pc}
 801738a:	bf00      	nop
 801738c:	08021df8 	.word	0x08021df8

08017390 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b084      	sub	sp, #16
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
 8017398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	695b      	ldr	r3, [r3, #20]
 801739e:	4798      	blx	r3
 80173a0:	4603      	mov	r3, r0
 80173a2:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80173a4:	bf00      	nop
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	695b      	ldr	r3, [r3, #20]
 80173aa:	4798      	blx	r3
 80173ac:	4603      	mov	r3, r0
 80173ae:	461a      	mov	r2, r3
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	1ad3      	subs	r3, r2, r3
 80173b4:	683a      	ldr	r2, [r7, #0]
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d8f5      	bhi.n	80173a6 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 80173ba:	2300      	movs	r3, #0
}
 80173bc:	4618      	mov	r0, r3
 80173be:	3710      	adds	r7, #16
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}

080173c4 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b08c      	sub	sp, #48	; 0x30
 80173c8:	af06      	add	r7, sp, #24
 80173ca:	60f8      	str	r0, [r7, #12]
 80173cc:	60b9      	str	r1, [r7, #8]
 80173ce:	607a      	str	r2, [r7, #4]
 80173d0:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 80173d2:	2300      	movs	r3, #0
 80173d4:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 80173d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d8:	9304      	str	r3, [sp, #16]
 80173da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173dc:	9303      	str	r3, [sp, #12]
 80173de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e0:	9302      	str	r3, [sp, #8]
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	9301      	str	r3, [sp, #4]
 80173e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e8:	9300      	str	r3, [sp, #0]
 80173ea:	6a3b      	ldr	r3, [r7, #32]
 80173ec:	683a      	ldr	r2, [r7, #0]
 80173ee:	6879      	ldr	r1, [r7, #4]
 80173f0:	68b8      	ldr	r0, [r7, #8]
 80173f2:	f7fc fefb 	bl	80141ec <VL53L1_hist_process_data>
 80173f6:	4603      	mov	r3, r0
 80173f8:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 80173fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3718      	adds	r7, #24
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}

08017406 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8017406:	b580      	push	{r7, lr}
 8017408:	b084      	sub	sp, #16
 801740a:	af00      	add	r7, sp, #0
 801740c:	6078      	str	r0, [r7, #4]
 801740e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d103      	bne.n	801741e <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017416:	f06f 0301 	mvn.w	r3, #1
 801741a:	60fb      	str	r3, [r7, #12]
 801741c:	e023      	b.n	8017466 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 801741e:	683b      	ldr	r3, [r7, #0]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8017426:	683b      	ldr	r3, [r7, #0]
 8017428:	685a      	ldr	r2, [r3, #4]
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	891a      	ldrh	r2, [r3, #8]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	68da      	ldr	r2, [r3, #12]
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	691a      	ldr	r2, [r3, #16]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	695a      	ldr	r2, [r3, #20]
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d004      	beq.n	8017460 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	4798      	blx	r3
 801745c:	60f8      	str	r0, [r7, #12]
 801745e:	e002      	b.n	8017466 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8017460:	f04f 33ff 	mov.w	r3, #4294967295
 8017464:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8017466:	68fb      	ldr	r3, [r7, #12]
}
 8017468:	4618      	mov	r0, r3
 801746a:	3710      	adds	r7, #16
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}

08017470 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b084      	sub	sp, #16
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801747e:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8017482:	2b00      	cmp	r3, #0
 8017484:	d003      	beq.n	801748e <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8017486:	f04f 33ff 	mov.w	r3, #4294967295
 801748a:	60fb      	str	r3, [r7, #12]
 801748c:	e04d      	b.n	801752a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f7ed f8d1 	bl	8004636 <VL53L1_WaitDeviceBooted>
 8017494:	4603      	mov	r3, r0
 8017496:	2b00      	cmp	r3, #0
 8017498:	d003      	beq.n	80174a2 <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 801749a:	f04f 33ff 	mov.w	r3, #4294967295
 801749e:	60fb      	str	r3, [r7, #12]
 80174a0:	e043      	b.n	801752a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7ed f847 	bl	8004536 <VL53L1_DataInit>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d003      	beq.n	80174b6 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 80174ae:	f04f 33ff 	mov.w	r3, #4294967295
 80174b2:	60fb      	str	r3, [r7, #12]
 80174b4:	e039      	b.n	801752a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f7ed f892 	bl	80045e0 <VL53L1_StaticInit>
 80174bc:	4603      	mov	r3, r0
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d003      	beq.n	80174ca <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 80174c2:	f04f 33ff 	mov.w	r3, #4294967295
 80174c6:	60fb      	str	r3, [r7, #12]
 80174c8:	e02f      	b.n	801752a <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f7ee fe8a 	bl	80061e4 <VL53L1_PerformRefSpadManagement>
 80174d0:	4603      	mov	r3, r0
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d003      	beq.n	80174de <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 80174d6:	f04f 33ff 	mov.w	r3, #4294967295
 80174da:	60fb      	str	r3, [r7, #12]
 80174dc:	e025      	b.n	801752a <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80174e4:	2200      	movs	r2, #0
 80174e6:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80174f0:	2200      	movs	r2, #0
 80174f2:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80174fc:	2200      	movs	r2, #0
 80174fe:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017508:	2200      	movs	r2, #0
 801750a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017514:	2200      	movs	r2, #0
 8017516:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017520:	2201      	movs	r2, #1
 8017522:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8017526:	2300      	movs	r3, #0
 8017528:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801752a:	68fb      	ldr	r3, [r7, #12]
}
 801752c:	4618      	mov	r0, r3
 801752e:	3710      	adds	r7, #16
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 801753c:	f04f 33ff 	mov.w	r3, #4294967295
 8017540:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017548:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 801754c:	2b01      	cmp	r3, #1
 801754e:	d111      	bne.n	8017574 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	4798      	blx	r3
 8017556:	4603      	mov	r3, r0
 8017558:	2b00      	cmp	r3, #0
 801755a:	d003      	beq.n	8017564 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 801755c:	f04f 33ff 	mov.w	r3, #4294967295
 8017560:	60fb      	str	r3, [r7, #12]
 8017562:	e007      	b.n	8017574 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8017564:	2300      	movs	r3, #0
 8017566:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801756e:	2200      	movs	r2, #0
 8017570:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8017574:	68fb      	ldr	r3, [r7, #12]
}
 8017576:	4618      	mov	r0, r3
 8017578:	3710      	adds	r7, #16
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 801757e:	b580      	push	{r7, lr}
 8017580:	b084      	sub	sp, #16
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
 8017586:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d002      	beq.n	8017594 <VL53L1CB_ReadID+0x16>
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d103      	bne.n	801759c <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017594:	f06f 0301 	mvn.w	r3, #1
 8017598:	60fb      	str	r3, [r7, #12]
 801759a:	e00a      	b.n	80175b2 <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	2200      	movs	r2, #0
 80175a0:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 80175a2:	683a      	ldr	r2, [r7, #0]
 80175a4:	f240 110f 	movw	r1, #271	; 0x10f
 80175a8:	6878      	ldr	r0, [r7, #4]
 80175aa:	f7ff fdc1 	bl	8017130 <VL53L1_RdWord>
 80175ae:	4603      	mov	r3, r0
 80175b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80175b2:	68fb      	ldr	r3, [r7, #12]
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3710      	adds	r7, #16
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 80175bc:	b480      	push	{r7}
 80175be:	b085      	sub	sp, #20
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d002      	beq.n	80175d2 <VL53L1CB_GetCapabilities+0x16>
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d103      	bne.n	80175da <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80175d2:	f06f 0301 	mvn.w	r3, #1
 80175d6:	60fb      	str	r3, [r7, #12]
 80175d8:	e00d      	b.n	80175f6 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	2201      	movs	r2, #1
 80175de:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	2204      	movs	r2, #4
 80175e4:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	2201      	movs	r2, #1
 80175ea:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	2200      	movs	r2, #0
 80175f0:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 80175f2:	2300      	movs	r3, #0
 80175f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80175f6:	68fb      	ldr	r3, [r7, #12]
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	3714      	adds	r7, #20
 80175fc:	46bd      	mov	sp, r7
 80175fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017602:	4770      	bx	lr

08017604 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b084      	sub	sp, #16
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
 801760c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d009      	beq.n	8017628 <VL53L1CB_ConfigProfile+0x24>
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d006      	beq.n	8017628 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8017620:	7afb      	ldrb	r3, [r7, #11]
 8017622:	2b01      	cmp	r3, #1
 8017624:	d103      	bne.n	801762e <VL53L1CB_ConfigProfile+0x2a>
 8017626:	e00c      	b.n	8017642 <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8017628:	f06f 0301 	mvn.w	r3, #1
 801762c:	e043      	b.n	80176b6 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 801762e:	7afb      	ldrb	r3, [r7, #11]
 8017630:	2b02      	cmp	r3, #2
 8017632:	d006      	beq.n	8017642 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8017634:	7afb      	ldrb	r3, [r7, #11]
 8017636:	2b03      	cmp	r3, #3
 8017638:	d003      	beq.n	8017642 <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 801763a:	f06f 0301 	mvn.w	r3, #1
 801763e:	60fb      	str	r3, [r7, #12]
 8017640:	e038      	b.n	80176b4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8017642:	7afb      	ldrb	r3, [r7, #11]
 8017644:	4619      	mov	r1, r3
 8017646:	6878      	ldr	r0, [r7, #4]
 8017648:	f7ed f970 	bl	800492c <VL53L1_SetDistanceMode>
 801764c:	4603      	mov	r3, r0
 801764e:	2b00      	cmp	r3, #0
 8017650:	d003      	beq.n	801765a <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8017652:	f04f 33ff 	mov.w	r3, #4294967295
 8017656:	60fb      	str	r3, [r7, #12]
 8017658:	e02c      	b.n	80176b4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 801765e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017662:	fb02 f303 	mul.w	r3, r2, r3
 8017666:	4619      	mov	r1, r3
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f7ed f9ed 	bl	8004a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 801766e:	4603      	mov	r3, r0
 8017670:	2b00      	cmp	r3, #0
 8017672:	d003      	beq.n	801767c <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8017674:	f04f 33ff 	mov.w	r3, #4294967295
 8017678:	60fb      	str	r3, [r7, #12]
 801767a:	e01b      	b.n	80176b4 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	68db      	ldr	r3, [r3, #12]
 8017680:	2b00      	cmp	r3, #0
 8017682:	bf14      	ite	ne
 8017684:	2301      	movne	r3, #1
 8017686:	2300      	moveq	r3, #0
 8017688:	b2db      	uxtb	r3, r3
 801768a:	461a      	mov	r2, r3
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017692:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	691b      	ldr	r3, [r3, #16]
 801769a:	2b00      	cmp	r3, #0
 801769c:	bf14      	ite	ne
 801769e:	2301      	movne	r3, #1
 80176a0:	2300      	moveq	r3, #0
 80176a2:	b2db      	uxtb	r3, r3
 80176a4:	461a      	mov	r2, r3
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80176ac:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 80176b0:	2300      	movs	r3, #0
 80176b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80176b4:	68fb      	ldr	r3, [r7, #12]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3710      	adds	r7, #16
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}

080176be <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 80176be:	b580      	push	{r7, lr}
 80176c0:	b094      	sub	sp, #80	; 0x50
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	6078      	str	r0, [r7, #4]
 80176c6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d002      	beq.n	80176d4 <VL53L1CB_ConfigROI+0x16>
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d103      	bne.n	80176dc <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80176d4:	f06f 0301 	mvn.w	r3, #1
 80176d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80176da:	e01c      	b.n	8017716 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 80176dc:	2301      	movs	r3, #1
 80176de:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	789b      	ldrb	r3, [r3, #2]
 80176e4:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	78db      	ldrb	r3, [r3, #3]
 80176ea:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	781b      	ldrb	r3, [r3, #0]
 80176f0:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	785b      	ldrb	r3, [r3, #1]
 80176f6:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 80176f8:	f107 0308 	add.w	r3, r7, #8
 80176fc:	4619      	mov	r1, r3
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f7ed fca6 	bl	8005050 <VL53L1_SetROI>
 8017704:	4603      	mov	r3, r0
 8017706:	2b00      	cmp	r3, #0
 8017708:	d003      	beq.n	8017712 <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 801770a:	f04f 33ff 	mov.w	r3, #4294967295
 801770e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017710:	e001      	b.n	8017716 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8017712:	2300      	movs	r3, #0
 8017714:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8017716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8017718:	4618      	mov	r0, r3
 801771a:	3750      	adds	r7, #80	; 0x50
 801771c:	46bd      	mov	sp, r7
 801771e:	bd80      	pop	{r7, pc}

08017720 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8017720:	b480      	push	{r7}
 8017722:	b083      	sub	sp, #12
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 801772a:	f06f 0303 	mvn.w	r3, #3
}
 801772e:	4618      	mov	r0, r3
 8017730:	370c      	adds	r7, #12
 8017732:	46bd      	mov	sp, r7
 8017734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017738:	4770      	bx	lr

0801773a <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 801773a:	b580      	push	{r7, lr}
 801773c:	b084      	sub	sp, #16
 801773e:	af00      	add	r7, sp, #0
 8017740:	6078      	str	r0, [r7, #4]
 8017742:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d002      	beq.n	8017750 <VL53L1CB_GetDistance+0x16>
 801774a:	683b      	ldr	r3, [r7, #0]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d103      	bne.n	8017758 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017750:	f06f 0301 	mvn.w	r3, #1
 8017754:	60fb      	str	r3, [r7, #12]
 8017756:	e03a      	b.n	80177ce <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801775e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8017762:	2b00      	cmp	r3, #0
 8017764:	d103      	bne.n	801776e <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8017766:	f04f 33ff 	mov.w	r3, #4294967295
 801776a:	60fb      	str	r3, [r7, #12]
 801776c:	e02f      	b.n	80177ce <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017774:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8017778:	2b01      	cmp	r3, #1
 801777a:	d106      	bne.n	801778a <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 801777c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f000 f92b 	bl	80179dc <vl53l1cb_poll_for_measurement>
 8017786:	60f8      	str	r0, [r7, #12]
 8017788:	e004      	b.n	8017794 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 801778a:	2100      	movs	r1, #0
 801778c:	6878      	ldr	r0, [r7, #4]
 801778e:	f000 f925 	bl	80179dc <vl53l1cb_poll_for_measurement>
 8017792:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d119      	bne.n	80177ce <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 801779a:	6839      	ldr	r1, [r7, #0]
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f000 f94b 	bl	8017a38 <vl53l1cb_get_result>
 80177a2:	4603      	mov	r3, r0
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d003      	beq.n	80177b0 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 80177a8:	f04f 33ff 	mov.w	r3, #4294967295
 80177ac:	60fb      	str	r3, [r7, #12]
 80177ae:	e00e      	b.n	80177ce <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80177b6:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 80177ba:	2b01      	cmp	r3, #1
 80177bc:	d105      	bne.n	80177ca <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 80177be:	6878      	ldr	r0, [r7, #4]
 80177c0:	f7ed fdde 	bl	8005380 <VL53L1_ClearInterruptAndStartMeasurement>
 80177c4:	4603      	mov	r3, r0
 80177c6:	60fb      	str	r3, [r7, #12]
 80177c8:	e001      	b.n	80177ce <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 80177ca:	2300      	movs	r3, #0
 80177cc:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 80177ce:	68fb      	ldr	r3, [r7, #12]
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3710      	adds	r7, #16
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b084      	sub	sp, #16
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d103      	bne.n	80177f0 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80177e8:	f06f 0301 	mvn.w	r3, #1
 80177ec:	60fb      	str	r3, [r7, #12]
 80177ee:	e068      	b.n	80178c2 <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80177f6:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	d103      	bne.n	8017806 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 80177fe:	f04f 33ff 	mov.w	r3, #4294967295
 8017802:	60fb      	str	r3, [r7, #12]
 8017804:	e05d      	b.n	80178c2 <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8017806:	6878      	ldr	r0, [r7, #4]
 8017808:	f7ed fcf6 	bl	80051f8 <VL53L1_StartMeasurement>
 801780c:	4603      	mov	r3, r0
 801780e:	2b00      	cmp	r3, #0
 8017810:	d154      	bne.n	80178bc <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017818:	2201      	movs	r2, #1
 801781a:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 801781e:	2300      	movs	r3, #0
 8017820:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	3b01      	subs	r3, #1
 8017826:	2b03      	cmp	r3, #3
 8017828:	d83e      	bhi.n	80178a8 <VL53L1CB_Start+0xd0>
 801782a:	a201      	add	r2, pc, #4	; (adr r2, 8017830 <VL53L1CB_Start+0x58>)
 801782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017830:	08017841 	.word	0x08017841
 8017834:	0801785b 	.word	0x0801785b
 8017838:	08017875 	.word	0x08017875
 801783c:	0801788f 	.word	0x0801788f
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017846:	2201      	movs	r2, #1
 8017848:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017852:	2201      	movs	r2, #1
 8017854:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8017858:	e033      	b.n	80178c2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017860:	2200      	movs	r2, #0
 8017862:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801786c:	2201      	movs	r2, #1
 801786e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8017872:	e026      	b.n	80178c2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801787a:	2201      	movs	r2, #1
 801787c:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017886:	2200      	movs	r2, #0
 8017888:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801788c:	e019      	b.n	80178c2 <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017894:	2200      	movs	r2, #0
 8017896:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80178a0:	2200      	movs	r2, #0
 80178a2:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80178a6:	e00c      	b.n	80178c2 <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80178ae:	2200      	movs	r2, #0
 80178b0:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 80178b4:	f06f 0301 	mvn.w	r3, #1
 80178b8:	60fb      	str	r3, [r7, #12]
      break;
 80178ba:	e002      	b.n	80178c2 <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 80178bc:	f04f 33ff 	mov.w	r3, #4294967295
 80178c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80178c2:	68fb      	ldr	r3, [r7, #12]
}
 80178c4:	4618      	mov	r0, r3
 80178c6:	3710      	adds	r7, #16
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}

080178cc <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b084      	sub	sp, #16
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d103      	bne.n	80178e2 <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80178da:	f06f 0301 	mvn.w	r3, #1
 80178de:	60fb      	str	r3, [r7, #12]
 80178e0:	e01c      	b.n	801791c <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80178e8:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d103      	bne.n	80178f8 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 80178f0:	f04f 33ff 	mov.w	r3, #4294967295
 80178f4:	60fb      	str	r3, [r7, #12]
 80178f6:	e011      	b.n	801791c <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f7ed fd1d 	bl	8005338 <VL53L1_StopMeasurement>
 80178fe:	4603      	mov	r3, r0
 8017900:	2b00      	cmp	r3, #0
 8017902:	d108      	bne.n	8017916 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801790a:	2200      	movs	r2, #0
 801790c:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8017910:	2300      	movs	r3, #0
 8017912:	60fb      	str	r3, [r7, #12]
 8017914:	e002      	b.n	801791c <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8017916:	f04f 33ff 	mov.w	r3, #4294967295
 801791a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801791c:	68fb      	ldr	r3, [r7, #12]
}
 801791e:	4618      	mov	r0, r3
 8017920:	3710      	adds	r7, #16
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}

08017926 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8017926:	b580      	push	{r7, lr}
 8017928:	b084      	sub	sp, #16
 801792a:	af00      	add	r7, sp, #0
 801792c:	6078      	str	r0, [r7, #4]
 801792e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d103      	bne.n	801793e <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017936:	f06f 0301 	mvn.w	r3, #1
 801793a:	60fb      	str	r3, [r7, #12]
 801793c:	e012      	b.n	8017964 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	b2db      	uxtb	r3, r3
 8017942:	4619      	mov	r1, r3
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f7ec fdcf 	bl	80044e8 <VL53L1_SetDeviceAddress>
 801794a:	4603      	mov	r3, r0
 801794c:	2b00      	cmp	r3, #0
 801794e:	d003      	beq.n	8017958 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8017950:	f04f 33ff 	mov.w	r3, #4294967295
 8017954:	60fb      	str	r3, [r7, #12]
 8017956:	e005      	b.n	8017964 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8017958:	683b      	ldr	r3, [r7, #0]
 801795a:	b29a      	uxth	r2, r3
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8017960:	2300      	movs	r3, #0
 8017962:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017964:	68fb      	ldr	r3, [r7, #12]
}
 8017966:	4618      	mov	r0, r3
 8017968:	3710      	adds	r7, #16
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}

0801796e <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 801796e:	b480      	push	{r7}
 8017970:	b085      	sub	sp, #20
 8017972:	af00      	add	r7, sp, #0
 8017974:	6078      	str	r0, [r7, #4]
 8017976:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d002      	beq.n	8017984 <VL53L1CB_GetAddress+0x16>
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d103      	bne.n	801798c <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017984:	f06f 0301 	mvn.w	r3, #1
 8017988:	60fb      	str	r3, [r7, #12]
 801798a:	e006      	b.n	801799a <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	891b      	ldrh	r3, [r3, #8]
 8017990:	461a      	mov	r2, r3
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8017996:	2300      	movs	r3, #0
 8017998:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801799a:	68fb      	ldr	r3, [r7, #12]
}
 801799c:	4618      	mov	r0, r3
 801799e:	3714      	adds	r7, #20
 80179a0:	46bd      	mov	sp, r7
 80179a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a6:	4770      	bx	lr

080179a8 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 80179a8:	b480      	push	{r7}
 80179aa:	b083      	sub	sp, #12
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
 80179b0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80179b2:	f06f 0303 	mvn.w	r3, #3
}
 80179b6:	4618      	mov	r0, r3
 80179b8:	370c      	adds	r7, #12
 80179ba:	46bd      	mov	sp, r7
 80179bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c0:	4770      	bx	lr

080179c2 <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 80179c2:	b480      	push	{r7}
 80179c4:	b083      	sub	sp, #12
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	6078      	str	r0, [r7, #4]
 80179ca:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80179cc:	f06f 0303 	mvn.w	r3, #3
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	370c      	adds	r7, #12
 80179d4:	46bd      	mov	sp, r7
 80179d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179da:	4770      	bx	lr

080179dc <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80179e6:	2300      	movs	r3, #0
 80179e8:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d102      	bne.n	80179f6 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 80179f0:	f06f 0301 	mvn.w	r3, #1
 80179f4:	e01b      	b.n	8017a2e <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	695b      	ldr	r3, [r3, #20]
 80179fa:	4798      	blx	r3
 80179fc:	4603      	mov	r3, r0
 80179fe:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8017a00:	f107 030b 	add.w	r3, r7, #11
 8017a04:	4619      	mov	r1, r3
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f7ed fcd0 	bl	80053ac <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8017a0c:	7afb      	ldrb	r3, [r7, #11]
 8017a0e:	2b01      	cmp	r3, #1
 8017a10:	d101      	bne.n	8017a16 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 8017a12:	2300      	movs	r3, #0
 8017a14:	e00b      	b.n	8017a2e <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	695b      	ldr	r3, [r3, #20]
 8017a1a:	4798      	blx	r3
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	461a      	mov	r2, r3
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	1ad3      	subs	r3, r2, r3
 8017a24:	683a      	ldr	r2, [r7, #0]
 8017a26:	429a      	cmp	r2, r3
 8017a28:	d8ea      	bhi.n	8017a00 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8017a2a:	f06f 0302 	mvn.w	r3, #2
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3710      	adds	r7, #16
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}
	...

08017a38 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8017a38:	b590      	push	{r4, r7, lr}
 8017a3a:	b089      	sub	sp, #36	; 0x24
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d002      	beq.n	8017a4e <vl53l1cb_get_result+0x16>
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d103      	bne.n	8017a56 <vl53l1cb_get_result+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8017a4e:	f06f 0301 	mvn.w	r3, #1
 8017a52:	61fb      	str	r3, [r7, #28]
 8017a54:	e100      	b.n	8017c58 <vl53l1cb_get_result+0x220>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8017a56:	4983      	ldr	r1, [pc, #524]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017a58:	6878      	ldr	r0, [r7, #4]
 8017a5a:	f7ee fb85 	bl	8006168 <VL53L1_GetMultiRangingData>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d003      	beq.n	8017a6c <vl53l1cb_get_result+0x34>
  {
    ret = VL53L1CB_ERROR;
 8017a64:	f04f 33ff 	mov.w	r3, #4294967295
 8017a68:	61fb      	str	r3, [r7, #28]
 8017a6a:	e0f5      	b.n	8017c58 <vl53l1cb_get_result+0x220>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	76fb      	strb	r3, [r7, #27]
 8017a70:	e0ec      	b.n	8017c4c <vl53l1cb_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8017a72:	4b7c      	ldr	r3, [pc, #496]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017a74:	799b      	ldrb	r3, [r3, #6]
 8017a76:	7efa      	ldrb	r2, [r7, #27]
 8017a78:	4618      	mov	r0, r3
 8017a7a:	6839      	ldr	r1, [r7, #0]
 8017a7c:	4613      	mov	r3, r2
 8017a7e:	011b      	lsls	r3, r3, #4
 8017a80:	4413      	add	r3, r2
 8017a82:	009b      	lsls	r3, r3, #2
 8017a84:	440b      	add	r3, r1
 8017a86:	3304      	adds	r3, #4
 8017a88:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	76bb      	strb	r3, [r7, #26]
 8017a8e:	e0d4      	b.n	8017c3a <vl53l1cb_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8017a90:	7eba      	ldrb	r2, [r7, #26]
 8017a92:	4974      	ldr	r1, [pc, #464]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017a94:	4613      	mov	r3, r2
 8017a96:	00db      	lsls	r3, r3, #3
 8017a98:	1a9b      	subs	r3, r3, r2
 8017a9a:	009b      	lsls	r3, r3, #2
 8017a9c:	440b      	add	r3, r1
 8017a9e:	331c      	adds	r3, #28
 8017aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	da0b      	bge.n	8017ac0 <vl53l1cb_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8017aa8:	7efa      	ldrb	r2, [r7, #27]
 8017aaa:	7eb8      	ldrb	r0, [r7, #26]
 8017aac:	6839      	ldr	r1, [r7, #0]
 8017aae:	4613      	mov	r3, r2
 8017ab0:	011b      	lsls	r3, r3, #4
 8017ab2:	4413      	add	r3, r2
 8017ab4:	4403      	add	r3, r0
 8017ab6:	009b      	lsls	r3, r3, #2
 8017ab8:	440b      	add	r3, r1
 8017aba:	2200      	movs	r2, #0
 8017abc:	609a      	str	r2, [r3, #8]
 8017abe:	e014      	b.n	8017aea <vl53l1cb_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8017ac0:	7eba      	ldrb	r2, [r7, #26]
 8017ac2:	4968      	ldr	r1, [pc, #416]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017ac4:	4613      	mov	r3, r2
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	1a9b      	subs	r3, r3, r2
 8017aca:	009b      	lsls	r3, r3, #2
 8017acc:	440b      	add	r3, r1
 8017ace:	331c      	adds	r3, #28
 8017ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ad4:	7efa      	ldrb	r2, [r7, #27]
 8017ad6:	7eb8      	ldrb	r0, [r7, #26]
 8017ad8:	461c      	mov	r4, r3
 8017ada:	6839      	ldr	r1, [r7, #0]
 8017adc:	4613      	mov	r3, r2
 8017ade:	011b      	lsls	r3, r3, #4
 8017ae0:	4413      	add	r3, r2
 8017ae2:	4403      	add	r3, r0
 8017ae4:	009b      	lsls	r3, r3, #2
 8017ae6:	440b      	add	r3, r1
 8017ae8:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017af0:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8017af4:	2b01      	cmp	r3, #1
 8017af6:	d132      	bne.n	8017b5e <vl53l1cb_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8017af8:	7eba      	ldrb	r2, [r7, #26]
 8017afa:	495a      	ldr	r1, [pc, #360]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017afc:	4613      	mov	r3, r2
 8017afe:	00db      	lsls	r3, r3, #3
 8017b00:	1a9b      	subs	r3, r3, r2
 8017b02:	009b      	lsls	r3, r3, #2
 8017b04:	440b      	add	r3, r1
 8017b06:	3314      	adds	r3, #20
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	ee07 3a90 	vmov	s15, r3
 8017b0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017b12:	eddf 6a55 	vldr	s13, [pc, #340]	; 8017c68 <vl53l1cb_get_result+0x230>
 8017b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017b1a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8017c6c <vl53l1cb_get_result+0x234>
 8017b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017b22:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8017b26:	4b4f      	ldr	r3, [pc, #316]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017b28:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8017b2c:	0a1b      	lsrs	r3, r3, #8
 8017b2e:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8017b30:	8a7b      	ldrh	r3, [r7, #18]
 8017b32:	ee07 3a90 	vmov	s15, r3
 8017b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017b3a:	7efa      	ldrb	r2, [r7, #27]
 8017b3c:	7eb8      	ldrb	r0, [r7, #26]
 8017b3e:	edd7 6a05 	vldr	s13, [r7, #20]
 8017b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017b46:	6839      	ldr	r1, [r7, #0]
 8017b48:	4613      	mov	r3, r2
 8017b4a:	011b      	lsls	r3, r3, #4
 8017b4c:	4413      	add	r3, r2
 8017b4e:	4403      	add	r3, r0
 8017b50:	3308      	adds	r3, #8
 8017b52:	009b      	lsls	r3, r3, #2
 8017b54:	440b      	add	r3, r1
 8017b56:	3308      	adds	r3, #8
 8017b58:	edc3 7a00 	vstr	s15, [r3]
 8017b5c:	e00d      	b.n	8017b7a <vl53l1cb_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8017b5e:	7efa      	ldrb	r2, [r7, #27]
 8017b60:	7eb8      	ldrb	r0, [r7, #26]
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	4613      	mov	r3, r2
 8017b66:	011b      	lsls	r3, r3, #4
 8017b68:	4413      	add	r3, r2
 8017b6a:	4403      	add	r3, r0
 8017b6c:	3308      	adds	r3, #8
 8017b6e:	009b      	lsls	r3, r3, #2
 8017b70:	440b      	add	r3, r1
 8017b72:	3308      	adds	r3, #8
 8017b74:	f04f 0200 	mov.w	r2, #0
 8017b78:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8017b80:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d132      	bne.n	8017bee <vl53l1cb_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8017b88:	7eba      	ldrb	r2, [r7, #26]
 8017b8a:	4936      	ldr	r1, [pc, #216]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017b8c:	4613      	mov	r3, r2
 8017b8e:	00db      	lsls	r3, r3, #3
 8017b90:	1a9b      	subs	r3, r3, r2
 8017b92:	009b      	lsls	r3, r3, #2
 8017b94:	440b      	add	r3, r1
 8017b96:	3310      	adds	r3, #16
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	ee07 3a90 	vmov	s15, r3
 8017b9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017ba2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8017c68 <vl53l1cb_get_result+0x230>
 8017ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017baa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8017c6c <vl53l1cb_get_result+0x234>
 8017bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017bb2:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8017bb6:	4b2b      	ldr	r3, [pc, #172]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017bb8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8017bbc:	0a1b      	lsrs	r3, r3, #8
 8017bbe:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8017bc0:	8a7b      	ldrh	r3, [r7, #18]
 8017bc2:	ee07 3a90 	vmov	s15, r3
 8017bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017bca:	7efa      	ldrb	r2, [r7, #27]
 8017bcc:	7eb8      	ldrb	r0, [r7, #26]
 8017bce:	edd7 6a03 	vldr	s13, [r7, #12]
 8017bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017bd6:	6839      	ldr	r1, [r7, #0]
 8017bd8:	4613      	mov	r3, r2
 8017bda:	011b      	lsls	r3, r3, #4
 8017bdc:	4413      	add	r3, r2
 8017bde:	4403      	add	r3, r0
 8017be0:	330c      	adds	r3, #12
 8017be2:	009b      	lsls	r3, r3, #2
 8017be4:	440b      	add	r3, r1
 8017be6:	3308      	adds	r3, #8
 8017be8:	edc3 7a00 	vstr	s15, [r3]
 8017bec:	e00d      	b.n	8017c0a <vl53l1cb_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8017bee:	7efa      	ldrb	r2, [r7, #27]
 8017bf0:	7eb8      	ldrb	r0, [r7, #26]
 8017bf2:	6839      	ldr	r1, [r7, #0]
 8017bf4:	4613      	mov	r3, r2
 8017bf6:	011b      	lsls	r3, r3, #4
 8017bf8:	4413      	add	r3, r2
 8017bfa:	4403      	add	r3, r0
 8017bfc:	330c      	adds	r3, #12
 8017bfe:	009b      	lsls	r3, r3, #2
 8017c00:	440b      	add	r3, r1
 8017c02:	3308      	adds	r3, #8
 8017c04:	f04f 0200 	mov.w	r2, #0
 8017c08:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8017c0a:	7eba      	ldrb	r2, [r7, #26]
 8017c0c:	4915      	ldr	r1, [pc, #84]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017c0e:	4613      	mov	r3, r2
 8017c10:	00db      	lsls	r3, r3, #3
 8017c12:	1a9b      	subs	r3, r3, r2
 8017c14:	009b      	lsls	r3, r3, #2
 8017c16:	440b      	add	r3, r1
 8017c18:	331f      	adds	r3, #31
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	7efa      	ldrb	r2, [r7, #27]
 8017c1e:	7eb8      	ldrb	r0, [r7, #26]
 8017c20:	461c      	mov	r4, r3
 8017c22:	6839      	ldr	r1, [r7, #0]
 8017c24:	4613      	mov	r3, r2
 8017c26:	011b      	lsls	r3, r3, #4
 8017c28:	4413      	add	r3, r2
 8017c2a:	4403      	add	r3, r0
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	009b      	lsls	r3, r3, #2
 8017c30:	440b      	add	r3, r1
 8017c32:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8017c34:	7ebb      	ldrb	r3, [r7, #26]
 8017c36:	3301      	adds	r3, #1
 8017c38:	76bb      	strb	r3, [r7, #26]
 8017c3a:	4b0a      	ldr	r3, [pc, #40]	; (8017c64 <vl53l1cb_get_result+0x22c>)
 8017c3c:	799b      	ldrb	r3, [r3, #6]
 8017c3e:	7eba      	ldrb	r2, [r7, #26]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	f4ff af25 	bcc.w	8017a90 <vl53l1cb_get_result+0x58>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8017c46:	7efb      	ldrb	r3, [r7, #27]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	76fb      	strb	r3, [r7, #27]
 8017c4c:	7efb      	ldrb	r3, [r7, #27]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	f43f af0f 	beq.w	8017a72 <vl53l1cb_get_result+0x3a>
      }
    }

    ret = VL53L1CB_OK;
 8017c54:	2300      	movs	r3, #0
 8017c56:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8017c58:	69fb      	ldr	r3, [r7, #28]
}
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	3724      	adds	r7, #36	; 0x24
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd90      	pop	{r4, r7, pc}
 8017c62:	bf00      	nop
 8017c64:	20008850 	.word	0x20008850
 8017c68:	47800000 	.word	0x47800000
 8017c6c:	447a0000 	.word	0x447a0000

08017c70 <LL_AHB2_GRP1_EnableClock>:
{
 8017c70:	b480      	push	{r7}
 8017c72:	b085      	sub	sp, #20
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8017c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	4313      	orrs	r3, r2
 8017c86:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8017c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	4013      	ands	r3, r2
 8017c92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017c94:	68fb      	ldr	r3, [r7, #12]
}
 8017c96:	bf00      	nop
 8017c98:	3714      	adds	r7, #20
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca0:	4770      	bx	lr

08017ca2 <LL_APB2_GRP1_EnableClock>:
{
 8017ca2:	b480      	push	{r7}
 8017ca4:	b085      	sub	sp, #20
 8017ca6:	af00      	add	r7, sp, #0
 8017ca8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8017caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	4313      	orrs	r3, r2
 8017cb8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8017cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	4013      	ands	r3, r2
 8017cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
}
 8017cc8:	bf00      	nop
 8017cca:	3714      	adds	r7, #20
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd2:	4770      	bx	lr

08017cd4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b084      	sub	sp, #16
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	4603      	mov	r3, r0
 8017cdc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8017ce2:	79fb      	ldrb	r3, [r7, #7]
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	d903      	bls.n	8017cf0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017ce8:	f06f 0301 	mvn.w	r3, #1
 8017cec:	60fb      	str	r3, [r7, #12]
 8017cee:	e022      	b.n	8017d36 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8017cf0:	79fa      	ldrb	r2, [r7, #7]
 8017cf2:	79fb      	ldrb	r3, [r7, #7]
 8017cf4:	4912      	ldr	r1, [pc, #72]	; (8017d40 <BSP_COM_Init+0x6c>)
 8017cf6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8017cfa:	4912      	ldr	r1, [pc, #72]	; (8017d44 <BSP_COM_Init+0x70>)
 8017cfc:	2094      	movs	r0, #148	; 0x94
 8017cfe:	fb00 f303 	mul.w	r3, r0, r3
 8017d02:	440b      	add	r3, r1
 8017d04:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8017d06:	79fb      	ldrb	r3, [r7, #7]
 8017d08:	2294      	movs	r2, #148	; 0x94
 8017d0a:	fb02 f303 	mul.w	r3, r2, r3
 8017d0e:	4a0d      	ldr	r2, [pc, #52]	; (8017d44 <BSP_COM_Init+0x70>)
 8017d10:	4413      	add	r3, r2
 8017d12:	4618      	mov	r0, r3
 8017d14:	f000 f86a 	bl	8017dec <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8017d18:	79fb      	ldrb	r3, [r7, #7]
 8017d1a:	2294      	movs	r2, #148	; 0x94
 8017d1c:	fb02 f303 	mul.w	r3, r2, r3
 8017d20:	4a08      	ldr	r2, [pc, #32]	; (8017d44 <BSP_COM_Init+0x70>)
 8017d22:	4413      	add	r3, r2
 8017d24:	4618      	mov	r0, r3
 8017d26:	f000 f80f 	bl	8017d48 <MX_USART1_UART_Init>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d002      	beq.n	8017d36 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8017d30:	f06f 0303 	mvn.w	r3, #3
 8017d34:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8017d36:	68fb      	ldr	r3, [r7, #12]
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3710      	adds	r7, #16
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	20000080 	.word	0x20000080
 8017d44:	200088d0 	.word	0x200088d0

08017d48 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b084      	sub	sp, #16
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8017d50:	2300      	movs	r3, #0
 8017d52:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	4a24      	ldr	r2, [pc, #144]	; (8017de8 <MX_USART1_UART_Init+0xa0>)
 8017d58:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017d60:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d68:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	2200      	movs	r2, #0
 8017d74:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	220c      	movs	r2, #12
 8017d7a:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	2200      	movs	r2, #0
 8017d86:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2200      	movs	r2, #0
 8017d92:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2200      	movs	r2, #0
 8017d98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8017d9a:	6878      	ldr	r0, [r7, #4]
 8017d9c:	f004 f824 	bl	801bde8 <HAL_UART_Init>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d001      	beq.n	8017daa <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 8017da6:	2301      	movs	r3, #1
 8017da8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017daa:	2100      	movs	r1, #0
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f005 fb49 	bl	801d444 <HAL_UARTEx_SetTxFifoThreshold>
 8017db2:	4603      	mov	r3, r0
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d001      	beq.n	8017dbc <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8017db8:	2301      	movs	r3, #1
 8017dba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017dbc:	2100      	movs	r1, #0
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f005 fb7e 	bl	801d4c0 <HAL_UARTEx_SetRxFifoThreshold>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d001      	beq.n	8017dce <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8017dca:	2301      	movs	r3, #1
 8017dcc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8017dce:	6878      	ldr	r0, [r7, #4]
 8017dd0:	f005 faff 	bl	801d3d2 <HAL_UARTEx_DisableFifoMode>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d001      	beq.n	8017dde <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8017dda:	2301      	movs	r3, #1
 8017ddc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8017dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8017de0:	4618      	mov	r0, r3
 8017de2:	3710      	adds	r7, #16
 8017de4:	46bd      	mov	sp, r7
 8017de6:	bd80      	pop	{r7, pc}
 8017de8:	40013800 	.word	0x40013800

08017dec <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b09c      	sub	sp, #112	; 0x70
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017df4:	f107 030c 	add.w	r3, r7, #12
 8017df8:	2250      	movs	r2, #80	; 0x50
 8017dfa:	2100      	movs	r1, #0
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f007 f98b 	bl	801f118 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017e02:	2301      	movs	r3, #1
 8017e04:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8017e06:	2300      	movs	r3, #0
 8017e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8017e0a:	f107 030c 	add.w	r3, r7, #12
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f003 fc82 	bl	801b718 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017e14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017e18:	f7ff ff43 	bl	8017ca2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017e1c:	2002      	movs	r0, #2
 8017e1e:	f7ff ff27 	bl	8017c70 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8017e22:	2340      	movs	r3, #64	; 0x40
 8017e24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e26:	2302      	movs	r3, #2
 8017e28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e2e:	2300      	movs	r3, #0
 8017e30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8017e32:	2307      	movs	r3, #7
 8017e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8017e36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	480b      	ldr	r0, [pc, #44]	; (8017e6c <USART1_MspInit+0x80>)
 8017e3e:	f000 fd03 	bl	8018848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8017e42:	2380      	movs	r3, #128	; 0x80
 8017e44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e46:	2302      	movs	r3, #2
 8017e48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8017e52:	2307      	movs	r3, #7
 8017e54:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8017e56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017e5a:	4619      	mov	r1, r3
 8017e5c:	4803      	ldr	r0, [pc, #12]	; (8017e6c <USART1_MspInit+0x80>)
 8017e5e:	f000 fcf3 	bl	8018848 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8017e62:	bf00      	nop
 8017e64:	3770      	adds	r7, #112	; 0x70
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd80      	pop	{r7, pc}
 8017e6a:	bf00      	nop
 8017e6c:	48000400 	.word	0x48000400

08017e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b082      	sub	sp, #8
 8017e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8017e76:	2300      	movs	r3, #0
 8017e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017e7a:	4b0c      	ldr	r3, [pc, #48]	; (8017eac <HAL_Init+0x3c>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	4a0b      	ldr	r2, [pc, #44]	; (8017eac <HAL_Init+0x3c>)
 8017e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017e86:	2003      	movs	r0, #3
 8017e88:	f000 f96c 	bl	8018164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	f000 f80f 	bl	8017eb0 <HAL_InitTick>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d002      	beq.n	8017e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8017e98:	2301      	movs	r3, #1
 8017e9a:	71fb      	strb	r3, [r7, #7]
 8017e9c:	e001      	b.n	8017ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8017e9e:	f7eb fa46 	bl	800332e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8017ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	3708      	adds	r7, #8
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}
 8017eac:	58004000 	.word	0x58004000

08017eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b084      	sub	sp, #16
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8017ebc:	4b17      	ldr	r3, [pc, #92]	; (8017f1c <HAL_InitTick+0x6c>)
 8017ebe:	781b      	ldrb	r3, [r3, #0]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d024      	beq.n	8017f0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8017ec4:	f003 f988 	bl	801b1d8 <HAL_RCC_GetHCLKFreq>
 8017ec8:	4602      	mov	r2, r0
 8017eca:	4b14      	ldr	r3, [pc, #80]	; (8017f1c <HAL_InitTick+0x6c>)
 8017ecc:	781b      	ldrb	r3, [r3, #0]
 8017ece:	4619      	mov	r1, r3
 8017ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8017edc:	4618      	mov	r0, r3
 8017ede:	f000 f974 	bl	80181ca <HAL_SYSTICK_Config>
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d10f      	bne.n	8017f08 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2b0f      	cmp	r3, #15
 8017eec:	d809      	bhi.n	8017f02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017eee:	2200      	movs	r2, #0
 8017ef0:	6879      	ldr	r1, [r7, #4]
 8017ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef6:	f000 f940 	bl	801817a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8017efa:	4a09      	ldr	r2, [pc, #36]	; (8017f20 <HAL_InitTick+0x70>)
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	6013      	str	r3, [r2, #0]
 8017f00:	e007      	b.n	8017f12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8017f02:	2301      	movs	r3, #1
 8017f04:	73fb      	strb	r3, [r7, #15]
 8017f06:	e004      	b.n	8017f12 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8017f08:	2301      	movs	r3, #1
 8017f0a:	73fb      	strb	r3, [r7, #15]
 8017f0c:	e001      	b.n	8017f12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8017f0e:	2301      	movs	r3, #1
 8017f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8017f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f14:	4618      	mov	r0, r3
 8017f16:	3710      	adds	r7, #16
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}
 8017f1c:	20000088 	.word	0x20000088
 8017f20:	20000084 	.word	0x20000084

08017f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8017f24:	b480      	push	{r7}
 8017f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8017f28:	4b06      	ldr	r3, [pc, #24]	; (8017f44 <HAL_IncTick+0x20>)
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	461a      	mov	r2, r3
 8017f2e:	4b06      	ldr	r3, [pc, #24]	; (8017f48 <HAL_IncTick+0x24>)
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	4413      	add	r3, r2
 8017f34:	4a04      	ldr	r2, [pc, #16]	; (8017f48 <HAL_IncTick+0x24>)
 8017f36:	6013      	str	r3, [r2, #0]
}
 8017f38:	bf00      	nop
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f40:	4770      	bx	lr
 8017f42:	bf00      	nop
 8017f44:	20000088 	.word	0x20000088
 8017f48:	20008964 	.word	0x20008964

08017f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017f4c:	b480      	push	{r7}
 8017f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8017f50:	4b03      	ldr	r3, [pc, #12]	; (8017f60 <HAL_GetTick+0x14>)
 8017f52:	681b      	ldr	r3, [r3, #0]
}
 8017f54:	4618      	mov	r0, r3
 8017f56:	46bd      	mov	sp, r7
 8017f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5c:	4770      	bx	lr
 8017f5e:	bf00      	nop
 8017f60:	20008964 	.word	0x20008964

08017f64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8017f64:	b480      	push	{r7}
 8017f66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8017f68:	4b03      	ldr	r3, [pc, #12]	; (8017f78 <HAL_GetTickPrio+0x14>)
 8017f6a:	681b      	ldr	r3, [r3, #0]
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f74:	4770      	bx	lr
 8017f76:	bf00      	nop
 8017f78:	20000084 	.word	0x20000084

08017f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b084      	sub	sp, #16
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017f84:	f7ff ffe2 	bl	8017f4c <HAL_GetTick>
 8017f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f94:	d005      	beq.n	8017fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8017f96:	4b0a      	ldr	r3, [pc, #40]	; (8017fc0 <HAL_Delay+0x44>)
 8017f98:	781b      	ldrb	r3, [r3, #0]
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017fa2:	bf00      	nop
 8017fa4:	f7ff ffd2 	bl	8017f4c <HAL_GetTick>
 8017fa8:	4602      	mov	r2, r0
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	1ad3      	subs	r3, r2, r3
 8017fae:	68fa      	ldr	r2, [r7, #12]
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d8f7      	bhi.n	8017fa4 <HAL_Delay+0x28>
  {
  }
}
 8017fb4:	bf00      	nop
 8017fb6:	bf00      	nop
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
 8017fbe:	bf00      	nop
 8017fc0:	20000088 	.word	0x20000088

08017fc4 <__NVIC_SetPriorityGrouping>:
{
 8017fc4:	b480      	push	{r7}
 8017fc6:	b085      	sub	sp, #20
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f003 0307 	and.w	r3, r3, #7
 8017fd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017fd4:	4b0c      	ldr	r3, [pc, #48]	; (8018008 <__NVIC_SetPriorityGrouping+0x44>)
 8017fd6:	68db      	ldr	r3, [r3, #12]
 8017fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017fda:	68ba      	ldr	r2, [r7, #8]
 8017fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017fe0:	4013      	ands	r3, r2
 8017fe2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8017ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017ff6:	4a04      	ldr	r2, [pc, #16]	; (8018008 <__NVIC_SetPriorityGrouping+0x44>)
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	60d3      	str	r3, [r2, #12]
}
 8017ffc:	bf00      	nop
 8017ffe:	3714      	adds	r7, #20
 8018000:	46bd      	mov	sp, r7
 8018002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018006:	4770      	bx	lr
 8018008:	e000ed00 	.word	0xe000ed00

0801800c <__NVIC_GetPriorityGrouping>:
{
 801800c:	b480      	push	{r7}
 801800e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018010:	4b04      	ldr	r3, [pc, #16]	; (8018024 <__NVIC_GetPriorityGrouping+0x18>)
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	0a1b      	lsrs	r3, r3, #8
 8018016:	f003 0307 	and.w	r3, r3, #7
}
 801801a:	4618      	mov	r0, r3
 801801c:	46bd      	mov	sp, r7
 801801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018022:	4770      	bx	lr
 8018024:	e000ed00 	.word	0xe000ed00

08018028 <__NVIC_EnableIRQ>:
{
 8018028:	b480      	push	{r7}
 801802a:	b083      	sub	sp, #12
 801802c:	af00      	add	r7, sp, #0
 801802e:	4603      	mov	r3, r0
 8018030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018036:	2b00      	cmp	r3, #0
 8018038:	db0b      	blt.n	8018052 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801803a:	79fb      	ldrb	r3, [r7, #7]
 801803c:	f003 021f 	and.w	r2, r3, #31
 8018040:	4907      	ldr	r1, [pc, #28]	; (8018060 <__NVIC_EnableIRQ+0x38>)
 8018042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018046:	095b      	lsrs	r3, r3, #5
 8018048:	2001      	movs	r0, #1
 801804a:	fa00 f202 	lsl.w	r2, r0, r2
 801804e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018052:	bf00      	nop
 8018054:	370c      	adds	r7, #12
 8018056:	46bd      	mov	sp, r7
 8018058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805c:	4770      	bx	lr
 801805e:	bf00      	nop
 8018060:	e000e100 	.word	0xe000e100

08018064 <__NVIC_SetPriority>:
{
 8018064:	b480      	push	{r7}
 8018066:	b083      	sub	sp, #12
 8018068:	af00      	add	r7, sp, #0
 801806a:	4603      	mov	r3, r0
 801806c:	6039      	str	r1, [r7, #0]
 801806e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018074:	2b00      	cmp	r3, #0
 8018076:	db0a      	blt.n	801808e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	b2da      	uxtb	r2, r3
 801807c:	490c      	ldr	r1, [pc, #48]	; (80180b0 <__NVIC_SetPriority+0x4c>)
 801807e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018082:	0112      	lsls	r2, r2, #4
 8018084:	b2d2      	uxtb	r2, r2
 8018086:	440b      	add	r3, r1
 8018088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801808c:	e00a      	b.n	80180a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801808e:	683b      	ldr	r3, [r7, #0]
 8018090:	b2da      	uxtb	r2, r3
 8018092:	4908      	ldr	r1, [pc, #32]	; (80180b4 <__NVIC_SetPriority+0x50>)
 8018094:	79fb      	ldrb	r3, [r7, #7]
 8018096:	f003 030f 	and.w	r3, r3, #15
 801809a:	3b04      	subs	r3, #4
 801809c:	0112      	lsls	r2, r2, #4
 801809e:	b2d2      	uxtb	r2, r2
 80180a0:	440b      	add	r3, r1
 80180a2:	761a      	strb	r2, [r3, #24]
}
 80180a4:	bf00      	nop
 80180a6:	370c      	adds	r7, #12
 80180a8:	46bd      	mov	sp, r7
 80180aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ae:	4770      	bx	lr
 80180b0:	e000e100 	.word	0xe000e100
 80180b4:	e000ed00 	.word	0xe000ed00

080180b8 <NVIC_EncodePriority>:
{
 80180b8:	b480      	push	{r7}
 80180ba:	b089      	sub	sp, #36	; 0x24
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60f8      	str	r0, [r7, #12]
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	f003 0307 	and.w	r3, r3, #7
 80180ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80180cc:	69fb      	ldr	r3, [r7, #28]
 80180ce:	f1c3 0307 	rsb	r3, r3, #7
 80180d2:	2b04      	cmp	r3, #4
 80180d4:	bf28      	it	cs
 80180d6:	2304      	movcs	r3, #4
 80180d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80180da:	69fb      	ldr	r3, [r7, #28]
 80180dc:	3304      	adds	r3, #4
 80180de:	2b06      	cmp	r3, #6
 80180e0:	d902      	bls.n	80180e8 <NVIC_EncodePriority+0x30>
 80180e2:	69fb      	ldr	r3, [r7, #28]
 80180e4:	3b03      	subs	r3, #3
 80180e6:	e000      	b.n	80180ea <NVIC_EncodePriority+0x32>
 80180e8:	2300      	movs	r3, #0
 80180ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80180ec:	f04f 32ff 	mov.w	r2, #4294967295
 80180f0:	69bb      	ldr	r3, [r7, #24]
 80180f2:	fa02 f303 	lsl.w	r3, r2, r3
 80180f6:	43da      	mvns	r2, r3
 80180f8:	68bb      	ldr	r3, [r7, #8]
 80180fa:	401a      	ands	r2, r3
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018100:	f04f 31ff 	mov.w	r1, #4294967295
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	fa01 f303 	lsl.w	r3, r1, r3
 801810a:	43d9      	mvns	r1, r3
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018110:	4313      	orrs	r3, r2
}
 8018112:	4618      	mov	r0, r3
 8018114:	3724      	adds	r7, #36	; 0x24
 8018116:	46bd      	mov	sp, r7
 8018118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811c:	4770      	bx	lr
	...

08018120 <SysTick_Config>:
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b082      	sub	sp, #8
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	3b01      	subs	r3, #1
 801812c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018130:	d301      	bcc.n	8018136 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8018132:	2301      	movs	r3, #1
 8018134:	e00f      	b.n	8018156 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018136:	4a0a      	ldr	r2, [pc, #40]	; (8018160 <SysTick_Config+0x40>)
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	3b01      	subs	r3, #1
 801813c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801813e:	210f      	movs	r1, #15
 8018140:	f04f 30ff 	mov.w	r0, #4294967295
 8018144:	f7ff ff8e 	bl	8018064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018148:	4b05      	ldr	r3, [pc, #20]	; (8018160 <SysTick_Config+0x40>)
 801814a:	2200      	movs	r2, #0
 801814c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801814e:	4b04      	ldr	r3, [pc, #16]	; (8018160 <SysTick_Config+0x40>)
 8018150:	2207      	movs	r2, #7
 8018152:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8018154:	2300      	movs	r3, #0
}
 8018156:	4618      	mov	r0, r3
 8018158:	3708      	adds	r7, #8
 801815a:	46bd      	mov	sp, r7
 801815c:	bd80      	pop	{r7, pc}
 801815e:	bf00      	nop
 8018160:	e000e010 	.word	0xe000e010

08018164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b082      	sub	sp, #8
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f7ff ff29 	bl	8017fc4 <__NVIC_SetPriorityGrouping>
}
 8018172:	bf00      	nop
 8018174:	3708      	adds	r7, #8
 8018176:	46bd      	mov	sp, r7
 8018178:	bd80      	pop	{r7, pc}

0801817a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801817a:	b580      	push	{r7, lr}
 801817c:	b086      	sub	sp, #24
 801817e:	af00      	add	r7, sp, #0
 8018180:	4603      	mov	r3, r0
 8018182:	60b9      	str	r1, [r7, #8]
 8018184:	607a      	str	r2, [r7, #4]
 8018186:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8018188:	f7ff ff40 	bl	801800c <__NVIC_GetPriorityGrouping>
 801818c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	68b9      	ldr	r1, [r7, #8]
 8018192:	6978      	ldr	r0, [r7, #20]
 8018194:	f7ff ff90 	bl	80180b8 <NVIC_EncodePriority>
 8018198:	4602      	mov	r2, r0
 801819a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801819e:	4611      	mov	r1, r2
 80181a0:	4618      	mov	r0, r3
 80181a2:	f7ff ff5f 	bl	8018064 <__NVIC_SetPriority>
}
 80181a6:	bf00      	nop
 80181a8:	3718      	adds	r7, #24
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}

080181ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80181ae:	b580      	push	{r7, lr}
 80181b0:	b082      	sub	sp, #8
 80181b2:	af00      	add	r7, sp, #0
 80181b4:	4603      	mov	r3, r0
 80181b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80181b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80181bc:	4618      	mov	r0, r3
 80181be:	f7ff ff33 	bl	8018028 <__NVIC_EnableIRQ>
}
 80181c2:	bf00      	nop
 80181c4:	3708      	adds	r7, #8
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}

080181ca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80181ca:	b580      	push	{r7, lr}
 80181cc:	b082      	sub	sp, #8
 80181ce:	af00      	add	r7, sp, #0
 80181d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f7ff ffa4 	bl	8018120 <SysTick_Config>
 80181d8:	4603      	mov	r3, r0
}
 80181da:	4618      	mov	r0, r3
 80181dc:	3708      	adds	r7, #8
 80181de:	46bd      	mov	sp, r7
 80181e0:	bd80      	pop	{r7, pc}
	...

080181e4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d101      	bne.n	80181f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80181f2:	2301      	movs	r3, #1
 80181f4:	e08e      	b.n	8018314 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	461a      	mov	r2, r3
 80181fc:	4b47      	ldr	r3, [pc, #284]	; (801831c <HAL_DMA_Init+0x138>)
 80181fe:	429a      	cmp	r2, r3
 8018200:	d80f      	bhi.n	8018222 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	461a      	mov	r2, r3
 8018208:	4b45      	ldr	r3, [pc, #276]	; (8018320 <HAL_DMA_Init+0x13c>)
 801820a:	4413      	add	r3, r2
 801820c:	4a45      	ldr	r2, [pc, #276]	; (8018324 <HAL_DMA_Init+0x140>)
 801820e:	fba2 2303 	umull	r2, r3, r2, r3
 8018212:	091b      	lsrs	r3, r3, #4
 8018214:	009a      	lsls	r2, r3, #2
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	4a42      	ldr	r2, [pc, #264]	; (8018328 <HAL_DMA_Init+0x144>)
 801821e:	641a      	str	r2, [r3, #64]	; 0x40
 8018220:	e00e      	b.n	8018240 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	461a      	mov	r2, r3
 8018228:	4b40      	ldr	r3, [pc, #256]	; (801832c <HAL_DMA_Init+0x148>)
 801822a:	4413      	add	r3, r2
 801822c:	4a3d      	ldr	r2, [pc, #244]	; (8018324 <HAL_DMA_Init+0x140>)
 801822e:	fba2 2303 	umull	r2, r3, r2, r3
 8018232:	091b      	lsrs	r3, r3, #4
 8018234:	009a      	lsls	r2, r3, #2
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	4a3c      	ldr	r2, [pc, #240]	; (8018330 <HAL_DMA_Init+0x14c>)
 801823e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2202      	movs	r2, #2
 8018244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8018256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801825a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8018264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	691b      	ldr	r3, [r3, #16]
 801826a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	699b      	ldr	r3, [r3, #24]
 8018276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801827c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6a1b      	ldr	r3, [r3, #32]
 8018282:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8018284:	68fa      	ldr	r2, [r7, #12]
 8018286:	4313      	orrs	r3, r2
 8018288:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	68fa      	ldr	r2, [r7, #12]
 8018290:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	f000 fa74 	bl	8018780 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	689b      	ldr	r3, [r3, #8]
 801829c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80182a0:	d102      	bne.n	80182a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2200      	movs	r2, #0
 80182a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	685a      	ldr	r2, [r3, #4]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80182b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182ba:	687a      	ldr	r2, [r7, #4]
 80182bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80182be:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	685b      	ldr	r3, [r3, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d010      	beq.n	80182ea <HAL_DMA_Init+0x106>
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	685b      	ldr	r3, [r3, #4]
 80182cc:	2b04      	cmp	r3, #4
 80182ce:	d80c      	bhi.n	80182ea <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80182d0:	6878      	ldr	r0, [r7, #4]
 80182d2:	f000 fa93 	bl	80187fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182da:	2200      	movs	r2, #0
 80182dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80182e2:	687a      	ldr	r2, [r7, #4]
 80182e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80182e6:	605a      	str	r2, [r3, #4]
 80182e8:	e008      	b.n	80182fc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2200      	movs	r2, #0
 80182ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2200      	movs	r2, #0
 80182f4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	2200      	movs	r2, #0
 80182fa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2200      	movs	r2, #0
 8018300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2201      	movs	r2, #1
 8018306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	2200      	movs	r2, #0
 801830e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8018312:	2300      	movs	r3, #0
}
 8018314:	4618      	mov	r0, r3
 8018316:	3710      	adds	r7, #16
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}
 801831c:	40020407 	.word	0x40020407
 8018320:	bffdfff8 	.word	0xbffdfff8
 8018324:	cccccccd 	.word	0xcccccccd
 8018328:	40020000 	.word	0x40020000
 801832c:	bffdfbf8 	.word	0xbffdfbf8
 8018330:	40020400 	.word	0x40020400

08018334 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b086      	sub	sp, #24
 8018338:	af00      	add	r7, sp, #0
 801833a:	60f8      	str	r0, [r7, #12]
 801833c:	60b9      	str	r1, [r7, #8]
 801833e:	607a      	str	r2, [r7, #4]
 8018340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018342:	2300      	movs	r3, #0
 8018344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801834c:	2b01      	cmp	r3, #1
 801834e:	d101      	bne.n	8018354 <HAL_DMA_Start_IT+0x20>
 8018350:	2302      	movs	r3, #2
 8018352:	e066      	b.n	8018422 <HAL_DMA_Start_IT+0xee>
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	2201      	movs	r2, #1
 8018358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018362:	b2db      	uxtb	r3, r3
 8018364:	2b01      	cmp	r3, #1
 8018366:	d155      	bne.n	8018414 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	2202      	movs	r2, #2
 801836c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	2200      	movs	r2, #0
 8018374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	f022 0201 	bic.w	r2, r2, #1
 8018384:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8018386:	683b      	ldr	r3, [r7, #0]
 8018388:	687a      	ldr	r2, [r7, #4]
 801838a:	68b9      	ldr	r1, [r7, #8]
 801838c:	68f8      	ldr	r0, [r7, #12]
 801838e:	f000 f9b9 	bl	8018704 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018396:	2b00      	cmp	r3, #0
 8018398:	d008      	beq.n	80183ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	681a      	ldr	r2, [r3, #0]
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	f042 020e 	orr.w	r2, r2, #14
 80183a8:	601a      	str	r2, [r3, #0]
 80183aa:	e00f      	b.n	80183cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	681a      	ldr	r2, [r3, #0]
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	f022 0204 	bic.w	r2, r2, #4
 80183ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	681a      	ldr	r2, [r3, #0]
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	f042 020a 	orr.w	r2, r2, #10
 80183ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d007      	beq.n	80183ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80183de:	681a      	ldr	r2, [r3, #0]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80183e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80183e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d007      	beq.n	8018402 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183f6:	681a      	ldr	r2, [r3, #0]
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018400:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	681a      	ldr	r2, [r3, #0]
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	f042 0201 	orr.w	r2, r2, #1
 8018410:	601a      	str	r2, [r3, #0]
 8018412:	e005      	b.n	8018420 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	2200      	movs	r2, #0
 8018418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801841c:	2302      	movs	r3, #2
 801841e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8018420:	7dfb      	ldrb	r3, [r7, #23]
}
 8018422:	4618      	mov	r0, r3
 8018424:	3718      	adds	r7, #24
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}

0801842a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801842a:	b480      	push	{r7}
 801842c:	b083      	sub	sp, #12
 801842e:	af00      	add	r7, sp, #0
 8018430:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d101      	bne.n	801843c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8018438:	2301      	movs	r3, #1
 801843a:	e04f      	b.n	80184dc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018442:	b2db      	uxtb	r3, r3
 8018444:	2b02      	cmp	r3, #2
 8018446:	d008      	beq.n	801845a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2204      	movs	r2, #4
 801844c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	2200      	movs	r2, #0
 8018452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8018456:	2301      	movs	r3, #1
 8018458:	e040      	b.n	80184dc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	681a      	ldr	r2, [r3, #0]
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	f022 020e 	bic.w	r2, r2, #14
 8018468:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018478:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	681a      	ldr	r2, [r3, #0]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	f022 0201 	bic.w	r2, r2, #1
 8018488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801848e:	f003 021c 	and.w	r2, r3, #28
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018496:	2101      	movs	r1, #1
 8018498:	fa01 f202 	lsl.w	r2, r1, r2
 801849c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184a2:	687a      	ldr	r2, [r7, #4]
 80184a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80184a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d00c      	beq.n	80184ca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184b4:	681a      	ldr	r2, [r3, #0]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80184be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80184c4:	687a      	ldr	r2, [r7, #4]
 80184c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80184c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2201      	movs	r2, #1
 80184ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	2200      	movs	r2, #0
 80184d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80184da:	2300      	movs	r3, #0
}
 80184dc:	4618      	mov	r0, r3
 80184de:	370c      	adds	r7, #12
 80184e0:	46bd      	mov	sp, r7
 80184e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e6:	4770      	bx	lr

080184e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80184f0:	2300      	movs	r3, #0
 80184f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	2b02      	cmp	r3, #2
 80184fe:	d005      	beq.n	801850c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2204      	movs	r2, #4
 8018504:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8018506:	2301      	movs	r3, #1
 8018508:	73fb      	strb	r3, [r7, #15]
 801850a:	e047      	b.n	801859c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	681a      	ldr	r2, [r3, #0]
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	f022 020e 	bic.w	r2, r2, #14
 801851a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	681a      	ldr	r2, [r3, #0]
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	f022 0201 	bic.w	r2, r2, #1
 801852a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018530:	681a      	ldr	r2, [r3, #0]
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801853a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018540:	f003 021c 	and.w	r2, r3, #28
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018548:	2101      	movs	r1, #1
 801854a:	fa01 f202 	lsl.w	r2, r1, r2
 801854e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018554:	687a      	ldr	r2, [r7, #4]
 8018556:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018558:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801855e:	2b00      	cmp	r3, #0
 8018560:	d00c      	beq.n	801857c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018566:	681a      	ldr	r2, [r3, #0]
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801856c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018570:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018576:	687a      	ldr	r2, [r7, #4]
 8018578:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801857a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2201      	movs	r2, #1
 8018580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	2200      	movs	r2, #0
 8018588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018590:	2b00      	cmp	r3, #0
 8018592:	d003      	beq.n	801859c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018598:	6878      	ldr	r0, [r7, #4]
 801859a:	4798      	blx	r3
    }
  }
  return status;
 801859c:	7bfb      	ldrb	r3, [r7, #15]
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3710      	adds	r7, #16
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}

080185a6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80185a6:	b580      	push	{r7, lr}
 80185a8:	b084      	sub	sp, #16
 80185aa:	af00      	add	r7, sp, #0
 80185ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185c2:	f003 031c 	and.w	r3, r3, #28
 80185c6:	2204      	movs	r2, #4
 80185c8:	409a      	lsls	r2, r3
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	4013      	ands	r3, r2
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d026      	beq.n	8018620 <HAL_DMA_IRQHandler+0x7a>
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	f003 0304 	and.w	r3, r3, #4
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d021      	beq.n	8018620 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	f003 0320 	and.w	r3, r3, #32
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d107      	bne.n	80185fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	f022 0204 	bic.w	r2, r2, #4
 80185f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185fe:	f003 021c 	and.w	r2, r3, #28
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018606:	2104      	movs	r1, #4
 8018608:	fa01 f202 	lsl.w	r2, r1, r2
 801860c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018612:	2b00      	cmp	r3, #0
 8018614:	d071      	beq.n	80186fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801861a:	6878      	ldr	r0, [r7, #4]
 801861c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801861e:	e06c      	b.n	80186fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018624:	f003 031c 	and.w	r3, r3, #28
 8018628:	2202      	movs	r2, #2
 801862a:	409a      	lsls	r2, r3
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	4013      	ands	r3, r2
 8018630:	2b00      	cmp	r3, #0
 8018632:	d02e      	beq.n	8018692 <HAL_DMA_IRQHandler+0xec>
 8018634:	68bb      	ldr	r3, [r7, #8]
 8018636:	f003 0302 	and.w	r3, r3, #2
 801863a:	2b00      	cmp	r3, #0
 801863c:	d029      	beq.n	8018692 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	f003 0320 	and.w	r3, r3, #32
 8018648:	2b00      	cmp	r3, #0
 801864a:	d10b      	bne.n	8018664 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	681a      	ldr	r2, [r3, #0]
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	f022 020a 	bic.w	r2, r2, #10
 801865a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2201      	movs	r2, #1
 8018660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018668:	f003 021c 	and.w	r2, r3, #28
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018670:	2102      	movs	r1, #2
 8018672:	fa01 f202 	lsl.w	r2, r1, r2
 8018676:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2200      	movs	r2, #0
 801867c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018684:	2b00      	cmp	r3, #0
 8018686:	d038      	beq.n	80186fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8018690:	e033      	b.n	80186fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018696:	f003 031c 	and.w	r3, r3, #28
 801869a:	2208      	movs	r2, #8
 801869c:	409a      	lsls	r2, r3
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	4013      	ands	r3, r2
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d02a      	beq.n	80186fc <HAL_DMA_IRQHandler+0x156>
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	f003 0308 	and.w	r3, r3, #8
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d025      	beq.n	80186fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	681a      	ldr	r2, [r3, #0]
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	f022 020e 	bic.w	r2, r2, #14
 80186be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186c4:	f003 021c 	and.w	r2, r3, #28
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186cc:	2101      	movs	r1, #1
 80186ce:	fa01 f202 	lsl.w	r2, r1, r2
 80186d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	2201      	movs	r2, #1
 80186d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	2201      	movs	r2, #1
 80186de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2200      	movs	r2, #0
 80186e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d004      	beq.n	80186fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186f6:	6878      	ldr	r0, [r7, #4]
 80186f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80186fa:	bf00      	nop
 80186fc:	bf00      	nop
}
 80186fe:	3710      	adds	r7, #16
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}

08018704 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018704:	b480      	push	{r7}
 8018706:	b085      	sub	sp, #20
 8018708:	af00      	add	r7, sp, #0
 801870a:	60f8      	str	r0, [r7, #12]
 801870c:	60b9      	str	r1, [r7, #8]
 801870e:	607a      	str	r2, [r7, #4]
 8018710:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018716:	68fa      	ldr	r2, [r7, #12]
 8018718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801871a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018720:	2b00      	cmp	r3, #0
 8018722:	d004      	beq.n	801872e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018728:	68fa      	ldr	r2, [r7, #12]
 801872a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801872c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018732:	f003 021c 	and.w	r2, r3, #28
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801873a:	2101      	movs	r1, #1
 801873c:	fa01 f202 	lsl.w	r2, r1, r2
 8018740:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	683a      	ldr	r2, [r7, #0]
 8018748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	689b      	ldr	r3, [r3, #8]
 801874e:	2b10      	cmp	r3, #16
 8018750:	d108      	bne.n	8018764 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	687a      	ldr	r2, [r7, #4]
 8018758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	68ba      	ldr	r2, [r7, #8]
 8018760:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8018762:	e007      	b.n	8018774 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	68ba      	ldr	r2, [r7, #8]
 801876a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	687a      	ldr	r2, [r7, #4]
 8018772:	60da      	str	r2, [r3, #12]
}
 8018774:	bf00      	nop
 8018776:	3714      	adds	r7, #20
 8018778:	46bd      	mov	sp, r7
 801877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877e:	4770      	bx	lr

08018780 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018780:	b480      	push	{r7}
 8018782:	b085      	sub	sp, #20
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	461a      	mov	r2, r3
 801878e:	4b17      	ldr	r3, [pc, #92]	; (80187ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8018790:	429a      	cmp	r2, r3
 8018792:	d80a      	bhi.n	80187aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018798:	089b      	lsrs	r3, r3, #2
 801879a:	009b      	lsls	r3, r3, #2
 801879c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80187a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80187a4:	687a      	ldr	r2, [r7, #4]
 80187a6:	6493      	str	r3, [r2, #72]	; 0x48
 80187a8:	e007      	b.n	80187ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187ae:	089b      	lsrs	r3, r3, #2
 80187b0:	009a      	lsls	r2, r3, #2
 80187b2:	4b0f      	ldr	r3, [pc, #60]	; (80187f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80187b4:	4413      	add	r3, r2
 80187b6:	687a      	ldr	r2, [r7, #4]
 80187b8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	3b08      	subs	r3, #8
 80187c2:	4a0c      	ldr	r2, [pc, #48]	; (80187f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80187c4:	fba2 2303 	umull	r2, r3, r2, r3
 80187c8:	091b      	lsrs	r3, r3, #4
 80187ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	4a0a      	ldr	r2, [pc, #40]	; (80187f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80187d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	f003 031f 	and.w	r3, r3, #31
 80187d8:	2201      	movs	r2, #1
 80187da:	409a      	lsls	r2, r3
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80187e0:	bf00      	nop
 80187e2:	3714      	adds	r7, #20
 80187e4:	46bd      	mov	sp, r7
 80187e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ea:	4770      	bx	lr
 80187ec:	40020407 	.word	0x40020407
 80187f0:	4002081c 	.word	0x4002081c
 80187f4:	cccccccd 	.word	0xcccccccd
 80187f8:	40020880 	.word	0x40020880

080187fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80187fc:	b480      	push	{r7}
 80187fe:	b085      	sub	sp, #20
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801880c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801880e:	68fa      	ldr	r2, [r7, #12]
 8018810:	4b0b      	ldr	r3, [pc, #44]	; (8018840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8018812:	4413      	add	r3, r2
 8018814:	009b      	lsls	r3, r3, #2
 8018816:	461a      	mov	r2, r3
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	4a09      	ldr	r2, [pc, #36]	; (8018844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8018820:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	3b01      	subs	r3, #1
 8018826:	f003 0303 	and.w	r3, r3, #3
 801882a:	2201      	movs	r2, #1
 801882c:	409a      	lsls	r2, r3
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8018832:	bf00      	nop
 8018834:	3714      	adds	r7, #20
 8018836:	46bd      	mov	sp, r7
 8018838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883c:	4770      	bx	lr
 801883e:	bf00      	nop
 8018840:	1000823f 	.word	0x1000823f
 8018844:	40020940 	.word	0x40020940

08018848 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018848:	b480      	push	{r7}
 801884a:	b087      	sub	sp, #28
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
 8018850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8018852:	2300      	movs	r3, #0
 8018854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8018856:	e14c      	b.n	8018af2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8018858:	683b      	ldr	r3, [r7, #0]
 801885a:	681a      	ldr	r2, [r3, #0]
 801885c:	2101      	movs	r1, #1
 801885e:	697b      	ldr	r3, [r7, #20]
 8018860:	fa01 f303 	lsl.w	r3, r1, r3
 8018864:	4013      	ands	r3, r2
 8018866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	2b00      	cmp	r3, #0
 801886c:	f000 813e 	beq.w	8018aec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	f003 0303 	and.w	r3, r3, #3
 8018878:	2b01      	cmp	r3, #1
 801887a:	d005      	beq.n	8018888 <HAL_GPIO_Init+0x40>
 801887c:	683b      	ldr	r3, [r7, #0]
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	f003 0303 	and.w	r3, r3, #3
 8018884:	2b02      	cmp	r3, #2
 8018886:	d130      	bne.n	80188ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	689b      	ldr	r3, [r3, #8]
 801888c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801888e:	697b      	ldr	r3, [r7, #20]
 8018890:	005b      	lsls	r3, r3, #1
 8018892:	2203      	movs	r2, #3
 8018894:	fa02 f303 	lsl.w	r3, r2, r3
 8018898:	43db      	mvns	r3, r3
 801889a:	693a      	ldr	r2, [r7, #16]
 801889c:	4013      	ands	r3, r2
 801889e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	68da      	ldr	r2, [r3, #12]
 80188a4:	697b      	ldr	r3, [r7, #20]
 80188a6:	005b      	lsls	r3, r3, #1
 80188a8:	fa02 f303 	lsl.w	r3, r2, r3
 80188ac:	693a      	ldr	r2, [r7, #16]
 80188ae:	4313      	orrs	r3, r2
 80188b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	693a      	ldr	r2, [r7, #16]
 80188b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80188be:	2201      	movs	r2, #1
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	fa02 f303 	lsl.w	r3, r2, r3
 80188c6:	43db      	mvns	r3, r3
 80188c8:	693a      	ldr	r2, [r7, #16]
 80188ca:	4013      	ands	r3, r2
 80188cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	685b      	ldr	r3, [r3, #4]
 80188d2:	091b      	lsrs	r3, r3, #4
 80188d4:	f003 0201 	and.w	r2, r3, #1
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	fa02 f303 	lsl.w	r3, r2, r3
 80188de:	693a      	ldr	r2, [r7, #16]
 80188e0:	4313      	orrs	r3, r2
 80188e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	693a      	ldr	r2, [r7, #16]
 80188e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80188ea:	683b      	ldr	r3, [r7, #0]
 80188ec:	685b      	ldr	r3, [r3, #4]
 80188ee:	f003 0303 	and.w	r3, r3, #3
 80188f2:	2b03      	cmp	r3, #3
 80188f4:	d017      	beq.n	8018926 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	68db      	ldr	r3, [r3, #12]
 80188fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	005b      	lsls	r3, r3, #1
 8018900:	2203      	movs	r2, #3
 8018902:	fa02 f303 	lsl.w	r3, r2, r3
 8018906:	43db      	mvns	r3, r3
 8018908:	693a      	ldr	r2, [r7, #16]
 801890a:	4013      	ands	r3, r2
 801890c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	689a      	ldr	r2, [r3, #8]
 8018912:	697b      	ldr	r3, [r7, #20]
 8018914:	005b      	lsls	r3, r3, #1
 8018916:	fa02 f303 	lsl.w	r3, r2, r3
 801891a:	693a      	ldr	r2, [r7, #16]
 801891c:	4313      	orrs	r3, r2
 801891e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	693a      	ldr	r2, [r7, #16]
 8018924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	685b      	ldr	r3, [r3, #4]
 801892a:	f003 0303 	and.w	r3, r3, #3
 801892e:	2b02      	cmp	r3, #2
 8018930:	d123      	bne.n	801897a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8018932:	697b      	ldr	r3, [r7, #20]
 8018934:	08da      	lsrs	r2, r3, #3
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	3208      	adds	r2, #8
 801893a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801893e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	f003 0307 	and.w	r3, r3, #7
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	220f      	movs	r2, #15
 801894a:	fa02 f303 	lsl.w	r3, r2, r3
 801894e:	43db      	mvns	r3, r3
 8018950:	693a      	ldr	r2, [r7, #16]
 8018952:	4013      	ands	r3, r2
 8018954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8018956:	683b      	ldr	r3, [r7, #0]
 8018958:	691a      	ldr	r2, [r3, #16]
 801895a:	697b      	ldr	r3, [r7, #20]
 801895c:	f003 0307 	and.w	r3, r3, #7
 8018960:	009b      	lsls	r3, r3, #2
 8018962:	fa02 f303 	lsl.w	r3, r2, r3
 8018966:	693a      	ldr	r2, [r7, #16]
 8018968:	4313      	orrs	r3, r2
 801896a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	08da      	lsrs	r2, r3, #3
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	3208      	adds	r2, #8
 8018974:	6939      	ldr	r1, [r7, #16]
 8018976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8018980:	697b      	ldr	r3, [r7, #20]
 8018982:	005b      	lsls	r3, r3, #1
 8018984:	2203      	movs	r2, #3
 8018986:	fa02 f303 	lsl.w	r3, r2, r3
 801898a:	43db      	mvns	r3, r3
 801898c:	693a      	ldr	r2, [r7, #16]
 801898e:	4013      	ands	r3, r2
 8018990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	f003 0203 	and.w	r2, r3, #3
 801899a:	697b      	ldr	r3, [r7, #20]
 801899c:	005b      	lsls	r3, r3, #1
 801899e:	fa02 f303 	lsl.w	r3, r2, r3
 80189a2:	693a      	ldr	r2, [r7, #16]
 80189a4:	4313      	orrs	r3, r2
 80189a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	693a      	ldr	r2, [r7, #16]
 80189ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	685b      	ldr	r3, [r3, #4]
 80189b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	f000 8098 	beq.w	8018aec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80189bc:	4a54      	ldr	r2, [pc, #336]	; (8018b10 <HAL_GPIO_Init+0x2c8>)
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	089b      	lsrs	r3, r3, #2
 80189c2:	3302      	adds	r3, #2
 80189c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80189c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80189ca:	697b      	ldr	r3, [r7, #20]
 80189cc:	f003 0303 	and.w	r3, r3, #3
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	220f      	movs	r2, #15
 80189d4:	fa02 f303 	lsl.w	r3, r2, r3
 80189d8:	43db      	mvns	r3, r3
 80189da:	693a      	ldr	r2, [r7, #16]
 80189dc:	4013      	ands	r3, r2
 80189de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80189e6:	d019      	beq.n	8018a1c <HAL_GPIO_Init+0x1d4>
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	4a4a      	ldr	r2, [pc, #296]	; (8018b14 <HAL_GPIO_Init+0x2cc>)
 80189ec:	4293      	cmp	r3, r2
 80189ee:	d013      	beq.n	8018a18 <HAL_GPIO_Init+0x1d0>
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	4a49      	ldr	r2, [pc, #292]	; (8018b18 <HAL_GPIO_Init+0x2d0>)
 80189f4:	4293      	cmp	r3, r2
 80189f6:	d00d      	beq.n	8018a14 <HAL_GPIO_Init+0x1cc>
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	4a48      	ldr	r2, [pc, #288]	; (8018b1c <HAL_GPIO_Init+0x2d4>)
 80189fc:	4293      	cmp	r3, r2
 80189fe:	d007      	beq.n	8018a10 <HAL_GPIO_Init+0x1c8>
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	4a47      	ldr	r2, [pc, #284]	; (8018b20 <HAL_GPIO_Init+0x2d8>)
 8018a04:	4293      	cmp	r3, r2
 8018a06:	d101      	bne.n	8018a0c <HAL_GPIO_Init+0x1c4>
 8018a08:	2304      	movs	r3, #4
 8018a0a:	e008      	b.n	8018a1e <HAL_GPIO_Init+0x1d6>
 8018a0c:	2307      	movs	r3, #7
 8018a0e:	e006      	b.n	8018a1e <HAL_GPIO_Init+0x1d6>
 8018a10:	2303      	movs	r3, #3
 8018a12:	e004      	b.n	8018a1e <HAL_GPIO_Init+0x1d6>
 8018a14:	2302      	movs	r3, #2
 8018a16:	e002      	b.n	8018a1e <HAL_GPIO_Init+0x1d6>
 8018a18:	2301      	movs	r3, #1
 8018a1a:	e000      	b.n	8018a1e <HAL_GPIO_Init+0x1d6>
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	697a      	ldr	r2, [r7, #20]
 8018a20:	f002 0203 	and.w	r2, r2, #3
 8018a24:	0092      	lsls	r2, r2, #2
 8018a26:	4093      	lsls	r3, r2
 8018a28:	693a      	ldr	r2, [r7, #16]
 8018a2a:	4313      	orrs	r3, r2
 8018a2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8018a2e:	4938      	ldr	r1, [pc, #224]	; (8018b10 <HAL_GPIO_Init+0x2c8>)
 8018a30:	697b      	ldr	r3, [r7, #20]
 8018a32:	089b      	lsrs	r3, r3, #2
 8018a34:	3302      	adds	r3, #2
 8018a36:	693a      	ldr	r2, [r7, #16]
 8018a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8018a3c:	4b39      	ldr	r3, [pc, #228]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	43db      	mvns	r3, r3
 8018a46:	693a      	ldr	r2, [r7, #16]
 8018a48:	4013      	ands	r3, r2
 8018a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	685b      	ldr	r3, [r3, #4]
 8018a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d003      	beq.n	8018a60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8018a58:	693a      	ldr	r2, [r7, #16]
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	4313      	orrs	r3, r2
 8018a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8018a60:	4a30      	ldr	r2, [pc, #192]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018a62:	693b      	ldr	r3, [r7, #16]
 8018a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8018a66:	4b2f      	ldr	r3, [pc, #188]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018a68:	685b      	ldr	r3, [r3, #4]
 8018a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	43db      	mvns	r3, r3
 8018a70:	693a      	ldr	r2, [r7, #16]
 8018a72:	4013      	ands	r3, r2
 8018a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8018a76:	683b      	ldr	r3, [r7, #0]
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d003      	beq.n	8018a8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8018a82:	693a      	ldr	r2, [r7, #16]
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	4313      	orrs	r3, r2
 8018a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8018a8a:	4a26      	ldr	r2, [pc, #152]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018a8c:	693b      	ldr	r3, [r7, #16]
 8018a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8018a90:	4b24      	ldr	r3, [pc, #144]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	43db      	mvns	r3, r3
 8018a9c:	693a      	ldr	r2, [r7, #16]
 8018a9e:	4013      	ands	r3, r2
 8018aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	685b      	ldr	r3, [r3, #4]
 8018aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d003      	beq.n	8018ab6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8018aae:	693a      	ldr	r2, [r7, #16]
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	4313      	orrs	r3, r2
 8018ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8018ab6:	4a1b      	ldr	r2, [pc, #108]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8018abe:	4b19      	ldr	r3, [pc, #100]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	43db      	mvns	r3, r3
 8018aca:	693a      	ldr	r2, [r7, #16]
 8018acc:	4013      	ands	r3, r2
 8018ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8018ad0:	683b      	ldr	r3, [r7, #0]
 8018ad2:	685b      	ldr	r3, [r3, #4]
 8018ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d003      	beq.n	8018ae4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8018adc:	693a      	ldr	r2, [r7, #16]
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	4313      	orrs	r3, r2
 8018ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8018ae4:	4a0f      	ldr	r2, [pc, #60]	; (8018b24 <HAL_GPIO_Init+0x2dc>)
 8018ae6:	693b      	ldr	r3, [r7, #16]
 8018ae8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	3301      	adds	r3, #1
 8018af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	681a      	ldr	r2, [r3, #0]
 8018af6:	697b      	ldr	r3, [r7, #20]
 8018af8:	fa22 f303 	lsr.w	r3, r2, r3
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	f47f aeab 	bne.w	8018858 <HAL_GPIO_Init+0x10>
  }
}
 8018b02:	bf00      	nop
 8018b04:	bf00      	nop
 8018b06:	371c      	adds	r7, #28
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0e:	4770      	bx	lr
 8018b10:	40010000 	.word	0x40010000
 8018b14:	48000400 	.word	0x48000400
 8018b18:	48000800 	.word	0x48000800
 8018b1c:	48000c00 	.word	0x48000c00
 8018b20:	48001000 	.word	0x48001000
 8018b24:	58000800 	.word	0x58000800

08018b28 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8018b28:	b480      	push	{r7}
 8018b2a:	b087      	sub	sp, #28
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
 8018b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8018b32:	2300      	movs	r3, #0
 8018b34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8018b36:	e0bb      	b.n	8018cb0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8018b38:	2201      	movs	r2, #1
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8018b40:	683a      	ldr	r2, [r7, #0]
 8018b42:	4013      	ands	r3, r2
 8018b44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	f000 80ae 	beq.w	8018caa <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8018b4e:	4a5f      	ldr	r2, [pc, #380]	; (8018ccc <HAL_GPIO_DeInit+0x1a4>)
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	089b      	lsrs	r3, r3, #2
 8018b54:	3302      	adds	r3, #2
 8018b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018b5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	f003 0303 	and.w	r3, r3, #3
 8018b62:	009b      	lsls	r3, r3, #2
 8018b64:	220f      	movs	r2, #15
 8018b66:	fa02 f303 	lsl.w	r3, r2, r3
 8018b6a:	68fa      	ldr	r2, [r7, #12]
 8018b6c:	4013      	ands	r3, r2
 8018b6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8018b76:	d019      	beq.n	8018bac <HAL_GPIO_DeInit+0x84>
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	4a55      	ldr	r2, [pc, #340]	; (8018cd0 <HAL_GPIO_DeInit+0x1a8>)
 8018b7c:	4293      	cmp	r3, r2
 8018b7e:	d013      	beq.n	8018ba8 <HAL_GPIO_DeInit+0x80>
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	4a54      	ldr	r2, [pc, #336]	; (8018cd4 <HAL_GPIO_DeInit+0x1ac>)
 8018b84:	4293      	cmp	r3, r2
 8018b86:	d00d      	beq.n	8018ba4 <HAL_GPIO_DeInit+0x7c>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	4a53      	ldr	r2, [pc, #332]	; (8018cd8 <HAL_GPIO_DeInit+0x1b0>)
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	d007      	beq.n	8018ba0 <HAL_GPIO_DeInit+0x78>
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	4a52      	ldr	r2, [pc, #328]	; (8018cdc <HAL_GPIO_DeInit+0x1b4>)
 8018b94:	4293      	cmp	r3, r2
 8018b96:	d101      	bne.n	8018b9c <HAL_GPIO_DeInit+0x74>
 8018b98:	2304      	movs	r3, #4
 8018b9a:	e008      	b.n	8018bae <HAL_GPIO_DeInit+0x86>
 8018b9c:	2307      	movs	r3, #7
 8018b9e:	e006      	b.n	8018bae <HAL_GPIO_DeInit+0x86>
 8018ba0:	2303      	movs	r3, #3
 8018ba2:	e004      	b.n	8018bae <HAL_GPIO_DeInit+0x86>
 8018ba4:	2302      	movs	r3, #2
 8018ba6:	e002      	b.n	8018bae <HAL_GPIO_DeInit+0x86>
 8018ba8:	2301      	movs	r3, #1
 8018baa:	e000      	b.n	8018bae <HAL_GPIO_DeInit+0x86>
 8018bac:	2300      	movs	r3, #0
 8018bae:	697a      	ldr	r2, [r7, #20]
 8018bb0:	f002 0203 	and.w	r2, r2, #3
 8018bb4:	0092      	lsls	r2, r2, #2
 8018bb6:	4093      	lsls	r3, r2
 8018bb8:	68fa      	ldr	r2, [r7, #12]
 8018bba:	429a      	cmp	r2, r3
 8018bbc:	d136      	bne.n	8018c2c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8018bbe:	4b48      	ldr	r3, [pc, #288]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018bc0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8018bc4:	693b      	ldr	r3, [r7, #16]
 8018bc6:	43db      	mvns	r3, r3
 8018bc8:	4945      	ldr	r1, [pc, #276]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018bca:	4013      	ands	r3, r2
 8018bcc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8018bd0:	4b43      	ldr	r3, [pc, #268]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018bd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8018bd6:	693b      	ldr	r3, [r7, #16]
 8018bd8:	43db      	mvns	r3, r3
 8018bda:	4941      	ldr	r1, [pc, #260]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018bdc:	4013      	ands	r3, r2
 8018bde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8018be2:	4b3f      	ldr	r3, [pc, #252]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018be4:	681a      	ldr	r2, [r3, #0]
 8018be6:	693b      	ldr	r3, [r7, #16]
 8018be8:	43db      	mvns	r3, r3
 8018bea:	493d      	ldr	r1, [pc, #244]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018bec:	4013      	ands	r3, r2
 8018bee:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8018bf0:	4b3b      	ldr	r3, [pc, #236]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018bf2:	685a      	ldr	r2, [r3, #4]
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	43db      	mvns	r3, r3
 8018bf8:	4939      	ldr	r1, [pc, #228]	; (8018ce0 <HAL_GPIO_DeInit+0x1b8>)
 8018bfa:	4013      	ands	r3, r2
 8018bfc:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8018bfe:	697b      	ldr	r3, [r7, #20]
 8018c00:	f003 0303 	and.w	r3, r3, #3
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	220f      	movs	r2, #15
 8018c08:	fa02 f303 	lsl.w	r3, r2, r3
 8018c0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8018c0e:	4a2f      	ldr	r2, [pc, #188]	; (8018ccc <HAL_GPIO_DeInit+0x1a4>)
 8018c10:	697b      	ldr	r3, [r7, #20]
 8018c12:	089b      	lsrs	r3, r3, #2
 8018c14:	3302      	adds	r3, #2
 8018c16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	43da      	mvns	r2, r3
 8018c1e:	482b      	ldr	r0, [pc, #172]	; (8018ccc <HAL_GPIO_DeInit+0x1a4>)
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	089b      	lsrs	r3, r3, #2
 8018c24:	400a      	ands	r2, r1
 8018c26:	3302      	adds	r3, #2
 8018c28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681a      	ldr	r2, [r3, #0]
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	005b      	lsls	r3, r3, #1
 8018c34:	2103      	movs	r1, #3
 8018c36:	fa01 f303 	lsl.w	r3, r1, r3
 8018c3a:	431a      	orrs	r2, r3
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8018c40:	697b      	ldr	r3, [r7, #20]
 8018c42:	08da      	lsrs	r2, r3, #3
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	3208      	adds	r2, #8
 8018c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018c4c:	697b      	ldr	r3, [r7, #20]
 8018c4e:	f003 0307 	and.w	r3, r3, #7
 8018c52:	009b      	lsls	r3, r3, #2
 8018c54:	220f      	movs	r2, #15
 8018c56:	fa02 f303 	lsl.w	r3, r2, r3
 8018c5a:	43db      	mvns	r3, r3
 8018c5c:	697a      	ldr	r2, [r7, #20]
 8018c5e:	08d2      	lsrs	r2, r2, #3
 8018c60:	4019      	ands	r1, r3
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	3208      	adds	r2, #8
 8018c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	68da      	ldr	r2, [r3, #12]
 8018c6e:	697b      	ldr	r3, [r7, #20]
 8018c70:	005b      	lsls	r3, r3, #1
 8018c72:	2103      	movs	r1, #3
 8018c74:	fa01 f303 	lsl.w	r3, r1, r3
 8018c78:	43db      	mvns	r3, r3
 8018c7a:	401a      	ands	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	685a      	ldr	r2, [r3, #4]
 8018c84:	2101      	movs	r1, #1
 8018c86:	697b      	ldr	r3, [r7, #20]
 8018c88:	fa01 f303 	lsl.w	r3, r1, r3
 8018c8c:	43db      	mvns	r3, r3
 8018c8e:	401a      	ands	r2, r3
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	689a      	ldr	r2, [r3, #8]
 8018c98:	697b      	ldr	r3, [r7, #20]
 8018c9a:	005b      	lsls	r3, r3, #1
 8018c9c:	2103      	movs	r1, #3
 8018c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8018ca2:	43db      	mvns	r3, r3
 8018ca4:	401a      	ands	r2, r3
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	3301      	adds	r3, #1
 8018cae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8018cb0:	683a      	ldr	r2, [r7, #0]
 8018cb2:	697b      	ldr	r3, [r7, #20]
 8018cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	f47f af3d 	bne.w	8018b38 <HAL_GPIO_DeInit+0x10>
  }
}
 8018cbe:	bf00      	nop
 8018cc0:	bf00      	nop
 8018cc2:	371c      	adds	r7, #28
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cca:	4770      	bx	lr
 8018ccc:	40010000 	.word	0x40010000
 8018cd0:	48000400 	.word	0x48000400
 8018cd4:	48000800 	.word	0x48000800
 8018cd8:	48000c00 	.word	0x48000c00
 8018cdc:	48001000 	.word	0x48001000
 8018ce0:	58000800 	.word	0x58000800

08018ce4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b085      	sub	sp, #20
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
 8018cec:	460b      	mov	r3, r1
 8018cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	691a      	ldr	r2, [r3, #16]
 8018cf4:	887b      	ldrh	r3, [r7, #2]
 8018cf6:	4013      	ands	r3, r2
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d002      	beq.n	8018d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8018cfc:	2301      	movs	r3, #1
 8018cfe:	73fb      	strb	r3, [r7, #15]
 8018d00:	e001      	b.n	8018d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018d02:	2300      	movs	r3, #0
 8018d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8018d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d08:	4618      	mov	r0, r3
 8018d0a:	3714      	adds	r7, #20
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d12:	4770      	bx	lr

08018d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018d14:	b480      	push	{r7}
 8018d16:	b083      	sub	sp, #12
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
 8018d1c:	460b      	mov	r3, r1
 8018d1e:	807b      	strh	r3, [r7, #2]
 8018d20:	4613      	mov	r3, r2
 8018d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8018d24:	787b      	ldrb	r3, [r7, #1]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d003      	beq.n	8018d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8018d2a:	887a      	ldrh	r2, [r7, #2]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8018d30:	e002      	b.n	8018d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8018d32:	887a      	ldrh	r2, [r7, #2]
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018d38:	bf00      	nop
 8018d3a:	370c      	adds	r7, #12
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d42:	4770      	bx	lr

08018d44 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8018d44:	b480      	push	{r7}
 8018d46:	b085      	sub	sp, #20
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
 8018d4c:	460b      	mov	r3, r1
 8018d4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	695b      	ldr	r3, [r3, #20]
 8018d54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8018d56:	887a      	ldrh	r2, [r7, #2]
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	4013      	ands	r3, r2
 8018d5c:	041a      	lsls	r2, r3, #16
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	43d9      	mvns	r1, r3
 8018d62:	887b      	ldrh	r3, [r7, #2]
 8018d64:	400b      	ands	r3, r1
 8018d66:	431a      	orrs	r2, r3
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	619a      	str	r2, [r3, #24]
}
 8018d6c:	bf00      	nop
 8018d6e:	3714      	adds	r7, #20
 8018d70:	46bd      	mov	sp, r7
 8018d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d76:	4770      	bx	lr

08018d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	4603      	mov	r3, r0
 8018d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8018d82:	4b08      	ldr	r3, [pc, #32]	; (8018da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018d84:	68da      	ldr	r2, [r3, #12]
 8018d86:	88fb      	ldrh	r3, [r7, #6]
 8018d88:	4013      	ands	r3, r2
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d006      	beq.n	8018d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018d8e:	4a05      	ldr	r2, [pc, #20]	; (8018da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018d90:	88fb      	ldrh	r3, [r7, #6]
 8018d92:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8018d94:	88fb      	ldrh	r3, [r7, #6]
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7e8 fb8a 	bl	80014b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8018d9c:	bf00      	nop
 8018d9e:	3708      	adds	r7, #8
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}
 8018da4:	58000800 	.word	0x58000800

08018da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b082      	sub	sp, #8
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d101      	bne.n	8018dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8018db6:	2301      	movs	r3, #1
 8018db8:	e081      	b.n	8018ebe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018dc0:	b2db      	uxtb	r3, r3
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d106      	bne.n	8018dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	2200      	movs	r2, #0
 8018dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8018dce:	6878      	ldr	r0, [r7, #4]
 8018dd0:	f7e8 f9d8 	bl	8001184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2224      	movs	r2, #36	; 0x24
 8018dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	681a      	ldr	r2, [r3, #0]
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	f022 0201 	bic.w	r2, r2, #1
 8018dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	685a      	ldr	r2, [r3, #4]
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	689a      	ldr	r2, [r3, #8]
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	68db      	ldr	r3, [r3, #12]
 8018e0e:	2b01      	cmp	r3, #1
 8018e10:	d107      	bne.n	8018e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	689a      	ldr	r2, [r3, #8]
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018e1e:	609a      	str	r2, [r3, #8]
 8018e20:	e006      	b.n	8018e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	689a      	ldr	r2, [r3, #8]
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8018e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	68db      	ldr	r3, [r3, #12]
 8018e34:	2b02      	cmp	r3, #2
 8018e36:	d104      	bne.n	8018e42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	685b      	ldr	r3, [r3, #4]
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	6812      	ldr	r2, [r2, #0]
 8018e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	68da      	ldr	r2, [r3, #12]
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	691a      	ldr	r2, [r3, #16]
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	695b      	ldr	r3, [r3, #20]
 8018e6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	699b      	ldr	r3, [r3, #24]
 8018e76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	430a      	orrs	r2, r1
 8018e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	69d9      	ldr	r1, [r3, #28]
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	6a1a      	ldr	r2, [r3, #32]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	430a      	orrs	r2, r1
 8018e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	681a      	ldr	r2, [r3, #0]
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	f042 0201 	orr.w	r2, r2, #1
 8018e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	2220      	movs	r2, #32
 8018eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018ebc:	2300      	movs	r3, #0
}
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	3708      	adds	r7, #8
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd80      	pop	{r7, pc}

08018ec6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8018ec6:	b580      	push	{r7, lr}
 8018ec8:	b082      	sub	sp, #8
 8018eca:	af00      	add	r7, sp, #0
 8018ecc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d101      	bne.n	8018ed8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	e021      	b.n	8018f1c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	2224      	movs	r2, #36	; 0x24
 8018edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	681a      	ldr	r2, [r3, #0]
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	f022 0201 	bic.w	r2, r2, #1
 8018eee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8018ef0:	6878      	ldr	r0, [r7, #4]
 8018ef2:	f7e8 f9a3 	bl	800123c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2200      	movs	r2, #0
 8018efa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2200      	movs	r2, #0
 8018f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2200      	movs	r2, #0
 8018f08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	2200      	movs	r2, #0
 8018f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8018f1a:	2300      	movs	r3, #0
}
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	3708      	adds	r7, #8
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}

08018f24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b088      	sub	sp, #32
 8018f28:	af02      	add	r7, sp, #8
 8018f2a:	60f8      	str	r0, [r7, #12]
 8018f2c:	607a      	str	r2, [r7, #4]
 8018f2e:	461a      	mov	r2, r3
 8018f30:	460b      	mov	r3, r1
 8018f32:	817b      	strh	r3, [r7, #10]
 8018f34:	4613      	mov	r3, r2
 8018f36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	2b20      	cmp	r3, #32
 8018f42:	f040 80da 	bne.w	80190fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018f4c:	2b01      	cmp	r3, #1
 8018f4e:	d101      	bne.n	8018f54 <HAL_I2C_Master_Transmit+0x30>
 8018f50:	2302      	movs	r3, #2
 8018f52:	e0d3      	b.n	80190fc <HAL_I2C_Master_Transmit+0x1d8>
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	2201      	movs	r2, #1
 8018f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018f5c:	f7fe fff6 	bl	8017f4c <HAL_GetTick>
 8018f60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	9300      	str	r3, [sp, #0]
 8018f66:	2319      	movs	r3, #25
 8018f68:	2201      	movs	r2, #1
 8018f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018f6e:	68f8      	ldr	r0, [r7, #12]
 8018f70:	f000 fc76 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 8018f74:	4603      	mov	r3, r0
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d001      	beq.n	8018f7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	e0be      	b.n	80190fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	2221      	movs	r2, #33	; 0x21
 8018f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	2210      	movs	r2, #16
 8018f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	2200      	movs	r2, #0
 8018f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	687a      	ldr	r2, [r7, #4]
 8018f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	893a      	ldrh	r2, [r7, #8]
 8018f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	2bff      	cmp	r3, #255	; 0xff
 8018fae:	d90e      	bls.n	8018fce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	22ff      	movs	r2, #255	; 0xff
 8018fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fba:	b2da      	uxtb	r2, r3
 8018fbc:	8979      	ldrh	r1, [r7, #10]
 8018fbe:	4b51      	ldr	r3, [pc, #324]	; (8019104 <HAL_I2C_Master_Transmit+0x1e0>)
 8018fc0:	9300      	str	r3, [sp, #0]
 8018fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018fc6:	68f8      	ldr	r0, [r7, #12]
 8018fc8:	f000 fe86 	bl	8019cd8 <I2C_TransferConfig>
 8018fcc:	e06c      	b.n	80190a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fd2:	b29a      	uxth	r2, r3
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fdc:	b2da      	uxtb	r2, r3
 8018fde:	8979      	ldrh	r1, [r7, #10]
 8018fe0:	4b48      	ldr	r3, [pc, #288]	; (8019104 <HAL_I2C_Master_Transmit+0x1e0>)
 8018fe2:	9300      	str	r3, [sp, #0]
 8018fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018fe8:	68f8      	ldr	r0, [r7, #12]
 8018fea:	f000 fe75 	bl	8019cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8018fee:	e05b      	b.n	80190a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018ff0:	697a      	ldr	r2, [r7, #20]
 8018ff2:	6a39      	ldr	r1, [r7, #32]
 8018ff4:	68f8      	ldr	r0, [r7, #12]
 8018ff6:	f000 fc82 	bl	80198fe <I2C_WaitOnTXISFlagUntilTimeout>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d001      	beq.n	8019004 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8019000:	2301      	movs	r3, #1
 8019002:	e07b      	b.n	80190fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019008:	781a      	ldrb	r2, [r3, #0]
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019014:	1c5a      	adds	r2, r3, #1
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801901e:	b29b      	uxth	r3, r3
 8019020:	3b01      	subs	r3, #1
 8019022:	b29a      	uxth	r2, r3
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801902c:	3b01      	subs	r3, #1
 801902e:	b29a      	uxth	r2, r3
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019038:	b29b      	uxth	r3, r3
 801903a:	2b00      	cmp	r3, #0
 801903c:	d034      	beq.n	80190a8 <HAL_I2C_Master_Transmit+0x184>
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019042:	2b00      	cmp	r3, #0
 8019044:	d130      	bne.n	80190a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019046:	697b      	ldr	r3, [r7, #20]
 8019048:	9300      	str	r3, [sp, #0]
 801904a:	6a3b      	ldr	r3, [r7, #32]
 801904c:	2200      	movs	r2, #0
 801904e:	2180      	movs	r1, #128	; 0x80
 8019050:	68f8      	ldr	r0, [r7, #12]
 8019052:	f000 fc05 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 8019056:	4603      	mov	r3, r0
 8019058:	2b00      	cmp	r3, #0
 801905a:	d001      	beq.n	8019060 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 801905c:	2301      	movs	r3, #1
 801905e:	e04d      	b.n	80190fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019064:	b29b      	uxth	r3, r3
 8019066:	2bff      	cmp	r3, #255	; 0xff
 8019068:	d90e      	bls.n	8019088 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	22ff      	movs	r2, #255	; 0xff
 801906e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019074:	b2da      	uxtb	r2, r3
 8019076:	8979      	ldrh	r1, [r7, #10]
 8019078:	2300      	movs	r3, #0
 801907a:	9300      	str	r3, [sp, #0]
 801907c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019080:	68f8      	ldr	r0, [r7, #12]
 8019082:	f000 fe29 	bl	8019cd8 <I2C_TransferConfig>
 8019086:	e00f      	b.n	80190a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801908c:	b29a      	uxth	r2, r3
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019096:	b2da      	uxtb	r2, r3
 8019098:	8979      	ldrh	r1, [r7, #10]
 801909a:	2300      	movs	r3, #0
 801909c:	9300      	str	r3, [sp, #0]
 801909e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80190a2:	68f8      	ldr	r0, [r7, #12]
 80190a4:	f000 fe18 	bl	8019cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d19e      	bne.n	8018ff0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80190b2:	697a      	ldr	r2, [r7, #20]
 80190b4:	6a39      	ldr	r1, [r7, #32]
 80190b6:	68f8      	ldr	r0, [r7, #12]
 80190b8:	f000 fc68 	bl	801998c <I2C_WaitOnSTOPFlagUntilTimeout>
 80190bc:	4603      	mov	r3, r0
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d001      	beq.n	80190c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80190c2:	2301      	movs	r3, #1
 80190c4:	e01a      	b.n	80190fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	2220      	movs	r2, #32
 80190cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	6859      	ldr	r1, [r3, #4]
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	681a      	ldr	r2, [r3, #0]
 80190d8:	4b0b      	ldr	r3, [pc, #44]	; (8019108 <HAL_I2C_Master_Transmit+0x1e4>)
 80190da:	400b      	ands	r3, r1
 80190dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	2220      	movs	r2, #32
 80190e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	2200      	movs	r2, #0
 80190ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	2200      	movs	r2, #0
 80190f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80190f6:	2300      	movs	r3, #0
 80190f8:	e000      	b.n	80190fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80190fa:	2302      	movs	r3, #2
  }
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3718      	adds	r7, #24
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	80002000 	.word	0x80002000
 8019108:	fe00e800 	.word	0xfe00e800

0801910c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b088      	sub	sp, #32
 8019110:	af02      	add	r7, sp, #8
 8019112:	60f8      	str	r0, [r7, #12]
 8019114:	607a      	str	r2, [r7, #4]
 8019116:	461a      	mov	r2, r3
 8019118:	460b      	mov	r3, r1
 801911a:	817b      	strh	r3, [r7, #10]
 801911c:	4613      	mov	r3, r2
 801911e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019126:	b2db      	uxtb	r3, r3
 8019128:	2b20      	cmp	r3, #32
 801912a:	f040 80db 	bne.w	80192e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019134:	2b01      	cmp	r3, #1
 8019136:	d101      	bne.n	801913c <HAL_I2C_Master_Receive+0x30>
 8019138:	2302      	movs	r3, #2
 801913a:	e0d4      	b.n	80192e6 <HAL_I2C_Master_Receive+0x1da>
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	2201      	movs	r2, #1
 8019140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8019144:	f7fe ff02 	bl	8017f4c <HAL_GetTick>
 8019148:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801914a:	697b      	ldr	r3, [r7, #20]
 801914c:	9300      	str	r3, [sp, #0]
 801914e:	2319      	movs	r3, #25
 8019150:	2201      	movs	r2, #1
 8019152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019156:	68f8      	ldr	r0, [r7, #12]
 8019158:	f000 fb82 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 801915c:	4603      	mov	r3, r0
 801915e:	2b00      	cmp	r3, #0
 8019160:	d001      	beq.n	8019166 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8019162:	2301      	movs	r3, #1
 8019164:	e0bf      	b.n	80192e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	2222      	movs	r2, #34	; 0x22
 801916a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	2210      	movs	r2, #16
 8019172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	2200      	movs	r2, #0
 801917a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	687a      	ldr	r2, [r7, #4]
 8019180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	893a      	ldrh	r2, [r7, #8]
 8019186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	2200      	movs	r2, #0
 801918c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019192:	b29b      	uxth	r3, r3
 8019194:	2bff      	cmp	r3, #255	; 0xff
 8019196:	d90e      	bls.n	80191b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	22ff      	movs	r2, #255	; 0xff
 801919c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191a2:	b2da      	uxtb	r2, r3
 80191a4:	8979      	ldrh	r1, [r7, #10]
 80191a6:	4b52      	ldr	r3, [pc, #328]	; (80192f0 <HAL_I2C_Master_Receive+0x1e4>)
 80191a8:	9300      	str	r3, [sp, #0]
 80191aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80191ae:	68f8      	ldr	r0, [r7, #12]
 80191b0:	f000 fd92 	bl	8019cd8 <I2C_TransferConfig>
 80191b4:	e06d      	b.n	8019292 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191ba:	b29a      	uxth	r2, r3
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191c4:	b2da      	uxtb	r2, r3
 80191c6:	8979      	ldrh	r1, [r7, #10]
 80191c8:	4b49      	ldr	r3, [pc, #292]	; (80192f0 <HAL_I2C_Master_Receive+0x1e4>)
 80191ca:	9300      	str	r3, [sp, #0]
 80191cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80191d0:	68f8      	ldr	r0, [r7, #12]
 80191d2:	f000 fd81 	bl	8019cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80191d6:	e05c      	b.n	8019292 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80191d8:	697a      	ldr	r2, [r7, #20]
 80191da:	6a39      	ldr	r1, [r7, #32]
 80191dc:	68f8      	ldr	r0, [r7, #12]
 80191de:	f000 fc19 	bl	8019a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80191e2:	4603      	mov	r3, r0
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d001      	beq.n	80191ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80191e8:	2301      	movs	r3, #1
 80191ea:	e07c      	b.n	80192e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f6:	b2d2      	uxtb	r2, r2
 80191f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191fe:	1c5a      	adds	r2, r3, #1
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019208:	3b01      	subs	r3, #1
 801920a:	b29a      	uxth	r2, r3
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019214:	b29b      	uxth	r3, r3
 8019216:	3b01      	subs	r3, #1
 8019218:	b29a      	uxth	r2, r3
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019222:	b29b      	uxth	r3, r3
 8019224:	2b00      	cmp	r3, #0
 8019226:	d034      	beq.n	8019292 <HAL_I2C_Master_Receive+0x186>
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801922c:	2b00      	cmp	r3, #0
 801922e:	d130      	bne.n	8019292 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019230:	697b      	ldr	r3, [r7, #20]
 8019232:	9300      	str	r3, [sp, #0]
 8019234:	6a3b      	ldr	r3, [r7, #32]
 8019236:	2200      	movs	r2, #0
 8019238:	2180      	movs	r1, #128	; 0x80
 801923a:	68f8      	ldr	r0, [r7, #12]
 801923c:	f000 fb10 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 8019240:	4603      	mov	r3, r0
 8019242:	2b00      	cmp	r3, #0
 8019244:	d001      	beq.n	801924a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8019246:	2301      	movs	r3, #1
 8019248:	e04d      	b.n	80192e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801924e:	b29b      	uxth	r3, r3
 8019250:	2bff      	cmp	r3, #255	; 0xff
 8019252:	d90e      	bls.n	8019272 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	22ff      	movs	r2, #255	; 0xff
 8019258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801925e:	b2da      	uxtb	r2, r3
 8019260:	8979      	ldrh	r1, [r7, #10]
 8019262:	2300      	movs	r3, #0
 8019264:	9300      	str	r3, [sp, #0]
 8019266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801926a:	68f8      	ldr	r0, [r7, #12]
 801926c:	f000 fd34 	bl	8019cd8 <I2C_TransferConfig>
 8019270:	e00f      	b.n	8019292 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019276:	b29a      	uxth	r2, r3
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019280:	b2da      	uxtb	r2, r3
 8019282:	8979      	ldrh	r1, [r7, #10]
 8019284:	2300      	movs	r3, #0
 8019286:	9300      	str	r3, [sp, #0]
 8019288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801928c:	68f8      	ldr	r0, [r7, #12]
 801928e:	f000 fd23 	bl	8019cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019296:	b29b      	uxth	r3, r3
 8019298:	2b00      	cmp	r3, #0
 801929a:	d19d      	bne.n	80191d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801929c:	697a      	ldr	r2, [r7, #20]
 801929e:	6a39      	ldr	r1, [r7, #32]
 80192a0:	68f8      	ldr	r0, [r7, #12]
 80192a2:	f000 fb73 	bl	801998c <I2C_WaitOnSTOPFlagUntilTimeout>
 80192a6:	4603      	mov	r3, r0
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d001      	beq.n	80192b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80192ac:	2301      	movs	r3, #1
 80192ae:	e01a      	b.n	80192e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	2220      	movs	r2, #32
 80192b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	6859      	ldr	r1, [r3, #4]
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	681a      	ldr	r2, [r3, #0]
 80192c2:	4b0c      	ldr	r3, [pc, #48]	; (80192f4 <HAL_I2C_Master_Receive+0x1e8>)
 80192c4:	400b      	ands	r3, r1
 80192c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	2220      	movs	r2, #32
 80192cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	2200      	movs	r2, #0
 80192d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	2200      	movs	r2, #0
 80192dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80192e0:	2300      	movs	r3, #0
 80192e2:	e000      	b.n	80192e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80192e4:	2302      	movs	r3, #2
  }
}
 80192e6:	4618      	mov	r0, r3
 80192e8:	3718      	adds	r7, #24
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	80002400 	.word	0x80002400
 80192f4:	fe00e800 	.word	0xfe00e800

080192f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b088      	sub	sp, #32
 80192fc:	af02      	add	r7, sp, #8
 80192fe:	60f8      	str	r0, [r7, #12]
 8019300:	4608      	mov	r0, r1
 8019302:	4611      	mov	r1, r2
 8019304:	461a      	mov	r2, r3
 8019306:	4603      	mov	r3, r0
 8019308:	817b      	strh	r3, [r7, #10]
 801930a:	460b      	mov	r3, r1
 801930c:	813b      	strh	r3, [r7, #8]
 801930e:	4613      	mov	r3, r2
 8019310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019318:	b2db      	uxtb	r3, r3
 801931a:	2b20      	cmp	r3, #32
 801931c:	f040 80fd 	bne.w	801951a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8019320:	6a3b      	ldr	r3, [r7, #32]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d002      	beq.n	801932c <HAL_I2C_Mem_Read+0x34>
 8019326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019328:	2b00      	cmp	r3, #0
 801932a:	d105      	bne.n	8019338 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019332:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8019334:	2301      	movs	r3, #1
 8019336:	e0f1      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801933e:	2b01      	cmp	r3, #1
 8019340:	d101      	bne.n	8019346 <HAL_I2C_Mem_Read+0x4e>
 8019342:	2302      	movs	r3, #2
 8019344:	e0ea      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	2201      	movs	r2, #1
 801934a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801934e:	f7fe fdfd 	bl	8017f4c <HAL_GetTick>
 8019352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	2319      	movs	r3, #25
 801935a:	2201      	movs	r2, #1
 801935c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019360:	68f8      	ldr	r0, [r7, #12]
 8019362:	f000 fa7d 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 8019366:	4603      	mov	r3, r0
 8019368:	2b00      	cmp	r3, #0
 801936a:	d001      	beq.n	8019370 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801936c:	2301      	movs	r3, #1
 801936e:	e0d5      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	2222      	movs	r2, #34	; 0x22
 8019374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	2240      	movs	r2, #64	; 0x40
 801937c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	2200      	movs	r2, #0
 8019384:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	6a3a      	ldr	r2, [r7, #32]
 801938a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	2200      	movs	r2, #0
 8019396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8019398:	88f8      	ldrh	r0, [r7, #6]
 801939a:	893a      	ldrh	r2, [r7, #8]
 801939c:	8979      	ldrh	r1, [r7, #10]
 801939e:	697b      	ldr	r3, [r7, #20]
 80193a0:	9301      	str	r3, [sp, #4]
 80193a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a4:	9300      	str	r3, [sp, #0]
 80193a6:	4603      	mov	r3, r0
 80193a8:	68f8      	ldr	r0, [r7, #12]
 80193aa:	f000 f9e1 	bl	8019770 <I2C_RequestMemoryRead>
 80193ae:	4603      	mov	r3, r0
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d005      	beq.n	80193c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	2200      	movs	r2, #0
 80193b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80193bc:	2301      	movs	r3, #1
 80193be:	e0ad      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193c4:	b29b      	uxth	r3, r3
 80193c6:	2bff      	cmp	r3, #255	; 0xff
 80193c8:	d90e      	bls.n	80193e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	22ff      	movs	r2, #255	; 0xff
 80193ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193d4:	b2da      	uxtb	r2, r3
 80193d6:	8979      	ldrh	r1, [r7, #10]
 80193d8:	4b52      	ldr	r3, [pc, #328]	; (8019524 <HAL_I2C_Mem_Read+0x22c>)
 80193da:	9300      	str	r3, [sp, #0]
 80193dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80193e0:	68f8      	ldr	r0, [r7, #12]
 80193e2:	f000 fc79 	bl	8019cd8 <I2C_TransferConfig>
 80193e6:	e00f      	b.n	8019408 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193ec:	b29a      	uxth	r2, r3
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193f6:	b2da      	uxtb	r2, r3
 80193f8:	8979      	ldrh	r1, [r7, #10]
 80193fa:	4b4a      	ldr	r3, [pc, #296]	; (8019524 <HAL_I2C_Mem_Read+0x22c>)
 80193fc:	9300      	str	r3, [sp, #0]
 80193fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019402:	68f8      	ldr	r0, [r7, #12]
 8019404:	f000 fc68 	bl	8019cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8019408:	697b      	ldr	r3, [r7, #20]
 801940a:	9300      	str	r3, [sp, #0]
 801940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801940e:	2200      	movs	r2, #0
 8019410:	2104      	movs	r1, #4
 8019412:	68f8      	ldr	r0, [r7, #12]
 8019414:	f000 fa24 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 8019418:	4603      	mov	r3, r0
 801941a:	2b00      	cmp	r3, #0
 801941c:	d001      	beq.n	8019422 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801941e:	2301      	movs	r3, #1
 8019420:	e07c      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801942c:	b2d2      	uxtb	r2, r2
 801942e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019434:	1c5a      	adds	r2, r3, #1
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801943e:	3b01      	subs	r3, #1
 8019440:	b29a      	uxth	r2, r3
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801944a:	b29b      	uxth	r3, r3
 801944c:	3b01      	subs	r3, #1
 801944e:	b29a      	uxth	r2, r3
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019458:	b29b      	uxth	r3, r3
 801945a:	2b00      	cmp	r3, #0
 801945c:	d034      	beq.n	80194c8 <HAL_I2C_Mem_Read+0x1d0>
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019462:	2b00      	cmp	r3, #0
 8019464:	d130      	bne.n	80194c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019466:	697b      	ldr	r3, [r7, #20]
 8019468:	9300      	str	r3, [sp, #0]
 801946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801946c:	2200      	movs	r2, #0
 801946e:	2180      	movs	r1, #128	; 0x80
 8019470:	68f8      	ldr	r0, [r7, #12]
 8019472:	f000 f9f5 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 8019476:	4603      	mov	r3, r0
 8019478:	2b00      	cmp	r3, #0
 801947a:	d001      	beq.n	8019480 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801947c:	2301      	movs	r3, #1
 801947e:	e04d      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019484:	b29b      	uxth	r3, r3
 8019486:	2bff      	cmp	r3, #255	; 0xff
 8019488:	d90e      	bls.n	80194a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	22ff      	movs	r2, #255	; 0xff
 801948e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019494:	b2da      	uxtb	r2, r3
 8019496:	8979      	ldrh	r1, [r7, #10]
 8019498:	2300      	movs	r3, #0
 801949a:	9300      	str	r3, [sp, #0]
 801949c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80194a0:	68f8      	ldr	r0, [r7, #12]
 80194a2:	f000 fc19 	bl	8019cd8 <I2C_TransferConfig>
 80194a6:	e00f      	b.n	80194c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194ac:	b29a      	uxth	r2, r3
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194b6:	b2da      	uxtb	r2, r3
 80194b8:	8979      	ldrh	r1, [r7, #10]
 80194ba:	2300      	movs	r3, #0
 80194bc:	9300      	str	r3, [sp, #0]
 80194be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80194c2:	68f8      	ldr	r0, [r7, #12]
 80194c4:	f000 fc08 	bl	8019cd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194cc:	b29b      	uxth	r3, r3
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d19a      	bne.n	8019408 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80194d2:	697a      	ldr	r2, [r7, #20]
 80194d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80194d6:	68f8      	ldr	r0, [r7, #12]
 80194d8:	f000 fa58 	bl	801998c <I2C_WaitOnSTOPFlagUntilTimeout>
 80194dc:	4603      	mov	r3, r0
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d001      	beq.n	80194e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80194e2:	2301      	movs	r3, #1
 80194e4:	e01a      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	2220      	movs	r2, #32
 80194ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	6859      	ldr	r1, [r3, #4]
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	4b0b      	ldr	r3, [pc, #44]	; (8019528 <HAL_I2C_Mem_Read+0x230>)
 80194fa:	400b      	ands	r3, r1
 80194fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	2220      	movs	r2, #32
 8019502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	2200      	movs	r2, #0
 801950a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	2200      	movs	r2, #0
 8019512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019516:	2300      	movs	r3, #0
 8019518:	e000      	b.n	801951c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801951a:	2302      	movs	r3, #2
  }
}
 801951c:	4618      	mov	r0, r3
 801951e:	3718      	adds	r7, #24
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	80002400 	.word	0x80002400
 8019528:	fe00e800 	.word	0xfe00e800

0801952c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b08a      	sub	sp, #40	; 0x28
 8019530:	af02      	add	r7, sp, #8
 8019532:	60f8      	str	r0, [r7, #12]
 8019534:	607a      	str	r2, [r7, #4]
 8019536:	603b      	str	r3, [r7, #0]
 8019538:	460b      	mov	r3, r1
 801953a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 801953c:	2300      	movs	r3, #0
 801953e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019546:	b2db      	uxtb	r3, r3
 8019548:	2b20      	cmp	r3, #32
 801954a:	f040 80f1 	bne.w	8019730 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	699b      	ldr	r3, [r3, #24]
 8019554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801955c:	d101      	bne.n	8019562 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 801955e:	2302      	movs	r3, #2
 8019560:	e0e7      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019568:	2b01      	cmp	r3, #1
 801956a:	d101      	bne.n	8019570 <HAL_I2C_IsDeviceReady+0x44>
 801956c:	2302      	movs	r3, #2
 801956e:	e0e0      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	2201      	movs	r2, #1
 8019574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	2224      	movs	r2, #36	; 0x24
 801957c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	2200      	movs	r2, #0
 8019584:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	68db      	ldr	r3, [r3, #12]
 801958a:	2b01      	cmp	r3, #1
 801958c:	d107      	bne.n	801959e <HAL_I2C_IsDeviceReady+0x72>
 801958e:	897b      	ldrh	r3, [r7, #10]
 8019590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801959c:	e004      	b.n	80195a8 <HAL_I2C_IsDeviceReady+0x7c>
 801959e:	897b      	ldrh	r3, [r7, #10]
 80195a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80195a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80195a8:	68fa      	ldr	r2, [r7, #12]
 80195aa:	6812      	ldr	r2, [r2, #0]
 80195ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80195ae:	f7fe fccd 	bl	8017f4c <HAL_GetTick>
 80195b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	699b      	ldr	r3, [r3, #24]
 80195ba:	f003 0320 	and.w	r3, r3, #32
 80195be:	2b20      	cmp	r3, #32
 80195c0:	bf0c      	ite	eq
 80195c2:	2301      	moveq	r3, #1
 80195c4:	2300      	movne	r3, #0
 80195c6:	b2db      	uxtb	r3, r3
 80195c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	699b      	ldr	r3, [r3, #24]
 80195d0:	f003 0310 	and.w	r3, r3, #16
 80195d4:	2b10      	cmp	r3, #16
 80195d6:	bf0c      	ite	eq
 80195d8:	2301      	moveq	r3, #1
 80195da:	2300      	movne	r3, #0
 80195dc:	b2db      	uxtb	r3, r3
 80195de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80195e0:	e034      	b.n	801964c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195e8:	d01a      	beq.n	8019620 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80195ea:	f7fe fcaf 	bl	8017f4c <HAL_GetTick>
 80195ee:	4602      	mov	r2, r0
 80195f0:	69bb      	ldr	r3, [r7, #24]
 80195f2:	1ad3      	subs	r3, r2, r3
 80195f4:	683a      	ldr	r2, [r7, #0]
 80195f6:	429a      	cmp	r2, r3
 80195f8:	d302      	bcc.n	8019600 <HAL_I2C_IsDeviceReady+0xd4>
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d10f      	bne.n	8019620 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	2220      	movs	r2, #32
 8019604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801960c:	f043 0220 	orr.w	r2, r3, #32
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	2200      	movs	r2, #0
 8019618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 801961c:	2301      	movs	r3, #1
 801961e:	e088      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	699b      	ldr	r3, [r3, #24]
 8019626:	f003 0320 	and.w	r3, r3, #32
 801962a:	2b20      	cmp	r3, #32
 801962c:	bf0c      	ite	eq
 801962e:	2301      	moveq	r3, #1
 8019630:	2300      	movne	r3, #0
 8019632:	b2db      	uxtb	r3, r3
 8019634:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	699b      	ldr	r3, [r3, #24]
 801963c:	f003 0310 	and.w	r3, r3, #16
 8019640:	2b10      	cmp	r3, #16
 8019642:	bf0c      	ite	eq
 8019644:	2301      	moveq	r3, #1
 8019646:	2300      	movne	r3, #0
 8019648:	b2db      	uxtb	r3, r3
 801964a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 801964c:	7ffb      	ldrb	r3, [r7, #31]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d102      	bne.n	8019658 <HAL_I2C_IsDeviceReady+0x12c>
 8019652:	7fbb      	ldrb	r3, [r7, #30]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d0c4      	beq.n	80195e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	699b      	ldr	r3, [r3, #24]
 801965e:	f003 0310 	and.w	r3, r3, #16
 8019662:	2b10      	cmp	r3, #16
 8019664:	d01a      	beq.n	801969c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8019666:	69bb      	ldr	r3, [r7, #24]
 8019668:	9300      	str	r3, [sp, #0]
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	2200      	movs	r2, #0
 801966e:	2120      	movs	r1, #32
 8019670:	68f8      	ldr	r0, [r7, #12]
 8019672:	f000 f8f5 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 8019676:	4603      	mov	r3, r0
 8019678:	2b00      	cmp	r3, #0
 801967a:	d001      	beq.n	8019680 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 801967c:	2301      	movs	r3, #1
 801967e:	e058      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	2220      	movs	r2, #32
 8019686:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	2220      	movs	r2, #32
 801968c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	2200      	movs	r2, #0
 8019694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8019698:	2300      	movs	r3, #0
 801969a:	e04a      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801969c:	69bb      	ldr	r3, [r7, #24]
 801969e:	9300      	str	r3, [sp, #0]
 80196a0:	683b      	ldr	r3, [r7, #0]
 80196a2:	2200      	movs	r2, #0
 80196a4:	2120      	movs	r1, #32
 80196a6:	68f8      	ldr	r0, [r7, #12]
 80196a8:	f000 f8da 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 80196ac:	4603      	mov	r3, r0
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d001      	beq.n	80196b6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80196b2:	2301      	movs	r3, #1
 80196b4:	e03d      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	2210      	movs	r2, #16
 80196bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	2220      	movs	r2, #32
 80196c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	687a      	ldr	r2, [r7, #4]
 80196ca:	429a      	cmp	r2, r3
 80196cc:	d118      	bne.n	8019700 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	685a      	ldr	r2, [r3, #4]
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80196dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80196de:	69bb      	ldr	r3, [r7, #24]
 80196e0:	9300      	str	r3, [sp, #0]
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	2200      	movs	r2, #0
 80196e6:	2120      	movs	r1, #32
 80196e8:	68f8      	ldr	r0, [r7, #12]
 80196ea:	f000 f8b9 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 80196ee:	4603      	mov	r3, r0
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d001      	beq.n	80196f8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80196f4:	2301      	movs	r3, #1
 80196f6:	e01c      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2220      	movs	r2, #32
 80196fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	3301      	adds	r3, #1
 8019704:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	687a      	ldr	r2, [r7, #4]
 801970a:	429a      	cmp	r2, r3
 801970c:	f63f af3b 	bhi.w	8019586 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	2220      	movs	r2, #32
 8019714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801971c:	f043 0220 	orr.w	r2, r3, #32
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	2200      	movs	r2, #0
 8019728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801972c:	2301      	movs	r3, #1
 801972e:	e000      	b.n	8019732 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8019730:	2302      	movs	r3, #2
  }
}
 8019732:	4618      	mov	r0, r3
 8019734:	3720      	adds	r7, #32
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}

0801973a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 801973a:	b480      	push	{r7}
 801973c:	b083      	sub	sp, #12
 801973e:	af00      	add	r7, sp, #0
 8019740:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019748:	b2db      	uxtb	r3, r3
}
 801974a:	4618      	mov	r0, r3
 801974c:	370c      	adds	r7, #12
 801974e:	46bd      	mov	sp, r7
 8019750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019754:	4770      	bx	lr

08019756 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8019756:	b480      	push	{r7}
 8019758:	b083      	sub	sp, #12
 801975a:	af00      	add	r7, sp, #0
 801975c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8019762:	4618      	mov	r0, r3
 8019764:	370c      	adds	r7, #12
 8019766:	46bd      	mov	sp, r7
 8019768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976c:	4770      	bx	lr
	...

08019770 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b086      	sub	sp, #24
 8019774:	af02      	add	r7, sp, #8
 8019776:	60f8      	str	r0, [r7, #12]
 8019778:	4608      	mov	r0, r1
 801977a:	4611      	mov	r1, r2
 801977c:	461a      	mov	r2, r3
 801977e:	4603      	mov	r3, r0
 8019780:	817b      	strh	r3, [r7, #10]
 8019782:	460b      	mov	r3, r1
 8019784:	813b      	strh	r3, [r7, #8]
 8019786:	4613      	mov	r3, r2
 8019788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801978a:	88fb      	ldrh	r3, [r7, #6]
 801978c:	b2da      	uxtb	r2, r3
 801978e:	8979      	ldrh	r1, [r7, #10]
 8019790:	4b20      	ldr	r3, [pc, #128]	; (8019814 <I2C_RequestMemoryRead+0xa4>)
 8019792:	9300      	str	r3, [sp, #0]
 8019794:	2300      	movs	r3, #0
 8019796:	68f8      	ldr	r0, [r7, #12]
 8019798:	f000 fa9e 	bl	8019cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801979c:	69fa      	ldr	r2, [r7, #28]
 801979e:	69b9      	ldr	r1, [r7, #24]
 80197a0:	68f8      	ldr	r0, [r7, #12]
 80197a2:	f000 f8ac 	bl	80198fe <I2C_WaitOnTXISFlagUntilTimeout>
 80197a6:	4603      	mov	r3, r0
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d001      	beq.n	80197b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80197ac:	2301      	movs	r3, #1
 80197ae:	e02c      	b.n	801980a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80197b0:	88fb      	ldrh	r3, [r7, #6]
 80197b2:	2b01      	cmp	r3, #1
 80197b4:	d105      	bne.n	80197c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80197b6:	893b      	ldrh	r3, [r7, #8]
 80197b8:	b2da      	uxtb	r2, r3
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	629a      	str	r2, [r3, #40]	; 0x28
 80197c0:	e015      	b.n	80197ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80197c2:	893b      	ldrh	r3, [r7, #8]
 80197c4:	0a1b      	lsrs	r3, r3, #8
 80197c6:	b29b      	uxth	r3, r3
 80197c8:	b2da      	uxtb	r2, r3
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80197d0:	69fa      	ldr	r2, [r7, #28]
 80197d2:	69b9      	ldr	r1, [r7, #24]
 80197d4:	68f8      	ldr	r0, [r7, #12]
 80197d6:	f000 f892 	bl	80198fe <I2C_WaitOnTXISFlagUntilTimeout>
 80197da:	4603      	mov	r3, r0
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d001      	beq.n	80197e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80197e0:	2301      	movs	r3, #1
 80197e2:	e012      	b.n	801980a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80197e4:	893b      	ldrh	r3, [r7, #8]
 80197e6:	b2da      	uxtb	r2, r3
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80197ee:	69fb      	ldr	r3, [r7, #28]
 80197f0:	9300      	str	r3, [sp, #0]
 80197f2:	69bb      	ldr	r3, [r7, #24]
 80197f4:	2200      	movs	r2, #0
 80197f6:	2140      	movs	r1, #64	; 0x40
 80197f8:	68f8      	ldr	r0, [r7, #12]
 80197fa:	f000 f831 	bl	8019860 <I2C_WaitOnFlagUntilTimeout>
 80197fe:	4603      	mov	r3, r0
 8019800:	2b00      	cmp	r3, #0
 8019802:	d001      	beq.n	8019808 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8019804:	2301      	movs	r3, #1
 8019806:	e000      	b.n	801980a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8019808:	2300      	movs	r3, #0
}
 801980a:	4618      	mov	r0, r3
 801980c:	3710      	adds	r7, #16
 801980e:	46bd      	mov	sp, r7
 8019810:	bd80      	pop	{r7, pc}
 8019812:	bf00      	nop
 8019814:	80002000 	.word	0x80002000

08019818 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8019818:	b480      	push	{r7}
 801981a:	b083      	sub	sp, #12
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	699b      	ldr	r3, [r3, #24]
 8019826:	f003 0302 	and.w	r3, r3, #2
 801982a:	2b02      	cmp	r3, #2
 801982c:	d103      	bne.n	8019836 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	2200      	movs	r2, #0
 8019834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	699b      	ldr	r3, [r3, #24]
 801983c:	f003 0301 	and.w	r3, r3, #1
 8019840:	2b01      	cmp	r3, #1
 8019842:	d007      	beq.n	8019854 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	699a      	ldr	r2, [r3, #24]
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	f042 0201 	orr.w	r2, r2, #1
 8019852:	619a      	str	r2, [r3, #24]
  }
}
 8019854:	bf00      	nop
 8019856:	370c      	adds	r7, #12
 8019858:	46bd      	mov	sp, r7
 801985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985e:	4770      	bx	lr

08019860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b084      	sub	sp, #16
 8019864:	af00      	add	r7, sp, #0
 8019866:	60f8      	str	r0, [r7, #12]
 8019868:	60b9      	str	r1, [r7, #8]
 801986a:	603b      	str	r3, [r7, #0]
 801986c:	4613      	mov	r3, r2
 801986e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019870:	e031      	b.n	80198d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019878:	d02d      	beq.n	80198d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801987a:	f7fe fb67 	bl	8017f4c <HAL_GetTick>
 801987e:	4602      	mov	r2, r0
 8019880:	69bb      	ldr	r3, [r7, #24]
 8019882:	1ad3      	subs	r3, r2, r3
 8019884:	683a      	ldr	r2, [r7, #0]
 8019886:	429a      	cmp	r2, r3
 8019888:	d302      	bcc.n	8019890 <I2C_WaitOnFlagUntilTimeout+0x30>
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d122      	bne.n	80198d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	699a      	ldr	r2, [r3, #24]
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	4013      	ands	r3, r2
 801989a:	68ba      	ldr	r2, [r7, #8]
 801989c:	429a      	cmp	r2, r3
 801989e:	bf0c      	ite	eq
 80198a0:	2301      	moveq	r3, #1
 80198a2:	2300      	movne	r3, #0
 80198a4:	b2db      	uxtb	r3, r3
 80198a6:	461a      	mov	r2, r3
 80198a8:	79fb      	ldrb	r3, [r7, #7]
 80198aa:	429a      	cmp	r2, r3
 80198ac:	d113      	bne.n	80198d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198b2:	f043 0220 	orr.w	r2, r3, #32
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	2220      	movs	r2, #32
 80198be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	2200      	movs	r2, #0
 80198c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	2200      	movs	r2, #0
 80198ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80198d2:	2301      	movs	r3, #1
 80198d4:	e00f      	b.n	80198f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	699a      	ldr	r2, [r3, #24]
 80198dc:	68bb      	ldr	r3, [r7, #8]
 80198de:	4013      	ands	r3, r2
 80198e0:	68ba      	ldr	r2, [r7, #8]
 80198e2:	429a      	cmp	r2, r3
 80198e4:	bf0c      	ite	eq
 80198e6:	2301      	moveq	r3, #1
 80198e8:	2300      	movne	r3, #0
 80198ea:	b2db      	uxtb	r3, r3
 80198ec:	461a      	mov	r2, r3
 80198ee:	79fb      	ldrb	r3, [r7, #7]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d0be      	beq.n	8019872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80198f4:	2300      	movs	r3, #0
}
 80198f6:	4618      	mov	r0, r3
 80198f8:	3710      	adds	r7, #16
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd80      	pop	{r7, pc}

080198fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80198fe:	b580      	push	{r7, lr}
 8019900:	b084      	sub	sp, #16
 8019902:	af00      	add	r7, sp, #0
 8019904:	60f8      	str	r0, [r7, #12]
 8019906:	60b9      	str	r1, [r7, #8]
 8019908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801990a:	e033      	b.n	8019974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801990c:	687a      	ldr	r2, [r7, #4]
 801990e:	68b9      	ldr	r1, [r7, #8]
 8019910:	68f8      	ldr	r0, [r7, #12]
 8019912:	f000 f901 	bl	8019b18 <I2C_IsErrorOccurred>
 8019916:	4603      	mov	r3, r0
 8019918:	2b00      	cmp	r3, #0
 801991a:	d001      	beq.n	8019920 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801991c:	2301      	movs	r3, #1
 801991e:	e031      	b.n	8019984 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019920:	68bb      	ldr	r3, [r7, #8]
 8019922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019926:	d025      	beq.n	8019974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019928:	f7fe fb10 	bl	8017f4c <HAL_GetTick>
 801992c:	4602      	mov	r2, r0
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	68ba      	ldr	r2, [r7, #8]
 8019934:	429a      	cmp	r2, r3
 8019936:	d302      	bcc.n	801993e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d11a      	bne.n	8019974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	699b      	ldr	r3, [r3, #24]
 8019944:	f003 0302 	and.w	r3, r3, #2
 8019948:	2b02      	cmp	r3, #2
 801994a:	d013      	beq.n	8019974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019950:	f043 0220 	orr.w	r2, r3, #32
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	2220      	movs	r2, #32
 801995c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	2200      	movs	r2, #0
 8019964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	2200      	movs	r2, #0
 801996c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8019970:	2301      	movs	r3, #1
 8019972:	e007      	b.n	8019984 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	699b      	ldr	r3, [r3, #24]
 801997a:	f003 0302 	and.w	r3, r3, #2
 801997e:	2b02      	cmp	r3, #2
 8019980:	d1c4      	bne.n	801990c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8019982:	2300      	movs	r3, #0
}
 8019984:	4618      	mov	r0, r3
 8019986:	3710      	adds	r7, #16
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}

0801998c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b084      	sub	sp, #16
 8019990:	af00      	add	r7, sp, #0
 8019992:	60f8      	str	r0, [r7, #12]
 8019994:	60b9      	str	r1, [r7, #8]
 8019996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019998:	e02f      	b.n	80199fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801999a:	687a      	ldr	r2, [r7, #4]
 801999c:	68b9      	ldr	r1, [r7, #8]
 801999e:	68f8      	ldr	r0, [r7, #12]
 80199a0:	f000 f8ba 	bl	8019b18 <I2C_IsErrorOccurred>
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d001      	beq.n	80199ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80199aa:	2301      	movs	r3, #1
 80199ac:	e02d      	b.n	8019a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80199ae:	f7fe facd 	bl	8017f4c <HAL_GetTick>
 80199b2:	4602      	mov	r2, r0
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	1ad3      	subs	r3, r2, r3
 80199b8:	68ba      	ldr	r2, [r7, #8]
 80199ba:	429a      	cmp	r2, r3
 80199bc:	d302      	bcc.n	80199c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d11a      	bne.n	80199fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	699b      	ldr	r3, [r3, #24]
 80199ca:	f003 0320 	and.w	r3, r3, #32
 80199ce:	2b20      	cmp	r3, #32
 80199d0:	d013      	beq.n	80199fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199d6:	f043 0220 	orr.w	r2, r3, #32
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	2220      	movs	r2, #32
 80199e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2200      	movs	r2, #0
 80199ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2200      	movs	r2, #0
 80199f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80199f6:	2301      	movs	r3, #1
 80199f8:	e007      	b.n	8019a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	699b      	ldr	r3, [r3, #24]
 8019a00:	f003 0320 	and.w	r3, r3, #32
 8019a04:	2b20      	cmp	r3, #32
 8019a06:	d1c8      	bne.n	801999a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019a08:	2300      	movs	r3, #0
}
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	3710      	adds	r7, #16
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}
	...

08019a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b084      	sub	sp, #16
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	60f8      	str	r0, [r7, #12]
 8019a1c:	60b9      	str	r1, [r7, #8]
 8019a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019a20:	e06b      	b.n	8019afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a22:	687a      	ldr	r2, [r7, #4]
 8019a24:	68b9      	ldr	r1, [r7, #8]
 8019a26:	68f8      	ldr	r0, [r7, #12]
 8019a28:	f000 f876 	bl	8019b18 <I2C_IsErrorOccurred>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d001      	beq.n	8019a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8019a32:	2301      	movs	r3, #1
 8019a34:	e069      	b.n	8019b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	699b      	ldr	r3, [r3, #24]
 8019a3c:	f003 0320 	and.w	r3, r3, #32
 8019a40:	2b20      	cmp	r3, #32
 8019a42:	d138      	bne.n	8019ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	699b      	ldr	r3, [r3, #24]
 8019a4a:	f003 0304 	and.w	r3, r3, #4
 8019a4e:	2b04      	cmp	r3, #4
 8019a50:	d105      	bne.n	8019a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d001      	beq.n	8019a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	e055      	b.n	8019b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	699b      	ldr	r3, [r3, #24]
 8019a64:	f003 0310 	and.w	r3, r3, #16
 8019a68:	2b10      	cmp	r3, #16
 8019a6a:	d107      	bne.n	8019a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	2210      	movs	r2, #16
 8019a72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	2204      	movs	r2, #4
 8019a78:	645a      	str	r2, [r3, #68]	; 0x44
 8019a7a:	e002      	b.n	8019a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2200      	movs	r2, #0
 8019a80:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	2220      	movs	r2, #32
 8019a88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	6859      	ldr	r1, [r3, #4]
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	681a      	ldr	r2, [r3, #0]
 8019a94:	4b1f      	ldr	r3, [pc, #124]	; (8019b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8019a96:	400b      	ands	r3, r1
 8019a98:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2220      	movs	r2, #32
 8019a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	2200      	movs	r2, #0
 8019aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8019ab2:	2301      	movs	r3, #1
 8019ab4:	e029      	b.n	8019b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019ab6:	f7fe fa49 	bl	8017f4c <HAL_GetTick>
 8019aba:	4602      	mov	r2, r0
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	1ad3      	subs	r3, r2, r3
 8019ac0:	68ba      	ldr	r2, [r7, #8]
 8019ac2:	429a      	cmp	r2, r3
 8019ac4:	d302      	bcc.n	8019acc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8019ac6:	68bb      	ldr	r3, [r7, #8]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d116      	bne.n	8019afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	699b      	ldr	r3, [r3, #24]
 8019ad2:	f003 0304 	and.w	r3, r3, #4
 8019ad6:	2b04      	cmp	r3, #4
 8019ad8:	d00f      	beq.n	8019afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ade:	f043 0220 	orr.w	r2, r3, #32
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	2220      	movs	r2, #32
 8019aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	2200      	movs	r2, #0
 8019af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8019af6:	2301      	movs	r3, #1
 8019af8:	e007      	b.n	8019b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	699b      	ldr	r3, [r3, #24]
 8019b00:	f003 0304 	and.w	r3, r3, #4
 8019b04:	2b04      	cmp	r3, #4
 8019b06:	d18c      	bne.n	8019a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019b08:	2300      	movs	r3, #0
}
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	3710      	adds	r7, #16
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}
 8019b12:	bf00      	nop
 8019b14:	fe00e800 	.word	0xfe00e800

08019b18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b08a      	sub	sp, #40	; 0x28
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	60f8      	str	r0, [r7, #12]
 8019b20:	60b9      	str	r1, [r7, #8]
 8019b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019b24:	2300      	movs	r3, #0
 8019b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	699b      	ldr	r3, [r3, #24]
 8019b30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8019b32:	2300      	movs	r3, #0
 8019b34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8019b3a:	69bb      	ldr	r3, [r7, #24]
 8019b3c:	f003 0310 	and.w	r3, r3, #16
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d068      	beq.n	8019c16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	2210      	movs	r2, #16
 8019b4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8019b4c:	e049      	b.n	8019be2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b54:	d045      	beq.n	8019be2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8019b56:	f7fe f9f9 	bl	8017f4c <HAL_GetTick>
 8019b5a:	4602      	mov	r2, r0
 8019b5c:	69fb      	ldr	r3, [r7, #28]
 8019b5e:	1ad3      	subs	r3, r2, r3
 8019b60:	68ba      	ldr	r2, [r7, #8]
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d302      	bcc.n	8019b6c <I2C_IsErrorOccurred+0x54>
 8019b66:	68bb      	ldr	r3, [r7, #8]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d13a      	bne.n	8019be2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	685b      	ldr	r3, [r3, #4]
 8019b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019b76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019b7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	699b      	ldr	r3, [r3, #24]
 8019b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019b8e:	d121      	bne.n	8019bd4 <I2C_IsErrorOccurred+0xbc>
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019b96:	d01d      	beq.n	8019bd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8019b98:	7cfb      	ldrb	r3, [r7, #19]
 8019b9a:	2b20      	cmp	r3, #32
 8019b9c:	d01a      	beq.n	8019bd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	685a      	ldr	r2, [r3, #4]
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019bac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8019bae:	f7fe f9cd 	bl	8017f4c <HAL_GetTick>
 8019bb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019bb4:	e00e      	b.n	8019bd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8019bb6:	f7fe f9c9 	bl	8017f4c <HAL_GetTick>
 8019bba:	4602      	mov	r2, r0
 8019bbc:	69fb      	ldr	r3, [r7, #28]
 8019bbe:	1ad3      	subs	r3, r2, r3
 8019bc0:	2b19      	cmp	r3, #25
 8019bc2:	d907      	bls.n	8019bd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8019bc4:	6a3b      	ldr	r3, [r7, #32]
 8019bc6:	f043 0320 	orr.w	r3, r3, #32
 8019bca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8019bcc:	2301      	movs	r3, #1
 8019bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8019bd2:	e006      	b.n	8019be2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	699b      	ldr	r3, [r3, #24]
 8019bda:	f003 0320 	and.w	r3, r3, #32
 8019bde:	2b20      	cmp	r3, #32
 8019be0:	d1e9      	bne.n	8019bb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	699b      	ldr	r3, [r3, #24]
 8019be8:	f003 0320 	and.w	r3, r3, #32
 8019bec:	2b20      	cmp	r3, #32
 8019bee:	d003      	beq.n	8019bf8 <I2C_IsErrorOccurred+0xe0>
 8019bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d0aa      	beq.n	8019b4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8019bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d103      	bne.n	8019c08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	2220      	movs	r2, #32
 8019c06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8019c08:	6a3b      	ldr	r3, [r7, #32]
 8019c0a:	f043 0304 	orr.w	r3, r3, #4
 8019c0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8019c10:	2301      	movs	r3, #1
 8019c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	699b      	ldr	r3, [r3, #24]
 8019c1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8019c1e:	69bb      	ldr	r3, [r7, #24]
 8019c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d00b      	beq.n	8019c40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8019c28:	6a3b      	ldr	r3, [r7, #32]
 8019c2a:	f043 0301 	orr.w	r3, r3, #1
 8019c2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8019c40:	69bb      	ldr	r3, [r7, #24]
 8019c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d00b      	beq.n	8019c62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8019c4a:	6a3b      	ldr	r3, [r7, #32]
 8019c4c:	f043 0308 	orr.w	r3, r3, #8
 8019c50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019c5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019c5c:	2301      	movs	r3, #1
 8019c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8019c62:	69bb      	ldr	r3, [r7, #24]
 8019c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d00b      	beq.n	8019c84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8019c6c:	6a3b      	ldr	r3, [r7, #32]
 8019c6e:	f043 0302 	orr.w	r3, r3, #2
 8019c72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8019c7e:	2301      	movs	r3, #1
 8019c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8019c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d01c      	beq.n	8019cc6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8019c8c:	68f8      	ldr	r0, [r7, #12]
 8019c8e:	f7ff fdc3 	bl	8019818 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	6859      	ldr	r1, [r3, #4]
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	681a      	ldr	r2, [r3, #0]
 8019c9c:	4b0d      	ldr	r3, [pc, #52]	; (8019cd4 <I2C_IsErrorOccurred+0x1bc>)
 8019c9e:	400b      	ands	r3, r1
 8019ca0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019ca6:	6a3b      	ldr	r3, [r7, #32]
 8019ca8:	431a      	orrs	r2, r3
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	2220      	movs	r2, #32
 8019cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	2200      	movs	r2, #0
 8019cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8019cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019cca:	4618      	mov	r0, r3
 8019ccc:	3728      	adds	r7, #40	; 0x28
 8019cce:	46bd      	mov	sp, r7
 8019cd0:	bd80      	pop	{r7, pc}
 8019cd2:	bf00      	nop
 8019cd4:	fe00e800 	.word	0xfe00e800

08019cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b087      	sub	sp, #28
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	60f8      	str	r0, [r7, #12]
 8019ce0:	607b      	str	r3, [r7, #4]
 8019ce2:	460b      	mov	r3, r1
 8019ce4:	817b      	strh	r3, [r7, #10]
 8019ce6:	4613      	mov	r3, r2
 8019ce8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8019cea:	897b      	ldrh	r3, [r7, #10]
 8019cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8019cf0:	7a7b      	ldrb	r3, [r7, #9]
 8019cf2:	041b      	lsls	r3, r3, #16
 8019cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8019cf8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8019cfe:	6a3b      	ldr	r3, [r7, #32]
 8019d00:	4313      	orrs	r3, r2
 8019d02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019d06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	685a      	ldr	r2, [r3, #4]
 8019d0e:	6a3b      	ldr	r3, [r7, #32]
 8019d10:	0d5b      	lsrs	r3, r3, #21
 8019d12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8019d16:	4b08      	ldr	r3, [pc, #32]	; (8019d38 <I2C_TransferConfig+0x60>)
 8019d18:	430b      	orrs	r3, r1
 8019d1a:	43db      	mvns	r3, r3
 8019d1c:	ea02 0103 	and.w	r1, r2, r3
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	697a      	ldr	r2, [r7, #20]
 8019d26:	430a      	orrs	r2, r1
 8019d28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8019d2a:	bf00      	nop
 8019d2c:	371c      	adds	r7, #28
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d34:	4770      	bx	lr
 8019d36:	bf00      	nop
 8019d38:	03ff63ff 	.word	0x03ff63ff

08019d3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8019d3c:	b480      	push	{r7}
 8019d3e:	b083      	sub	sp, #12
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]
 8019d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	2b20      	cmp	r3, #32
 8019d50:	d138      	bne.n	8019dc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019d58:	2b01      	cmp	r3, #1
 8019d5a:	d101      	bne.n	8019d60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8019d5c:	2302      	movs	r3, #2
 8019d5e:	e032      	b.n	8019dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2201      	movs	r2, #1
 8019d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	2224      	movs	r2, #36	; 0x24
 8019d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	681a      	ldr	r2, [r3, #0]
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	f022 0201 	bic.w	r2, r2, #1
 8019d7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	681a      	ldr	r2, [r3, #0]
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019d8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	6819      	ldr	r1, [r3, #0]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	683a      	ldr	r2, [r7, #0]
 8019d9c:	430a      	orrs	r2, r1
 8019d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	681a      	ldr	r2, [r3, #0]
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f042 0201 	orr.w	r2, r2, #1
 8019dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	2220      	movs	r2, #32
 8019db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	e000      	b.n	8019dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8019dc4:	2302      	movs	r3, #2
  }
}
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	370c      	adds	r7, #12
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd0:	4770      	bx	lr

08019dd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8019dd2:	b480      	push	{r7}
 8019dd4:	b085      	sub	sp, #20
 8019dd6:	af00      	add	r7, sp, #0
 8019dd8:	6078      	str	r0, [r7, #4]
 8019dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019de2:	b2db      	uxtb	r3, r3
 8019de4:	2b20      	cmp	r3, #32
 8019de6:	d139      	bne.n	8019e5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019dee:	2b01      	cmp	r3, #1
 8019df0:	d101      	bne.n	8019df6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8019df2:	2302      	movs	r3, #2
 8019df4:	e033      	b.n	8019e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	2201      	movs	r2, #1
 8019dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	2224      	movs	r2, #36	; 0x24
 8019e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	681a      	ldr	r2, [r3, #0]
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	f022 0201 	bic.w	r2, r2, #1
 8019e14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019e24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8019e26:	683b      	ldr	r3, [r7, #0]
 8019e28:	021b      	lsls	r3, r3, #8
 8019e2a:	68fa      	ldr	r2, [r7, #12]
 8019e2c:	4313      	orrs	r3, r2
 8019e2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	68fa      	ldr	r2, [r7, #12]
 8019e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	681a      	ldr	r2, [r3, #0]
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	f042 0201 	orr.w	r2, r2, #1
 8019e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	2220      	movs	r2, #32
 8019e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	2200      	movs	r2, #0
 8019e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	e000      	b.n	8019e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8019e5c:	2302      	movs	r3, #2
  }
}
 8019e5e:	4618      	mov	r0, r3
 8019e60:	3714      	adds	r7, #20
 8019e62:	46bd      	mov	sp, r7
 8019e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e68:	4770      	bx	lr

08019e6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e6c:	b08b      	sub	sp, #44	; 0x2c
 8019e6e:	af06      	add	r7, sp, #24
 8019e70:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d101      	bne.n	8019e7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019e78:	2301      	movs	r3, #1
 8019e7a:	e0cb      	b.n	801a014 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8019e82:	b2db      	uxtb	r3, r3
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d106      	bne.n	8019e96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	2200      	movs	r2, #0
 8019e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019e90:	6878      	ldr	r0, [r7, #4]
 8019e92:	f7e9 ff4b 	bl	8003d2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	2203      	movs	r2, #3
 8019e9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f003 fb98 	bl	801d5d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	73fb      	strb	r3, [r7, #15]
 8019eac:	e040      	b.n	8019f30 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019eae:	7bfb      	ldrb	r3, [r7, #15]
 8019eb0:	6879      	ldr	r1, [r7, #4]
 8019eb2:	1c5a      	adds	r2, r3, #1
 8019eb4:	4613      	mov	r3, r2
 8019eb6:	009b      	lsls	r3, r3, #2
 8019eb8:	4413      	add	r3, r2
 8019eba:	00db      	lsls	r3, r3, #3
 8019ebc:	440b      	add	r3, r1
 8019ebe:	3301      	adds	r3, #1
 8019ec0:	2201      	movs	r2, #1
 8019ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019ec4:	7bfb      	ldrb	r3, [r7, #15]
 8019ec6:	6879      	ldr	r1, [r7, #4]
 8019ec8:	1c5a      	adds	r2, r3, #1
 8019eca:	4613      	mov	r3, r2
 8019ecc:	009b      	lsls	r3, r3, #2
 8019ece:	4413      	add	r3, r2
 8019ed0:	00db      	lsls	r3, r3, #3
 8019ed2:	440b      	add	r3, r1
 8019ed4:	7bfa      	ldrb	r2, [r7, #15]
 8019ed6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019ed8:	7bfb      	ldrb	r3, [r7, #15]
 8019eda:	6879      	ldr	r1, [r7, #4]
 8019edc:	1c5a      	adds	r2, r3, #1
 8019ede:	4613      	mov	r3, r2
 8019ee0:	009b      	lsls	r3, r3, #2
 8019ee2:	4413      	add	r3, r2
 8019ee4:	00db      	lsls	r3, r3, #3
 8019ee6:	440b      	add	r3, r1
 8019ee8:	3303      	adds	r3, #3
 8019eea:	2200      	movs	r2, #0
 8019eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019eee:	7bfa      	ldrb	r2, [r7, #15]
 8019ef0:	6879      	ldr	r1, [r7, #4]
 8019ef2:	4613      	mov	r3, r2
 8019ef4:	009b      	lsls	r3, r3, #2
 8019ef6:	4413      	add	r3, r2
 8019ef8:	00db      	lsls	r3, r3, #3
 8019efa:	440b      	add	r3, r1
 8019efc:	3338      	adds	r3, #56	; 0x38
 8019efe:	2200      	movs	r2, #0
 8019f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019f02:	7bfa      	ldrb	r2, [r7, #15]
 8019f04:	6879      	ldr	r1, [r7, #4]
 8019f06:	4613      	mov	r3, r2
 8019f08:	009b      	lsls	r3, r3, #2
 8019f0a:	4413      	add	r3, r2
 8019f0c:	00db      	lsls	r3, r3, #3
 8019f0e:	440b      	add	r3, r1
 8019f10:	333c      	adds	r3, #60	; 0x3c
 8019f12:	2200      	movs	r2, #0
 8019f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019f16:	7bfa      	ldrb	r2, [r7, #15]
 8019f18:	6879      	ldr	r1, [r7, #4]
 8019f1a:	4613      	mov	r3, r2
 8019f1c:	009b      	lsls	r3, r3, #2
 8019f1e:	4413      	add	r3, r2
 8019f20:	00db      	lsls	r3, r3, #3
 8019f22:	440b      	add	r3, r1
 8019f24:	3340      	adds	r3, #64	; 0x40
 8019f26:	2200      	movs	r2, #0
 8019f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019f2a:	7bfb      	ldrb	r3, [r7, #15]
 8019f2c:	3301      	adds	r3, #1
 8019f2e:	73fb      	strb	r3, [r7, #15]
 8019f30:	7bfa      	ldrb	r2, [r7, #15]
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	685b      	ldr	r3, [r3, #4]
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d3b9      	bcc.n	8019eae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	73fb      	strb	r3, [r7, #15]
 8019f3e:	e044      	b.n	8019fca <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019f40:	7bfa      	ldrb	r2, [r7, #15]
 8019f42:	6879      	ldr	r1, [r7, #4]
 8019f44:	4613      	mov	r3, r2
 8019f46:	009b      	lsls	r3, r3, #2
 8019f48:	4413      	add	r3, r2
 8019f4a:	00db      	lsls	r3, r3, #3
 8019f4c:	440b      	add	r3, r1
 8019f4e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8019f52:	2200      	movs	r2, #0
 8019f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019f56:	7bfa      	ldrb	r2, [r7, #15]
 8019f58:	6879      	ldr	r1, [r7, #4]
 8019f5a:	4613      	mov	r3, r2
 8019f5c:	009b      	lsls	r3, r3, #2
 8019f5e:	4413      	add	r3, r2
 8019f60:	00db      	lsls	r3, r3, #3
 8019f62:	440b      	add	r3, r1
 8019f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8019f68:	7bfa      	ldrb	r2, [r7, #15]
 8019f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019f6c:	7bfa      	ldrb	r2, [r7, #15]
 8019f6e:	6879      	ldr	r1, [r7, #4]
 8019f70:	4613      	mov	r3, r2
 8019f72:	009b      	lsls	r3, r3, #2
 8019f74:	4413      	add	r3, r2
 8019f76:	00db      	lsls	r3, r3, #3
 8019f78:	440b      	add	r3, r1
 8019f7a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8019f7e:	2200      	movs	r2, #0
 8019f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019f82:	7bfa      	ldrb	r2, [r7, #15]
 8019f84:	6879      	ldr	r1, [r7, #4]
 8019f86:	4613      	mov	r3, r2
 8019f88:	009b      	lsls	r3, r3, #2
 8019f8a:	4413      	add	r3, r2
 8019f8c:	00db      	lsls	r3, r3, #3
 8019f8e:	440b      	add	r3, r1
 8019f90:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8019f94:	2200      	movs	r2, #0
 8019f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019f98:	7bfa      	ldrb	r2, [r7, #15]
 8019f9a:	6879      	ldr	r1, [r7, #4]
 8019f9c:	4613      	mov	r3, r2
 8019f9e:	009b      	lsls	r3, r3, #2
 8019fa0:	4413      	add	r3, r2
 8019fa2:	00db      	lsls	r3, r3, #3
 8019fa4:	440b      	add	r3, r1
 8019fa6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8019faa:	2200      	movs	r2, #0
 8019fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019fae:	7bfa      	ldrb	r2, [r7, #15]
 8019fb0:	6879      	ldr	r1, [r7, #4]
 8019fb2:	4613      	mov	r3, r2
 8019fb4:	009b      	lsls	r3, r3, #2
 8019fb6:	4413      	add	r3, r2
 8019fb8:	00db      	lsls	r3, r3, #3
 8019fba:	440b      	add	r3, r1
 8019fbc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8019fc0:	2200      	movs	r2, #0
 8019fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019fc4:	7bfb      	ldrb	r3, [r7, #15]
 8019fc6:	3301      	adds	r3, #1
 8019fc8:	73fb      	strb	r3, [r7, #15]
 8019fca:	7bfa      	ldrb	r2, [r7, #15]
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	685b      	ldr	r3, [r3, #4]
 8019fd0:	429a      	cmp	r2, r3
 8019fd2:	d3b5      	bcc.n	8019f40 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	603b      	str	r3, [r7, #0]
 8019fda:	687e      	ldr	r6, [r7, #4]
 8019fdc:	466d      	mov	r5, sp
 8019fde:	f106 0410 	add.w	r4, r6, #16
 8019fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019fe6:	6823      	ldr	r3, [r4, #0]
 8019fe8:	602b      	str	r3, [r5, #0]
 8019fea:	1d33      	adds	r3, r6, #4
 8019fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019fee:	6838      	ldr	r0, [r7, #0]
 8019ff0:	f003 fb0d 	bl	801d60e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	2201      	movs	r2, #1
 801a000:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	69db      	ldr	r3, [r3, #28]
 801a008:	2b01      	cmp	r3, #1
 801a00a:	d102      	bne.n	801a012 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f000 f805 	bl	801a01c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801a012:	2300      	movs	r3, #0
}
 801a014:	4618      	mov	r0, r3
 801a016:	3714      	adds	r7, #20
 801a018:	46bd      	mov	sp, r7
 801a01a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a01c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801a01c:	b480      	push	{r7}
 801a01e:	b085      	sub	sp, #20
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	2201      	movs	r2, #1
 801a02e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2200      	movs	r2, #0
 801a036:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a040:	b29b      	uxth	r3, r3
 801a042:	f043 0301 	orr.w	r3, r3, #1
 801a046:	b29a      	uxth	r2, r3
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a054:	b29b      	uxth	r3, r3
 801a056:	f043 0302 	orr.w	r3, r3, #2
 801a05a:	b29a      	uxth	r2, r3
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801a062:	2300      	movs	r3, #0
}
 801a064:	4618      	mov	r0, r3
 801a066:	3714      	adds	r7, #20
 801a068:	46bd      	mov	sp, r7
 801a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a06e:	4770      	bx	lr

0801a070 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a070:	b480      	push	{r7}
 801a072:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801a074:	4b05      	ldr	r3, [pc, #20]	; (801a08c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	4a04      	ldr	r2, [pc, #16]	; (801a08c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801a07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a07e:	6013      	str	r3, [r2, #0]
}
 801a080:	bf00      	nop
 801a082:	46bd      	mov	sp, r7
 801a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a088:	4770      	bx	lr
 801a08a:	bf00      	nop
 801a08c:	58000400 	.word	0x58000400

0801a090 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801a090:	b480      	push	{r7}
 801a092:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 801a094:	4b04      	ldr	r3, [pc, #16]	; (801a0a8 <HAL_PWREx_GetVoltageRange+0x18>)
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801a09c:	4618      	mov	r0, r3
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a4:	4770      	bx	lr
 801a0a6:	bf00      	nop
 801a0a8:	58000400 	.word	0x58000400

0801a0ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 801a0ac:	b480      	push	{r7}
 801a0ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801a0b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a0ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a0be:	d101      	bne.n	801a0c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 801a0c0:	2301      	movs	r3, #1
 801a0c2:	e000      	b.n	801a0c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 801a0c4:	2300      	movs	r3, #0
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr

0801a0d0 <LL_RCC_HSE_Enable>:
{
 801a0d0:	b480      	push	{r7}
 801a0d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801a0d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a0de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a0e2:	6013      	str	r3, [r2, #0]
}
 801a0e4:	bf00      	nop
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ec:	4770      	bx	lr

0801a0ee <LL_RCC_HSE_Disable>:
{
 801a0ee:	b480      	push	{r7}
 801a0f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801a0f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a0fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a100:	6013      	str	r3, [r2, #0]
}
 801a102:	bf00      	nop
 801a104:	46bd      	mov	sp, r7
 801a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10a:	4770      	bx	lr

0801a10c <LL_RCC_HSE_IsReady>:
{
 801a10c:	b480      	push	{r7}
 801a10e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801a110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a11a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801a11e:	d101      	bne.n	801a124 <LL_RCC_HSE_IsReady+0x18>
 801a120:	2301      	movs	r3, #1
 801a122:	e000      	b.n	801a126 <LL_RCC_HSE_IsReady+0x1a>
 801a124:	2300      	movs	r3, #0
}
 801a126:	4618      	mov	r0, r3
 801a128:	46bd      	mov	sp, r7
 801a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12e:	4770      	bx	lr

0801a130 <LL_RCC_HSI_Enable>:
{
 801a130:	b480      	push	{r7}
 801a132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801a134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a13e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a142:	6013      	str	r3, [r2, #0]
}
 801a144:	bf00      	nop
 801a146:	46bd      	mov	sp, r7
 801a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14c:	4770      	bx	lr

0801a14e <LL_RCC_HSI_Disable>:
{
 801a14e:	b480      	push	{r7}
 801a150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801a152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a15c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a160:	6013      	str	r3, [r2, #0]
}
 801a162:	bf00      	nop
 801a164:	46bd      	mov	sp, r7
 801a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a16a:	4770      	bx	lr

0801a16c <LL_RCC_HSI_IsReady>:
{
 801a16c:	b480      	push	{r7}
 801a16e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801a170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a17a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a17e:	d101      	bne.n	801a184 <LL_RCC_HSI_IsReady+0x18>
 801a180:	2301      	movs	r3, #1
 801a182:	e000      	b.n	801a186 <LL_RCC_HSI_IsReady+0x1a>
 801a184:	2300      	movs	r3, #0
}
 801a186:	4618      	mov	r0, r3
 801a188:	46bd      	mov	sp, r7
 801a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18e:	4770      	bx	lr

0801a190 <LL_RCC_HSI_SetCalibTrimming>:
{
 801a190:	b480      	push	{r7}
 801a192:	b083      	sub	sp, #12
 801a194:	af00      	add	r7, sp, #0
 801a196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801a198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a19c:	685b      	ldr	r3, [r3, #4]
 801a19e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	061b      	lsls	r3, r3, #24
 801a1a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a1aa:	4313      	orrs	r3, r2
 801a1ac:	604b      	str	r3, [r1, #4]
}
 801a1ae:	bf00      	nop
 801a1b0:	370c      	adds	r7, #12
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b8:	4770      	bx	lr

0801a1ba <LL_RCC_HSI48_Enable>:
{
 801a1ba:	b480      	push	{r7}
 801a1bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801a1be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a1c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a1c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a1ca:	f043 0301 	orr.w	r3, r3, #1
 801a1ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801a1d2:	bf00      	nop
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1da:	4770      	bx	lr

0801a1dc <LL_RCC_HSI48_Disable>:
{
 801a1dc:	b480      	push	{r7}
 801a1de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801a1e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a1e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a1e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a1ec:	f023 0301 	bic.w	r3, r3, #1
 801a1f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801a1f4:	bf00      	nop
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fc:	4770      	bx	lr

0801a1fe <LL_RCC_HSI48_IsReady>:
{
 801a1fe:	b480      	push	{r7}
 801a200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801a202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a20a:	f003 0302 	and.w	r3, r3, #2
 801a20e:	2b02      	cmp	r3, #2
 801a210:	d101      	bne.n	801a216 <LL_RCC_HSI48_IsReady+0x18>
 801a212:	2301      	movs	r3, #1
 801a214:	e000      	b.n	801a218 <LL_RCC_HSI48_IsReady+0x1a>
 801a216:	2300      	movs	r3, #0
}
 801a218:	4618      	mov	r0, r3
 801a21a:	46bd      	mov	sp, r7
 801a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a220:	4770      	bx	lr

0801a222 <LL_RCC_LSE_Enable>:
{
 801a222:	b480      	push	{r7}
 801a224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801a226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a22e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a232:	f043 0301 	orr.w	r3, r3, #1
 801a236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a23a:	bf00      	nop
 801a23c:	46bd      	mov	sp, r7
 801a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a242:	4770      	bx	lr

0801a244 <LL_RCC_LSE_Disable>:
{
 801a244:	b480      	push	{r7}
 801a246:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801a248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a254:	f023 0301 	bic.w	r3, r3, #1
 801a258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a25c:	bf00      	nop
 801a25e:	46bd      	mov	sp, r7
 801a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a264:	4770      	bx	lr

0801a266 <LL_RCC_LSE_EnableBypass>:
{
 801a266:	b480      	push	{r7}
 801a268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801a26a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a276:	f043 0304 	orr.w	r3, r3, #4
 801a27a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a27e:	bf00      	nop
 801a280:	46bd      	mov	sp, r7
 801a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a286:	4770      	bx	lr

0801a288 <LL_RCC_LSE_DisableBypass>:
{
 801a288:	b480      	push	{r7}
 801a28a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801a28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a298:	f023 0304 	bic.w	r3, r3, #4
 801a29c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801a2a0:	bf00      	nop
 801a2a2:	46bd      	mov	sp, r7
 801a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a8:	4770      	bx	lr

0801a2aa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 801a2aa:	b480      	push	{r7}
 801a2ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801a2ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a2b6:	f003 0302 	and.w	r3, r3, #2
 801a2ba:	2b02      	cmp	r3, #2
 801a2bc:	d101      	bne.n	801a2c2 <LL_RCC_LSE_IsReady+0x18>
 801a2be:	2301      	movs	r3, #1
 801a2c0:	e000      	b.n	801a2c4 <LL_RCC_LSE_IsReady+0x1a>
 801a2c2:	2300      	movs	r3, #0
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2cc:	4770      	bx	lr

0801a2ce <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 801a2ce:	b480      	push	{r7}
 801a2d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801a2d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a2d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a2da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a2de:	f043 0301 	orr.w	r3, r3, #1
 801a2e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a2e6:	bf00      	nop
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ee:	4770      	bx	lr

0801a2f0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 801a2f0:	b480      	push	{r7}
 801a2f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801a2f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a2f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a2fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a300:	f023 0301 	bic.w	r3, r3, #1
 801a304:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a308:	bf00      	nop
 801a30a:	46bd      	mov	sp, r7
 801a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a310:	4770      	bx	lr

0801a312 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 801a312:	b480      	push	{r7}
 801a314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801a316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a31a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a31e:	f003 0302 	and.w	r3, r3, #2
 801a322:	2b02      	cmp	r3, #2
 801a324:	d101      	bne.n	801a32a <LL_RCC_LSI1_IsReady+0x18>
 801a326:	2301      	movs	r3, #1
 801a328:	e000      	b.n	801a32c <LL_RCC_LSI1_IsReady+0x1a>
 801a32a:	2300      	movs	r3, #0
}
 801a32c:	4618      	mov	r0, r3
 801a32e:	46bd      	mov	sp, r7
 801a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a334:	4770      	bx	lr

0801a336 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 801a336:	b480      	push	{r7}
 801a338:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801a33a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a33e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a346:	f043 0304 	orr.w	r3, r3, #4
 801a34a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a34e:	bf00      	nop
 801a350:	46bd      	mov	sp, r7
 801a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a356:	4770      	bx	lr

0801a358 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 801a358:	b480      	push	{r7}
 801a35a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801a35c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a368:	f023 0304 	bic.w	r3, r3, #4
 801a36c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801a370:	bf00      	nop
 801a372:	46bd      	mov	sp, r7
 801a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a378:	4770      	bx	lr

0801a37a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 801a37a:	b480      	push	{r7}
 801a37c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801a37e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a386:	f003 0308 	and.w	r3, r3, #8
 801a38a:	2b08      	cmp	r3, #8
 801a38c:	d101      	bne.n	801a392 <LL_RCC_LSI2_IsReady+0x18>
 801a38e:	2301      	movs	r3, #1
 801a390:	e000      	b.n	801a394 <LL_RCC_LSI2_IsReady+0x1a>
 801a392:	2300      	movs	r3, #0
}
 801a394:	4618      	mov	r0, r3
 801a396:	46bd      	mov	sp, r7
 801a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a39c:	4770      	bx	lr

0801a39e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 801a39e:	b480      	push	{r7}
 801a3a0:	b083      	sub	sp, #12
 801a3a2:	af00      	add	r7, sp, #0
 801a3a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801a3a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a3ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	021b      	lsls	r3, r3, #8
 801a3b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a3ba:	4313      	orrs	r3, r2
 801a3bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801a3c0:	bf00      	nop
 801a3c2:	370c      	adds	r7, #12
 801a3c4:	46bd      	mov	sp, r7
 801a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ca:	4770      	bx	lr

0801a3cc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 801a3cc:	b480      	push	{r7}
 801a3ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 801a3d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a3da:	f043 0301 	orr.w	r3, r3, #1
 801a3de:	6013      	str	r3, [r2, #0]
}
 801a3e0:	bf00      	nop
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e8:	4770      	bx	lr

0801a3ea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 801a3ea:	b480      	push	{r7}
 801a3ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801a3ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a3f8:	f023 0301 	bic.w	r3, r3, #1
 801a3fc:	6013      	str	r3, [r2, #0]
}
 801a3fe:	bf00      	nop
 801a400:	46bd      	mov	sp, r7
 801a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a406:	4770      	bx	lr

0801a408 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 801a408:	b480      	push	{r7}
 801a40a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 801a40c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	f003 0302 	and.w	r3, r3, #2
 801a416:	2b02      	cmp	r3, #2
 801a418:	d101      	bne.n	801a41e <LL_RCC_MSI_IsReady+0x16>
 801a41a:	2301      	movs	r3, #1
 801a41c:	e000      	b.n	801a420 <LL_RCC_MSI_IsReady+0x18>
 801a41e:	2300      	movs	r3, #0
}
 801a420:	4618      	mov	r0, r3
 801a422:	46bd      	mov	sp, r7
 801a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a428:	4770      	bx	lr

0801a42a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 801a42a:	b480      	push	{r7}
 801a42c:	b083      	sub	sp, #12
 801a42e:	af00      	add	r7, sp, #0
 801a430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 801a432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a43c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	4313      	orrs	r3, r2
 801a444:	600b      	str	r3, [r1, #0]
}
 801a446:	bf00      	nop
 801a448:	370c      	adds	r7, #12
 801a44a:	46bd      	mov	sp, r7
 801a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a450:	4770      	bx	lr

0801a452 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 801a452:	b480      	push	{r7}
 801a454:	b083      	sub	sp, #12
 801a456:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 801a458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a462:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2bb0      	cmp	r3, #176	; 0xb0
 801a468:	d901      	bls.n	801a46e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 801a46a:	23b0      	movs	r3, #176	; 0xb0
 801a46c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 801a46e:	687b      	ldr	r3, [r7, #4]
}
 801a470:	4618      	mov	r0, r3
 801a472:	370c      	adds	r7, #12
 801a474:	46bd      	mov	sp, r7
 801a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47a:	4770      	bx	lr

0801a47c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 801a47c:	b480      	push	{r7}
 801a47e:	b083      	sub	sp, #12
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 801a484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a488:	685b      	ldr	r3, [r3, #4]
 801a48a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	021b      	lsls	r3, r3, #8
 801a492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a496:	4313      	orrs	r3, r2
 801a498:	604b      	str	r3, [r1, #4]
}
 801a49a:	bf00      	nop
 801a49c:	370c      	adds	r7, #12
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a4:	4770      	bx	lr

0801a4a6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 801a4a6:	b480      	push	{r7}
 801a4a8:	b083      	sub	sp, #12
 801a4aa:	af00      	add	r7, sp, #0
 801a4ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801a4ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a4b2:	689b      	ldr	r3, [r3, #8]
 801a4b4:	f023 0203 	bic.w	r2, r3, #3
 801a4b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	4313      	orrs	r3, r2
 801a4c0:	608b      	str	r3, [r1, #8]
}
 801a4c2:	bf00      	nop
 801a4c4:	370c      	adds	r7, #12
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4cc:	4770      	bx	lr

0801a4ce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 801a4ce:	b480      	push	{r7}
 801a4d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801a4d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a4d6:	689b      	ldr	r3, [r3, #8]
 801a4d8:	f003 030c 	and.w	r3, r3, #12
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e4:	4770      	bx	lr

0801a4e6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801a4e6:	b480      	push	{r7}
 801a4e8:	b083      	sub	sp, #12
 801a4ea:	af00      	add	r7, sp, #0
 801a4ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801a4ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a4f2:	689b      	ldr	r3, [r3, #8]
 801a4f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a4f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	4313      	orrs	r3, r2
 801a500:	608b      	str	r3, [r1, #8]
}
 801a502:	bf00      	nop
 801a504:	370c      	adds	r7, #12
 801a506:	46bd      	mov	sp, r7
 801a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50c:	4770      	bx	lr

0801a50e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801a50e:	b480      	push	{r7}
 801a510:	b083      	sub	sp, #12
 801a512:	af00      	add	r7, sp, #0
 801a514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801a516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a51a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a51e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	4313      	orrs	r3, r2
 801a52a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801a52e:	bf00      	nop
 801a530:	370c      	adds	r7, #12
 801a532:	46bd      	mov	sp, r7
 801a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a538:	4770      	bx	lr

0801a53a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 801a53a:	b480      	push	{r7}
 801a53c:	b083      	sub	sp, #12
 801a53e:	af00      	add	r7, sp, #0
 801a540:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 801a542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a546:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a54a:	f023 020f 	bic.w	r2, r3, #15
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	091b      	lsrs	r3, r3, #4
 801a552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a556:	4313      	orrs	r3, r2
 801a558:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 801a55c:	bf00      	nop
 801a55e:	370c      	adds	r7, #12
 801a560:	46bd      	mov	sp, r7
 801a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a566:	4770      	bx	lr

0801a568 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 801a568:	b480      	push	{r7}
 801a56a:	b083      	sub	sp, #12
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801a570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a574:	689b      	ldr	r3, [r3, #8]
 801a576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801a57a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	4313      	orrs	r3, r2
 801a582:	608b      	str	r3, [r1, #8]
}
 801a584:	bf00      	nop
 801a586:	370c      	adds	r7, #12
 801a588:	46bd      	mov	sp, r7
 801a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58e:	4770      	bx	lr

0801a590 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 801a590:	b480      	push	{r7}
 801a592:	b083      	sub	sp, #12
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801a598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a59c:	689b      	ldr	r3, [r3, #8]
 801a59e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801a5a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	4313      	orrs	r3, r2
 801a5aa:	608b      	str	r3, [r1, #8]
}
 801a5ac:	bf00      	nop
 801a5ae:	370c      	adds	r7, #12
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b6:	4770      	bx	lr

0801a5b8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801a5b8:	b480      	push	{r7}
 801a5ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801a5bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5c0:	689b      	ldr	r3, [r3, #8]
 801a5c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ce:	4770      	bx	lr

0801a5d0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 801a5d0:	b480      	push	{r7}
 801a5d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801a5d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a5dc:	011b      	lsls	r3, r3, #4
 801a5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ea:	4770      	bx	lr

0801a5ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801a5ec:	b480      	push	{r7}
 801a5ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801a5f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5f4:	689b      	ldr	r3, [r3, #8]
 801a5f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a602:	4770      	bx	lr

0801a604 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801a604:	b480      	push	{r7}
 801a606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801a608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a60c:	689b      	ldr	r3, [r3, #8]
 801a60e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 801a612:	4618      	mov	r0, r3
 801a614:	46bd      	mov	sp, r7
 801a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61a:	4770      	bx	lr

0801a61c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 801a61c:	b480      	push	{r7}
 801a61e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801a620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a62a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a62e:	6013      	str	r3, [r2, #0]
}
 801a630:	bf00      	nop
 801a632:	46bd      	mov	sp, r7
 801a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a638:	4770      	bx	lr

0801a63a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 801a63a:	b480      	push	{r7}
 801a63c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801a63e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801a648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801a64c:	6013      	str	r3, [r2, #0]
}
 801a64e:	bf00      	nop
 801a650:	46bd      	mov	sp, r7
 801a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a656:	4770      	bx	lr

0801a658 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 801a658:	b480      	push	{r7}
 801a65a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801a65c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801a66a:	d101      	bne.n	801a670 <LL_RCC_PLL_IsReady+0x18>
 801a66c:	2301      	movs	r3, #1
 801a66e:	e000      	b.n	801a672 <LL_RCC_PLL_IsReady+0x1a>
 801a670:	2300      	movs	r3, #0
}
 801a672:	4618      	mov	r0, r3
 801a674:	46bd      	mov	sp, r7
 801a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67a:	4770      	bx	lr

0801a67c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801a67c:	b480      	push	{r7}
 801a67e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801a680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a684:	68db      	ldr	r3, [r3, #12]
 801a686:	0a1b      	lsrs	r3, r3, #8
 801a688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801a68c:	4618      	mov	r0, r3
 801a68e:	46bd      	mov	sp, r7
 801a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a694:	4770      	bx	lr

0801a696 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 801a696:	b480      	push	{r7}
 801a698:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801a69a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a69e:	68db      	ldr	r3, [r3, #12]
 801a6a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ac:	4770      	bx	lr

0801a6ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801a6ae:	b480      	push	{r7}
 801a6b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801a6b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a6b6:	68db      	ldr	r3, [r3, #12]
 801a6b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801a6bc:	4618      	mov	r0, r3
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c4:	4770      	bx	lr

0801a6c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 801a6c6:	b480      	push	{r7}
 801a6c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801a6ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a6ce:	68db      	ldr	r3, [r3, #12]
 801a6d0:	f003 0303 	and.w	r3, r3, #3
}
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6dc:	4770      	bx	lr

0801a6de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801a6de:	b480      	push	{r7}
 801a6e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 801a6e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a6e6:	689b      	ldr	r3, [r3, #8]
 801a6e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a6f0:	d101      	bne.n	801a6f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 801a6f2:	2301      	movs	r3, #1
 801a6f4:	e000      	b.n	801a6f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 801a6f6:	2300      	movs	r3, #0
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a700:	4770      	bx	lr

0801a702 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 801a702:	b480      	push	{r7}
 801a704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 801a706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a70a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a70e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801a716:	d101      	bne.n	801a71c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801a718:	2301      	movs	r3, #1
 801a71a:	e000      	b.n	801a71e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801a71c:	2300      	movs	r3, #0
}
 801a71e:	4618      	mov	r0, r3
 801a720:	46bd      	mov	sp, r7
 801a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a726:	4770      	bx	lr

0801a728 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801a728:	b480      	push	{r7}
 801a72a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801a72c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a730:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801a734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a73c:	d101      	bne.n	801a742 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801a73e:	2301      	movs	r3, #1
 801a740:	e000      	b.n	801a744 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 801a742:	2300      	movs	r3, #0
}
 801a744:	4618      	mov	r0, r3
 801a746:	46bd      	mov	sp, r7
 801a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74c:	4770      	bx	lr

0801a74e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 801a74e:	b480      	push	{r7}
 801a750:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801a752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a756:	689b      	ldr	r3, [r3, #8]
 801a758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a75c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801a760:	d101      	bne.n	801a766 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 801a762:	2301      	movs	r3, #1
 801a764:	e000      	b.n	801a768 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 801a766:	2300      	movs	r3, #0
}
 801a768:	4618      	mov	r0, r3
 801a76a:	46bd      	mov	sp, r7
 801a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a770:	4770      	bx	lr

0801a772 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 801a772:	b480      	push	{r7}
 801a774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 801a776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a77a:	689b      	ldr	r3, [r3, #8]
 801a77c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a780:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a784:	d101      	bne.n	801a78a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 801a786:	2301      	movs	r3, #1
 801a788:	e000      	b.n	801a78c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801a78a:	2300      	movs	r3, #0
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr
	...

0801a798 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a798:	b590      	push	{r4, r7, lr}
 801a79a:	b08d      	sub	sp, #52	; 0x34
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d101      	bne.n	801a7aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a7a6:	2301      	movs	r3, #1
 801a7a8:	e363      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	f003 0320 	and.w	r3, r3, #32
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	f000 808d 	beq.w	801a8d2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a7b8:	f7ff fe89 	bl	801a4ce <LL_RCC_GetSysClkSource>
 801a7bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a7be:	f7ff ff82 	bl	801a6c6 <LL_RCC_PLL_GetMainSource>
 801a7c2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d005      	beq.n	801a7d6 <HAL_RCC_OscConfig+0x3e>
 801a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7cc:	2b0c      	cmp	r3, #12
 801a7ce:	d147      	bne.n	801a860 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d2:	2b01      	cmp	r3, #1
 801a7d4:	d144      	bne.n	801a860 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	69db      	ldr	r3, [r3, #28]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d101      	bne.n	801a7e2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801a7de:	2301      	movs	r3, #1
 801a7e0:	e347      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a7e6:	f7ff fe34 	bl	801a452 <LL_RCC_MSI_GetRange>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	429c      	cmp	r4, r3
 801a7ee:	d914      	bls.n	801a81a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	f000 fd2f 	bl	801b258 <RCC_SetFlashLatencyFromMSIRange>
 801a7fa:	4603      	mov	r3, r0
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d001      	beq.n	801a804 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 801a800:	2301      	movs	r3, #1
 801a802:	e336      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a808:	4618      	mov	r0, r3
 801a80a:	f7ff fe0e 	bl	801a42a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	6a1b      	ldr	r3, [r3, #32]
 801a812:	4618      	mov	r0, r3
 801a814:	f7ff fe32 	bl	801a47c <LL_RCC_MSI_SetCalibTrimming>
 801a818:	e013      	b.n	801a842 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a81e:	4618      	mov	r0, r3
 801a820:	f7ff fe03 	bl	801a42a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	6a1b      	ldr	r3, [r3, #32]
 801a828:	4618      	mov	r0, r3
 801a82a:	f7ff fe27 	bl	801a47c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a832:	4618      	mov	r0, r3
 801a834:	f000 fd10 	bl	801b258 <RCC_SetFlashLatencyFromMSIRange>
 801a838:	4603      	mov	r3, r0
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d001      	beq.n	801a842 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801a83e:	2301      	movs	r3, #1
 801a840:	e317      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801a842:	f000 fcc9 	bl	801b1d8 <HAL_RCC_GetHCLKFreq>
 801a846:	4603      	mov	r3, r0
 801a848:	4aa4      	ldr	r2, [pc, #656]	; (801aadc <HAL_RCC_OscConfig+0x344>)
 801a84a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801a84c:	4ba4      	ldr	r3, [pc, #656]	; (801aae0 <HAL_RCC_OscConfig+0x348>)
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	4618      	mov	r0, r3
 801a852:	f7fd fb2d 	bl	8017eb0 <HAL_InitTick>
 801a856:	4603      	mov	r3, r0
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d039      	beq.n	801a8d0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801a85c:	2301      	movs	r3, #1
 801a85e:	e308      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	69db      	ldr	r3, [r3, #28]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d01e      	beq.n	801a8a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801a868:	f7ff fdb0 	bl	801a3cc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801a86c:	f7fd fb6e 	bl	8017f4c <HAL_GetTick>
 801a870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801a872:	e008      	b.n	801a886 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a874:	f7fd fb6a 	bl	8017f4c <HAL_GetTick>
 801a878:	4602      	mov	r2, r0
 801a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a87c:	1ad3      	subs	r3, r2, r3
 801a87e:	2b02      	cmp	r3, #2
 801a880:	d901      	bls.n	801a886 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801a882:	2303      	movs	r3, #3
 801a884:	e2f5      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 801a886:	f7ff fdbf 	bl	801a408 <LL_RCC_MSI_IsReady>
 801a88a:	4603      	mov	r3, r0
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d0f1      	beq.n	801a874 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a894:	4618      	mov	r0, r3
 801a896:	f7ff fdc8 	bl	801a42a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	6a1b      	ldr	r3, [r3, #32]
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7ff fdec 	bl	801a47c <LL_RCC_MSI_SetCalibTrimming>
 801a8a4:	e015      	b.n	801a8d2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a8a6:	f7ff fda0 	bl	801a3ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801a8aa:	f7fd fb4f 	bl	8017f4c <HAL_GetTick>
 801a8ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801a8b0:	e008      	b.n	801a8c4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a8b2:	f7fd fb4b 	bl	8017f4c <HAL_GetTick>
 801a8b6:	4602      	mov	r2, r0
 801a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ba:	1ad3      	subs	r3, r2, r3
 801a8bc:	2b02      	cmp	r3, #2
 801a8be:	d901      	bls.n	801a8c4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801a8c0:	2303      	movs	r3, #3
 801a8c2:	e2d6      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 801a8c4:	f7ff fda0 	bl	801a408 <LL_RCC_MSI_IsReady>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d1f1      	bne.n	801a8b2 <HAL_RCC_OscConfig+0x11a>
 801a8ce:	e000      	b.n	801a8d2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801a8d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	f003 0301 	and.w	r3, r3, #1
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d047      	beq.n	801a96e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a8de:	f7ff fdf6 	bl	801a4ce <LL_RCC_GetSysClkSource>
 801a8e2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a8e4:	f7ff feef 	bl	801a6c6 <LL_RCC_PLL_GetMainSource>
 801a8e8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801a8ea:	6a3b      	ldr	r3, [r7, #32]
 801a8ec:	2b08      	cmp	r3, #8
 801a8ee:	d005      	beq.n	801a8fc <HAL_RCC_OscConfig+0x164>
 801a8f0:	6a3b      	ldr	r3, [r7, #32]
 801a8f2:	2b0c      	cmp	r3, #12
 801a8f4:	d108      	bne.n	801a908 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	2b03      	cmp	r3, #3
 801a8fa:	d105      	bne.n	801a908 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	685b      	ldr	r3, [r3, #4]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d134      	bne.n	801a96e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 801a904:	2301      	movs	r3, #1
 801a906:	e2b4      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	685b      	ldr	r3, [r3, #4]
 801a90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a910:	d102      	bne.n	801a918 <HAL_RCC_OscConfig+0x180>
 801a912:	f7ff fbdd 	bl	801a0d0 <LL_RCC_HSE_Enable>
 801a916:	e001      	b.n	801a91c <HAL_RCC_OscConfig+0x184>
 801a918:	f7ff fbe9 	bl	801a0ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	685b      	ldr	r3, [r3, #4]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d012      	beq.n	801a94a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a924:	f7fd fb12 	bl	8017f4c <HAL_GetTick>
 801a928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801a92a:	e008      	b.n	801a93e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a92c:	f7fd fb0e 	bl	8017f4c <HAL_GetTick>
 801a930:	4602      	mov	r2, r0
 801a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a934:	1ad3      	subs	r3, r2, r3
 801a936:	2b64      	cmp	r3, #100	; 0x64
 801a938:	d901      	bls.n	801a93e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801a93a:	2303      	movs	r3, #3
 801a93c:	e299      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801a93e:	f7ff fbe5 	bl	801a10c <LL_RCC_HSE_IsReady>
 801a942:	4603      	mov	r3, r0
 801a944:	2b00      	cmp	r3, #0
 801a946:	d0f1      	beq.n	801a92c <HAL_RCC_OscConfig+0x194>
 801a948:	e011      	b.n	801a96e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a94a:	f7fd faff 	bl	8017f4c <HAL_GetTick>
 801a94e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801a950:	e008      	b.n	801a964 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a952:	f7fd fafb 	bl	8017f4c <HAL_GetTick>
 801a956:	4602      	mov	r2, r0
 801a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a95a:	1ad3      	subs	r3, r2, r3
 801a95c:	2b64      	cmp	r3, #100	; 0x64
 801a95e:	d901      	bls.n	801a964 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801a960:	2303      	movs	r3, #3
 801a962:	e286      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 801a964:	f7ff fbd2 	bl	801a10c <LL_RCC_HSE_IsReady>
 801a968:	4603      	mov	r3, r0
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d1f1      	bne.n	801a952 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	f003 0302 	and.w	r3, r3, #2
 801a976:	2b00      	cmp	r3, #0
 801a978:	d04c      	beq.n	801aa14 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a97a:	f7ff fda8 	bl	801a4ce <LL_RCC_GetSysClkSource>
 801a97e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a980:	f7ff fea1 	bl	801a6c6 <LL_RCC_PLL_GetMainSource>
 801a984:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801a986:	69bb      	ldr	r3, [r7, #24]
 801a988:	2b04      	cmp	r3, #4
 801a98a:	d005      	beq.n	801a998 <HAL_RCC_OscConfig+0x200>
 801a98c:	69bb      	ldr	r3, [r7, #24]
 801a98e:	2b0c      	cmp	r3, #12
 801a990:	d10e      	bne.n	801a9b0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801a992:	697b      	ldr	r3, [r7, #20]
 801a994:	2b02      	cmp	r3, #2
 801a996:	d10b      	bne.n	801a9b0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	68db      	ldr	r3, [r3, #12]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d101      	bne.n	801a9a4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 801a9a0:	2301      	movs	r3, #1
 801a9a2:	e266      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	691b      	ldr	r3, [r3, #16]
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f7ff fbf1 	bl	801a190 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801a9ae:	e031      	b.n	801aa14 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	68db      	ldr	r3, [r3, #12]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d019      	beq.n	801a9ec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a9b8:	f7ff fbba 	bl	801a130 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a9bc:	f7fd fac6 	bl	8017f4c <HAL_GetTick>
 801a9c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801a9c2:	e008      	b.n	801a9d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a9c4:	f7fd fac2 	bl	8017f4c <HAL_GetTick>
 801a9c8:	4602      	mov	r2, r0
 801a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9cc:	1ad3      	subs	r3, r2, r3
 801a9ce:	2b02      	cmp	r3, #2
 801a9d0:	d901      	bls.n	801a9d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801a9d2:	2303      	movs	r3, #3
 801a9d4:	e24d      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801a9d6:	f7ff fbc9 	bl	801a16c <LL_RCC_HSI_IsReady>
 801a9da:	4603      	mov	r3, r0
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d0f1      	beq.n	801a9c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	691b      	ldr	r3, [r3, #16]
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f7ff fbd3 	bl	801a190 <LL_RCC_HSI_SetCalibTrimming>
 801a9ea:	e013      	b.n	801aa14 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a9ec:	f7ff fbaf 	bl	801a14e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a9f0:	f7fd faac 	bl	8017f4c <HAL_GetTick>
 801a9f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801a9f6:	e008      	b.n	801aa0a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a9f8:	f7fd faa8 	bl	8017f4c <HAL_GetTick>
 801a9fc:	4602      	mov	r2, r0
 801a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa00:	1ad3      	subs	r3, r2, r3
 801aa02:	2b02      	cmp	r3, #2
 801aa04:	d901      	bls.n	801aa0a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801aa06:	2303      	movs	r3, #3
 801aa08:	e233      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801aa0a:	f7ff fbaf 	bl	801a16c <LL_RCC_HSI_IsReady>
 801aa0e:	4603      	mov	r3, r0
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d1f1      	bne.n	801a9f8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	f003 0308 	and.w	r3, r3, #8
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d106      	bne.n	801aa2e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	f000 80a3 	beq.w	801ab74 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	695b      	ldr	r3, [r3, #20]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d076      	beq.n	801ab24 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	f003 0310 	and.w	r3, r3, #16
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d046      	beq.n	801aad0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801aa42:	f7ff fc66 	bl	801a312 <LL_RCC_LSI1_IsReady>
 801aa46:	4603      	mov	r3, r0
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d113      	bne.n	801aa74 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801aa4c:	f7ff fc3f 	bl	801a2ce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801aa50:	f7fd fa7c 	bl	8017f4c <HAL_GetTick>
 801aa54:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 801aa56:	e008      	b.n	801aa6a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801aa58:	f7fd fa78 	bl	8017f4c <HAL_GetTick>
 801aa5c:	4602      	mov	r2, r0
 801aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa60:	1ad3      	subs	r3, r2, r3
 801aa62:	2b02      	cmp	r3, #2
 801aa64:	d901      	bls.n	801aa6a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 801aa66:	2303      	movs	r3, #3
 801aa68:	e203      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801aa6a:	f7ff fc52 	bl	801a312 <LL_RCC_LSI1_IsReady>
 801aa6e:	4603      	mov	r3, r0
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d0f1      	beq.n	801aa58 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 801aa74:	f7ff fc5f 	bl	801a336 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aa78:	f7fd fa68 	bl	8017f4c <HAL_GetTick>
 801aa7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801aa7e:	e008      	b.n	801aa92 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801aa80:	f7fd fa64 	bl	8017f4c <HAL_GetTick>
 801aa84:	4602      	mov	r2, r0
 801aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa88:	1ad3      	subs	r3, r2, r3
 801aa8a:	2b03      	cmp	r3, #3
 801aa8c:	d901      	bls.n	801aa92 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801aa8e:	2303      	movs	r3, #3
 801aa90:	e1ef      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801aa92:	f7ff fc72 	bl	801a37a <LL_RCC_LSI2_IsReady>
 801aa96:	4603      	mov	r3, r0
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d0f1      	beq.n	801aa80 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	699b      	ldr	r3, [r3, #24]
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	f7ff fc7c 	bl	801a39e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801aaa6:	f7ff fc23 	bl	801a2f0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aaaa:	f7fd fa4f 	bl	8017f4c <HAL_GetTick>
 801aaae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801aab0:	e008      	b.n	801aac4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801aab2:	f7fd fa4b 	bl	8017f4c <HAL_GetTick>
 801aab6:	4602      	mov	r2, r0
 801aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaba:	1ad3      	subs	r3, r2, r3
 801aabc:	2b02      	cmp	r3, #2
 801aabe:	d901      	bls.n	801aac4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801aac0:	2303      	movs	r3, #3
 801aac2:	e1d6      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801aac4:	f7ff fc25 	bl	801a312 <LL_RCC_LSI1_IsReady>
 801aac8:	4603      	mov	r3, r0
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d1f1      	bne.n	801aab2 <HAL_RCC_OscConfig+0x31a>
 801aace:	e051      	b.n	801ab74 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801aad0:	f7ff fbfd 	bl	801a2ce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aad4:	f7fd fa3a 	bl	8017f4c <HAL_GetTick>
 801aad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 801aada:	e00c      	b.n	801aaf6 <HAL_RCC_OscConfig+0x35e>
 801aadc:	20000018 	.word	0x20000018
 801aae0:	20000084 	.word	0x20000084
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801aae4:	f7fd fa32 	bl	8017f4c <HAL_GetTick>
 801aae8:	4602      	mov	r2, r0
 801aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaec:	1ad3      	subs	r3, r2, r3
 801aaee:	2b02      	cmp	r3, #2
 801aaf0:	d901      	bls.n	801aaf6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801aaf2:	2303      	movs	r3, #3
 801aaf4:	e1bd      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801aaf6:	f7ff fc0c 	bl	801a312 <LL_RCC_LSI1_IsReady>
 801aafa:	4603      	mov	r3, r0
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d0f1      	beq.n	801aae4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801ab00:	f7ff fc2a 	bl	801a358 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801ab04:	e008      	b.n	801ab18 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801ab06:	f7fd fa21 	bl	8017f4c <HAL_GetTick>
 801ab0a:	4602      	mov	r2, r0
 801ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab0e:	1ad3      	subs	r3, r2, r3
 801ab10:	2b03      	cmp	r3, #3
 801ab12:	d901      	bls.n	801ab18 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 801ab14:	2303      	movs	r3, #3
 801ab16:	e1ac      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 801ab18:	f7ff fc2f 	bl	801a37a <LL_RCC_LSI2_IsReady>
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d1f1      	bne.n	801ab06 <HAL_RCC_OscConfig+0x36e>
 801ab22:	e027      	b.n	801ab74 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 801ab24:	f7ff fc18 	bl	801a358 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ab28:	f7fd fa10 	bl	8017f4c <HAL_GetTick>
 801ab2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801ab2e:	e008      	b.n	801ab42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801ab30:	f7fd fa0c 	bl	8017f4c <HAL_GetTick>
 801ab34:	4602      	mov	r2, r0
 801ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab38:	1ad3      	subs	r3, r2, r3
 801ab3a:	2b03      	cmp	r3, #3
 801ab3c:	d901      	bls.n	801ab42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801ab3e:	2303      	movs	r3, #3
 801ab40:	e197      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801ab42:	f7ff fc1a 	bl	801a37a <LL_RCC_LSI2_IsReady>
 801ab46:	4603      	mov	r3, r0
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d1f1      	bne.n	801ab30 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801ab4c:	f7ff fbd0 	bl	801a2f0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ab50:	f7fd f9fc 	bl	8017f4c <HAL_GetTick>
 801ab54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 801ab56:	e008      	b.n	801ab6a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801ab58:	f7fd f9f8 	bl	8017f4c <HAL_GetTick>
 801ab5c:	4602      	mov	r2, r0
 801ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab60:	1ad3      	subs	r3, r2, r3
 801ab62:	2b02      	cmp	r3, #2
 801ab64:	d901      	bls.n	801ab6a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 801ab66:	2303      	movs	r3, #3
 801ab68:	e183      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801ab6a:	f7ff fbd2 	bl	801a312 <LL_RCC_LSI1_IsReady>
 801ab6e:	4603      	mov	r3, r0
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d1f1      	bne.n	801ab58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	f003 0304 	and.w	r3, r3, #4
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d05b      	beq.n	801ac38 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ab80:	4ba7      	ldr	r3, [pc, #668]	; (801ae20 <HAL_RCC_OscConfig+0x688>)
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d114      	bne.n	801abb6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801ab8c:	f7ff fa70 	bl	801a070 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ab90:	f7fd f9dc 	bl	8017f4c <HAL_GetTick>
 801ab94:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ab96:	e008      	b.n	801abaa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ab98:	f7fd f9d8 	bl	8017f4c <HAL_GetTick>
 801ab9c:	4602      	mov	r2, r0
 801ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aba0:	1ad3      	subs	r3, r2, r3
 801aba2:	2b02      	cmp	r3, #2
 801aba4:	d901      	bls.n	801abaa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801aba6:	2303      	movs	r3, #3
 801aba8:	e163      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801abaa:	4b9d      	ldr	r3, [pc, #628]	; (801ae20 <HAL_RCC_OscConfig+0x688>)
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d0f0      	beq.n	801ab98 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	689b      	ldr	r3, [r3, #8]
 801abba:	2b01      	cmp	r3, #1
 801abbc:	d102      	bne.n	801abc4 <HAL_RCC_OscConfig+0x42c>
 801abbe:	f7ff fb30 	bl	801a222 <LL_RCC_LSE_Enable>
 801abc2:	e00c      	b.n	801abde <HAL_RCC_OscConfig+0x446>
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	689b      	ldr	r3, [r3, #8]
 801abc8:	2b05      	cmp	r3, #5
 801abca:	d104      	bne.n	801abd6 <HAL_RCC_OscConfig+0x43e>
 801abcc:	f7ff fb4b 	bl	801a266 <LL_RCC_LSE_EnableBypass>
 801abd0:	f7ff fb27 	bl	801a222 <LL_RCC_LSE_Enable>
 801abd4:	e003      	b.n	801abde <HAL_RCC_OscConfig+0x446>
 801abd6:	f7ff fb35 	bl	801a244 <LL_RCC_LSE_Disable>
 801abda:	f7ff fb55 	bl	801a288 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	689b      	ldr	r3, [r3, #8]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d014      	beq.n	801ac10 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801abe6:	f7fd f9b1 	bl	8017f4c <HAL_GetTick>
 801abea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 801abec:	e00a      	b.n	801ac04 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801abee:	f7fd f9ad 	bl	8017f4c <HAL_GetTick>
 801abf2:	4602      	mov	r2, r0
 801abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abf6:	1ad3      	subs	r3, r2, r3
 801abf8:	f241 3288 	movw	r2, #5000	; 0x1388
 801abfc:	4293      	cmp	r3, r2
 801abfe:	d901      	bls.n	801ac04 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801ac00:	2303      	movs	r3, #3
 801ac02:	e136      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 801ac04:	f7ff fb51 	bl	801a2aa <LL_RCC_LSE_IsReady>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d0ef      	beq.n	801abee <HAL_RCC_OscConfig+0x456>
 801ac0e:	e013      	b.n	801ac38 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ac10:	f7fd f99c 	bl	8017f4c <HAL_GetTick>
 801ac14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801ac16:	e00a      	b.n	801ac2e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ac18:	f7fd f998 	bl	8017f4c <HAL_GetTick>
 801ac1c:	4602      	mov	r2, r0
 801ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac20:	1ad3      	subs	r3, r2, r3
 801ac22:	f241 3288 	movw	r2, #5000	; 0x1388
 801ac26:	4293      	cmp	r3, r2
 801ac28:	d901      	bls.n	801ac2e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801ac2a:	2303      	movs	r3, #3
 801ac2c:	e121      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801ac2e:	f7ff fb3c 	bl	801a2aa <LL_RCC_LSE_IsReady>
 801ac32:	4603      	mov	r3, r0
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d1ef      	bne.n	801ac18 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d02c      	beq.n	801ac9e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d014      	beq.n	801ac76 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ac4c:	f7ff fab5 	bl	801a1ba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ac50:	f7fd f97c 	bl	8017f4c <HAL_GetTick>
 801ac54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 801ac56:	e008      	b.n	801ac6a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ac58:	f7fd f978 	bl	8017f4c <HAL_GetTick>
 801ac5c:	4602      	mov	r2, r0
 801ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac60:	1ad3      	subs	r3, r2, r3
 801ac62:	2b02      	cmp	r3, #2
 801ac64:	d901      	bls.n	801ac6a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 801ac66:	2303      	movs	r3, #3
 801ac68:	e103      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801ac6a:	f7ff fac8 	bl	801a1fe <LL_RCC_HSI48_IsReady>
 801ac6e:	4603      	mov	r3, r0
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d0f1      	beq.n	801ac58 <HAL_RCC_OscConfig+0x4c0>
 801ac74:	e013      	b.n	801ac9e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801ac76:	f7ff fab1 	bl	801a1dc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ac7a:	f7fd f967 	bl	8017f4c <HAL_GetTick>
 801ac7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801ac80:	e008      	b.n	801ac94 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ac82:	f7fd f963 	bl	8017f4c <HAL_GetTick>
 801ac86:	4602      	mov	r2, r0
 801ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac8a:	1ad3      	subs	r3, r2, r3
 801ac8c:	2b02      	cmp	r3, #2
 801ac8e:	d901      	bls.n	801ac94 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801ac90:	2303      	movs	r3, #3
 801ac92:	e0ee      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801ac94:	f7ff fab3 	bl	801a1fe <LL_RCC_HSI48_IsReady>
 801ac98:	4603      	mov	r3, r0
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d1f1      	bne.n	801ac82 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	f000 80e4 	beq.w	801ae70 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801aca8:	f7ff fc11 	bl	801a4ce <LL_RCC_GetSysClkSource>
 801acac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801acae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801acb2:	68db      	ldr	r3, [r3, #12]
 801acb4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acba:	2b02      	cmp	r3, #2
 801acbc:	f040 80b4 	bne.w	801ae28 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	f003 0203 	and.w	r2, r3, #3
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acca:	429a      	cmp	r2, r3
 801accc:	d123      	bne.n	801ad16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801acd8:	429a      	cmp	r2, r3
 801acda:	d11c      	bne.n	801ad16 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	0a1b      	lsrs	r3, r3, #8
 801ace0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801ace8:	429a      	cmp	r2, r3
 801acea:	d114      	bne.n	801ad16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801acf6:	429a      	cmp	r2, r3
 801acf8:	d10d      	bne.n	801ad16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801ad04:	429a      	cmp	r2, r3
 801ad06:	d106      	bne.n	801ad16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d05d      	beq.n	801add2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ad16:	693b      	ldr	r3, [r7, #16]
 801ad18:	2b0c      	cmp	r3, #12
 801ad1a:	d058      	beq.n	801adce <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801ad1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d001      	beq.n	801ad2e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	e0a1      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801ad2e:	f7ff fc84 	bl	801a63a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801ad32:	f7fd f90b 	bl	8017f4c <HAL_GetTick>
 801ad36:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801ad38:	e008      	b.n	801ad4c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ad3a:	f7fd f907 	bl	8017f4c <HAL_GetTick>
 801ad3e:	4602      	mov	r2, r0
 801ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad42:	1ad3      	subs	r3, r2, r3
 801ad44:	2b02      	cmp	r3, #2
 801ad46:	d901      	bls.n	801ad4c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 801ad48:	2303      	movs	r3, #3
 801ad4a:	e092      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801ad4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d1ef      	bne.n	801ad3a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ad5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad5e:	68da      	ldr	r2, [r3, #12]
 801ad60:	4b30      	ldr	r3, [pc, #192]	; (801ae24 <HAL_RCC_OscConfig+0x68c>)
 801ad62:	4013      	ands	r3, r2
 801ad64:	687a      	ldr	r2, [r7, #4]
 801ad66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801ad68:	687a      	ldr	r2, [r7, #4]
 801ad6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801ad6c:	4311      	orrs	r1, r2
 801ad6e:	687a      	ldr	r2, [r7, #4]
 801ad70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801ad72:	0212      	lsls	r2, r2, #8
 801ad74:	4311      	orrs	r1, r2
 801ad76:	687a      	ldr	r2, [r7, #4]
 801ad78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801ad7a:	4311      	orrs	r1, r2
 801ad7c:	687a      	ldr	r2, [r7, #4]
 801ad7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801ad80:	4311      	orrs	r1, r2
 801ad82:	687a      	ldr	r2, [r7, #4]
 801ad84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801ad86:	430a      	orrs	r2, r1
 801ad88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ad8c:	4313      	orrs	r3, r2
 801ad8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801ad90:	f7ff fc44 	bl	801a61c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801ad94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad98:	68db      	ldr	r3, [r3, #12]
 801ad9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ada2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801ada4:	f7fd f8d2 	bl	8017f4c <HAL_GetTick>
 801ada8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801adaa:	e008      	b.n	801adbe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801adac:	f7fd f8ce 	bl	8017f4c <HAL_GetTick>
 801adb0:	4602      	mov	r2, r0
 801adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb4:	1ad3      	subs	r3, r2, r3
 801adb6:	2b02      	cmp	r3, #2
 801adb8:	d901      	bls.n	801adbe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801adba:	2303      	movs	r3, #3
 801adbc:	e059      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801adbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d0ef      	beq.n	801adac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801adcc:	e050      	b.n	801ae70 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801adce:	2301      	movs	r3, #1
 801add0:	e04f      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801add2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801addc:	2b00      	cmp	r3, #0
 801adde:	d147      	bne.n	801ae70 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801ade0:	f7ff fc1c 	bl	801a61c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801ade4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ade8:	68db      	ldr	r3, [r3, #12]
 801adea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801adee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801adf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801adf4:	f7fd f8aa 	bl	8017f4c <HAL_GetTick>
 801adf8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801adfa:	e008      	b.n	801ae0e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801adfc:	f7fd f8a6 	bl	8017f4c <HAL_GetTick>
 801ae00:	4602      	mov	r2, r0
 801ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae04:	1ad3      	subs	r3, r2, r3
 801ae06:	2b02      	cmp	r3, #2
 801ae08:	d901      	bls.n	801ae0e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801ae0a:	2303      	movs	r3, #3
 801ae0c:	e031      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801ae0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d0ef      	beq.n	801adfc <HAL_RCC_OscConfig+0x664>
 801ae1c:	e028      	b.n	801ae70 <HAL_RCC_OscConfig+0x6d8>
 801ae1e:	bf00      	nop
 801ae20:	58000400 	.word	0x58000400
 801ae24:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ae28:	693b      	ldr	r3, [r7, #16]
 801ae2a:	2b0c      	cmp	r3, #12
 801ae2c:	d01e      	beq.n	801ae6c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ae2e:	f7ff fc04 	bl	801a63a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ae32:	f7fd f88b 	bl	8017f4c <HAL_GetTick>
 801ae36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801ae38:	e008      	b.n	801ae4c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ae3a:	f7fd f887 	bl	8017f4c <HAL_GetTick>
 801ae3e:	4602      	mov	r2, r0
 801ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae42:	1ad3      	subs	r3, r2, r3
 801ae44:	2b02      	cmp	r3, #2
 801ae46:	d901      	bls.n	801ae4c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 801ae48:	2303      	movs	r3, #3
 801ae4a:	e012      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801ae4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d1ef      	bne.n	801ae3a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801ae5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ae5e:	68da      	ldr	r2, [r3, #12]
 801ae60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ae64:	4b05      	ldr	r3, [pc, #20]	; (801ae7c <HAL_RCC_OscConfig+0x6e4>)
 801ae66:	4013      	ands	r3, r2
 801ae68:	60cb      	str	r3, [r1, #12]
 801ae6a:	e001      	b.n	801ae70 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801ae6c:	2301      	movs	r3, #1
 801ae6e:	e000      	b.n	801ae72 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 801ae70:	2300      	movs	r3, #0
}
 801ae72:	4618      	mov	r0, r3
 801ae74:	3734      	adds	r7, #52	; 0x34
 801ae76:	46bd      	mov	sp, r7
 801ae78:	bd90      	pop	{r4, r7, pc}
 801ae7a:	bf00      	nop
 801ae7c:	eefefffc 	.word	0xeefefffc

0801ae80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b084      	sub	sp, #16
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
 801ae88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d101      	bne.n	801ae94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ae90:	2301      	movs	r3, #1
 801ae92:	e12d      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ae94:	4b98      	ldr	r3, [pc, #608]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	f003 0307 	and.w	r3, r3, #7
 801ae9c:	683a      	ldr	r2, [r7, #0]
 801ae9e:	429a      	cmp	r2, r3
 801aea0:	d91b      	bls.n	801aeda <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801aea2:	4b95      	ldr	r3, [pc, #596]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	f023 0207 	bic.w	r2, r3, #7
 801aeaa:	4993      	ldr	r1, [pc, #588]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801aeac:	683b      	ldr	r3, [r7, #0]
 801aeae:	4313      	orrs	r3, r2
 801aeb0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801aeb2:	f7fd f84b 	bl	8017f4c <HAL_GetTick>
 801aeb6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801aeb8:	e008      	b.n	801aecc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801aeba:	f7fd f847 	bl	8017f4c <HAL_GetTick>
 801aebe:	4602      	mov	r2, r0
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	1ad3      	subs	r3, r2, r3
 801aec4:	2b02      	cmp	r3, #2
 801aec6:	d901      	bls.n	801aecc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 801aec8:	2303      	movs	r3, #3
 801aeca:	e111      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801aecc:	4b8a      	ldr	r3, [pc, #552]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	f003 0307 	and.w	r3, r3, #7
 801aed4:	683a      	ldr	r2, [r7, #0]
 801aed6:	429a      	cmp	r2, r3
 801aed8:	d1ef      	bne.n	801aeba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	f003 0302 	and.w	r3, r3, #2
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d016      	beq.n	801af14 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	689b      	ldr	r3, [r3, #8]
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7ff fafb 	bl	801a4e6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801aef0:	f7fd f82c 	bl	8017f4c <HAL_GetTick>
 801aef4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801aef6:	e008      	b.n	801af0a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801aef8:	f7fd f828 	bl	8017f4c <HAL_GetTick>
 801aefc:	4602      	mov	r2, r0
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	1ad3      	subs	r3, r2, r3
 801af02:	2b02      	cmp	r3, #2
 801af04:	d901      	bls.n	801af0a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801af06:	2303      	movs	r3, #3
 801af08:	e0f2      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801af0a:	f7ff fbe8 	bl	801a6de <LL_RCC_IsActiveFlag_HPRE>
 801af0e:	4603      	mov	r3, r0
 801af10:	2b00      	cmp	r3, #0
 801af12:	d0f1      	beq.n	801aef8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	f003 0320 	and.w	r3, r3, #32
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d016      	beq.n	801af4e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	695b      	ldr	r3, [r3, #20]
 801af24:	4618      	mov	r0, r3
 801af26:	f7ff faf2 	bl	801a50e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801af2a:	f7fd f80f 	bl	8017f4c <HAL_GetTick>
 801af2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801af30:	e008      	b.n	801af44 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801af32:	f7fd f80b 	bl	8017f4c <HAL_GetTick>
 801af36:	4602      	mov	r2, r0
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	1ad3      	subs	r3, r2, r3
 801af3c:	2b02      	cmp	r3, #2
 801af3e:	d901      	bls.n	801af44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 801af40:	2303      	movs	r3, #3
 801af42:	e0d5      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 801af44:	f7ff fbdd 	bl	801a702 <LL_RCC_IsActiveFlag_C2HPRE>
 801af48:	4603      	mov	r3, r0
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d0f1      	beq.n	801af32 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801af56:	2b00      	cmp	r3, #0
 801af58:	d016      	beq.n	801af88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	699b      	ldr	r3, [r3, #24]
 801af5e:	4618      	mov	r0, r3
 801af60:	f7ff faeb 	bl	801a53a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801af64:	f7fc fff2 	bl	8017f4c <HAL_GetTick>
 801af68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801af6a:	e008      	b.n	801af7e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801af6c:	f7fc ffee 	bl	8017f4c <HAL_GetTick>
 801af70:	4602      	mov	r2, r0
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	1ad3      	subs	r3, r2, r3
 801af76:	2b02      	cmp	r3, #2
 801af78:	d901      	bls.n	801af7e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801af7a:	2303      	movs	r3, #3
 801af7c:	e0b8      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801af7e:	f7ff fbd3 	bl	801a728 <LL_RCC_IsActiveFlag_SHDHPRE>
 801af82:	4603      	mov	r3, r0
 801af84:	2b00      	cmp	r3, #0
 801af86:	d0f1      	beq.n	801af6c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	f003 0304 	and.w	r3, r3, #4
 801af90:	2b00      	cmp	r3, #0
 801af92:	d016      	beq.n	801afc2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	68db      	ldr	r3, [r3, #12]
 801af98:	4618      	mov	r0, r3
 801af9a:	f7ff fae5 	bl	801a568 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801af9e:	f7fc ffd5 	bl	8017f4c <HAL_GetTick>
 801afa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801afa4:	e008      	b.n	801afb8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801afa6:	f7fc ffd1 	bl	8017f4c <HAL_GetTick>
 801afaa:	4602      	mov	r2, r0
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	1ad3      	subs	r3, r2, r3
 801afb0:	2b02      	cmp	r3, #2
 801afb2:	d901      	bls.n	801afb8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801afb4:	2303      	movs	r3, #3
 801afb6:	e09b      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801afb8:	f7ff fbc9 	bl	801a74e <LL_RCC_IsActiveFlag_PPRE1>
 801afbc:	4603      	mov	r3, r0
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d0f1      	beq.n	801afa6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	f003 0308 	and.w	r3, r3, #8
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d017      	beq.n	801affe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	691b      	ldr	r3, [r3, #16]
 801afd2:	00db      	lsls	r3, r3, #3
 801afd4:	4618      	mov	r0, r3
 801afd6:	f7ff fadb 	bl	801a590 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801afda:	f7fc ffb7 	bl	8017f4c <HAL_GetTick>
 801afde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801afe0:	e008      	b.n	801aff4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801afe2:	f7fc ffb3 	bl	8017f4c <HAL_GetTick>
 801afe6:	4602      	mov	r2, r0
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	1ad3      	subs	r3, r2, r3
 801afec:	2b02      	cmp	r3, #2
 801afee:	d901      	bls.n	801aff4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 801aff0:	2303      	movs	r3, #3
 801aff2:	e07d      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801aff4:	f7ff fbbd 	bl	801a772 <LL_RCC_IsActiveFlag_PPRE2>
 801aff8:	4603      	mov	r3, r0
 801affa:	2b00      	cmp	r3, #0
 801affc:	d0f1      	beq.n	801afe2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	f003 0301 	and.w	r3, r3, #1
 801b006:	2b00      	cmp	r3, #0
 801b008:	d043      	beq.n	801b092 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	2b02      	cmp	r3, #2
 801b010:	d106      	bne.n	801b020 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801b012:	f7ff f87b 	bl	801a10c <LL_RCC_HSE_IsReady>
 801b016:	4603      	mov	r3, r0
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d11e      	bne.n	801b05a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b01c:	2301      	movs	r3, #1
 801b01e:	e067      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	685b      	ldr	r3, [r3, #4]
 801b024:	2b03      	cmp	r3, #3
 801b026:	d106      	bne.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 801b028:	f7ff fb16 	bl	801a658 <LL_RCC_PLL_IsReady>
 801b02c:	4603      	mov	r3, r0
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d113      	bne.n	801b05a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b032:	2301      	movs	r3, #1
 801b034:	e05c      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	685b      	ldr	r3, [r3, #4]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d106      	bne.n	801b04c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801b03e:	f7ff f9e3 	bl	801a408 <LL_RCC_MSI_IsReady>
 801b042:	4603      	mov	r3, r0
 801b044:	2b00      	cmp	r3, #0
 801b046:	d108      	bne.n	801b05a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b048:	2301      	movs	r3, #1
 801b04a:	e051      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801b04c:	f7ff f88e 	bl	801a16c <LL_RCC_HSI_IsReady>
 801b050:	4603      	mov	r3, r0
 801b052:	2b00      	cmp	r3, #0
 801b054:	d101      	bne.n	801b05a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801b056:	2301      	movs	r3, #1
 801b058:	e04a      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	685b      	ldr	r3, [r3, #4]
 801b05e:	4618      	mov	r0, r3
 801b060:	f7ff fa21 	bl	801a4a6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b064:	f7fc ff72 	bl	8017f4c <HAL_GetTick>
 801b068:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b06a:	e00a      	b.n	801b082 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b06c:	f7fc ff6e 	bl	8017f4c <HAL_GetTick>
 801b070:	4602      	mov	r2, r0
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	1ad3      	subs	r3, r2, r3
 801b076:	f241 3288 	movw	r2, #5000	; 0x1388
 801b07a:	4293      	cmp	r3, r2
 801b07c:	d901      	bls.n	801b082 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801b07e:	2303      	movs	r3, #3
 801b080:	e036      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b082:	f7ff fa24 	bl	801a4ce <LL_RCC_GetSysClkSource>
 801b086:	4602      	mov	r2, r0
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	685b      	ldr	r3, [r3, #4]
 801b08c:	009b      	lsls	r3, r3, #2
 801b08e:	429a      	cmp	r2, r3
 801b090:	d1ec      	bne.n	801b06c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b092:	4b19      	ldr	r3, [pc, #100]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	f003 0307 	and.w	r3, r3, #7
 801b09a:	683a      	ldr	r2, [r7, #0]
 801b09c:	429a      	cmp	r2, r3
 801b09e:	d21b      	bcs.n	801b0d8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b0a0:	4b15      	ldr	r3, [pc, #84]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	f023 0207 	bic.w	r2, r3, #7
 801b0a8:	4913      	ldr	r1, [pc, #76]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801b0aa:	683b      	ldr	r3, [r7, #0]
 801b0ac:	4313      	orrs	r3, r2
 801b0ae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b0b0:	f7fc ff4c 	bl	8017f4c <HAL_GetTick>
 801b0b4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b0b6:	e008      	b.n	801b0ca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801b0b8:	f7fc ff48 	bl	8017f4c <HAL_GetTick>
 801b0bc:	4602      	mov	r2, r0
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	1ad3      	subs	r3, r2, r3
 801b0c2:	2b02      	cmp	r3, #2
 801b0c4:	d901      	bls.n	801b0ca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801b0c6:	2303      	movs	r3, #3
 801b0c8:	e012      	b.n	801b0f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b0ca:	4b0b      	ldr	r3, [pc, #44]	; (801b0f8 <HAL_RCC_ClockConfig+0x278>)
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	f003 0307 	and.w	r3, r3, #7
 801b0d2:	683a      	ldr	r2, [r7, #0]
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d1ef      	bne.n	801b0b8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801b0d8:	f000 f87e 	bl	801b1d8 <HAL_RCC_GetHCLKFreq>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	4a07      	ldr	r2, [pc, #28]	; (801b0fc <HAL_RCC_ClockConfig+0x27c>)
 801b0e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801b0e2:	f7fc ff3f 	bl	8017f64 <HAL_GetTickPrio>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	4618      	mov	r0, r3
 801b0ea:	f7fc fee1 	bl	8017eb0 <HAL_InitTick>
 801b0ee:	4603      	mov	r3, r0
}
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	3710      	adds	r7, #16
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}
 801b0f8:	58004000 	.word	0x58004000
 801b0fc:	20000018 	.word	0x20000018

0801b100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b100:	b590      	push	{r4, r7, lr}
 801b102:	b085      	sub	sp, #20
 801b104:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b106:	f7ff f9e2 	bl	801a4ce <LL_RCC_GetSysClkSource>
 801b10a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d10a      	bne.n	801b128 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801b112:	f7ff f99e 	bl	801a452 <LL_RCC_MSI_GetRange>
 801b116:	4603      	mov	r3, r0
 801b118:	091b      	lsrs	r3, r3, #4
 801b11a:	f003 030f 	and.w	r3, r3, #15
 801b11e:	4a2b      	ldr	r2, [pc, #172]	; (801b1cc <HAL_RCC_GetSysClockFreq+0xcc>)
 801b120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b124:	60fb      	str	r3, [r7, #12]
 801b126:	e04b      	b.n	801b1c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	2b04      	cmp	r3, #4
 801b12c:	d102      	bne.n	801b134 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801b12e:	4b28      	ldr	r3, [pc, #160]	; (801b1d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b130:	60fb      	str	r3, [r7, #12]
 801b132:	e045      	b.n	801b1c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	2b08      	cmp	r3, #8
 801b138:	d10a      	bne.n	801b150 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801b13a:	f7fe ffb7 	bl	801a0ac <LL_RCC_HSE_IsEnabledDiv2>
 801b13e:	4603      	mov	r3, r0
 801b140:	2b01      	cmp	r3, #1
 801b142:	d102      	bne.n	801b14a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 801b144:	4b22      	ldr	r3, [pc, #136]	; (801b1d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b146:	60fb      	str	r3, [r7, #12]
 801b148:	e03a      	b.n	801b1c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 801b14a:	4b22      	ldr	r3, [pc, #136]	; (801b1d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801b14c:	60fb      	str	r3, [r7, #12]
 801b14e:	e037      	b.n	801b1c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 801b150:	f7ff fab9 	bl	801a6c6 <LL_RCC_PLL_GetMainSource>
 801b154:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 801b156:	683b      	ldr	r3, [r7, #0]
 801b158:	2b02      	cmp	r3, #2
 801b15a:	d003      	beq.n	801b164 <HAL_RCC_GetSysClockFreq+0x64>
 801b15c:	683b      	ldr	r3, [r7, #0]
 801b15e:	2b03      	cmp	r3, #3
 801b160:	d003      	beq.n	801b16a <HAL_RCC_GetSysClockFreq+0x6a>
 801b162:	e00d      	b.n	801b180 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 801b164:	4b1a      	ldr	r3, [pc, #104]	; (801b1d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b166:	60bb      	str	r3, [r7, #8]
        break;
 801b168:	e015      	b.n	801b196 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801b16a:	f7fe ff9f 	bl	801a0ac <LL_RCC_HSE_IsEnabledDiv2>
 801b16e:	4603      	mov	r3, r0
 801b170:	2b01      	cmp	r3, #1
 801b172:	d102      	bne.n	801b17a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 801b174:	4b16      	ldr	r3, [pc, #88]	; (801b1d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801b176:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 801b178:	e00d      	b.n	801b196 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801b17a:	4b16      	ldr	r3, [pc, #88]	; (801b1d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 801b17c:	60bb      	str	r3, [r7, #8]
        break;
 801b17e:	e00a      	b.n	801b196 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801b180:	f7ff f967 	bl	801a452 <LL_RCC_MSI_GetRange>
 801b184:	4603      	mov	r3, r0
 801b186:	091b      	lsrs	r3, r3, #4
 801b188:	f003 030f 	and.w	r3, r3, #15
 801b18c:	4a0f      	ldr	r2, [pc, #60]	; (801b1cc <HAL_RCC_GetSysClockFreq+0xcc>)
 801b18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b192:	60bb      	str	r3, [r7, #8]
        break;
 801b194:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 801b196:	f7ff fa71 	bl	801a67c <LL_RCC_PLL_GetN>
 801b19a:	4602      	mov	r2, r0
 801b19c:	68bb      	ldr	r3, [r7, #8]
 801b19e:	fb03 f402 	mul.w	r4, r3, r2
 801b1a2:	f7ff fa84 	bl	801a6ae <LL_RCC_PLL_GetDivider>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	091b      	lsrs	r3, r3, #4
 801b1aa:	3301      	adds	r3, #1
 801b1ac:	fbb4 f4f3 	udiv	r4, r4, r3
 801b1b0:	f7ff fa71 	bl	801a696 <LL_RCC_PLL_GetR>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	0f5b      	lsrs	r3, r3, #29
 801b1b8:	3301      	adds	r3, #1
 801b1ba:	fbb4 f3f3 	udiv	r3, r4, r3
 801b1be:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 801b1c0:	68fb      	ldr	r3, [r7, #12]
}
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	3714      	adds	r7, #20
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bd90      	pop	{r4, r7, pc}
 801b1ca:	bf00      	nop
 801b1cc:	0802298c 	.word	0x0802298c
 801b1d0:	00f42400 	.word	0x00f42400
 801b1d4:	01e84800 	.word	0x01e84800

0801b1d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b1d8:	b598      	push	{r3, r4, r7, lr}
 801b1da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801b1dc:	f7ff ff90 	bl	801b100 <HAL_RCC_GetSysClockFreq>
 801b1e0:	4604      	mov	r4, r0
 801b1e2:	f7ff f9e9 	bl	801a5b8 <LL_RCC_GetAHBPrescaler>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	091b      	lsrs	r3, r3, #4
 801b1ea:	f003 030f 	and.w	r3, r3, #15
 801b1ee:	4a03      	ldr	r2, [pc, #12]	; (801b1fc <HAL_RCC_GetHCLKFreq+0x24>)
 801b1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b1f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	bd98      	pop	{r3, r4, r7, pc}
 801b1fc:	0802292c 	.word	0x0802292c

0801b200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b200:	b598      	push	{r3, r4, r7, lr}
 801b202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 801b204:	f7ff ffe8 	bl	801b1d8 <HAL_RCC_GetHCLKFreq>
 801b208:	4604      	mov	r4, r0
 801b20a:	f7ff f9ef 	bl	801a5ec <LL_RCC_GetAPB1Prescaler>
 801b20e:	4603      	mov	r3, r0
 801b210:	0a1b      	lsrs	r3, r3, #8
 801b212:	f003 0307 	and.w	r3, r3, #7
 801b216:	4a04      	ldr	r2, [pc, #16]	; (801b228 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b21c:	f003 031f 	and.w	r3, r3, #31
 801b220:	fa24 f303 	lsr.w	r3, r4, r3
}
 801b224:	4618      	mov	r0, r3
 801b226:	bd98      	pop	{r3, r4, r7, pc}
 801b228:	0802296c 	.word	0x0802296c

0801b22c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b22c:	b598      	push	{r3, r4, r7, lr}
 801b22e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 801b230:	f7ff ffd2 	bl	801b1d8 <HAL_RCC_GetHCLKFreq>
 801b234:	4604      	mov	r4, r0
 801b236:	f7ff f9e5 	bl	801a604 <LL_RCC_GetAPB2Prescaler>
 801b23a:	4603      	mov	r3, r0
 801b23c:	0adb      	lsrs	r3, r3, #11
 801b23e:	f003 0307 	and.w	r3, r3, #7
 801b242:	4a04      	ldr	r2, [pc, #16]	; (801b254 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b248:	f003 031f 	and.w	r3, r3, #31
 801b24c:	fa24 f303 	lsr.w	r3, r4, r3
}
 801b250:	4618      	mov	r0, r3
 801b252:	bd98      	pop	{r3, r4, r7, pc}
 801b254:	0802296c 	.word	0x0802296c

0801b258 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 801b258:	b590      	push	{r4, r7, lr}
 801b25a:	b085      	sub	sp, #20
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	2bb0      	cmp	r3, #176	; 0xb0
 801b264:	d903      	bls.n	801b26e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 801b266:	4b15      	ldr	r3, [pc, #84]	; (801b2bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801b268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b26a:	60fb      	str	r3, [r7, #12]
 801b26c:	e007      	b.n	801b27e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	091b      	lsrs	r3, r3, #4
 801b272:	f003 030f 	and.w	r3, r3, #15
 801b276:	4a11      	ldr	r2, [pc, #68]	; (801b2bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 801b278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b27c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801b27e:	f7ff f9a7 	bl	801a5d0 <LL_RCC_GetAHB4Prescaler>
 801b282:	4603      	mov	r3, r0
 801b284:	091b      	lsrs	r3, r3, #4
 801b286:	f003 030f 	and.w	r3, r3, #15
 801b28a:	4a0d      	ldr	r2, [pc, #52]	; (801b2c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801b28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b290:	68fa      	ldr	r2, [r7, #12]
 801b292:	fbb2 f3f3 	udiv	r3, r2, r3
 801b296:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 801b298:	68bb      	ldr	r3, [r7, #8]
 801b29a:	4a0a      	ldr	r2, [pc, #40]	; (801b2c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801b29c:	fba2 2303 	umull	r2, r3, r2, r3
 801b2a0:	0c9c      	lsrs	r4, r3, #18
 801b2a2:	f7fe fef5 	bl	801a090 <HAL_PWREx_GetVoltageRange>
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	4619      	mov	r1, r3
 801b2aa:	4620      	mov	r0, r4
 801b2ac:	f000 f80c 	bl	801b2c8 <RCC_SetFlashLatency>
 801b2b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	3714      	adds	r7, #20
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	bd90      	pop	{r4, r7, pc}
 801b2ba:	bf00      	nop
 801b2bc:	0802298c 	.word	0x0802298c
 801b2c0:	0802292c 	.word	0x0802292c
 801b2c4:	431bde83 	.word	0x431bde83

0801b2c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 801b2c8:	b590      	push	{r4, r7, lr}
 801b2ca:	b093      	sub	sp, #76	; 0x4c
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
 801b2d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801b2d2:	4b37      	ldr	r3, [pc, #220]	; (801b3b0 <RCC_SetFlashLatency+0xe8>)
 801b2d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801b2d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b2da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801b2de:	4a35      	ldr	r2, [pc, #212]	; (801b3b4 <RCC_SetFlashLatency+0xec>)
 801b2e0:	f107 031c 	add.w	r3, r7, #28
 801b2e4:	ca07      	ldmia	r2, {r0, r1, r2}
 801b2e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801b2ea:	4b33      	ldr	r3, [pc, #204]	; (801b3b8 <RCC_SetFlashLatency+0xf0>)
 801b2ec:	f107 040c 	add.w	r4, r7, #12
 801b2f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b2f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801b2f6:	2300      	movs	r3, #0
 801b2f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 801b2fa:	683b      	ldr	r3, [r7, #0]
 801b2fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b300:	d11a      	bne.n	801b338 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801b302:	2300      	movs	r3, #0
 801b304:	643b      	str	r3, [r7, #64]	; 0x40
 801b306:	e013      	b.n	801b330 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 801b308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b30a:	009b      	lsls	r3, r3, #2
 801b30c:	3348      	adds	r3, #72	; 0x48
 801b30e:	443b      	add	r3, r7
 801b310:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801b314:	687a      	ldr	r2, [r7, #4]
 801b316:	429a      	cmp	r2, r3
 801b318:	d807      	bhi.n	801b32a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801b31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b31c:	009b      	lsls	r3, r3, #2
 801b31e:	3348      	adds	r3, #72	; 0x48
 801b320:	443b      	add	r3, r7
 801b322:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801b326:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801b328:	e020      	b.n	801b36c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801b32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b32c:	3301      	adds	r3, #1
 801b32e:	643b      	str	r3, [r7, #64]	; 0x40
 801b330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b332:	2b03      	cmp	r3, #3
 801b334:	d9e8      	bls.n	801b308 <RCC_SetFlashLatency+0x40>
 801b336:	e019      	b.n	801b36c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801b338:	2300      	movs	r3, #0
 801b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b33c:	e013      	b.n	801b366 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801b33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b340:	009b      	lsls	r3, r3, #2
 801b342:	3348      	adds	r3, #72	; 0x48
 801b344:	443b      	add	r3, r7
 801b346:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801b34a:	687a      	ldr	r2, [r7, #4]
 801b34c:	429a      	cmp	r2, r3
 801b34e:	d807      	bhi.n	801b360 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801b350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b352:	009b      	lsls	r3, r3, #2
 801b354:	3348      	adds	r3, #72	; 0x48
 801b356:	443b      	add	r3, r7
 801b358:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801b35c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801b35e:	e005      	b.n	801b36c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801b360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b362:	3301      	adds	r3, #1
 801b364:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b368:	2b02      	cmp	r3, #2
 801b36a:	d9e8      	bls.n	801b33e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801b36c:	4b13      	ldr	r3, [pc, #76]	; (801b3bc <RCC_SetFlashLatency+0xf4>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	f023 0207 	bic.w	r2, r3, #7
 801b374:	4911      	ldr	r1, [pc, #68]	; (801b3bc <RCC_SetFlashLatency+0xf4>)
 801b376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b378:	4313      	orrs	r3, r2
 801b37a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801b37c:	f7fc fde6 	bl	8017f4c <HAL_GetTick>
 801b380:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801b382:	e008      	b.n	801b396 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801b384:	f7fc fde2 	bl	8017f4c <HAL_GetTick>
 801b388:	4602      	mov	r2, r0
 801b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b38c:	1ad3      	subs	r3, r2, r3
 801b38e:	2b02      	cmp	r3, #2
 801b390:	d901      	bls.n	801b396 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 801b392:	2303      	movs	r3, #3
 801b394:	e007      	b.n	801b3a6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801b396:	4b09      	ldr	r3, [pc, #36]	; (801b3bc <RCC_SetFlashLatency+0xf4>)
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	f003 0307 	and.w	r3, r3, #7
 801b39e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b3a0:	429a      	cmp	r2, r3
 801b3a2:	d1ef      	bne.n	801b384 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 801b3a4:	2300      	movs	r3, #0
}
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	374c      	adds	r7, #76	; 0x4c
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	bd90      	pop	{r4, r7, pc}
 801b3ae:	bf00      	nop
 801b3b0:	08021dfc 	.word	0x08021dfc
 801b3b4:	08021e0c 	.word	0x08021e0c
 801b3b8:	08021e18 	.word	0x08021e18
 801b3bc:	58004000 	.word	0x58004000

0801b3c0 <LL_RCC_LSE_IsEnabled>:
{
 801b3c0:	b480      	push	{r7}
 801b3c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 801b3c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b3cc:	f003 0301 	and.w	r3, r3, #1
 801b3d0:	2b01      	cmp	r3, #1
 801b3d2:	d101      	bne.n	801b3d8 <LL_RCC_LSE_IsEnabled+0x18>
 801b3d4:	2301      	movs	r3, #1
 801b3d6:	e000      	b.n	801b3da <LL_RCC_LSE_IsEnabled+0x1a>
 801b3d8:	2300      	movs	r3, #0
}
 801b3da:	4618      	mov	r0, r3
 801b3dc:	46bd      	mov	sp, r7
 801b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e2:	4770      	bx	lr

0801b3e4 <LL_RCC_LSE_IsReady>:
{
 801b3e4:	b480      	push	{r7}
 801b3e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801b3e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b3f0:	f003 0302 	and.w	r3, r3, #2
 801b3f4:	2b02      	cmp	r3, #2
 801b3f6:	d101      	bne.n	801b3fc <LL_RCC_LSE_IsReady+0x18>
 801b3f8:	2301      	movs	r3, #1
 801b3fa:	e000      	b.n	801b3fe <LL_RCC_LSE_IsReady+0x1a>
 801b3fc:	2300      	movs	r3, #0
}
 801b3fe:	4618      	mov	r0, r3
 801b400:	46bd      	mov	sp, r7
 801b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b406:	4770      	bx	lr

0801b408 <LL_RCC_MSI_EnablePLLMode>:
{
 801b408:	b480      	push	{r7}
 801b40a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 801b40c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b416:	f043 0304 	orr.w	r3, r3, #4
 801b41a:	6013      	str	r3, [r2, #0]
}
 801b41c:	bf00      	nop
 801b41e:	46bd      	mov	sp, r7
 801b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b424:	4770      	bx	lr

0801b426 <LL_RCC_SetRFWKPClockSource>:
{
 801b426:	b480      	push	{r7}
 801b428:	b083      	sub	sp, #12
 801b42a:	af00      	add	r7, sp, #0
 801b42c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801b42e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801b43a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	4313      	orrs	r3, r2
 801b442:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 801b446:	bf00      	nop
 801b448:	370c      	adds	r7, #12
 801b44a:	46bd      	mov	sp, r7
 801b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b450:	4770      	bx	lr

0801b452 <LL_RCC_SetSMPSClockSource>:
{
 801b452:	b480      	push	{r7}
 801b454:	b083      	sub	sp, #12
 801b456:	af00      	add	r7, sp, #0
 801b458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801b45a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b460:	f023 0203 	bic.w	r2, r3, #3
 801b464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	4313      	orrs	r3, r2
 801b46c:	624b      	str	r3, [r1, #36]	; 0x24
}
 801b46e:	bf00      	nop
 801b470:	370c      	adds	r7, #12
 801b472:	46bd      	mov	sp, r7
 801b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b478:	4770      	bx	lr

0801b47a <LL_RCC_SetSMPSPrescaler>:
{
 801b47a:	b480      	push	{r7}
 801b47c:	b083      	sub	sp, #12
 801b47e:	af00      	add	r7, sp, #0
 801b480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 801b482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b488:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801b48c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	4313      	orrs	r3, r2
 801b494:	624b      	str	r3, [r1, #36]	; 0x24
}
 801b496:	bf00      	nop
 801b498:	370c      	adds	r7, #12
 801b49a:	46bd      	mov	sp, r7
 801b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4a0:	4770      	bx	lr

0801b4a2 <LL_RCC_SetUSARTClockSource>:
{
 801b4a2:	b480      	push	{r7}
 801b4a4:	b083      	sub	sp, #12
 801b4a6:	af00      	add	r7, sp, #0
 801b4a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 801b4aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b4b2:	f023 0203 	bic.w	r2, r3, #3
 801b4b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	4313      	orrs	r3, r2
 801b4be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b4c2:	bf00      	nop
 801b4c4:	370c      	adds	r7, #12
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4cc:	4770      	bx	lr

0801b4ce <LL_RCC_SetLPUARTClockSource>:
{
 801b4ce:	b480      	push	{r7}
 801b4d0:	b083      	sub	sp, #12
 801b4d2:	af00      	add	r7, sp, #0
 801b4d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801b4d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b4de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801b4e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	4313      	orrs	r3, r2
 801b4ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b4ee:	bf00      	nop
 801b4f0:	370c      	adds	r7, #12
 801b4f2:	46bd      	mov	sp, r7
 801b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f8:	4770      	bx	lr

0801b4fa <LL_RCC_SetI2CClockSource>:
{
 801b4fa:	b480      	push	{r7}
 801b4fc:	b083      	sub	sp, #12
 801b4fe:	af00      	add	r7, sp, #0
 801b500:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 801b502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b506:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	091b      	lsrs	r3, r3, #4
 801b50e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801b512:	43db      	mvns	r3, r3
 801b514:	401a      	ands	r2, r3
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	011b      	lsls	r3, r3, #4
 801b51a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801b51e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b522:	4313      	orrs	r3, r2
 801b524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b528:	bf00      	nop
 801b52a:	370c      	adds	r7, #12
 801b52c:	46bd      	mov	sp, r7
 801b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b532:	4770      	bx	lr

0801b534 <LL_RCC_SetLPTIMClockSource>:
{
 801b534:	b480      	push	{r7}
 801b536:	b083      	sub	sp, #12
 801b538:	af00      	add	r7, sp, #0
 801b53a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801b53c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	0c1b      	lsrs	r3, r3, #16
 801b548:	041b      	lsls	r3, r3, #16
 801b54a:	43db      	mvns	r3, r3
 801b54c:	401a      	ands	r2, r3
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	041b      	lsls	r3, r3, #16
 801b552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b556:	4313      	orrs	r3, r2
 801b558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b55c:	bf00      	nop
 801b55e:	370c      	adds	r7, #12
 801b560:	46bd      	mov	sp, r7
 801b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b566:	4770      	bx	lr

0801b568 <LL_RCC_SetSAIClockSource>:
{
 801b568:	b480      	push	{r7}
 801b56a:	b083      	sub	sp, #12
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 801b570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b578:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b57c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	4313      	orrs	r3, r2
 801b584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b588:	bf00      	nop
 801b58a:	370c      	adds	r7, #12
 801b58c:	46bd      	mov	sp, r7
 801b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b592:	4770      	bx	lr

0801b594 <LL_RCC_SetRNGClockSource>:
{
 801b594:	b480      	push	{r7}
 801b596:	b083      	sub	sp, #12
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801b59c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b5a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801b5a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	4313      	orrs	r3, r2
 801b5b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b5b4:	bf00      	nop
 801b5b6:	370c      	adds	r7, #12
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5be:	4770      	bx	lr

0801b5c0 <LL_RCC_SetCLK48ClockSource>:
{
 801b5c0:	b480      	push	{r7}
 801b5c2:	b083      	sub	sp, #12
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 801b5c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b5d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801b5d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	4313      	orrs	r3, r2
 801b5dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b5e0:	bf00      	nop
 801b5e2:	370c      	adds	r7, #12
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ea:	4770      	bx	lr

0801b5ec <LL_RCC_SetUSBClockSource>:
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b082      	sub	sp, #8
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	f7ff ffe3 	bl	801b5c0 <LL_RCC_SetCLK48ClockSource>
}
 801b5fa:	bf00      	nop
 801b5fc:	3708      	adds	r7, #8
 801b5fe:	46bd      	mov	sp, r7
 801b600:	bd80      	pop	{r7, pc}

0801b602 <LL_RCC_SetADCClockSource>:
{
 801b602:	b480      	push	{r7}
 801b604:	b083      	sub	sp, #12
 801b606:	af00      	add	r7, sp, #0
 801b608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801b60a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801b616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	4313      	orrs	r3, r2
 801b61e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801b622:	bf00      	nop
 801b624:	370c      	adds	r7, #12
 801b626:	46bd      	mov	sp, r7
 801b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b62c:	4770      	bx	lr

0801b62e <LL_RCC_SetRTCClockSource>:
{
 801b62e:	b480      	push	{r7}
 801b630:	b083      	sub	sp, #12
 801b632:	af00      	add	r7, sp, #0
 801b634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 801b636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b63e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	4313      	orrs	r3, r2
 801b64a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801b64e:	bf00      	nop
 801b650:	370c      	adds	r7, #12
 801b652:	46bd      	mov	sp, r7
 801b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b658:	4770      	bx	lr

0801b65a <LL_RCC_GetRTCClockSource>:
{
 801b65a:	b480      	push	{r7}
 801b65c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801b65e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b666:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801b66a:	4618      	mov	r0, r3
 801b66c:	46bd      	mov	sp, r7
 801b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b672:	4770      	bx	lr

0801b674 <LL_RCC_ForceBackupDomainReset>:
{
 801b674:	b480      	push	{r7}
 801b676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801b678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801b68c:	bf00      	nop
 801b68e:	46bd      	mov	sp, r7
 801b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b694:	4770      	bx	lr

0801b696 <LL_RCC_ReleaseBackupDomainReset>:
{
 801b696:	b480      	push	{r7}
 801b698:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801b69a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b6a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b6a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b6aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801b6ae:	bf00      	nop
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b6:	4770      	bx	lr

0801b6b8 <LL_RCC_PLLSAI1_Enable>:
{
 801b6b8:	b480      	push	{r7}
 801b6ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801b6bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b6c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b6ca:	6013      	str	r3, [r2, #0]
}
 801b6cc:	bf00      	nop
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d4:	4770      	bx	lr

0801b6d6 <LL_RCC_PLLSAI1_Disable>:
{
 801b6d6:	b480      	push	{r7}
 801b6d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801b6da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b6e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801b6e8:	6013      	str	r3, [r2, #0]
}
 801b6ea:	bf00      	nop
 801b6ec:	46bd      	mov	sp, r7
 801b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f2:	4770      	bx	lr

0801b6f4 <LL_RCC_PLLSAI1_IsReady>:
{
 801b6f4:	b480      	push	{r7}
 801b6f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801b6f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b706:	d101      	bne.n	801b70c <LL_RCC_PLLSAI1_IsReady+0x18>
 801b708:	2301      	movs	r3, #1
 801b70a:	e000      	b.n	801b70e <LL_RCC_PLLSAI1_IsReady+0x1a>
 801b70c:	2300      	movs	r3, #0
}
 801b70e:	4618      	mov	r0, r3
 801b710:	46bd      	mov	sp, r7
 801b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b716:	4770      	bx	lr

0801b718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b718:	b580      	push	{r7, lr}
 801b71a:	b088      	sub	sp, #32
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 801b720:	2300      	movs	r3, #0
 801b722:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801b724:	2300      	movs	r3, #0
 801b726:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b730:	2b00      	cmp	r3, #0
 801b732:	d034      	beq.n	801b79e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b738:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801b73c:	d021      	beq.n	801b782 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801b73e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801b742:	d81b      	bhi.n	801b77c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801b744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b748:	d01d      	beq.n	801b786 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801b74a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b74e:	d815      	bhi.n	801b77c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801b750:	2b00      	cmp	r3, #0
 801b752:	d00b      	beq.n	801b76c <HAL_RCCEx_PeriphCLKConfig+0x54>
 801b754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b758:	d110      	bne.n	801b77c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801b75a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b75e:	68db      	ldr	r3, [r3, #12]
 801b760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b768:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801b76a:	e00d      	b.n	801b788 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	3304      	adds	r3, #4
 801b770:	4618      	mov	r0, r3
 801b772:	f000 f94d 	bl	801ba10 <RCCEx_PLLSAI1_ConfigNP>
 801b776:	4603      	mov	r3, r0
 801b778:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801b77a:	e005      	b.n	801b788 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801b77c:	2301      	movs	r3, #1
 801b77e:	77fb      	strb	r3, [r7, #31]
        break;
 801b780:	e002      	b.n	801b788 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801b782:	bf00      	nop
 801b784:	e000      	b.n	801b788 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 801b786:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b788:	7ffb      	ldrb	r3, [r7, #31]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d105      	bne.n	801b79a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b792:	4618      	mov	r0, r3
 801b794:	f7ff fee8 	bl	801b568 <LL_RCC_SetSAIClockSource>
 801b798:	e001      	b.n	801b79e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b79a:	7ffb      	ldrb	r3, [r7, #31]
 801b79c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d046      	beq.n	801b838 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801b7aa:	f7ff ff56 	bl	801b65a <LL_RCC_GetRTCClockSource>
 801b7ae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7b4:	69ba      	ldr	r2, [r7, #24]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d03c      	beq.n	801b834 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801b7ba:	f7fe fc59 	bl	801a070 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 801b7be:	69bb      	ldr	r3, [r7, #24]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d105      	bne.n	801b7d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	f7ff ff30 	bl	801b62e <LL_RCC_SetRTCClockSource>
 801b7ce:	e02e      	b.n	801b82e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 801b7d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7d8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801b7da:	f7ff ff4b 	bl	801b674 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801b7de:	f7ff ff5a 	bl	801b696 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 801b7e2:	697b      	ldr	r3, [r7, #20]
 801b7e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7ec:	4313      	orrs	r3, r2
 801b7ee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 801b7f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b7f4:	697b      	ldr	r3, [r7, #20]
 801b7f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801b7fa:	f7ff fde1 	bl	801b3c0 <LL_RCC_LSE_IsEnabled>
 801b7fe:	4603      	mov	r3, r0
 801b800:	2b01      	cmp	r3, #1
 801b802:	d114      	bne.n	801b82e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b804:	f7fc fba2 	bl	8017f4c <HAL_GetTick>
 801b808:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801b80a:	e00b      	b.n	801b824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b80c:	f7fc fb9e 	bl	8017f4c <HAL_GetTick>
 801b810:	4602      	mov	r2, r0
 801b812:	693b      	ldr	r3, [r7, #16]
 801b814:	1ad3      	subs	r3, r2, r3
 801b816:	f241 3288 	movw	r2, #5000	; 0x1388
 801b81a:	4293      	cmp	r3, r2
 801b81c:	d902      	bls.n	801b824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801b81e:	2303      	movs	r3, #3
 801b820:	77fb      	strb	r3, [r7, #31]
              break;
 801b822:	e004      	b.n	801b82e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 801b824:	f7ff fdde 	bl	801b3e4 <LL_RCC_LSE_IsReady>
 801b828:	4603      	mov	r3, r0
 801b82a:	2b01      	cmp	r3, #1
 801b82c:	d1ee      	bne.n	801b80c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801b82e:	7ffb      	ldrb	r3, [r7, #31]
 801b830:	77bb      	strb	r3, [r7, #30]
 801b832:	e001      	b.n	801b838 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b834:	7ffb      	ldrb	r3, [r7, #31]
 801b836:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	f003 0301 	and.w	r3, r3, #1
 801b840:	2b00      	cmp	r3, #0
 801b842:	d004      	beq.n	801b84e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	699b      	ldr	r3, [r3, #24]
 801b848:	4618      	mov	r0, r3
 801b84a:	f7ff fe2a 	bl	801b4a2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	f003 0302 	and.w	r3, r3, #2
 801b856:	2b00      	cmp	r3, #0
 801b858:	d004      	beq.n	801b864 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	69db      	ldr	r3, [r3, #28]
 801b85e:	4618      	mov	r0, r3
 801b860:	f7ff fe35 	bl	801b4ce <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	f003 0310 	and.w	r3, r3, #16
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d004      	beq.n	801b87a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b874:	4618      	mov	r0, r3
 801b876:	f7ff fe5d 	bl	801b534 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	f003 0320 	and.w	r3, r3, #32
 801b882:	2b00      	cmp	r3, #0
 801b884:	d004      	beq.n	801b890 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b88a:	4618      	mov	r0, r3
 801b88c:	f7ff fe52 	bl	801b534 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	f003 0304 	and.w	r3, r3, #4
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d004      	beq.n	801b8a6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	6a1b      	ldr	r3, [r3, #32]
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7ff fe2a 	bl	801b4fa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	f003 0308 	and.w	r3, r3, #8
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d004      	beq.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7ff fe1f 	bl	801b4fa <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d022      	beq.n	801b90e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f7ff fe8d 	bl	801b5ec <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b8da:	d107      	bne.n	801b8ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801b8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b8e0:	68db      	ldr	r3, [r3, #12]
 801b8e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b8e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b8ea:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801b8f4:	d10b      	bne.n	801b90e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	3304      	adds	r3, #4
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	f000 f8e3 	bl	801bac6 <RCCEx_PLLSAI1_ConfigNQ>
 801b900:	4603      	mov	r3, r0
 801b902:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801b904:	7ffb      	ldrb	r3, [r7, #31]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d001      	beq.n	801b90e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801b90a:	7ffb      	ldrb	r3, [r7, #31]
 801b90c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b916:	2b00      	cmp	r3, #0
 801b918:	d02b      	beq.n	801b972 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b922:	d008      	beq.n	801b936 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b92c:	d003      	beq.n	801b936 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b932:	2b00      	cmp	r3, #0
 801b934:	d105      	bne.n	801b942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b93a:	4618      	mov	r0, r3
 801b93c:	f7ff fe2a 	bl	801b594 <LL_RCC_SetRNGClockSource>
 801b940:	e00a      	b.n	801b958 <HAL_RCCEx_PeriphCLKConfig+0x240>
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b94a:	60fb      	str	r3, [r7, #12]
 801b94c:	2000      	movs	r0, #0
 801b94e:	f7ff fe21 	bl	801b594 <LL_RCC_SetRNGClockSource>
 801b952:	68f8      	ldr	r0, [r7, #12]
 801b954:	f7ff fe34 	bl	801b5c0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b95c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801b960:	d107      	bne.n	801b972 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801b962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b966:	68db      	ldr	r3, [r3, #12]
 801b968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b96c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b970:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d022      	beq.n	801b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b982:	4618      	mov	r0, r3
 801b984:	f7ff fe3d 	bl	801b602 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b990:	d107      	bne.n	801b9a2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801b992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b996:	68db      	ldr	r3, [r3, #12]
 801b998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801b99c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b9a0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b9a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b9aa:	d10b      	bne.n	801b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	3304      	adds	r3, #4
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	f000 f8e3 	bl	801bb7c <RCCEx_PLLSAI1_ConfigNR>
 801b9b6:	4603      	mov	r3, r0
 801b9b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801b9ba:	7ffb      	ldrb	r3, [r7, #31]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d001      	beq.n	801b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 801b9c0:	7ffb      	ldrb	r3, [r7, #31]
 801b9c2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d004      	beq.n	801b9da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	f7ff fd26 	bl	801b426 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d009      	beq.n	801b9fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f7ff fd45 	bl	801b47a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f7ff fd2c 	bl	801b452 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801b9fa:	7fbb      	ldrb	r3, [r7, #30]
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3720      	adds	r7, #32
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}

0801ba04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801ba08:	f7ff fcfe 	bl	801b408 <LL_RCC_MSI_EnablePLLMode>
}
 801ba0c:	bf00      	nop
 801ba0e:	bd80      	pop	{r7, pc}

0801ba10 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b084      	sub	sp, #16
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ba18:	2300      	movs	r3, #0
 801ba1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801ba1c:	f7ff fe5b 	bl	801b6d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801ba20:	f7fc fa94 	bl	8017f4c <HAL_GetTick>
 801ba24:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801ba26:	e009      	b.n	801ba3c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801ba28:	f7fc fa90 	bl	8017f4c <HAL_GetTick>
 801ba2c:	4602      	mov	r2, r0
 801ba2e:	68bb      	ldr	r3, [r7, #8]
 801ba30:	1ad3      	subs	r3, r2, r3
 801ba32:	2b02      	cmp	r3, #2
 801ba34:	d902      	bls.n	801ba3c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 801ba36:	2303      	movs	r3, #3
 801ba38:	73fb      	strb	r3, [r7, #15]
      break;
 801ba3a:	e004      	b.n	801ba46 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801ba3c:	f7ff fe5a 	bl	801b6f4 <LL_RCC_PLLSAI1_IsReady>
 801ba40:	4603      	mov	r3, r0
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d1f0      	bne.n	801ba28 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 801ba46:	7bfb      	ldrb	r3, [r7, #15]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d137      	bne.n	801babc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801ba4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ba50:	691b      	ldr	r3, [r3, #16]
 801ba52:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	021b      	lsls	r3, r3, #8
 801ba5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ba60:	4313      	orrs	r3, r2
 801ba62:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 801ba64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ba68:	691b      	ldr	r3, [r3, #16]
 801ba6a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	685b      	ldr	r3, [r3, #4]
 801ba72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801ba76:	4313      	orrs	r3, r2
 801ba78:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801ba7a:	f7ff fe1d 	bl	801b6b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ba7e:	f7fc fa65 	bl	8017f4c <HAL_GetTick>
 801ba82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801ba84:	e009      	b.n	801ba9a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801ba86:	f7fc fa61 	bl	8017f4c <HAL_GetTick>
 801ba8a:	4602      	mov	r2, r0
 801ba8c:	68bb      	ldr	r3, [r7, #8]
 801ba8e:	1ad3      	subs	r3, r2, r3
 801ba90:	2b02      	cmp	r3, #2
 801ba92:	d902      	bls.n	801ba9a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801ba94:	2303      	movs	r3, #3
 801ba96:	73fb      	strb	r3, [r7, #15]
        break;
 801ba98:	e004      	b.n	801baa4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801ba9a:	f7ff fe2b 	bl	801b6f4 <LL_RCC_PLLSAI1_IsReady>
 801ba9e:	4603      	mov	r3, r0
 801baa0:	2b01      	cmp	r3, #1
 801baa2:	d1f0      	bne.n	801ba86 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801baa4:	7bfb      	ldrb	r3, [r7, #15]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d108      	bne.n	801babc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801baaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801baae:	691a      	ldr	r2, [r3, #16]
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	691b      	ldr	r3, [r3, #16]
 801bab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bab8:	4313      	orrs	r3, r2
 801baba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801babc:	7bfb      	ldrb	r3, [r7, #15]
}
 801babe:	4618      	mov	r0, r3
 801bac0:	3710      	adds	r7, #16
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd80      	pop	{r7, pc}

0801bac6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801bac6:	b580      	push	{r7, lr}
 801bac8:	b084      	sub	sp, #16
 801baca:	af00      	add	r7, sp, #0
 801bacc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801bace:	2300      	movs	r3, #0
 801bad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801bad2:	f7ff fe00 	bl	801b6d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801bad6:	f7fc fa39 	bl	8017f4c <HAL_GetTick>
 801bada:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801badc:	e009      	b.n	801baf2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bade:	f7fc fa35 	bl	8017f4c <HAL_GetTick>
 801bae2:	4602      	mov	r2, r0
 801bae4:	68bb      	ldr	r3, [r7, #8]
 801bae6:	1ad3      	subs	r3, r2, r3
 801bae8:	2b02      	cmp	r3, #2
 801baea:	d902      	bls.n	801baf2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801baec:	2303      	movs	r3, #3
 801baee:	73fb      	strb	r3, [r7, #15]
      break;
 801baf0:	e004      	b.n	801bafc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801baf2:	f7ff fdff 	bl	801b6f4 <LL_RCC_PLLSAI1_IsReady>
 801baf6:	4603      	mov	r3, r0
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d1f0      	bne.n	801bade <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801bafc:	7bfb      	ldrb	r3, [r7, #15]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d137      	bne.n	801bb72 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801bb02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bb06:	691b      	ldr	r3, [r3, #16]
 801bb08:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	021b      	lsls	r3, r3, #8
 801bb12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bb16:	4313      	orrs	r3, r2
 801bb18:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801bb1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bb1e:	691b      	ldr	r3, [r3, #16]
 801bb20:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	689b      	ldr	r3, [r3, #8]
 801bb28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bb2c:	4313      	orrs	r3, r2
 801bb2e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801bb30:	f7ff fdc2 	bl	801b6b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bb34:	f7fc fa0a 	bl	8017f4c <HAL_GetTick>
 801bb38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bb3a:	e009      	b.n	801bb50 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bb3c:	f7fc fa06 	bl	8017f4c <HAL_GetTick>
 801bb40:	4602      	mov	r2, r0
 801bb42:	68bb      	ldr	r3, [r7, #8]
 801bb44:	1ad3      	subs	r3, r2, r3
 801bb46:	2b02      	cmp	r3, #2
 801bb48:	d902      	bls.n	801bb50 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801bb4a:	2303      	movs	r3, #3
 801bb4c:	73fb      	strb	r3, [r7, #15]
        break;
 801bb4e:	e004      	b.n	801bb5a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bb50:	f7ff fdd0 	bl	801b6f4 <LL_RCC_PLLSAI1_IsReady>
 801bb54:	4603      	mov	r3, r0
 801bb56:	2b01      	cmp	r3, #1
 801bb58:	d1f0      	bne.n	801bb3c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801bb5a:	7bfb      	ldrb	r3, [r7, #15]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d108      	bne.n	801bb72 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801bb60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bb64:	691a      	ldr	r2, [r3, #16]
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	691b      	ldr	r3, [r3, #16]
 801bb6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bb6e:	4313      	orrs	r3, r2
 801bb70:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801bb72:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb74:	4618      	mov	r0, r3
 801bb76:	3710      	adds	r7, #16
 801bb78:	46bd      	mov	sp, r7
 801bb7a:	bd80      	pop	{r7, pc}

0801bb7c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801bb7c:	b580      	push	{r7, lr}
 801bb7e:	b084      	sub	sp, #16
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801bb84:	2300      	movs	r3, #0
 801bb86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801bb88:	f7ff fda5 	bl	801b6d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801bb8c:	f7fc f9de 	bl	8017f4c <HAL_GetTick>
 801bb90:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bb92:	e009      	b.n	801bba8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bb94:	f7fc f9da 	bl	8017f4c <HAL_GetTick>
 801bb98:	4602      	mov	r2, r0
 801bb9a:	68bb      	ldr	r3, [r7, #8]
 801bb9c:	1ad3      	subs	r3, r2, r3
 801bb9e:	2b02      	cmp	r3, #2
 801bba0:	d902      	bls.n	801bba8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801bba2:	2303      	movs	r3, #3
 801bba4:	73fb      	strb	r3, [r7, #15]
      break;
 801bba6:	e004      	b.n	801bbb2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801bba8:	f7ff fda4 	bl	801b6f4 <LL_RCC_PLLSAI1_IsReady>
 801bbac:	4603      	mov	r3, r0
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d1f0      	bne.n	801bb94 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801bbb2:	7bfb      	ldrb	r3, [r7, #15]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d137      	bne.n	801bc28 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801bbb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bbbc:	691b      	ldr	r3, [r3, #16]
 801bbbe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	021b      	lsls	r3, r3, #8
 801bbc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bbcc:	4313      	orrs	r3, r2
 801bbce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 801bbd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bbd4:	691b      	ldr	r3, [r3, #16]
 801bbd6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bbe2:	4313      	orrs	r3, r2
 801bbe4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801bbe6:	f7ff fd67 	bl	801b6b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801bbea:	f7fc f9af 	bl	8017f4c <HAL_GetTick>
 801bbee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bbf0:	e009      	b.n	801bc06 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801bbf2:	f7fc f9ab 	bl	8017f4c <HAL_GetTick>
 801bbf6:	4602      	mov	r2, r0
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	1ad3      	subs	r3, r2, r3
 801bbfc:	2b02      	cmp	r3, #2
 801bbfe:	d902      	bls.n	801bc06 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 801bc00:	2303      	movs	r3, #3
 801bc02:	73fb      	strb	r3, [r7, #15]
        break;
 801bc04:	e004      	b.n	801bc10 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801bc06:	f7ff fd75 	bl	801b6f4 <LL_RCC_PLLSAI1_IsReady>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	2b01      	cmp	r3, #1
 801bc0e:	d1f0      	bne.n	801bbf2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 801bc10:	7bfb      	ldrb	r3, [r7, #15]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d108      	bne.n	801bc28 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801bc16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bc1a:	691a      	ldr	r2, [r3, #16]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	691b      	ldr	r3, [r3, #16]
 801bc20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801bc24:	4313      	orrs	r3, r2
 801bc26:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801bc28:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	3710      	adds	r7, #16
 801bc2e:	46bd      	mov	sp, r7
 801bc30:	bd80      	pop	{r7, pc}

0801bc32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801bc32:	b580      	push	{r7, lr}
 801bc34:	b082      	sub	sp, #8
 801bc36:	af00      	add	r7, sp, #0
 801bc38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d101      	bne.n	801bc44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801bc40:	2301      	movs	r3, #1
 801bc42:	e049      	b.n	801bcd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bc4a:	b2db      	uxtb	r3, r3
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d106      	bne.n	801bc5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	2200      	movs	r2, #0
 801bc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801bc58:	6878      	ldr	r0, [r7, #4]
 801bc5a:	f7e7 fef1 	bl	8003a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	2202      	movs	r2, #2
 801bc62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	681a      	ldr	r2, [r3, #0]
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	3304      	adds	r3, #4
 801bc6e:	4619      	mov	r1, r3
 801bc70:	4610      	mov	r0, r2
 801bc72:	f000 f835 	bl	801bce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	2201      	movs	r2, #1
 801bc7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	2201      	movs	r2, #1
 801bc82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	2201      	movs	r2, #1
 801bc8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	2201      	movs	r2, #1
 801bc92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	2201      	movs	r2, #1
 801bc9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	2201      	movs	r2, #1
 801bca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	2201      	movs	r2, #1
 801bcaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	2201      	movs	r2, #1
 801bcb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	2201      	movs	r2, #1
 801bcba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	2201      	movs	r2, #1
 801bcc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	2201      	movs	r2, #1
 801bcca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	2201      	movs	r2, #1
 801bcd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801bcd6:	2300      	movs	r3, #0
}
 801bcd8:	4618      	mov	r0, r3
 801bcda:	3708      	adds	r7, #8
 801bcdc:	46bd      	mov	sp, r7
 801bcde:	bd80      	pop	{r7, pc}

0801bce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801bce0:	b480      	push	{r7}
 801bce2:	b085      	sub	sp, #20
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	6078      	str	r0, [r7, #4]
 801bce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	4a2a      	ldr	r2, [pc, #168]	; (801bd9c <TIM_Base_SetConfig+0xbc>)
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	d003      	beq.n	801bd00 <TIM_Base_SetConfig+0x20>
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bcfe:	d108      	bne.n	801bd12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801bd08:	683b      	ldr	r3, [r7, #0]
 801bd0a:	685b      	ldr	r3, [r3, #4]
 801bd0c:	68fa      	ldr	r2, [r7, #12]
 801bd0e:	4313      	orrs	r3, r2
 801bd10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	4a21      	ldr	r2, [pc, #132]	; (801bd9c <TIM_Base_SetConfig+0xbc>)
 801bd16:	4293      	cmp	r3, r2
 801bd18:	d00b      	beq.n	801bd32 <TIM_Base_SetConfig+0x52>
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bd20:	d007      	beq.n	801bd32 <TIM_Base_SetConfig+0x52>
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	4a1e      	ldr	r2, [pc, #120]	; (801bda0 <TIM_Base_SetConfig+0xc0>)
 801bd26:	4293      	cmp	r3, r2
 801bd28:	d003      	beq.n	801bd32 <TIM_Base_SetConfig+0x52>
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	4a1d      	ldr	r2, [pc, #116]	; (801bda4 <TIM_Base_SetConfig+0xc4>)
 801bd2e:	4293      	cmp	r3, r2
 801bd30:	d108      	bne.n	801bd44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bd38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801bd3a:	683b      	ldr	r3, [r7, #0]
 801bd3c:	68db      	ldr	r3, [r3, #12]
 801bd3e:	68fa      	ldr	r2, [r7, #12]
 801bd40:	4313      	orrs	r3, r2
 801bd42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801bd4a:	683b      	ldr	r3, [r7, #0]
 801bd4c:	695b      	ldr	r3, [r3, #20]
 801bd4e:	4313      	orrs	r3, r2
 801bd50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	68fa      	ldr	r2, [r7, #12]
 801bd56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	689a      	ldr	r2, [r3, #8]
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	681a      	ldr	r2, [r3, #0]
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	4a0c      	ldr	r2, [pc, #48]	; (801bd9c <TIM_Base_SetConfig+0xbc>)
 801bd6c:	4293      	cmp	r3, r2
 801bd6e:	d007      	beq.n	801bd80 <TIM_Base_SetConfig+0xa0>
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	4a0b      	ldr	r2, [pc, #44]	; (801bda0 <TIM_Base_SetConfig+0xc0>)
 801bd74:	4293      	cmp	r3, r2
 801bd76:	d003      	beq.n	801bd80 <TIM_Base_SetConfig+0xa0>
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	4a0a      	ldr	r2, [pc, #40]	; (801bda4 <TIM_Base_SetConfig+0xc4>)
 801bd7c:	4293      	cmp	r3, r2
 801bd7e:	d103      	bne.n	801bd88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801bd80:	683b      	ldr	r3, [r7, #0]
 801bd82:	691a      	ldr	r2, [r3, #16]
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	2201      	movs	r2, #1
 801bd8c:	615a      	str	r2, [r3, #20]
}
 801bd8e:	bf00      	nop
 801bd90:	3714      	adds	r7, #20
 801bd92:	46bd      	mov	sp, r7
 801bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd98:	4770      	bx	lr
 801bd9a:	bf00      	nop
 801bd9c:	40012c00 	.word	0x40012c00
 801bda0:	40014400 	.word	0x40014400
 801bda4:	40014800 	.word	0x40014800

0801bda8 <LL_RCC_GetUSARTClockSource>:
{
 801bda8:	b480      	push	{r7}
 801bdaa:	b083      	sub	sp, #12
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801bdb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bdb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	4013      	ands	r3, r2
}
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	370c      	adds	r7, #12
 801bdc0:	46bd      	mov	sp, r7
 801bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc6:	4770      	bx	lr

0801bdc8 <LL_RCC_GetLPUARTClockSource>:
{
 801bdc8:	b480      	push	{r7}
 801bdca:	b083      	sub	sp, #12
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801bdd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801bdd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	4013      	ands	r3, r2
}
 801bddc:	4618      	mov	r0, r3
 801bdde:	370c      	adds	r7, #12
 801bde0:	46bd      	mov	sp, r7
 801bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde6:	4770      	bx	lr

0801bde8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b082      	sub	sp, #8
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d101      	bne.n	801bdfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801bdf6:	2301      	movs	r3, #1
 801bdf8:	e042      	b.n	801be80 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be00:	2b00      	cmp	r3, #0
 801be02:	d106      	bne.n	801be12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	2200      	movs	r2, #0
 801be08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801be0c:	6878      	ldr	r0, [r7, #4]
 801be0e:	f7e7 feb9 	bl	8003b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	2224      	movs	r2, #36	; 0x24
 801be16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	681a      	ldr	r2, [r3, #0]
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	f022 0201 	bic.w	r2, r2, #1
 801be28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801be2a:	6878      	ldr	r0, [r7, #4]
 801be2c:	f000 fc54 	bl	801c6d8 <UART_SetConfig>
 801be30:	4603      	mov	r3, r0
 801be32:	2b01      	cmp	r3, #1
 801be34:	d101      	bne.n	801be3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801be36:	2301      	movs	r3, #1
 801be38:	e022      	b.n	801be80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d002      	beq.n	801be48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801be42:	6878      	ldr	r0, [r7, #4]
 801be44:	f000 fe70 	bl	801cb28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	685a      	ldr	r2, [r3, #4]
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801be56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	689a      	ldr	r2, [r3, #8]
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801be66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	681a      	ldr	r2, [r3, #0]
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	f042 0201 	orr.w	r2, r2, #1
 801be76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801be78:	6878      	ldr	r0, [r7, #4]
 801be7a:	f000 fef7 	bl	801cc6c <UART_CheckIdleState>
 801be7e:	4603      	mov	r3, r0
}
 801be80:	4618      	mov	r0, r3
 801be82:	3708      	adds	r7, #8
 801be84:	46bd      	mov	sp, r7
 801be86:	bd80      	pop	{r7, pc}

0801be88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b08a      	sub	sp, #40	; 0x28
 801be8c:	af02      	add	r7, sp, #8
 801be8e:	60f8      	str	r0, [r7, #12]
 801be90:	60b9      	str	r1, [r7, #8]
 801be92:	603b      	str	r3, [r7, #0]
 801be94:	4613      	mov	r3, r2
 801be96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be9e:	2b20      	cmp	r3, #32
 801bea0:	d17b      	bne.n	801bf9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801bea2:	68bb      	ldr	r3, [r7, #8]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d002      	beq.n	801beae <HAL_UART_Transmit+0x26>
 801bea8:	88fb      	ldrh	r3, [r7, #6]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d101      	bne.n	801beb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801beae:	2301      	movs	r3, #1
 801beb0:	e074      	b.n	801bf9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	2200      	movs	r2, #0
 801beb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	2221      	movs	r2, #33	; 0x21
 801bebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801bec2:	f7fc f843 	bl	8017f4c <HAL_GetTick>
 801bec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	88fa      	ldrh	r2, [r7, #6]
 801becc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	88fa      	ldrh	r2, [r7, #6]
 801bed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	689b      	ldr	r3, [r3, #8]
 801bedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bee0:	d108      	bne.n	801bef4 <HAL_UART_Transmit+0x6c>
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	691b      	ldr	r3, [r3, #16]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d104      	bne.n	801bef4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801beea:	2300      	movs	r3, #0
 801beec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801beee:	68bb      	ldr	r3, [r7, #8]
 801bef0:	61bb      	str	r3, [r7, #24]
 801bef2:	e003      	b.n	801befc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801bef4:	68bb      	ldr	r3, [r7, #8]
 801bef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801bef8:	2300      	movs	r3, #0
 801befa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801befc:	e030      	b.n	801bf60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	9300      	str	r3, [sp, #0]
 801bf02:	697b      	ldr	r3, [r7, #20]
 801bf04:	2200      	movs	r2, #0
 801bf06:	2180      	movs	r1, #128	; 0x80
 801bf08:	68f8      	ldr	r0, [r7, #12]
 801bf0a:	f000 ff59 	bl	801cdc0 <UART_WaitOnFlagUntilTimeout>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d005      	beq.n	801bf20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	2220      	movs	r2, #32
 801bf18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801bf1c:	2303      	movs	r3, #3
 801bf1e:	e03d      	b.n	801bf9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801bf20:	69fb      	ldr	r3, [r7, #28]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d10b      	bne.n	801bf3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bf26:	69bb      	ldr	r3, [r7, #24]
 801bf28:	881b      	ldrh	r3, [r3, #0]
 801bf2a:	461a      	mov	r2, r3
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bf34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801bf36:	69bb      	ldr	r3, [r7, #24]
 801bf38:	3302      	adds	r3, #2
 801bf3a:	61bb      	str	r3, [r7, #24]
 801bf3c:	e007      	b.n	801bf4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801bf3e:	69fb      	ldr	r3, [r7, #28]
 801bf40:	781a      	ldrb	r2, [r3, #0]
 801bf42:	68fb      	ldr	r3, [r7, #12]
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801bf48:	69fb      	ldr	r3, [r7, #28]
 801bf4a:	3301      	adds	r3, #1
 801bf4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801bf54:	b29b      	uxth	r3, r3
 801bf56:	3b01      	subs	r3, #1
 801bf58:	b29a      	uxth	r2, r3
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801bf66:	b29b      	uxth	r3, r3
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d1c8      	bne.n	801befe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bf6c:	683b      	ldr	r3, [r7, #0]
 801bf6e:	9300      	str	r3, [sp, #0]
 801bf70:	697b      	ldr	r3, [r7, #20]
 801bf72:	2200      	movs	r2, #0
 801bf74:	2140      	movs	r1, #64	; 0x40
 801bf76:	68f8      	ldr	r0, [r7, #12]
 801bf78:	f000 ff22 	bl	801cdc0 <UART_WaitOnFlagUntilTimeout>
 801bf7c:	4603      	mov	r3, r0
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d005      	beq.n	801bf8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	2220      	movs	r2, #32
 801bf86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801bf8a:	2303      	movs	r3, #3
 801bf8c:	e006      	b.n	801bf9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	2220      	movs	r2, #32
 801bf92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801bf96:	2300      	movs	r3, #0
 801bf98:	e000      	b.n	801bf9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801bf9a:	2302      	movs	r3, #2
  }
}
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	3720      	adds	r7, #32
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}

0801bfa4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b08a      	sub	sp, #40	; 0x28
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	60f8      	str	r0, [r7, #12]
 801bfac:	60b9      	str	r1, [r7, #8]
 801bfae:	4613      	mov	r3, r2
 801bfb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bfb8:	2b20      	cmp	r3, #32
 801bfba:	d137      	bne.n	801c02c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801bfbc:	68bb      	ldr	r3, [r7, #8]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d002      	beq.n	801bfc8 <HAL_UART_Receive_DMA+0x24>
 801bfc2:	88fb      	ldrh	r3, [r7, #6]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d101      	bne.n	801bfcc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801bfc8:	2301      	movs	r3, #1
 801bfca:	e030      	b.n	801c02e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	2200      	movs	r2, #0
 801bfd0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	4a18      	ldr	r2, [pc, #96]	; (801c038 <HAL_UART_Receive_DMA+0x94>)
 801bfd8:	4293      	cmp	r3, r2
 801bfda:	d01f      	beq.n	801c01c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801bfdc:	68fb      	ldr	r3, [r7, #12]
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	685b      	ldr	r3, [r3, #4]
 801bfe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d018      	beq.n	801c01c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bff0:	697b      	ldr	r3, [r7, #20]
 801bff2:	e853 3f00 	ldrex	r3, [r3]
 801bff6:	613b      	str	r3, [r7, #16]
   return(result);
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801bffe:	627b      	str	r3, [r7, #36]	; 0x24
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	461a      	mov	r2, r3
 801c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c008:	623b      	str	r3, [r7, #32]
 801c00a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c00c:	69f9      	ldr	r1, [r7, #28]
 801c00e:	6a3a      	ldr	r2, [r7, #32]
 801c010:	e841 2300 	strex	r3, r2, [r1]
 801c014:	61bb      	str	r3, [r7, #24]
   return(result);
 801c016:	69bb      	ldr	r3, [r7, #24]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d1e6      	bne.n	801bfea <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801c01c:	88fb      	ldrh	r3, [r7, #6]
 801c01e:	461a      	mov	r2, r3
 801c020:	68b9      	ldr	r1, [r7, #8]
 801c022:	68f8      	ldr	r0, [r7, #12]
 801c024:	f000 ff34 	bl	801ce90 <UART_Start_Receive_DMA>
 801c028:	4603      	mov	r3, r0
 801c02a:	e000      	b.n	801c02e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c02c:	2302      	movs	r3, #2
  }
}
 801c02e:	4618      	mov	r0, r3
 801c030:	3728      	adds	r7, #40	; 0x28
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}
 801c036:	bf00      	nop
 801c038:	40008000 	.word	0x40008000

0801c03c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b0ba      	sub	sp, #232	; 0xe8
 801c040:	af00      	add	r7, sp, #0
 801c042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	69db      	ldr	r3, [r3, #28]
 801c04a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	689b      	ldr	r3, [r3, #8]
 801c05e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801c062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801c066:	f640 030f 	movw	r3, #2063	; 0x80f
 801c06a:	4013      	ands	r3, r2
 801c06c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801c070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c074:	2b00      	cmp	r3, #0
 801c076:	d11b      	bne.n	801c0b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c07c:	f003 0320 	and.w	r3, r3, #32
 801c080:	2b00      	cmp	r3, #0
 801c082:	d015      	beq.n	801c0b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c088:	f003 0320 	and.w	r3, r3, #32
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d105      	bne.n	801c09c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d009      	beq.n	801c0b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	f000 82e3 	beq.w	801c66c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c0aa:	6878      	ldr	r0, [r7, #4]
 801c0ac:	4798      	blx	r3
      }
      return;
 801c0ae:	e2dd      	b.n	801c66c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801c0b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	f000 8123 	beq.w	801c300 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801c0ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c0be:	4b8d      	ldr	r3, [pc, #564]	; (801c2f4 <HAL_UART_IRQHandler+0x2b8>)
 801c0c0:	4013      	ands	r3, r2
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d106      	bne.n	801c0d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801c0c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801c0ca:	4b8b      	ldr	r3, [pc, #556]	; (801c2f8 <HAL_UART_IRQHandler+0x2bc>)
 801c0cc:	4013      	ands	r3, r2
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	f000 8116 	beq.w	801c300 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801c0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c0d8:	f003 0301 	and.w	r3, r3, #1
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d011      	beq.n	801c104 <HAL_UART_IRQHandler+0xc8>
 801c0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d00b      	beq.n	801c104 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	2201      	movs	r2, #1
 801c0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c0fa:	f043 0201 	orr.w	r2, r3, #1
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c108:	f003 0302 	and.w	r3, r3, #2
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d011      	beq.n	801c134 <HAL_UART_IRQHandler+0xf8>
 801c110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c114:	f003 0301 	and.w	r3, r3, #1
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d00b      	beq.n	801c134 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	2202      	movs	r2, #2
 801c122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c12a:	f043 0204 	orr.w	r2, r3, #4
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c138:	f003 0304 	and.w	r3, r3, #4
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d011      	beq.n	801c164 <HAL_UART_IRQHandler+0x128>
 801c140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c144:	f003 0301 	and.w	r3, r3, #1
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d00b      	beq.n	801c164 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	2204      	movs	r2, #4
 801c152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c15a:	f043 0202 	orr.w	r2, r3, #2
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801c164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c168:	f003 0308 	and.w	r3, r3, #8
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d017      	beq.n	801c1a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c174:	f003 0320 	and.w	r3, r3, #32
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d105      	bne.n	801c188 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801c17c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c180:	4b5c      	ldr	r3, [pc, #368]	; (801c2f4 <HAL_UART_IRQHandler+0x2b8>)
 801c182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c184:	2b00      	cmp	r3, #0
 801c186:	d00b      	beq.n	801c1a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	2208      	movs	r2, #8
 801c18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c196:	f043 0208 	orr.w	r2, r3, #8
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801c1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d012      	beq.n	801c1d2 <HAL_UART_IRQHandler+0x196>
 801c1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c1b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d00c      	beq.n	801c1d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c1c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c1c8:	f043 0220 	orr.w	r2, r3, #32
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	f000 8249 	beq.w	801c670 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1e2:	f003 0320 	and.w	r3, r3, #32
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d013      	beq.n	801c212 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c1ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c1ee:	f003 0320 	and.w	r3, r3, #32
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d105      	bne.n	801c202 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c1f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c1fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d007      	beq.n	801c212 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c206:	2b00      	cmp	r3, #0
 801c208:	d003      	beq.n	801c212 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c20e:	6878      	ldr	r0, [r7, #4]
 801c210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	689b      	ldr	r3, [r3, #8]
 801c222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c226:	2b40      	cmp	r3, #64	; 0x40
 801c228:	d005      	beq.n	801c236 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801c22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c22e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c232:	2b00      	cmp	r3, #0
 801c234:	d054      	beq.n	801c2e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c236:	6878      	ldr	r0, [r7, #4]
 801c238:	f000 ff11 	bl	801d05e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	689b      	ldr	r3, [r3, #8]
 801c242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c246:	2b40      	cmp	r3, #64	; 0x40
 801c248:	d146      	bne.n	801c2d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	3308      	adds	r3, #8
 801c250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c258:	e853 3f00 	ldrex	r3, [r3]
 801c25c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801c260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	3308      	adds	r3, #8
 801c272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801c27a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c27e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c286:	e841 2300 	strex	r3, r2, [r1]
 801c28a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c28e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c292:	2b00      	cmp	r3, #0
 801c294:	d1d9      	bne.n	801c24a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d017      	beq.n	801c2d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c2a6:	4a15      	ldr	r2, [pc, #84]	; (801c2fc <HAL_UART_IRQHandler+0x2c0>)
 801c2a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c2b0:	4618      	mov	r0, r3
 801c2b2:	f7fc f919 	bl	80184e8 <HAL_DMA_Abort_IT>
 801c2b6:	4603      	mov	r3, r0
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d019      	beq.n	801c2f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2c4:	687a      	ldr	r2, [r7, #4]
 801c2c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801c2ca:	4610      	mov	r0, r2
 801c2cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2ce:	e00f      	b.n	801c2f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c2d0:	6878      	ldr	r0, [r7, #4]
 801c2d2:	f000 f9eb 	bl	801c6ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2d6:	e00b      	b.n	801c2f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	f000 f9e7 	bl	801c6ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2de:	e007      	b.n	801c2f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c2e0:	6878      	ldr	r0, [r7, #4]
 801c2e2:	f000 f9e3 	bl	801c6ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801c2ee:	e1bf      	b.n	801c670 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c2f0:	bf00      	nop
    return;
 801c2f2:	e1bd      	b.n	801c670 <HAL_UART_IRQHandler+0x634>
 801c2f4:	10000001 	.word	0x10000001
 801c2f8:	04000120 	.word	0x04000120
 801c2fc:	0801d315 	.word	0x0801d315

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c304:	2b01      	cmp	r3, #1
 801c306:	f040 8153 	bne.w	801c5b0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801c30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c30e:	f003 0310 	and.w	r3, r3, #16
 801c312:	2b00      	cmp	r3, #0
 801c314:	f000 814c 	beq.w	801c5b0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801c318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c31c:	f003 0310 	and.w	r3, r3, #16
 801c320:	2b00      	cmp	r3, #0
 801c322:	f000 8145 	beq.w	801c5b0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	2210      	movs	r2, #16
 801c32c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	689b      	ldr	r3, [r3, #8]
 801c334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c338:	2b40      	cmp	r3, #64	; 0x40
 801c33a:	f040 80bb 	bne.w	801c4b4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	685b      	ldr	r3, [r3, #4]
 801c348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c34c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c350:	2b00      	cmp	r3, #0
 801c352:	f000 818f 	beq.w	801c674 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c35c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c360:	429a      	cmp	r2, r3
 801c362:	f080 8187 	bcs.w	801c674 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c36c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	681b      	ldr	r3, [r3, #0]
 801c37a:	f003 0320 	and.w	r3, r3, #32
 801c37e:	2b00      	cmp	r3, #0
 801c380:	f040 8087 	bne.w	801c492 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c38c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c390:	e853 3f00 	ldrex	r3, [r3]
 801c394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c39c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c3a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	461a      	mov	r2, r3
 801c3aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801c3ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c3b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c3ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c3be:	e841 2300 	strex	r3, r2, [r1]
 801c3c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c3c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d1da      	bne.n	801c384 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	3308      	adds	r3, #8
 801c3d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c3d8:	e853 3f00 	ldrex	r3, [r3]
 801c3dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c3de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c3e0:	f023 0301 	bic.w	r3, r3, #1
 801c3e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	3308      	adds	r3, #8
 801c3ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c3f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801c3f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c3fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c3fe:	e841 2300 	strex	r3, r2, [r1]
 801c402:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c406:	2b00      	cmp	r3, #0
 801c408:	d1e1      	bne.n	801c3ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	3308      	adds	r3, #8
 801c410:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c414:	e853 3f00 	ldrex	r3, [r3]
 801c418:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c41a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c41c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	3308      	adds	r3, #8
 801c42a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c42e:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c430:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c432:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c436:	e841 2300 	strex	r3, r2, [r1]
 801c43a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d1e3      	bne.n	801c40a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	2220      	movs	r2, #32
 801c446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2200      	movs	r2, #0
 801c44e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c458:	e853 3f00 	ldrex	r3, [r3]
 801c45c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c460:	f023 0310 	bic.w	r3, r3, #16
 801c464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	461a      	mov	r2, r3
 801c46e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801c472:	65bb      	str	r3, [r7, #88]	; 0x58
 801c474:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c476:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c47a:	e841 2300 	strex	r3, r2, [r1]
 801c47e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c482:	2b00      	cmp	r3, #0
 801c484:	d1e4      	bne.n	801c450 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c48c:	4618      	mov	r0, r3
 801c48e:	f7fb ffcc 	bl	801842a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	2202      	movs	r2, #2
 801c496:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c4a4:	b29b      	uxth	r3, r3
 801c4a6:	1ad3      	subs	r3, r2, r3
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	4619      	mov	r1, r3
 801c4ac:	6878      	ldr	r0, [r7, #4]
 801c4ae:	f000 f907 	bl	801c6c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c4b2:	e0df      	b.n	801c674 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c4c0:	b29b      	uxth	r3, r3
 801c4c2:	1ad3      	subs	r3, r2, r3
 801c4c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c4ce:	b29b      	uxth	r3, r3
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	f000 80d1 	beq.w	801c678 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801c4d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	f000 80cc 	beq.w	801c678 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4e8:	e853 3f00 	ldrex	r3, [r3]
 801c4ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c4f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	461a      	mov	r2, r3
 801c4fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c502:	647b      	str	r3, [r7, #68]	; 0x44
 801c504:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c50a:	e841 2300 	strex	r3, r2, [r1]
 801c50e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c512:	2b00      	cmp	r3, #0
 801c514:	d1e4      	bne.n	801c4e0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	3308      	adds	r3, #8
 801c51c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c520:	e853 3f00 	ldrex	r3, [r3]
 801c524:	623b      	str	r3, [r7, #32]
   return(result);
 801c526:	6a3b      	ldr	r3, [r7, #32]
 801c528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c52c:	f023 0301 	bic.w	r3, r3, #1
 801c530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	3308      	adds	r3, #8
 801c53a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c53e:	633a      	str	r2, [r7, #48]	; 0x30
 801c540:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c546:	e841 2300 	strex	r3, r2, [r1]
 801c54a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d1e1      	bne.n	801c516 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	2220      	movs	r2, #32
 801c556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	2200      	movs	r2, #0
 801c55e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	2200      	movs	r2, #0
 801c564:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c56c:	693b      	ldr	r3, [r7, #16]
 801c56e:	e853 3f00 	ldrex	r3, [r3]
 801c572:	60fb      	str	r3, [r7, #12]
   return(result);
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	f023 0310 	bic.w	r3, r3, #16
 801c57a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	461a      	mov	r2, r3
 801c584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c588:	61fb      	str	r3, [r7, #28]
 801c58a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c58c:	69b9      	ldr	r1, [r7, #24]
 801c58e:	69fa      	ldr	r2, [r7, #28]
 801c590:	e841 2300 	strex	r3, r2, [r1]
 801c594:	617b      	str	r3, [r7, #20]
   return(result);
 801c596:	697b      	ldr	r3, [r7, #20]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d1e4      	bne.n	801c566 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	2202      	movs	r2, #2
 801c5a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c5a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c5a6:	4619      	mov	r1, r3
 801c5a8:	6878      	ldr	r0, [r7, #4]
 801c5aa:	f000 f889 	bl	801c6c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c5ae:	e063      	b.n	801c678 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801c5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c5b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d00e      	beq.n	801c5da <HAL_UART_IRQHandler+0x59e>
 801c5bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c5c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d008      	beq.n	801c5da <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801c5d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801c5d2:	6878      	ldr	r0, [r7, #4]
 801c5d4:	f000 fedf 	bl	801d396 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c5d8:	e051      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801c5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d014      	beq.n	801c610 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801c5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d105      	bne.n	801c5fe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801c5f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c5f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d008      	beq.n	801c610 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c602:	2b00      	cmp	r3, #0
 801c604:	d03a      	beq.n	801c67c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c60a:	6878      	ldr	r0, [r7, #4]
 801c60c:	4798      	blx	r3
    }
    return;
 801c60e:	e035      	b.n	801c67c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801c610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d009      	beq.n	801c630 <HAL_UART_IRQHandler+0x5f4>
 801c61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c624:	2b00      	cmp	r3, #0
 801c626:	d003      	beq.n	801c630 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801c628:	6878      	ldr	r0, [r7, #4]
 801c62a:	f000 fe89 	bl	801d340 <UART_EndTransmit_IT>
    return;
 801c62e:	e026      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801c630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d009      	beq.n	801c650 <HAL_UART_IRQHandler+0x614>
 801c63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c640:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801c644:	2b00      	cmp	r3, #0
 801c646:	d003      	beq.n	801c650 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801c648:	6878      	ldr	r0, [r7, #4]
 801c64a:	f000 feb8 	bl	801d3be <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c64e:	e016      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801c650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d010      	beq.n	801c67e <HAL_UART_IRQHandler+0x642>
 801c65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c660:	2b00      	cmp	r3, #0
 801c662:	da0c      	bge.n	801c67e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801c664:	6878      	ldr	r0, [r7, #4]
 801c666:	f000 fea0 	bl	801d3aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c66a:	e008      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
      return;
 801c66c:	bf00      	nop
 801c66e:	e006      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
    return;
 801c670:	bf00      	nop
 801c672:	e004      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
      return;
 801c674:	bf00      	nop
 801c676:	e002      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
      return;
 801c678:	bf00      	nop
 801c67a:	e000      	b.n	801c67e <HAL_UART_IRQHandler+0x642>
    return;
 801c67c:	bf00      	nop
  }
}
 801c67e:	37e8      	adds	r7, #232	; 0xe8
 801c680:	46bd      	mov	sp, r7
 801c682:	bd80      	pop	{r7, pc}

0801c684 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c684:	b480      	push	{r7}
 801c686:	b083      	sub	sp, #12
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801c68c:	bf00      	nop
 801c68e:	370c      	adds	r7, #12
 801c690:	46bd      	mov	sp, r7
 801c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c696:	4770      	bx	lr

0801c698 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c698:	b480      	push	{r7}
 801c69a:	b083      	sub	sp, #12
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801c6a0:	bf00      	nop
 801c6a2:	370c      	adds	r7, #12
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6aa:	4770      	bx	lr

0801c6ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c6ac:	b480      	push	{r7}
 801c6ae:	b083      	sub	sp, #12
 801c6b0:	af00      	add	r7, sp, #0
 801c6b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801c6b4:	bf00      	nop
 801c6b6:	370c      	adds	r7, #12
 801c6b8:	46bd      	mov	sp, r7
 801c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6be:	4770      	bx	lr

0801c6c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801c6c0:	b480      	push	{r7}
 801c6c2:	b083      	sub	sp, #12
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6078      	str	r0, [r7, #4]
 801c6c8:	460b      	mov	r3, r1
 801c6ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801c6cc:	bf00      	nop
 801c6ce:	370c      	adds	r7, #12
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d6:	4770      	bx	lr

0801c6d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c6d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c6dc:	b08c      	sub	sp, #48	; 0x30
 801c6de:	af00      	add	r7, sp, #0
 801c6e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801c6e8:	697b      	ldr	r3, [r7, #20]
 801c6ea:	689a      	ldr	r2, [r3, #8]
 801c6ec:	697b      	ldr	r3, [r7, #20]
 801c6ee:	691b      	ldr	r3, [r3, #16]
 801c6f0:	431a      	orrs	r2, r3
 801c6f2:	697b      	ldr	r3, [r7, #20]
 801c6f4:	695b      	ldr	r3, [r3, #20]
 801c6f6:	431a      	orrs	r2, r3
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	69db      	ldr	r3, [r3, #28]
 801c6fc:	4313      	orrs	r3, r2
 801c6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801c700:	697b      	ldr	r3, [r7, #20]
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	681a      	ldr	r2, [r3, #0]
 801c706:	4baf      	ldr	r3, [pc, #700]	; (801c9c4 <UART_SetConfig+0x2ec>)
 801c708:	4013      	ands	r3, r2
 801c70a:	697a      	ldr	r2, [r7, #20]
 801c70c:	6812      	ldr	r2, [r2, #0]
 801c70e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c710:	430b      	orrs	r3, r1
 801c712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c714:	697b      	ldr	r3, [r7, #20]
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	685b      	ldr	r3, [r3, #4]
 801c71a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801c71e:	697b      	ldr	r3, [r7, #20]
 801c720:	68da      	ldr	r2, [r3, #12]
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	430a      	orrs	r2, r1
 801c728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801c72a:	697b      	ldr	r3, [r7, #20]
 801c72c:	699b      	ldr	r3, [r3, #24]
 801c72e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801c730:	697b      	ldr	r3, [r7, #20]
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	4aa4      	ldr	r2, [pc, #656]	; (801c9c8 <UART_SetConfig+0x2f0>)
 801c736:	4293      	cmp	r3, r2
 801c738:	d004      	beq.n	801c744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801c73a:	697b      	ldr	r3, [r7, #20]
 801c73c:	6a1b      	ldr	r3, [r3, #32]
 801c73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c740:	4313      	orrs	r3, r2
 801c742:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801c744:	697b      	ldr	r3, [r7, #20]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	689b      	ldr	r3, [r3, #8]
 801c74a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801c74e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801c752:	697a      	ldr	r2, [r7, #20]
 801c754:	6812      	ldr	r2, [r2, #0]
 801c756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c758:	430b      	orrs	r3, r1
 801c75a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801c75c:	697b      	ldr	r3, [r7, #20]
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c762:	f023 010f 	bic.w	r1, r3, #15
 801c766:	697b      	ldr	r3, [r7, #20]
 801c768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c76a:	697b      	ldr	r3, [r7, #20]
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	430a      	orrs	r2, r1
 801c770:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c772:	697b      	ldr	r3, [r7, #20]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	4a95      	ldr	r2, [pc, #596]	; (801c9cc <UART_SetConfig+0x2f4>)
 801c778:	4293      	cmp	r3, r2
 801c77a:	d125      	bne.n	801c7c8 <UART_SetConfig+0xf0>
 801c77c:	2003      	movs	r0, #3
 801c77e:	f7ff fb13 	bl	801bda8 <LL_RCC_GetUSARTClockSource>
 801c782:	4603      	mov	r3, r0
 801c784:	2b03      	cmp	r3, #3
 801c786:	d81b      	bhi.n	801c7c0 <UART_SetConfig+0xe8>
 801c788:	a201      	add	r2, pc, #4	; (adr r2, 801c790 <UART_SetConfig+0xb8>)
 801c78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c78e:	bf00      	nop
 801c790:	0801c7a1 	.word	0x0801c7a1
 801c794:	0801c7b1 	.word	0x0801c7b1
 801c798:	0801c7a9 	.word	0x0801c7a9
 801c79c:	0801c7b9 	.word	0x0801c7b9
 801c7a0:	2301      	movs	r3, #1
 801c7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c7a6:	e042      	b.n	801c82e <UART_SetConfig+0x156>
 801c7a8:	2302      	movs	r3, #2
 801c7aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c7ae:	e03e      	b.n	801c82e <UART_SetConfig+0x156>
 801c7b0:	2304      	movs	r3, #4
 801c7b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c7b6:	e03a      	b.n	801c82e <UART_SetConfig+0x156>
 801c7b8:	2308      	movs	r3, #8
 801c7ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c7be:	e036      	b.n	801c82e <UART_SetConfig+0x156>
 801c7c0:	2310      	movs	r3, #16
 801c7c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c7c6:	e032      	b.n	801c82e <UART_SetConfig+0x156>
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	4a7e      	ldr	r2, [pc, #504]	; (801c9c8 <UART_SetConfig+0x2f0>)
 801c7ce:	4293      	cmp	r3, r2
 801c7d0:	d12a      	bne.n	801c828 <UART_SetConfig+0x150>
 801c7d2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801c7d6:	f7ff faf7 	bl	801bdc8 <LL_RCC_GetLPUARTClockSource>
 801c7da:	4603      	mov	r3, r0
 801c7dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c7e0:	d01a      	beq.n	801c818 <UART_SetConfig+0x140>
 801c7e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c7e6:	d81b      	bhi.n	801c820 <UART_SetConfig+0x148>
 801c7e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c7ec:	d00c      	beq.n	801c808 <UART_SetConfig+0x130>
 801c7ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c7f2:	d815      	bhi.n	801c820 <UART_SetConfig+0x148>
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d003      	beq.n	801c800 <UART_SetConfig+0x128>
 801c7f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c7fc:	d008      	beq.n	801c810 <UART_SetConfig+0x138>
 801c7fe:	e00f      	b.n	801c820 <UART_SetConfig+0x148>
 801c800:	2300      	movs	r3, #0
 801c802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c806:	e012      	b.n	801c82e <UART_SetConfig+0x156>
 801c808:	2302      	movs	r3, #2
 801c80a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c80e:	e00e      	b.n	801c82e <UART_SetConfig+0x156>
 801c810:	2304      	movs	r3, #4
 801c812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c816:	e00a      	b.n	801c82e <UART_SetConfig+0x156>
 801c818:	2308      	movs	r3, #8
 801c81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c81e:	e006      	b.n	801c82e <UART_SetConfig+0x156>
 801c820:	2310      	movs	r3, #16
 801c822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c826:	e002      	b.n	801c82e <UART_SetConfig+0x156>
 801c828:	2310      	movs	r3, #16
 801c82a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801c82e:	697b      	ldr	r3, [r7, #20]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	4a65      	ldr	r2, [pc, #404]	; (801c9c8 <UART_SetConfig+0x2f0>)
 801c834:	4293      	cmp	r3, r2
 801c836:	f040 8097 	bne.w	801c968 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801c83a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c83e:	2b08      	cmp	r3, #8
 801c840:	d823      	bhi.n	801c88a <UART_SetConfig+0x1b2>
 801c842:	a201      	add	r2, pc, #4	; (adr r2, 801c848 <UART_SetConfig+0x170>)
 801c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c848:	0801c86d 	.word	0x0801c86d
 801c84c:	0801c88b 	.word	0x0801c88b
 801c850:	0801c875 	.word	0x0801c875
 801c854:	0801c88b 	.word	0x0801c88b
 801c858:	0801c87b 	.word	0x0801c87b
 801c85c:	0801c88b 	.word	0x0801c88b
 801c860:	0801c88b 	.word	0x0801c88b
 801c864:	0801c88b 	.word	0x0801c88b
 801c868:	0801c883 	.word	0x0801c883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c86c:	f7fe fcc8 	bl	801b200 <HAL_RCC_GetPCLK1Freq>
 801c870:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c872:	e010      	b.n	801c896 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c874:	4b56      	ldr	r3, [pc, #344]	; (801c9d0 <UART_SetConfig+0x2f8>)
 801c876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c878:	e00d      	b.n	801c896 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c87a:	f7fe fc41 	bl	801b100 <HAL_RCC_GetSysClockFreq>
 801c87e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c880:	e009      	b.n	801c896 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c886:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c888:	e005      	b.n	801c896 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801c88a:	2300      	movs	r3, #0
 801c88c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c88e:	2301      	movs	r3, #1
 801c890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801c896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c898:	2b00      	cmp	r3, #0
 801c89a:	f000 812b 	beq.w	801caf4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801c89e:	697b      	ldr	r3, [r7, #20]
 801c8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8a2:	4a4c      	ldr	r2, [pc, #304]	; (801c9d4 <UART_SetConfig+0x2fc>)
 801c8a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c8a8:	461a      	mov	r2, r3
 801c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8ac:	fbb3 f3f2 	udiv	r3, r3, r2
 801c8b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801c8b2:	697b      	ldr	r3, [r7, #20]
 801c8b4:	685a      	ldr	r2, [r3, #4]
 801c8b6:	4613      	mov	r3, r2
 801c8b8:	005b      	lsls	r3, r3, #1
 801c8ba:	4413      	add	r3, r2
 801c8bc:	69ba      	ldr	r2, [r7, #24]
 801c8be:	429a      	cmp	r2, r3
 801c8c0:	d305      	bcc.n	801c8ce <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801c8c2:	697b      	ldr	r3, [r7, #20]
 801c8c4:	685b      	ldr	r3, [r3, #4]
 801c8c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801c8c8:	69ba      	ldr	r2, [r7, #24]
 801c8ca:	429a      	cmp	r2, r3
 801c8cc:	d903      	bls.n	801c8d6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801c8ce:	2301      	movs	r3, #1
 801c8d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c8d4:	e10e      	b.n	801caf4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8d8:	2200      	movs	r2, #0
 801c8da:	60bb      	str	r3, [r7, #8]
 801c8dc:	60fa      	str	r2, [r7, #12]
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8e2:	4a3c      	ldr	r2, [pc, #240]	; (801c9d4 <UART_SetConfig+0x2fc>)
 801c8e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c8e8:	b29b      	uxth	r3, r3
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	603b      	str	r3, [r7, #0]
 801c8ee:	607a      	str	r2, [r7, #4]
 801c8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c8f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801c8f8:	f7e4 f97e 	bl	8000bf8 <__aeabi_uldivmod>
 801c8fc:	4602      	mov	r2, r0
 801c8fe:	460b      	mov	r3, r1
 801c900:	4610      	mov	r0, r2
 801c902:	4619      	mov	r1, r3
 801c904:	f04f 0200 	mov.w	r2, #0
 801c908:	f04f 0300 	mov.w	r3, #0
 801c90c:	020b      	lsls	r3, r1, #8
 801c90e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801c912:	0202      	lsls	r2, r0, #8
 801c914:	6979      	ldr	r1, [r7, #20]
 801c916:	6849      	ldr	r1, [r1, #4]
 801c918:	0849      	lsrs	r1, r1, #1
 801c91a:	2000      	movs	r0, #0
 801c91c:	460c      	mov	r4, r1
 801c91e:	4605      	mov	r5, r0
 801c920:	eb12 0804 	adds.w	r8, r2, r4
 801c924:	eb43 0905 	adc.w	r9, r3, r5
 801c928:	697b      	ldr	r3, [r7, #20]
 801c92a:	685b      	ldr	r3, [r3, #4]
 801c92c:	2200      	movs	r2, #0
 801c92e:	469a      	mov	sl, r3
 801c930:	4693      	mov	fp, r2
 801c932:	4652      	mov	r2, sl
 801c934:	465b      	mov	r3, fp
 801c936:	4640      	mov	r0, r8
 801c938:	4649      	mov	r1, r9
 801c93a:	f7e4 f95d 	bl	8000bf8 <__aeabi_uldivmod>
 801c93e:	4602      	mov	r2, r0
 801c940:	460b      	mov	r3, r1
 801c942:	4613      	mov	r3, r2
 801c944:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801c946:	6a3b      	ldr	r3, [r7, #32]
 801c948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c94c:	d308      	bcc.n	801c960 <UART_SetConfig+0x288>
 801c94e:	6a3b      	ldr	r3, [r7, #32]
 801c950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c954:	d204      	bcs.n	801c960 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	6a3a      	ldr	r2, [r7, #32]
 801c95c:	60da      	str	r2, [r3, #12]
 801c95e:	e0c9      	b.n	801caf4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801c960:	2301      	movs	r3, #1
 801c962:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c966:	e0c5      	b.n	801caf4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c968:	697b      	ldr	r3, [r7, #20]
 801c96a:	69db      	ldr	r3, [r3, #28]
 801c96c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c970:	d16d      	bne.n	801ca4e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801c972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c976:	3b01      	subs	r3, #1
 801c978:	2b07      	cmp	r3, #7
 801c97a:	d82d      	bhi.n	801c9d8 <UART_SetConfig+0x300>
 801c97c:	a201      	add	r2, pc, #4	; (adr r2, 801c984 <UART_SetConfig+0x2ac>)
 801c97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c982:	bf00      	nop
 801c984:	0801c9a5 	.word	0x0801c9a5
 801c988:	0801c9ad 	.word	0x0801c9ad
 801c98c:	0801c9d9 	.word	0x0801c9d9
 801c990:	0801c9b3 	.word	0x0801c9b3
 801c994:	0801c9d9 	.word	0x0801c9d9
 801c998:	0801c9d9 	.word	0x0801c9d9
 801c99c:	0801c9d9 	.word	0x0801c9d9
 801c9a0:	0801c9bb 	.word	0x0801c9bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c9a4:	f7fe fc42 	bl	801b22c <HAL_RCC_GetPCLK2Freq>
 801c9a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c9aa:	e01b      	b.n	801c9e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c9ac:	4b08      	ldr	r3, [pc, #32]	; (801c9d0 <UART_SetConfig+0x2f8>)
 801c9ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c9b0:	e018      	b.n	801c9e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c9b2:	f7fe fba5 	bl	801b100 <HAL_RCC_GetSysClockFreq>
 801c9b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c9b8:	e014      	b.n	801c9e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c9ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c9be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c9c0:	e010      	b.n	801c9e4 <UART_SetConfig+0x30c>
 801c9c2:	bf00      	nop
 801c9c4:	cfff69f3 	.word	0xcfff69f3
 801c9c8:	40008000 	.word	0x40008000
 801c9cc:	40013800 	.word	0x40013800
 801c9d0:	00f42400 	.word	0x00f42400
 801c9d4:	080229cc 	.word	0x080229cc
      default:
        pclk = 0U;
 801c9d8:	2300      	movs	r3, #0
 801c9da:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c9dc:	2301      	movs	r3, #1
 801c9de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c9e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	f000 8084 	beq.w	801caf4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9f0:	4a4b      	ldr	r2, [pc, #300]	; (801cb20 <UART_SetConfig+0x448>)
 801c9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c9f6:	461a      	mov	r2, r3
 801c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9fa:	fbb3 f3f2 	udiv	r3, r3, r2
 801c9fe:	005a      	lsls	r2, r3, #1
 801ca00:	697b      	ldr	r3, [r7, #20]
 801ca02:	685b      	ldr	r3, [r3, #4]
 801ca04:	085b      	lsrs	r3, r3, #1
 801ca06:	441a      	add	r2, r3
 801ca08:	697b      	ldr	r3, [r7, #20]
 801ca0a:	685b      	ldr	r3, [r3, #4]
 801ca0c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca10:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ca12:	6a3b      	ldr	r3, [r7, #32]
 801ca14:	2b0f      	cmp	r3, #15
 801ca16:	d916      	bls.n	801ca46 <UART_SetConfig+0x36e>
 801ca18:	6a3b      	ldr	r3, [r7, #32]
 801ca1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ca1e:	d212      	bcs.n	801ca46 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801ca20:	6a3b      	ldr	r3, [r7, #32]
 801ca22:	b29b      	uxth	r3, r3
 801ca24:	f023 030f 	bic.w	r3, r3, #15
 801ca28:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ca2a:	6a3b      	ldr	r3, [r7, #32]
 801ca2c:	085b      	lsrs	r3, r3, #1
 801ca2e:	b29b      	uxth	r3, r3
 801ca30:	f003 0307 	and.w	r3, r3, #7
 801ca34:	b29a      	uxth	r2, r3
 801ca36:	8bfb      	ldrh	r3, [r7, #30]
 801ca38:	4313      	orrs	r3, r2
 801ca3a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801ca3c:	697b      	ldr	r3, [r7, #20]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	8bfa      	ldrh	r2, [r7, #30]
 801ca42:	60da      	str	r2, [r3, #12]
 801ca44:	e056      	b.n	801caf4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801ca46:	2301      	movs	r3, #1
 801ca48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801ca4c:	e052      	b.n	801caf4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801ca4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ca52:	3b01      	subs	r3, #1
 801ca54:	2b07      	cmp	r3, #7
 801ca56:	d822      	bhi.n	801ca9e <UART_SetConfig+0x3c6>
 801ca58:	a201      	add	r2, pc, #4	; (adr r2, 801ca60 <UART_SetConfig+0x388>)
 801ca5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca5e:	bf00      	nop
 801ca60:	0801ca81 	.word	0x0801ca81
 801ca64:	0801ca89 	.word	0x0801ca89
 801ca68:	0801ca9f 	.word	0x0801ca9f
 801ca6c:	0801ca8f 	.word	0x0801ca8f
 801ca70:	0801ca9f 	.word	0x0801ca9f
 801ca74:	0801ca9f 	.word	0x0801ca9f
 801ca78:	0801ca9f 	.word	0x0801ca9f
 801ca7c:	0801ca97 	.word	0x0801ca97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ca80:	f7fe fbd4 	bl	801b22c <HAL_RCC_GetPCLK2Freq>
 801ca84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ca86:	e010      	b.n	801caaa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801ca88:	4b26      	ldr	r3, [pc, #152]	; (801cb24 <UART_SetConfig+0x44c>)
 801ca8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ca8c:	e00d      	b.n	801caaa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ca8e:	f7fe fb37 	bl	801b100 <HAL_RCC_GetSysClockFreq>
 801ca92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ca94:	e009      	b.n	801caaa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ca96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ca9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ca9c:	e005      	b.n	801caaa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801ca9e:	2300      	movs	r3, #0
 801caa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801caa2:	2301      	movs	r3, #1
 801caa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801caa8:	bf00      	nop
    }

    if (pclk != 0U)
 801caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caac:	2b00      	cmp	r3, #0
 801caae:	d021      	beq.n	801caf4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801cab0:	697b      	ldr	r3, [r7, #20]
 801cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cab4:	4a1a      	ldr	r2, [pc, #104]	; (801cb20 <UART_SetConfig+0x448>)
 801cab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801caba:	461a      	mov	r2, r3
 801cabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cabe:	fbb3 f2f2 	udiv	r2, r3, r2
 801cac2:	697b      	ldr	r3, [r7, #20]
 801cac4:	685b      	ldr	r3, [r3, #4]
 801cac6:	085b      	lsrs	r3, r3, #1
 801cac8:	441a      	add	r2, r3
 801caca:	697b      	ldr	r3, [r7, #20]
 801cacc:	685b      	ldr	r3, [r3, #4]
 801cace:	fbb2 f3f3 	udiv	r3, r2, r3
 801cad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cad4:	6a3b      	ldr	r3, [r7, #32]
 801cad6:	2b0f      	cmp	r3, #15
 801cad8:	d909      	bls.n	801caee <UART_SetConfig+0x416>
 801cada:	6a3b      	ldr	r3, [r7, #32]
 801cadc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cae0:	d205      	bcs.n	801caee <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801cae2:	6a3b      	ldr	r3, [r7, #32]
 801cae4:	b29a      	uxth	r2, r3
 801cae6:	697b      	ldr	r3, [r7, #20]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	60da      	str	r2, [r3, #12]
 801caec:	e002      	b.n	801caf4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801caee:	2301      	movs	r3, #1
 801caf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801caf4:	697b      	ldr	r3, [r7, #20]
 801caf6:	2201      	movs	r2, #1
 801caf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801cafc:	697b      	ldr	r3, [r7, #20]
 801cafe:	2201      	movs	r2, #1
 801cb00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801cb04:	697b      	ldr	r3, [r7, #20]
 801cb06:	2200      	movs	r2, #0
 801cb08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801cb0a:	697b      	ldr	r3, [r7, #20]
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801cb10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801cb14:	4618      	mov	r0, r3
 801cb16:	3730      	adds	r7, #48	; 0x30
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cb1e:	bf00      	nop
 801cb20:	080229cc 	.word	0x080229cc
 801cb24:	00f42400 	.word	0x00f42400

0801cb28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801cb28:	b480      	push	{r7}
 801cb2a:	b083      	sub	sp, #12
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb34:	f003 0301 	and.w	r3, r3, #1
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d00a      	beq.n	801cb52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	685b      	ldr	r3, [r3, #4]
 801cb42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	430a      	orrs	r2, r1
 801cb50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb56:	f003 0302 	and.w	r3, r3, #2
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d00a      	beq.n	801cb74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	685b      	ldr	r3, [r3, #4]
 801cb64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	430a      	orrs	r2, r1
 801cb72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb78:	f003 0304 	and.w	r3, r3, #4
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d00a      	beq.n	801cb96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	685b      	ldr	r3, [r3, #4]
 801cb86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	430a      	orrs	r2, r1
 801cb94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb9a:	f003 0308 	and.w	r3, r3, #8
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d00a      	beq.n	801cbb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	685b      	ldr	r3, [r3, #4]
 801cba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	430a      	orrs	r2, r1
 801cbb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbbc:	f003 0310 	and.w	r3, r3, #16
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d00a      	beq.n	801cbda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	689b      	ldr	r3, [r3, #8]
 801cbca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	430a      	orrs	r2, r1
 801cbd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbde:	f003 0320 	and.w	r3, r3, #32
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d00a      	beq.n	801cbfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	689b      	ldr	r3, [r3, #8]
 801cbec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	430a      	orrs	r2, r1
 801cbfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d01a      	beq.n	801cc3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	685b      	ldr	r3, [r3, #4]
 801cc0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	430a      	orrs	r2, r1
 801cc1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cc26:	d10a      	bne.n	801cc3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	685b      	ldr	r3, [r3, #4]
 801cc2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	430a      	orrs	r2, r1
 801cc3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d00a      	beq.n	801cc60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	685b      	ldr	r3, [r3, #4]
 801cc50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	430a      	orrs	r2, r1
 801cc5e:	605a      	str	r2, [r3, #4]
  }
}
 801cc60:	bf00      	nop
 801cc62:	370c      	adds	r7, #12
 801cc64:	46bd      	mov	sp, r7
 801cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc6a:	4770      	bx	lr

0801cc6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b098      	sub	sp, #96	; 0x60
 801cc70:	af02      	add	r7, sp, #8
 801cc72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	2200      	movs	r2, #0
 801cc78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801cc7c:	f7fb f966 	bl	8017f4c <HAL_GetTick>
 801cc80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	f003 0308 	and.w	r3, r3, #8
 801cc8c:	2b08      	cmp	r3, #8
 801cc8e:	d12f      	bne.n	801ccf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801cc90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801cc94:	9300      	str	r3, [sp, #0]
 801cc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cc98:	2200      	movs	r2, #0
 801cc9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801cc9e:	6878      	ldr	r0, [r7, #4]
 801cca0:	f000 f88e 	bl	801cdc0 <UART_WaitOnFlagUntilTimeout>
 801cca4:	4603      	mov	r3, r0
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d022      	beq.n	801ccf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ccb2:	e853 3f00 	ldrex	r3, [r3]
 801ccb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801ccb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ccba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ccbe:	653b      	str	r3, [r7, #80]	; 0x50
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	461a      	mov	r2, r3
 801ccc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ccc8:	647b      	str	r3, [r7, #68]	; 0x44
 801ccca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cccc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ccce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ccd0:	e841 2300 	strex	r3, r2, [r1]
 801ccd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801ccd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d1e6      	bne.n	801ccaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	2220      	movs	r2, #32
 801cce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	2200      	movs	r2, #0
 801cce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ccec:	2303      	movs	r3, #3
 801ccee:	e063      	b.n	801cdb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	f003 0304 	and.w	r3, r3, #4
 801ccfa:	2b04      	cmp	r3, #4
 801ccfc:	d149      	bne.n	801cd92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ccfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801cd02:	9300      	str	r3, [sp, #0]
 801cd04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cd06:	2200      	movs	r2, #0
 801cd08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801cd0c:	6878      	ldr	r0, [r7, #4]
 801cd0e:	f000 f857 	bl	801cdc0 <UART_WaitOnFlagUntilTimeout>
 801cd12:	4603      	mov	r3, r0
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d03c      	beq.n	801cd92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd20:	e853 3f00 	ldrex	r3, [r3]
 801cd24:	623b      	str	r3, [r7, #32]
   return(result);
 801cd26:	6a3b      	ldr	r3, [r7, #32]
 801cd28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801cd2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	461a      	mov	r2, r3
 801cd34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cd36:	633b      	str	r3, [r7, #48]	; 0x30
 801cd38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cd3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cd3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cd3e:	e841 2300 	strex	r3, r2, [r1]
 801cd42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d1e6      	bne.n	801cd18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	3308      	adds	r3, #8
 801cd50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cd52:	693b      	ldr	r3, [r7, #16]
 801cd54:	e853 3f00 	ldrex	r3, [r3]
 801cd58:	60fb      	str	r3, [r7, #12]
   return(result);
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	f023 0301 	bic.w	r3, r3, #1
 801cd60:	64bb      	str	r3, [r7, #72]	; 0x48
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	3308      	adds	r3, #8
 801cd68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cd6a:	61fa      	str	r2, [r7, #28]
 801cd6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cd6e:	69b9      	ldr	r1, [r7, #24]
 801cd70:	69fa      	ldr	r2, [r7, #28]
 801cd72:	e841 2300 	strex	r3, r2, [r1]
 801cd76:	617b      	str	r3, [r7, #20]
   return(result);
 801cd78:	697b      	ldr	r3, [r7, #20]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d1e5      	bne.n	801cd4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	2220      	movs	r2, #32
 801cd82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	2200      	movs	r2, #0
 801cd8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801cd8e:	2303      	movs	r3, #3
 801cd90:	e012      	b.n	801cdb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	2220      	movs	r2, #32
 801cd96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	2220      	movs	r2, #32
 801cd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	2200      	movs	r2, #0
 801cda6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	2200      	movs	r2, #0
 801cdac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801cdb6:	2300      	movs	r3, #0
}
 801cdb8:	4618      	mov	r0, r3
 801cdba:	3758      	adds	r7, #88	; 0x58
 801cdbc:	46bd      	mov	sp, r7
 801cdbe:	bd80      	pop	{r7, pc}

0801cdc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	b084      	sub	sp, #16
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	60f8      	str	r0, [r7, #12]
 801cdc8:	60b9      	str	r1, [r7, #8]
 801cdca:	603b      	str	r3, [r7, #0]
 801cdcc:	4613      	mov	r3, r2
 801cdce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801cdd0:	e049      	b.n	801ce66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801cdd2:	69bb      	ldr	r3, [r7, #24]
 801cdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cdd8:	d045      	beq.n	801ce66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801cdda:	f7fb f8b7 	bl	8017f4c <HAL_GetTick>
 801cdde:	4602      	mov	r2, r0
 801cde0:	683b      	ldr	r3, [r7, #0]
 801cde2:	1ad3      	subs	r3, r2, r3
 801cde4:	69ba      	ldr	r2, [r7, #24]
 801cde6:	429a      	cmp	r2, r3
 801cde8:	d302      	bcc.n	801cdf0 <UART_WaitOnFlagUntilTimeout+0x30>
 801cdea:	69bb      	ldr	r3, [r7, #24]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d101      	bne.n	801cdf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801cdf0:	2303      	movs	r3, #3
 801cdf2:	e048      	b.n	801ce86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	f003 0304 	and.w	r3, r3, #4
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d031      	beq.n	801ce66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ce02:	68fb      	ldr	r3, [r7, #12]
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	69db      	ldr	r3, [r3, #28]
 801ce08:	f003 0308 	and.w	r3, r3, #8
 801ce0c:	2b08      	cmp	r3, #8
 801ce0e:	d110      	bne.n	801ce32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	2208      	movs	r2, #8
 801ce16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801ce18:	68f8      	ldr	r0, [r7, #12]
 801ce1a:	f000 f920 	bl	801d05e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	2208      	movs	r2, #8
 801ce22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	2200      	movs	r2, #0
 801ce2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801ce2e:	2301      	movs	r3, #1
 801ce30:	e029      	b.n	801ce86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	69db      	ldr	r3, [r3, #28]
 801ce38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ce3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ce40:	d111      	bne.n	801ce66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ce4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ce4c:	68f8      	ldr	r0, [r7, #12]
 801ce4e:	f000 f906 	bl	801d05e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	2220      	movs	r2, #32
 801ce56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	2200      	movs	r2, #0
 801ce5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801ce62:	2303      	movs	r3, #3
 801ce64:	e00f      	b.n	801ce86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	69da      	ldr	r2, [r3, #28]
 801ce6c:	68bb      	ldr	r3, [r7, #8]
 801ce6e:	4013      	ands	r3, r2
 801ce70:	68ba      	ldr	r2, [r7, #8]
 801ce72:	429a      	cmp	r2, r3
 801ce74:	bf0c      	ite	eq
 801ce76:	2301      	moveq	r3, #1
 801ce78:	2300      	movne	r3, #0
 801ce7a:	b2db      	uxtb	r3, r3
 801ce7c:	461a      	mov	r2, r3
 801ce7e:	79fb      	ldrb	r3, [r7, #7]
 801ce80:	429a      	cmp	r2, r3
 801ce82:	d0a6      	beq.n	801cdd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ce84:	2300      	movs	r3, #0
}
 801ce86:	4618      	mov	r0, r3
 801ce88:	3710      	adds	r7, #16
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	bd80      	pop	{r7, pc}
	...

0801ce90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ce90:	b580      	push	{r7, lr}
 801ce92:	b096      	sub	sp, #88	; 0x58
 801ce94:	af00      	add	r7, sp, #0
 801ce96:	60f8      	str	r0, [r7, #12]
 801ce98:	60b9      	str	r1, [r7, #8]
 801ce9a:	4613      	mov	r3, r2
 801ce9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	68ba      	ldr	r2, [r7, #8]
 801cea2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	88fa      	ldrh	r2, [r7, #6]
 801cea8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	2200      	movs	r2, #0
 801ceb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	2222      	movs	r2, #34	; 0x22
 801ceb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d02d      	beq.n	801cf22 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cecc:	4a40      	ldr	r2, [pc, #256]	; (801cfd0 <UART_Start_Receive_DMA+0x140>)
 801cece:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ced6:	4a3f      	ldr	r2, [pc, #252]	; (801cfd4 <UART_Start_Receive_DMA+0x144>)
 801ced8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cee0:	4a3d      	ldr	r2, [pc, #244]	; (801cfd8 <UART_Start_Receive_DMA+0x148>)
 801cee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801cee4:	68fb      	ldr	r3, [r7, #12]
 801cee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ceea:	2200      	movs	r2, #0
 801ceec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	3324      	adds	r3, #36	; 0x24
 801cefa:	4619      	mov	r1, r3
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cf00:	461a      	mov	r2, r3
 801cf02:	88fb      	ldrh	r3, [r7, #6]
 801cf04:	f7fb fa16 	bl	8018334 <HAL_DMA_Start_IT>
 801cf08:	4603      	mov	r3, r0
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d009      	beq.n	801cf22 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801cf0e:	68fb      	ldr	r3, [r7, #12]
 801cf10:	2210      	movs	r2, #16
 801cf12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	2220      	movs	r2, #32
 801cf1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 801cf1e:	2301      	movs	r3, #1
 801cf20:	e051      	b.n	801cfc6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	691b      	ldr	r3, [r3, #16]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d018      	beq.n	801cf5c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf32:	e853 3f00 	ldrex	r3, [r3]
 801cf36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cf3e:	657b      	str	r3, [r7, #84]	; 0x54
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	461a      	mov	r2, r3
 801cf46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf48:	64bb      	str	r3, [r7, #72]	; 0x48
 801cf4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801cf4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cf50:	e841 2300 	strex	r3, r2, [r1]
 801cf54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801cf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d1e6      	bne.n	801cf2a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	3308      	adds	r3, #8
 801cf62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf66:	e853 3f00 	ldrex	r3, [r3]
 801cf6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf6e:	f043 0301 	orr.w	r3, r3, #1
 801cf72:	653b      	str	r3, [r7, #80]	; 0x50
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	3308      	adds	r3, #8
 801cf7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801cf7c:	637a      	str	r2, [r7, #52]	; 0x34
 801cf7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cf82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf84:	e841 2300 	strex	r3, r2, [r1]
 801cf88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d1e5      	bne.n	801cf5c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	3308      	adds	r3, #8
 801cf96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf98:	697b      	ldr	r3, [r7, #20]
 801cf9a:	e853 3f00 	ldrex	r3, [r3]
 801cf9e:	613b      	str	r3, [r7, #16]
   return(result);
 801cfa0:	693b      	ldr	r3, [r7, #16]
 801cfa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cfa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	3308      	adds	r3, #8
 801cfae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801cfb0:	623a      	str	r2, [r7, #32]
 801cfb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cfb4:	69f9      	ldr	r1, [r7, #28]
 801cfb6:	6a3a      	ldr	r2, [r7, #32]
 801cfb8:	e841 2300 	strex	r3, r2, [r1]
 801cfbc:	61bb      	str	r3, [r7, #24]
   return(result);
 801cfbe:	69bb      	ldr	r3, [r7, #24]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d1e5      	bne.n	801cf90 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801cfc4:	2300      	movs	r3, #0
}
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	3758      	adds	r7, #88	; 0x58
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop
 801cfd0:	0801d12b 	.word	0x0801d12b
 801cfd4:	0801d257 	.word	0x0801d257
 801cfd8:	0801d295 	.word	0x0801d295

0801cfdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801cfdc:	b480      	push	{r7}
 801cfde:	b08f      	sub	sp, #60	; 0x3c
 801cfe0:	af00      	add	r7, sp, #0
 801cfe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cfea:	6a3b      	ldr	r3, [r7, #32]
 801cfec:	e853 3f00 	ldrex	r3, [r3]
 801cff0:	61fb      	str	r3, [r7, #28]
   return(result);
 801cff2:	69fb      	ldr	r3, [r7, #28]
 801cff4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801cff8:	637b      	str	r3, [r7, #52]	; 0x34
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	461a      	mov	r2, r3
 801d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d002:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d004:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d00a:	e841 2300 	strex	r3, r2, [r1]
 801d00e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d012:	2b00      	cmp	r3, #0
 801d014:	d1e6      	bne.n	801cfe4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	3308      	adds	r3, #8
 801d01c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	e853 3f00 	ldrex	r3, [r3]
 801d024:	60bb      	str	r3, [r7, #8]
   return(result);
 801d026:	68bb      	ldr	r3, [r7, #8]
 801d028:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801d02c:	633b      	str	r3, [r7, #48]	; 0x30
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	3308      	adds	r3, #8
 801d034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d036:	61ba      	str	r2, [r7, #24]
 801d038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d03a:	6979      	ldr	r1, [r7, #20]
 801d03c:	69ba      	ldr	r2, [r7, #24]
 801d03e:	e841 2300 	strex	r3, r2, [r1]
 801d042:	613b      	str	r3, [r7, #16]
   return(result);
 801d044:	693b      	ldr	r3, [r7, #16]
 801d046:	2b00      	cmp	r3, #0
 801d048:	d1e5      	bne.n	801d016 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	2220      	movs	r2, #32
 801d04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801d052:	bf00      	nop
 801d054:	373c      	adds	r7, #60	; 0x3c
 801d056:	46bd      	mov	sp, r7
 801d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d05c:	4770      	bx	lr

0801d05e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d05e:	b480      	push	{r7}
 801d060:	b095      	sub	sp, #84	; 0x54
 801d062:	af00      	add	r7, sp, #0
 801d064:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d06e:	e853 3f00 	ldrex	r3, [r3]
 801d072:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d07a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	461a      	mov	r2, r3
 801d082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d084:	643b      	str	r3, [r7, #64]	; 0x40
 801d086:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d08a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d08c:	e841 2300 	strex	r3, r2, [r1]
 801d090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d094:	2b00      	cmp	r3, #0
 801d096:	d1e6      	bne.n	801d066 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	3308      	adds	r3, #8
 801d09e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0a0:	6a3b      	ldr	r3, [r7, #32]
 801d0a2:	e853 3f00 	ldrex	r3, [r3]
 801d0a6:	61fb      	str	r3, [r7, #28]
   return(result);
 801d0a8:	69fb      	ldr	r3, [r7, #28]
 801d0aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d0ae:	f023 0301 	bic.w	r3, r3, #1
 801d0b2:	64bb      	str	r3, [r7, #72]	; 0x48
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	3308      	adds	r3, #8
 801d0ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d0bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d0be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d0c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d0c4:	e841 2300 	strex	r3, r2, [r1]
 801d0c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d1e3      	bne.n	801d098 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0d4:	2b01      	cmp	r3, #1
 801d0d6:	d118      	bne.n	801d10a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0de:	68fb      	ldr	r3, [r7, #12]
 801d0e0:	e853 3f00 	ldrex	r3, [r3]
 801d0e4:	60bb      	str	r3, [r7, #8]
   return(result);
 801d0e6:	68bb      	ldr	r3, [r7, #8]
 801d0e8:	f023 0310 	bic.w	r3, r3, #16
 801d0ec:	647b      	str	r3, [r7, #68]	; 0x44
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	461a      	mov	r2, r3
 801d0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d0f6:	61bb      	str	r3, [r7, #24]
 801d0f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0fa:	6979      	ldr	r1, [r7, #20]
 801d0fc:	69ba      	ldr	r2, [r7, #24]
 801d0fe:	e841 2300 	strex	r3, r2, [r1]
 801d102:	613b      	str	r3, [r7, #16]
   return(result);
 801d104:	693b      	ldr	r3, [r7, #16]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d1e6      	bne.n	801d0d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	2220      	movs	r2, #32
 801d10e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	2200      	movs	r2, #0
 801d116:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	2200      	movs	r2, #0
 801d11c:	675a      	str	r2, [r3, #116]	; 0x74
}
 801d11e:	bf00      	nop
 801d120:	3754      	adds	r7, #84	; 0x54
 801d122:	46bd      	mov	sp, r7
 801d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d128:	4770      	bx	lr

0801d12a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801d12a:	b580      	push	{r7, lr}
 801d12c:	b09c      	sub	sp, #112	; 0x70
 801d12e:	af00      	add	r7, sp, #0
 801d130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d136:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	f003 0320 	and.w	r3, r3, #32
 801d142:	2b00      	cmp	r3, #0
 801d144:	d171      	bne.n	801d22a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801d146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d148:	2200      	movs	r2, #0
 801d14a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d14e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d150:	681b      	ldr	r3, [r3, #0]
 801d152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d156:	e853 3f00 	ldrex	r3, [r3]
 801d15a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801d15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d15e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d162:	66bb      	str	r3, [r7, #104]	; 0x68
 801d164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	461a      	mov	r2, r3
 801d16a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d16c:	65bb      	str	r3, [r7, #88]	; 0x58
 801d16e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d174:	e841 2300 	strex	r3, r2, [r1]
 801d178:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801d17a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d1e6      	bne.n	801d14e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	3308      	adds	r3, #8
 801d186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d18a:	e853 3f00 	ldrex	r3, [r3]
 801d18e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801d190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d192:	f023 0301 	bic.w	r3, r3, #1
 801d196:	667b      	str	r3, [r7, #100]	; 0x64
 801d198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	3308      	adds	r3, #8
 801d19e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d1a0:	647a      	str	r2, [r7, #68]	; 0x44
 801d1a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d1a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d1a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d1a8:	e841 2300 	strex	r3, r2, [r1]
 801d1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801d1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d1e5      	bne.n	801d180 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	3308      	adds	r3, #8
 801d1ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1be:	e853 3f00 	ldrex	r3, [r3]
 801d1c2:	623b      	str	r3, [r7, #32]
   return(result);
 801d1c4:	6a3b      	ldr	r3, [r7, #32]
 801d1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d1ca:	663b      	str	r3, [r7, #96]	; 0x60
 801d1cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	3308      	adds	r3, #8
 801d1d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d1d4:	633a      	str	r2, [r7, #48]	; 0x30
 801d1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d1d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d1dc:	e841 2300 	strex	r3, r2, [r1]
 801d1e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d1e5      	bne.n	801d1b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801d1e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1ea:	2220      	movs	r2, #32
 801d1ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d1f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d1f4:	2b01      	cmp	r3, #1
 801d1f6:	d118      	bne.n	801d22a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d1f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d1fe:	693b      	ldr	r3, [r7, #16]
 801d200:	e853 3f00 	ldrex	r3, [r3]
 801d204:	60fb      	str	r3, [r7, #12]
   return(result);
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	f023 0310 	bic.w	r3, r3, #16
 801d20c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	461a      	mov	r2, r3
 801d214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d216:	61fb      	str	r3, [r7, #28]
 801d218:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d21a:	69b9      	ldr	r1, [r7, #24]
 801d21c:	69fa      	ldr	r2, [r7, #28]
 801d21e:	e841 2300 	strex	r3, r2, [r1]
 801d222:	617b      	str	r3, [r7, #20]
   return(result);
 801d224:	697b      	ldr	r3, [r7, #20]
 801d226:	2b00      	cmp	r3, #0
 801d228:	d1e6      	bne.n	801d1f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d22c:	2200      	movs	r2, #0
 801d22e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d234:	2b01      	cmp	r3, #1
 801d236:	d107      	bne.n	801d248 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d23a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d23e:	4619      	mov	r1, r3
 801d240:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d242:	f7ff fa3d 	bl	801c6c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d246:	e002      	b.n	801d24e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801d248:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d24a:	f7e4 f907 	bl	800145c <HAL_UART_RxCpltCallback>
}
 801d24e:	bf00      	nop
 801d250:	3770      	adds	r7, #112	; 0x70
 801d252:	46bd      	mov	sp, r7
 801d254:	bd80      	pop	{r7, pc}

0801d256 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d256:	b580      	push	{r7, lr}
 801d258:	b084      	sub	sp, #16
 801d25a:	af00      	add	r7, sp, #0
 801d25c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d262:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	2201      	movs	r2, #1
 801d268:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d26a:	68fb      	ldr	r3, [r7, #12]
 801d26c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d26e:	2b01      	cmp	r3, #1
 801d270:	d109      	bne.n	801d286 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d278:	085b      	lsrs	r3, r3, #1
 801d27a:	b29b      	uxth	r3, r3
 801d27c:	4619      	mov	r1, r3
 801d27e:	68f8      	ldr	r0, [r7, #12]
 801d280:	f7ff fa1e 	bl	801c6c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d284:	e002      	b.n	801d28c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801d286:	68f8      	ldr	r0, [r7, #12]
 801d288:	f7ff fa06 	bl	801c698 <HAL_UART_RxHalfCpltCallback>
}
 801d28c:	bf00      	nop
 801d28e:	3710      	adds	r7, #16
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}

0801d294 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b086      	sub	sp, #24
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801d2a2:	697b      	ldr	r3, [r7, #20]
 801d2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d2a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801d2aa:	697b      	ldr	r3, [r7, #20]
 801d2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d2b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801d2b2:	697b      	ldr	r3, [r7, #20]
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	689b      	ldr	r3, [r3, #8]
 801d2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d2bc:	2b80      	cmp	r3, #128	; 0x80
 801d2be:	d109      	bne.n	801d2d4 <UART_DMAError+0x40>
 801d2c0:	693b      	ldr	r3, [r7, #16]
 801d2c2:	2b21      	cmp	r3, #33	; 0x21
 801d2c4:	d106      	bne.n	801d2d4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801d2c6:	697b      	ldr	r3, [r7, #20]
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801d2ce:	6978      	ldr	r0, [r7, #20]
 801d2d0:	f7ff fe84 	bl	801cfdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801d2d4:	697b      	ldr	r3, [r7, #20]
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	689b      	ldr	r3, [r3, #8]
 801d2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d2de:	2b40      	cmp	r3, #64	; 0x40
 801d2e0:	d109      	bne.n	801d2f6 <UART_DMAError+0x62>
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	2b22      	cmp	r3, #34	; 0x22
 801d2e6:	d106      	bne.n	801d2f6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801d2e8:	697b      	ldr	r3, [r7, #20]
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801d2f0:	6978      	ldr	r0, [r7, #20]
 801d2f2:	f7ff feb4 	bl	801d05e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801d2f6:	697b      	ldr	r3, [r7, #20]
 801d2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d2fc:	f043 0210 	orr.w	r2, r3, #16
 801d300:	697b      	ldr	r3, [r7, #20]
 801d302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d306:	6978      	ldr	r0, [r7, #20]
 801d308:	f7ff f9d0 	bl	801c6ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d30c:	bf00      	nop
 801d30e:	3718      	adds	r7, #24
 801d310:	46bd      	mov	sp, r7
 801d312:	bd80      	pop	{r7, pc}

0801d314 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801d314:	b580      	push	{r7, lr}
 801d316:	b084      	sub	sp, #16
 801d318:	af00      	add	r7, sp, #0
 801d31a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d320:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	2200      	movs	r2, #0
 801d326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	2200      	movs	r2, #0
 801d32e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d332:	68f8      	ldr	r0, [r7, #12]
 801d334:	f7ff f9ba 	bl	801c6ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d338:	bf00      	nop
 801d33a:	3710      	adds	r7, #16
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}

0801d340 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801d340:	b580      	push	{r7, lr}
 801d342:	b088      	sub	sp, #32
 801d344:	af00      	add	r7, sp, #0
 801d346:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	e853 3f00 	ldrex	r3, [r3]
 801d354:	60bb      	str	r3, [r7, #8]
   return(result);
 801d356:	68bb      	ldr	r3, [r7, #8]
 801d358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d35c:	61fb      	str	r3, [r7, #28]
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	461a      	mov	r2, r3
 801d364:	69fb      	ldr	r3, [r7, #28]
 801d366:	61bb      	str	r3, [r7, #24]
 801d368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d36a:	6979      	ldr	r1, [r7, #20]
 801d36c:	69ba      	ldr	r2, [r7, #24]
 801d36e:	e841 2300 	strex	r3, r2, [r1]
 801d372:	613b      	str	r3, [r7, #16]
   return(result);
 801d374:	693b      	ldr	r3, [r7, #16]
 801d376:	2b00      	cmp	r3, #0
 801d378:	d1e6      	bne.n	801d348 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	2220      	movs	r2, #32
 801d37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	2200      	movs	r2, #0
 801d386:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801d388:	6878      	ldr	r0, [r7, #4]
 801d38a:	f7ff f97b 	bl	801c684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d38e:	bf00      	nop
 801d390:	3720      	adds	r7, #32
 801d392:	46bd      	mov	sp, r7
 801d394:	bd80      	pop	{r7, pc}

0801d396 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801d396:	b480      	push	{r7}
 801d398:	b083      	sub	sp, #12
 801d39a:	af00      	add	r7, sp, #0
 801d39c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801d39e:	bf00      	nop
 801d3a0:	370c      	adds	r7, #12
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a8:	4770      	bx	lr

0801d3aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801d3aa:	b480      	push	{r7}
 801d3ac:	b083      	sub	sp, #12
 801d3ae:	af00      	add	r7, sp, #0
 801d3b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801d3b2:	bf00      	nop
 801d3b4:	370c      	adds	r7, #12
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3bc:	4770      	bx	lr

0801d3be <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801d3be:	b480      	push	{r7}
 801d3c0:	b083      	sub	sp, #12
 801d3c2:	af00      	add	r7, sp, #0
 801d3c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801d3c6:	bf00      	nop
 801d3c8:	370c      	adds	r7, #12
 801d3ca:	46bd      	mov	sp, r7
 801d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d0:	4770      	bx	lr

0801d3d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801d3d2:	b480      	push	{r7}
 801d3d4:	b085      	sub	sp, #20
 801d3d6:	af00      	add	r7, sp, #0
 801d3d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d3e0:	2b01      	cmp	r3, #1
 801d3e2:	d101      	bne.n	801d3e8 <HAL_UARTEx_DisableFifoMode+0x16>
 801d3e4:	2302      	movs	r3, #2
 801d3e6:	e027      	b.n	801d438 <HAL_UARTEx_DisableFifoMode+0x66>
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	2201      	movs	r2, #1
 801d3ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	2224      	movs	r2, #36	; 0x24
 801d3f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	681a      	ldr	r2, [r3, #0]
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	f022 0201 	bic.w	r2, r2, #1
 801d40e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801d416:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	2200      	movs	r2, #0
 801d41c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	68fa      	ldr	r2, [r7, #12]
 801d424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	2220      	movs	r2, #32
 801d42a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	2200      	movs	r2, #0
 801d432:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d436:	2300      	movs	r3, #0
}
 801d438:	4618      	mov	r0, r3
 801d43a:	3714      	adds	r7, #20
 801d43c:	46bd      	mov	sp, r7
 801d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d442:	4770      	bx	lr

0801d444 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d444:	b580      	push	{r7, lr}
 801d446:	b084      	sub	sp, #16
 801d448:	af00      	add	r7, sp, #0
 801d44a:	6078      	str	r0, [r7, #4]
 801d44c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d454:	2b01      	cmp	r3, #1
 801d456:	d101      	bne.n	801d45c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801d458:	2302      	movs	r3, #2
 801d45a:	e02d      	b.n	801d4b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	2201      	movs	r2, #1
 801d460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	2224      	movs	r2, #36	; 0x24
 801d468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	681a      	ldr	r2, [r3, #0]
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	681b      	ldr	r3, [r3, #0]
 801d47e:	f022 0201 	bic.w	r2, r2, #1
 801d482:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	689b      	ldr	r3, [r3, #8]
 801d48a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	683a      	ldr	r2, [r7, #0]
 801d494:	430a      	orrs	r2, r1
 801d496:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d498:	6878      	ldr	r0, [r7, #4]
 801d49a:	f000 f84f 	bl	801d53c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	68fa      	ldr	r2, [r7, #12]
 801d4a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	2220      	movs	r2, #32
 801d4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d4b6:	2300      	movs	r3, #0
}
 801d4b8:	4618      	mov	r0, r3
 801d4ba:	3710      	adds	r7, #16
 801d4bc:	46bd      	mov	sp, r7
 801d4be:	bd80      	pop	{r7, pc}

0801d4c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d4c0:	b580      	push	{r7, lr}
 801d4c2:	b084      	sub	sp, #16
 801d4c4:	af00      	add	r7, sp, #0
 801d4c6:	6078      	str	r0, [r7, #4]
 801d4c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d4d0:	2b01      	cmp	r3, #1
 801d4d2:	d101      	bne.n	801d4d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801d4d4:	2302      	movs	r3, #2
 801d4d6:	e02d      	b.n	801d534 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	2201      	movs	r2, #1
 801d4dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	2224      	movs	r2, #36	; 0x24
 801d4e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	681a      	ldr	r2, [r3, #0]
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	f022 0201 	bic.w	r2, r2, #1
 801d4fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	689b      	ldr	r3, [r3, #8]
 801d506:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	683a      	ldr	r2, [r7, #0]
 801d510:	430a      	orrs	r2, r1
 801d512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d514:	6878      	ldr	r0, [r7, #4]
 801d516:	f000 f811 	bl	801d53c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	68fa      	ldr	r2, [r7, #12]
 801d520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	2220      	movs	r2, #32
 801d526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	2200      	movs	r2, #0
 801d52e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d532:	2300      	movs	r3, #0
}
 801d534:	4618      	mov	r0, r3
 801d536:	3710      	adds	r7, #16
 801d538:	46bd      	mov	sp, r7
 801d53a:	bd80      	pop	{r7, pc}

0801d53c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801d53c:	b480      	push	{r7}
 801d53e:	b085      	sub	sp, #20
 801d540:	af00      	add	r7, sp, #0
 801d542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d108      	bne.n	801d55e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	2201      	movs	r2, #1
 801d550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	2201      	movs	r2, #1
 801d558:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801d55c:	e031      	b.n	801d5c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801d55e:	2308      	movs	r3, #8
 801d560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801d562:	2308      	movs	r3, #8
 801d564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	689b      	ldr	r3, [r3, #8]
 801d56c:	0e5b      	lsrs	r3, r3, #25
 801d56e:	b2db      	uxtb	r3, r3
 801d570:	f003 0307 	and.w	r3, r3, #7
 801d574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	689b      	ldr	r3, [r3, #8]
 801d57c:	0f5b      	lsrs	r3, r3, #29
 801d57e:	b2db      	uxtb	r3, r3
 801d580:	f003 0307 	and.w	r3, r3, #7
 801d584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d586:	7bbb      	ldrb	r3, [r7, #14]
 801d588:	7b3a      	ldrb	r2, [r7, #12]
 801d58a:	4911      	ldr	r1, [pc, #68]	; (801d5d0 <UARTEx_SetNbDataToProcess+0x94>)
 801d58c:	5c8a      	ldrb	r2, [r1, r2]
 801d58e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801d592:	7b3a      	ldrb	r2, [r7, #12]
 801d594:	490f      	ldr	r1, [pc, #60]	; (801d5d4 <UARTEx_SetNbDataToProcess+0x98>)
 801d596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d598:	fb93 f3f2 	sdiv	r3, r3, r2
 801d59c:	b29a      	uxth	r2, r3
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d5a4:	7bfb      	ldrb	r3, [r7, #15]
 801d5a6:	7b7a      	ldrb	r2, [r7, #13]
 801d5a8:	4909      	ldr	r1, [pc, #36]	; (801d5d0 <UARTEx_SetNbDataToProcess+0x94>)
 801d5aa:	5c8a      	ldrb	r2, [r1, r2]
 801d5ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801d5b0:	7b7a      	ldrb	r2, [r7, #13]
 801d5b2:	4908      	ldr	r1, [pc, #32]	; (801d5d4 <UARTEx_SetNbDataToProcess+0x98>)
 801d5b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d5b6:	fb93 f3f2 	sdiv	r3, r3, r2
 801d5ba:	b29a      	uxth	r2, r3
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801d5c2:	bf00      	nop
 801d5c4:	3714      	adds	r7, #20
 801d5c6:	46bd      	mov	sp, r7
 801d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5cc:	4770      	bx	lr
 801d5ce:	bf00      	nop
 801d5d0:	080229e4 	.word	0x080229e4
 801d5d4:	080229ec 	.word	0x080229ec

0801d5d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801d5d8:	b480      	push	{r7}
 801d5da:	b085      	sub	sp, #20
 801d5dc:	af00      	add	r7, sp, #0
 801d5de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801d5e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801d5e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801d5ec:	b29a      	uxth	r2, r3
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	b29b      	uxth	r3, r3
 801d5f2:	43db      	mvns	r3, r3
 801d5f4:	b29b      	uxth	r3, r3
 801d5f6:	4013      	ands	r3, r2
 801d5f8:	b29a      	uxth	r2, r3
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801d600:	2300      	movs	r3, #0
}
 801d602:	4618      	mov	r0, r3
 801d604:	3714      	adds	r7, #20
 801d606:	46bd      	mov	sp, r7
 801d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d60c:	4770      	bx	lr

0801d60e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801d60e:	b084      	sub	sp, #16
 801d610:	b480      	push	{r7}
 801d612:	b083      	sub	sp, #12
 801d614:	af00      	add	r7, sp, #0
 801d616:	6078      	str	r0, [r7, #4]
 801d618:	f107 0014 	add.w	r0, r7, #20
 801d61c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	2201      	movs	r2, #1
 801d624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	2200      	movs	r2, #0
 801d62c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	2200      	movs	r2, #0
 801d634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	2200      	movs	r2, #0
 801d63c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801d640:	2300      	movs	r3, #0
}
 801d642:	4618      	mov	r0, r3
 801d644:	370c      	adds	r7, #12
 801d646:	46bd      	mov	sp, r7
 801d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d64c:	b004      	add	sp, #16
 801d64e:	4770      	bx	lr

0801d650 <init_done>:
}button_interface;

uint16_t button_pushed = NONE;

void init_done()
{
 801d650:	b580      	push	{r7, lr}
 801d652:	b082      	sub	sp, #8
 801d654:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 801d656:	2300      	movs	r3, #0
 801d658:	607b      	str	r3, [r7, #4]
 801d65a:	e017      	b.n	801d68c <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 801d65c:	2120      	movs	r1, #32
 801d65e:	4816      	ldr	r0, [pc, #88]	; (801d6b8 <init_done+0x68>)
 801d660:	f7fb fb70 	bl	8018d44 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801d664:	20c8      	movs	r0, #200	; 0xc8
 801d666:	f7fa fc89 	bl	8017f7c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 801d66a:	2101      	movs	r1, #1
 801d66c:	4812      	ldr	r0, [pc, #72]	; (801d6b8 <init_done+0x68>)
 801d66e:	f7fb fb69 	bl	8018d44 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801d672:	20c8      	movs	r0, #200	; 0xc8
 801d674:	f7fa fc82 	bl	8017f7c <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d678:	2102      	movs	r1, #2
 801d67a:	480f      	ldr	r0, [pc, #60]	; (801d6b8 <init_done+0x68>)
 801d67c:	f7fb fb62 	bl	8018d44 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 801d680:	20c8      	movs	r0, #200	; 0xc8
 801d682:	f7fa fc7b 	bl	8017f7c <HAL_Delay>
	for(int i=0; i<3; i++)
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	3301      	adds	r3, #1
 801d68a:	607b      	str	r3, [r7, #4]
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	2b02      	cmp	r3, #2
 801d690:	dde4      	ble.n	801d65c <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 801d692:	2200      	movs	r2, #0
 801d694:	2120      	movs	r1, #32
 801d696:	4808      	ldr	r0, [pc, #32]	; (801d6b8 <init_done+0x68>)
 801d698:	f7fb fb3c 	bl	8018d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 801d69c:	2200      	movs	r2, #0
 801d69e:	2101      	movs	r1, #1
 801d6a0:	4805      	ldr	r0, [pc, #20]	; (801d6b8 <init_done+0x68>)
 801d6a2:	f7fb fb37 	bl	8018d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	2102      	movs	r1, #2
 801d6aa:	4803      	ldr	r0, [pc, #12]	; (801d6b8 <init_done+0x68>)
 801d6ac:	f7fb fb32 	bl	8018d14 <HAL_GPIO_WritePin>
}
 801d6b0:	bf00      	nop
 801d6b2:	3708      	adds	r7, #8
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd80      	pop	{r7, pc}
 801d6b8:	48000400 	.word	0x48000400

0801d6bc <formate_json_tof>:

	return serialized_string;
}

static char* formate_json_tof(int id, int value)
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b086      	sub	sp, #24
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
 801d6c4:	6039      	str	r1, [r7, #0]
	JSON_Value *val = json_value_init_object();
 801d6c6:	f7e5 fc57 	bl	8002f78 <json_value_init_object>
 801d6ca:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 801d6cc:	697b      	ldr	r3, [r7, #20]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d101      	bne.n	801d6d6 <formate_json_tof+0x1a>
		return NULL;
 801d6d2:	2300      	movs	r3, #0
 801d6d4:	e049      	b.n	801d76a <formate_json_tof+0xae>

	JSON_Object *obj = json_value_get_object(val);
 801d6d6:	6978      	ldr	r0, [r7, #20]
 801d6d8:	f7e5 fb96 	bl	8002e08 <json_value_get_object>
 801d6dc:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 801d6de:	693b      	ldr	r3, [r7, #16]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d101      	bne.n	801d6e8 <formate_json_tof+0x2c>
		return NULL;
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	e040      	b.n	801d76a <formate_json_tof+0xae>

	if(id == 0){
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d10f      	bne.n	801d70e <formate_json_tof+0x52>
		if(json_object_set_number(obj, "tof_left", value) != JSONSuccess)
 801d6ee:	6838      	ldr	r0, [r7, #0]
 801d6f0:	f7e2 fef0 	bl	80004d4 <__aeabi_i2d>
 801d6f4:	4602      	mov	r2, r0
 801d6f6:	460b      	mov	r3, r1
 801d6f8:	ec43 2b10 	vmov	d0, r2, r3
 801d6fc:	491d      	ldr	r1, [pc, #116]	; (801d774 <formate_json_tof+0xb8>)
 801d6fe:	6938      	ldr	r0, [r7, #16]
 801d700:	f7e5 fdf8 	bl	80032f4 <json_object_set_number>
 801d704:	4603      	mov	r3, r0
 801d706:	2b00      	cmp	r3, #0
 801d708:	d001      	beq.n	801d70e <formate_json_tof+0x52>
			return NULL;
 801d70a:	2300      	movs	r3, #0
 801d70c:	e02d      	b.n	801d76a <formate_json_tof+0xae>
	}
	if(id == 1){
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	2b01      	cmp	r3, #1
 801d712:	d10f      	bne.n	801d734 <formate_json_tof+0x78>
		if(json_object_set_number(obj, "tof_center", value) != JSONSuccess)
 801d714:	6838      	ldr	r0, [r7, #0]
 801d716:	f7e2 fedd 	bl	80004d4 <__aeabi_i2d>
 801d71a:	4602      	mov	r2, r0
 801d71c:	460b      	mov	r3, r1
 801d71e:	ec43 2b10 	vmov	d0, r2, r3
 801d722:	4915      	ldr	r1, [pc, #84]	; (801d778 <formate_json_tof+0xbc>)
 801d724:	6938      	ldr	r0, [r7, #16]
 801d726:	f7e5 fde5 	bl	80032f4 <json_object_set_number>
 801d72a:	4603      	mov	r3, r0
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d001      	beq.n	801d734 <formate_json_tof+0x78>
			return NULL;
 801d730:	2300      	movs	r3, #0
 801d732:	e01a      	b.n	801d76a <formate_json_tof+0xae>
	}
	if(id == 2){
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	2b02      	cmp	r3, #2
 801d738:	d10f      	bne.n	801d75a <formate_json_tof+0x9e>
		if(json_object_set_number(obj, "tof_right", value) != JSONSuccess)
 801d73a:	6838      	ldr	r0, [r7, #0]
 801d73c:	f7e2 feca 	bl	80004d4 <__aeabi_i2d>
 801d740:	4602      	mov	r2, r0
 801d742:	460b      	mov	r3, r1
 801d744:	ec43 2b10 	vmov	d0, r2, r3
 801d748:	490c      	ldr	r1, [pc, #48]	; (801d77c <formate_json_tof+0xc0>)
 801d74a:	6938      	ldr	r0, [r7, #16]
 801d74c:	f7e5 fdd2 	bl	80032f4 <json_object_set_number>
 801d750:	4603      	mov	r3, r0
 801d752:	2b00      	cmp	r3, #0
 801d754:	d001      	beq.n	801d75a <formate_json_tof+0x9e>
			return NULL;
 801d756:	2300      	movs	r3, #0
 801d758:	e007      	b.n	801d76a <formate_json_tof+0xae>
	}

	char* serialized_string = json_serialize_to_string(val);
 801d75a:	6978      	ldr	r0, [r7, #20]
 801d75c:	f7e5 fcce 	bl	80030fc <json_serialize_to_string>
 801d760:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 801d762:	6978      	ldr	r0, [r7, #20]
 801d764:	f7e5 fbda 	bl	8002f1c <json_value_free>

	return serialized_string;
 801d768:	68fb      	ldr	r3, [r7, #12]
}
 801d76a:	4618      	mov	r0, r3
 801d76c:	3718      	adds	r7, #24
 801d76e:	46bd      	mov	sp, r7
 801d770:	bd80      	pop	{r7, pc}
 801d772:	bf00      	nop
 801d774:	08021e2c 	.word	0x08021e2c
 801d778:	08021e38 	.word	0x08021e38
 801d77c:	08021e44 	.word	0x08021e44

0801d780 <check_subscription>:

	return serialized_string;
}

static int check_subscription()
{
 801d780:	b580      	push	{r7, lr}
 801d782:	b088      	sub	sp, #32
 801d784:	af00      	add	r7, sp, #0
	if (UART_ESP32_RecvEndFlag == 1) {
 801d786:	4b1f      	ldr	r3, [pc, #124]	; (801d804 <check_subscription+0x84>)
 801d788:	781b      	ldrb	r3, [r3, #0]
 801d78a:	b2db      	uxtb	r3, r3
 801d78c:	2b01      	cmp	r3, #1
 801d78e:	d134      	bne.n	801d7fa <check_subscription+0x7a>
		char pattern[24];
		memset(pattern, 0, sizeof(pattern));
 801d790:	463b      	mov	r3, r7
 801d792:	2218      	movs	r2, #24
 801d794:	2100      	movs	r1, #0
 801d796:	4618      	mov	r0, r3
 801d798:	f001 fcbe 	bl	801f118 <memset>
		//sprintf((char*) pattern, "+MQTTSUBRECV:0,\"isen%s/led\",", CARD_NUMBER);
		sprintf((char*) pattern, "+MQTTSUBRECV:0,\"%s/", MQTT_CLIENTID);
 801d79c:	463b      	mov	r3, r7
 801d79e:	4a1a      	ldr	r2, [pc, #104]	; (801d808 <check_subscription+0x88>)
 801d7a0:	491a      	ldr	r1, [pc, #104]	; (801d80c <check_subscription+0x8c>)
 801d7a2:	4618      	mov	r0, r3
 801d7a4:	f002 faa8 	bl	801fcf8 <siprintf>
		uint16_t data_size = 0, off = sizeof(pattern)-1; // \0 not needed
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	83fb      	strh	r3, [r7, #30]
 801d7ac:	2317      	movs	r3, #23
 801d7ae:	83bb      	strh	r3, [r7, #28]
		if (strstr((const char*) UART_ESP32_RxBUF, pattern) != NULL) {
 801d7b0:	463b      	mov	r3, r7
 801d7b2:	4619      	mov	r1, r3
 801d7b4:	4816      	ldr	r0, [pc, #88]	; (801d810 <check_subscription+0x90>)
 801d7b6:	f002 fb29 	bl	801fe0c <strstr>
 801d7ba:	4603      	mov	r3, r0
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d016      	beq.n	801d7ee <check_subscription+0x6e>
			printf("APP: Match succeed\r\n");
 801d7c0:	4814      	ldr	r0, [pc, #80]	; (801d814 <check_subscription+0x94>)
 801d7c2:	f002 fa81 	bl	801fcc8 <puts>
			int topic_id = 0;
 801d7c6:	2300      	movs	r3, #0
 801d7c8:	61bb      	str	r3, [r7, #24]
			// nul mais ok
			if(UART_ESP32_RxBUF[off] == 'l')
 801d7ca:	8bbb      	ldrh	r3, [r7, #28]
 801d7cc:	4a10      	ldr	r2, [pc, #64]	; (801d810 <check_subscription+0x90>)
 801d7ce:	5cd3      	ldrb	r3, [r2, r3]
 801d7d0:	2b6c      	cmp	r3, #108	; 0x6c
 801d7d2:	d105      	bne.n	801d7e0 <check_subscription+0x60>
			{
				topic_id = 1;
 801d7d4:	2301      	movs	r3, #1
 801d7d6:	61bb      	str	r3, [r7, #24]
				off+= 5;
 801d7d8:	8bbb      	ldrh	r3, [r7, #28]
 801d7da:	3305      	adds	r3, #5
 801d7dc:	83bb      	strh	r3, [r7, #28]
 801d7de:	e004      	b.n	801d7ea <check_subscription+0x6a>
			}
			else
			{
				topic_id = 2;
 801d7e0:	2302      	movs	r3, #2
 801d7e2:	61bb      	str	r3, [r7, #24]
				off+= 9;
 801d7e4:	8bbb      	ldrh	r3, [r7, #28]
 801d7e6:	3309      	adds	r3, #9
 801d7e8:	83bb      	strh	r3, [r7, #28]
			}
			return 0;
 801d7ea:	2300      	movs	r3, #0
 801d7ec:	e006      	b.n	801d7fc <check_subscription+0x7c>
		}
		else
		{
			printf("APP: Match failed\r\n");
 801d7ee:	480a      	ldr	r0, [pc, #40]	; (801d818 <check_subscription+0x98>)
 801d7f0:	f002 fa6a 	bl	801fcc8 <puts>
			return -1;
 801d7f4:	f04f 33ff 	mov.w	r3, #4294967295
 801d7f8:	e000      	b.n	801d7fc <check_subscription+0x7c>
		}
	}
	else
	{
		return 1;
 801d7fa:	2301      	movs	r3, #1
	}
}
 801d7fc:	4618      	mov	r0, r3
 801d7fe:	3720      	adds	r7, #32
 801d800:	46bd      	mov	sp, r7
 801d802:	bd80      	pop	{r7, pc}
 801d804:	2000996d 	.word	0x2000996d
 801d808:	08021e58 	.word	0x08021e58
 801d80c:	08021e60 	.word	0x08021e60
 801d810:	2000916c 	.word	0x2000916c
 801d814:	08021e74 	.word	0x08021e74
 801d818:	08021e88 	.word	0x08021e88

0801d81c <wifi_init>:

void wifi_init(){
 801d81c:	b580      	push	{r7, lr}
 801d81e:	af00      	add	r7, sp, #0
	if (esp8266_SetupIP() != _SUCCEED) {
 801d820:	f000 fa9c 	bl	801dd5c <esp8266_SetupIP>
 801d824:	4603      	mov	r3, r0
 801d826:	2b01      	cmp	r3, #1
 801d828:	d00a      	beq.n	801d840 <wifi_init+0x24>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 801d82a:	480f      	ldr	r0, [pc, #60]	; (801d868 <wifi_init+0x4c>)
 801d82c:	f002 fa4c 	bl	801fcc8 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d830:	2102      	movs	r1, #2
 801d832:	480e      	ldr	r0, [pc, #56]	; (801d86c <wifi_init+0x50>)
 801d834:	f7fb fa86 	bl	8018d44 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 801d838:	20c8      	movs	r0, #200	; 0xc8
 801d83a:	f7fa fb9f 	bl	8017f7c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d83e:	e7f7      	b.n	801d830 <wifi_init+0x14>
	  }
  }

  if(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 801d840:	f000 fd4e 	bl	801e2e0 <esp8266_SetupConnect_BrokerMQTT>
 801d844:	4603      	mov	r3, r0
 801d846:	2b01      	cmp	r3, #1
 801d848:	d00a      	beq.n	801d860 <wifi_init+0x44>
  {
	  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 801d84a:	4809      	ldr	r0, [pc, #36]	; (801d870 <wifi_init+0x54>)
 801d84c:	f002 fa3c 	bl	801fcc8 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d850:	2102      	movs	r1, #2
 801d852:	4806      	ldr	r0, [pc, #24]	; (801d86c <wifi_init+0x50>)
 801d854:	f7fb fa76 	bl	8018d44 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 801d858:	20c8      	movs	r0, #200	; 0xc8
 801d85a:	f7fa fb8f 	bl	8017f7c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801d85e:	e7f7      	b.n	801d850 <wifi_init+0x34>
	  }
  }
  init_done();
 801d860:	f7ff fef6 	bl	801d650 <init_done>
}
 801d864:	bf00      	nop
 801d866:	bd80      	pop	{r7, pc}
 801d868:	08021e9c 	.word	0x08021e9c
 801d86c:	48000400 	.word	0x48000400
 801d870:	08021ed8 	.word	0x08021ed8

0801d874 <wifi_process>:

void wifi_process(){
 801d874:	b580      	push	{r7, lr}
 801d876:	b088      	sub	sp, #32
 801d878:	af00      	add	r7, sp, #0
	// app part
	int i = 0;
 801d87a:	2300      	movs	r3, #0
 801d87c:	61fb      	str	r3, [r7, #28]
	while(i<1)
 801d87e:	e0d3      	b.n	801da28 <wifi_process+0x1b4>
	  {
		//subscribe to the necessary subscriptions
		  if(get_mqtt_state() < _SUBSCRIBED_TEMP_MQTT)
 801d880:	f000 fef8 	bl	801e674 <get_mqtt_state>
 801d884:	4603      	mov	r3, r0
 801d886:	2b07      	cmp	r3, #7
 801d888:	d807      	bhi.n	801d89a <wifi_process+0x26>
		  {
			  if(esp8266_Subscribe_Temp_BrokerMQTT() != _SUBSCRIBED_TEMP_MQTT)
 801d88a:	f000 fd93 	bl	801e3b4 <esp8266_Subscribe_Temp_BrokerMQTT>
 801d88e:	4603      	mov	r3, r0
 801d890:	2b08      	cmp	r3, #8
 801d892:	d002      	beq.n	801d89a <wifi_process+0x26>
				printf("APP: esp8266_Subscribe_Temp_BrokerMQTT() failed\n");
 801d894:	4869      	ldr	r0, [pc, #420]	; (801da3c <wifi_process+0x1c8>)
 801d896:	f002 fa17 	bl	801fcc8 <puts>
		  }
		 if(get_mqtt_state() < _SUBSCRIBED_TOF_MQTT)
 801d89a:	f000 feeb 	bl	801e674 <get_mqtt_state>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	2b08      	cmp	r3, #8
 801d8a2:	d807      	bhi.n	801d8b4 <wifi_process+0x40>
		  {
			  if(esp8266_Subscribe_ToF_BrokerMQTT() != _SUBSCRIBED_TOF_MQTT)
 801d8a4:	f000 fdda 	bl	801e45c <esp8266_Subscribe_ToF_BrokerMQTT>
 801d8a8:	4603      	mov	r3, r0
 801d8aa:	2b09      	cmp	r3, #9
 801d8ac:	d002      	beq.n	801d8b4 <wifi_process+0x40>
				printf("APP: esp8266_Subscribe_ToF_BrokerMQTT() failed\n");
 801d8ae:	4864      	ldr	r0, [pc, #400]	; (801da40 <wifi_process+0x1cc>)
 801d8b0:	f002 fa0a 	bl	801fcc8 <puts>
		  }

		  //send tof data when necessary
		 if(LeftPos == 1){
 801d8b4:	4b63      	ldr	r3, [pc, #396]	; (801da44 <wifi_process+0x1d0>)
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	2b01      	cmp	r3, #1
 801d8ba:	d11a      	bne.n	801d8f2 <wifi_process+0x7e>
			 char *data = formate_json_tof(0,1);
 801d8bc:	2101      	movs	r1, #1
 801d8be:	2000      	movs	r0, #0
 801d8c0:	f7ff fefc 	bl	801d6bc <formate_json_tof>
 801d8c4:	6178      	str	r0, [r7, #20]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801d8c6:	6978      	ldr	r0, [r7, #20]
 801d8c8:	f7e2 fc5a 	bl	8000180 <strlen>
 801d8cc:	4603      	mov	r3, r0
 801d8ce:	b29b      	uxth	r3, r3
 801d8d0:	4619      	mov	r1, r3
 801d8d2:	6978      	ldr	r0, [r7, #20]
 801d8d4:	f000 fe72 	bl	801e5bc <esp8266_Publish_ToF_BrokerMQTT>
 801d8d8:	4603      	mov	r3, r0
 801d8da:	2b0c      	cmp	r3, #12
 801d8dc:	d002      	beq.n	801d8e4 <wifi_process+0x70>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801d8de:	485a      	ldr	r0, [pc, #360]	; (801da48 <wifi_process+0x1d4>)
 801d8e0:	f002 f9f2 	bl	801fcc8 <puts>
			  json_free_serialized_string(data);
 801d8e4:	6978      	ldr	r0, [r7, #20]
 801d8e6:	f7e5 fc3b 	bl	8003160 <json_free_serialized_string>
			 LeftPos = 2;
 801d8ea:	4b56      	ldr	r3, [pc, #344]	; (801da44 <wifi_process+0x1d0>)
 801d8ec:	2202      	movs	r2, #2
 801d8ee:	601a      	str	r2, [r3, #0]
 801d8f0:	e01a      	b.n	801d928 <wifi_process+0xb4>
		 } else if (LeftPos == 0){
 801d8f2:	4b54      	ldr	r3, [pc, #336]	; (801da44 <wifi_process+0x1d0>)
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d116      	bne.n	801d928 <wifi_process+0xb4>
			 char *data = formate_json_tof(0,0);
 801d8fa:	2100      	movs	r1, #0
 801d8fc:	2000      	movs	r0, #0
 801d8fe:	f7ff fedd 	bl	801d6bc <formate_json_tof>
 801d902:	61b8      	str	r0, [r7, #24]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801d904:	69b8      	ldr	r0, [r7, #24]
 801d906:	f7e2 fc3b 	bl	8000180 <strlen>
 801d90a:	4603      	mov	r3, r0
 801d90c:	b29b      	uxth	r3, r3
 801d90e:	4619      	mov	r1, r3
 801d910:	69b8      	ldr	r0, [r7, #24]
 801d912:	f000 fe53 	bl	801e5bc <esp8266_Publish_ToF_BrokerMQTT>
 801d916:	4603      	mov	r3, r0
 801d918:	2b0c      	cmp	r3, #12
 801d91a:	d002      	beq.n	801d922 <wifi_process+0xae>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801d91c:	484a      	ldr	r0, [pc, #296]	; (801da48 <wifi_process+0x1d4>)
 801d91e:	f002 f9d3 	bl	801fcc8 <puts>
			  json_free_serialized_string(data);
 801d922:	69b8      	ldr	r0, [r7, #24]
 801d924:	f7e5 fc1c 	bl	8003160 <json_free_serialized_string>
		 }
		 if(CenterPos == 1){
 801d928:	4b48      	ldr	r3, [pc, #288]	; (801da4c <wifi_process+0x1d8>)
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	2b01      	cmp	r3, #1
 801d92e:	d11a      	bne.n	801d966 <wifi_process+0xf2>
			 char *data = formate_json_tof(1,1);
 801d930:	2101      	movs	r1, #1
 801d932:	2001      	movs	r0, #1
 801d934:	f7ff fec2 	bl	801d6bc <formate_json_tof>
 801d938:	60f8      	str	r0, [r7, #12]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801d93a:	68f8      	ldr	r0, [r7, #12]
 801d93c:	f7e2 fc20 	bl	8000180 <strlen>
 801d940:	4603      	mov	r3, r0
 801d942:	b29b      	uxth	r3, r3
 801d944:	4619      	mov	r1, r3
 801d946:	68f8      	ldr	r0, [r7, #12]
 801d948:	f000 fe38 	bl	801e5bc <esp8266_Publish_ToF_BrokerMQTT>
 801d94c:	4603      	mov	r3, r0
 801d94e:	2b0c      	cmp	r3, #12
 801d950:	d002      	beq.n	801d958 <wifi_process+0xe4>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801d952:	483d      	ldr	r0, [pc, #244]	; (801da48 <wifi_process+0x1d4>)
 801d954:	f002 f9b8 	bl	801fcc8 <puts>
			  json_free_serialized_string(data);
 801d958:	68f8      	ldr	r0, [r7, #12]
 801d95a:	f7e5 fc01 	bl	8003160 <json_free_serialized_string>
			 CenterPos = 2;
 801d95e:	4b3b      	ldr	r3, [pc, #236]	; (801da4c <wifi_process+0x1d8>)
 801d960:	2202      	movs	r2, #2
 801d962:	601a      	str	r2, [r3, #0]
 801d964:	e01a      	b.n	801d99c <wifi_process+0x128>
		 } else if (CenterPos == 0){
 801d966:	4b39      	ldr	r3, [pc, #228]	; (801da4c <wifi_process+0x1d8>)
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d116      	bne.n	801d99c <wifi_process+0x128>
			 char *data = formate_json_tof(1,0);
 801d96e:	2100      	movs	r1, #0
 801d970:	2001      	movs	r0, #1
 801d972:	f7ff fea3 	bl	801d6bc <formate_json_tof>
 801d976:	6138      	str	r0, [r7, #16]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801d978:	6938      	ldr	r0, [r7, #16]
 801d97a:	f7e2 fc01 	bl	8000180 <strlen>
 801d97e:	4603      	mov	r3, r0
 801d980:	b29b      	uxth	r3, r3
 801d982:	4619      	mov	r1, r3
 801d984:	6938      	ldr	r0, [r7, #16]
 801d986:	f000 fe19 	bl	801e5bc <esp8266_Publish_ToF_BrokerMQTT>
 801d98a:	4603      	mov	r3, r0
 801d98c:	2b0c      	cmp	r3, #12
 801d98e:	d002      	beq.n	801d996 <wifi_process+0x122>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801d990:	482d      	ldr	r0, [pc, #180]	; (801da48 <wifi_process+0x1d4>)
 801d992:	f002 f999 	bl	801fcc8 <puts>
			  json_free_serialized_string(data);
 801d996:	6938      	ldr	r0, [r7, #16]
 801d998:	f7e5 fbe2 	bl	8003160 <json_free_serialized_string>
		 }
		 if(RightPos == 1){
 801d99c:	4b2c      	ldr	r3, [pc, #176]	; (801da50 <wifi_process+0x1dc>)
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	2b01      	cmp	r3, #1
 801d9a2:	d11a      	bne.n	801d9da <wifi_process+0x166>
			 char *data = formate_json_tof(2,1);
 801d9a4:	2101      	movs	r1, #1
 801d9a6:	2002      	movs	r0, #2
 801d9a8:	f7ff fe88 	bl	801d6bc <formate_json_tof>
 801d9ac:	6078      	str	r0, [r7, #4]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801d9ae:	6878      	ldr	r0, [r7, #4]
 801d9b0:	f7e2 fbe6 	bl	8000180 <strlen>
 801d9b4:	4603      	mov	r3, r0
 801d9b6:	b29b      	uxth	r3, r3
 801d9b8:	4619      	mov	r1, r3
 801d9ba:	6878      	ldr	r0, [r7, #4]
 801d9bc:	f000 fdfe 	bl	801e5bc <esp8266_Publish_ToF_BrokerMQTT>
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	2b0c      	cmp	r3, #12
 801d9c4:	d002      	beq.n	801d9cc <wifi_process+0x158>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801d9c6:	4820      	ldr	r0, [pc, #128]	; (801da48 <wifi_process+0x1d4>)
 801d9c8:	f002 f97e 	bl	801fcc8 <puts>
			  json_free_serialized_string(data);
 801d9cc:	6878      	ldr	r0, [r7, #4]
 801d9ce:	f7e5 fbc7 	bl	8003160 <json_free_serialized_string>
			 RightPos = 2;
 801d9d2:	4b1f      	ldr	r3, [pc, #124]	; (801da50 <wifi_process+0x1dc>)
 801d9d4:	2202      	movs	r2, #2
 801d9d6:	601a      	str	r2, [r3, #0]
 801d9d8:	e01a      	b.n	801da10 <wifi_process+0x19c>
		 } else if (RightPos == 0){
 801d9da:	4b1d      	ldr	r3, [pc, #116]	; (801da50 <wifi_process+0x1dc>)
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d116      	bne.n	801da10 <wifi_process+0x19c>
			 char *data = formate_json_tof(2,0);
 801d9e2:	2100      	movs	r1, #0
 801d9e4:	2002      	movs	r0, #2
 801d9e6:	f7ff fe69 	bl	801d6bc <formate_json_tof>
 801d9ea:	60b8      	str	r0, [r7, #8]
			  if(esp8266_Publish_ToF_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TOF_MQTT)
 801d9ec:	68b8      	ldr	r0, [r7, #8]
 801d9ee:	f7e2 fbc7 	bl	8000180 <strlen>
 801d9f2:	4603      	mov	r3, r0
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	4619      	mov	r1, r3
 801d9f8:	68b8      	ldr	r0, [r7, #8]
 801d9fa:	f000 fddf 	bl	801e5bc <esp8266_Publish_ToF_BrokerMQTT>
 801d9fe:	4603      	mov	r3, r0
 801da00:	2b0c      	cmp	r3, #12
 801da02:	d002      	beq.n	801da0a <wifi_process+0x196>
				printf("APP: B1 esp8266_Publish_ToF_BrokerMQTT() failed\n");
 801da04:	4810      	ldr	r0, [pc, #64]	; (801da48 <wifi_process+0x1d4>)
 801da06:	f002 f95f 	bl	801fcc8 <puts>
			  json_free_serialized_string(data);
 801da0a:	68b8      	ldr	r0, [r7, #8]
 801da0c:	f7e5 fba8 	bl	8003160 <json_free_serialized_string>
		 }

		  int sub_status = check_subscription();
 801da10:	f7ff feb6 	bl	801d780 <check_subscription>
 801da14:	6038      	str	r0, [r7, #0]
		  if(sub_status == 0)
 801da16:	683b      	ldr	r3, [r7, #0]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d102      	bne.n	801da22 <wifi_process+0x1ae>
			  printf("APP: check_subscription() SUB MQTT RCV\n");
 801da1c:	480d      	ldr	r0, [pc, #52]	; (801da54 <wifi_process+0x1e0>)
 801da1e:	f002 f953 	bl	801fcc8 <puts>
		  i++;
 801da22:	69fb      	ldr	r3, [r7, #28]
 801da24:	3301      	adds	r3, #1
 801da26:	61fb      	str	r3, [r7, #28]
	while(i<1)
 801da28:	69fb      	ldr	r3, [r7, #28]
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	f77f af28 	ble.w	801d880 <wifi_process+0xc>
	  }

}
 801da30:	bf00      	nop
 801da32:	bf00      	nop
 801da34:	3720      	adds	r7, #32
 801da36:	46bd      	mov	sp, r7
 801da38:	bd80      	pop	{r7, pc}
 801da3a:	bf00      	nop
 801da3c:	08021f1c 	.word	0x08021f1c
 801da40:	08021f4c 	.word	0x08021f4c
 801da44:	200002d0 	.word	0x200002d0
 801da48:	08021f7c 	.word	0x08021f7c
 801da4c:	200002d8 	.word	0x200002d8
 801da50:	200002d4 	.word	0x200002d4
 801da54:	08021fac 	.word	0x08021fac

0801da58 <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 801da58:	b40f      	push	{r0, r1, r2, r3}
 801da5a:	b580      	push	{r7, lr}
 801da5c:	b082      	sub	sp, #8
 801da5e:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 801da60:	f107 0314 	add.w	r3, r7, #20
 801da64:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 801da66:	683a      	ldr	r2, [r7, #0]
 801da68:	6939      	ldr	r1, [r7, #16]
 801da6a:	4822      	ldr	r0, [pc, #136]	; (801daf4 <uart_esp32_transmit+0x9c>)
 801da6c:	f002 f9fa 	bl	801fe64 <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801da70:	2300      	movs	r3, #0
 801da72:	80fb      	strh	r3, [r7, #6]
 801da74:	e019      	b.n	801daaa <uart_esp32_transmit+0x52>
		j = i + 1;
 801da76:	88fb      	ldrh	r3, [r7, #6]
 801da78:	3301      	adds	r3, #1
 801da7a:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 801da7c:	88fb      	ldrh	r3, [r7, #6]
 801da7e:	4a1d      	ldr	r2, [pc, #116]	; (801daf4 <uart_esp32_transmit+0x9c>)
 801da80:	5cd3      	ldrb	r3, [r2, r3]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d10e      	bne.n	801daa4 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801da86:	e009      	b.n	801da9c <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 801da88:	88ba      	ldrh	r2, [r7, #4]
 801da8a:	88bb      	ldrh	r3, [r7, #4]
 801da8c:	3b01      	subs	r3, #1
 801da8e:	4919      	ldr	r1, [pc, #100]	; (801daf4 <uart_esp32_transmit+0x9c>)
 801da90:	5c89      	ldrb	r1, [r1, r2]
 801da92:	4a18      	ldr	r2, [pc, #96]	; (801daf4 <uart_esp32_transmit+0x9c>)
 801da94:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 801da96:	88bb      	ldrh	r3, [r7, #4]
 801da98:	3301      	adds	r3, #1
 801da9a:	80bb      	strh	r3, [r7, #4]
 801da9c:	88bb      	ldrh	r3, [r7, #4]
 801da9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801daa2:	d3f1      	bcc.n	801da88 <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 801daa4:	88fb      	ldrh	r3, [r7, #6]
 801daa6:	3301      	adds	r3, #1
 801daa8:	80fb      	strh	r3, [r7, #6]
 801daaa:	88fb      	ldrh	r3, [r7, #6]
 801daac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801dab0:	d3e1      	bcc.n	801da76 <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 801dab2:	4810      	ldr	r0, [pc, #64]	; (801daf4 <uart_esp32_transmit+0x9c>)
 801dab4:	f7e2 fb64 	bl	8000180 <strlen>
 801dab8:	4603      	mov	r3, r0
 801daba:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 801dabc:	88fa      	ldrh	r2, [r7, #6]
 801dabe:	2364      	movs	r3, #100	; 0x64
 801dac0:	490c      	ldr	r1, [pc, #48]	; (801daf4 <uart_esp32_transmit+0x9c>)
 801dac2:	480d      	ldr	r0, [pc, #52]	; (801daf8 <uart_esp32_transmit+0xa0>)
 801dac4:	f7fe f9e0 	bl	801be88 <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 801dac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dacc:	2100      	movs	r1, #0
 801dace:	4809      	ldr	r0, [pc, #36]	; (801daf4 <uart_esp32_transmit+0x9c>)
 801dad0:	f001 fb22 	bl	801f118 <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801dad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dad8:	2100      	movs	r1, #0
 801dada:	4808      	ldr	r0, [pc, #32]	; (801dafc <uart_esp32_transmit+0xa4>)
 801dadc:	f001 fb1c 	bl	801f118 <memset>
	UART_ESP32_RecvEndFlag = 0;
 801dae0:	4b07      	ldr	r3, [pc, #28]	; (801db00 <uart_esp32_transmit+0xa8>)
 801dae2:	2200      	movs	r2, #0
 801dae4:	701a      	strb	r2, [r3, #0]
}
 801dae6:	bf00      	nop
 801dae8:	3708      	adds	r7, #8
 801daea:	46bd      	mov	sp, r7
 801daec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801daf0:	b004      	add	sp, #16
 801daf2:	4770      	bx	lr
 801daf4:	2000896c 	.word	0x2000896c
 801daf8:	20000388 	.word	0x20000388
 801dafc:	2000916c 	.word	0x2000916c
 801db00:	2000996d 	.word	0x2000996d

0801db04 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 801db04:	b580      	push	{r7, lr}
 801db06:	b082      	sub	sp, #8
 801db08:	af00      	add	r7, sp, #0
 801db0a:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 801db0c:	4910      	ldr	r1, [pc, #64]	; (801db50 <esp8266_CheckRespond+0x4c>)
 801db0e:	4811      	ldr	r0, [pc, #68]	; (801db54 <esp8266_CheckRespond+0x50>)
 801db10:	f002 f854 	bl	801fbbc <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 801db14:	6879      	ldr	r1, [r7, #4]
 801db16:	480e      	ldr	r0, [pc, #56]	; (801db50 <esp8266_CheckRespond+0x4c>)
 801db18:	f002 f978 	bl	801fe0c <strstr>
 801db1c:	4603      	mov	r3, r0
 801db1e:	2b00      	cmp	r3, #0
 801db20:	d00a      	beq.n	801db38 <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 801db22:	480d      	ldr	r0, [pc, #52]	; (801db58 <esp8266_CheckRespond+0x54>)
 801db24:	f002 f8d0 	bl	801fcc8 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801db28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801db2c:	2100      	movs	r1, #0
 801db2e:	4808      	ldr	r0, [pc, #32]	; (801db50 <esp8266_CheckRespond+0x4c>)
 801db30:	f001 faf2 	bl	801f118 <memset>
		return _MATCHOK;
 801db34:	2304      	movs	r3, #4
 801db36:	e006      	b.n	801db46 <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801db38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801db3c:	2100      	movs	r1, #0
 801db3e:	4804      	ldr	r0, [pc, #16]	; (801db50 <esp8266_CheckRespond+0x4c>)
 801db40:	f001 faea 	bl	801f118 <memset>
	return _MATCHERROR;
 801db44:	2303      	movs	r3, #3
}
 801db46:	4618      	mov	r0, r3
 801db48:	3708      	adds	r7, #8
 801db4a:	46bd      	mov	sp, r7
 801db4c:	bd80      	pop	{r7, pc}
 801db4e:	bf00      	nop
 801db50:	2000916c 	.word	0x2000916c
 801db54:	08021fd4 	.word	0x08021fd4
 801db58:	08021fe8 	.word	0x08021fe8

0801db5c <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 801db5c:	b580      	push	{r7, lr}
 801db5e:	b086      	sub	sp, #24
 801db60:	af00      	add	r7, sp, #0
 801db62:	60f8      	str	r0, [r7, #12]
 801db64:	60b9      	str	r1, [r7, #8]
 801db66:	607a      	str	r2, [r7, #4]
 801db68:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 801db6e:	2300      	movs	r3, #0
 801db70:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 801db72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801db76:	2100      	movs	r1, #0
 801db78:	4826      	ldr	r0, [pc, #152]	; (801dc14 <esp8266_TransmitCmd+0xb8>)
 801db7a:	f001 facd 	bl	801f118 <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 801db7e:	68f9      	ldr	r1, [r7, #12]
 801db80:	4825      	ldr	r0, [pc, #148]	; (801dc18 <esp8266_TransmitCmd+0xbc>)
 801db82:	f002 f81b 	bl	801fbbc <iprintf>
	if (newline == 0)
 801db86:	78fb      	ldrb	r3, [r7, #3]
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d104      	bne.n	801db96 <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 801db8c:	68f9      	ldr	r1, [r7, #12]
 801db8e:	4823      	ldr	r0, [pc, #140]	; (801dc1c <esp8266_TransmitCmd+0xc0>)
 801db90:	f7ff ff62 	bl	801da58 <uart_esp32_transmit>
 801db94:	e01e      	b.n	801dbd4 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 801db96:	68f9      	ldr	r1, [r7, #12]
 801db98:	4821      	ldr	r0, [pc, #132]	; (801dc20 <esp8266_TransmitCmd+0xc4>)
 801db9a:	f7ff ff5d 	bl	801da58 <uart_esp32_transmit>

	while (timeout--) {
 801db9e:	e019      	b.n	801dbd4 <esp8266_TransmitCmd+0x78>
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 801dba0:	4b20      	ldr	r3, [pc, #128]	; (801dc24 <esp8266_TransmitCmd+0xc8>)
 801dba2:	781b      	ldrb	r3, [r3, #0]
 801dba4:	b2db      	uxtb	r3, r3
 801dba6:	2b01      	cmp	r3, #1
 801dba8:	d111      	bne.n	801dbce <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 801dbaa:	68b8      	ldr	r0, [r7, #8]
 801dbac:	f7ff ffaa 	bl	801db04 <esp8266_CheckRespond>
 801dbb0:	4603      	mov	r3, r0
 801dbb2:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
			}

			UART_ESP32_RxLen = 0;
 801dbb4:	4b1c      	ldr	r3, [pc, #112]	; (801dc28 <esp8266_TransmitCmd+0xcc>)
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801dbba:	4b1a      	ldr	r3, [pc, #104]	; (801dc24 <esp8266_TransmitCmd+0xc8>)
 801dbbc:	2200      	movs	r2, #0
 801dbbe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801dbc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dbc4:	4913      	ldr	r1, [pc, #76]	; (801dc14 <esp8266_TransmitCmd+0xb8>)
 801dbc6:	4819      	ldr	r0, [pc, #100]	; (801dc2c <esp8266_TransmitCmd+0xd0>)
 801dbc8:	f7fe f9ec 	bl	801bfa4 <HAL_UART_Receive_DMA>

			break;
 801dbcc:	e007      	b.n	801dbde <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 801dbce:	2001      	movs	r0, #1
 801dbd0:	f7fa f9d4 	bl	8017f7c <HAL_Delay>
	while (timeout--) {
 801dbd4:	697b      	ldr	r3, [r7, #20]
 801dbd6:	1e5a      	subs	r2, r3, #1
 801dbd8:	617a      	str	r2, [r7, #20]
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d1e0      	bne.n	801dba0 <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 801dbde:	7cfb      	ldrb	r3, [r7, #19]
 801dbe0:	2b03      	cmp	r3, #3
 801dbe2:	d104      	bne.n	801dbee <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 801dbe4:	4812      	ldr	r0, [pc, #72]	; (801dc30 <esp8266_TransmitCmd+0xd4>)
 801dbe6:	f002 f86f 	bl	801fcc8 <puts>
		return check;
 801dbea:	7cfb      	ldrb	r3, [r7, #19]
 801dbec:	e00e      	b.n	801dc0c <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 801dbee:	697b      	ldr	r3, [r7, #20]
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	dc07      	bgt.n	801dc04 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 801dbf4:	480f      	ldr	r0, [pc, #60]	; (801dc34 <esp8266_TransmitCmd+0xd8>)
 801dbf6:	f002 f867 	bl	801fcc8 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801dbfa:	480f      	ldr	r0, [pc, #60]	; (801dc38 <esp8266_TransmitCmd+0xdc>)
 801dbfc:	f002 f864 	bl	801fcc8 <puts>
		return _TIMEOUT;
 801dc00:	2302      	movs	r3, #2
 801dc02:	e003      	b.n	801dc0c <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 801dc04:	480d      	ldr	r0, [pc, #52]	; (801dc3c <esp8266_TransmitCmd+0xe0>)
 801dc06:	f002 f85f 	bl	801fcc8 <puts>
	return _SUCCEED;
 801dc0a:	2301      	movs	r3, #1
}
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	3718      	adds	r7, #24
 801dc10:	46bd      	mov	sp, r7
 801dc12:	bd80      	pop	{r7, pc}
 801dc14:	2000916c 	.word	0x2000916c
 801dc18:	08022000 	.word	0x08022000
 801dc1c:	08022020 	.word	0x08022020
 801dc20:	08022024 	.word	0x08022024
 801dc24:	2000996d 	.word	0x2000996d
 801dc28:	2000996c 	.word	0x2000996c
 801dc2c:	20000388 	.word	0x20000388
 801dc30:	0802202c 	.word	0x0802202c
 801dc34:	08022048 	.word	0x08022048
 801dc38:	08022060 	.word	0x08022060
 801dc3c:	08022074 	.word	0x08022074

0801dc40 <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 801dc40:	b580      	push	{r7, lr}
 801dc42:	b084      	sub	sp, #16
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 801dc4c:	2200      	movs	r2, #0
 801dc4e:	2108      	movs	r1, #8
 801dc50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801dc54:	f7fb f85e 	bl	8018d14 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 801dc58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801dc5c:	f7fa f98e 	bl	8017f7c <HAL_Delay>
	WIFI_RST_Disable();
 801dc60:	2201      	movs	r2, #1
 801dc62:	2108      	movs	r1, #8
 801dc64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801dc68:	f7fb f854 	bl	8018d14 <HAL_GPIO_WritePin>
	while (timeout--) {
 801dc6c:	e01b      	b.n	801dca6 <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 801dc6e:	4b18      	ldr	r3, [pc, #96]	; (801dcd0 <esp8266_HardwareReset+0x90>)
 801dc70:	781b      	ldrb	r3, [r3, #0]
 801dc72:	b2db      	uxtb	r3, r3
 801dc74:	2b01      	cmp	r3, #1
 801dc76:	d113      	bne.n	801dca0 <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 801dc78:	4816      	ldr	r0, [pc, #88]	; (801dcd4 <esp8266_HardwareReset+0x94>)
 801dc7a:	f002 f825 	bl	801fcc8 <puts>
			HAL_Delay(100);
 801dc7e:	2064      	movs	r0, #100	; 0x64
 801dc80:	f7fa f97c 	bl	8017f7c <HAL_Delay>

			UART_ESP32_RxLen = 0;
 801dc84:	4b14      	ldr	r3, [pc, #80]	; (801dcd8 <esp8266_HardwareReset+0x98>)
 801dc86:	2200      	movs	r2, #0
 801dc88:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 801dc8a:	4b11      	ldr	r3, [pc, #68]	; (801dcd0 <esp8266_HardwareReset+0x90>)
 801dc8c:	2200      	movs	r2, #0
 801dc8e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 801dc90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dc94:	4911      	ldr	r1, [pc, #68]	; (801dcdc <esp8266_HardwareReset+0x9c>)
 801dc96:	4812      	ldr	r0, [pc, #72]	; (801dce0 <esp8266_HardwareReset+0xa0>)
 801dc98:	f7fe f984 	bl	801bfa4 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	e013      	b.n	801dcc8 <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 801dca0:	2001      	movs	r0, #1
 801dca2:	f7fa f96b 	bl	8017f7c <HAL_Delay>
	while (timeout--) {
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	1e5a      	subs	r2, r3, #1
 801dcaa:	60fa      	str	r2, [r7, #12]
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	d1de      	bne.n	801dc6e <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	dc07      	bgt.n	801dcc6 <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 801dcb6:	480b      	ldr	r0, [pc, #44]	; (801dce4 <esp8266_HardwareReset+0xa4>)
 801dcb8:	f002 f806 	bl	801fcc8 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 801dcbc:	480a      	ldr	r0, [pc, #40]	; (801dce8 <esp8266_HardwareReset+0xa8>)
 801dcbe:	f002 f803 	bl	801fcc8 <puts>
		return _TIMEOUT;
 801dcc2:	2302      	movs	r3, #2
 801dcc4:	e000      	b.n	801dcc8 <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 801dcc6:	23ff      	movs	r3, #255	; 0xff
}
 801dcc8:	4618      	mov	r0, r3
 801dcca:	3710      	adds	r7, #16
 801dccc:	46bd      	mov	sp, r7
 801dcce:	bd80      	pop	{r7, pc}
 801dcd0:	2000996d 	.word	0x2000996d
 801dcd4:	08022084 	.word	0x08022084
 801dcd8:	2000996c 	.word	0x2000996c
 801dcdc:	2000916c 	.word	0x2000916c
 801dce0:	20000388 	.word	0x20000388
 801dce4:	08022048 	.word	0x08022048
 801dce8:	08022060 	.word	0x08022060

0801dcec <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 801dcec:	b580      	push	{r7, lr}
 801dcee:	b082      	sub	sp, #8
 801dcf0:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 801dcf2:	2333      	movs	r3, #51	; 0x33
 801dcf4:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801dcf6:	88fb      	ldrh	r3, [r7, #6]
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f001 f9d5 	bl	801f0a8 <malloc>
 801dcfe:	4603      	mov	r3, r0
 801dd00:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 801dd02:	88fb      	ldrh	r3, [r7, #6]
 801dd04:	461a      	mov	r2, r3
 801dd06:	2100      	movs	r1, #0
 801dd08:	6838      	ldr	r0, [r7, #0]
 801dd0a:	f001 fa05 	bl	801f118 <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 801dd0e:	4b0e      	ldr	r3, [pc, #56]	; (801dd48 <esp8266_ConnectAP+0x5c>)
 801dd10:	4a0e      	ldr	r2, [pc, #56]	; (801dd4c <esp8266_ConnectAP+0x60>)
 801dd12:	490f      	ldr	r1, [pc, #60]	; (801dd50 <esp8266_ConnectAP+0x64>)
 801dd14:	6838      	ldr	r0, [r7, #0]
 801dd16:	f001 ffef 	bl	801fcf8 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 801dd1a:	2301      	movs	r3, #1
 801dd1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd20:	490c      	ldr	r1, [pc, #48]	; (801dd54 <esp8266_ConnectAP+0x68>)
 801dd22:	6838      	ldr	r0, [r7, #0]
 801dd24:	f7ff ff1a 	bl	801db5c <esp8266_TransmitCmd>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	2b01      	cmp	r3, #1
 801dd2c:	d103      	bne.n	801dd36 <esp8266_ConnectAP+0x4a>
		wifi_state = _ONLINE;
 801dd2e:	4b0a      	ldr	r3, [pc, #40]	; (801dd58 <esp8266_ConnectAP+0x6c>)
 801dd30:	2205      	movs	r2, #5
 801dd32:	701a      	strb	r2, [r3, #0]
 801dd34:	e002      	b.n	801dd3c <esp8266_ConnectAP+0x50>
	else
		wifi_state = _OFFLINE;
 801dd36:	4b08      	ldr	r3, [pc, #32]	; (801dd58 <esp8266_ConnectAP+0x6c>)
 801dd38:	2206      	movs	r2, #6
 801dd3a:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 801dd3c:	4b06      	ldr	r3, [pc, #24]	; (801dd58 <esp8266_ConnectAP+0x6c>)
 801dd3e:	781b      	ldrb	r3, [r3, #0]
}
 801dd40:	4618      	mov	r0, r3
 801dd42:	3708      	adds	r7, #8
 801dd44:	46bd      	mov	sp, r7
 801dd46:	bd80      	pop	{r7, pc}
 801dd48:	080220a0 	.word	0x080220a0
 801dd4c:	080220ac 	.word	0x080220ac
 801dd50:	080220bc 	.word	0x080220bc
 801dd54:	080220d0 	.word	0x080220d0
 801dd58:	20000089 	.word	0x20000089

0801dd5c <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	b082      	sub	sp, #8
 801dd60:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 801dd62:	2300      	movs	r3, #0
 801dd64:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 801dd66:	48a8      	ldr	r0, [pc, #672]	; (801e008 <esp8266_SetupIP+0x2ac>)
 801dd68:	f001 ffae 	bl	801fcc8 <puts>
	wifi_config_step++;
 801dd6c:	4ba7      	ldr	r3, [pc, #668]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dd6e:	781b      	ldrb	r3, [r3, #0]
 801dd70:	3301      	adds	r3, #1
 801dd72:	b2da      	uxtb	r2, r3
 801dd74:	4ba5      	ldr	r3, [pc, #660]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dd76:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801dd78:	e019      	b.n	801ddae <esp8266_SetupIP+0x52>
		retry_count++;
 801dd7a:	79fb      	ldrb	r3, [r7, #7]
 801dd7c:	3301      	adds	r3, #1
 801dd7e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801dd80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801dd84:	f7fa f8fa 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801dd88:	79fb      	ldrb	r3, [r7, #7]
 801dd8a:	2b03      	cmp	r3, #3
 801dd8c:	d90f      	bls.n	801ddae <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 801dd8e:	48a0      	ldr	r0, [pc, #640]	; (801e010 <esp8266_SetupIP+0x2b4>)
 801dd90:	f001 ff9a 	bl	801fcc8 <puts>
			retry_count = 0;
 801dd94:	2300      	movs	r3, #0
 801dd96:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 801dd98:	4b9e      	ldr	r3, [pc, #632]	; (801e014 <esp8266_SetupIP+0x2b8>)
 801dd9a:	22ee      	movs	r2, #238	; 0xee
 801dd9c:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 801dd9e:	4b9b      	ldr	r3, [pc, #620]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dda0:	781b      	ldrb	r3, [r3, #0]
 801dda2:	3b01      	subs	r3, #1
 801dda4:	b2da      	uxtb	r2, r3
 801dda6:	4b99      	ldr	r3, [pc, #612]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dda8:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801ddaa:	2300      	movs	r3, #0
 801ddac:	e1e1      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 801ddae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801ddb2:	f7ff ff45 	bl	801dc40 <esp8266_HardwareReset>
 801ddb6:	4603      	mov	r3, r0
 801ddb8:	2b01      	cmp	r3, #1
 801ddba:	d1de      	bne.n	801dd7a <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 801ddbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801ddc0:	f7fa f8dc 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 801ddc8:	4893      	ldr	r0, [pc, #588]	; (801e018 <esp8266_SetupIP+0x2bc>)
 801ddca:	f001 ff7d 	bl	801fcc8 <puts>
	wifi_config_step++;
 801ddce:	4b8f      	ldr	r3, [pc, #572]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801ddd0:	781b      	ldrb	r3, [r3, #0]
 801ddd2:	3301      	adds	r3, #1
 801ddd4:	b2da      	uxtb	r2, r3
 801ddd6:	4b8d      	ldr	r3, [pc, #564]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801ddd8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801ddda:	e016      	b.n	801de0a <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 801dddc:	79fb      	ldrb	r3, [r7, #7]
 801ddde:	3301      	adds	r3, #1
 801dde0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801dde2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801dde6:	f7fa f8c9 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801ddea:	79fb      	ldrb	r3, [r7, #7]
 801ddec:	2b03      	cmp	r3, #3
 801ddee:	d90c      	bls.n	801de0a <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 801ddf0:	488a      	ldr	r0, [pc, #552]	; (801e01c <esp8266_SetupIP+0x2c0>)
 801ddf2:	f001 ff69 	bl	801fcc8 <puts>
			retry_count = 0;
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801ddfa:	4b84      	ldr	r3, [pc, #528]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801ddfc:	781b      	ldrb	r3, [r3, #0]
 801ddfe:	3b01      	subs	r3, #1
 801de00:	b2da      	uxtb	r2, r3
 801de02:	4b82      	ldr	r3, [pc, #520]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801de04:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801de06:	2300      	movs	r3, #0
 801de08:	e1b3      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 801de0a:	2301      	movs	r3, #1
 801de0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801de10:	4983      	ldr	r1, [pc, #524]	; (801e020 <esp8266_SetupIP+0x2c4>)
 801de12:	4884      	ldr	r0, [pc, #528]	; (801e024 <esp8266_SetupIP+0x2c8>)
 801de14:	f7ff fea2 	bl	801db5c <esp8266_TransmitCmd>
 801de18:	4603      	mov	r3, r0
 801de1a:	2b01      	cmp	r3, #1
 801de1c:	d1de      	bne.n	801dddc <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 801de1e:	2064      	movs	r0, #100	; 0x64
 801de20:	f7fa f8ac 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801de24:	2300      	movs	r3, #0
 801de26:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 801de28:	487f      	ldr	r0, [pc, #508]	; (801e028 <esp8266_SetupIP+0x2cc>)
 801de2a:	f001 ff4d 	bl	801fcc8 <puts>
	wifi_config_step++;
 801de2e:	4b77      	ldr	r3, [pc, #476]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801de30:	781b      	ldrb	r3, [r3, #0]
 801de32:	3301      	adds	r3, #1
 801de34:	b2da      	uxtb	r2, r3
 801de36:	4b75      	ldr	r3, [pc, #468]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801de38:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801de3a:	e016      	b.n	801de6a <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801de3c:	79fb      	ldrb	r3, [r7, #7]
 801de3e:	3301      	adds	r3, #1
 801de40:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801de42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801de46:	f7fa f899 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801de4a:	79fb      	ldrb	r3, [r7, #7]
 801de4c:	2b03      	cmp	r3, #3
 801de4e:	d90c      	bls.n	801de6a <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 801de50:	4876      	ldr	r0, [pc, #472]	; (801e02c <esp8266_SetupIP+0x2d0>)
 801de52:	f001 ff39 	bl	801fcc8 <puts>
			retry_count = 0;
 801de56:	2300      	movs	r3, #0
 801de58:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801de5a:	4b6c      	ldr	r3, [pc, #432]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801de5c:	781b      	ldrb	r3, [r3, #0]
 801de5e:	3b01      	subs	r3, #1
 801de60:	b2da      	uxtb	r2, r3
 801de62:	4b6a      	ldr	r3, [pc, #424]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801de64:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801de66:	2300      	movs	r3, #0
 801de68:	e183      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 801de6a:	2301      	movs	r3, #1
 801de6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801de70:	496b      	ldr	r1, [pc, #428]	; (801e020 <esp8266_SetupIP+0x2c4>)
 801de72:	486f      	ldr	r0, [pc, #444]	; (801e030 <esp8266_SetupIP+0x2d4>)
 801de74:	f7ff fe72 	bl	801db5c <esp8266_TransmitCmd>
 801de78:	4603      	mov	r3, r0
 801de7a:	2b01      	cmp	r3, #1
 801de7c:	d1de      	bne.n	801de3c <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 801de7e:	2064      	movs	r0, #100	; 0x64
 801de80:	f7fa f87c 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801de84:	2300      	movs	r3, #0
 801de86:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 801de88:	486a      	ldr	r0, [pc, #424]	; (801e034 <esp8266_SetupIP+0x2d8>)
 801de8a:	f001 ff1d 	bl	801fcc8 <puts>
	wifi_config_step++;
 801de8e:	4b5f      	ldr	r3, [pc, #380]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801de90:	781b      	ldrb	r3, [r3, #0]
 801de92:	3301      	adds	r3, #1
 801de94:	b2da      	uxtb	r2, r3
 801de96:	4b5d      	ldr	r3, [pc, #372]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801de98:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801de9a:	e016      	b.n	801deca <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801de9c:	79fb      	ldrb	r3, [r7, #7]
 801de9e:	3301      	adds	r3, #1
 801dea0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801dea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801dea6:	f7fa f869 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801deaa:	79fb      	ldrb	r3, [r7, #7]
 801deac:	2b03      	cmp	r3, #3
 801deae:	d90c      	bls.n	801deca <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 801deb0:	4861      	ldr	r0, [pc, #388]	; (801e038 <esp8266_SetupIP+0x2dc>)
 801deb2:	f001 ff09 	bl	801fcc8 <puts>
			retry_count = 0;
 801deb6:	2300      	movs	r3, #0
 801deb8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801deba:	4b54      	ldr	r3, [pc, #336]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801debc:	781b      	ldrb	r3, [r3, #0]
 801debe:	3b01      	subs	r3, #1
 801dec0:	b2da      	uxtb	r2, r3
 801dec2:	4b52      	ldr	r3, [pc, #328]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dec4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801dec6:	2300      	movs	r3, #0
 801dec8:	e153      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 801deca:	2301      	movs	r3, #1
 801decc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801ded0:	4953      	ldr	r1, [pc, #332]	; (801e020 <esp8266_SetupIP+0x2c4>)
 801ded2:	485a      	ldr	r0, [pc, #360]	; (801e03c <esp8266_SetupIP+0x2e0>)
 801ded4:	f7ff fe42 	bl	801db5c <esp8266_TransmitCmd>
 801ded8:	4603      	mov	r3, r0
 801deda:	2b01      	cmp	r3, #1
 801dedc:	d1de      	bne.n	801de9c <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 801dede:	2064      	movs	r0, #100	; 0x64
 801dee0:	f7fa f84c 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801dee4:	2300      	movs	r3, #0
 801dee6:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 801dee8:	4855      	ldr	r0, [pc, #340]	; (801e040 <esp8266_SetupIP+0x2e4>)
 801deea:	f001 feed 	bl	801fcc8 <puts>
	wifi_config_step++;
 801deee:	4b47      	ldr	r3, [pc, #284]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801def0:	781b      	ldrb	r3, [r3, #0]
 801def2:	3301      	adds	r3, #1
 801def4:	b2da      	uxtb	r2, r3
 801def6:	4b45      	ldr	r3, [pc, #276]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801def8:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 801defa:	e016      	b.n	801df2a <esp8266_SetupIP+0x1ce>
		retry_count++;
 801defc:	79fb      	ldrb	r3, [r7, #7]
 801defe:	3301      	adds	r3, #1
 801df00:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801df02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801df06:	f7fa f839 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801df0a:	79fb      	ldrb	r3, [r7, #7]
 801df0c:	2b03      	cmp	r3, #3
 801df0e:	d90c      	bls.n	801df2a <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 801df10:	484c      	ldr	r0, [pc, #304]	; (801e044 <esp8266_SetupIP+0x2e8>)
 801df12:	f001 fed9 	bl	801fcc8 <puts>
			retry_count = 0;
 801df16:	2300      	movs	r3, #0
 801df18:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801df1a:	4b3c      	ldr	r3, [pc, #240]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801df1c:	781b      	ldrb	r3, [r3, #0]
 801df1e:	3b01      	subs	r3, #1
 801df20:	b2da      	uxtb	r2, r3
 801df22:	4b3a      	ldr	r3, [pc, #232]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801df24:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801df26:	2300      	movs	r3, #0
 801df28:	e123      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 801df2a:	f7ff fedf 	bl	801dcec <esp8266_ConnectAP>
 801df2e:	4603      	mov	r3, r0
 801df30:	2b05      	cmp	r3, #5
 801df32:	d1e3      	bne.n	801defc <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 801df34:	2064      	movs	r0, #100	; 0x64
 801df36:	f7fa f821 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801df3a:	2300      	movs	r3, #0
 801df3c:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 801df3e:	4b42      	ldr	r3, [pc, #264]	; (801e048 <esp8266_SetupIP+0x2ec>)
 801df40:	781b      	ldrb	r3, [r3, #0]
 801df42:	2b05      	cmp	r3, #5
 801df44:	d123      	bne.n	801df8e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801df46:	e018      	b.n	801df7a <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801df48:	79fb      	ldrb	r3, [r7, #7]
 801df4a:	3301      	adds	r3, #1
 801df4c:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801df4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801df52:	f7fa f813 	bl	8017f7c <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801df56:	79fb      	ldrb	r3, [r7, #7]
 801df58:	2b01      	cmp	r3, #1
 801df5a:	d90e      	bls.n	801df7a <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 801df5c:	483b      	ldr	r0, [pc, #236]	; (801e04c <esp8266_SetupIP+0x2f0>)
 801df5e:	f001 feb3 	bl	801fcc8 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801df62:	483b      	ldr	r0, [pc, #236]	; (801e050 <esp8266_SetupIP+0x2f4>)
 801df64:	f001 fe2a 	bl	801fbbc <iprintf>
				retry_count = 0;
 801df68:	2300      	movs	r3, #0
 801df6a:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801df6c:	4b27      	ldr	r3, [pc, #156]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801df6e:	781b      	ldrb	r3, [r3, #0]
 801df70:	3b01      	subs	r3, #1
 801df72:	b2da      	uxtb	r2, r3
 801df74:	4b25      	ldr	r3, [pc, #148]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801df76:	701a      	strb	r2, [r3, #0]
				break;
 801df78:	e009      	b.n	801df8e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 801df7a:	2301      	movs	r3, #1
 801df7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801df80:	4927      	ldr	r1, [pc, #156]	; (801e020 <esp8266_SetupIP+0x2c4>)
 801df82:	4834      	ldr	r0, [pc, #208]	; (801e054 <esp8266_SetupIP+0x2f8>)
 801df84:	f7ff fdea 	bl	801db5c <esp8266_TransmitCmd>
 801df88:	4603      	mov	r3, r0
 801df8a:	2b01      	cmp	r3, #1
 801df8c:	d1dc      	bne.n	801df48 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 801df8e:	2064      	movs	r0, #100	; 0x64
 801df90:	f7f9 fff4 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801df94:	2300      	movs	r3, #0
 801df96:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 801df98:	4b2b      	ldr	r3, [pc, #172]	; (801e048 <esp8266_SetupIP+0x2ec>)
 801df9a:	781b      	ldrb	r3, [r3, #0]
 801df9c:	2b05      	cmp	r3, #5
 801df9e:	d123      	bne.n	801dfe8 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801dfa0:	e018      	b.n	801dfd4 <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 801dfa2:	79fb      	ldrb	r3, [r7, #7]
 801dfa4:	3301      	adds	r3, #1
 801dfa6:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 801dfa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801dfac:	f7f9 ffe6 	bl	8017f7c <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 801dfb0:	79fb      	ldrb	r3, [r7, #7]
 801dfb2:	2b01      	cmp	r3, #1
 801dfb4:	d90e      	bls.n	801dfd4 <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 801dfb6:	4828      	ldr	r0, [pc, #160]	; (801e058 <esp8266_SetupIP+0x2fc>)
 801dfb8:	f001 fe86 	bl	801fcc8 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 801dfbc:	4824      	ldr	r0, [pc, #144]	; (801e050 <esp8266_SetupIP+0x2f4>)
 801dfbe:	f001 fdfd 	bl	801fbbc <iprintf>
				retry_count = 0;
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 801dfc6:	4b11      	ldr	r3, [pc, #68]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dfc8:	781b      	ldrb	r3, [r3, #0]
 801dfca:	3b01      	subs	r3, #1
 801dfcc:	b2da      	uxtb	r2, r3
 801dfce:	4b0f      	ldr	r3, [pc, #60]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dfd0:	701a      	strb	r2, [r3, #0]
				break;
 801dfd2:	e009      	b.n	801dfe8 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 801dfd4:	2301      	movs	r3, #1
 801dfd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dfda:	4911      	ldr	r1, [pc, #68]	; (801e020 <esp8266_SetupIP+0x2c4>)
 801dfdc:	481f      	ldr	r0, [pc, #124]	; (801e05c <esp8266_SetupIP+0x300>)
 801dfde:	f7ff fdbd 	bl	801db5c <esp8266_TransmitCmd>
 801dfe2:	4603      	mov	r3, r0
 801dfe4:	2b01      	cmp	r3, #1
 801dfe6:	d1dc      	bne.n	801dfa2 <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 801dfe8:	2064      	movs	r0, #100	; 0x64
 801dfea:	f7f9 ffc7 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801dfee:	2300      	movs	r3, #0
 801dff0:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 801dff2:	481b      	ldr	r0, [pc, #108]	; (801e060 <esp8266_SetupIP+0x304>)
 801dff4:	f001 fe68 	bl	801fcc8 <puts>
	wifi_config_step++;
 801dff8:	4b04      	ldr	r3, [pc, #16]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801dffa:	781b      	ldrb	r3, [r3, #0]
 801dffc:	3301      	adds	r3, #1
 801dffe:	b2da      	uxtb	r2, r3
 801e000:	4b02      	ldr	r3, [pc, #8]	; (801e00c <esp8266_SetupIP+0x2b0>)
 801e002:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801e004:	e045      	b.n	801e092 <esp8266_SetupIP+0x336>
 801e006:	bf00      	nop
 801e008:	08022120 	.word	0x08022120
 801e00c:	2000896a 	.word	0x2000896a
 801e010:	08022140 	.word	0x08022140
 801e014:	2000008a 	.word	0x2000008a
 801e018:	0802218c 	.word	0x0802218c
 801e01c:	080221ac 	.word	0x080221ac
 801e020:	080221c8 	.word	0x080221c8
 801e024:	080221cc 	.word	0x080221cc
 801e028:	080221d4 	.word	0x080221d4
 801e02c:	080221f4 	.word	0x080221f4
 801e030:	08022214 	.word	0x08022214
 801e034:	08022220 	.word	0x08022220
 801e038:	08022248 	.word	0x08022248
 801e03c:	0802226c 	.word	0x0802226c
 801e040:	0802227c 	.word	0x0802227c
 801e044:	0802229c 	.word	0x0802229c
 801e048:	20000089 	.word	0x20000089
 801e04c:	080222bc 	.word	0x080222bc
 801e050:	080222d8 	.word	0x080222d8
 801e054:	08022310 	.word	0x08022310
 801e058:	0802231c 	.word	0x0802231c
 801e05c:	08022338 	.word	0x08022338
 801e060:	08022344 	.word	0x08022344
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e064:	79fb      	ldrb	r3, [r7, #7]
 801e066:	3301      	adds	r3, #1
 801e068:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e06a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e06e:	f7f9 ff85 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e072:	79fb      	ldrb	r3, [r7, #7]
 801e074:	2b03      	cmp	r3, #3
 801e076:	d90c      	bls.n	801e092 <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 801e078:	4840      	ldr	r0, [pc, #256]	; (801e17c <esp8266_SetupIP+0x420>)
 801e07a:	f001 fe25 	bl	801fcc8 <puts>
			retry_count = 0;
 801e07e:	2300      	movs	r3, #0
 801e080:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e082:	4b3f      	ldr	r3, [pc, #252]	; (801e180 <esp8266_SetupIP+0x424>)
 801e084:	781b      	ldrb	r3, [r3, #0]
 801e086:	3b01      	subs	r3, #1
 801e088:	b2da      	uxtb	r2, r3
 801e08a:	4b3d      	ldr	r3, [pc, #244]	; (801e180 <esp8266_SetupIP+0x424>)
 801e08c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e08e:	2300      	movs	r3, #0
 801e090:	e06f      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 801e092:	2301      	movs	r3, #1
 801e094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e098:	493a      	ldr	r1, [pc, #232]	; (801e184 <esp8266_SetupIP+0x428>)
 801e09a:	483b      	ldr	r0, [pc, #236]	; (801e188 <esp8266_SetupIP+0x42c>)
 801e09c:	f7ff fd5e 	bl	801db5c <esp8266_TransmitCmd>
 801e0a0:	4603      	mov	r3, r0
 801e0a2:	2b01      	cmp	r3, #1
 801e0a4:	d1de      	bne.n	801e064 <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 801e0a6:	2064      	movs	r0, #100	; 0x64
 801e0a8:	f7f9 ff68 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 801e0b0:	4836      	ldr	r0, [pc, #216]	; (801e18c <esp8266_SetupIP+0x430>)
 801e0b2:	f001 fe09 	bl	801fcc8 <puts>
	wifi_config_step++;
 801e0b6:	4b32      	ldr	r3, [pc, #200]	; (801e180 <esp8266_SetupIP+0x424>)
 801e0b8:	781b      	ldrb	r3, [r3, #0]
 801e0ba:	3301      	adds	r3, #1
 801e0bc:	b2da      	uxtb	r2, r3
 801e0be:	4b30      	ldr	r3, [pc, #192]	; (801e180 <esp8266_SetupIP+0x424>)
 801e0c0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801e0c2:	e016      	b.n	801e0f2 <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e0c4:	79fb      	ldrb	r3, [r7, #7]
 801e0c6:	3301      	adds	r3, #1
 801e0c8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e0ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e0ce:	f7f9 ff55 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e0d2:	79fb      	ldrb	r3, [r7, #7]
 801e0d4:	2b03      	cmp	r3, #3
 801e0d6:	d90c      	bls.n	801e0f2 <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 801e0d8:	482d      	ldr	r0, [pc, #180]	; (801e190 <esp8266_SetupIP+0x434>)
 801e0da:	f001 fdf5 	bl	801fcc8 <puts>
			retry_count = 0;
 801e0de:	2300      	movs	r3, #0
 801e0e0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e0e2:	4b27      	ldr	r3, [pc, #156]	; (801e180 <esp8266_SetupIP+0x424>)
 801e0e4:	781b      	ldrb	r3, [r3, #0]
 801e0e6:	3b01      	subs	r3, #1
 801e0e8:	b2da      	uxtb	r2, r3
 801e0ea:	4b25      	ldr	r3, [pc, #148]	; (801e180 <esp8266_SetupIP+0x424>)
 801e0ec:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	e03f      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 801e0f2:	2301      	movs	r3, #1
 801e0f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e0f8:	4922      	ldr	r1, [pc, #136]	; (801e184 <esp8266_SetupIP+0x428>)
 801e0fa:	4826      	ldr	r0, [pc, #152]	; (801e194 <esp8266_SetupIP+0x438>)
 801e0fc:	f7ff fd2e 	bl	801db5c <esp8266_TransmitCmd>
 801e100:	4603      	mov	r3, r0
 801e102:	2b01      	cmp	r3, #1
 801e104:	d1de      	bne.n	801e0c4 <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 801e106:	2064      	movs	r0, #100	; 0x64
 801e108:	f7f9 ff38 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e10c:	2300      	movs	r3, #0
 801e10e:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 801e110:	4821      	ldr	r0, [pc, #132]	; (801e198 <esp8266_SetupIP+0x43c>)
 801e112:	f001 fdd9 	bl	801fcc8 <puts>
	wifi_config_step++;
 801e116:	4b1a      	ldr	r3, [pc, #104]	; (801e180 <esp8266_SetupIP+0x424>)
 801e118:	781b      	ldrb	r3, [r3, #0]
 801e11a:	3301      	adds	r3, #1
 801e11c:	b2da      	uxtb	r2, r3
 801e11e:	4b18      	ldr	r3, [pc, #96]	; (801e180 <esp8266_SetupIP+0x424>)
 801e120:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801e122:	e016      	b.n	801e152 <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 801e124:	79fb      	ldrb	r3, [r7, #7]
 801e126:	3301      	adds	r3, #1
 801e128:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 801e12a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e12e:	f7f9 ff25 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e132:	79fb      	ldrb	r3, [r7, #7]
 801e134:	2b03      	cmp	r3, #3
 801e136:	d90c      	bls.n	801e152 <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 801e138:	4818      	ldr	r0, [pc, #96]	; (801e19c <esp8266_SetupIP+0x440>)
 801e13a:	f001 fdc5 	bl	801fcc8 <puts>
			retry_count = 0;
 801e13e:	2300      	movs	r3, #0
 801e140:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 801e142:	4b0f      	ldr	r3, [pc, #60]	; (801e180 <esp8266_SetupIP+0x424>)
 801e144:	781b      	ldrb	r3, [r3, #0]
 801e146:	3b01      	subs	r3, #1
 801e148:	b2da      	uxtb	r2, r3
 801e14a:	4b0d      	ldr	r3, [pc, #52]	; (801e180 <esp8266_SetupIP+0x424>)
 801e14c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 801e14e:	2300      	movs	r3, #0
 801e150:	e00f      	b.n	801e172 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 801e152:	2301      	movs	r3, #1
 801e154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e158:	490a      	ldr	r1, [pc, #40]	; (801e184 <esp8266_SetupIP+0x428>)
 801e15a:	4811      	ldr	r0, [pc, #68]	; (801e1a0 <esp8266_SetupIP+0x444>)
 801e15c:	f7ff fcfe 	bl	801db5c <esp8266_TransmitCmd>
 801e160:	4603      	mov	r3, r0
 801e162:	2b01      	cmp	r3, #1
 801e164:	d1de      	bne.n	801e124 <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 801e166:	2064      	movs	r0, #100	; 0x64
 801e168:	f7f9 ff08 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e16c:	2300      	movs	r3, #0
 801e16e:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 801e170:	2301      	movs	r3, #1

}
 801e172:	4618      	mov	r0, r3
 801e174:	3708      	adds	r7, #8
 801e176:	46bd      	mov	sp, r7
 801e178:	bd80      	pop	{r7, pc}
 801e17a:	bf00      	nop
 801e17c:	08022364 	.word	0x08022364
 801e180:	2000896a 	.word	0x2000896a
 801e184:	080221c8 	.word	0x080221c8
 801e188:	08022384 	.word	0x08022384
 801e18c:	08022394 	.word	0x08022394
 801e190:	080223bc 	.word	0x080223bc
 801e194:	080223e8 	.word	0x080223e8
 801e198:	080223f4 	.word	0x080223f4
 801e19c:	08022428 	.word	0x08022428
 801e1a0:	0802245c 	.word	0x0802245c

0801e1a4 <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b086      	sub	sp, #24
 801e1a8:	af02      	add	r7, sp, #8
	int retry_count = 0;
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 801e1ae:	232d      	movs	r3, #45	; 0x2d
 801e1b0:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e1b2:	897b      	ldrh	r3, [r7, #10]
 801e1b4:	4618      	mov	r0, r3
 801e1b6:	f000 ff77 	bl	801f0a8 <malloc>
 801e1ba:	4603      	mov	r3, r0
 801e1bc:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e1be:	897b      	ldrh	r3, [r7, #10]
 801e1c0:	461a      	mov	r2, r3
 801e1c2:	2100      	movs	r1, #0
 801e1c4:	6878      	ldr	r0, [r7, #4]
 801e1c6:	f000 ffa7 	bl	801f118 <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 801e1ca:	4b19      	ldr	r3, [pc, #100]	; (801e230 <esp8266_ConfigAccessBroker+0x8c>)
 801e1cc:	9300      	str	r3, [sp, #0]
 801e1ce:	4b18      	ldr	r3, [pc, #96]	; (801e230 <esp8266_ConfigAccessBroker+0x8c>)
 801e1d0:	4a18      	ldr	r2, [pc, #96]	; (801e234 <esp8266_ConfigAccessBroker+0x90>)
 801e1d2:	4919      	ldr	r1, [pc, #100]	; (801e238 <esp8266_ConfigAccessBroker+0x94>)
 801e1d4:	6878      	ldr	r0, [r7, #4]
 801e1d6:	f001 fd8f 	bl	801fcf8 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e1da:	e011      	b.n	801e200 <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	3301      	adds	r3, #1
 801e1e0:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e1e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e1e6:	f7f9 fec9 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	2b03      	cmp	r3, #3
 801e1ee:	dd07      	ble.n	801e200 <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 801e1f0:	4812      	ldr	r0, [pc, #72]	; (801e23c <esp8266_ConfigAccessBroker+0x98>)
 801e1f2:	f001 fd69 	bl	801fcc8 <puts>
			retry_count = 0;
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 801e1fa:	4b11      	ldr	r3, [pc, #68]	; (801e240 <esp8266_ConfigAccessBroker+0x9c>)
 801e1fc:	2204      	movs	r2, #4
 801e1fe:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e200:	2301      	movs	r3, #1
 801e202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e206:	490f      	ldr	r1, [pc, #60]	; (801e244 <esp8266_ConfigAccessBroker+0xa0>)
 801e208:	6878      	ldr	r0, [r7, #4]
 801e20a:	f7ff fca7 	bl	801db5c <esp8266_TransmitCmd>
 801e20e:	4603      	mov	r3, r0
 801e210:	2b01      	cmp	r3, #1
 801e212:	d1e3      	bne.n	801e1dc <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 801e214:	4b0a      	ldr	r3, [pc, #40]	; (801e240 <esp8266_ConfigAccessBroker+0x9c>)
 801e216:	2205      	movs	r2, #5
 801e218:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 801e21a:	2064      	movs	r0, #100	; 0x64
 801e21c:	f7f9 feae 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e220:	2300      	movs	r3, #0
 801e222:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 801e224:	4b06      	ldr	r3, [pc, #24]	; (801e240 <esp8266_ConfigAccessBroker+0x9c>)
 801e226:	781b      	ldrb	r3, [r3, #0]
}
 801e228:	4618      	mov	r0, r3
 801e22a:	3710      	adds	r7, #16
 801e22c:	46bd      	mov	sp, r7
 801e22e:	bd80      	pop	{r7, pc}
 801e230:	080224e8 	.word	0x080224e8
 801e234:	080224ec 	.word	0x080224ec
 801e238:	080224f4 	.word	0x080224f4
 801e23c:	08022520 	.word	0x08022520
 801e240:	2000008b 	.word	0x2000008b
 801e244:	080221c8 	.word	0x080221c8

0801e248 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b084      	sub	sp, #16
 801e24c:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801e24e:	2300      	movs	r3, #0
 801e250:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 801e252:	232e      	movs	r3, #46	; 0x2e
 801e254:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e256:	897b      	ldrh	r3, [r7, #10]
 801e258:	4618      	mov	r0, r3
 801e25a:	f000 ff25 	bl	801f0a8 <malloc>
 801e25e:	4603      	mov	r3, r0
 801e260:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e262:	897b      	ldrh	r3, [r7, #10]
 801e264:	461a      	mov	r2, r3
 801e266:	2100      	movs	r1, #0
 801e268:	6878      	ldr	r0, [r7, #4]
 801e26a:	f000 ff55 	bl	801f118 <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 801e26e:	4b16      	ldr	r3, [pc, #88]	; (801e2c8 <esp8266_ConnectBroker+0x80>)
 801e270:	4a16      	ldr	r2, [pc, #88]	; (801e2cc <esp8266_ConnectBroker+0x84>)
 801e272:	4917      	ldr	r1, [pc, #92]	; (801e2d0 <esp8266_ConnectBroker+0x88>)
 801e274:	6878      	ldr	r0, [r7, #4]
 801e276:	f001 fd3f 	bl	801fcf8 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e27a:	e011      	b.n	801e2a0 <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	3301      	adds	r3, #1
 801e280:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e286:	f7f9 fe79 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	2b03      	cmp	r3, #3
 801e28e:	dd07      	ble.n	801e2a0 <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 801e290:	4810      	ldr	r0, [pc, #64]	; (801e2d4 <esp8266_ConnectBroker+0x8c>)
 801e292:	f001 fd19 	bl	801fcc8 <puts>
			retry_count = 0;
 801e296:	2300      	movs	r3, #0
 801e298:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 801e29a:	4b0f      	ldr	r3, [pc, #60]	; (801e2d8 <esp8266_ConnectBroker+0x90>)
 801e29c:	2206      	movs	r2, #6
 801e29e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e2a0:	2301      	movs	r3, #1
 801e2a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e2a6:	490d      	ldr	r1, [pc, #52]	; (801e2dc <esp8266_ConnectBroker+0x94>)
 801e2a8:	6878      	ldr	r0, [r7, #4]
 801e2aa:	f7ff fc57 	bl	801db5c <esp8266_TransmitCmd>
 801e2ae:	4603      	mov	r3, r0
 801e2b0:	2b01      	cmp	r3, #1
 801e2b2:	d1e3      	bne.n	801e27c <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 801e2b4:	4b08      	ldr	r3, [pc, #32]	; (801e2d8 <esp8266_ConnectBroker+0x90>)
 801e2b6:	2207      	movs	r2, #7
 801e2b8:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 801e2ba:	4b07      	ldr	r3, [pc, #28]	; (801e2d8 <esp8266_ConnectBroker+0x90>)
 801e2bc:	781b      	ldrb	r3, [r3, #0]
}
 801e2be:	4618      	mov	r0, r3
 801e2c0:	3710      	adds	r7, #16
 801e2c2:	46bd      	mov	sp, r7
 801e2c4:	bd80      	pop	{r7, pc}
 801e2c6:	bf00      	nop
 801e2c8:	080220e0 	.word	0x080220e0
 801e2cc:	080220e8 	.word	0x080220e8
 801e2d0:	08022574 	.word	0x08022574
 801e2d4:	0802258c 	.word	0x0802258c
 801e2d8:	2000008b 	.word	0x2000008b
 801e2dc:	080221c8 	.word	0x080221c8

0801e2e0 <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 801e2e0:	b580      	push	{r7, lr}
 801e2e2:	b082      	sub	sp, #8
 801e2e4:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 801e2ea:	482d      	ldr	r0, [pc, #180]	; (801e3a0 <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 801e2ec:	f001 fcec 	bl	801fcc8 <puts>
	mqtt_config_step++;
 801e2f0:	4b2c      	ldr	r3, [pc, #176]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e2f2:	781b      	ldrb	r3, [r3, #0]
 801e2f4:	3301      	adds	r3, #1
 801e2f6:	b2da      	uxtb	r2, r3
 801e2f8:	4b2a      	ldr	r3, [pc, #168]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e2fa:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 801e2fc:	e016      	b.n	801e32c <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 801e2fe:	79fb      	ldrb	r3, [r7, #7]
 801e300:	3301      	adds	r3, #1
 801e302:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 801e304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801e308:	f7f9 fe38 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e30c:	79fb      	ldrb	r3, [r7, #7]
 801e30e:	2b03      	cmp	r3, #3
 801e310:	d90c      	bls.n	801e32c <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 801e312:	4825      	ldr	r0, [pc, #148]	; (801e3a8 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 801e314:	f001 fcd8 	bl	801fcc8 <puts>
			retry_count = 0;
 801e318:	2300      	movs	r3, #0
 801e31a:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 801e31c:	4b21      	ldr	r3, [pc, #132]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e31e:	781b      	ldrb	r3, [r3, #0]
 801e320:	3b01      	subs	r3, #1
 801e322:	b2da      	uxtb	r2, r3
 801e324:	4b1f      	ldr	r3, [pc, #124]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e326:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 801e328:	2300      	movs	r3, #0
 801e32a:	e035      	b.n	801e398 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 801e32c:	f7ff ff3a 	bl	801e1a4 <esp8266_ConfigAccessBroker>
 801e330:	4603      	mov	r3, r0
 801e332:	2b05      	cmp	r3, #5
 801e334:	d1e3      	bne.n	801e2fe <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 801e336:	2064      	movs	r0, #100	; 0x64
 801e338:	f7f9 fe20 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e33c:	2300      	movs	r3, #0
 801e33e:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 801e340:	481a      	ldr	r0, [pc, #104]	; (801e3ac <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 801e342:	f001 fcc1 	bl	801fcc8 <puts>
	mqtt_config_step++;
 801e346:	4b17      	ldr	r3, [pc, #92]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e348:	781b      	ldrb	r3, [r3, #0]
 801e34a:	3301      	adds	r3, #1
 801e34c:	b2da      	uxtb	r2, r3
 801e34e:	4b15      	ldr	r3, [pc, #84]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e350:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 801e352:	e016      	b.n	801e382 <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 801e354:	79fb      	ldrb	r3, [r7, #7]
 801e356:	3301      	adds	r3, #1
 801e358:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 801e35a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801e35e:	f7f9 fe0d 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e362:	79fb      	ldrb	r3, [r7, #7]
 801e364:	2b03      	cmp	r3, #3
 801e366:	d90c      	bls.n	801e382 <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 801e368:	4811      	ldr	r0, [pc, #68]	; (801e3b0 <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 801e36a:	f001 fcad 	bl	801fcc8 <puts>
			retry_count = 0;
 801e36e:	2300      	movs	r3, #0
 801e370:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 801e372:	4b0c      	ldr	r3, [pc, #48]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e374:	781b      	ldrb	r3, [r3, #0]
 801e376:	3b01      	subs	r3, #1
 801e378:	b2da      	uxtb	r2, r3
 801e37a:	4b0a      	ldr	r3, [pc, #40]	; (801e3a4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 801e37c:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 801e37e:	2300      	movs	r3, #0
 801e380:	e00a      	b.n	801e398 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 801e382:	f7ff ff61 	bl	801e248 <esp8266_ConnectBroker>
 801e386:	4603      	mov	r3, r0
 801e388:	2b06      	cmp	r3, #6
 801e38a:	d9e3      	bls.n	801e354 <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 801e38c:	2064      	movs	r0, #100	; 0x64
 801e38e:	f7f9 fdf5 	bl	8017f7c <HAL_Delay>
	retry_count = 0;		// reset retry count
 801e392:	2300      	movs	r3, #0
 801e394:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 801e396:	2301      	movs	r3, #1
}
 801e398:	4618      	mov	r0, r3
 801e39a:	3708      	adds	r7, #8
 801e39c:	46bd      	mov	sp, r7
 801e39e:	bd80      	pop	{r7, pc}
 801e3a0:	080225b4 	.word	0x080225b4
 801e3a4:	2000896b 	.word	0x2000896b
 801e3a8:	080225ec 	.word	0x080225ec
 801e3ac:	08022618 	.word	0x08022618
 801e3b0:	0802264c 	.word	0x0802264c

0801e3b4 <esp8266_Subscribe_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Temp_BrokerMQTT()
{
 801e3b4:	b580      	push	{r7, lr}
 801e3b6:	b084      	sub	sp, #16
 801e3b8:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 801e3be:	4b22      	ldr	r3, [pc, #136]	; (801e448 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e3c0:	781b      	ldrb	r3, [r3, #0]
 801e3c2:	2b06      	cmp	r3, #6
 801e3c4:	d801      	bhi.n	801e3ca <esp8266_Subscribe_Temp_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 801e3c6:	2300      	movs	r3, #0
 801e3c8:	e039      	b.n	801e43e <esp8266_Subscribe_Temp_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 801e3ca:	2328      	movs	r3, #40	; 0x28
 801e3cc:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e3ce:	897b      	ldrh	r3, [r7, #10]
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	f000 fe69 	bl	801f0a8 <malloc>
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e3da:	897b      	ldrh	r3, [r7, #10]
 801e3dc:	461a      	mov	r2, r3
 801e3de:	2100      	movs	r1, #0
 801e3e0:	6878      	ldr	r0, [r7, #4]
 801e3e2:	f000 fe99 	bl	801f118 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTemp\",1", MQTT_CLIENTID);
 801e3e6:	4a19      	ldr	r2, [pc, #100]	; (801e44c <esp8266_Subscribe_Temp_BrokerMQTT+0x98>)
 801e3e8:	4919      	ldr	r1, [pc, #100]	; (801e450 <esp8266_Subscribe_Temp_BrokerMQTT+0x9c>)
 801e3ea:	6878      	ldr	r0, [r7, #4]
 801e3ec:	f001 fc84 	bl	801fcf8 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e3f0:	e011      	b.n	801e416 <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
	{
		retry_count++;
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	3301      	adds	r3, #1
 801e3f6:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e3f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e3fc:	f7f9 fdbe 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	2b03      	cmp	r3, #3
 801e404:	dd07      	ble.n	801e416 <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801e406:	4813      	ldr	r0, [pc, #76]	; (801e454 <esp8266_Subscribe_Temp_BrokerMQTT+0xa0>)
 801e408:	f001 fc5e 	bl	801fcc8 <puts>
			retry_count = 0;
 801e40c:	2300      	movs	r3, #0
 801e40e:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 801e410:	4b0d      	ldr	r3, [pc, #52]	; (801e448 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e412:	2200      	movs	r2, #0
 801e414:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e416:	2301      	movs	r3, #1
 801e418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e41c:	490e      	ldr	r1, [pc, #56]	; (801e458 <esp8266_Subscribe_Temp_BrokerMQTT+0xa4>)
 801e41e:	6878      	ldr	r0, [r7, #4]
 801e420:	f7ff fb9c 	bl	801db5c <esp8266_TransmitCmd>
 801e424:	4603      	mov	r3, r0
 801e426:	2b01      	cmp	r3, #1
 801e428:	d1e3      	bne.n	801e3f2 <esp8266_Subscribe_Temp_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 801e42a:	2064      	movs	r0, #100	; 0x64
 801e42c:	f7f9 fda6 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e430:	2300      	movs	r3, #0
 801e432:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TEMP_MQTT;
 801e434:	4b04      	ldr	r3, [pc, #16]	; (801e448 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e436:	2208      	movs	r2, #8
 801e438:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e43a:	4b03      	ldr	r3, [pc, #12]	; (801e448 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 801e43c:	781b      	ldrb	r3, [r3, #0]
}
 801e43e:	4618      	mov	r0, r3
 801e440:	3710      	adds	r7, #16
 801e442:	46bd      	mov	sp, r7
 801e444:	bd80      	pop	{r7, pc}
 801e446:	bf00      	nop
 801e448:	2000008b 	.word	0x2000008b
 801e44c:	080224ec 	.word	0x080224ec
 801e450:	08022674 	.word	0x08022674
 801e454:	08022690 	.word	0x08022690
 801e458:	080221c8 	.word	0x080221c8

0801e45c <esp8266_Subscribe_ToF_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_ToF_BrokerMQTT()
{
 801e45c:	b580      	push	{r7, lr}
 801e45e:	b084      	sub	sp, #16
 801e460:	af00      	add	r7, sp, #0
	int retry_count = 0;
 801e462:	2300      	movs	r3, #0
 801e464:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 801e466:	4b22      	ldr	r3, [pc, #136]	; (801e4f0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e468:	781b      	ldrb	r3, [r3, #0]
 801e46a:	2b06      	cmp	r3, #6
 801e46c:	d801      	bhi.n	801e472 <esp8266_Subscribe_ToF_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 801e46e:	2300      	movs	r3, #0
 801e470:	e039      	b.n	801e4e6 <esp8266_Subscribe_ToF_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 801e472:	2328      	movs	r3, #40	; 0x28
 801e474:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e476:	897b      	ldrh	r3, [r7, #10]
 801e478:	4618      	mov	r0, r3
 801e47a:	f000 fe15 	bl	801f0a8 <malloc>
 801e47e:	4603      	mov	r3, r0
 801e480:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 801e482:	897b      	ldrh	r3, [r7, #10]
 801e484:	461a      	mov	r2, r3
 801e486:	2100      	movs	r1, #0
 801e488:	6878      	ldr	r0, [r7, #4]
 801e48a:	f000 fe45 	bl	801f118 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTof\",1", MQTT_CLIENTID);
 801e48e:	4a19      	ldr	r2, [pc, #100]	; (801e4f4 <esp8266_Subscribe_ToF_BrokerMQTT+0x98>)
 801e490:	4919      	ldr	r1, [pc, #100]	; (801e4f8 <esp8266_Subscribe_ToF_BrokerMQTT+0x9c>)
 801e492:	6878      	ldr	r0, [r7, #4]
 801e494:	f001 fc30 	bl	801fcf8 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e498:	e011      	b.n	801e4be <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
	{
		retry_count++;
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	3301      	adds	r3, #1
 801e49e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 801e4a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e4a4:	f7f9 fd6a 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	2b03      	cmp	r3, #3
 801e4ac:	dd07      	ble.n	801e4be <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801e4ae:	4813      	ldr	r0, [pc, #76]	; (801e4fc <esp8266_Subscribe_ToF_BrokerMQTT+0xa0>)
 801e4b0:	f001 fc0a 	bl	801fcc8 <puts>
			retry_count = 0;
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 801e4b8:	4b0d      	ldr	r3, [pc, #52]	; (801e4f0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e4ba:	2200      	movs	r2, #0
 801e4bc:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e4be:	2301      	movs	r3, #1
 801e4c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e4c4:	490e      	ldr	r1, [pc, #56]	; (801e500 <esp8266_Subscribe_ToF_BrokerMQTT+0xa4>)
 801e4c6:	6878      	ldr	r0, [r7, #4]
 801e4c8:	f7ff fb48 	bl	801db5c <esp8266_TransmitCmd>
 801e4cc:	4603      	mov	r3, r0
 801e4ce:	2b01      	cmp	r3, #1
 801e4d0:	d1e3      	bne.n	801e49a <esp8266_Subscribe_ToF_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 801e4d2:	2064      	movs	r0, #100	; 0x64
 801e4d4:	f7f9 fd52 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e4d8:	2300      	movs	r3, #0
 801e4da:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TOF_MQTT;
 801e4dc:	4b04      	ldr	r3, [pc, #16]	; (801e4f0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e4de:	2209      	movs	r2, #9
 801e4e0:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e4e2:	4b03      	ldr	r3, [pc, #12]	; (801e4f0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 801e4e4:	781b      	ldrb	r3, [r3, #0]
}
 801e4e6:	4618      	mov	r0, r3
 801e4e8:	3710      	adds	r7, #16
 801e4ea:	46bd      	mov	sp, r7
 801e4ec:	bd80      	pop	{r7, pc}
 801e4ee:	bf00      	nop
 801e4f0:	2000008b 	.word	0x2000008b
 801e4f4:	080224ec 	.word	0x080224ec
 801e4f8:	080226c4 	.word	0x080226c4
 801e4fc:	08022690 	.word	0x08022690
 801e500:	080221c8 	.word	0x080221c8

0801e504 <esp8266_Publish_Temp_BrokerMQTT>:
	mqtt_state = _PUBLISH_BUTTON_MQTT;
	return mqtt_state;
}

MQTT_StateTypeDef esp8266_Publish_Temp_BrokerMQTT(uint8_t *data, uint16_t size)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	b086      	sub	sp, #24
 801e508:	af00      	add	r7, sp, #0
 801e50a:	6078      	str	r0, [r7, #4]
 801e50c:	460b      	mov	r3, r1
 801e50e:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 801e510:	2300      	movs	r3, #0
 801e512:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 801e514:	4b24      	ldr	r3, [pc, #144]	; (801e5a8 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e516:	781b      	ldrb	r3, [r3, #0]
 801e518:	2b06      	cmp	r3, #6
 801e51a:	d902      	bls.n	801e522 <esp8266_Publish_Temp_BrokerMQTT+0x1e>
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d101      	bne.n	801e526 <esp8266_Publish_Temp_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 801e522:	2300      	movs	r3, #0
 801e524:	e03b      	b.n	801e59e <esp8266_Publish_Temp_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 801e526:	887b      	ldrh	r3, [r7, #2]
 801e528:	3328      	adds	r3, #40	; 0x28
 801e52a:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e52c:	8a7b      	ldrh	r3, [r7, #18]
 801e52e:	4618      	mov	r0, r3
 801e530:	f000 fdba 	bl	801f0a8 <malloc>
 801e534:	4603      	mov	r3, r0
 801e536:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 801e538:	8a7b      	ldrh	r3, [r7, #18]
 801e53a:	461a      	mov	r2, r3
 801e53c:	2100      	movs	r1, #0
 801e53e:	68f8      	ldr	r0, [r7, #12]
 801e540:	f000 fdea 	bl	801f118 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/Temp\",\"%s\",1,0", MQTT_CLIENTID, data);
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	4a19      	ldr	r2, [pc, #100]	; (801e5ac <esp8266_Publish_Temp_BrokerMQTT+0xa8>)
 801e548:	4919      	ldr	r1, [pc, #100]	; (801e5b0 <esp8266_Publish_Temp_BrokerMQTT+0xac>)
 801e54a:	68f8      	ldr	r0, [r7, #12]
 801e54c:	f001 fbd4 	bl	801fcf8 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e550:	e011      	b.n	801e576 <esp8266_Publish_Temp_BrokerMQTT+0x72>
	{
		retry_count++;
 801e552:	697b      	ldr	r3, [r7, #20]
 801e554:	3301      	adds	r3, #1
 801e556:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 801e558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e55c:	f7f9 fd0e 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e560:	697b      	ldr	r3, [r7, #20]
 801e562:	2b03      	cmp	r3, #3
 801e564:	dd07      	ble.n	801e576 <esp8266_Publish_Temp_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 801e566:	4813      	ldr	r0, [pc, #76]	; (801e5b4 <esp8266_Publish_Temp_BrokerMQTT+0xb0>)
 801e568:	f001 fbae 	bl	801fcc8 <puts>
			retry_count = 0;
 801e56c:	2300      	movs	r3, #0
 801e56e:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 801e570:	4b0d      	ldr	r3, [pc, #52]	; (801e5a8 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e572:	2200      	movs	r2, #0
 801e574:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e576:	2301      	movs	r3, #1
 801e578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e57c:	490e      	ldr	r1, [pc, #56]	; (801e5b8 <esp8266_Publish_Temp_BrokerMQTT+0xb4>)
 801e57e:	68f8      	ldr	r0, [r7, #12]
 801e580:	f7ff faec 	bl	801db5c <esp8266_TransmitCmd>
 801e584:	4603      	mov	r3, r0
 801e586:	2b01      	cmp	r3, #1
 801e588:	d1e3      	bne.n	801e552 <esp8266_Publish_Temp_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 801e58a:	2064      	movs	r0, #100	; 0x64
 801e58c:	f7f9 fcf6 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e590:	2300      	movs	r3, #0
 801e592:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TEMP_MQTT;
 801e594:	4b04      	ldr	r3, [pc, #16]	; (801e5a8 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e596:	220b      	movs	r2, #11
 801e598:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e59a:	4b03      	ldr	r3, [pc, #12]	; (801e5a8 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 801e59c:	781b      	ldrb	r3, [r3, #0]
}
 801e59e:	4618      	mov	r0, r3
 801e5a0:	3718      	adds	r7, #24
 801e5a2:	46bd      	mov	sp, r7
 801e5a4:	bd80      	pop	{r7, pc}
 801e5a6:	bf00      	nop
 801e5a8:	2000008b 	.word	0x2000008b
 801e5ac:	080224ec 	.word	0x080224ec
 801e5b0:	08022704 	.word	0x08022704
 801e5b4:	08022690 	.word	0x08022690
 801e5b8:	080221c8 	.word	0x080221c8

0801e5bc <esp8266_Publish_ToF_BrokerMQTT>:
MQTT_StateTypeDef esp8266_Publish_ToF_BrokerMQTT(uint8_t *data, uint16_t size)
{
 801e5bc:	b580      	push	{r7, lr}
 801e5be:	b086      	sub	sp, #24
 801e5c0:	af00      	add	r7, sp, #0
 801e5c2:	6078      	str	r0, [r7, #4]
 801e5c4:	460b      	mov	r3, r1
 801e5c6:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT  || data == NULL)
 801e5cc:	4b24      	ldr	r3, [pc, #144]	; (801e660 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e5ce:	781b      	ldrb	r3, [r3, #0]
 801e5d0:	2b06      	cmp	r3, #6
 801e5d2:	d902      	bls.n	801e5da <esp8266_Publish_ToF_BrokerMQTT+0x1e>
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	d101      	bne.n	801e5de <esp8266_Publish_ToF_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 801e5da:	2300      	movs	r3, #0
 801e5dc:	e03b      	b.n	801e656 <esp8266_Publish_ToF_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 801e5de:	887b      	ldrh	r3, [r7, #2]
 801e5e0:	3328      	adds	r3, #40	; 0x28
 801e5e2:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 801e5e4:	8a7b      	ldrh	r3, [r7, #18]
 801e5e6:	4618      	mov	r0, r3
 801e5e8:	f000 fd5e 	bl	801f0a8 <malloc>
 801e5ec:	4603      	mov	r3, r0
 801e5ee:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 801e5f0:	8a7b      	ldrh	r3, [r7, #18]
 801e5f2:	461a      	mov	r2, r3
 801e5f4:	2100      	movs	r1, #0
 801e5f6:	68f8      	ldr	r0, [r7, #12]
 801e5f8:	f000 fd8e 	bl	801f118 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/ToF\",\"%s\",1,0", MQTT_CLIENTID, data);
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	4a19      	ldr	r2, [pc, #100]	; (801e664 <esp8266_Publish_ToF_BrokerMQTT+0xa8>)
 801e600:	4919      	ldr	r1, [pc, #100]	; (801e668 <esp8266_Publish_ToF_BrokerMQTT+0xac>)
 801e602:	68f8      	ldr	r0, [r7, #12]
 801e604:	f001 fb78 	bl	801fcf8 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e608:	e011      	b.n	801e62e <esp8266_Publish_ToF_BrokerMQTT+0x72>
	{
		retry_count++;
 801e60a:	697b      	ldr	r3, [r7, #20]
 801e60c:	3301      	adds	r3, #1
 801e60e:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 801e610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e614:	f7f9 fcb2 	bl	8017f7c <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 801e618:	697b      	ldr	r3, [r7, #20]
 801e61a:	2b03      	cmp	r3, #3
 801e61c:	dd07      	ble.n	801e62e <esp8266_Publish_ToF_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_ToF_BrokerMQTT() failed\r\n");
 801e61e:	4813      	ldr	r0, [pc, #76]	; (801e66c <esp8266_Publish_ToF_BrokerMQTT+0xb0>)
 801e620:	f001 fb52 	bl	801fcc8 <puts>
			retry_count = 0;
 801e624:	2300      	movs	r3, #0
 801e626:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 801e628:	4b0d      	ldr	r3, [pc, #52]	; (801e660 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e62a:	2200      	movs	r2, #0
 801e62c:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 801e62e:	2301      	movs	r3, #1
 801e630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e634:	490e      	ldr	r1, [pc, #56]	; (801e670 <esp8266_Publish_ToF_BrokerMQTT+0xb4>)
 801e636:	68f8      	ldr	r0, [r7, #12]
 801e638:	f7ff fa90 	bl	801db5c <esp8266_TransmitCmd>
 801e63c:	4603      	mov	r3, r0
 801e63e:	2b01      	cmp	r3, #1
 801e640:	d1e3      	bne.n	801e60a <esp8266_Publish_ToF_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 801e642:	2064      	movs	r0, #100	; 0x64
 801e644:	f7f9 fc9a 	bl	8017f7c <HAL_Delay>
	retry_count = 0;
 801e648:	2300      	movs	r3, #0
 801e64a:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TOF_MQTT;
 801e64c:	4b04      	ldr	r3, [pc, #16]	; (801e660 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e64e:	220c      	movs	r2, #12
 801e650:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 801e652:	4b03      	ldr	r3, [pc, #12]	; (801e660 <esp8266_Publish_ToF_BrokerMQTT+0xa4>)
 801e654:	781b      	ldrb	r3, [r3, #0]
}
 801e656:	4618      	mov	r0, r3
 801e658:	3718      	adds	r7, #24
 801e65a:	46bd      	mov	sp, r7
 801e65c:	bd80      	pop	{r7, pc}
 801e65e:	bf00      	nop
 801e660:	2000008b 	.word	0x2000008b
 801e664:	080224ec 	.word	0x080224ec
 801e668:	08022724 	.word	0x08022724
 801e66c:	08022744 	.word	0x08022744
 801e670:	080221c8 	.word	0x080221c8

0801e674 <get_mqtt_state>:

uint8_t get_mqtt_state()
{
 801e674:	b480      	push	{r7}
 801e676:	af00      	add	r7, sp, #0
	return mqtt_state;
 801e678:	4b03      	ldr	r3, [pc, #12]	; (801e688 <get_mqtt_state+0x14>)
 801e67a:	781b      	ldrb	r3, [r3, #0]
}
 801e67c:	4618      	mov	r0, r3
 801e67e:	46bd      	mov	sp, r7
 801e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e684:	4770      	bx	lr
 801e686:	bf00      	nop
 801e688:	2000008b 	.word	0x2000008b

0801e68c <formate_json_temp>:
#include "mlx90614Config.h"
#include "esp8266.h"
#include "parson.h"

static char* formate_json_temp(int value)
{
 801e68c:	b580      	push	{r7, lr}
 801e68e:	b086      	sub	sp, #24
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 801e694:	f7e4 fc70 	bl	8002f78 <json_value_init_object>
 801e698:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 801e69a:	697b      	ldr	r3, [r7, #20]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d101      	bne.n	801e6a4 <formate_json_temp+0x18>
		return NULL;
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	e020      	b.n	801e6e6 <formate_json_temp+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 801e6a4:	6978      	ldr	r0, [r7, #20]
 801e6a6:	f7e4 fbaf 	bl	8002e08 <json_value_get_object>
 801e6aa:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 801e6ac:	693b      	ldr	r3, [r7, #16]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d101      	bne.n	801e6b6 <formate_json_temp+0x2a>
		return NULL;
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	e017      	b.n	801e6e6 <formate_json_temp+0x5a>
/*
	char StringValue[5]; // Déclarer une chaîne de caractères assez grande pour contenir le résultat
	snprintf(StringValue, sizeof(StringValue), "%f", value);
*/
	if(json_object_set_number(obj, "value", value) != JSONSuccess)
 801e6b6:	6878      	ldr	r0, [r7, #4]
 801e6b8:	f7e1 ff0c 	bl	80004d4 <__aeabi_i2d>
 801e6bc:	4602      	mov	r2, r0
 801e6be:	460b      	mov	r3, r1
 801e6c0:	ec43 2b10 	vmov	d0, r2, r3
 801e6c4:	490a      	ldr	r1, [pc, #40]	; (801e6f0 <formate_json_temp+0x64>)
 801e6c6:	6938      	ldr	r0, [r7, #16]
 801e6c8:	f7e4 fe14 	bl	80032f4 <json_object_set_number>
 801e6cc:	4603      	mov	r3, r0
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	d001      	beq.n	801e6d6 <formate_json_temp+0x4a>
		return NULL;
 801e6d2:	2300      	movs	r3, #0
 801e6d4:	e007      	b.n	801e6e6 <formate_json_temp+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 801e6d6:	6978      	ldr	r0, [r7, #20]
 801e6d8:	f7e4 fd10 	bl	80030fc <json_serialize_to_string>
 801e6dc:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 801e6de:	6978      	ldr	r0, [r7, #20]
 801e6e0:	f7e4 fc1c 	bl	8002f1c <json_value_free>

	return serialized_string;
 801e6e4:	68fb      	ldr	r3, [r7, #12]
}
 801e6e6:	4618      	mov	r0, r3
 801e6e8:	3718      	adds	r7, #24
 801e6ea:	46bd      	mov	sp, r7
 801e6ec:	bd80      	pop	{r7, pc}
 801e6ee:	bf00      	nop
 801e6f0:	08022778 	.word	0x08022778

0801e6f4 <IR_Init>:

void IR_Init()
{
 801e6f4:	b580      	push	{r7, lr}
 801e6f6:	af00      	add	r7, sp, #0
	if(mlx90614_init() == true)printf("Initialization IR OK ! \n");
 801e6f8:	f000 f8f4 	bl	801e8e4 <mlx90614_init>
 801e6fc:	4603      	mov	r3, r0
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d003      	beq.n	801e70a <IR_Init+0x16>
 801e702:	4810      	ldr	r0, [pc, #64]	; (801e744 <IR_Init+0x50>)
 801e704:	f001 fae0 	bl	801fcc8 <puts>
 801e708:	e002      	b.n	801e710 <IR_Init+0x1c>
	  else printf("Initialization IR Failed ! \n");
 801e70a:	480f      	ldr	r0, [pc, #60]	; (801e748 <IR_Init+0x54>)
 801e70c:	f001 fadc 	bl	801fcc8 <puts>

	  mlx90614.configReg.DualIRSensor = 0;
 801e710:	4a0e      	ldr	r2, [pc, #56]	; (801e74c <IR_Init+0x58>)
 801e712:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 801e716:	f36f 1386 	bfc	r3, #6, #1
 801e71a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	  mlx90614.configReg.SelectObjAmb = 1;
 801e71e:	4a0b      	ldr	r2, [pc, #44]	; (801e74c <IR_Init+0x58>)
 801e720:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 801e724:	2101      	movs	r1, #1
 801e726:	f361 1305 	bfi	r3, r1, #4, #2
 801e72a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	  mlx90614.configReg.FIR = 4;
 801e72e:	4a07      	ldr	r2, [pc, #28]	; (801e74c <IR_Init+0x58>)
 801e730:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 801e734:	2104      	movs	r1, #4
 801e736:	f361 0302 	bfi	r3, r1, #0, #3
 801e73a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
}
 801e73e:	bf00      	nop
 801e740:	bd80      	pop	{r7, pc}
 801e742:	bf00      	nop
 801e744:	08022780 	.word	0x08022780
 801e748:	08022798 	.word	0x08022798
 801e74c:	20009970 	.word	0x20009970

0801e750 <IR_Process>:

void IR_Process()
{
 801e750:	b580      	push	{r7, lr}
 801e752:	b084      	sub	sp, #16
 801e754:	af00      	add	r7, sp, #0
	float temp = 0.0f;
 801e756:	f04f 0300 	mov.w	r3, #0
 801e75a:	607b      	str	r3, [r7, #4]
	int i = 0 ;
 801e75c:	2300      	movs	r3, #0
 801e75e:	60fb      	str	r3, [r7, #12]
	while(i<3)
 801e760:	e019      	b.n	801e796 <IR_Process+0x46>
	{
		  //if ( mlx90614_getAmbient(&cap1->ambient) == true ) printf("getAmbient OK : %0.2f *C\n", cap1->ambient);
		  //else printf("Failed to read ambient temperature\n");
		  if ( mlx90614_getAmbient(&temp) == true ) printf("getAmbient OK : %0.2f *C\n", temp);
 801e762:	1d3b      	adds	r3, r7, #4
 801e764:	4618      	mov	r0, r3
 801e766:	f000 f9c7 	bl	801eaf8 <mlx90614_getAmbient>
 801e76a:	4603      	mov	r3, r0
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d009      	beq.n	801e784 <IR_Process+0x34>
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	4618      	mov	r0, r3
 801e774:	f7e1 fec0 	bl	80004f8 <__aeabi_f2d>
 801e778:	4602      	mov	r2, r0
 801e77a:	460b      	mov	r3, r1
 801e77c:	4817      	ldr	r0, [pc, #92]	; (801e7dc <IR_Process+0x8c>)
 801e77e:	f001 fa1d 	bl	801fbbc <iprintf>
 801e782:	e002      	b.n	801e78a <IR_Process+0x3a>
		  else printf("Failed to read ambient temperature\n");
 801e784:	4816      	ldr	r0, [pc, #88]	; (801e7e0 <IR_Process+0x90>)
 801e786:	f001 fa9f 	bl	801fcc8 <puts>
	*/
	/*
		  if ( mlx90614_getObject2(&tobj) == true) printf("getObject2 OK : %0.2f *C\n", tobj);
		  else printf("Failed to read Object2 temperature\n");
	*/
		  HAL_Delay(200);
 801e78a:	20c8      	movs	r0, #200	; 0xc8
 801e78c:	f7f9 fbf6 	bl	8017f7c <HAL_Delay>
		  i++;
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	3301      	adds	r3, #1
 801e794:	60fb      	str	r3, [r7, #12]
	while(i<3)
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	2b02      	cmp	r3, #2
 801e79a:	dde2      	ble.n	801e762 <IR_Process+0x12>
	}
	//Send Temperature data
	 char *data = formate_json_temp(temp);
 801e79c:	edd7 7a01 	vldr	s15, [r7, #4]
 801e7a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e7a4:	ee17 0a90 	vmov	r0, s15
 801e7a8:	f7ff ff70 	bl	801e68c <formate_json_temp>
 801e7ac:	60b8      	str	r0, [r7, #8]
	  if(esp8266_Publish_Temp_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TEMP_MQTT)
 801e7ae:	68b8      	ldr	r0, [r7, #8]
 801e7b0:	f7e1 fce6 	bl	8000180 <strlen>
 801e7b4:	4603      	mov	r3, r0
 801e7b6:	b29b      	uxth	r3, r3
 801e7b8:	4619      	mov	r1, r3
 801e7ba:	68b8      	ldr	r0, [r7, #8]
 801e7bc:	f7ff fea2 	bl	801e504 <esp8266_Publish_Temp_BrokerMQTT>
 801e7c0:	4603      	mov	r3, r0
 801e7c2:	2b0b      	cmp	r3, #11
 801e7c4:	d002      	beq.n	801e7cc <IR_Process+0x7c>
		printf("APP: B1 esp8266_Publish_Temp_BrokerMQTT() failed\n");
 801e7c6:	4807      	ldr	r0, [pc, #28]	; (801e7e4 <IR_Process+0x94>)
 801e7c8:	f001 fa7e 	bl	801fcc8 <puts>
	  json_free_serialized_string(data);
 801e7cc:	68b8      	ldr	r0, [r7, #8]
 801e7ce:	f7e4 fcc7 	bl	8003160 <json_free_serialized_string>
}
 801e7d2:	bf00      	nop
 801e7d4:	3710      	adds	r7, #16
 801e7d6:	46bd      	mov	sp, r7
 801e7d8:	bd80      	pop	{r7, pc}
 801e7da:	bf00      	nop
 801e7dc:	080227b4 	.word	0x080227b4
 801e7e0:	080227d0 	.word	0x080227d0
 801e7e4:	080227f4 	.word	0x080227f4

0801e7e8 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 801e7e8:	b580      	push	{r7, lr}
 801e7ea:	b088      	sub	sp, #32
 801e7ec:	af04      	add	r7, sp, #16
 801e7ee:	4603      	mov	r3, r0
 801e7f0:	6039      	str	r1, [r7, #0]
 801e7f2:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 801e7f4:	79fb      	ldrb	r3, [r7, #7]
 801e7f6:	b29a      	uxth	r2, r3
 801e7f8:	2364      	movs	r3, #100	; 0x64
 801e7fa:	9302      	str	r3, [sp, #8]
 801e7fc:	2303      	movs	r3, #3
 801e7fe:	9301      	str	r3, [sp, #4]
 801e800:	f107 030c 	add.w	r3, r7, #12
 801e804:	9300      	str	r3, [sp, #0]
 801e806:	2301      	movs	r3, #1
 801e808:	21b4      	movs	r1, #180	; 0xb4
 801e80a:	480b      	ldr	r0, [pc, #44]	; (801e838 <mlx90614_read16+0x50>)
 801e80c:	f7fa fd74 	bl	80192f8 <HAL_I2C_Mem_Read>
 801e810:	4603      	mov	r3, r0
 801e812:	2b00      	cmp	r3, #0
 801e814:	d001      	beq.n	801e81a <mlx90614_read16+0x32>
    return false;
 801e816:	2300      	movs	r3, #0
 801e818:	e009      	b.n	801e82e <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 801e81a:	7b3b      	ldrb	r3, [r7, #12]
 801e81c:	b21a      	sxth	r2, r3
 801e81e:	7b7b      	ldrb	r3, [r7, #13]
 801e820:	021b      	lsls	r3, r3, #8
 801e822:	b21b      	sxth	r3, r3
 801e824:	4313      	orrs	r3, r2
 801e826:	b21a      	sxth	r2, r3
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	801a      	strh	r2, [r3, #0]
  return true;
 801e82c:	2301      	movs	r3, #1
}
 801e82e:	4618      	mov	r0, r3
 801e830:	3710      	adds	r7, #16
 801e832:	46bd      	mov	sp, r7
 801e834:	bd80      	pop	{r7, pc}
 801e836:	bf00      	nop
 801e838:	2000027c 	.word	0x2000027c

0801e83c <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 801e83c:	b580      	push	{r7, lr}
 801e83e:	b084      	sub	sp, #16
 801e840:	af00      	add	r7, sp, #0
 801e842:	4603      	mov	r3, r0
 801e844:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 801e846:	4b22      	ldr	r3, [pc, #136]	; (801e8d0 <mlx90614_calcTemperature+0x94>)
 801e848:	781b      	ldrb	r3, [r3, #0]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d108      	bne.n	801e860 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 801e84e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e852:	ee07 3a90 	vmov	s15, r3
 801e856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e85a:	edc7 7a03 	vstr	s15, [r7, #12]
 801e85e:	e02e      	b.n	801e8be <mlx90614_calcTemperature+0x82>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 801e860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e864:	ee07 3a90 	vmov	s15, r3
 801e868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e86c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801e8d4 <mlx90614_calcTemperature+0x98>
 801e870:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e874:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 801e878:	4b15      	ldr	r3, [pc, #84]	; (801e8d0 <mlx90614_calcTemperature+0x94>)
 801e87a:	781b      	ldrb	r3, [r3, #0]
 801e87c:	2b01      	cmp	r3, #1
 801e87e:	d01e      	beq.n	801e8be <mlx90614_calcTemperature+0x82>
		{
			retTemp -= 273.15f;
 801e880:	edd7 7a03 	vldr	s15, [r7, #12]
 801e884:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801e8d8 <mlx90614_calcTemperature+0x9c>
 801e888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e88c:	edc7 7a03 	vstr	s15, [r7, #12]
/*
			if(obj == true){
				retTemp = retTemp * 0.26f;
			}
*/
			if(mlx90614.unit == MLX90614_UNIT_F)
 801e890:	4b0f      	ldr	r3, [pc, #60]	; (801e8d0 <mlx90614_calcTemperature+0x94>)
 801e892:	781b      	ldrb	r3, [r3, #0]
 801e894:	2b03      	cmp	r3, #3
 801e896:	d112      	bne.n	801e8be <mlx90614_calcTemperature+0x82>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 801e898:	edd7 7a03 	vldr	s15, [r7, #12]
 801e89c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 801e8a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e8a4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801e8a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801e8ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801e8dc <mlx90614_calcTemperature+0xa0>
 801e8b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e8b4:	edc7 7a03 	vstr	s15, [r7, #12]
				printf("Convertion Farenheight Done ! \n");
 801e8b8:	4809      	ldr	r0, [pc, #36]	; (801e8e0 <mlx90614_calcTemperature+0xa4>)
 801e8ba:	f001 fa05 	bl	801fcc8 <puts>

			}
		}
	}
	return retTemp;
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	ee07 3a90 	vmov	s15, r3
}
 801e8c4:	eeb0 0a67 	vmov.f32	s0, s15
 801e8c8:	3710      	adds	r7, #16
 801e8ca:	46bd      	mov	sp, r7
 801e8cc:	bd80      	pop	{r7, pc}
 801e8ce:	bf00      	nop
 801e8d0:	20009970 	.word	0x20009970
 801e8d4:	3ca3d70a 	.word	0x3ca3d70a
 801e8d8:	43889333 	.word	0x43889333
 801e8dc:	42000000 	.word	0x42000000
 801e8e0:	08022828 	.word	0x08022828

0801e8e4 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 801e8e4:	b580      	push	{r7, lr}
 801e8e6:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 801e8e8:	2234      	movs	r2, #52	; 0x34
 801e8ea:	2100      	movs	r1, #0
 801e8ec:	4821      	ldr	r0, [pc, #132]	; (801e974 <mlx90614_init+0x90>)
 801e8ee:	f000 fc13 	bl	801f118 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 801e8f2:	4b20      	ldr	r3, [pc, #128]	; (801e974 <mlx90614_init+0x90>)
 801e8f4:	2202      	movs	r2, #2
 801e8f6:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 801e8f8:	2364      	movs	r3, #100	; 0x64
 801e8fa:	2201      	movs	r2, #1
 801e8fc:	21b4      	movs	r1, #180	; 0xb4
 801e8fe:	481e      	ldr	r0, [pc, #120]	; (801e978 <mlx90614_init+0x94>)
 801e900:	f7fa fe14 	bl	801952c <HAL_I2C_IsDeviceReady>
 801e904:	4603      	mov	r3, r0
 801e906:	2b00      	cmp	r3, #0
 801e908:	d001      	beq.n	801e90e <mlx90614_init+0x2a>
    return false;
 801e90a:	2300      	movs	r3, #0
 801e90c:	e030      	b.n	801e970 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 801e90e:	491b      	ldr	r1, [pc, #108]	; (801e97c <mlx90614_init+0x98>)
 801e910:	2025      	movs	r0, #37	; 0x25
 801e912:	f7ff ff69 	bl	801e7e8 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 801e916:	2000      	movs	r0, #0
 801e918:	f000 f832 	bl	801e980 <mlx90614_readID>
 801e91c:	4603      	mov	r3, r0
 801e91e:	f083 0301 	eor.w	r3, r3, #1
 801e922:	b2db      	uxtb	r3, r3
 801e924:	2b00      	cmp	r3, #0
 801e926:	d001      	beq.n	801e92c <mlx90614_init+0x48>
    return false;
 801e928:	2300      	movs	r3, #0
 801e92a:	e021      	b.n	801e970 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 801e92c:	2000      	movs	r0, #0
 801e92e:	f000 f861 	bl	801e9f4 <mlx90614_getEmissivity>
 801e932:	4603      	mov	r3, r0
 801e934:	f083 0301 	eor.w	r3, r3, #1
 801e938:	b2db      	uxtb	r3, r3
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d001      	beq.n	801e942 <mlx90614_init+0x5e>
    return false;
 801e93e:	2300      	movs	r3, #0
 801e940:	e016      	b.n	801e970 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 801e942:	2000      	movs	r0, #0
 801e944:	f000 f890 	bl	801ea68 <mlx90614_getMax>
 801e948:	4603      	mov	r3, r0
 801e94a:	f083 0301 	eor.w	r3, r3, #1
 801e94e:	b2db      	uxtb	r3, r3
 801e950:	2b00      	cmp	r3, #0
 801e952:	d001      	beq.n	801e958 <mlx90614_init+0x74>
    return false;
 801e954:	2300      	movs	r3, #0
 801e956:	e00b      	b.n	801e970 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 801e958:	2000      	movs	r0, #0
 801e95a:	f000 f8a9 	bl	801eab0 <mlx90614_getMin>
 801e95e:	4603      	mov	r3, r0
 801e960:	f083 0301 	eor.w	r3, r3, #1
 801e964:	b2db      	uxtb	r3, r3
 801e966:	2b00      	cmp	r3, #0
 801e968:	d001      	beq.n	801e96e <mlx90614_init+0x8a>
    return false;
 801e96a:	2300      	movs	r3, #0
 801e96c:	e000      	b.n	801e970 <mlx90614_init+0x8c>

  return true;
 801e96e:	2301      	movs	r3, #1
}
 801e970:	4618      	mov	r0, r3
 801e972:	bd80      	pop	{r7, pc}
 801e974:	20009970 	.word	0x20009970
 801e978:	2000027c 	.word	0x2000027c
 801e97c:	200099a0 	.word	0x200099a0

0801e980 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b084      	sub	sp, #16
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 801e988:	2300      	movs	r3, #0
 801e98a:	60fb      	str	r3, [r7, #12]
 801e98c:	e028      	b.n	801e9e0 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 801e98e:	2300      	movs	r3, #0
 801e990:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	b2db      	uxtb	r3, r3
 801e996:	333c      	adds	r3, #60	; 0x3c
 801e998:	b2db      	uxtb	r3, r3
 801e99a:	f107 020a 	add.w	r2, r7, #10
 801e99e:	4611      	mov	r1, r2
 801e9a0:	4618      	mov	r0, r3
 801e9a2:	f7ff ff21 	bl	801e7e8 <mlx90614_read16>
 801e9a6:	4603      	mov	r3, r0
 801e9a8:	f083 0301 	eor.w	r3, r3, #1
 801e9ac:	b2db      	uxtb	r3, r3
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d001      	beq.n	801e9b6 <mlx90614_readID+0x36>
			return false;
 801e9b2:	2300      	movs	r3, #0
 801e9b4:	e018      	b.n	801e9e8 <mlx90614_readID+0x68>
		if(id != NULL)
 801e9b6:	687b      	ldr	r3, [r7, #4]
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d006      	beq.n	801e9ca <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 801e9bc:	68fb      	ldr	r3, [r7, #12]
 801e9be:	005b      	lsls	r3, r3, #1
 801e9c0:	687a      	ldr	r2, [r7, #4]
 801e9c2:	4413      	add	r3, r2
 801e9c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801e9c8:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 801e9ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801e9ce:	b299      	uxth	r1, r3
 801e9d0:	4a07      	ldr	r2, [pc, #28]	; (801e9f0 <mlx90614_readID+0x70>)
 801e9d2:	68fb      	ldr	r3, [r7, #12]
 801e9d4:	3314      	adds	r3, #20
 801e9d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 801e9da:	68fb      	ldr	r3, [r7, #12]
 801e9dc:	3301      	adds	r3, #1
 801e9de:	60fb      	str	r3, [r7, #12]
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	2b03      	cmp	r3, #3
 801e9e4:	ddd3      	ble.n	801e98e <mlx90614_readID+0xe>
	}
	return true;
 801e9e6:	2301      	movs	r3, #1
}
 801e9e8:	4618      	mov	r0, r3
 801e9ea:	3710      	adds	r7, #16
 801e9ec:	46bd      	mov	sp, r7
 801e9ee:	bd80      	pop	{r7, pc}
 801e9f0:	20009970 	.word	0x20009970

0801e9f4 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b082      	sub	sp, #8
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 801e9fc:	4917      	ldr	r1, [pc, #92]	; (801ea5c <mlx90614_getEmissivity+0x68>)
 801e9fe:	2024      	movs	r0, #36	; 0x24
 801ea00:	f7ff fef2 	bl	801e7e8 <mlx90614_read16>
 801ea04:	4603      	mov	r3, r0
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d022      	beq.n	801ea50 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 801ea0a:	4b15      	ldr	r3, [pc, #84]	; (801ea60 <mlx90614_getEmissivity+0x6c>)
 801ea0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ea10:	b29b      	uxth	r3, r3
 801ea12:	ee07 3a90 	vmov	s15, r3
 801ea16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ea1a:	eddf 6a12 	vldr	s13, [pc, #72]	; 801ea64 <mlx90614_getEmissivity+0x70>
 801ea1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ea22:	4b0f      	ldr	r3, [pc, #60]	; (801ea60 <mlx90614_getEmissivity+0x6c>)
 801ea24:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d00e      	beq.n	801ea4c <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 801ea2e:	4b0c      	ldr	r3, [pc, #48]	; (801ea60 <mlx90614_getEmissivity+0x6c>)
 801ea30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ea34:	b29b      	uxth	r3, r3
 801ea36:	ee07 3a90 	vmov	s15, r3
 801ea3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ea3e:	eddf 6a09 	vldr	s13, [pc, #36]	; 801ea64 <mlx90614_getEmissivity+0x70>
 801ea42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801ea4c:	2301      	movs	r3, #1
 801ea4e:	e000      	b.n	801ea52 <mlx90614_getEmissivity+0x5e>
	}
	return false;
 801ea50:	2300      	movs	r3, #0
}
 801ea52:	4618      	mov	r0, r3
 801ea54:	3708      	adds	r7, #8
 801ea56:	46bd      	mov	sp, r7
 801ea58:	bd80      	pop	{r7, pc}
 801ea5a:	bf00      	nop
 801ea5c:	20009972 	.word	0x20009972
 801ea60:	20009970 	.word	0x20009970
 801ea64:	477fff00 	.word	0x477fff00

0801ea68 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	b082      	sub	sp, #8
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 801ea70:	490d      	ldr	r1, [pc, #52]	; (801eaa8 <mlx90614_getMax+0x40>)
 801ea72:	2020      	movs	r0, #32
 801ea74:	f7ff feb8 	bl	801e7e8 <mlx90614_read16>
 801ea78:	4603      	mov	r3, r0
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d00e      	beq.n	801ea9c <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	d009      	beq.n	801ea98 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 801ea84:	4b09      	ldr	r3, [pc, #36]	; (801eaac <mlx90614_getMax+0x44>)
 801ea86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801ea8a:	ee07 3a90 	vmov	s15, r3
 801ea8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801ea98:	2301      	movs	r3, #1
 801ea9a:	e000      	b.n	801ea9e <mlx90614_getMax+0x36>
	}
	return false;
 801ea9c:	2300      	movs	r3, #0
}
 801ea9e:	4618      	mov	r0, r3
 801eaa0:	3708      	adds	r7, #8
 801eaa2:	46bd      	mov	sp, r7
 801eaa4:	bd80      	pop	{r7, pc}
 801eaa6:	bf00      	nop
 801eaa8:	2000997a 	.word	0x2000997a
 801eaac:	20009970 	.word	0x20009970

0801eab0 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 801eab0:	b580      	push	{r7, lr}
 801eab2:	b082      	sub	sp, #8
 801eab4:	af00      	add	r7, sp, #0
 801eab6:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 801eab8:	490d      	ldr	r1, [pc, #52]	; (801eaf0 <mlx90614_getMin+0x40>)
 801eaba:	2021      	movs	r0, #33	; 0x21
 801eabc:	f7ff fe94 	bl	801e7e8 <mlx90614_read16>
 801eac0:	4603      	mov	r3, r0
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d00e      	beq.n	801eae4 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d009      	beq.n	801eae0 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 801eacc:	4b09      	ldr	r3, [pc, #36]	; (801eaf4 <mlx90614_getMin+0x44>)
 801eace:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801ead2:	ee07 3a90 	vmov	s15, r3
 801ead6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801eae0:	2301      	movs	r3, #1
 801eae2:	e000      	b.n	801eae6 <mlx90614_getMin+0x36>
	}
	return false;
 801eae4:	2300      	movs	r3, #0
}
 801eae6:	4618      	mov	r0, r3
 801eae8:	3708      	adds	r7, #8
 801eaea:	46bd      	mov	sp, r7
 801eaec:	bd80      	pop	{r7, pc}
 801eaee:	bf00      	nop
 801eaf0:	2000997c 	.word	0x2000997c
 801eaf4:	20009970 	.word	0x20009970

0801eaf8 <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 801eaf8:	b580      	push	{r7, lr}
 801eafa:	b082      	sub	sp, #8
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 801eb00:	490d      	ldr	r1, [pc, #52]	; (801eb38 <mlx90614_getAmbient+0x40>)
 801eb02:	2006      	movs	r0, #6
 801eb04:	f7ff fe70 	bl	801e7e8 <mlx90614_read16>
 801eb08:	4603      	mov	r3, r0
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d00f      	beq.n	801eb2e <mlx90614_getAmbient+0x36>
	{
    if(ambientTemp != NULL)
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d00a      	beq.n	801eb2a <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 801eb14:	4b09      	ldr	r3, [pc, #36]	; (801eb3c <mlx90614_getAmbient+0x44>)
 801eb16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	f7ff fe8e 	bl	801e83c <mlx90614_calcTemperature>
 801eb20:	eef0 7a40 	vmov.f32	s15, s0
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801eb2a:	2301      	movs	r3, #1
 801eb2c:	e000      	b.n	801eb30 <mlx90614_getAmbient+0x38>
	}
	return false;
 801eb2e:	2300      	movs	r3, #0
}
 801eb30:	4618      	mov	r0, r3
 801eb32:	3708      	adds	r7, #8
 801eb34:	46bd      	mov	sp, r7
 801eb36:	bd80      	pop	{r7, pc}
 801eb38:	20009974 	.word	0x20009974
 801eb3c:	20009970 	.word	0x20009970

0801eb40 <MX_TOF_Init>:
static void MX_53L1A2_MultiSensorRanging_Init(void);
static void MX_53L1A2_MultiSensorRanging_Process(void);
static void print_result(uint32_t Instance, RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 801eb40:	b580      	push	{r7, lr}
 801eb42:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L1A2_MultiSensorRanging_Init();
 801eb44:	f000 f802 	bl	801eb4c <MX_53L1A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 801eb48:	bf00      	nop
 801eb4a:	bd80      	pop	{r7, pc}

0801eb4c <MX_53L1A2_MultiSensorRanging_Init>:

  /* USER CODE END TOF_Process_PostTreatment */
}

static void MX_53L1A2_MultiSensorRanging_Init(void)
{
 801eb4c:	b580      	push	{r7, lr}
 801eb4e:	b082      	sub	sp, #8
 801eb50:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 801eb52:	2000      	movs	r0, #0
 801eb54:	f7f9 f8be 	bl	8017cd4 <BSP_COM_Init>

  printf("53L1A2 Multi Sensor Ranging demo application\n");
 801eb58:	482a      	ldr	r0, [pc, #168]	; (801ec04 <MX_53L1A2_MultiSensorRanging_Init+0xb8>)
 801eb5a:	f001 f8b5 	bl	801fcc8 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801eb5e:	2300      	movs	r3, #0
 801eb60:	71fb      	strb	r3, [r7, #7]
 801eb62:	e007      	b.n	801eb74 <MX_53L1A2_MultiSensorRanging_Init+0x28>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 801eb64:	79fb      	ldrb	r3, [r7, #7]
 801eb66:	2101      	movs	r1, #1
 801eb68:	4618      	mov	r0, r3
 801eb6a:	f7e5 fbcb 	bl	8004304 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801eb6e:	79fb      	ldrb	r3, [r7, #7]
 801eb70:	3301      	adds	r3, #1
 801eb72:	71fb      	strb	r3, [r7, #7]
 801eb74:	79fb      	ldrb	r3, [r7, #7]
 801eb76:	2b02      	cmp	r3, #2
 801eb78:	d9f4      	bls.n	801eb64 <MX_53L1A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801eb7a:	2300      	movs	r3, #0
 801eb7c:	71fb      	strb	r3, [r7, #7]
 801eb7e:	e039      	b.n	801ebf4 <MX_53L1A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 801eb80:	79fb      	ldrb	r3, [r7, #7]
 801eb82:	2100      	movs	r1, #0
 801eb84:	4618      	mov	r0, r3
 801eb86:	f7e5 fbbd 	bl	8004304 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L1A2_RANGING_SENSOR_Init(device);
 801eb8a:	79fb      	ldrb	r3, [r7, #7]
 801eb8c:	4618      	mov	r0, r3
 801eb8e:	f7e5 fb43 	bl	8004218 <VL53L1A2_RANGING_SENSOR_Init>
 801eb92:	4603      	mov	r3, r0
 801eb94:	4a1c      	ldr	r2, [pc, #112]	; (801ec08 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 801eb96:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 801eb98:	4b1b      	ldr	r3, [pc, #108]	; (801ec08 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	bf0c      	ite	eq
 801eba0:	2301      	moveq	r3, #1
 801eba2:	2300      	movne	r3, #0
 801eba4:	b2da      	uxtb	r2, r3
 801eba6:	79fb      	ldrb	r3, [r7, #7]
 801eba8:	4611      	mov	r1, r2
 801ebaa:	4a18      	ldr	r2, [pc, #96]	; (801ec0c <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 801ebac:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 801ebae:	79fb      	ldrb	r3, [r7, #7]
 801ebb0:	4a16      	ldr	r2, [pc, #88]	; (801ec0c <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 801ebb2:	5cd3      	ldrb	r3, [r2, r3]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d019      	beq.n	801ebec <MX_53L1A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 801ebb8:	79fb      	ldrb	r3, [r7, #7]
 801ebba:	3301      	adds	r3, #1
 801ebbc:	b29b      	uxth	r3, r3
 801ebbe:	3329      	adds	r3, #41	; 0x29
 801ebc0:	b29b      	uxth	r3, r3
 801ebc2:	005b      	lsls	r3, r3, #1
 801ebc4:	80bb      	strh	r3, [r7, #4]
    VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 801ebc6:	79fb      	ldrb	r3, [r7, #7]
 801ebc8:	88ba      	ldrh	r2, [r7, #4]
 801ebca:	4611      	mov	r1, r2
 801ebcc:	4618      	mov	r0, r3
 801ebce:	f7e5 fb71 	bl	80042b4 <VL53L1A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 801ebd2:	79fb      	ldrb	r3, [r7, #7]
 801ebd4:	463a      	mov	r2, r7
 801ebd6:	4611      	mov	r1, r2
 801ebd8:	4618      	mov	r0, r3
 801ebda:	f7e5 fb43 	bl	8004264 <VL53L1A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\n", device, (unsigned long)id);
 801ebde:	79fb      	ldrb	r3, [r7, #7]
 801ebe0:	683a      	ldr	r2, [r7, #0]
 801ebe2:	4619      	mov	r1, r3
 801ebe4:	480a      	ldr	r0, [pc, #40]	; (801ec10 <MX_53L1A2_MultiSensorRanging_Init+0xc4>)
 801ebe6:	f000 ffe9 	bl	801fbbc <iprintf>
 801ebea:	e000      	b.n	801ebee <MX_53L1A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 801ebec:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 801ebee:	79fb      	ldrb	r3, [r7, #7]
 801ebf0:	3301      	adds	r3, #1
 801ebf2:	71fb      	strb	r3, [r7, #7]
 801ebf4:	79fb      	ldrb	r3, [r7, #7]
 801ebf6:	2b02      	cmp	r3, #2
 801ebf8:	d9c2      	bls.n	801eb80 <MX_53L1A2_MultiSensorRanging_Init+0x34>
  }
}
 801ebfa:	bf00      	nop
 801ebfc:	bf00      	nop
 801ebfe:	3708      	adds	r7, #8
 801ec00:	46bd      	mov	sp, r7
 801ec02:	bd80      	pop	{r7, pc}
 801ec04:	08022860 	.word	0x08022860
 801ec08:	200099a4 	.word	0x200099a4
 801ec0c:	200099a8 	.word	0x200099a8
 801ec10:	08022890 	.word	0x08022890

0801ec14 <__errno>:
 801ec14:	4b01      	ldr	r3, [pc, #4]	; (801ec1c <__errno+0x8>)
 801ec16:	6818      	ldr	r0, [r3, #0]
 801ec18:	4770      	bx	lr
 801ec1a:	bf00      	nop
 801ec1c:	2000008c 	.word	0x2000008c

0801ec20 <__sflush_r>:
 801ec20:	898a      	ldrh	r2, [r1, #12]
 801ec22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec26:	4605      	mov	r5, r0
 801ec28:	0710      	lsls	r0, r2, #28
 801ec2a:	460c      	mov	r4, r1
 801ec2c:	d458      	bmi.n	801ece0 <__sflush_r+0xc0>
 801ec2e:	684b      	ldr	r3, [r1, #4]
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	dc05      	bgt.n	801ec40 <__sflush_r+0x20>
 801ec34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	dc02      	bgt.n	801ec40 <__sflush_r+0x20>
 801ec3a:	2000      	movs	r0, #0
 801ec3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ec42:	2e00      	cmp	r6, #0
 801ec44:	d0f9      	beq.n	801ec3a <__sflush_r+0x1a>
 801ec46:	2300      	movs	r3, #0
 801ec48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ec4c:	682f      	ldr	r7, [r5, #0]
 801ec4e:	602b      	str	r3, [r5, #0]
 801ec50:	d032      	beq.n	801ecb8 <__sflush_r+0x98>
 801ec52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ec54:	89a3      	ldrh	r3, [r4, #12]
 801ec56:	075a      	lsls	r2, r3, #29
 801ec58:	d505      	bpl.n	801ec66 <__sflush_r+0x46>
 801ec5a:	6863      	ldr	r3, [r4, #4]
 801ec5c:	1ac0      	subs	r0, r0, r3
 801ec5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ec60:	b10b      	cbz	r3, 801ec66 <__sflush_r+0x46>
 801ec62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ec64:	1ac0      	subs	r0, r0, r3
 801ec66:	2300      	movs	r3, #0
 801ec68:	4602      	mov	r2, r0
 801ec6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ec6c:	6a21      	ldr	r1, [r4, #32]
 801ec6e:	4628      	mov	r0, r5
 801ec70:	47b0      	blx	r6
 801ec72:	1c43      	adds	r3, r0, #1
 801ec74:	89a3      	ldrh	r3, [r4, #12]
 801ec76:	d106      	bne.n	801ec86 <__sflush_r+0x66>
 801ec78:	6829      	ldr	r1, [r5, #0]
 801ec7a:	291d      	cmp	r1, #29
 801ec7c:	d82c      	bhi.n	801ecd8 <__sflush_r+0xb8>
 801ec7e:	4a2a      	ldr	r2, [pc, #168]	; (801ed28 <__sflush_r+0x108>)
 801ec80:	40ca      	lsrs	r2, r1
 801ec82:	07d6      	lsls	r6, r2, #31
 801ec84:	d528      	bpl.n	801ecd8 <__sflush_r+0xb8>
 801ec86:	2200      	movs	r2, #0
 801ec88:	6062      	str	r2, [r4, #4]
 801ec8a:	04d9      	lsls	r1, r3, #19
 801ec8c:	6922      	ldr	r2, [r4, #16]
 801ec8e:	6022      	str	r2, [r4, #0]
 801ec90:	d504      	bpl.n	801ec9c <__sflush_r+0x7c>
 801ec92:	1c42      	adds	r2, r0, #1
 801ec94:	d101      	bne.n	801ec9a <__sflush_r+0x7a>
 801ec96:	682b      	ldr	r3, [r5, #0]
 801ec98:	b903      	cbnz	r3, 801ec9c <__sflush_r+0x7c>
 801ec9a:	6560      	str	r0, [r4, #84]	; 0x54
 801ec9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec9e:	602f      	str	r7, [r5, #0]
 801eca0:	2900      	cmp	r1, #0
 801eca2:	d0ca      	beq.n	801ec3a <__sflush_r+0x1a>
 801eca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eca8:	4299      	cmp	r1, r3
 801ecaa:	d002      	beq.n	801ecb2 <__sflush_r+0x92>
 801ecac:	4628      	mov	r0, r5
 801ecae:	f000 fa3b 	bl	801f128 <_free_r>
 801ecb2:	2000      	movs	r0, #0
 801ecb4:	6360      	str	r0, [r4, #52]	; 0x34
 801ecb6:	e7c1      	b.n	801ec3c <__sflush_r+0x1c>
 801ecb8:	6a21      	ldr	r1, [r4, #32]
 801ecba:	2301      	movs	r3, #1
 801ecbc:	4628      	mov	r0, r5
 801ecbe:	47b0      	blx	r6
 801ecc0:	1c41      	adds	r1, r0, #1
 801ecc2:	d1c7      	bne.n	801ec54 <__sflush_r+0x34>
 801ecc4:	682b      	ldr	r3, [r5, #0]
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	d0c4      	beq.n	801ec54 <__sflush_r+0x34>
 801ecca:	2b1d      	cmp	r3, #29
 801eccc:	d001      	beq.n	801ecd2 <__sflush_r+0xb2>
 801ecce:	2b16      	cmp	r3, #22
 801ecd0:	d101      	bne.n	801ecd6 <__sflush_r+0xb6>
 801ecd2:	602f      	str	r7, [r5, #0]
 801ecd4:	e7b1      	b.n	801ec3a <__sflush_r+0x1a>
 801ecd6:	89a3      	ldrh	r3, [r4, #12]
 801ecd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ecdc:	81a3      	strh	r3, [r4, #12]
 801ecde:	e7ad      	b.n	801ec3c <__sflush_r+0x1c>
 801ece0:	690f      	ldr	r7, [r1, #16]
 801ece2:	2f00      	cmp	r7, #0
 801ece4:	d0a9      	beq.n	801ec3a <__sflush_r+0x1a>
 801ece6:	0793      	lsls	r3, r2, #30
 801ece8:	680e      	ldr	r6, [r1, #0]
 801ecea:	bf08      	it	eq
 801ecec:	694b      	ldreq	r3, [r1, #20]
 801ecee:	600f      	str	r7, [r1, #0]
 801ecf0:	bf18      	it	ne
 801ecf2:	2300      	movne	r3, #0
 801ecf4:	eba6 0807 	sub.w	r8, r6, r7
 801ecf8:	608b      	str	r3, [r1, #8]
 801ecfa:	f1b8 0f00 	cmp.w	r8, #0
 801ecfe:	dd9c      	ble.n	801ec3a <__sflush_r+0x1a>
 801ed00:	6a21      	ldr	r1, [r4, #32]
 801ed02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ed04:	4643      	mov	r3, r8
 801ed06:	463a      	mov	r2, r7
 801ed08:	4628      	mov	r0, r5
 801ed0a:	47b0      	blx	r6
 801ed0c:	2800      	cmp	r0, #0
 801ed0e:	dc06      	bgt.n	801ed1e <__sflush_r+0xfe>
 801ed10:	89a3      	ldrh	r3, [r4, #12]
 801ed12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed16:	81a3      	strh	r3, [r4, #12]
 801ed18:	f04f 30ff 	mov.w	r0, #4294967295
 801ed1c:	e78e      	b.n	801ec3c <__sflush_r+0x1c>
 801ed1e:	4407      	add	r7, r0
 801ed20:	eba8 0800 	sub.w	r8, r8, r0
 801ed24:	e7e9      	b.n	801ecfa <__sflush_r+0xda>
 801ed26:	bf00      	nop
 801ed28:	20400001 	.word	0x20400001

0801ed2c <_fflush_r>:
 801ed2c:	b538      	push	{r3, r4, r5, lr}
 801ed2e:	690b      	ldr	r3, [r1, #16]
 801ed30:	4605      	mov	r5, r0
 801ed32:	460c      	mov	r4, r1
 801ed34:	b913      	cbnz	r3, 801ed3c <_fflush_r+0x10>
 801ed36:	2500      	movs	r5, #0
 801ed38:	4628      	mov	r0, r5
 801ed3a:	bd38      	pop	{r3, r4, r5, pc}
 801ed3c:	b118      	cbz	r0, 801ed46 <_fflush_r+0x1a>
 801ed3e:	6983      	ldr	r3, [r0, #24]
 801ed40:	b90b      	cbnz	r3, 801ed46 <_fflush_r+0x1a>
 801ed42:	f000 f887 	bl	801ee54 <__sinit>
 801ed46:	4b14      	ldr	r3, [pc, #80]	; (801ed98 <_fflush_r+0x6c>)
 801ed48:	429c      	cmp	r4, r3
 801ed4a:	d11b      	bne.n	801ed84 <_fflush_r+0x58>
 801ed4c:	686c      	ldr	r4, [r5, #4]
 801ed4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d0ef      	beq.n	801ed36 <_fflush_r+0xa>
 801ed56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ed58:	07d0      	lsls	r0, r2, #31
 801ed5a:	d404      	bmi.n	801ed66 <_fflush_r+0x3a>
 801ed5c:	0599      	lsls	r1, r3, #22
 801ed5e:	d402      	bmi.n	801ed66 <_fflush_r+0x3a>
 801ed60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed62:	f000 f93a 	bl	801efda <__retarget_lock_acquire_recursive>
 801ed66:	4628      	mov	r0, r5
 801ed68:	4621      	mov	r1, r4
 801ed6a:	f7ff ff59 	bl	801ec20 <__sflush_r>
 801ed6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ed70:	07da      	lsls	r2, r3, #31
 801ed72:	4605      	mov	r5, r0
 801ed74:	d4e0      	bmi.n	801ed38 <_fflush_r+0xc>
 801ed76:	89a3      	ldrh	r3, [r4, #12]
 801ed78:	059b      	lsls	r3, r3, #22
 801ed7a:	d4dd      	bmi.n	801ed38 <_fflush_r+0xc>
 801ed7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed7e:	f000 f92d 	bl	801efdc <__retarget_lock_release_recursive>
 801ed82:	e7d9      	b.n	801ed38 <_fflush_r+0xc>
 801ed84:	4b05      	ldr	r3, [pc, #20]	; (801ed9c <_fflush_r+0x70>)
 801ed86:	429c      	cmp	r4, r3
 801ed88:	d101      	bne.n	801ed8e <_fflush_r+0x62>
 801ed8a:	68ac      	ldr	r4, [r5, #8]
 801ed8c:	e7df      	b.n	801ed4e <_fflush_r+0x22>
 801ed8e:	4b04      	ldr	r3, [pc, #16]	; (801eda0 <_fflush_r+0x74>)
 801ed90:	429c      	cmp	r4, r3
 801ed92:	bf08      	it	eq
 801ed94:	68ec      	ldreq	r4, [r5, #12]
 801ed96:	e7da      	b.n	801ed4e <_fflush_r+0x22>
 801ed98:	08022b18 	.word	0x08022b18
 801ed9c:	08022b38 	.word	0x08022b38
 801eda0:	08022af8 	.word	0x08022af8

0801eda4 <std>:
 801eda4:	2300      	movs	r3, #0
 801eda6:	b510      	push	{r4, lr}
 801eda8:	4604      	mov	r4, r0
 801edaa:	e9c0 3300 	strd	r3, r3, [r0]
 801edae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801edb2:	6083      	str	r3, [r0, #8]
 801edb4:	8181      	strh	r1, [r0, #12]
 801edb6:	6643      	str	r3, [r0, #100]	; 0x64
 801edb8:	81c2      	strh	r2, [r0, #14]
 801edba:	6183      	str	r3, [r0, #24]
 801edbc:	4619      	mov	r1, r3
 801edbe:	2208      	movs	r2, #8
 801edc0:	305c      	adds	r0, #92	; 0x5c
 801edc2:	f000 f9a9 	bl	801f118 <memset>
 801edc6:	4b05      	ldr	r3, [pc, #20]	; (801eddc <std+0x38>)
 801edc8:	6263      	str	r3, [r4, #36]	; 0x24
 801edca:	4b05      	ldr	r3, [pc, #20]	; (801ede0 <std+0x3c>)
 801edcc:	62a3      	str	r3, [r4, #40]	; 0x28
 801edce:	4b05      	ldr	r3, [pc, #20]	; (801ede4 <std+0x40>)
 801edd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801edd2:	4b05      	ldr	r3, [pc, #20]	; (801ede8 <std+0x44>)
 801edd4:	6224      	str	r4, [r4, #32]
 801edd6:	6323      	str	r3, [r4, #48]	; 0x30
 801edd8:	bd10      	pop	{r4, pc}
 801edda:	bf00      	nop
 801eddc:	0801fd39 	.word	0x0801fd39
 801ede0:	0801fd5b 	.word	0x0801fd5b
 801ede4:	0801fd93 	.word	0x0801fd93
 801ede8:	0801fdb7 	.word	0x0801fdb7

0801edec <_cleanup_r>:
 801edec:	4901      	ldr	r1, [pc, #4]	; (801edf4 <_cleanup_r+0x8>)
 801edee:	f000 b8af 	b.w	801ef50 <_fwalk_reent>
 801edf2:	bf00      	nop
 801edf4:	0801ed2d 	.word	0x0801ed2d

0801edf8 <__sfmoreglue>:
 801edf8:	b570      	push	{r4, r5, r6, lr}
 801edfa:	2268      	movs	r2, #104	; 0x68
 801edfc:	1e4d      	subs	r5, r1, #1
 801edfe:	4355      	muls	r5, r2
 801ee00:	460e      	mov	r6, r1
 801ee02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ee06:	f000 f9fb 	bl	801f200 <_malloc_r>
 801ee0a:	4604      	mov	r4, r0
 801ee0c:	b140      	cbz	r0, 801ee20 <__sfmoreglue+0x28>
 801ee0e:	2100      	movs	r1, #0
 801ee10:	e9c0 1600 	strd	r1, r6, [r0]
 801ee14:	300c      	adds	r0, #12
 801ee16:	60a0      	str	r0, [r4, #8]
 801ee18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ee1c:	f000 f97c 	bl	801f118 <memset>
 801ee20:	4620      	mov	r0, r4
 801ee22:	bd70      	pop	{r4, r5, r6, pc}

0801ee24 <__sfp_lock_acquire>:
 801ee24:	4801      	ldr	r0, [pc, #4]	; (801ee2c <__sfp_lock_acquire+0x8>)
 801ee26:	f000 b8d8 	b.w	801efda <__retarget_lock_acquire_recursive>
 801ee2a:	bf00      	nop
 801ee2c:	200099ac 	.word	0x200099ac

0801ee30 <__sfp_lock_release>:
 801ee30:	4801      	ldr	r0, [pc, #4]	; (801ee38 <__sfp_lock_release+0x8>)
 801ee32:	f000 b8d3 	b.w	801efdc <__retarget_lock_release_recursive>
 801ee36:	bf00      	nop
 801ee38:	200099ac 	.word	0x200099ac

0801ee3c <__sinit_lock_acquire>:
 801ee3c:	4801      	ldr	r0, [pc, #4]	; (801ee44 <__sinit_lock_acquire+0x8>)
 801ee3e:	f000 b8cc 	b.w	801efda <__retarget_lock_acquire_recursive>
 801ee42:	bf00      	nop
 801ee44:	200099ad 	.word	0x200099ad

0801ee48 <__sinit_lock_release>:
 801ee48:	4801      	ldr	r0, [pc, #4]	; (801ee50 <__sinit_lock_release+0x8>)
 801ee4a:	f000 b8c7 	b.w	801efdc <__retarget_lock_release_recursive>
 801ee4e:	bf00      	nop
 801ee50:	200099ad 	.word	0x200099ad

0801ee54 <__sinit>:
 801ee54:	b510      	push	{r4, lr}
 801ee56:	4604      	mov	r4, r0
 801ee58:	f7ff fff0 	bl	801ee3c <__sinit_lock_acquire>
 801ee5c:	69a3      	ldr	r3, [r4, #24]
 801ee5e:	b11b      	cbz	r3, 801ee68 <__sinit+0x14>
 801ee60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee64:	f7ff bff0 	b.w	801ee48 <__sinit_lock_release>
 801ee68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ee6c:	6523      	str	r3, [r4, #80]	; 0x50
 801ee6e:	4b13      	ldr	r3, [pc, #76]	; (801eebc <__sinit+0x68>)
 801ee70:	4a13      	ldr	r2, [pc, #76]	; (801eec0 <__sinit+0x6c>)
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	62a2      	str	r2, [r4, #40]	; 0x28
 801ee76:	42a3      	cmp	r3, r4
 801ee78:	bf04      	itt	eq
 801ee7a:	2301      	moveq	r3, #1
 801ee7c:	61a3      	streq	r3, [r4, #24]
 801ee7e:	4620      	mov	r0, r4
 801ee80:	f000 f820 	bl	801eec4 <__sfp>
 801ee84:	6060      	str	r0, [r4, #4]
 801ee86:	4620      	mov	r0, r4
 801ee88:	f000 f81c 	bl	801eec4 <__sfp>
 801ee8c:	60a0      	str	r0, [r4, #8]
 801ee8e:	4620      	mov	r0, r4
 801ee90:	f000 f818 	bl	801eec4 <__sfp>
 801ee94:	2200      	movs	r2, #0
 801ee96:	60e0      	str	r0, [r4, #12]
 801ee98:	2104      	movs	r1, #4
 801ee9a:	6860      	ldr	r0, [r4, #4]
 801ee9c:	f7ff ff82 	bl	801eda4 <std>
 801eea0:	68a0      	ldr	r0, [r4, #8]
 801eea2:	2201      	movs	r2, #1
 801eea4:	2109      	movs	r1, #9
 801eea6:	f7ff ff7d 	bl	801eda4 <std>
 801eeaa:	68e0      	ldr	r0, [r4, #12]
 801eeac:	2202      	movs	r2, #2
 801eeae:	2112      	movs	r1, #18
 801eeb0:	f7ff ff78 	bl	801eda4 <std>
 801eeb4:	2301      	movs	r3, #1
 801eeb6:	61a3      	str	r3, [r4, #24]
 801eeb8:	e7d2      	b.n	801ee60 <__sinit+0xc>
 801eeba:	bf00      	nop
 801eebc:	08022b58 	.word	0x08022b58
 801eec0:	0801eded 	.word	0x0801eded

0801eec4 <__sfp>:
 801eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eec6:	4607      	mov	r7, r0
 801eec8:	f7ff ffac 	bl	801ee24 <__sfp_lock_acquire>
 801eecc:	4b1e      	ldr	r3, [pc, #120]	; (801ef48 <__sfp+0x84>)
 801eece:	681e      	ldr	r6, [r3, #0]
 801eed0:	69b3      	ldr	r3, [r6, #24]
 801eed2:	b913      	cbnz	r3, 801eeda <__sfp+0x16>
 801eed4:	4630      	mov	r0, r6
 801eed6:	f7ff ffbd 	bl	801ee54 <__sinit>
 801eeda:	3648      	adds	r6, #72	; 0x48
 801eedc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801eee0:	3b01      	subs	r3, #1
 801eee2:	d503      	bpl.n	801eeec <__sfp+0x28>
 801eee4:	6833      	ldr	r3, [r6, #0]
 801eee6:	b30b      	cbz	r3, 801ef2c <__sfp+0x68>
 801eee8:	6836      	ldr	r6, [r6, #0]
 801eeea:	e7f7      	b.n	801eedc <__sfp+0x18>
 801eeec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801eef0:	b9d5      	cbnz	r5, 801ef28 <__sfp+0x64>
 801eef2:	4b16      	ldr	r3, [pc, #88]	; (801ef4c <__sfp+0x88>)
 801eef4:	60e3      	str	r3, [r4, #12]
 801eef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801eefa:	6665      	str	r5, [r4, #100]	; 0x64
 801eefc:	f000 f86c 	bl	801efd8 <__retarget_lock_init_recursive>
 801ef00:	f7ff ff96 	bl	801ee30 <__sfp_lock_release>
 801ef04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ef08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ef0c:	6025      	str	r5, [r4, #0]
 801ef0e:	61a5      	str	r5, [r4, #24]
 801ef10:	2208      	movs	r2, #8
 801ef12:	4629      	mov	r1, r5
 801ef14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ef18:	f000 f8fe 	bl	801f118 <memset>
 801ef1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ef20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ef24:	4620      	mov	r0, r4
 801ef26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef28:	3468      	adds	r4, #104	; 0x68
 801ef2a:	e7d9      	b.n	801eee0 <__sfp+0x1c>
 801ef2c:	2104      	movs	r1, #4
 801ef2e:	4638      	mov	r0, r7
 801ef30:	f7ff ff62 	bl	801edf8 <__sfmoreglue>
 801ef34:	4604      	mov	r4, r0
 801ef36:	6030      	str	r0, [r6, #0]
 801ef38:	2800      	cmp	r0, #0
 801ef3a:	d1d5      	bne.n	801eee8 <__sfp+0x24>
 801ef3c:	f7ff ff78 	bl	801ee30 <__sfp_lock_release>
 801ef40:	230c      	movs	r3, #12
 801ef42:	603b      	str	r3, [r7, #0]
 801ef44:	e7ee      	b.n	801ef24 <__sfp+0x60>
 801ef46:	bf00      	nop
 801ef48:	08022b58 	.word	0x08022b58
 801ef4c:	ffff0001 	.word	0xffff0001

0801ef50 <_fwalk_reent>:
 801ef50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef54:	4606      	mov	r6, r0
 801ef56:	4688      	mov	r8, r1
 801ef58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ef5c:	2700      	movs	r7, #0
 801ef5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ef62:	f1b9 0901 	subs.w	r9, r9, #1
 801ef66:	d505      	bpl.n	801ef74 <_fwalk_reent+0x24>
 801ef68:	6824      	ldr	r4, [r4, #0]
 801ef6a:	2c00      	cmp	r4, #0
 801ef6c:	d1f7      	bne.n	801ef5e <_fwalk_reent+0xe>
 801ef6e:	4638      	mov	r0, r7
 801ef70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef74:	89ab      	ldrh	r3, [r5, #12]
 801ef76:	2b01      	cmp	r3, #1
 801ef78:	d907      	bls.n	801ef8a <_fwalk_reent+0x3a>
 801ef7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ef7e:	3301      	adds	r3, #1
 801ef80:	d003      	beq.n	801ef8a <_fwalk_reent+0x3a>
 801ef82:	4629      	mov	r1, r5
 801ef84:	4630      	mov	r0, r6
 801ef86:	47c0      	blx	r8
 801ef88:	4307      	orrs	r7, r0
 801ef8a:	3568      	adds	r5, #104	; 0x68
 801ef8c:	e7e9      	b.n	801ef62 <_fwalk_reent+0x12>
	...

0801ef90 <__libc_init_array>:
 801ef90:	b570      	push	{r4, r5, r6, lr}
 801ef92:	4d0d      	ldr	r5, [pc, #52]	; (801efc8 <__libc_init_array+0x38>)
 801ef94:	4c0d      	ldr	r4, [pc, #52]	; (801efcc <__libc_init_array+0x3c>)
 801ef96:	1b64      	subs	r4, r4, r5
 801ef98:	10a4      	asrs	r4, r4, #2
 801ef9a:	2600      	movs	r6, #0
 801ef9c:	42a6      	cmp	r6, r4
 801ef9e:	d109      	bne.n	801efb4 <__libc_init_array+0x24>
 801efa0:	4d0b      	ldr	r5, [pc, #44]	; (801efd0 <__libc_init_array+0x40>)
 801efa2:	4c0c      	ldr	r4, [pc, #48]	; (801efd4 <__libc_init_array+0x44>)
 801efa4:	f002 fe3e 	bl	8021c24 <_init>
 801efa8:	1b64      	subs	r4, r4, r5
 801efaa:	10a4      	asrs	r4, r4, #2
 801efac:	2600      	movs	r6, #0
 801efae:	42a6      	cmp	r6, r4
 801efb0:	d105      	bne.n	801efbe <__libc_init_array+0x2e>
 801efb2:	bd70      	pop	{r4, r5, r6, pc}
 801efb4:	f855 3b04 	ldr.w	r3, [r5], #4
 801efb8:	4798      	blx	r3
 801efba:	3601      	adds	r6, #1
 801efbc:	e7ee      	b.n	801ef9c <__libc_init_array+0xc>
 801efbe:	f855 3b04 	ldr.w	r3, [r5], #4
 801efc2:	4798      	blx	r3
 801efc4:	3601      	adds	r6, #1
 801efc6:	e7f2      	b.n	801efae <__libc_init_array+0x1e>
 801efc8:	08022ddc 	.word	0x08022ddc
 801efcc:	08022ddc 	.word	0x08022ddc
 801efd0:	08022ddc 	.word	0x08022ddc
 801efd4:	08022de0 	.word	0x08022de0

0801efd8 <__retarget_lock_init_recursive>:
 801efd8:	4770      	bx	lr

0801efda <__retarget_lock_acquire_recursive>:
 801efda:	4770      	bx	lr

0801efdc <__retarget_lock_release_recursive>:
 801efdc:	4770      	bx	lr

0801efde <__swhatbuf_r>:
 801efde:	b570      	push	{r4, r5, r6, lr}
 801efe0:	460e      	mov	r6, r1
 801efe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801efe6:	2900      	cmp	r1, #0
 801efe8:	b096      	sub	sp, #88	; 0x58
 801efea:	4614      	mov	r4, r2
 801efec:	461d      	mov	r5, r3
 801efee:	da08      	bge.n	801f002 <__swhatbuf_r+0x24>
 801eff0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801eff4:	2200      	movs	r2, #0
 801eff6:	602a      	str	r2, [r5, #0]
 801eff8:	061a      	lsls	r2, r3, #24
 801effa:	d410      	bmi.n	801f01e <__swhatbuf_r+0x40>
 801effc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f000:	e00e      	b.n	801f020 <__swhatbuf_r+0x42>
 801f002:	466a      	mov	r2, sp
 801f004:	f001 fe96 	bl	8020d34 <_fstat_r>
 801f008:	2800      	cmp	r0, #0
 801f00a:	dbf1      	blt.n	801eff0 <__swhatbuf_r+0x12>
 801f00c:	9a01      	ldr	r2, [sp, #4]
 801f00e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f012:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f016:	425a      	negs	r2, r3
 801f018:	415a      	adcs	r2, r3
 801f01a:	602a      	str	r2, [r5, #0]
 801f01c:	e7ee      	b.n	801effc <__swhatbuf_r+0x1e>
 801f01e:	2340      	movs	r3, #64	; 0x40
 801f020:	2000      	movs	r0, #0
 801f022:	6023      	str	r3, [r4, #0]
 801f024:	b016      	add	sp, #88	; 0x58
 801f026:	bd70      	pop	{r4, r5, r6, pc}

0801f028 <__smakebuf_r>:
 801f028:	898b      	ldrh	r3, [r1, #12]
 801f02a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f02c:	079d      	lsls	r5, r3, #30
 801f02e:	4606      	mov	r6, r0
 801f030:	460c      	mov	r4, r1
 801f032:	d507      	bpl.n	801f044 <__smakebuf_r+0x1c>
 801f034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f038:	6023      	str	r3, [r4, #0]
 801f03a:	6123      	str	r3, [r4, #16]
 801f03c:	2301      	movs	r3, #1
 801f03e:	6163      	str	r3, [r4, #20]
 801f040:	b002      	add	sp, #8
 801f042:	bd70      	pop	{r4, r5, r6, pc}
 801f044:	ab01      	add	r3, sp, #4
 801f046:	466a      	mov	r2, sp
 801f048:	f7ff ffc9 	bl	801efde <__swhatbuf_r>
 801f04c:	9900      	ldr	r1, [sp, #0]
 801f04e:	4605      	mov	r5, r0
 801f050:	4630      	mov	r0, r6
 801f052:	f000 f8d5 	bl	801f200 <_malloc_r>
 801f056:	b948      	cbnz	r0, 801f06c <__smakebuf_r+0x44>
 801f058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f05c:	059a      	lsls	r2, r3, #22
 801f05e:	d4ef      	bmi.n	801f040 <__smakebuf_r+0x18>
 801f060:	f023 0303 	bic.w	r3, r3, #3
 801f064:	f043 0302 	orr.w	r3, r3, #2
 801f068:	81a3      	strh	r3, [r4, #12]
 801f06a:	e7e3      	b.n	801f034 <__smakebuf_r+0xc>
 801f06c:	4b0d      	ldr	r3, [pc, #52]	; (801f0a4 <__smakebuf_r+0x7c>)
 801f06e:	62b3      	str	r3, [r6, #40]	; 0x28
 801f070:	89a3      	ldrh	r3, [r4, #12]
 801f072:	6020      	str	r0, [r4, #0]
 801f074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f078:	81a3      	strh	r3, [r4, #12]
 801f07a:	9b00      	ldr	r3, [sp, #0]
 801f07c:	6163      	str	r3, [r4, #20]
 801f07e:	9b01      	ldr	r3, [sp, #4]
 801f080:	6120      	str	r0, [r4, #16]
 801f082:	b15b      	cbz	r3, 801f09c <__smakebuf_r+0x74>
 801f084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f088:	4630      	mov	r0, r6
 801f08a:	f001 fe65 	bl	8020d58 <_isatty_r>
 801f08e:	b128      	cbz	r0, 801f09c <__smakebuf_r+0x74>
 801f090:	89a3      	ldrh	r3, [r4, #12]
 801f092:	f023 0303 	bic.w	r3, r3, #3
 801f096:	f043 0301 	orr.w	r3, r3, #1
 801f09a:	81a3      	strh	r3, [r4, #12]
 801f09c:	89a0      	ldrh	r0, [r4, #12]
 801f09e:	4305      	orrs	r5, r0
 801f0a0:	81a5      	strh	r5, [r4, #12]
 801f0a2:	e7cd      	b.n	801f040 <__smakebuf_r+0x18>
 801f0a4:	0801eded 	.word	0x0801eded

0801f0a8 <malloc>:
 801f0a8:	4b02      	ldr	r3, [pc, #8]	; (801f0b4 <malloc+0xc>)
 801f0aa:	4601      	mov	r1, r0
 801f0ac:	6818      	ldr	r0, [r3, #0]
 801f0ae:	f000 b8a7 	b.w	801f200 <_malloc_r>
 801f0b2:	bf00      	nop
 801f0b4:	2000008c 	.word	0x2000008c

0801f0b8 <free>:
 801f0b8:	4b02      	ldr	r3, [pc, #8]	; (801f0c4 <free+0xc>)
 801f0ba:	4601      	mov	r1, r0
 801f0bc:	6818      	ldr	r0, [r3, #0]
 801f0be:	f000 b833 	b.w	801f128 <_free_r>
 801f0c2:	bf00      	nop
 801f0c4:	2000008c 	.word	0x2000008c

0801f0c8 <memcpy>:
 801f0c8:	440a      	add	r2, r1
 801f0ca:	4291      	cmp	r1, r2
 801f0cc:	f100 33ff 	add.w	r3, r0, #4294967295
 801f0d0:	d100      	bne.n	801f0d4 <memcpy+0xc>
 801f0d2:	4770      	bx	lr
 801f0d4:	b510      	push	{r4, lr}
 801f0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f0de:	4291      	cmp	r1, r2
 801f0e0:	d1f9      	bne.n	801f0d6 <memcpy+0xe>
 801f0e2:	bd10      	pop	{r4, pc}

0801f0e4 <memmove>:
 801f0e4:	4288      	cmp	r0, r1
 801f0e6:	b510      	push	{r4, lr}
 801f0e8:	eb01 0402 	add.w	r4, r1, r2
 801f0ec:	d902      	bls.n	801f0f4 <memmove+0x10>
 801f0ee:	4284      	cmp	r4, r0
 801f0f0:	4623      	mov	r3, r4
 801f0f2:	d807      	bhi.n	801f104 <memmove+0x20>
 801f0f4:	1e43      	subs	r3, r0, #1
 801f0f6:	42a1      	cmp	r1, r4
 801f0f8:	d008      	beq.n	801f10c <memmove+0x28>
 801f0fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f0fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f102:	e7f8      	b.n	801f0f6 <memmove+0x12>
 801f104:	4402      	add	r2, r0
 801f106:	4601      	mov	r1, r0
 801f108:	428a      	cmp	r2, r1
 801f10a:	d100      	bne.n	801f10e <memmove+0x2a>
 801f10c:	bd10      	pop	{r4, pc}
 801f10e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f116:	e7f7      	b.n	801f108 <memmove+0x24>

0801f118 <memset>:
 801f118:	4402      	add	r2, r0
 801f11a:	4603      	mov	r3, r0
 801f11c:	4293      	cmp	r3, r2
 801f11e:	d100      	bne.n	801f122 <memset+0xa>
 801f120:	4770      	bx	lr
 801f122:	f803 1b01 	strb.w	r1, [r3], #1
 801f126:	e7f9      	b.n	801f11c <memset+0x4>

0801f128 <_free_r>:
 801f128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f12a:	2900      	cmp	r1, #0
 801f12c:	d044      	beq.n	801f1b8 <_free_r+0x90>
 801f12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f132:	9001      	str	r0, [sp, #4]
 801f134:	2b00      	cmp	r3, #0
 801f136:	f1a1 0404 	sub.w	r4, r1, #4
 801f13a:	bfb8      	it	lt
 801f13c:	18e4      	addlt	r4, r4, r3
 801f13e:	f001 fe43 	bl	8020dc8 <__malloc_lock>
 801f142:	4a1e      	ldr	r2, [pc, #120]	; (801f1bc <_free_r+0x94>)
 801f144:	9801      	ldr	r0, [sp, #4]
 801f146:	6813      	ldr	r3, [r2, #0]
 801f148:	b933      	cbnz	r3, 801f158 <_free_r+0x30>
 801f14a:	6063      	str	r3, [r4, #4]
 801f14c:	6014      	str	r4, [r2, #0]
 801f14e:	b003      	add	sp, #12
 801f150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f154:	f001 be3e 	b.w	8020dd4 <__malloc_unlock>
 801f158:	42a3      	cmp	r3, r4
 801f15a:	d908      	bls.n	801f16e <_free_r+0x46>
 801f15c:	6825      	ldr	r5, [r4, #0]
 801f15e:	1961      	adds	r1, r4, r5
 801f160:	428b      	cmp	r3, r1
 801f162:	bf01      	itttt	eq
 801f164:	6819      	ldreq	r1, [r3, #0]
 801f166:	685b      	ldreq	r3, [r3, #4]
 801f168:	1949      	addeq	r1, r1, r5
 801f16a:	6021      	streq	r1, [r4, #0]
 801f16c:	e7ed      	b.n	801f14a <_free_r+0x22>
 801f16e:	461a      	mov	r2, r3
 801f170:	685b      	ldr	r3, [r3, #4]
 801f172:	b10b      	cbz	r3, 801f178 <_free_r+0x50>
 801f174:	42a3      	cmp	r3, r4
 801f176:	d9fa      	bls.n	801f16e <_free_r+0x46>
 801f178:	6811      	ldr	r1, [r2, #0]
 801f17a:	1855      	adds	r5, r2, r1
 801f17c:	42a5      	cmp	r5, r4
 801f17e:	d10b      	bne.n	801f198 <_free_r+0x70>
 801f180:	6824      	ldr	r4, [r4, #0]
 801f182:	4421      	add	r1, r4
 801f184:	1854      	adds	r4, r2, r1
 801f186:	42a3      	cmp	r3, r4
 801f188:	6011      	str	r1, [r2, #0]
 801f18a:	d1e0      	bne.n	801f14e <_free_r+0x26>
 801f18c:	681c      	ldr	r4, [r3, #0]
 801f18e:	685b      	ldr	r3, [r3, #4]
 801f190:	6053      	str	r3, [r2, #4]
 801f192:	4421      	add	r1, r4
 801f194:	6011      	str	r1, [r2, #0]
 801f196:	e7da      	b.n	801f14e <_free_r+0x26>
 801f198:	d902      	bls.n	801f1a0 <_free_r+0x78>
 801f19a:	230c      	movs	r3, #12
 801f19c:	6003      	str	r3, [r0, #0]
 801f19e:	e7d6      	b.n	801f14e <_free_r+0x26>
 801f1a0:	6825      	ldr	r5, [r4, #0]
 801f1a2:	1961      	adds	r1, r4, r5
 801f1a4:	428b      	cmp	r3, r1
 801f1a6:	bf04      	itt	eq
 801f1a8:	6819      	ldreq	r1, [r3, #0]
 801f1aa:	685b      	ldreq	r3, [r3, #4]
 801f1ac:	6063      	str	r3, [r4, #4]
 801f1ae:	bf04      	itt	eq
 801f1b0:	1949      	addeq	r1, r1, r5
 801f1b2:	6021      	streq	r1, [r4, #0]
 801f1b4:	6054      	str	r4, [r2, #4]
 801f1b6:	e7ca      	b.n	801f14e <_free_r+0x26>
 801f1b8:	b003      	add	sp, #12
 801f1ba:	bd30      	pop	{r4, r5, pc}
 801f1bc:	200099b0 	.word	0x200099b0

0801f1c0 <sbrk_aligned>:
 801f1c0:	b570      	push	{r4, r5, r6, lr}
 801f1c2:	4e0e      	ldr	r6, [pc, #56]	; (801f1fc <sbrk_aligned+0x3c>)
 801f1c4:	460c      	mov	r4, r1
 801f1c6:	6831      	ldr	r1, [r6, #0]
 801f1c8:	4605      	mov	r5, r0
 801f1ca:	b911      	cbnz	r1, 801f1d2 <sbrk_aligned+0x12>
 801f1cc:	f000 fd84 	bl	801fcd8 <_sbrk_r>
 801f1d0:	6030      	str	r0, [r6, #0]
 801f1d2:	4621      	mov	r1, r4
 801f1d4:	4628      	mov	r0, r5
 801f1d6:	f000 fd7f 	bl	801fcd8 <_sbrk_r>
 801f1da:	1c43      	adds	r3, r0, #1
 801f1dc:	d00a      	beq.n	801f1f4 <sbrk_aligned+0x34>
 801f1de:	1cc4      	adds	r4, r0, #3
 801f1e0:	f024 0403 	bic.w	r4, r4, #3
 801f1e4:	42a0      	cmp	r0, r4
 801f1e6:	d007      	beq.n	801f1f8 <sbrk_aligned+0x38>
 801f1e8:	1a21      	subs	r1, r4, r0
 801f1ea:	4628      	mov	r0, r5
 801f1ec:	f000 fd74 	bl	801fcd8 <_sbrk_r>
 801f1f0:	3001      	adds	r0, #1
 801f1f2:	d101      	bne.n	801f1f8 <sbrk_aligned+0x38>
 801f1f4:	f04f 34ff 	mov.w	r4, #4294967295
 801f1f8:	4620      	mov	r0, r4
 801f1fa:	bd70      	pop	{r4, r5, r6, pc}
 801f1fc:	200099b4 	.word	0x200099b4

0801f200 <_malloc_r>:
 801f200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f204:	1ccd      	adds	r5, r1, #3
 801f206:	f025 0503 	bic.w	r5, r5, #3
 801f20a:	3508      	adds	r5, #8
 801f20c:	2d0c      	cmp	r5, #12
 801f20e:	bf38      	it	cc
 801f210:	250c      	movcc	r5, #12
 801f212:	2d00      	cmp	r5, #0
 801f214:	4607      	mov	r7, r0
 801f216:	db01      	blt.n	801f21c <_malloc_r+0x1c>
 801f218:	42a9      	cmp	r1, r5
 801f21a:	d905      	bls.n	801f228 <_malloc_r+0x28>
 801f21c:	230c      	movs	r3, #12
 801f21e:	603b      	str	r3, [r7, #0]
 801f220:	2600      	movs	r6, #0
 801f222:	4630      	mov	r0, r6
 801f224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f228:	4e2e      	ldr	r6, [pc, #184]	; (801f2e4 <_malloc_r+0xe4>)
 801f22a:	f001 fdcd 	bl	8020dc8 <__malloc_lock>
 801f22e:	6833      	ldr	r3, [r6, #0]
 801f230:	461c      	mov	r4, r3
 801f232:	bb34      	cbnz	r4, 801f282 <_malloc_r+0x82>
 801f234:	4629      	mov	r1, r5
 801f236:	4638      	mov	r0, r7
 801f238:	f7ff ffc2 	bl	801f1c0 <sbrk_aligned>
 801f23c:	1c43      	adds	r3, r0, #1
 801f23e:	4604      	mov	r4, r0
 801f240:	d14d      	bne.n	801f2de <_malloc_r+0xde>
 801f242:	6834      	ldr	r4, [r6, #0]
 801f244:	4626      	mov	r6, r4
 801f246:	2e00      	cmp	r6, #0
 801f248:	d140      	bne.n	801f2cc <_malloc_r+0xcc>
 801f24a:	6823      	ldr	r3, [r4, #0]
 801f24c:	4631      	mov	r1, r6
 801f24e:	4638      	mov	r0, r7
 801f250:	eb04 0803 	add.w	r8, r4, r3
 801f254:	f000 fd40 	bl	801fcd8 <_sbrk_r>
 801f258:	4580      	cmp	r8, r0
 801f25a:	d13a      	bne.n	801f2d2 <_malloc_r+0xd2>
 801f25c:	6821      	ldr	r1, [r4, #0]
 801f25e:	3503      	adds	r5, #3
 801f260:	1a6d      	subs	r5, r5, r1
 801f262:	f025 0503 	bic.w	r5, r5, #3
 801f266:	3508      	adds	r5, #8
 801f268:	2d0c      	cmp	r5, #12
 801f26a:	bf38      	it	cc
 801f26c:	250c      	movcc	r5, #12
 801f26e:	4629      	mov	r1, r5
 801f270:	4638      	mov	r0, r7
 801f272:	f7ff ffa5 	bl	801f1c0 <sbrk_aligned>
 801f276:	3001      	adds	r0, #1
 801f278:	d02b      	beq.n	801f2d2 <_malloc_r+0xd2>
 801f27a:	6823      	ldr	r3, [r4, #0]
 801f27c:	442b      	add	r3, r5
 801f27e:	6023      	str	r3, [r4, #0]
 801f280:	e00e      	b.n	801f2a0 <_malloc_r+0xa0>
 801f282:	6822      	ldr	r2, [r4, #0]
 801f284:	1b52      	subs	r2, r2, r5
 801f286:	d41e      	bmi.n	801f2c6 <_malloc_r+0xc6>
 801f288:	2a0b      	cmp	r2, #11
 801f28a:	d916      	bls.n	801f2ba <_malloc_r+0xba>
 801f28c:	1961      	adds	r1, r4, r5
 801f28e:	42a3      	cmp	r3, r4
 801f290:	6025      	str	r5, [r4, #0]
 801f292:	bf18      	it	ne
 801f294:	6059      	strne	r1, [r3, #4]
 801f296:	6863      	ldr	r3, [r4, #4]
 801f298:	bf08      	it	eq
 801f29a:	6031      	streq	r1, [r6, #0]
 801f29c:	5162      	str	r2, [r4, r5]
 801f29e:	604b      	str	r3, [r1, #4]
 801f2a0:	4638      	mov	r0, r7
 801f2a2:	f104 060b 	add.w	r6, r4, #11
 801f2a6:	f001 fd95 	bl	8020dd4 <__malloc_unlock>
 801f2aa:	f026 0607 	bic.w	r6, r6, #7
 801f2ae:	1d23      	adds	r3, r4, #4
 801f2b0:	1af2      	subs	r2, r6, r3
 801f2b2:	d0b6      	beq.n	801f222 <_malloc_r+0x22>
 801f2b4:	1b9b      	subs	r3, r3, r6
 801f2b6:	50a3      	str	r3, [r4, r2]
 801f2b8:	e7b3      	b.n	801f222 <_malloc_r+0x22>
 801f2ba:	6862      	ldr	r2, [r4, #4]
 801f2bc:	42a3      	cmp	r3, r4
 801f2be:	bf0c      	ite	eq
 801f2c0:	6032      	streq	r2, [r6, #0]
 801f2c2:	605a      	strne	r2, [r3, #4]
 801f2c4:	e7ec      	b.n	801f2a0 <_malloc_r+0xa0>
 801f2c6:	4623      	mov	r3, r4
 801f2c8:	6864      	ldr	r4, [r4, #4]
 801f2ca:	e7b2      	b.n	801f232 <_malloc_r+0x32>
 801f2cc:	4634      	mov	r4, r6
 801f2ce:	6876      	ldr	r6, [r6, #4]
 801f2d0:	e7b9      	b.n	801f246 <_malloc_r+0x46>
 801f2d2:	230c      	movs	r3, #12
 801f2d4:	603b      	str	r3, [r7, #0]
 801f2d6:	4638      	mov	r0, r7
 801f2d8:	f001 fd7c 	bl	8020dd4 <__malloc_unlock>
 801f2dc:	e7a1      	b.n	801f222 <_malloc_r+0x22>
 801f2de:	6025      	str	r5, [r4, #0]
 801f2e0:	e7de      	b.n	801f2a0 <_malloc_r+0xa0>
 801f2e2:	bf00      	nop
 801f2e4:	200099b0 	.word	0x200099b0

0801f2e8 <__cvt>:
 801f2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f2ec:	ec55 4b10 	vmov	r4, r5, d0
 801f2f0:	2d00      	cmp	r5, #0
 801f2f2:	460e      	mov	r6, r1
 801f2f4:	4619      	mov	r1, r3
 801f2f6:	462b      	mov	r3, r5
 801f2f8:	bfbb      	ittet	lt
 801f2fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f2fe:	461d      	movlt	r5, r3
 801f300:	2300      	movge	r3, #0
 801f302:	232d      	movlt	r3, #45	; 0x2d
 801f304:	700b      	strb	r3, [r1, #0]
 801f306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f308:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f30c:	4691      	mov	r9, r2
 801f30e:	f023 0820 	bic.w	r8, r3, #32
 801f312:	bfbc      	itt	lt
 801f314:	4622      	movlt	r2, r4
 801f316:	4614      	movlt	r4, r2
 801f318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f31c:	d005      	beq.n	801f32a <__cvt+0x42>
 801f31e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f322:	d100      	bne.n	801f326 <__cvt+0x3e>
 801f324:	3601      	adds	r6, #1
 801f326:	2102      	movs	r1, #2
 801f328:	e000      	b.n	801f32c <__cvt+0x44>
 801f32a:	2103      	movs	r1, #3
 801f32c:	ab03      	add	r3, sp, #12
 801f32e:	9301      	str	r3, [sp, #4]
 801f330:	ab02      	add	r3, sp, #8
 801f332:	9300      	str	r3, [sp, #0]
 801f334:	ec45 4b10 	vmov	d0, r4, r5
 801f338:	4653      	mov	r3, sl
 801f33a:	4632      	mov	r2, r6
 801f33c:	f000 ff0c 	bl	8020158 <_dtoa_r>
 801f340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f344:	4607      	mov	r7, r0
 801f346:	d102      	bne.n	801f34e <__cvt+0x66>
 801f348:	f019 0f01 	tst.w	r9, #1
 801f34c:	d022      	beq.n	801f394 <__cvt+0xac>
 801f34e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f352:	eb07 0906 	add.w	r9, r7, r6
 801f356:	d110      	bne.n	801f37a <__cvt+0x92>
 801f358:	783b      	ldrb	r3, [r7, #0]
 801f35a:	2b30      	cmp	r3, #48	; 0x30
 801f35c:	d10a      	bne.n	801f374 <__cvt+0x8c>
 801f35e:	2200      	movs	r2, #0
 801f360:	2300      	movs	r3, #0
 801f362:	4620      	mov	r0, r4
 801f364:	4629      	mov	r1, r5
 801f366:	f7e1 fb87 	bl	8000a78 <__aeabi_dcmpeq>
 801f36a:	b918      	cbnz	r0, 801f374 <__cvt+0x8c>
 801f36c:	f1c6 0601 	rsb	r6, r6, #1
 801f370:	f8ca 6000 	str.w	r6, [sl]
 801f374:	f8da 3000 	ldr.w	r3, [sl]
 801f378:	4499      	add	r9, r3
 801f37a:	2200      	movs	r2, #0
 801f37c:	2300      	movs	r3, #0
 801f37e:	4620      	mov	r0, r4
 801f380:	4629      	mov	r1, r5
 801f382:	f7e1 fb79 	bl	8000a78 <__aeabi_dcmpeq>
 801f386:	b108      	cbz	r0, 801f38c <__cvt+0xa4>
 801f388:	f8cd 900c 	str.w	r9, [sp, #12]
 801f38c:	2230      	movs	r2, #48	; 0x30
 801f38e:	9b03      	ldr	r3, [sp, #12]
 801f390:	454b      	cmp	r3, r9
 801f392:	d307      	bcc.n	801f3a4 <__cvt+0xbc>
 801f394:	9b03      	ldr	r3, [sp, #12]
 801f396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f398:	1bdb      	subs	r3, r3, r7
 801f39a:	4638      	mov	r0, r7
 801f39c:	6013      	str	r3, [r2, #0]
 801f39e:	b004      	add	sp, #16
 801f3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3a4:	1c59      	adds	r1, r3, #1
 801f3a6:	9103      	str	r1, [sp, #12]
 801f3a8:	701a      	strb	r2, [r3, #0]
 801f3aa:	e7f0      	b.n	801f38e <__cvt+0xa6>

0801f3ac <__exponent>:
 801f3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f3ae:	4603      	mov	r3, r0
 801f3b0:	2900      	cmp	r1, #0
 801f3b2:	bfb8      	it	lt
 801f3b4:	4249      	neglt	r1, r1
 801f3b6:	f803 2b02 	strb.w	r2, [r3], #2
 801f3ba:	bfb4      	ite	lt
 801f3bc:	222d      	movlt	r2, #45	; 0x2d
 801f3be:	222b      	movge	r2, #43	; 0x2b
 801f3c0:	2909      	cmp	r1, #9
 801f3c2:	7042      	strb	r2, [r0, #1]
 801f3c4:	dd2a      	ble.n	801f41c <__exponent+0x70>
 801f3c6:	f10d 0407 	add.w	r4, sp, #7
 801f3ca:	46a4      	mov	ip, r4
 801f3cc:	270a      	movs	r7, #10
 801f3ce:	46a6      	mov	lr, r4
 801f3d0:	460a      	mov	r2, r1
 801f3d2:	fb91 f6f7 	sdiv	r6, r1, r7
 801f3d6:	fb07 1516 	mls	r5, r7, r6, r1
 801f3da:	3530      	adds	r5, #48	; 0x30
 801f3dc:	2a63      	cmp	r2, #99	; 0x63
 801f3de:	f104 34ff 	add.w	r4, r4, #4294967295
 801f3e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f3e6:	4631      	mov	r1, r6
 801f3e8:	dcf1      	bgt.n	801f3ce <__exponent+0x22>
 801f3ea:	3130      	adds	r1, #48	; 0x30
 801f3ec:	f1ae 0502 	sub.w	r5, lr, #2
 801f3f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f3f4:	1c44      	adds	r4, r0, #1
 801f3f6:	4629      	mov	r1, r5
 801f3f8:	4561      	cmp	r1, ip
 801f3fa:	d30a      	bcc.n	801f412 <__exponent+0x66>
 801f3fc:	f10d 0209 	add.w	r2, sp, #9
 801f400:	eba2 020e 	sub.w	r2, r2, lr
 801f404:	4565      	cmp	r5, ip
 801f406:	bf88      	it	hi
 801f408:	2200      	movhi	r2, #0
 801f40a:	4413      	add	r3, r2
 801f40c:	1a18      	subs	r0, r3, r0
 801f40e:	b003      	add	sp, #12
 801f410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f412:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f416:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f41a:	e7ed      	b.n	801f3f8 <__exponent+0x4c>
 801f41c:	2330      	movs	r3, #48	; 0x30
 801f41e:	3130      	adds	r1, #48	; 0x30
 801f420:	7083      	strb	r3, [r0, #2]
 801f422:	70c1      	strb	r1, [r0, #3]
 801f424:	1d03      	adds	r3, r0, #4
 801f426:	e7f1      	b.n	801f40c <__exponent+0x60>

0801f428 <_printf_float>:
 801f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f42c:	ed2d 8b02 	vpush	{d8}
 801f430:	b08d      	sub	sp, #52	; 0x34
 801f432:	460c      	mov	r4, r1
 801f434:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f438:	4616      	mov	r6, r2
 801f43a:	461f      	mov	r7, r3
 801f43c:	4605      	mov	r5, r0
 801f43e:	f001 fc9b 	bl	8020d78 <_localeconv_r>
 801f442:	f8d0 a000 	ldr.w	sl, [r0]
 801f446:	4650      	mov	r0, sl
 801f448:	f7e0 fe9a 	bl	8000180 <strlen>
 801f44c:	2300      	movs	r3, #0
 801f44e:	930a      	str	r3, [sp, #40]	; 0x28
 801f450:	6823      	ldr	r3, [r4, #0]
 801f452:	9305      	str	r3, [sp, #20]
 801f454:	f8d8 3000 	ldr.w	r3, [r8]
 801f458:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f45c:	3307      	adds	r3, #7
 801f45e:	f023 0307 	bic.w	r3, r3, #7
 801f462:	f103 0208 	add.w	r2, r3, #8
 801f466:	f8c8 2000 	str.w	r2, [r8]
 801f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f46e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f472:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f47a:	9307      	str	r3, [sp, #28]
 801f47c:	f8cd 8018 	str.w	r8, [sp, #24]
 801f480:	ee08 0a10 	vmov	s16, r0
 801f484:	4b9f      	ldr	r3, [pc, #636]	; (801f704 <_printf_float+0x2dc>)
 801f486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f48a:	f04f 32ff 	mov.w	r2, #4294967295
 801f48e:	f7e1 fb25 	bl	8000adc <__aeabi_dcmpun>
 801f492:	bb88      	cbnz	r0, 801f4f8 <_printf_float+0xd0>
 801f494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f498:	4b9a      	ldr	r3, [pc, #616]	; (801f704 <_printf_float+0x2dc>)
 801f49a:	f04f 32ff 	mov.w	r2, #4294967295
 801f49e:	f7e1 faff 	bl	8000aa0 <__aeabi_dcmple>
 801f4a2:	bb48      	cbnz	r0, 801f4f8 <_printf_float+0xd0>
 801f4a4:	2200      	movs	r2, #0
 801f4a6:	2300      	movs	r3, #0
 801f4a8:	4640      	mov	r0, r8
 801f4aa:	4649      	mov	r1, r9
 801f4ac:	f7e1 faee 	bl	8000a8c <__aeabi_dcmplt>
 801f4b0:	b110      	cbz	r0, 801f4b8 <_printf_float+0x90>
 801f4b2:	232d      	movs	r3, #45	; 0x2d
 801f4b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f4b8:	4b93      	ldr	r3, [pc, #588]	; (801f708 <_printf_float+0x2e0>)
 801f4ba:	4894      	ldr	r0, [pc, #592]	; (801f70c <_printf_float+0x2e4>)
 801f4bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f4c0:	bf94      	ite	ls
 801f4c2:	4698      	movls	r8, r3
 801f4c4:	4680      	movhi	r8, r0
 801f4c6:	2303      	movs	r3, #3
 801f4c8:	6123      	str	r3, [r4, #16]
 801f4ca:	9b05      	ldr	r3, [sp, #20]
 801f4cc:	f023 0204 	bic.w	r2, r3, #4
 801f4d0:	6022      	str	r2, [r4, #0]
 801f4d2:	f04f 0900 	mov.w	r9, #0
 801f4d6:	9700      	str	r7, [sp, #0]
 801f4d8:	4633      	mov	r3, r6
 801f4da:	aa0b      	add	r2, sp, #44	; 0x2c
 801f4dc:	4621      	mov	r1, r4
 801f4de:	4628      	mov	r0, r5
 801f4e0:	f000 f9d8 	bl	801f894 <_printf_common>
 801f4e4:	3001      	adds	r0, #1
 801f4e6:	f040 8090 	bne.w	801f60a <_printf_float+0x1e2>
 801f4ea:	f04f 30ff 	mov.w	r0, #4294967295
 801f4ee:	b00d      	add	sp, #52	; 0x34
 801f4f0:	ecbd 8b02 	vpop	{d8}
 801f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4f8:	4642      	mov	r2, r8
 801f4fa:	464b      	mov	r3, r9
 801f4fc:	4640      	mov	r0, r8
 801f4fe:	4649      	mov	r1, r9
 801f500:	f7e1 faec 	bl	8000adc <__aeabi_dcmpun>
 801f504:	b140      	cbz	r0, 801f518 <_printf_float+0xf0>
 801f506:	464b      	mov	r3, r9
 801f508:	2b00      	cmp	r3, #0
 801f50a:	bfbc      	itt	lt
 801f50c:	232d      	movlt	r3, #45	; 0x2d
 801f50e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f512:	487f      	ldr	r0, [pc, #508]	; (801f710 <_printf_float+0x2e8>)
 801f514:	4b7f      	ldr	r3, [pc, #508]	; (801f714 <_printf_float+0x2ec>)
 801f516:	e7d1      	b.n	801f4bc <_printf_float+0x94>
 801f518:	6863      	ldr	r3, [r4, #4]
 801f51a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f51e:	9206      	str	r2, [sp, #24]
 801f520:	1c5a      	adds	r2, r3, #1
 801f522:	d13f      	bne.n	801f5a4 <_printf_float+0x17c>
 801f524:	2306      	movs	r3, #6
 801f526:	6063      	str	r3, [r4, #4]
 801f528:	9b05      	ldr	r3, [sp, #20]
 801f52a:	6861      	ldr	r1, [r4, #4]
 801f52c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f530:	2300      	movs	r3, #0
 801f532:	9303      	str	r3, [sp, #12]
 801f534:	ab0a      	add	r3, sp, #40	; 0x28
 801f536:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f53a:	ab09      	add	r3, sp, #36	; 0x24
 801f53c:	ec49 8b10 	vmov	d0, r8, r9
 801f540:	9300      	str	r3, [sp, #0]
 801f542:	6022      	str	r2, [r4, #0]
 801f544:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f548:	4628      	mov	r0, r5
 801f54a:	f7ff fecd 	bl	801f2e8 <__cvt>
 801f54e:	9b06      	ldr	r3, [sp, #24]
 801f550:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f552:	2b47      	cmp	r3, #71	; 0x47
 801f554:	4680      	mov	r8, r0
 801f556:	d108      	bne.n	801f56a <_printf_float+0x142>
 801f558:	1cc8      	adds	r0, r1, #3
 801f55a:	db02      	blt.n	801f562 <_printf_float+0x13a>
 801f55c:	6863      	ldr	r3, [r4, #4]
 801f55e:	4299      	cmp	r1, r3
 801f560:	dd41      	ble.n	801f5e6 <_printf_float+0x1be>
 801f562:	f1ab 0b02 	sub.w	fp, fp, #2
 801f566:	fa5f fb8b 	uxtb.w	fp, fp
 801f56a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f56e:	d820      	bhi.n	801f5b2 <_printf_float+0x18a>
 801f570:	3901      	subs	r1, #1
 801f572:	465a      	mov	r2, fp
 801f574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f578:	9109      	str	r1, [sp, #36]	; 0x24
 801f57a:	f7ff ff17 	bl	801f3ac <__exponent>
 801f57e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f580:	1813      	adds	r3, r2, r0
 801f582:	2a01      	cmp	r2, #1
 801f584:	4681      	mov	r9, r0
 801f586:	6123      	str	r3, [r4, #16]
 801f588:	dc02      	bgt.n	801f590 <_printf_float+0x168>
 801f58a:	6822      	ldr	r2, [r4, #0]
 801f58c:	07d2      	lsls	r2, r2, #31
 801f58e:	d501      	bpl.n	801f594 <_printf_float+0x16c>
 801f590:	3301      	adds	r3, #1
 801f592:	6123      	str	r3, [r4, #16]
 801f594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d09c      	beq.n	801f4d6 <_printf_float+0xae>
 801f59c:	232d      	movs	r3, #45	; 0x2d
 801f59e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f5a2:	e798      	b.n	801f4d6 <_printf_float+0xae>
 801f5a4:	9a06      	ldr	r2, [sp, #24]
 801f5a6:	2a47      	cmp	r2, #71	; 0x47
 801f5a8:	d1be      	bne.n	801f528 <_printf_float+0x100>
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d1bc      	bne.n	801f528 <_printf_float+0x100>
 801f5ae:	2301      	movs	r3, #1
 801f5b0:	e7b9      	b.n	801f526 <_printf_float+0xfe>
 801f5b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f5b6:	d118      	bne.n	801f5ea <_printf_float+0x1c2>
 801f5b8:	2900      	cmp	r1, #0
 801f5ba:	6863      	ldr	r3, [r4, #4]
 801f5bc:	dd0b      	ble.n	801f5d6 <_printf_float+0x1ae>
 801f5be:	6121      	str	r1, [r4, #16]
 801f5c0:	b913      	cbnz	r3, 801f5c8 <_printf_float+0x1a0>
 801f5c2:	6822      	ldr	r2, [r4, #0]
 801f5c4:	07d0      	lsls	r0, r2, #31
 801f5c6:	d502      	bpl.n	801f5ce <_printf_float+0x1a6>
 801f5c8:	3301      	adds	r3, #1
 801f5ca:	440b      	add	r3, r1
 801f5cc:	6123      	str	r3, [r4, #16]
 801f5ce:	65a1      	str	r1, [r4, #88]	; 0x58
 801f5d0:	f04f 0900 	mov.w	r9, #0
 801f5d4:	e7de      	b.n	801f594 <_printf_float+0x16c>
 801f5d6:	b913      	cbnz	r3, 801f5de <_printf_float+0x1b6>
 801f5d8:	6822      	ldr	r2, [r4, #0]
 801f5da:	07d2      	lsls	r2, r2, #31
 801f5dc:	d501      	bpl.n	801f5e2 <_printf_float+0x1ba>
 801f5de:	3302      	adds	r3, #2
 801f5e0:	e7f4      	b.n	801f5cc <_printf_float+0x1a4>
 801f5e2:	2301      	movs	r3, #1
 801f5e4:	e7f2      	b.n	801f5cc <_printf_float+0x1a4>
 801f5e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5ec:	4299      	cmp	r1, r3
 801f5ee:	db05      	blt.n	801f5fc <_printf_float+0x1d4>
 801f5f0:	6823      	ldr	r3, [r4, #0]
 801f5f2:	6121      	str	r1, [r4, #16]
 801f5f4:	07d8      	lsls	r0, r3, #31
 801f5f6:	d5ea      	bpl.n	801f5ce <_printf_float+0x1a6>
 801f5f8:	1c4b      	adds	r3, r1, #1
 801f5fa:	e7e7      	b.n	801f5cc <_printf_float+0x1a4>
 801f5fc:	2900      	cmp	r1, #0
 801f5fe:	bfd4      	ite	le
 801f600:	f1c1 0202 	rsble	r2, r1, #2
 801f604:	2201      	movgt	r2, #1
 801f606:	4413      	add	r3, r2
 801f608:	e7e0      	b.n	801f5cc <_printf_float+0x1a4>
 801f60a:	6823      	ldr	r3, [r4, #0]
 801f60c:	055a      	lsls	r2, r3, #21
 801f60e:	d407      	bmi.n	801f620 <_printf_float+0x1f8>
 801f610:	6923      	ldr	r3, [r4, #16]
 801f612:	4642      	mov	r2, r8
 801f614:	4631      	mov	r1, r6
 801f616:	4628      	mov	r0, r5
 801f618:	47b8      	blx	r7
 801f61a:	3001      	adds	r0, #1
 801f61c:	d12c      	bne.n	801f678 <_printf_float+0x250>
 801f61e:	e764      	b.n	801f4ea <_printf_float+0xc2>
 801f620:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f624:	f240 80e0 	bls.w	801f7e8 <_printf_float+0x3c0>
 801f628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f62c:	2200      	movs	r2, #0
 801f62e:	2300      	movs	r3, #0
 801f630:	f7e1 fa22 	bl	8000a78 <__aeabi_dcmpeq>
 801f634:	2800      	cmp	r0, #0
 801f636:	d034      	beq.n	801f6a2 <_printf_float+0x27a>
 801f638:	4a37      	ldr	r2, [pc, #220]	; (801f718 <_printf_float+0x2f0>)
 801f63a:	2301      	movs	r3, #1
 801f63c:	4631      	mov	r1, r6
 801f63e:	4628      	mov	r0, r5
 801f640:	47b8      	blx	r7
 801f642:	3001      	adds	r0, #1
 801f644:	f43f af51 	beq.w	801f4ea <_printf_float+0xc2>
 801f648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f64c:	429a      	cmp	r2, r3
 801f64e:	db02      	blt.n	801f656 <_printf_float+0x22e>
 801f650:	6823      	ldr	r3, [r4, #0]
 801f652:	07d8      	lsls	r0, r3, #31
 801f654:	d510      	bpl.n	801f678 <_printf_float+0x250>
 801f656:	ee18 3a10 	vmov	r3, s16
 801f65a:	4652      	mov	r2, sl
 801f65c:	4631      	mov	r1, r6
 801f65e:	4628      	mov	r0, r5
 801f660:	47b8      	blx	r7
 801f662:	3001      	adds	r0, #1
 801f664:	f43f af41 	beq.w	801f4ea <_printf_float+0xc2>
 801f668:	f04f 0800 	mov.w	r8, #0
 801f66c:	f104 091a 	add.w	r9, r4, #26
 801f670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f672:	3b01      	subs	r3, #1
 801f674:	4543      	cmp	r3, r8
 801f676:	dc09      	bgt.n	801f68c <_printf_float+0x264>
 801f678:	6823      	ldr	r3, [r4, #0]
 801f67a:	079b      	lsls	r3, r3, #30
 801f67c:	f100 8105 	bmi.w	801f88a <_printf_float+0x462>
 801f680:	68e0      	ldr	r0, [r4, #12]
 801f682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f684:	4298      	cmp	r0, r3
 801f686:	bfb8      	it	lt
 801f688:	4618      	movlt	r0, r3
 801f68a:	e730      	b.n	801f4ee <_printf_float+0xc6>
 801f68c:	2301      	movs	r3, #1
 801f68e:	464a      	mov	r2, r9
 801f690:	4631      	mov	r1, r6
 801f692:	4628      	mov	r0, r5
 801f694:	47b8      	blx	r7
 801f696:	3001      	adds	r0, #1
 801f698:	f43f af27 	beq.w	801f4ea <_printf_float+0xc2>
 801f69c:	f108 0801 	add.w	r8, r8, #1
 801f6a0:	e7e6      	b.n	801f670 <_printf_float+0x248>
 801f6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	dc39      	bgt.n	801f71c <_printf_float+0x2f4>
 801f6a8:	4a1b      	ldr	r2, [pc, #108]	; (801f718 <_printf_float+0x2f0>)
 801f6aa:	2301      	movs	r3, #1
 801f6ac:	4631      	mov	r1, r6
 801f6ae:	4628      	mov	r0, r5
 801f6b0:	47b8      	blx	r7
 801f6b2:	3001      	adds	r0, #1
 801f6b4:	f43f af19 	beq.w	801f4ea <_printf_float+0xc2>
 801f6b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f6bc:	4313      	orrs	r3, r2
 801f6be:	d102      	bne.n	801f6c6 <_printf_float+0x29e>
 801f6c0:	6823      	ldr	r3, [r4, #0]
 801f6c2:	07d9      	lsls	r1, r3, #31
 801f6c4:	d5d8      	bpl.n	801f678 <_printf_float+0x250>
 801f6c6:	ee18 3a10 	vmov	r3, s16
 801f6ca:	4652      	mov	r2, sl
 801f6cc:	4631      	mov	r1, r6
 801f6ce:	4628      	mov	r0, r5
 801f6d0:	47b8      	blx	r7
 801f6d2:	3001      	adds	r0, #1
 801f6d4:	f43f af09 	beq.w	801f4ea <_printf_float+0xc2>
 801f6d8:	f04f 0900 	mov.w	r9, #0
 801f6dc:	f104 0a1a 	add.w	sl, r4, #26
 801f6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6e2:	425b      	negs	r3, r3
 801f6e4:	454b      	cmp	r3, r9
 801f6e6:	dc01      	bgt.n	801f6ec <_printf_float+0x2c4>
 801f6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6ea:	e792      	b.n	801f612 <_printf_float+0x1ea>
 801f6ec:	2301      	movs	r3, #1
 801f6ee:	4652      	mov	r2, sl
 801f6f0:	4631      	mov	r1, r6
 801f6f2:	4628      	mov	r0, r5
 801f6f4:	47b8      	blx	r7
 801f6f6:	3001      	adds	r0, #1
 801f6f8:	f43f aef7 	beq.w	801f4ea <_printf_float+0xc2>
 801f6fc:	f109 0901 	add.w	r9, r9, #1
 801f700:	e7ee      	b.n	801f6e0 <_printf_float+0x2b8>
 801f702:	bf00      	nop
 801f704:	7fefffff 	.word	0x7fefffff
 801f708:	08022b5c 	.word	0x08022b5c
 801f70c:	08022b60 	.word	0x08022b60
 801f710:	08022b68 	.word	0x08022b68
 801f714:	08022b64 	.word	0x08022b64
 801f718:	08022b6c 	.word	0x08022b6c
 801f71c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f71e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f720:	429a      	cmp	r2, r3
 801f722:	bfa8      	it	ge
 801f724:	461a      	movge	r2, r3
 801f726:	2a00      	cmp	r2, #0
 801f728:	4691      	mov	r9, r2
 801f72a:	dc37      	bgt.n	801f79c <_printf_float+0x374>
 801f72c:	f04f 0b00 	mov.w	fp, #0
 801f730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f734:	f104 021a 	add.w	r2, r4, #26
 801f738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f73a:	9305      	str	r3, [sp, #20]
 801f73c:	eba3 0309 	sub.w	r3, r3, r9
 801f740:	455b      	cmp	r3, fp
 801f742:	dc33      	bgt.n	801f7ac <_printf_float+0x384>
 801f744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f748:	429a      	cmp	r2, r3
 801f74a:	db3b      	blt.n	801f7c4 <_printf_float+0x39c>
 801f74c:	6823      	ldr	r3, [r4, #0]
 801f74e:	07da      	lsls	r2, r3, #31
 801f750:	d438      	bmi.n	801f7c4 <_printf_float+0x39c>
 801f752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f754:	9a05      	ldr	r2, [sp, #20]
 801f756:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f758:	1a9a      	subs	r2, r3, r2
 801f75a:	eba3 0901 	sub.w	r9, r3, r1
 801f75e:	4591      	cmp	r9, r2
 801f760:	bfa8      	it	ge
 801f762:	4691      	movge	r9, r2
 801f764:	f1b9 0f00 	cmp.w	r9, #0
 801f768:	dc35      	bgt.n	801f7d6 <_printf_float+0x3ae>
 801f76a:	f04f 0800 	mov.w	r8, #0
 801f76e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f772:	f104 0a1a 	add.w	sl, r4, #26
 801f776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f77a:	1a9b      	subs	r3, r3, r2
 801f77c:	eba3 0309 	sub.w	r3, r3, r9
 801f780:	4543      	cmp	r3, r8
 801f782:	f77f af79 	ble.w	801f678 <_printf_float+0x250>
 801f786:	2301      	movs	r3, #1
 801f788:	4652      	mov	r2, sl
 801f78a:	4631      	mov	r1, r6
 801f78c:	4628      	mov	r0, r5
 801f78e:	47b8      	blx	r7
 801f790:	3001      	adds	r0, #1
 801f792:	f43f aeaa 	beq.w	801f4ea <_printf_float+0xc2>
 801f796:	f108 0801 	add.w	r8, r8, #1
 801f79a:	e7ec      	b.n	801f776 <_printf_float+0x34e>
 801f79c:	4613      	mov	r3, r2
 801f79e:	4631      	mov	r1, r6
 801f7a0:	4642      	mov	r2, r8
 801f7a2:	4628      	mov	r0, r5
 801f7a4:	47b8      	blx	r7
 801f7a6:	3001      	adds	r0, #1
 801f7a8:	d1c0      	bne.n	801f72c <_printf_float+0x304>
 801f7aa:	e69e      	b.n	801f4ea <_printf_float+0xc2>
 801f7ac:	2301      	movs	r3, #1
 801f7ae:	4631      	mov	r1, r6
 801f7b0:	4628      	mov	r0, r5
 801f7b2:	9205      	str	r2, [sp, #20]
 801f7b4:	47b8      	blx	r7
 801f7b6:	3001      	adds	r0, #1
 801f7b8:	f43f ae97 	beq.w	801f4ea <_printf_float+0xc2>
 801f7bc:	9a05      	ldr	r2, [sp, #20]
 801f7be:	f10b 0b01 	add.w	fp, fp, #1
 801f7c2:	e7b9      	b.n	801f738 <_printf_float+0x310>
 801f7c4:	ee18 3a10 	vmov	r3, s16
 801f7c8:	4652      	mov	r2, sl
 801f7ca:	4631      	mov	r1, r6
 801f7cc:	4628      	mov	r0, r5
 801f7ce:	47b8      	blx	r7
 801f7d0:	3001      	adds	r0, #1
 801f7d2:	d1be      	bne.n	801f752 <_printf_float+0x32a>
 801f7d4:	e689      	b.n	801f4ea <_printf_float+0xc2>
 801f7d6:	9a05      	ldr	r2, [sp, #20]
 801f7d8:	464b      	mov	r3, r9
 801f7da:	4442      	add	r2, r8
 801f7dc:	4631      	mov	r1, r6
 801f7de:	4628      	mov	r0, r5
 801f7e0:	47b8      	blx	r7
 801f7e2:	3001      	adds	r0, #1
 801f7e4:	d1c1      	bne.n	801f76a <_printf_float+0x342>
 801f7e6:	e680      	b.n	801f4ea <_printf_float+0xc2>
 801f7e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f7ea:	2a01      	cmp	r2, #1
 801f7ec:	dc01      	bgt.n	801f7f2 <_printf_float+0x3ca>
 801f7ee:	07db      	lsls	r3, r3, #31
 801f7f0:	d538      	bpl.n	801f864 <_printf_float+0x43c>
 801f7f2:	2301      	movs	r3, #1
 801f7f4:	4642      	mov	r2, r8
 801f7f6:	4631      	mov	r1, r6
 801f7f8:	4628      	mov	r0, r5
 801f7fa:	47b8      	blx	r7
 801f7fc:	3001      	adds	r0, #1
 801f7fe:	f43f ae74 	beq.w	801f4ea <_printf_float+0xc2>
 801f802:	ee18 3a10 	vmov	r3, s16
 801f806:	4652      	mov	r2, sl
 801f808:	4631      	mov	r1, r6
 801f80a:	4628      	mov	r0, r5
 801f80c:	47b8      	blx	r7
 801f80e:	3001      	adds	r0, #1
 801f810:	f43f ae6b 	beq.w	801f4ea <_printf_float+0xc2>
 801f814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f818:	2200      	movs	r2, #0
 801f81a:	2300      	movs	r3, #0
 801f81c:	f7e1 f92c 	bl	8000a78 <__aeabi_dcmpeq>
 801f820:	b9d8      	cbnz	r0, 801f85a <_printf_float+0x432>
 801f822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f824:	f108 0201 	add.w	r2, r8, #1
 801f828:	3b01      	subs	r3, #1
 801f82a:	4631      	mov	r1, r6
 801f82c:	4628      	mov	r0, r5
 801f82e:	47b8      	blx	r7
 801f830:	3001      	adds	r0, #1
 801f832:	d10e      	bne.n	801f852 <_printf_float+0x42a>
 801f834:	e659      	b.n	801f4ea <_printf_float+0xc2>
 801f836:	2301      	movs	r3, #1
 801f838:	4652      	mov	r2, sl
 801f83a:	4631      	mov	r1, r6
 801f83c:	4628      	mov	r0, r5
 801f83e:	47b8      	blx	r7
 801f840:	3001      	adds	r0, #1
 801f842:	f43f ae52 	beq.w	801f4ea <_printf_float+0xc2>
 801f846:	f108 0801 	add.w	r8, r8, #1
 801f84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f84c:	3b01      	subs	r3, #1
 801f84e:	4543      	cmp	r3, r8
 801f850:	dcf1      	bgt.n	801f836 <_printf_float+0x40e>
 801f852:	464b      	mov	r3, r9
 801f854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f858:	e6dc      	b.n	801f614 <_printf_float+0x1ec>
 801f85a:	f04f 0800 	mov.w	r8, #0
 801f85e:	f104 0a1a 	add.w	sl, r4, #26
 801f862:	e7f2      	b.n	801f84a <_printf_float+0x422>
 801f864:	2301      	movs	r3, #1
 801f866:	4642      	mov	r2, r8
 801f868:	e7df      	b.n	801f82a <_printf_float+0x402>
 801f86a:	2301      	movs	r3, #1
 801f86c:	464a      	mov	r2, r9
 801f86e:	4631      	mov	r1, r6
 801f870:	4628      	mov	r0, r5
 801f872:	47b8      	blx	r7
 801f874:	3001      	adds	r0, #1
 801f876:	f43f ae38 	beq.w	801f4ea <_printf_float+0xc2>
 801f87a:	f108 0801 	add.w	r8, r8, #1
 801f87e:	68e3      	ldr	r3, [r4, #12]
 801f880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f882:	1a5b      	subs	r3, r3, r1
 801f884:	4543      	cmp	r3, r8
 801f886:	dcf0      	bgt.n	801f86a <_printf_float+0x442>
 801f888:	e6fa      	b.n	801f680 <_printf_float+0x258>
 801f88a:	f04f 0800 	mov.w	r8, #0
 801f88e:	f104 0919 	add.w	r9, r4, #25
 801f892:	e7f4      	b.n	801f87e <_printf_float+0x456>

0801f894 <_printf_common>:
 801f894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f898:	4616      	mov	r6, r2
 801f89a:	4699      	mov	r9, r3
 801f89c:	688a      	ldr	r2, [r1, #8]
 801f89e:	690b      	ldr	r3, [r1, #16]
 801f8a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f8a4:	4293      	cmp	r3, r2
 801f8a6:	bfb8      	it	lt
 801f8a8:	4613      	movlt	r3, r2
 801f8aa:	6033      	str	r3, [r6, #0]
 801f8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f8b0:	4607      	mov	r7, r0
 801f8b2:	460c      	mov	r4, r1
 801f8b4:	b10a      	cbz	r2, 801f8ba <_printf_common+0x26>
 801f8b6:	3301      	adds	r3, #1
 801f8b8:	6033      	str	r3, [r6, #0]
 801f8ba:	6823      	ldr	r3, [r4, #0]
 801f8bc:	0699      	lsls	r1, r3, #26
 801f8be:	bf42      	ittt	mi
 801f8c0:	6833      	ldrmi	r3, [r6, #0]
 801f8c2:	3302      	addmi	r3, #2
 801f8c4:	6033      	strmi	r3, [r6, #0]
 801f8c6:	6825      	ldr	r5, [r4, #0]
 801f8c8:	f015 0506 	ands.w	r5, r5, #6
 801f8cc:	d106      	bne.n	801f8dc <_printf_common+0x48>
 801f8ce:	f104 0a19 	add.w	sl, r4, #25
 801f8d2:	68e3      	ldr	r3, [r4, #12]
 801f8d4:	6832      	ldr	r2, [r6, #0]
 801f8d6:	1a9b      	subs	r3, r3, r2
 801f8d8:	42ab      	cmp	r3, r5
 801f8da:	dc26      	bgt.n	801f92a <_printf_common+0x96>
 801f8dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f8e0:	1e13      	subs	r3, r2, #0
 801f8e2:	6822      	ldr	r2, [r4, #0]
 801f8e4:	bf18      	it	ne
 801f8e6:	2301      	movne	r3, #1
 801f8e8:	0692      	lsls	r2, r2, #26
 801f8ea:	d42b      	bmi.n	801f944 <_printf_common+0xb0>
 801f8ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f8f0:	4649      	mov	r1, r9
 801f8f2:	4638      	mov	r0, r7
 801f8f4:	47c0      	blx	r8
 801f8f6:	3001      	adds	r0, #1
 801f8f8:	d01e      	beq.n	801f938 <_printf_common+0xa4>
 801f8fa:	6823      	ldr	r3, [r4, #0]
 801f8fc:	68e5      	ldr	r5, [r4, #12]
 801f8fe:	6832      	ldr	r2, [r6, #0]
 801f900:	f003 0306 	and.w	r3, r3, #6
 801f904:	2b04      	cmp	r3, #4
 801f906:	bf08      	it	eq
 801f908:	1aad      	subeq	r5, r5, r2
 801f90a:	68a3      	ldr	r3, [r4, #8]
 801f90c:	6922      	ldr	r2, [r4, #16]
 801f90e:	bf0c      	ite	eq
 801f910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f914:	2500      	movne	r5, #0
 801f916:	4293      	cmp	r3, r2
 801f918:	bfc4      	itt	gt
 801f91a:	1a9b      	subgt	r3, r3, r2
 801f91c:	18ed      	addgt	r5, r5, r3
 801f91e:	2600      	movs	r6, #0
 801f920:	341a      	adds	r4, #26
 801f922:	42b5      	cmp	r5, r6
 801f924:	d11a      	bne.n	801f95c <_printf_common+0xc8>
 801f926:	2000      	movs	r0, #0
 801f928:	e008      	b.n	801f93c <_printf_common+0xa8>
 801f92a:	2301      	movs	r3, #1
 801f92c:	4652      	mov	r2, sl
 801f92e:	4649      	mov	r1, r9
 801f930:	4638      	mov	r0, r7
 801f932:	47c0      	blx	r8
 801f934:	3001      	adds	r0, #1
 801f936:	d103      	bne.n	801f940 <_printf_common+0xac>
 801f938:	f04f 30ff 	mov.w	r0, #4294967295
 801f93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f940:	3501      	adds	r5, #1
 801f942:	e7c6      	b.n	801f8d2 <_printf_common+0x3e>
 801f944:	18e1      	adds	r1, r4, r3
 801f946:	1c5a      	adds	r2, r3, #1
 801f948:	2030      	movs	r0, #48	; 0x30
 801f94a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f94e:	4422      	add	r2, r4
 801f950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f958:	3302      	adds	r3, #2
 801f95a:	e7c7      	b.n	801f8ec <_printf_common+0x58>
 801f95c:	2301      	movs	r3, #1
 801f95e:	4622      	mov	r2, r4
 801f960:	4649      	mov	r1, r9
 801f962:	4638      	mov	r0, r7
 801f964:	47c0      	blx	r8
 801f966:	3001      	adds	r0, #1
 801f968:	d0e6      	beq.n	801f938 <_printf_common+0xa4>
 801f96a:	3601      	adds	r6, #1
 801f96c:	e7d9      	b.n	801f922 <_printf_common+0x8e>
	...

0801f970 <_printf_i>:
 801f970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f974:	7e0f      	ldrb	r7, [r1, #24]
 801f976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f978:	2f78      	cmp	r7, #120	; 0x78
 801f97a:	4691      	mov	r9, r2
 801f97c:	4680      	mov	r8, r0
 801f97e:	460c      	mov	r4, r1
 801f980:	469a      	mov	sl, r3
 801f982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f986:	d807      	bhi.n	801f998 <_printf_i+0x28>
 801f988:	2f62      	cmp	r7, #98	; 0x62
 801f98a:	d80a      	bhi.n	801f9a2 <_printf_i+0x32>
 801f98c:	2f00      	cmp	r7, #0
 801f98e:	f000 80d8 	beq.w	801fb42 <_printf_i+0x1d2>
 801f992:	2f58      	cmp	r7, #88	; 0x58
 801f994:	f000 80a3 	beq.w	801fade <_printf_i+0x16e>
 801f998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f99c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f9a0:	e03a      	b.n	801fa18 <_printf_i+0xa8>
 801f9a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f9a6:	2b15      	cmp	r3, #21
 801f9a8:	d8f6      	bhi.n	801f998 <_printf_i+0x28>
 801f9aa:	a101      	add	r1, pc, #4	; (adr r1, 801f9b0 <_printf_i+0x40>)
 801f9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f9b0:	0801fa09 	.word	0x0801fa09
 801f9b4:	0801fa1d 	.word	0x0801fa1d
 801f9b8:	0801f999 	.word	0x0801f999
 801f9bc:	0801f999 	.word	0x0801f999
 801f9c0:	0801f999 	.word	0x0801f999
 801f9c4:	0801f999 	.word	0x0801f999
 801f9c8:	0801fa1d 	.word	0x0801fa1d
 801f9cc:	0801f999 	.word	0x0801f999
 801f9d0:	0801f999 	.word	0x0801f999
 801f9d4:	0801f999 	.word	0x0801f999
 801f9d8:	0801f999 	.word	0x0801f999
 801f9dc:	0801fb29 	.word	0x0801fb29
 801f9e0:	0801fa4d 	.word	0x0801fa4d
 801f9e4:	0801fb0b 	.word	0x0801fb0b
 801f9e8:	0801f999 	.word	0x0801f999
 801f9ec:	0801f999 	.word	0x0801f999
 801f9f0:	0801fb4b 	.word	0x0801fb4b
 801f9f4:	0801f999 	.word	0x0801f999
 801f9f8:	0801fa4d 	.word	0x0801fa4d
 801f9fc:	0801f999 	.word	0x0801f999
 801fa00:	0801f999 	.word	0x0801f999
 801fa04:	0801fb13 	.word	0x0801fb13
 801fa08:	682b      	ldr	r3, [r5, #0]
 801fa0a:	1d1a      	adds	r2, r3, #4
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	602a      	str	r2, [r5, #0]
 801fa10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fa14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fa18:	2301      	movs	r3, #1
 801fa1a:	e0a3      	b.n	801fb64 <_printf_i+0x1f4>
 801fa1c:	6820      	ldr	r0, [r4, #0]
 801fa1e:	6829      	ldr	r1, [r5, #0]
 801fa20:	0606      	lsls	r6, r0, #24
 801fa22:	f101 0304 	add.w	r3, r1, #4
 801fa26:	d50a      	bpl.n	801fa3e <_printf_i+0xce>
 801fa28:	680e      	ldr	r6, [r1, #0]
 801fa2a:	602b      	str	r3, [r5, #0]
 801fa2c:	2e00      	cmp	r6, #0
 801fa2e:	da03      	bge.n	801fa38 <_printf_i+0xc8>
 801fa30:	232d      	movs	r3, #45	; 0x2d
 801fa32:	4276      	negs	r6, r6
 801fa34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa38:	485e      	ldr	r0, [pc, #376]	; (801fbb4 <_printf_i+0x244>)
 801fa3a:	230a      	movs	r3, #10
 801fa3c:	e019      	b.n	801fa72 <_printf_i+0x102>
 801fa3e:	680e      	ldr	r6, [r1, #0]
 801fa40:	602b      	str	r3, [r5, #0]
 801fa42:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fa46:	bf18      	it	ne
 801fa48:	b236      	sxthne	r6, r6
 801fa4a:	e7ef      	b.n	801fa2c <_printf_i+0xbc>
 801fa4c:	682b      	ldr	r3, [r5, #0]
 801fa4e:	6820      	ldr	r0, [r4, #0]
 801fa50:	1d19      	adds	r1, r3, #4
 801fa52:	6029      	str	r1, [r5, #0]
 801fa54:	0601      	lsls	r1, r0, #24
 801fa56:	d501      	bpl.n	801fa5c <_printf_i+0xec>
 801fa58:	681e      	ldr	r6, [r3, #0]
 801fa5a:	e002      	b.n	801fa62 <_printf_i+0xf2>
 801fa5c:	0646      	lsls	r6, r0, #25
 801fa5e:	d5fb      	bpl.n	801fa58 <_printf_i+0xe8>
 801fa60:	881e      	ldrh	r6, [r3, #0]
 801fa62:	4854      	ldr	r0, [pc, #336]	; (801fbb4 <_printf_i+0x244>)
 801fa64:	2f6f      	cmp	r7, #111	; 0x6f
 801fa66:	bf0c      	ite	eq
 801fa68:	2308      	moveq	r3, #8
 801fa6a:	230a      	movne	r3, #10
 801fa6c:	2100      	movs	r1, #0
 801fa6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fa72:	6865      	ldr	r5, [r4, #4]
 801fa74:	60a5      	str	r5, [r4, #8]
 801fa76:	2d00      	cmp	r5, #0
 801fa78:	bfa2      	ittt	ge
 801fa7a:	6821      	ldrge	r1, [r4, #0]
 801fa7c:	f021 0104 	bicge.w	r1, r1, #4
 801fa80:	6021      	strge	r1, [r4, #0]
 801fa82:	b90e      	cbnz	r6, 801fa88 <_printf_i+0x118>
 801fa84:	2d00      	cmp	r5, #0
 801fa86:	d04d      	beq.n	801fb24 <_printf_i+0x1b4>
 801fa88:	4615      	mov	r5, r2
 801fa8a:	fbb6 f1f3 	udiv	r1, r6, r3
 801fa8e:	fb03 6711 	mls	r7, r3, r1, r6
 801fa92:	5dc7      	ldrb	r7, [r0, r7]
 801fa94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fa98:	4637      	mov	r7, r6
 801fa9a:	42bb      	cmp	r3, r7
 801fa9c:	460e      	mov	r6, r1
 801fa9e:	d9f4      	bls.n	801fa8a <_printf_i+0x11a>
 801faa0:	2b08      	cmp	r3, #8
 801faa2:	d10b      	bne.n	801fabc <_printf_i+0x14c>
 801faa4:	6823      	ldr	r3, [r4, #0]
 801faa6:	07de      	lsls	r6, r3, #31
 801faa8:	d508      	bpl.n	801fabc <_printf_i+0x14c>
 801faaa:	6923      	ldr	r3, [r4, #16]
 801faac:	6861      	ldr	r1, [r4, #4]
 801faae:	4299      	cmp	r1, r3
 801fab0:	bfde      	ittt	le
 801fab2:	2330      	movle	r3, #48	; 0x30
 801fab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fab8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fabc:	1b52      	subs	r2, r2, r5
 801fabe:	6122      	str	r2, [r4, #16]
 801fac0:	f8cd a000 	str.w	sl, [sp]
 801fac4:	464b      	mov	r3, r9
 801fac6:	aa03      	add	r2, sp, #12
 801fac8:	4621      	mov	r1, r4
 801faca:	4640      	mov	r0, r8
 801facc:	f7ff fee2 	bl	801f894 <_printf_common>
 801fad0:	3001      	adds	r0, #1
 801fad2:	d14c      	bne.n	801fb6e <_printf_i+0x1fe>
 801fad4:	f04f 30ff 	mov.w	r0, #4294967295
 801fad8:	b004      	add	sp, #16
 801fada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fade:	4835      	ldr	r0, [pc, #212]	; (801fbb4 <_printf_i+0x244>)
 801fae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801fae4:	6829      	ldr	r1, [r5, #0]
 801fae6:	6823      	ldr	r3, [r4, #0]
 801fae8:	f851 6b04 	ldr.w	r6, [r1], #4
 801faec:	6029      	str	r1, [r5, #0]
 801faee:	061d      	lsls	r5, r3, #24
 801faf0:	d514      	bpl.n	801fb1c <_printf_i+0x1ac>
 801faf2:	07df      	lsls	r7, r3, #31
 801faf4:	bf44      	itt	mi
 801faf6:	f043 0320 	orrmi.w	r3, r3, #32
 801fafa:	6023      	strmi	r3, [r4, #0]
 801fafc:	b91e      	cbnz	r6, 801fb06 <_printf_i+0x196>
 801fafe:	6823      	ldr	r3, [r4, #0]
 801fb00:	f023 0320 	bic.w	r3, r3, #32
 801fb04:	6023      	str	r3, [r4, #0]
 801fb06:	2310      	movs	r3, #16
 801fb08:	e7b0      	b.n	801fa6c <_printf_i+0xfc>
 801fb0a:	6823      	ldr	r3, [r4, #0]
 801fb0c:	f043 0320 	orr.w	r3, r3, #32
 801fb10:	6023      	str	r3, [r4, #0]
 801fb12:	2378      	movs	r3, #120	; 0x78
 801fb14:	4828      	ldr	r0, [pc, #160]	; (801fbb8 <_printf_i+0x248>)
 801fb16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fb1a:	e7e3      	b.n	801fae4 <_printf_i+0x174>
 801fb1c:	0659      	lsls	r1, r3, #25
 801fb1e:	bf48      	it	mi
 801fb20:	b2b6      	uxthmi	r6, r6
 801fb22:	e7e6      	b.n	801faf2 <_printf_i+0x182>
 801fb24:	4615      	mov	r5, r2
 801fb26:	e7bb      	b.n	801faa0 <_printf_i+0x130>
 801fb28:	682b      	ldr	r3, [r5, #0]
 801fb2a:	6826      	ldr	r6, [r4, #0]
 801fb2c:	6961      	ldr	r1, [r4, #20]
 801fb2e:	1d18      	adds	r0, r3, #4
 801fb30:	6028      	str	r0, [r5, #0]
 801fb32:	0635      	lsls	r5, r6, #24
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	d501      	bpl.n	801fb3c <_printf_i+0x1cc>
 801fb38:	6019      	str	r1, [r3, #0]
 801fb3a:	e002      	b.n	801fb42 <_printf_i+0x1d2>
 801fb3c:	0670      	lsls	r0, r6, #25
 801fb3e:	d5fb      	bpl.n	801fb38 <_printf_i+0x1c8>
 801fb40:	8019      	strh	r1, [r3, #0]
 801fb42:	2300      	movs	r3, #0
 801fb44:	6123      	str	r3, [r4, #16]
 801fb46:	4615      	mov	r5, r2
 801fb48:	e7ba      	b.n	801fac0 <_printf_i+0x150>
 801fb4a:	682b      	ldr	r3, [r5, #0]
 801fb4c:	1d1a      	adds	r2, r3, #4
 801fb4e:	602a      	str	r2, [r5, #0]
 801fb50:	681d      	ldr	r5, [r3, #0]
 801fb52:	6862      	ldr	r2, [r4, #4]
 801fb54:	2100      	movs	r1, #0
 801fb56:	4628      	mov	r0, r5
 801fb58:	f7e0 fb1a 	bl	8000190 <memchr>
 801fb5c:	b108      	cbz	r0, 801fb62 <_printf_i+0x1f2>
 801fb5e:	1b40      	subs	r0, r0, r5
 801fb60:	6060      	str	r0, [r4, #4]
 801fb62:	6863      	ldr	r3, [r4, #4]
 801fb64:	6123      	str	r3, [r4, #16]
 801fb66:	2300      	movs	r3, #0
 801fb68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fb6c:	e7a8      	b.n	801fac0 <_printf_i+0x150>
 801fb6e:	6923      	ldr	r3, [r4, #16]
 801fb70:	462a      	mov	r2, r5
 801fb72:	4649      	mov	r1, r9
 801fb74:	4640      	mov	r0, r8
 801fb76:	47d0      	blx	sl
 801fb78:	3001      	adds	r0, #1
 801fb7a:	d0ab      	beq.n	801fad4 <_printf_i+0x164>
 801fb7c:	6823      	ldr	r3, [r4, #0]
 801fb7e:	079b      	lsls	r3, r3, #30
 801fb80:	d413      	bmi.n	801fbaa <_printf_i+0x23a>
 801fb82:	68e0      	ldr	r0, [r4, #12]
 801fb84:	9b03      	ldr	r3, [sp, #12]
 801fb86:	4298      	cmp	r0, r3
 801fb88:	bfb8      	it	lt
 801fb8a:	4618      	movlt	r0, r3
 801fb8c:	e7a4      	b.n	801fad8 <_printf_i+0x168>
 801fb8e:	2301      	movs	r3, #1
 801fb90:	4632      	mov	r2, r6
 801fb92:	4649      	mov	r1, r9
 801fb94:	4640      	mov	r0, r8
 801fb96:	47d0      	blx	sl
 801fb98:	3001      	adds	r0, #1
 801fb9a:	d09b      	beq.n	801fad4 <_printf_i+0x164>
 801fb9c:	3501      	adds	r5, #1
 801fb9e:	68e3      	ldr	r3, [r4, #12]
 801fba0:	9903      	ldr	r1, [sp, #12]
 801fba2:	1a5b      	subs	r3, r3, r1
 801fba4:	42ab      	cmp	r3, r5
 801fba6:	dcf2      	bgt.n	801fb8e <_printf_i+0x21e>
 801fba8:	e7eb      	b.n	801fb82 <_printf_i+0x212>
 801fbaa:	2500      	movs	r5, #0
 801fbac:	f104 0619 	add.w	r6, r4, #25
 801fbb0:	e7f5      	b.n	801fb9e <_printf_i+0x22e>
 801fbb2:	bf00      	nop
 801fbb4:	08022b6e 	.word	0x08022b6e
 801fbb8:	08022b7f 	.word	0x08022b7f

0801fbbc <iprintf>:
 801fbbc:	b40f      	push	{r0, r1, r2, r3}
 801fbbe:	4b0a      	ldr	r3, [pc, #40]	; (801fbe8 <iprintf+0x2c>)
 801fbc0:	b513      	push	{r0, r1, r4, lr}
 801fbc2:	681c      	ldr	r4, [r3, #0]
 801fbc4:	b124      	cbz	r4, 801fbd0 <iprintf+0x14>
 801fbc6:	69a3      	ldr	r3, [r4, #24]
 801fbc8:	b913      	cbnz	r3, 801fbd0 <iprintf+0x14>
 801fbca:	4620      	mov	r0, r4
 801fbcc:	f7ff f942 	bl	801ee54 <__sinit>
 801fbd0:	ab05      	add	r3, sp, #20
 801fbd2:	9a04      	ldr	r2, [sp, #16]
 801fbd4:	68a1      	ldr	r1, [r4, #8]
 801fbd6:	9301      	str	r3, [sp, #4]
 801fbd8:	4620      	mov	r0, r4
 801fbda:	f001 fe4f 	bl	802187c <_vfiprintf_r>
 801fbde:	b002      	add	sp, #8
 801fbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbe4:	b004      	add	sp, #16
 801fbe6:	4770      	bx	lr
 801fbe8:	2000008c 	.word	0x2000008c

0801fbec <_puts_r>:
 801fbec:	b570      	push	{r4, r5, r6, lr}
 801fbee:	460e      	mov	r6, r1
 801fbf0:	4605      	mov	r5, r0
 801fbf2:	b118      	cbz	r0, 801fbfc <_puts_r+0x10>
 801fbf4:	6983      	ldr	r3, [r0, #24]
 801fbf6:	b90b      	cbnz	r3, 801fbfc <_puts_r+0x10>
 801fbf8:	f7ff f92c 	bl	801ee54 <__sinit>
 801fbfc:	69ab      	ldr	r3, [r5, #24]
 801fbfe:	68ac      	ldr	r4, [r5, #8]
 801fc00:	b913      	cbnz	r3, 801fc08 <_puts_r+0x1c>
 801fc02:	4628      	mov	r0, r5
 801fc04:	f7ff f926 	bl	801ee54 <__sinit>
 801fc08:	4b2c      	ldr	r3, [pc, #176]	; (801fcbc <_puts_r+0xd0>)
 801fc0a:	429c      	cmp	r4, r3
 801fc0c:	d120      	bne.n	801fc50 <_puts_r+0x64>
 801fc0e:	686c      	ldr	r4, [r5, #4]
 801fc10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fc12:	07db      	lsls	r3, r3, #31
 801fc14:	d405      	bmi.n	801fc22 <_puts_r+0x36>
 801fc16:	89a3      	ldrh	r3, [r4, #12]
 801fc18:	0598      	lsls	r0, r3, #22
 801fc1a:	d402      	bmi.n	801fc22 <_puts_r+0x36>
 801fc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc1e:	f7ff f9dc 	bl	801efda <__retarget_lock_acquire_recursive>
 801fc22:	89a3      	ldrh	r3, [r4, #12]
 801fc24:	0719      	lsls	r1, r3, #28
 801fc26:	d51d      	bpl.n	801fc64 <_puts_r+0x78>
 801fc28:	6923      	ldr	r3, [r4, #16]
 801fc2a:	b1db      	cbz	r3, 801fc64 <_puts_r+0x78>
 801fc2c:	3e01      	subs	r6, #1
 801fc2e:	68a3      	ldr	r3, [r4, #8]
 801fc30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fc34:	3b01      	subs	r3, #1
 801fc36:	60a3      	str	r3, [r4, #8]
 801fc38:	bb39      	cbnz	r1, 801fc8a <_puts_r+0x9e>
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	da38      	bge.n	801fcb0 <_puts_r+0xc4>
 801fc3e:	4622      	mov	r2, r4
 801fc40:	210a      	movs	r1, #10
 801fc42:	4628      	mov	r0, r5
 801fc44:	f000 f918 	bl	801fe78 <__swbuf_r>
 801fc48:	3001      	adds	r0, #1
 801fc4a:	d011      	beq.n	801fc70 <_puts_r+0x84>
 801fc4c:	250a      	movs	r5, #10
 801fc4e:	e011      	b.n	801fc74 <_puts_r+0x88>
 801fc50:	4b1b      	ldr	r3, [pc, #108]	; (801fcc0 <_puts_r+0xd4>)
 801fc52:	429c      	cmp	r4, r3
 801fc54:	d101      	bne.n	801fc5a <_puts_r+0x6e>
 801fc56:	68ac      	ldr	r4, [r5, #8]
 801fc58:	e7da      	b.n	801fc10 <_puts_r+0x24>
 801fc5a:	4b1a      	ldr	r3, [pc, #104]	; (801fcc4 <_puts_r+0xd8>)
 801fc5c:	429c      	cmp	r4, r3
 801fc5e:	bf08      	it	eq
 801fc60:	68ec      	ldreq	r4, [r5, #12]
 801fc62:	e7d5      	b.n	801fc10 <_puts_r+0x24>
 801fc64:	4621      	mov	r1, r4
 801fc66:	4628      	mov	r0, r5
 801fc68:	f000 f96a 	bl	801ff40 <__swsetup_r>
 801fc6c:	2800      	cmp	r0, #0
 801fc6e:	d0dd      	beq.n	801fc2c <_puts_r+0x40>
 801fc70:	f04f 35ff 	mov.w	r5, #4294967295
 801fc74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fc76:	07da      	lsls	r2, r3, #31
 801fc78:	d405      	bmi.n	801fc86 <_puts_r+0x9a>
 801fc7a:	89a3      	ldrh	r3, [r4, #12]
 801fc7c:	059b      	lsls	r3, r3, #22
 801fc7e:	d402      	bmi.n	801fc86 <_puts_r+0x9a>
 801fc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc82:	f7ff f9ab 	bl	801efdc <__retarget_lock_release_recursive>
 801fc86:	4628      	mov	r0, r5
 801fc88:	bd70      	pop	{r4, r5, r6, pc}
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	da04      	bge.n	801fc98 <_puts_r+0xac>
 801fc8e:	69a2      	ldr	r2, [r4, #24]
 801fc90:	429a      	cmp	r2, r3
 801fc92:	dc06      	bgt.n	801fca2 <_puts_r+0xb6>
 801fc94:	290a      	cmp	r1, #10
 801fc96:	d004      	beq.n	801fca2 <_puts_r+0xb6>
 801fc98:	6823      	ldr	r3, [r4, #0]
 801fc9a:	1c5a      	adds	r2, r3, #1
 801fc9c:	6022      	str	r2, [r4, #0]
 801fc9e:	7019      	strb	r1, [r3, #0]
 801fca0:	e7c5      	b.n	801fc2e <_puts_r+0x42>
 801fca2:	4622      	mov	r2, r4
 801fca4:	4628      	mov	r0, r5
 801fca6:	f000 f8e7 	bl	801fe78 <__swbuf_r>
 801fcaa:	3001      	adds	r0, #1
 801fcac:	d1bf      	bne.n	801fc2e <_puts_r+0x42>
 801fcae:	e7df      	b.n	801fc70 <_puts_r+0x84>
 801fcb0:	6823      	ldr	r3, [r4, #0]
 801fcb2:	250a      	movs	r5, #10
 801fcb4:	1c5a      	adds	r2, r3, #1
 801fcb6:	6022      	str	r2, [r4, #0]
 801fcb8:	701d      	strb	r5, [r3, #0]
 801fcba:	e7db      	b.n	801fc74 <_puts_r+0x88>
 801fcbc:	08022b18 	.word	0x08022b18
 801fcc0:	08022b38 	.word	0x08022b38
 801fcc4:	08022af8 	.word	0x08022af8

0801fcc8 <puts>:
 801fcc8:	4b02      	ldr	r3, [pc, #8]	; (801fcd4 <puts+0xc>)
 801fcca:	4601      	mov	r1, r0
 801fccc:	6818      	ldr	r0, [r3, #0]
 801fcce:	f7ff bf8d 	b.w	801fbec <_puts_r>
 801fcd2:	bf00      	nop
 801fcd4:	2000008c 	.word	0x2000008c

0801fcd8 <_sbrk_r>:
 801fcd8:	b538      	push	{r3, r4, r5, lr}
 801fcda:	4d06      	ldr	r5, [pc, #24]	; (801fcf4 <_sbrk_r+0x1c>)
 801fcdc:	2300      	movs	r3, #0
 801fcde:	4604      	mov	r4, r0
 801fce0:	4608      	mov	r0, r1
 801fce2:	602b      	str	r3, [r5, #0]
 801fce4:	f7e3 fde2 	bl	80038ac <_sbrk>
 801fce8:	1c43      	adds	r3, r0, #1
 801fcea:	d102      	bne.n	801fcf2 <_sbrk_r+0x1a>
 801fcec:	682b      	ldr	r3, [r5, #0]
 801fcee:	b103      	cbz	r3, 801fcf2 <_sbrk_r+0x1a>
 801fcf0:	6023      	str	r3, [r4, #0]
 801fcf2:	bd38      	pop	{r3, r4, r5, pc}
 801fcf4:	200099b8 	.word	0x200099b8

0801fcf8 <siprintf>:
 801fcf8:	b40e      	push	{r1, r2, r3}
 801fcfa:	b500      	push	{lr}
 801fcfc:	b09c      	sub	sp, #112	; 0x70
 801fcfe:	ab1d      	add	r3, sp, #116	; 0x74
 801fd00:	9002      	str	r0, [sp, #8]
 801fd02:	9006      	str	r0, [sp, #24]
 801fd04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fd08:	4809      	ldr	r0, [pc, #36]	; (801fd30 <siprintf+0x38>)
 801fd0a:	9107      	str	r1, [sp, #28]
 801fd0c:	9104      	str	r1, [sp, #16]
 801fd0e:	4909      	ldr	r1, [pc, #36]	; (801fd34 <siprintf+0x3c>)
 801fd10:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd14:	9105      	str	r1, [sp, #20]
 801fd16:	6800      	ldr	r0, [r0, #0]
 801fd18:	9301      	str	r3, [sp, #4]
 801fd1a:	a902      	add	r1, sp, #8
 801fd1c:	f001 fc84 	bl	8021628 <_svfiprintf_r>
 801fd20:	9b02      	ldr	r3, [sp, #8]
 801fd22:	2200      	movs	r2, #0
 801fd24:	701a      	strb	r2, [r3, #0]
 801fd26:	b01c      	add	sp, #112	; 0x70
 801fd28:	f85d eb04 	ldr.w	lr, [sp], #4
 801fd2c:	b003      	add	sp, #12
 801fd2e:	4770      	bx	lr
 801fd30:	2000008c 	.word	0x2000008c
 801fd34:	ffff0208 	.word	0xffff0208

0801fd38 <__sread>:
 801fd38:	b510      	push	{r4, lr}
 801fd3a:	460c      	mov	r4, r1
 801fd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd40:	f001 fecc 	bl	8021adc <_read_r>
 801fd44:	2800      	cmp	r0, #0
 801fd46:	bfab      	itete	ge
 801fd48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fd4a:	89a3      	ldrhlt	r3, [r4, #12]
 801fd4c:	181b      	addge	r3, r3, r0
 801fd4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fd52:	bfac      	ite	ge
 801fd54:	6563      	strge	r3, [r4, #84]	; 0x54
 801fd56:	81a3      	strhlt	r3, [r4, #12]
 801fd58:	bd10      	pop	{r4, pc}

0801fd5a <__swrite>:
 801fd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd5e:	461f      	mov	r7, r3
 801fd60:	898b      	ldrh	r3, [r1, #12]
 801fd62:	05db      	lsls	r3, r3, #23
 801fd64:	4605      	mov	r5, r0
 801fd66:	460c      	mov	r4, r1
 801fd68:	4616      	mov	r6, r2
 801fd6a:	d505      	bpl.n	801fd78 <__swrite+0x1e>
 801fd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd70:	2302      	movs	r3, #2
 801fd72:	2200      	movs	r2, #0
 801fd74:	f001 f804 	bl	8020d80 <_lseek_r>
 801fd78:	89a3      	ldrh	r3, [r4, #12]
 801fd7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fd82:	81a3      	strh	r3, [r4, #12]
 801fd84:	4632      	mov	r2, r6
 801fd86:	463b      	mov	r3, r7
 801fd88:	4628      	mov	r0, r5
 801fd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fd8e:	f000 b8c5 	b.w	801ff1c <_write_r>

0801fd92 <__sseek>:
 801fd92:	b510      	push	{r4, lr}
 801fd94:	460c      	mov	r4, r1
 801fd96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd9a:	f000 fff1 	bl	8020d80 <_lseek_r>
 801fd9e:	1c43      	adds	r3, r0, #1
 801fda0:	89a3      	ldrh	r3, [r4, #12]
 801fda2:	bf15      	itete	ne
 801fda4:	6560      	strne	r0, [r4, #84]	; 0x54
 801fda6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fdaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fdae:	81a3      	strheq	r3, [r4, #12]
 801fdb0:	bf18      	it	ne
 801fdb2:	81a3      	strhne	r3, [r4, #12]
 801fdb4:	bd10      	pop	{r4, pc}

0801fdb6 <__sclose>:
 801fdb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdba:	f000 b92f 	b.w	802001c <_close_r>

0801fdbe <strncmp>:
 801fdbe:	b510      	push	{r4, lr}
 801fdc0:	b17a      	cbz	r2, 801fde2 <strncmp+0x24>
 801fdc2:	4603      	mov	r3, r0
 801fdc4:	3901      	subs	r1, #1
 801fdc6:	1884      	adds	r4, r0, r2
 801fdc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fdcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fdd0:	4290      	cmp	r0, r2
 801fdd2:	d101      	bne.n	801fdd8 <strncmp+0x1a>
 801fdd4:	42a3      	cmp	r3, r4
 801fdd6:	d101      	bne.n	801fddc <strncmp+0x1e>
 801fdd8:	1a80      	subs	r0, r0, r2
 801fdda:	bd10      	pop	{r4, pc}
 801fddc:	2800      	cmp	r0, #0
 801fdde:	d1f3      	bne.n	801fdc8 <strncmp+0xa>
 801fde0:	e7fa      	b.n	801fdd8 <strncmp+0x1a>
 801fde2:	4610      	mov	r0, r2
 801fde4:	e7f9      	b.n	801fdda <strncmp+0x1c>

0801fde6 <strncpy>:
 801fde6:	b510      	push	{r4, lr}
 801fde8:	3901      	subs	r1, #1
 801fdea:	4603      	mov	r3, r0
 801fdec:	b132      	cbz	r2, 801fdfc <strncpy+0x16>
 801fdee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fdf2:	f803 4b01 	strb.w	r4, [r3], #1
 801fdf6:	3a01      	subs	r2, #1
 801fdf8:	2c00      	cmp	r4, #0
 801fdfa:	d1f7      	bne.n	801fdec <strncpy+0x6>
 801fdfc:	441a      	add	r2, r3
 801fdfe:	2100      	movs	r1, #0
 801fe00:	4293      	cmp	r3, r2
 801fe02:	d100      	bne.n	801fe06 <strncpy+0x20>
 801fe04:	bd10      	pop	{r4, pc}
 801fe06:	f803 1b01 	strb.w	r1, [r3], #1
 801fe0a:	e7f9      	b.n	801fe00 <strncpy+0x1a>

0801fe0c <strstr>:
 801fe0c:	780a      	ldrb	r2, [r1, #0]
 801fe0e:	b570      	push	{r4, r5, r6, lr}
 801fe10:	b96a      	cbnz	r2, 801fe2e <strstr+0x22>
 801fe12:	bd70      	pop	{r4, r5, r6, pc}
 801fe14:	429a      	cmp	r2, r3
 801fe16:	d109      	bne.n	801fe2c <strstr+0x20>
 801fe18:	460c      	mov	r4, r1
 801fe1a:	4605      	mov	r5, r0
 801fe1c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d0f6      	beq.n	801fe12 <strstr+0x6>
 801fe24:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801fe28:	429e      	cmp	r6, r3
 801fe2a:	d0f7      	beq.n	801fe1c <strstr+0x10>
 801fe2c:	3001      	adds	r0, #1
 801fe2e:	7803      	ldrb	r3, [r0, #0]
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d1ef      	bne.n	801fe14 <strstr+0x8>
 801fe34:	4618      	mov	r0, r3
 801fe36:	e7ec      	b.n	801fe12 <strstr+0x6>

0801fe38 <_vsiprintf_r>:
 801fe38:	b500      	push	{lr}
 801fe3a:	b09b      	sub	sp, #108	; 0x6c
 801fe3c:	9100      	str	r1, [sp, #0]
 801fe3e:	9104      	str	r1, [sp, #16]
 801fe40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fe44:	9105      	str	r1, [sp, #20]
 801fe46:	9102      	str	r1, [sp, #8]
 801fe48:	4905      	ldr	r1, [pc, #20]	; (801fe60 <_vsiprintf_r+0x28>)
 801fe4a:	9103      	str	r1, [sp, #12]
 801fe4c:	4669      	mov	r1, sp
 801fe4e:	f001 fbeb 	bl	8021628 <_svfiprintf_r>
 801fe52:	9b00      	ldr	r3, [sp, #0]
 801fe54:	2200      	movs	r2, #0
 801fe56:	701a      	strb	r2, [r3, #0]
 801fe58:	b01b      	add	sp, #108	; 0x6c
 801fe5a:	f85d fb04 	ldr.w	pc, [sp], #4
 801fe5e:	bf00      	nop
 801fe60:	ffff0208 	.word	0xffff0208

0801fe64 <vsiprintf>:
 801fe64:	4613      	mov	r3, r2
 801fe66:	460a      	mov	r2, r1
 801fe68:	4601      	mov	r1, r0
 801fe6a:	4802      	ldr	r0, [pc, #8]	; (801fe74 <vsiprintf+0x10>)
 801fe6c:	6800      	ldr	r0, [r0, #0]
 801fe6e:	f7ff bfe3 	b.w	801fe38 <_vsiprintf_r>
 801fe72:	bf00      	nop
 801fe74:	2000008c 	.word	0x2000008c

0801fe78 <__swbuf_r>:
 801fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe7a:	460e      	mov	r6, r1
 801fe7c:	4614      	mov	r4, r2
 801fe7e:	4605      	mov	r5, r0
 801fe80:	b118      	cbz	r0, 801fe8a <__swbuf_r+0x12>
 801fe82:	6983      	ldr	r3, [r0, #24]
 801fe84:	b90b      	cbnz	r3, 801fe8a <__swbuf_r+0x12>
 801fe86:	f7fe ffe5 	bl	801ee54 <__sinit>
 801fe8a:	4b21      	ldr	r3, [pc, #132]	; (801ff10 <__swbuf_r+0x98>)
 801fe8c:	429c      	cmp	r4, r3
 801fe8e:	d12b      	bne.n	801fee8 <__swbuf_r+0x70>
 801fe90:	686c      	ldr	r4, [r5, #4]
 801fe92:	69a3      	ldr	r3, [r4, #24]
 801fe94:	60a3      	str	r3, [r4, #8]
 801fe96:	89a3      	ldrh	r3, [r4, #12]
 801fe98:	071a      	lsls	r2, r3, #28
 801fe9a:	d52f      	bpl.n	801fefc <__swbuf_r+0x84>
 801fe9c:	6923      	ldr	r3, [r4, #16]
 801fe9e:	b36b      	cbz	r3, 801fefc <__swbuf_r+0x84>
 801fea0:	6923      	ldr	r3, [r4, #16]
 801fea2:	6820      	ldr	r0, [r4, #0]
 801fea4:	1ac0      	subs	r0, r0, r3
 801fea6:	6963      	ldr	r3, [r4, #20]
 801fea8:	b2f6      	uxtb	r6, r6
 801feaa:	4283      	cmp	r3, r0
 801feac:	4637      	mov	r7, r6
 801feae:	dc04      	bgt.n	801feba <__swbuf_r+0x42>
 801feb0:	4621      	mov	r1, r4
 801feb2:	4628      	mov	r0, r5
 801feb4:	f7fe ff3a 	bl	801ed2c <_fflush_r>
 801feb8:	bb30      	cbnz	r0, 801ff08 <__swbuf_r+0x90>
 801feba:	68a3      	ldr	r3, [r4, #8]
 801febc:	3b01      	subs	r3, #1
 801febe:	60a3      	str	r3, [r4, #8]
 801fec0:	6823      	ldr	r3, [r4, #0]
 801fec2:	1c5a      	adds	r2, r3, #1
 801fec4:	6022      	str	r2, [r4, #0]
 801fec6:	701e      	strb	r6, [r3, #0]
 801fec8:	6963      	ldr	r3, [r4, #20]
 801feca:	3001      	adds	r0, #1
 801fecc:	4283      	cmp	r3, r0
 801fece:	d004      	beq.n	801feda <__swbuf_r+0x62>
 801fed0:	89a3      	ldrh	r3, [r4, #12]
 801fed2:	07db      	lsls	r3, r3, #31
 801fed4:	d506      	bpl.n	801fee4 <__swbuf_r+0x6c>
 801fed6:	2e0a      	cmp	r6, #10
 801fed8:	d104      	bne.n	801fee4 <__swbuf_r+0x6c>
 801feda:	4621      	mov	r1, r4
 801fedc:	4628      	mov	r0, r5
 801fede:	f7fe ff25 	bl	801ed2c <_fflush_r>
 801fee2:	b988      	cbnz	r0, 801ff08 <__swbuf_r+0x90>
 801fee4:	4638      	mov	r0, r7
 801fee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fee8:	4b0a      	ldr	r3, [pc, #40]	; (801ff14 <__swbuf_r+0x9c>)
 801feea:	429c      	cmp	r4, r3
 801feec:	d101      	bne.n	801fef2 <__swbuf_r+0x7a>
 801feee:	68ac      	ldr	r4, [r5, #8]
 801fef0:	e7cf      	b.n	801fe92 <__swbuf_r+0x1a>
 801fef2:	4b09      	ldr	r3, [pc, #36]	; (801ff18 <__swbuf_r+0xa0>)
 801fef4:	429c      	cmp	r4, r3
 801fef6:	bf08      	it	eq
 801fef8:	68ec      	ldreq	r4, [r5, #12]
 801fefa:	e7ca      	b.n	801fe92 <__swbuf_r+0x1a>
 801fefc:	4621      	mov	r1, r4
 801fefe:	4628      	mov	r0, r5
 801ff00:	f000 f81e 	bl	801ff40 <__swsetup_r>
 801ff04:	2800      	cmp	r0, #0
 801ff06:	d0cb      	beq.n	801fea0 <__swbuf_r+0x28>
 801ff08:	f04f 37ff 	mov.w	r7, #4294967295
 801ff0c:	e7ea      	b.n	801fee4 <__swbuf_r+0x6c>
 801ff0e:	bf00      	nop
 801ff10:	08022b18 	.word	0x08022b18
 801ff14:	08022b38 	.word	0x08022b38
 801ff18:	08022af8 	.word	0x08022af8

0801ff1c <_write_r>:
 801ff1c:	b538      	push	{r3, r4, r5, lr}
 801ff1e:	4d07      	ldr	r5, [pc, #28]	; (801ff3c <_write_r+0x20>)
 801ff20:	4604      	mov	r4, r0
 801ff22:	4608      	mov	r0, r1
 801ff24:	4611      	mov	r1, r2
 801ff26:	2200      	movs	r2, #0
 801ff28:	602a      	str	r2, [r5, #0]
 801ff2a:	461a      	mov	r2, r3
 801ff2c:	f7e1 faa4 	bl	8001478 <_write>
 801ff30:	1c43      	adds	r3, r0, #1
 801ff32:	d102      	bne.n	801ff3a <_write_r+0x1e>
 801ff34:	682b      	ldr	r3, [r5, #0]
 801ff36:	b103      	cbz	r3, 801ff3a <_write_r+0x1e>
 801ff38:	6023      	str	r3, [r4, #0]
 801ff3a:	bd38      	pop	{r3, r4, r5, pc}
 801ff3c:	200099b8 	.word	0x200099b8

0801ff40 <__swsetup_r>:
 801ff40:	4b32      	ldr	r3, [pc, #200]	; (802000c <__swsetup_r+0xcc>)
 801ff42:	b570      	push	{r4, r5, r6, lr}
 801ff44:	681d      	ldr	r5, [r3, #0]
 801ff46:	4606      	mov	r6, r0
 801ff48:	460c      	mov	r4, r1
 801ff4a:	b125      	cbz	r5, 801ff56 <__swsetup_r+0x16>
 801ff4c:	69ab      	ldr	r3, [r5, #24]
 801ff4e:	b913      	cbnz	r3, 801ff56 <__swsetup_r+0x16>
 801ff50:	4628      	mov	r0, r5
 801ff52:	f7fe ff7f 	bl	801ee54 <__sinit>
 801ff56:	4b2e      	ldr	r3, [pc, #184]	; (8020010 <__swsetup_r+0xd0>)
 801ff58:	429c      	cmp	r4, r3
 801ff5a:	d10f      	bne.n	801ff7c <__swsetup_r+0x3c>
 801ff5c:	686c      	ldr	r4, [r5, #4]
 801ff5e:	89a3      	ldrh	r3, [r4, #12]
 801ff60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ff64:	0719      	lsls	r1, r3, #28
 801ff66:	d42c      	bmi.n	801ffc2 <__swsetup_r+0x82>
 801ff68:	06dd      	lsls	r5, r3, #27
 801ff6a:	d411      	bmi.n	801ff90 <__swsetup_r+0x50>
 801ff6c:	2309      	movs	r3, #9
 801ff6e:	6033      	str	r3, [r6, #0]
 801ff70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ff74:	81a3      	strh	r3, [r4, #12]
 801ff76:	f04f 30ff 	mov.w	r0, #4294967295
 801ff7a:	e03e      	b.n	801fffa <__swsetup_r+0xba>
 801ff7c:	4b25      	ldr	r3, [pc, #148]	; (8020014 <__swsetup_r+0xd4>)
 801ff7e:	429c      	cmp	r4, r3
 801ff80:	d101      	bne.n	801ff86 <__swsetup_r+0x46>
 801ff82:	68ac      	ldr	r4, [r5, #8]
 801ff84:	e7eb      	b.n	801ff5e <__swsetup_r+0x1e>
 801ff86:	4b24      	ldr	r3, [pc, #144]	; (8020018 <__swsetup_r+0xd8>)
 801ff88:	429c      	cmp	r4, r3
 801ff8a:	bf08      	it	eq
 801ff8c:	68ec      	ldreq	r4, [r5, #12]
 801ff8e:	e7e6      	b.n	801ff5e <__swsetup_r+0x1e>
 801ff90:	0758      	lsls	r0, r3, #29
 801ff92:	d512      	bpl.n	801ffba <__swsetup_r+0x7a>
 801ff94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ff96:	b141      	cbz	r1, 801ffaa <__swsetup_r+0x6a>
 801ff98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ff9c:	4299      	cmp	r1, r3
 801ff9e:	d002      	beq.n	801ffa6 <__swsetup_r+0x66>
 801ffa0:	4630      	mov	r0, r6
 801ffa2:	f7ff f8c1 	bl	801f128 <_free_r>
 801ffa6:	2300      	movs	r3, #0
 801ffa8:	6363      	str	r3, [r4, #52]	; 0x34
 801ffaa:	89a3      	ldrh	r3, [r4, #12]
 801ffac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ffb0:	81a3      	strh	r3, [r4, #12]
 801ffb2:	2300      	movs	r3, #0
 801ffb4:	6063      	str	r3, [r4, #4]
 801ffb6:	6923      	ldr	r3, [r4, #16]
 801ffb8:	6023      	str	r3, [r4, #0]
 801ffba:	89a3      	ldrh	r3, [r4, #12]
 801ffbc:	f043 0308 	orr.w	r3, r3, #8
 801ffc0:	81a3      	strh	r3, [r4, #12]
 801ffc2:	6923      	ldr	r3, [r4, #16]
 801ffc4:	b94b      	cbnz	r3, 801ffda <__swsetup_r+0x9a>
 801ffc6:	89a3      	ldrh	r3, [r4, #12]
 801ffc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ffcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ffd0:	d003      	beq.n	801ffda <__swsetup_r+0x9a>
 801ffd2:	4621      	mov	r1, r4
 801ffd4:	4630      	mov	r0, r6
 801ffd6:	f7ff f827 	bl	801f028 <__smakebuf_r>
 801ffda:	89a0      	ldrh	r0, [r4, #12]
 801ffdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ffe0:	f010 0301 	ands.w	r3, r0, #1
 801ffe4:	d00a      	beq.n	801fffc <__swsetup_r+0xbc>
 801ffe6:	2300      	movs	r3, #0
 801ffe8:	60a3      	str	r3, [r4, #8]
 801ffea:	6963      	ldr	r3, [r4, #20]
 801ffec:	425b      	negs	r3, r3
 801ffee:	61a3      	str	r3, [r4, #24]
 801fff0:	6923      	ldr	r3, [r4, #16]
 801fff2:	b943      	cbnz	r3, 8020006 <__swsetup_r+0xc6>
 801fff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fff8:	d1ba      	bne.n	801ff70 <__swsetup_r+0x30>
 801fffa:	bd70      	pop	{r4, r5, r6, pc}
 801fffc:	0781      	lsls	r1, r0, #30
 801fffe:	bf58      	it	pl
 8020000:	6963      	ldrpl	r3, [r4, #20]
 8020002:	60a3      	str	r3, [r4, #8]
 8020004:	e7f4      	b.n	801fff0 <__swsetup_r+0xb0>
 8020006:	2000      	movs	r0, #0
 8020008:	e7f7      	b.n	801fffa <__swsetup_r+0xba>
 802000a:	bf00      	nop
 802000c:	2000008c 	.word	0x2000008c
 8020010:	08022b18 	.word	0x08022b18
 8020014:	08022b38 	.word	0x08022b38
 8020018:	08022af8 	.word	0x08022af8

0802001c <_close_r>:
 802001c:	b538      	push	{r3, r4, r5, lr}
 802001e:	4d06      	ldr	r5, [pc, #24]	; (8020038 <_close_r+0x1c>)
 8020020:	2300      	movs	r3, #0
 8020022:	4604      	mov	r4, r0
 8020024:	4608      	mov	r0, r1
 8020026:	602b      	str	r3, [r5, #0]
 8020028:	f7e3 fc0b 	bl	8003842 <_close>
 802002c:	1c43      	adds	r3, r0, #1
 802002e:	d102      	bne.n	8020036 <_close_r+0x1a>
 8020030:	682b      	ldr	r3, [r5, #0]
 8020032:	b103      	cbz	r3, 8020036 <_close_r+0x1a>
 8020034:	6023      	str	r3, [r4, #0]
 8020036:	bd38      	pop	{r3, r4, r5, pc}
 8020038:	200099b8 	.word	0x200099b8

0802003c <quorem>:
 802003c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020040:	6903      	ldr	r3, [r0, #16]
 8020042:	690c      	ldr	r4, [r1, #16]
 8020044:	42a3      	cmp	r3, r4
 8020046:	4607      	mov	r7, r0
 8020048:	f2c0 8081 	blt.w	802014e <quorem+0x112>
 802004c:	3c01      	subs	r4, #1
 802004e:	f101 0814 	add.w	r8, r1, #20
 8020052:	f100 0514 	add.w	r5, r0, #20
 8020056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802005a:	9301      	str	r3, [sp, #4]
 802005c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020064:	3301      	adds	r3, #1
 8020066:	429a      	cmp	r2, r3
 8020068:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802006c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020070:	fbb2 f6f3 	udiv	r6, r2, r3
 8020074:	d331      	bcc.n	80200da <quorem+0x9e>
 8020076:	f04f 0e00 	mov.w	lr, #0
 802007a:	4640      	mov	r0, r8
 802007c:	46ac      	mov	ip, r5
 802007e:	46f2      	mov	sl, lr
 8020080:	f850 2b04 	ldr.w	r2, [r0], #4
 8020084:	b293      	uxth	r3, r2
 8020086:	fb06 e303 	mla	r3, r6, r3, lr
 802008a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802008e:	b29b      	uxth	r3, r3
 8020090:	ebaa 0303 	sub.w	r3, sl, r3
 8020094:	f8dc a000 	ldr.w	sl, [ip]
 8020098:	0c12      	lsrs	r2, r2, #16
 802009a:	fa13 f38a 	uxtah	r3, r3, sl
 802009e:	fb06 e202 	mla	r2, r6, r2, lr
 80200a2:	9300      	str	r3, [sp, #0]
 80200a4:	9b00      	ldr	r3, [sp, #0]
 80200a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80200aa:	b292      	uxth	r2, r2
 80200ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80200b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80200b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80200b8:	4581      	cmp	r9, r0
 80200ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80200be:	f84c 3b04 	str.w	r3, [ip], #4
 80200c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80200c6:	d2db      	bcs.n	8020080 <quorem+0x44>
 80200c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80200cc:	b92b      	cbnz	r3, 80200da <quorem+0x9e>
 80200ce:	9b01      	ldr	r3, [sp, #4]
 80200d0:	3b04      	subs	r3, #4
 80200d2:	429d      	cmp	r5, r3
 80200d4:	461a      	mov	r2, r3
 80200d6:	d32e      	bcc.n	8020136 <quorem+0xfa>
 80200d8:	613c      	str	r4, [r7, #16]
 80200da:	4638      	mov	r0, r7
 80200dc:	f001 f902 	bl	80212e4 <__mcmp>
 80200e0:	2800      	cmp	r0, #0
 80200e2:	db24      	blt.n	802012e <quorem+0xf2>
 80200e4:	3601      	adds	r6, #1
 80200e6:	4628      	mov	r0, r5
 80200e8:	f04f 0c00 	mov.w	ip, #0
 80200ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80200f0:	f8d0 e000 	ldr.w	lr, [r0]
 80200f4:	b293      	uxth	r3, r2
 80200f6:	ebac 0303 	sub.w	r3, ip, r3
 80200fa:	0c12      	lsrs	r2, r2, #16
 80200fc:	fa13 f38e 	uxtah	r3, r3, lr
 8020100:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020108:	b29b      	uxth	r3, r3
 802010a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802010e:	45c1      	cmp	r9, r8
 8020110:	f840 3b04 	str.w	r3, [r0], #4
 8020114:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020118:	d2e8      	bcs.n	80200ec <quorem+0xb0>
 802011a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802011e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020122:	b922      	cbnz	r2, 802012e <quorem+0xf2>
 8020124:	3b04      	subs	r3, #4
 8020126:	429d      	cmp	r5, r3
 8020128:	461a      	mov	r2, r3
 802012a:	d30a      	bcc.n	8020142 <quorem+0x106>
 802012c:	613c      	str	r4, [r7, #16]
 802012e:	4630      	mov	r0, r6
 8020130:	b003      	add	sp, #12
 8020132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020136:	6812      	ldr	r2, [r2, #0]
 8020138:	3b04      	subs	r3, #4
 802013a:	2a00      	cmp	r2, #0
 802013c:	d1cc      	bne.n	80200d8 <quorem+0x9c>
 802013e:	3c01      	subs	r4, #1
 8020140:	e7c7      	b.n	80200d2 <quorem+0x96>
 8020142:	6812      	ldr	r2, [r2, #0]
 8020144:	3b04      	subs	r3, #4
 8020146:	2a00      	cmp	r2, #0
 8020148:	d1f0      	bne.n	802012c <quorem+0xf0>
 802014a:	3c01      	subs	r4, #1
 802014c:	e7eb      	b.n	8020126 <quorem+0xea>
 802014e:	2000      	movs	r0, #0
 8020150:	e7ee      	b.n	8020130 <quorem+0xf4>
 8020152:	0000      	movs	r0, r0
 8020154:	0000      	movs	r0, r0
	...

08020158 <_dtoa_r>:
 8020158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802015c:	ed2d 8b04 	vpush	{d8-d9}
 8020160:	ec57 6b10 	vmov	r6, r7, d0
 8020164:	b093      	sub	sp, #76	; 0x4c
 8020166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802016c:	9106      	str	r1, [sp, #24]
 802016e:	ee10 aa10 	vmov	sl, s0
 8020172:	4604      	mov	r4, r0
 8020174:	9209      	str	r2, [sp, #36]	; 0x24
 8020176:	930c      	str	r3, [sp, #48]	; 0x30
 8020178:	46bb      	mov	fp, r7
 802017a:	b975      	cbnz	r5, 802019a <_dtoa_r+0x42>
 802017c:	2010      	movs	r0, #16
 802017e:	f7fe ff93 	bl	801f0a8 <malloc>
 8020182:	4602      	mov	r2, r0
 8020184:	6260      	str	r0, [r4, #36]	; 0x24
 8020186:	b920      	cbnz	r0, 8020192 <_dtoa_r+0x3a>
 8020188:	4ba7      	ldr	r3, [pc, #668]	; (8020428 <_dtoa_r+0x2d0>)
 802018a:	21ea      	movs	r1, #234	; 0xea
 802018c:	48a7      	ldr	r0, [pc, #668]	; (802042c <_dtoa_r+0x2d4>)
 802018e:	f001 fcc5 	bl	8021b1c <__assert_func>
 8020192:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020196:	6005      	str	r5, [r0, #0]
 8020198:	60c5      	str	r5, [r0, #12]
 802019a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802019c:	6819      	ldr	r1, [r3, #0]
 802019e:	b151      	cbz	r1, 80201b6 <_dtoa_r+0x5e>
 80201a0:	685a      	ldr	r2, [r3, #4]
 80201a2:	604a      	str	r2, [r1, #4]
 80201a4:	2301      	movs	r3, #1
 80201a6:	4093      	lsls	r3, r2
 80201a8:	608b      	str	r3, [r1, #8]
 80201aa:	4620      	mov	r0, r4
 80201ac:	f000 fe58 	bl	8020e60 <_Bfree>
 80201b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80201b2:	2200      	movs	r2, #0
 80201b4:	601a      	str	r2, [r3, #0]
 80201b6:	1e3b      	subs	r3, r7, #0
 80201b8:	bfaa      	itet	ge
 80201ba:	2300      	movge	r3, #0
 80201bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80201c0:	f8c8 3000 	strge.w	r3, [r8]
 80201c4:	4b9a      	ldr	r3, [pc, #616]	; (8020430 <_dtoa_r+0x2d8>)
 80201c6:	bfbc      	itt	lt
 80201c8:	2201      	movlt	r2, #1
 80201ca:	f8c8 2000 	strlt.w	r2, [r8]
 80201ce:	ea33 030b 	bics.w	r3, r3, fp
 80201d2:	d11b      	bne.n	802020c <_dtoa_r+0xb4>
 80201d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80201d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80201da:	6013      	str	r3, [r2, #0]
 80201dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80201e0:	4333      	orrs	r3, r6
 80201e2:	f000 8592 	beq.w	8020d0a <_dtoa_r+0xbb2>
 80201e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80201e8:	b963      	cbnz	r3, 8020204 <_dtoa_r+0xac>
 80201ea:	4b92      	ldr	r3, [pc, #584]	; (8020434 <_dtoa_r+0x2dc>)
 80201ec:	e022      	b.n	8020234 <_dtoa_r+0xdc>
 80201ee:	4b92      	ldr	r3, [pc, #584]	; (8020438 <_dtoa_r+0x2e0>)
 80201f0:	9301      	str	r3, [sp, #4]
 80201f2:	3308      	adds	r3, #8
 80201f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80201f6:	6013      	str	r3, [r2, #0]
 80201f8:	9801      	ldr	r0, [sp, #4]
 80201fa:	b013      	add	sp, #76	; 0x4c
 80201fc:	ecbd 8b04 	vpop	{d8-d9}
 8020200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020204:	4b8b      	ldr	r3, [pc, #556]	; (8020434 <_dtoa_r+0x2dc>)
 8020206:	9301      	str	r3, [sp, #4]
 8020208:	3303      	adds	r3, #3
 802020a:	e7f3      	b.n	80201f4 <_dtoa_r+0x9c>
 802020c:	2200      	movs	r2, #0
 802020e:	2300      	movs	r3, #0
 8020210:	4650      	mov	r0, sl
 8020212:	4659      	mov	r1, fp
 8020214:	f7e0 fc30 	bl	8000a78 <__aeabi_dcmpeq>
 8020218:	ec4b ab19 	vmov	d9, sl, fp
 802021c:	4680      	mov	r8, r0
 802021e:	b158      	cbz	r0, 8020238 <_dtoa_r+0xe0>
 8020220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020222:	2301      	movs	r3, #1
 8020224:	6013      	str	r3, [r2, #0]
 8020226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020228:	2b00      	cmp	r3, #0
 802022a:	f000 856b 	beq.w	8020d04 <_dtoa_r+0xbac>
 802022e:	4883      	ldr	r0, [pc, #524]	; (802043c <_dtoa_r+0x2e4>)
 8020230:	6018      	str	r0, [r3, #0]
 8020232:	1e43      	subs	r3, r0, #1
 8020234:	9301      	str	r3, [sp, #4]
 8020236:	e7df      	b.n	80201f8 <_dtoa_r+0xa0>
 8020238:	ec4b ab10 	vmov	d0, sl, fp
 802023c:	aa10      	add	r2, sp, #64	; 0x40
 802023e:	a911      	add	r1, sp, #68	; 0x44
 8020240:	4620      	mov	r0, r4
 8020242:	f001 f8f5 	bl	8021430 <__d2b>
 8020246:	f3cb 550a 	ubfx	r5, fp, #20, #11
 802024a:	ee08 0a10 	vmov	s16, r0
 802024e:	2d00      	cmp	r5, #0
 8020250:	f000 8084 	beq.w	802035c <_dtoa_r+0x204>
 8020254:	ee19 3a90 	vmov	r3, s19
 8020258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802025c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020260:	4656      	mov	r6, sl
 8020262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802026a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802026e:	4b74      	ldr	r3, [pc, #464]	; (8020440 <_dtoa_r+0x2e8>)
 8020270:	2200      	movs	r2, #0
 8020272:	4630      	mov	r0, r6
 8020274:	4639      	mov	r1, r7
 8020276:	f7df ffdf 	bl	8000238 <__aeabi_dsub>
 802027a:	a365      	add	r3, pc, #404	; (adr r3, 8020410 <_dtoa_r+0x2b8>)
 802027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020280:	f7e0 f992 	bl	80005a8 <__aeabi_dmul>
 8020284:	a364      	add	r3, pc, #400	; (adr r3, 8020418 <_dtoa_r+0x2c0>)
 8020286:	e9d3 2300 	ldrd	r2, r3, [r3]
 802028a:	f7df ffd7 	bl	800023c <__adddf3>
 802028e:	4606      	mov	r6, r0
 8020290:	4628      	mov	r0, r5
 8020292:	460f      	mov	r7, r1
 8020294:	f7e0 f91e 	bl	80004d4 <__aeabi_i2d>
 8020298:	a361      	add	r3, pc, #388	; (adr r3, 8020420 <_dtoa_r+0x2c8>)
 802029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802029e:	f7e0 f983 	bl	80005a8 <__aeabi_dmul>
 80202a2:	4602      	mov	r2, r0
 80202a4:	460b      	mov	r3, r1
 80202a6:	4630      	mov	r0, r6
 80202a8:	4639      	mov	r1, r7
 80202aa:	f7df ffc7 	bl	800023c <__adddf3>
 80202ae:	4606      	mov	r6, r0
 80202b0:	460f      	mov	r7, r1
 80202b2:	f7e0 fc29 	bl	8000b08 <__aeabi_d2iz>
 80202b6:	2200      	movs	r2, #0
 80202b8:	9000      	str	r0, [sp, #0]
 80202ba:	2300      	movs	r3, #0
 80202bc:	4630      	mov	r0, r6
 80202be:	4639      	mov	r1, r7
 80202c0:	f7e0 fbe4 	bl	8000a8c <__aeabi_dcmplt>
 80202c4:	b150      	cbz	r0, 80202dc <_dtoa_r+0x184>
 80202c6:	9800      	ldr	r0, [sp, #0]
 80202c8:	f7e0 f904 	bl	80004d4 <__aeabi_i2d>
 80202cc:	4632      	mov	r2, r6
 80202ce:	463b      	mov	r3, r7
 80202d0:	f7e0 fbd2 	bl	8000a78 <__aeabi_dcmpeq>
 80202d4:	b910      	cbnz	r0, 80202dc <_dtoa_r+0x184>
 80202d6:	9b00      	ldr	r3, [sp, #0]
 80202d8:	3b01      	subs	r3, #1
 80202da:	9300      	str	r3, [sp, #0]
 80202dc:	9b00      	ldr	r3, [sp, #0]
 80202de:	2b16      	cmp	r3, #22
 80202e0:	d85a      	bhi.n	8020398 <_dtoa_r+0x240>
 80202e2:	9a00      	ldr	r2, [sp, #0]
 80202e4:	4b57      	ldr	r3, [pc, #348]	; (8020444 <_dtoa_r+0x2ec>)
 80202e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80202ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202ee:	ec51 0b19 	vmov	r0, r1, d9
 80202f2:	f7e0 fbcb 	bl	8000a8c <__aeabi_dcmplt>
 80202f6:	2800      	cmp	r0, #0
 80202f8:	d050      	beq.n	802039c <_dtoa_r+0x244>
 80202fa:	9b00      	ldr	r3, [sp, #0]
 80202fc:	3b01      	subs	r3, #1
 80202fe:	9300      	str	r3, [sp, #0]
 8020300:	2300      	movs	r3, #0
 8020302:	930b      	str	r3, [sp, #44]	; 0x2c
 8020304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020306:	1b5d      	subs	r5, r3, r5
 8020308:	1e6b      	subs	r3, r5, #1
 802030a:	9305      	str	r3, [sp, #20]
 802030c:	bf45      	ittet	mi
 802030e:	f1c5 0301 	rsbmi	r3, r5, #1
 8020312:	9304      	strmi	r3, [sp, #16]
 8020314:	2300      	movpl	r3, #0
 8020316:	2300      	movmi	r3, #0
 8020318:	bf4c      	ite	mi
 802031a:	9305      	strmi	r3, [sp, #20]
 802031c:	9304      	strpl	r3, [sp, #16]
 802031e:	9b00      	ldr	r3, [sp, #0]
 8020320:	2b00      	cmp	r3, #0
 8020322:	db3d      	blt.n	80203a0 <_dtoa_r+0x248>
 8020324:	9b05      	ldr	r3, [sp, #20]
 8020326:	9a00      	ldr	r2, [sp, #0]
 8020328:	920a      	str	r2, [sp, #40]	; 0x28
 802032a:	4413      	add	r3, r2
 802032c:	9305      	str	r3, [sp, #20]
 802032e:	2300      	movs	r3, #0
 8020330:	9307      	str	r3, [sp, #28]
 8020332:	9b06      	ldr	r3, [sp, #24]
 8020334:	2b09      	cmp	r3, #9
 8020336:	f200 8089 	bhi.w	802044c <_dtoa_r+0x2f4>
 802033a:	2b05      	cmp	r3, #5
 802033c:	bfc4      	itt	gt
 802033e:	3b04      	subgt	r3, #4
 8020340:	9306      	strgt	r3, [sp, #24]
 8020342:	9b06      	ldr	r3, [sp, #24]
 8020344:	f1a3 0302 	sub.w	r3, r3, #2
 8020348:	bfcc      	ite	gt
 802034a:	2500      	movgt	r5, #0
 802034c:	2501      	movle	r5, #1
 802034e:	2b03      	cmp	r3, #3
 8020350:	f200 8087 	bhi.w	8020462 <_dtoa_r+0x30a>
 8020354:	e8df f003 	tbb	[pc, r3]
 8020358:	59383a2d 	.word	0x59383a2d
 802035c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020360:	441d      	add	r5, r3
 8020362:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020366:	2b20      	cmp	r3, #32
 8020368:	bfc1      	itttt	gt
 802036a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802036e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020372:	fa0b f303 	lslgt.w	r3, fp, r3
 8020376:	fa26 f000 	lsrgt.w	r0, r6, r0
 802037a:	bfda      	itte	le
 802037c:	f1c3 0320 	rsble	r3, r3, #32
 8020380:	fa06 f003 	lslle.w	r0, r6, r3
 8020384:	4318      	orrgt	r0, r3
 8020386:	f7e0 f895 	bl	80004b4 <__aeabi_ui2d>
 802038a:	2301      	movs	r3, #1
 802038c:	4606      	mov	r6, r0
 802038e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020392:	3d01      	subs	r5, #1
 8020394:	930e      	str	r3, [sp, #56]	; 0x38
 8020396:	e76a      	b.n	802026e <_dtoa_r+0x116>
 8020398:	2301      	movs	r3, #1
 802039a:	e7b2      	b.n	8020302 <_dtoa_r+0x1aa>
 802039c:	900b      	str	r0, [sp, #44]	; 0x2c
 802039e:	e7b1      	b.n	8020304 <_dtoa_r+0x1ac>
 80203a0:	9b04      	ldr	r3, [sp, #16]
 80203a2:	9a00      	ldr	r2, [sp, #0]
 80203a4:	1a9b      	subs	r3, r3, r2
 80203a6:	9304      	str	r3, [sp, #16]
 80203a8:	4253      	negs	r3, r2
 80203aa:	9307      	str	r3, [sp, #28]
 80203ac:	2300      	movs	r3, #0
 80203ae:	930a      	str	r3, [sp, #40]	; 0x28
 80203b0:	e7bf      	b.n	8020332 <_dtoa_r+0x1da>
 80203b2:	2300      	movs	r3, #0
 80203b4:	9308      	str	r3, [sp, #32]
 80203b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	dc55      	bgt.n	8020468 <_dtoa_r+0x310>
 80203bc:	2301      	movs	r3, #1
 80203be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80203c2:	461a      	mov	r2, r3
 80203c4:	9209      	str	r2, [sp, #36]	; 0x24
 80203c6:	e00c      	b.n	80203e2 <_dtoa_r+0x28a>
 80203c8:	2301      	movs	r3, #1
 80203ca:	e7f3      	b.n	80203b4 <_dtoa_r+0x25c>
 80203cc:	2300      	movs	r3, #0
 80203ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80203d0:	9308      	str	r3, [sp, #32]
 80203d2:	9b00      	ldr	r3, [sp, #0]
 80203d4:	4413      	add	r3, r2
 80203d6:	9302      	str	r3, [sp, #8]
 80203d8:	3301      	adds	r3, #1
 80203da:	2b01      	cmp	r3, #1
 80203dc:	9303      	str	r3, [sp, #12]
 80203de:	bfb8      	it	lt
 80203e0:	2301      	movlt	r3, #1
 80203e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80203e4:	2200      	movs	r2, #0
 80203e6:	6042      	str	r2, [r0, #4]
 80203e8:	2204      	movs	r2, #4
 80203ea:	f102 0614 	add.w	r6, r2, #20
 80203ee:	429e      	cmp	r6, r3
 80203f0:	6841      	ldr	r1, [r0, #4]
 80203f2:	d93d      	bls.n	8020470 <_dtoa_r+0x318>
 80203f4:	4620      	mov	r0, r4
 80203f6:	f000 fcf3 	bl	8020de0 <_Balloc>
 80203fa:	9001      	str	r0, [sp, #4]
 80203fc:	2800      	cmp	r0, #0
 80203fe:	d13b      	bne.n	8020478 <_dtoa_r+0x320>
 8020400:	4b11      	ldr	r3, [pc, #68]	; (8020448 <_dtoa_r+0x2f0>)
 8020402:	4602      	mov	r2, r0
 8020404:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020408:	e6c0      	b.n	802018c <_dtoa_r+0x34>
 802040a:	2301      	movs	r3, #1
 802040c:	e7df      	b.n	80203ce <_dtoa_r+0x276>
 802040e:	bf00      	nop
 8020410:	636f4361 	.word	0x636f4361
 8020414:	3fd287a7 	.word	0x3fd287a7
 8020418:	8b60c8b3 	.word	0x8b60c8b3
 802041c:	3fc68a28 	.word	0x3fc68a28
 8020420:	509f79fb 	.word	0x509f79fb
 8020424:	3fd34413 	.word	0x3fd34413
 8020428:	08022b9d 	.word	0x08022b9d
 802042c:	08022bb4 	.word	0x08022bb4
 8020430:	7ff00000 	.word	0x7ff00000
 8020434:	08022b99 	.word	0x08022b99
 8020438:	08022b90 	.word	0x08022b90
 802043c:	08022b6d 	.word	0x08022b6d
 8020440:	3ff80000 	.word	0x3ff80000
 8020444:	08022cb0 	.word	0x08022cb0
 8020448:	08022c0f 	.word	0x08022c0f
 802044c:	2501      	movs	r5, #1
 802044e:	2300      	movs	r3, #0
 8020450:	9306      	str	r3, [sp, #24]
 8020452:	9508      	str	r5, [sp, #32]
 8020454:	f04f 33ff 	mov.w	r3, #4294967295
 8020458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802045c:	2200      	movs	r2, #0
 802045e:	2312      	movs	r3, #18
 8020460:	e7b0      	b.n	80203c4 <_dtoa_r+0x26c>
 8020462:	2301      	movs	r3, #1
 8020464:	9308      	str	r3, [sp, #32]
 8020466:	e7f5      	b.n	8020454 <_dtoa_r+0x2fc>
 8020468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802046a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802046e:	e7b8      	b.n	80203e2 <_dtoa_r+0x28a>
 8020470:	3101      	adds	r1, #1
 8020472:	6041      	str	r1, [r0, #4]
 8020474:	0052      	lsls	r2, r2, #1
 8020476:	e7b8      	b.n	80203ea <_dtoa_r+0x292>
 8020478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802047a:	9a01      	ldr	r2, [sp, #4]
 802047c:	601a      	str	r2, [r3, #0]
 802047e:	9b03      	ldr	r3, [sp, #12]
 8020480:	2b0e      	cmp	r3, #14
 8020482:	f200 809d 	bhi.w	80205c0 <_dtoa_r+0x468>
 8020486:	2d00      	cmp	r5, #0
 8020488:	f000 809a 	beq.w	80205c0 <_dtoa_r+0x468>
 802048c:	9b00      	ldr	r3, [sp, #0]
 802048e:	2b00      	cmp	r3, #0
 8020490:	dd32      	ble.n	80204f8 <_dtoa_r+0x3a0>
 8020492:	4ab7      	ldr	r2, [pc, #732]	; (8020770 <_dtoa_r+0x618>)
 8020494:	f003 030f 	and.w	r3, r3, #15
 8020498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802049c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80204a0:	9b00      	ldr	r3, [sp, #0]
 80204a2:	05d8      	lsls	r0, r3, #23
 80204a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80204a8:	d516      	bpl.n	80204d8 <_dtoa_r+0x380>
 80204aa:	4bb2      	ldr	r3, [pc, #712]	; (8020774 <_dtoa_r+0x61c>)
 80204ac:	ec51 0b19 	vmov	r0, r1, d9
 80204b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80204b4:	f7e0 f9a2 	bl	80007fc <__aeabi_ddiv>
 80204b8:	f007 070f 	and.w	r7, r7, #15
 80204bc:	4682      	mov	sl, r0
 80204be:	468b      	mov	fp, r1
 80204c0:	2503      	movs	r5, #3
 80204c2:	4eac      	ldr	r6, [pc, #688]	; (8020774 <_dtoa_r+0x61c>)
 80204c4:	b957      	cbnz	r7, 80204dc <_dtoa_r+0x384>
 80204c6:	4642      	mov	r2, r8
 80204c8:	464b      	mov	r3, r9
 80204ca:	4650      	mov	r0, sl
 80204cc:	4659      	mov	r1, fp
 80204ce:	f7e0 f995 	bl	80007fc <__aeabi_ddiv>
 80204d2:	4682      	mov	sl, r0
 80204d4:	468b      	mov	fp, r1
 80204d6:	e028      	b.n	802052a <_dtoa_r+0x3d2>
 80204d8:	2502      	movs	r5, #2
 80204da:	e7f2      	b.n	80204c2 <_dtoa_r+0x36a>
 80204dc:	07f9      	lsls	r1, r7, #31
 80204de:	d508      	bpl.n	80204f2 <_dtoa_r+0x39a>
 80204e0:	4640      	mov	r0, r8
 80204e2:	4649      	mov	r1, r9
 80204e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80204e8:	f7e0 f85e 	bl	80005a8 <__aeabi_dmul>
 80204ec:	3501      	adds	r5, #1
 80204ee:	4680      	mov	r8, r0
 80204f0:	4689      	mov	r9, r1
 80204f2:	107f      	asrs	r7, r7, #1
 80204f4:	3608      	adds	r6, #8
 80204f6:	e7e5      	b.n	80204c4 <_dtoa_r+0x36c>
 80204f8:	f000 809b 	beq.w	8020632 <_dtoa_r+0x4da>
 80204fc:	9b00      	ldr	r3, [sp, #0]
 80204fe:	4f9d      	ldr	r7, [pc, #628]	; (8020774 <_dtoa_r+0x61c>)
 8020500:	425e      	negs	r6, r3
 8020502:	4b9b      	ldr	r3, [pc, #620]	; (8020770 <_dtoa_r+0x618>)
 8020504:	f006 020f 	and.w	r2, r6, #15
 8020508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802050c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020510:	ec51 0b19 	vmov	r0, r1, d9
 8020514:	f7e0 f848 	bl	80005a8 <__aeabi_dmul>
 8020518:	1136      	asrs	r6, r6, #4
 802051a:	4682      	mov	sl, r0
 802051c:	468b      	mov	fp, r1
 802051e:	2300      	movs	r3, #0
 8020520:	2502      	movs	r5, #2
 8020522:	2e00      	cmp	r6, #0
 8020524:	d17a      	bne.n	802061c <_dtoa_r+0x4c4>
 8020526:	2b00      	cmp	r3, #0
 8020528:	d1d3      	bne.n	80204d2 <_dtoa_r+0x37a>
 802052a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802052c:	2b00      	cmp	r3, #0
 802052e:	f000 8082 	beq.w	8020636 <_dtoa_r+0x4de>
 8020532:	4b91      	ldr	r3, [pc, #580]	; (8020778 <_dtoa_r+0x620>)
 8020534:	2200      	movs	r2, #0
 8020536:	4650      	mov	r0, sl
 8020538:	4659      	mov	r1, fp
 802053a:	f7e0 faa7 	bl	8000a8c <__aeabi_dcmplt>
 802053e:	2800      	cmp	r0, #0
 8020540:	d079      	beq.n	8020636 <_dtoa_r+0x4de>
 8020542:	9b03      	ldr	r3, [sp, #12]
 8020544:	2b00      	cmp	r3, #0
 8020546:	d076      	beq.n	8020636 <_dtoa_r+0x4de>
 8020548:	9b02      	ldr	r3, [sp, #8]
 802054a:	2b00      	cmp	r3, #0
 802054c:	dd36      	ble.n	80205bc <_dtoa_r+0x464>
 802054e:	9b00      	ldr	r3, [sp, #0]
 8020550:	4650      	mov	r0, sl
 8020552:	4659      	mov	r1, fp
 8020554:	1e5f      	subs	r7, r3, #1
 8020556:	2200      	movs	r2, #0
 8020558:	4b88      	ldr	r3, [pc, #544]	; (802077c <_dtoa_r+0x624>)
 802055a:	f7e0 f825 	bl	80005a8 <__aeabi_dmul>
 802055e:	9e02      	ldr	r6, [sp, #8]
 8020560:	4682      	mov	sl, r0
 8020562:	468b      	mov	fp, r1
 8020564:	3501      	adds	r5, #1
 8020566:	4628      	mov	r0, r5
 8020568:	f7df ffb4 	bl	80004d4 <__aeabi_i2d>
 802056c:	4652      	mov	r2, sl
 802056e:	465b      	mov	r3, fp
 8020570:	f7e0 f81a 	bl	80005a8 <__aeabi_dmul>
 8020574:	4b82      	ldr	r3, [pc, #520]	; (8020780 <_dtoa_r+0x628>)
 8020576:	2200      	movs	r2, #0
 8020578:	f7df fe60 	bl	800023c <__adddf3>
 802057c:	46d0      	mov	r8, sl
 802057e:	46d9      	mov	r9, fp
 8020580:	4682      	mov	sl, r0
 8020582:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020586:	2e00      	cmp	r6, #0
 8020588:	d158      	bne.n	802063c <_dtoa_r+0x4e4>
 802058a:	4b7e      	ldr	r3, [pc, #504]	; (8020784 <_dtoa_r+0x62c>)
 802058c:	2200      	movs	r2, #0
 802058e:	4640      	mov	r0, r8
 8020590:	4649      	mov	r1, r9
 8020592:	f7df fe51 	bl	8000238 <__aeabi_dsub>
 8020596:	4652      	mov	r2, sl
 8020598:	465b      	mov	r3, fp
 802059a:	4680      	mov	r8, r0
 802059c:	4689      	mov	r9, r1
 802059e:	f7e0 fa93 	bl	8000ac8 <__aeabi_dcmpgt>
 80205a2:	2800      	cmp	r0, #0
 80205a4:	f040 8295 	bne.w	8020ad2 <_dtoa_r+0x97a>
 80205a8:	4652      	mov	r2, sl
 80205aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80205ae:	4640      	mov	r0, r8
 80205b0:	4649      	mov	r1, r9
 80205b2:	f7e0 fa6b 	bl	8000a8c <__aeabi_dcmplt>
 80205b6:	2800      	cmp	r0, #0
 80205b8:	f040 8289 	bne.w	8020ace <_dtoa_r+0x976>
 80205bc:	ec5b ab19 	vmov	sl, fp, d9
 80205c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	f2c0 8148 	blt.w	8020858 <_dtoa_r+0x700>
 80205c8:	9a00      	ldr	r2, [sp, #0]
 80205ca:	2a0e      	cmp	r2, #14
 80205cc:	f300 8144 	bgt.w	8020858 <_dtoa_r+0x700>
 80205d0:	4b67      	ldr	r3, [pc, #412]	; (8020770 <_dtoa_r+0x618>)
 80205d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80205d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80205da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205dc:	2b00      	cmp	r3, #0
 80205de:	f280 80d5 	bge.w	802078c <_dtoa_r+0x634>
 80205e2:	9b03      	ldr	r3, [sp, #12]
 80205e4:	2b00      	cmp	r3, #0
 80205e6:	f300 80d1 	bgt.w	802078c <_dtoa_r+0x634>
 80205ea:	f040 826f 	bne.w	8020acc <_dtoa_r+0x974>
 80205ee:	4b65      	ldr	r3, [pc, #404]	; (8020784 <_dtoa_r+0x62c>)
 80205f0:	2200      	movs	r2, #0
 80205f2:	4640      	mov	r0, r8
 80205f4:	4649      	mov	r1, r9
 80205f6:	f7df ffd7 	bl	80005a8 <__aeabi_dmul>
 80205fa:	4652      	mov	r2, sl
 80205fc:	465b      	mov	r3, fp
 80205fe:	f7e0 fa59 	bl	8000ab4 <__aeabi_dcmpge>
 8020602:	9e03      	ldr	r6, [sp, #12]
 8020604:	4637      	mov	r7, r6
 8020606:	2800      	cmp	r0, #0
 8020608:	f040 8245 	bne.w	8020a96 <_dtoa_r+0x93e>
 802060c:	9d01      	ldr	r5, [sp, #4]
 802060e:	2331      	movs	r3, #49	; 0x31
 8020610:	f805 3b01 	strb.w	r3, [r5], #1
 8020614:	9b00      	ldr	r3, [sp, #0]
 8020616:	3301      	adds	r3, #1
 8020618:	9300      	str	r3, [sp, #0]
 802061a:	e240      	b.n	8020a9e <_dtoa_r+0x946>
 802061c:	07f2      	lsls	r2, r6, #31
 802061e:	d505      	bpl.n	802062c <_dtoa_r+0x4d4>
 8020620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020624:	f7df ffc0 	bl	80005a8 <__aeabi_dmul>
 8020628:	3501      	adds	r5, #1
 802062a:	2301      	movs	r3, #1
 802062c:	1076      	asrs	r6, r6, #1
 802062e:	3708      	adds	r7, #8
 8020630:	e777      	b.n	8020522 <_dtoa_r+0x3ca>
 8020632:	2502      	movs	r5, #2
 8020634:	e779      	b.n	802052a <_dtoa_r+0x3d2>
 8020636:	9f00      	ldr	r7, [sp, #0]
 8020638:	9e03      	ldr	r6, [sp, #12]
 802063a:	e794      	b.n	8020566 <_dtoa_r+0x40e>
 802063c:	9901      	ldr	r1, [sp, #4]
 802063e:	4b4c      	ldr	r3, [pc, #304]	; (8020770 <_dtoa_r+0x618>)
 8020640:	4431      	add	r1, r6
 8020642:	910d      	str	r1, [sp, #52]	; 0x34
 8020644:	9908      	ldr	r1, [sp, #32]
 8020646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802064a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802064e:	2900      	cmp	r1, #0
 8020650:	d043      	beq.n	80206da <_dtoa_r+0x582>
 8020652:	494d      	ldr	r1, [pc, #308]	; (8020788 <_dtoa_r+0x630>)
 8020654:	2000      	movs	r0, #0
 8020656:	f7e0 f8d1 	bl	80007fc <__aeabi_ddiv>
 802065a:	4652      	mov	r2, sl
 802065c:	465b      	mov	r3, fp
 802065e:	f7df fdeb 	bl	8000238 <__aeabi_dsub>
 8020662:	9d01      	ldr	r5, [sp, #4]
 8020664:	4682      	mov	sl, r0
 8020666:	468b      	mov	fp, r1
 8020668:	4649      	mov	r1, r9
 802066a:	4640      	mov	r0, r8
 802066c:	f7e0 fa4c 	bl	8000b08 <__aeabi_d2iz>
 8020670:	4606      	mov	r6, r0
 8020672:	f7df ff2f 	bl	80004d4 <__aeabi_i2d>
 8020676:	4602      	mov	r2, r0
 8020678:	460b      	mov	r3, r1
 802067a:	4640      	mov	r0, r8
 802067c:	4649      	mov	r1, r9
 802067e:	f7df fddb 	bl	8000238 <__aeabi_dsub>
 8020682:	3630      	adds	r6, #48	; 0x30
 8020684:	f805 6b01 	strb.w	r6, [r5], #1
 8020688:	4652      	mov	r2, sl
 802068a:	465b      	mov	r3, fp
 802068c:	4680      	mov	r8, r0
 802068e:	4689      	mov	r9, r1
 8020690:	f7e0 f9fc 	bl	8000a8c <__aeabi_dcmplt>
 8020694:	2800      	cmp	r0, #0
 8020696:	d163      	bne.n	8020760 <_dtoa_r+0x608>
 8020698:	4642      	mov	r2, r8
 802069a:	464b      	mov	r3, r9
 802069c:	4936      	ldr	r1, [pc, #216]	; (8020778 <_dtoa_r+0x620>)
 802069e:	2000      	movs	r0, #0
 80206a0:	f7df fdca 	bl	8000238 <__aeabi_dsub>
 80206a4:	4652      	mov	r2, sl
 80206a6:	465b      	mov	r3, fp
 80206a8:	f7e0 f9f0 	bl	8000a8c <__aeabi_dcmplt>
 80206ac:	2800      	cmp	r0, #0
 80206ae:	f040 80b5 	bne.w	802081c <_dtoa_r+0x6c4>
 80206b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80206b4:	429d      	cmp	r5, r3
 80206b6:	d081      	beq.n	80205bc <_dtoa_r+0x464>
 80206b8:	4b30      	ldr	r3, [pc, #192]	; (802077c <_dtoa_r+0x624>)
 80206ba:	2200      	movs	r2, #0
 80206bc:	4650      	mov	r0, sl
 80206be:	4659      	mov	r1, fp
 80206c0:	f7df ff72 	bl	80005a8 <__aeabi_dmul>
 80206c4:	4b2d      	ldr	r3, [pc, #180]	; (802077c <_dtoa_r+0x624>)
 80206c6:	4682      	mov	sl, r0
 80206c8:	468b      	mov	fp, r1
 80206ca:	4640      	mov	r0, r8
 80206cc:	4649      	mov	r1, r9
 80206ce:	2200      	movs	r2, #0
 80206d0:	f7df ff6a 	bl	80005a8 <__aeabi_dmul>
 80206d4:	4680      	mov	r8, r0
 80206d6:	4689      	mov	r9, r1
 80206d8:	e7c6      	b.n	8020668 <_dtoa_r+0x510>
 80206da:	4650      	mov	r0, sl
 80206dc:	4659      	mov	r1, fp
 80206de:	f7df ff63 	bl	80005a8 <__aeabi_dmul>
 80206e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80206e4:	9d01      	ldr	r5, [sp, #4]
 80206e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80206e8:	4682      	mov	sl, r0
 80206ea:	468b      	mov	fp, r1
 80206ec:	4649      	mov	r1, r9
 80206ee:	4640      	mov	r0, r8
 80206f0:	f7e0 fa0a 	bl	8000b08 <__aeabi_d2iz>
 80206f4:	4606      	mov	r6, r0
 80206f6:	f7df feed 	bl	80004d4 <__aeabi_i2d>
 80206fa:	3630      	adds	r6, #48	; 0x30
 80206fc:	4602      	mov	r2, r0
 80206fe:	460b      	mov	r3, r1
 8020700:	4640      	mov	r0, r8
 8020702:	4649      	mov	r1, r9
 8020704:	f7df fd98 	bl	8000238 <__aeabi_dsub>
 8020708:	f805 6b01 	strb.w	r6, [r5], #1
 802070c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802070e:	429d      	cmp	r5, r3
 8020710:	4680      	mov	r8, r0
 8020712:	4689      	mov	r9, r1
 8020714:	f04f 0200 	mov.w	r2, #0
 8020718:	d124      	bne.n	8020764 <_dtoa_r+0x60c>
 802071a:	4b1b      	ldr	r3, [pc, #108]	; (8020788 <_dtoa_r+0x630>)
 802071c:	4650      	mov	r0, sl
 802071e:	4659      	mov	r1, fp
 8020720:	f7df fd8c 	bl	800023c <__adddf3>
 8020724:	4602      	mov	r2, r0
 8020726:	460b      	mov	r3, r1
 8020728:	4640      	mov	r0, r8
 802072a:	4649      	mov	r1, r9
 802072c:	f7e0 f9cc 	bl	8000ac8 <__aeabi_dcmpgt>
 8020730:	2800      	cmp	r0, #0
 8020732:	d173      	bne.n	802081c <_dtoa_r+0x6c4>
 8020734:	4652      	mov	r2, sl
 8020736:	465b      	mov	r3, fp
 8020738:	4913      	ldr	r1, [pc, #76]	; (8020788 <_dtoa_r+0x630>)
 802073a:	2000      	movs	r0, #0
 802073c:	f7df fd7c 	bl	8000238 <__aeabi_dsub>
 8020740:	4602      	mov	r2, r0
 8020742:	460b      	mov	r3, r1
 8020744:	4640      	mov	r0, r8
 8020746:	4649      	mov	r1, r9
 8020748:	f7e0 f9a0 	bl	8000a8c <__aeabi_dcmplt>
 802074c:	2800      	cmp	r0, #0
 802074e:	f43f af35 	beq.w	80205bc <_dtoa_r+0x464>
 8020752:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020754:	1e6b      	subs	r3, r5, #1
 8020756:	930f      	str	r3, [sp, #60]	; 0x3c
 8020758:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802075c:	2b30      	cmp	r3, #48	; 0x30
 802075e:	d0f8      	beq.n	8020752 <_dtoa_r+0x5fa>
 8020760:	9700      	str	r7, [sp, #0]
 8020762:	e049      	b.n	80207f8 <_dtoa_r+0x6a0>
 8020764:	4b05      	ldr	r3, [pc, #20]	; (802077c <_dtoa_r+0x624>)
 8020766:	f7df ff1f 	bl	80005a8 <__aeabi_dmul>
 802076a:	4680      	mov	r8, r0
 802076c:	4689      	mov	r9, r1
 802076e:	e7bd      	b.n	80206ec <_dtoa_r+0x594>
 8020770:	08022cb0 	.word	0x08022cb0
 8020774:	08022c88 	.word	0x08022c88
 8020778:	3ff00000 	.word	0x3ff00000
 802077c:	40240000 	.word	0x40240000
 8020780:	401c0000 	.word	0x401c0000
 8020784:	40140000 	.word	0x40140000
 8020788:	3fe00000 	.word	0x3fe00000
 802078c:	9d01      	ldr	r5, [sp, #4]
 802078e:	4656      	mov	r6, sl
 8020790:	465f      	mov	r7, fp
 8020792:	4642      	mov	r2, r8
 8020794:	464b      	mov	r3, r9
 8020796:	4630      	mov	r0, r6
 8020798:	4639      	mov	r1, r7
 802079a:	f7e0 f82f 	bl	80007fc <__aeabi_ddiv>
 802079e:	f7e0 f9b3 	bl	8000b08 <__aeabi_d2iz>
 80207a2:	4682      	mov	sl, r0
 80207a4:	f7df fe96 	bl	80004d4 <__aeabi_i2d>
 80207a8:	4642      	mov	r2, r8
 80207aa:	464b      	mov	r3, r9
 80207ac:	f7df fefc 	bl	80005a8 <__aeabi_dmul>
 80207b0:	4602      	mov	r2, r0
 80207b2:	460b      	mov	r3, r1
 80207b4:	4630      	mov	r0, r6
 80207b6:	4639      	mov	r1, r7
 80207b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80207bc:	f7df fd3c 	bl	8000238 <__aeabi_dsub>
 80207c0:	f805 6b01 	strb.w	r6, [r5], #1
 80207c4:	9e01      	ldr	r6, [sp, #4]
 80207c6:	9f03      	ldr	r7, [sp, #12]
 80207c8:	1bae      	subs	r6, r5, r6
 80207ca:	42b7      	cmp	r7, r6
 80207cc:	4602      	mov	r2, r0
 80207ce:	460b      	mov	r3, r1
 80207d0:	d135      	bne.n	802083e <_dtoa_r+0x6e6>
 80207d2:	f7df fd33 	bl	800023c <__adddf3>
 80207d6:	4642      	mov	r2, r8
 80207d8:	464b      	mov	r3, r9
 80207da:	4606      	mov	r6, r0
 80207dc:	460f      	mov	r7, r1
 80207de:	f7e0 f973 	bl	8000ac8 <__aeabi_dcmpgt>
 80207e2:	b9d0      	cbnz	r0, 802081a <_dtoa_r+0x6c2>
 80207e4:	4642      	mov	r2, r8
 80207e6:	464b      	mov	r3, r9
 80207e8:	4630      	mov	r0, r6
 80207ea:	4639      	mov	r1, r7
 80207ec:	f7e0 f944 	bl	8000a78 <__aeabi_dcmpeq>
 80207f0:	b110      	cbz	r0, 80207f8 <_dtoa_r+0x6a0>
 80207f2:	f01a 0f01 	tst.w	sl, #1
 80207f6:	d110      	bne.n	802081a <_dtoa_r+0x6c2>
 80207f8:	4620      	mov	r0, r4
 80207fa:	ee18 1a10 	vmov	r1, s16
 80207fe:	f000 fb2f 	bl	8020e60 <_Bfree>
 8020802:	2300      	movs	r3, #0
 8020804:	9800      	ldr	r0, [sp, #0]
 8020806:	702b      	strb	r3, [r5, #0]
 8020808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802080a:	3001      	adds	r0, #1
 802080c:	6018      	str	r0, [r3, #0]
 802080e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020810:	2b00      	cmp	r3, #0
 8020812:	f43f acf1 	beq.w	80201f8 <_dtoa_r+0xa0>
 8020816:	601d      	str	r5, [r3, #0]
 8020818:	e4ee      	b.n	80201f8 <_dtoa_r+0xa0>
 802081a:	9f00      	ldr	r7, [sp, #0]
 802081c:	462b      	mov	r3, r5
 802081e:	461d      	mov	r5, r3
 8020820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020824:	2a39      	cmp	r2, #57	; 0x39
 8020826:	d106      	bne.n	8020836 <_dtoa_r+0x6de>
 8020828:	9a01      	ldr	r2, [sp, #4]
 802082a:	429a      	cmp	r2, r3
 802082c:	d1f7      	bne.n	802081e <_dtoa_r+0x6c6>
 802082e:	9901      	ldr	r1, [sp, #4]
 8020830:	2230      	movs	r2, #48	; 0x30
 8020832:	3701      	adds	r7, #1
 8020834:	700a      	strb	r2, [r1, #0]
 8020836:	781a      	ldrb	r2, [r3, #0]
 8020838:	3201      	adds	r2, #1
 802083a:	701a      	strb	r2, [r3, #0]
 802083c:	e790      	b.n	8020760 <_dtoa_r+0x608>
 802083e:	4ba6      	ldr	r3, [pc, #664]	; (8020ad8 <_dtoa_r+0x980>)
 8020840:	2200      	movs	r2, #0
 8020842:	f7df feb1 	bl	80005a8 <__aeabi_dmul>
 8020846:	2200      	movs	r2, #0
 8020848:	2300      	movs	r3, #0
 802084a:	4606      	mov	r6, r0
 802084c:	460f      	mov	r7, r1
 802084e:	f7e0 f913 	bl	8000a78 <__aeabi_dcmpeq>
 8020852:	2800      	cmp	r0, #0
 8020854:	d09d      	beq.n	8020792 <_dtoa_r+0x63a>
 8020856:	e7cf      	b.n	80207f8 <_dtoa_r+0x6a0>
 8020858:	9a08      	ldr	r2, [sp, #32]
 802085a:	2a00      	cmp	r2, #0
 802085c:	f000 80d7 	beq.w	8020a0e <_dtoa_r+0x8b6>
 8020860:	9a06      	ldr	r2, [sp, #24]
 8020862:	2a01      	cmp	r2, #1
 8020864:	f300 80ba 	bgt.w	80209dc <_dtoa_r+0x884>
 8020868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802086a:	2a00      	cmp	r2, #0
 802086c:	f000 80b2 	beq.w	80209d4 <_dtoa_r+0x87c>
 8020870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020874:	9e07      	ldr	r6, [sp, #28]
 8020876:	9d04      	ldr	r5, [sp, #16]
 8020878:	9a04      	ldr	r2, [sp, #16]
 802087a:	441a      	add	r2, r3
 802087c:	9204      	str	r2, [sp, #16]
 802087e:	9a05      	ldr	r2, [sp, #20]
 8020880:	2101      	movs	r1, #1
 8020882:	441a      	add	r2, r3
 8020884:	4620      	mov	r0, r4
 8020886:	9205      	str	r2, [sp, #20]
 8020888:	f000 fba2 	bl	8020fd0 <__i2b>
 802088c:	4607      	mov	r7, r0
 802088e:	2d00      	cmp	r5, #0
 8020890:	dd0c      	ble.n	80208ac <_dtoa_r+0x754>
 8020892:	9b05      	ldr	r3, [sp, #20]
 8020894:	2b00      	cmp	r3, #0
 8020896:	dd09      	ble.n	80208ac <_dtoa_r+0x754>
 8020898:	42ab      	cmp	r3, r5
 802089a:	9a04      	ldr	r2, [sp, #16]
 802089c:	bfa8      	it	ge
 802089e:	462b      	movge	r3, r5
 80208a0:	1ad2      	subs	r2, r2, r3
 80208a2:	9204      	str	r2, [sp, #16]
 80208a4:	9a05      	ldr	r2, [sp, #20]
 80208a6:	1aed      	subs	r5, r5, r3
 80208a8:	1ad3      	subs	r3, r2, r3
 80208aa:	9305      	str	r3, [sp, #20]
 80208ac:	9b07      	ldr	r3, [sp, #28]
 80208ae:	b31b      	cbz	r3, 80208f8 <_dtoa_r+0x7a0>
 80208b0:	9b08      	ldr	r3, [sp, #32]
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	f000 80af 	beq.w	8020a16 <_dtoa_r+0x8be>
 80208b8:	2e00      	cmp	r6, #0
 80208ba:	dd13      	ble.n	80208e4 <_dtoa_r+0x78c>
 80208bc:	4639      	mov	r1, r7
 80208be:	4632      	mov	r2, r6
 80208c0:	4620      	mov	r0, r4
 80208c2:	f000 fc45 	bl	8021150 <__pow5mult>
 80208c6:	ee18 2a10 	vmov	r2, s16
 80208ca:	4601      	mov	r1, r0
 80208cc:	4607      	mov	r7, r0
 80208ce:	4620      	mov	r0, r4
 80208d0:	f000 fb94 	bl	8020ffc <__multiply>
 80208d4:	ee18 1a10 	vmov	r1, s16
 80208d8:	4680      	mov	r8, r0
 80208da:	4620      	mov	r0, r4
 80208dc:	f000 fac0 	bl	8020e60 <_Bfree>
 80208e0:	ee08 8a10 	vmov	s16, r8
 80208e4:	9b07      	ldr	r3, [sp, #28]
 80208e6:	1b9a      	subs	r2, r3, r6
 80208e8:	d006      	beq.n	80208f8 <_dtoa_r+0x7a0>
 80208ea:	ee18 1a10 	vmov	r1, s16
 80208ee:	4620      	mov	r0, r4
 80208f0:	f000 fc2e 	bl	8021150 <__pow5mult>
 80208f4:	ee08 0a10 	vmov	s16, r0
 80208f8:	2101      	movs	r1, #1
 80208fa:	4620      	mov	r0, r4
 80208fc:	f000 fb68 	bl	8020fd0 <__i2b>
 8020900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020902:	2b00      	cmp	r3, #0
 8020904:	4606      	mov	r6, r0
 8020906:	f340 8088 	ble.w	8020a1a <_dtoa_r+0x8c2>
 802090a:	461a      	mov	r2, r3
 802090c:	4601      	mov	r1, r0
 802090e:	4620      	mov	r0, r4
 8020910:	f000 fc1e 	bl	8021150 <__pow5mult>
 8020914:	9b06      	ldr	r3, [sp, #24]
 8020916:	2b01      	cmp	r3, #1
 8020918:	4606      	mov	r6, r0
 802091a:	f340 8081 	ble.w	8020a20 <_dtoa_r+0x8c8>
 802091e:	f04f 0800 	mov.w	r8, #0
 8020922:	6933      	ldr	r3, [r6, #16]
 8020924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020928:	6918      	ldr	r0, [r3, #16]
 802092a:	f000 fb01 	bl	8020f30 <__hi0bits>
 802092e:	f1c0 0020 	rsb	r0, r0, #32
 8020932:	9b05      	ldr	r3, [sp, #20]
 8020934:	4418      	add	r0, r3
 8020936:	f010 001f 	ands.w	r0, r0, #31
 802093a:	f000 8092 	beq.w	8020a62 <_dtoa_r+0x90a>
 802093e:	f1c0 0320 	rsb	r3, r0, #32
 8020942:	2b04      	cmp	r3, #4
 8020944:	f340 808a 	ble.w	8020a5c <_dtoa_r+0x904>
 8020948:	f1c0 001c 	rsb	r0, r0, #28
 802094c:	9b04      	ldr	r3, [sp, #16]
 802094e:	4403      	add	r3, r0
 8020950:	9304      	str	r3, [sp, #16]
 8020952:	9b05      	ldr	r3, [sp, #20]
 8020954:	4403      	add	r3, r0
 8020956:	4405      	add	r5, r0
 8020958:	9305      	str	r3, [sp, #20]
 802095a:	9b04      	ldr	r3, [sp, #16]
 802095c:	2b00      	cmp	r3, #0
 802095e:	dd07      	ble.n	8020970 <_dtoa_r+0x818>
 8020960:	ee18 1a10 	vmov	r1, s16
 8020964:	461a      	mov	r2, r3
 8020966:	4620      	mov	r0, r4
 8020968:	f000 fc4c 	bl	8021204 <__lshift>
 802096c:	ee08 0a10 	vmov	s16, r0
 8020970:	9b05      	ldr	r3, [sp, #20]
 8020972:	2b00      	cmp	r3, #0
 8020974:	dd05      	ble.n	8020982 <_dtoa_r+0x82a>
 8020976:	4631      	mov	r1, r6
 8020978:	461a      	mov	r2, r3
 802097a:	4620      	mov	r0, r4
 802097c:	f000 fc42 	bl	8021204 <__lshift>
 8020980:	4606      	mov	r6, r0
 8020982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020984:	2b00      	cmp	r3, #0
 8020986:	d06e      	beq.n	8020a66 <_dtoa_r+0x90e>
 8020988:	ee18 0a10 	vmov	r0, s16
 802098c:	4631      	mov	r1, r6
 802098e:	f000 fca9 	bl	80212e4 <__mcmp>
 8020992:	2800      	cmp	r0, #0
 8020994:	da67      	bge.n	8020a66 <_dtoa_r+0x90e>
 8020996:	9b00      	ldr	r3, [sp, #0]
 8020998:	3b01      	subs	r3, #1
 802099a:	ee18 1a10 	vmov	r1, s16
 802099e:	9300      	str	r3, [sp, #0]
 80209a0:	220a      	movs	r2, #10
 80209a2:	2300      	movs	r3, #0
 80209a4:	4620      	mov	r0, r4
 80209a6:	f000 fa7d 	bl	8020ea4 <__multadd>
 80209aa:	9b08      	ldr	r3, [sp, #32]
 80209ac:	ee08 0a10 	vmov	s16, r0
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	f000 81b1 	beq.w	8020d18 <_dtoa_r+0xbc0>
 80209b6:	2300      	movs	r3, #0
 80209b8:	4639      	mov	r1, r7
 80209ba:	220a      	movs	r2, #10
 80209bc:	4620      	mov	r0, r4
 80209be:	f000 fa71 	bl	8020ea4 <__multadd>
 80209c2:	9b02      	ldr	r3, [sp, #8]
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	4607      	mov	r7, r0
 80209c8:	f300 808e 	bgt.w	8020ae8 <_dtoa_r+0x990>
 80209cc:	9b06      	ldr	r3, [sp, #24]
 80209ce:	2b02      	cmp	r3, #2
 80209d0:	dc51      	bgt.n	8020a76 <_dtoa_r+0x91e>
 80209d2:	e089      	b.n	8020ae8 <_dtoa_r+0x990>
 80209d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80209d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80209da:	e74b      	b.n	8020874 <_dtoa_r+0x71c>
 80209dc:	9b03      	ldr	r3, [sp, #12]
 80209de:	1e5e      	subs	r6, r3, #1
 80209e0:	9b07      	ldr	r3, [sp, #28]
 80209e2:	42b3      	cmp	r3, r6
 80209e4:	bfbf      	itttt	lt
 80209e6:	9b07      	ldrlt	r3, [sp, #28]
 80209e8:	9607      	strlt	r6, [sp, #28]
 80209ea:	1af2      	sublt	r2, r6, r3
 80209ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80209ee:	bfb6      	itet	lt
 80209f0:	189b      	addlt	r3, r3, r2
 80209f2:	1b9e      	subge	r6, r3, r6
 80209f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80209f6:	9b03      	ldr	r3, [sp, #12]
 80209f8:	bfb8      	it	lt
 80209fa:	2600      	movlt	r6, #0
 80209fc:	2b00      	cmp	r3, #0
 80209fe:	bfb7      	itett	lt
 8020a00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8020a04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020a08:	1a9d      	sublt	r5, r3, r2
 8020a0a:	2300      	movlt	r3, #0
 8020a0c:	e734      	b.n	8020878 <_dtoa_r+0x720>
 8020a0e:	9e07      	ldr	r6, [sp, #28]
 8020a10:	9d04      	ldr	r5, [sp, #16]
 8020a12:	9f08      	ldr	r7, [sp, #32]
 8020a14:	e73b      	b.n	802088e <_dtoa_r+0x736>
 8020a16:	9a07      	ldr	r2, [sp, #28]
 8020a18:	e767      	b.n	80208ea <_dtoa_r+0x792>
 8020a1a:	9b06      	ldr	r3, [sp, #24]
 8020a1c:	2b01      	cmp	r3, #1
 8020a1e:	dc18      	bgt.n	8020a52 <_dtoa_r+0x8fa>
 8020a20:	f1ba 0f00 	cmp.w	sl, #0
 8020a24:	d115      	bne.n	8020a52 <_dtoa_r+0x8fa>
 8020a26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020a2a:	b993      	cbnz	r3, 8020a52 <_dtoa_r+0x8fa>
 8020a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020a30:	0d1b      	lsrs	r3, r3, #20
 8020a32:	051b      	lsls	r3, r3, #20
 8020a34:	b183      	cbz	r3, 8020a58 <_dtoa_r+0x900>
 8020a36:	9b04      	ldr	r3, [sp, #16]
 8020a38:	3301      	adds	r3, #1
 8020a3a:	9304      	str	r3, [sp, #16]
 8020a3c:	9b05      	ldr	r3, [sp, #20]
 8020a3e:	3301      	adds	r3, #1
 8020a40:	9305      	str	r3, [sp, #20]
 8020a42:	f04f 0801 	mov.w	r8, #1
 8020a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	f47f af6a 	bne.w	8020922 <_dtoa_r+0x7ca>
 8020a4e:	2001      	movs	r0, #1
 8020a50:	e76f      	b.n	8020932 <_dtoa_r+0x7da>
 8020a52:	f04f 0800 	mov.w	r8, #0
 8020a56:	e7f6      	b.n	8020a46 <_dtoa_r+0x8ee>
 8020a58:	4698      	mov	r8, r3
 8020a5a:	e7f4      	b.n	8020a46 <_dtoa_r+0x8ee>
 8020a5c:	f43f af7d 	beq.w	802095a <_dtoa_r+0x802>
 8020a60:	4618      	mov	r0, r3
 8020a62:	301c      	adds	r0, #28
 8020a64:	e772      	b.n	802094c <_dtoa_r+0x7f4>
 8020a66:	9b03      	ldr	r3, [sp, #12]
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	dc37      	bgt.n	8020adc <_dtoa_r+0x984>
 8020a6c:	9b06      	ldr	r3, [sp, #24]
 8020a6e:	2b02      	cmp	r3, #2
 8020a70:	dd34      	ble.n	8020adc <_dtoa_r+0x984>
 8020a72:	9b03      	ldr	r3, [sp, #12]
 8020a74:	9302      	str	r3, [sp, #8]
 8020a76:	9b02      	ldr	r3, [sp, #8]
 8020a78:	b96b      	cbnz	r3, 8020a96 <_dtoa_r+0x93e>
 8020a7a:	4631      	mov	r1, r6
 8020a7c:	2205      	movs	r2, #5
 8020a7e:	4620      	mov	r0, r4
 8020a80:	f000 fa10 	bl	8020ea4 <__multadd>
 8020a84:	4601      	mov	r1, r0
 8020a86:	4606      	mov	r6, r0
 8020a88:	ee18 0a10 	vmov	r0, s16
 8020a8c:	f000 fc2a 	bl	80212e4 <__mcmp>
 8020a90:	2800      	cmp	r0, #0
 8020a92:	f73f adbb 	bgt.w	802060c <_dtoa_r+0x4b4>
 8020a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a98:	9d01      	ldr	r5, [sp, #4]
 8020a9a:	43db      	mvns	r3, r3
 8020a9c:	9300      	str	r3, [sp, #0]
 8020a9e:	f04f 0800 	mov.w	r8, #0
 8020aa2:	4631      	mov	r1, r6
 8020aa4:	4620      	mov	r0, r4
 8020aa6:	f000 f9db 	bl	8020e60 <_Bfree>
 8020aaa:	2f00      	cmp	r7, #0
 8020aac:	f43f aea4 	beq.w	80207f8 <_dtoa_r+0x6a0>
 8020ab0:	f1b8 0f00 	cmp.w	r8, #0
 8020ab4:	d005      	beq.n	8020ac2 <_dtoa_r+0x96a>
 8020ab6:	45b8      	cmp	r8, r7
 8020ab8:	d003      	beq.n	8020ac2 <_dtoa_r+0x96a>
 8020aba:	4641      	mov	r1, r8
 8020abc:	4620      	mov	r0, r4
 8020abe:	f000 f9cf 	bl	8020e60 <_Bfree>
 8020ac2:	4639      	mov	r1, r7
 8020ac4:	4620      	mov	r0, r4
 8020ac6:	f000 f9cb 	bl	8020e60 <_Bfree>
 8020aca:	e695      	b.n	80207f8 <_dtoa_r+0x6a0>
 8020acc:	2600      	movs	r6, #0
 8020ace:	4637      	mov	r7, r6
 8020ad0:	e7e1      	b.n	8020a96 <_dtoa_r+0x93e>
 8020ad2:	9700      	str	r7, [sp, #0]
 8020ad4:	4637      	mov	r7, r6
 8020ad6:	e599      	b.n	802060c <_dtoa_r+0x4b4>
 8020ad8:	40240000 	.word	0x40240000
 8020adc:	9b08      	ldr	r3, [sp, #32]
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	f000 80ca 	beq.w	8020c78 <_dtoa_r+0xb20>
 8020ae4:	9b03      	ldr	r3, [sp, #12]
 8020ae6:	9302      	str	r3, [sp, #8]
 8020ae8:	2d00      	cmp	r5, #0
 8020aea:	dd05      	ble.n	8020af8 <_dtoa_r+0x9a0>
 8020aec:	4639      	mov	r1, r7
 8020aee:	462a      	mov	r2, r5
 8020af0:	4620      	mov	r0, r4
 8020af2:	f000 fb87 	bl	8021204 <__lshift>
 8020af6:	4607      	mov	r7, r0
 8020af8:	f1b8 0f00 	cmp.w	r8, #0
 8020afc:	d05b      	beq.n	8020bb6 <_dtoa_r+0xa5e>
 8020afe:	6879      	ldr	r1, [r7, #4]
 8020b00:	4620      	mov	r0, r4
 8020b02:	f000 f96d 	bl	8020de0 <_Balloc>
 8020b06:	4605      	mov	r5, r0
 8020b08:	b928      	cbnz	r0, 8020b16 <_dtoa_r+0x9be>
 8020b0a:	4b87      	ldr	r3, [pc, #540]	; (8020d28 <_dtoa_r+0xbd0>)
 8020b0c:	4602      	mov	r2, r0
 8020b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020b12:	f7ff bb3b 	b.w	802018c <_dtoa_r+0x34>
 8020b16:	693a      	ldr	r2, [r7, #16]
 8020b18:	3202      	adds	r2, #2
 8020b1a:	0092      	lsls	r2, r2, #2
 8020b1c:	f107 010c 	add.w	r1, r7, #12
 8020b20:	300c      	adds	r0, #12
 8020b22:	f7fe fad1 	bl	801f0c8 <memcpy>
 8020b26:	2201      	movs	r2, #1
 8020b28:	4629      	mov	r1, r5
 8020b2a:	4620      	mov	r0, r4
 8020b2c:	f000 fb6a 	bl	8021204 <__lshift>
 8020b30:	9b01      	ldr	r3, [sp, #4]
 8020b32:	f103 0901 	add.w	r9, r3, #1
 8020b36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8020b3a:	4413      	add	r3, r2
 8020b3c:	9305      	str	r3, [sp, #20]
 8020b3e:	f00a 0301 	and.w	r3, sl, #1
 8020b42:	46b8      	mov	r8, r7
 8020b44:	9304      	str	r3, [sp, #16]
 8020b46:	4607      	mov	r7, r0
 8020b48:	4631      	mov	r1, r6
 8020b4a:	ee18 0a10 	vmov	r0, s16
 8020b4e:	f7ff fa75 	bl	802003c <quorem>
 8020b52:	4641      	mov	r1, r8
 8020b54:	9002      	str	r0, [sp, #8]
 8020b56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020b5a:	ee18 0a10 	vmov	r0, s16
 8020b5e:	f000 fbc1 	bl	80212e4 <__mcmp>
 8020b62:	463a      	mov	r2, r7
 8020b64:	9003      	str	r0, [sp, #12]
 8020b66:	4631      	mov	r1, r6
 8020b68:	4620      	mov	r0, r4
 8020b6a:	f000 fbd7 	bl	802131c <__mdiff>
 8020b6e:	68c2      	ldr	r2, [r0, #12]
 8020b70:	f109 3bff 	add.w	fp, r9, #4294967295
 8020b74:	4605      	mov	r5, r0
 8020b76:	bb02      	cbnz	r2, 8020bba <_dtoa_r+0xa62>
 8020b78:	4601      	mov	r1, r0
 8020b7a:	ee18 0a10 	vmov	r0, s16
 8020b7e:	f000 fbb1 	bl	80212e4 <__mcmp>
 8020b82:	4602      	mov	r2, r0
 8020b84:	4629      	mov	r1, r5
 8020b86:	4620      	mov	r0, r4
 8020b88:	9207      	str	r2, [sp, #28]
 8020b8a:	f000 f969 	bl	8020e60 <_Bfree>
 8020b8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020b92:	ea43 0102 	orr.w	r1, r3, r2
 8020b96:	9b04      	ldr	r3, [sp, #16]
 8020b98:	430b      	orrs	r3, r1
 8020b9a:	464d      	mov	r5, r9
 8020b9c:	d10f      	bne.n	8020bbe <_dtoa_r+0xa66>
 8020b9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020ba2:	d02a      	beq.n	8020bfa <_dtoa_r+0xaa2>
 8020ba4:	9b03      	ldr	r3, [sp, #12]
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	dd02      	ble.n	8020bb0 <_dtoa_r+0xa58>
 8020baa:	9b02      	ldr	r3, [sp, #8]
 8020bac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020bb0:	f88b a000 	strb.w	sl, [fp]
 8020bb4:	e775      	b.n	8020aa2 <_dtoa_r+0x94a>
 8020bb6:	4638      	mov	r0, r7
 8020bb8:	e7ba      	b.n	8020b30 <_dtoa_r+0x9d8>
 8020bba:	2201      	movs	r2, #1
 8020bbc:	e7e2      	b.n	8020b84 <_dtoa_r+0xa2c>
 8020bbe:	9b03      	ldr	r3, [sp, #12]
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	db04      	blt.n	8020bce <_dtoa_r+0xa76>
 8020bc4:	9906      	ldr	r1, [sp, #24]
 8020bc6:	430b      	orrs	r3, r1
 8020bc8:	9904      	ldr	r1, [sp, #16]
 8020bca:	430b      	orrs	r3, r1
 8020bcc:	d122      	bne.n	8020c14 <_dtoa_r+0xabc>
 8020bce:	2a00      	cmp	r2, #0
 8020bd0:	ddee      	ble.n	8020bb0 <_dtoa_r+0xa58>
 8020bd2:	ee18 1a10 	vmov	r1, s16
 8020bd6:	2201      	movs	r2, #1
 8020bd8:	4620      	mov	r0, r4
 8020bda:	f000 fb13 	bl	8021204 <__lshift>
 8020bde:	4631      	mov	r1, r6
 8020be0:	ee08 0a10 	vmov	s16, r0
 8020be4:	f000 fb7e 	bl	80212e4 <__mcmp>
 8020be8:	2800      	cmp	r0, #0
 8020bea:	dc03      	bgt.n	8020bf4 <_dtoa_r+0xa9c>
 8020bec:	d1e0      	bne.n	8020bb0 <_dtoa_r+0xa58>
 8020bee:	f01a 0f01 	tst.w	sl, #1
 8020bf2:	d0dd      	beq.n	8020bb0 <_dtoa_r+0xa58>
 8020bf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020bf8:	d1d7      	bne.n	8020baa <_dtoa_r+0xa52>
 8020bfa:	2339      	movs	r3, #57	; 0x39
 8020bfc:	f88b 3000 	strb.w	r3, [fp]
 8020c00:	462b      	mov	r3, r5
 8020c02:	461d      	mov	r5, r3
 8020c04:	3b01      	subs	r3, #1
 8020c06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020c0a:	2a39      	cmp	r2, #57	; 0x39
 8020c0c:	d071      	beq.n	8020cf2 <_dtoa_r+0xb9a>
 8020c0e:	3201      	adds	r2, #1
 8020c10:	701a      	strb	r2, [r3, #0]
 8020c12:	e746      	b.n	8020aa2 <_dtoa_r+0x94a>
 8020c14:	2a00      	cmp	r2, #0
 8020c16:	dd07      	ble.n	8020c28 <_dtoa_r+0xad0>
 8020c18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020c1c:	d0ed      	beq.n	8020bfa <_dtoa_r+0xaa2>
 8020c1e:	f10a 0301 	add.w	r3, sl, #1
 8020c22:	f88b 3000 	strb.w	r3, [fp]
 8020c26:	e73c      	b.n	8020aa2 <_dtoa_r+0x94a>
 8020c28:	9b05      	ldr	r3, [sp, #20]
 8020c2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8020c2e:	4599      	cmp	r9, r3
 8020c30:	d047      	beq.n	8020cc2 <_dtoa_r+0xb6a>
 8020c32:	ee18 1a10 	vmov	r1, s16
 8020c36:	2300      	movs	r3, #0
 8020c38:	220a      	movs	r2, #10
 8020c3a:	4620      	mov	r0, r4
 8020c3c:	f000 f932 	bl	8020ea4 <__multadd>
 8020c40:	45b8      	cmp	r8, r7
 8020c42:	ee08 0a10 	vmov	s16, r0
 8020c46:	f04f 0300 	mov.w	r3, #0
 8020c4a:	f04f 020a 	mov.w	r2, #10
 8020c4e:	4641      	mov	r1, r8
 8020c50:	4620      	mov	r0, r4
 8020c52:	d106      	bne.n	8020c62 <_dtoa_r+0xb0a>
 8020c54:	f000 f926 	bl	8020ea4 <__multadd>
 8020c58:	4680      	mov	r8, r0
 8020c5a:	4607      	mov	r7, r0
 8020c5c:	f109 0901 	add.w	r9, r9, #1
 8020c60:	e772      	b.n	8020b48 <_dtoa_r+0x9f0>
 8020c62:	f000 f91f 	bl	8020ea4 <__multadd>
 8020c66:	4639      	mov	r1, r7
 8020c68:	4680      	mov	r8, r0
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	220a      	movs	r2, #10
 8020c6e:	4620      	mov	r0, r4
 8020c70:	f000 f918 	bl	8020ea4 <__multadd>
 8020c74:	4607      	mov	r7, r0
 8020c76:	e7f1      	b.n	8020c5c <_dtoa_r+0xb04>
 8020c78:	9b03      	ldr	r3, [sp, #12]
 8020c7a:	9302      	str	r3, [sp, #8]
 8020c7c:	9d01      	ldr	r5, [sp, #4]
 8020c7e:	ee18 0a10 	vmov	r0, s16
 8020c82:	4631      	mov	r1, r6
 8020c84:	f7ff f9da 	bl	802003c <quorem>
 8020c88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020c8c:	9b01      	ldr	r3, [sp, #4]
 8020c8e:	f805 ab01 	strb.w	sl, [r5], #1
 8020c92:	1aea      	subs	r2, r5, r3
 8020c94:	9b02      	ldr	r3, [sp, #8]
 8020c96:	4293      	cmp	r3, r2
 8020c98:	dd09      	ble.n	8020cae <_dtoa_r+0xb56>
 8020c9a:	ee18 1a10 	vmov	r1, s16
 8020c9e:	2300      	movs	r3, #0
 8020ca0:	220a      	movs	r2, #10
 8020ca2:	4620      	mov	r0, r4
 8020ca4:	f000 f8fe 	bl	8020ea4 <__multadd>
 8020ca8:	ee08 0a10 	vmov	s16, r0
 8020cac:	e7e7      	b.n	8020c7e <_dtoa_r+0xb26>
 8020cae:	9b02      	ldr	r3, [sp, #8]
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	bfc8      	it	gt
 8020cb4:	461d      	movgt	r5, r3
 8020cb6:	9b01      	ldr	r3, [sp, #4]
 8020cb8:	bfd8      	it	le
 8020cba:	2501      	movle	r5, #1
 8020cbc:	441d      	add	r5, r3
 8020cbe:	f04f 0800 	mov.w	r8, #0
 8020cc2:	ee18 1a10 	vmov	r1, s16
 8020cc6:	2201      	movs	r2, #1
 8020cc8:	4620      	mov	r0, r4
 8020cca:	f000 fa9b 	bl	8021204 <__lshift>
 8020cce:	4631      	mov	r1, r6
 8020cd0:	ee08 0a10 	vmov	s16, r0
 8020cd4:	f000 fb06 	bl	80212e4 <__mcmp>
 8020cd8:	2800      	cmp	r0, #0
 8020cda:	dc91      	bgt.n	8020c00 <_dtoa_r+0xaa8>
 8020cdc:	d102      	bne.n	8020ce4 <_dtoa_r+0xb8c>
 8020cde:	f01a 0f01 	tst.w	sl, #1
 8020ce2:	d18d      	bne.n	8020c00 <_dtoa_r+0xaa8>
 8020ce4:	462b      	mov	r3, r5
 8020ce6:	461d      	mov	r5, r3
 8020ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020cec:	2a30      	cmp	r2, #48	; 0x30
 8020cee:	d0fa      	beq.n	8020ce6 <_dtoa_r+0xb8e>
 8020cf0:	e6d7      	b.n	8020aa2 <_dtoa_r+0x94a>
 8020cf2:	9a01      	ldr	r2, [sp, #4]
 8020cf4:	429a      	cmp	r2, r3
 8020cf6:	d184      	bne.n	8020c02 <_dtoa_r+0xaaa>
 8020cf8:	9b00      	ldr	r3, [sp, #0]
 8020cfa:	3301      	adds	r3, #1
 8020cfc:	9300      	str	r3, [sp, #0]
 8020cfe:	2331      	movs	r3, #49	; 0x31
 8020d00:	7013      	strb	r3, [r2, #0]
 8020d02:	e6ce      	b.n	8020aa2 <_dtoa_r+0x94a>
 8020d04:	4b09      	ldr	r3, [pc, #36]	; (8020d2c <_dtoa_r+0xbd4>)
 8020d06:	f7ff ba95 	b.w	8020234 <_dtoa_r+0xdc>
 8020d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d0c:	2b00      	cmp	r3, #0
 8020d0e:	f47f aa6e 	bne.w	80201ee <_dtoa_r+0x96>
 8020d12:	4b07      	ldr	r3, [pc, #28]	; (8020d30 <_dtoa_r+0xbd8>)
 8020d14:	f7ff ba8e 	b.w	8020234 <_dtoa_r+0xdc>
 8020d18:	9b02      	ldr	r3, [sp, #8]
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	dcae      	bgt.n	8020c7c <_dtoa_r+0xb24>
 8020d1e:	9b06      	ldr	r3, [sp, #24]
 8020d20:	2b02      	cmp	r3, #2
 8020d22:	f73f aea8 	bgt.w	8020a76 <_dtoa_r+0x91e>
 8020d26:	e7a9      	b.n	8020c7c <_dtoa_r+0xb24>
 8020d28:	08022c0f 	.word	0x08022c0f
 8020d2c:	08022b6c 	.word	0x08022b6c
 8020d30:	08022b90 	.word	0x08022b90

08020d34 <_fstat_r>:
 8020d34:	b538      	push	{r3, r4, r5, lr}
 8020d36:	4d07      	ldr	r5, [pc, #28]	; (8020d54 <_fstat_r+0x20>)
 8020d38:	2300      	movs	r3, #0
 8020d3a:	4604      	mov	r4, r0
 8020d3c:	4608      	mov	r0, r1
 8020d3e:	4611      	mov	r1, r2
 8020d40:	602b      	str	r3, [r5, #0]
 8020d42:	f7e2 fd8a 	bl	800385a <_fstat>
 8020d46:	1c43      	adds	r3, r0, #1
 8020d48:	d102      	bne.n	8020d50 <_fstat_r+0x1c>
 8020d4a:	682b      	ldr	r3, [r5, #0]
 8020d4c:	b103      	cbz	r3, 8020d50 <_fstat_r+0x1c>
 8020d4e:	6023      	str	r3, [r4, #0]
 8020d50:	bd38      	pop	{r3, r4, r5, pc}
 8020d52:	bf00      	nop
 8020d54:	200099b8 	.word	0x200099b8

08020d58 <_isatty_r>:
 8020d58:	b538      	push	{r3, r4, r5, lr}
 8020d5a:	4d06      	ldr	r5, [pc, #24]	; (8020d74 <_isatty_r+0x1c>)
 8020d5c:	2300      	movs	r3, #0
 8020d5e:	4604      	mov	r4, r0
 8020d60:	4608      	mov	r0, r1
 8020d62:	602b      	str	r3, [r5, #0]
 8020d64:	f7e2 fd89 	bl	800387a <_isatty>
 8020d68:	1c43      	adds	r3, r0, #1
 8020d6a:	d102      	bne.n	8020d72 <_isatty_r+0x1a>
 8020d6c:	682b      	ldr	r3, [r5, #0]
 8020d6e:	b103      	cbz	r3, 8020d72 <_isatty_r+0x1a>
 8020d70:	6023      	str	r3, [r4, #0]
 8020d72:	bd38      	pop	{r3, r4, r5, pc}
 8020d74:	200099b8 	.word	0x200099b8

08020d78 <_localeconv_r>:
 8020d78:	4800      	ldr	r0, [pc, #0]	; (8020d7c <_localeconv_r+0x4>)
 8020d7a:	4770      	bx	lr
 8020d7c:	200001e0 	.word	0x200001e0

08020d80 <_lseek_r>:
 8020d80:	b538      	push	{r3, r4, r5, lr}
 8020d82:	4d07      	ldr	r5, [pc, #28]	; (8020da0 <_lseek_r+0x20>)
 8020d84:	4604      	mov	r4, r0
 8020d86:	4608      	mov	r0, r1
 8020d88:	4611      	mov	r1, r2
 8020d8a:	2200      	movs	r2, #0
 8020d8c:	602a      	str	r2, [r5, #0]
 8020d8e:	461a      	mov	r2, r3
 8020d90:	f7e2 fd7e 	bl	8003890 <_lseek>
 8020d94:	1c43      	adds	r3, r0, #1
 8020d96:	d102      	bne.n	8020d9e <_lseek_r+0x1e>
 8020d98:	682b      	ldr	r3, [r5, #0]
 8020d9a:	b103      	cbz	r3, 8020d9e <_lseek_r+0x1e>
 8020d9c:	6023      	str	r3, [r4, #0]
 8020d9e:	bd38      	pop	{r3, r4, r5, pc}
 8020da0:	200099b8 	.word	0x200099b8

08020da4 <__ascii_mbtowc>:
 8020da4:	b082      	sub	sp, #8
 8020da6:	b901      	cbnz	r1, 8020daa <__ascii_mbtowc+0x6>
 8020da8:	a901      	add	r1, sp, #4
 8020daa:	b142      	cbz	r2, 8020dbe <__ascii_mbtowc+0x1a>
 8020dac:	b14b      	cbz	r3, 8020dc2 <__ascii_mbtowc+0x1e>
 8020dae:	7813      	ldrb	r3, [r2, #0]
 8020db0:	600b      	str	r3, [r1, #0]
 8020db2:	7812      	ldrb	r2, [r2, #0]
 8020db4:	1e10      	subs	r0, r2, #0
 8020db6:	bf18      	it	ne
 8020db8:	2001      	movne	r0, #1
 8020dba:	b002      	add	sp, #8
 8020dbc:	4770      	bx	lr
 8020dbe:	4610      	mov	r0, r2
 8020dc0:	e7fb      	b.n	8020dba <__ascii_mbtowc+0x16>
 8020dc2:	f06f 0001 	mvn.w	r0, #1
 8020dc6:	e7f8      	b.n	8020dba <__ascii_mbtowc+0x16>

08020dc8 <__malloc_lock>:
 8020dc8:	4801      	ldr	r0, [pc, #4]	; (8020dd0 <__malloc_lock+0x8>)
 8020dca:	f7fe b906 	b.w	801efda <__retarget_lock_acquire_recursive>
 8020dce:	bf00      	nop
 8020dd0:	200099ab 	.word	0x200099ab

08020dd4 <__malloc_unlock>:
 8020dd4:	4801      	ldr	r0, [pc, #4]	; (8020ddc <__malloc_unlock+0x8>)
 8020dd6:	f7fe b901 	b.w	801efdc <__retarget_lock_release_recursive>
 8020dda:	bf00      	nop
 8020ddc:	200099ab 	.word	0x200099ab

08020de0 <_Balloc>:
 8020de0:	b570      	push	{r4, r5, r6, lr}
 8020de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020de4:	4604      	mov	r4, r0
 8020de6:	460d      	mov	r5, r1
 8020de8:	b976      	cbnz	r6, 8020e08 <_Balloc+0x28>
 8020dea:	2010      	movs	r0, #16
 8020dec:	f7fe f95c 	bl	801f0a8 <malloc>
 8020df0:	4602      	mov	r2, r0
 8020df2:	6260      	str	r0, [r4, #36]	; 0x24
 8020df4:	b920      	cbnz	r0, 8020e00 <_Balloc+0x20>
 8020df6:	4b18      	ldr	r3, [pc, #96]	; (8020e58 <_Balloc+0x78>)
 8020df8:	4818      	ldr	r0, [pc, #96]	; (8020e5c <_Balloc+0x7c>)
 8020dfa:	2166      	movs	r1, #102	; 0x66
 8020dfc:	f000 fe8e 	bl	8021b1c <__assert_func>
 8020e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020e04:	6006      	str	r6, [r0, #0]
 8020e06:	60c6      	str	r6, [r0, #12]
 8020e08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020e0a:	68f3      	ldr	r3, [r6, #12]
 8020e0c:	b183      	cbz	r3, 8020e30 <_Balloc+0x50>
 8020e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020e10:	68db      	ldr	r3, [r3, #12]
 8020e12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020e16:	b9b8      	cbnz	r0, 8020e48 <_Balloc+0x68>
 8020e18:	2101      	movs	r1, #1
 8020e1a:	fa01 f605 	lsl.w	r6, r1, r5
 8020e1e:	1d72      	adds	r2, r6, #5
 8020e20:	0092      	lsls	r2, r2, #2
 8020e22:	4620      	mov	r0, r4
 8020e24:	f000 fb60 	bl	80214e8 <_calloc_r>
 8020e28:	b160      	cbz	r0, 8020e44 <_Balloc+0x64>
 8020e2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020e2e:	e00e      	b.n	8020e4e <_Balloc+0x6e>
 8020e30:	2221      	movs	r2, #33	; 0x21
 8020e32:	2104      	movs	r1, #4
 8020e34:	4620      	mov	r0, r4
 8020e36:	f000 fb57 	bl	80214e8 <_calloc_r>
 8020e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020e3c:	60f0      	str	r0, [r6, #12]
 8020e3e:	68db      	ldr	r3, [r3, #12]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d1e4      	bne.n	8020e0e <_Balloc+0x2e>
 8020e44:	2000      	movs	r0, #0
 8020e46:	bd70      	pop	{r4, r5, r6, pc}
 8020e48:	6802      	ldr	r2, [r0, #0]
 8020e4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020e4e:	2300      	movs	r3, #0
 8020e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020e54:	e7f7      	b.n	8020e46 <_Balloc+0x66>
 8020e56:	bf00      	nop
 8020e58:	08022b9d 	.word	0x08022b9d
 8020e5c:	08022c2a 	.word	0x08022c2a

08020e60 <_Bfree>:
 8020e60:	b570      	push	{r4, r5, r6, lr}
 8020e62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020e64:	4605      	mov	r5, r0
 8020e66:	460c      	mov	r4, r1
 8020e68:	b976      	cbnz	r6, 8020e88 <_Bfree+0x28>
 8020e6a:	2010      	movs	r0, #16
 8020e6c:	f7fe f91c 	bl	801f0a8 <malloc>
 8020e70:	4602      	mov	r2, r0
 8020e72:	6268      	str	r0, [r5, #36]	; 0x24
 8020e74:	b920      	cbnz	r0, 8020e80 <_Bfree+0x20>
 8020e76:	4b09      	ldr	r3, [pc, #36]	; (8020e9c <_Bfree+0x3c>)
 8020e78:	4809      	ldr	r0, [pc, #36]	; (8020ea0 <_Bfree+0x40>)
 8020e7a:	218a      	movs	r1, #138	; 0x8a
 8020e7c:	f000 fe4e 	bl	8021b1c <__assert_func>
 8020e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020e84:	6006      	str	r6, [r0, #0]
 8020e86:	60c6      	str	r6, [r0, #12]
 8020e88:	b13c      	cbz	r4, 8020e9a <_Bfree+0x3a>
 8020e8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020e8c:	6862      	ldr	r2, [r4, #4]
 8020e8e:	68db      	ldr	r3, [r3, #12]
 8020e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020e94:	6021      	str	r1, [r4, #0]
 8020e96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020e9a:	bd70      	pop	{r4, r5, r6, pc}
 8020e9c:	08022b9d 	.word	0x08022b9d
 8020ea0:	08022c2a 	.word	0x08022c2a

08020ea4 <__multadd>:
 8020ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ea8:	690d      	ldr	r5, [r1, #16]
 8020eaa:	4607      	mov	r7, r0
 8020eac:	460c      	mov	r4, r1
 8020eae:	461e      	mov	r6, r3
 8020eb0:	f101 0c14 	add.w	ip, r1, #20
 8020eb4:	2000      	movs	r0, #0
 8020eb6:	f8dc 3000 	ldr.w	r3, [ip]
 8020eba:	b299      	uxth	r1, r3
 8020ebc:	fb02 6101 	mla	r1, r2, r1, r6
 8020ec0:	0c1e      	lsrs	r6, r3, #16
 8020ec2:	0c0b      	lsrs	r3, r1, #16
 8020ec4:	fb02 3306 	mla	r3, r2, r6, r3
 8020ec8:	b289      	uxth	r1, r1
 8020eca:	3001      	adds	r0, #1
 8020ecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020ed0:	4285      	cmp	r5, r0
 8020ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8020ed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020eda:	dcec      	bgt.n	8020eb6 <__multadd+0x12>
 8020edc:	b30e      	cbz	r6, 8020f22 <__multadd+0x7e>
 8020ede:	68a3      	ldr	r3, [r4, #8]
 8020ee0:	42ab      	cmp	r3, r5
 8020ee2:	dc19      	bgt.n	8020f18 <__multadd+0x74>
 8020ee4:	6861      	ldr	r1, [r4, #4]
 8020ee6:	4638      	mov	r0, r7
 8020ee8:	3101      	adds	r1, #1
 8020eea:	f7ff ff79 	bl	8020de0 <_Balloc>
 8020eee:	4680      	mov	r8, r0
 8020ef0:	b928      	cbnz	r0, 8020efe <__multadd+0x5a>
 8020ef2:	4602      	mov	r2, r0
 8020ef4:	4b0c      	ldr	r3, [pc, #48]	; (8020f28 <__multadd+0x84>)
 8020ef6:	480d      	ldr	r0, [pc, #52]	; (8020f2c <__multadd+0x88>)
 8020ef8:	21b5      	movs	r1, #181	; 0xb5
 8020efa:	f000 fe0f 	bl	8021b1c <__assert_func>
 8020efe:	6922      	ldr	r2, [r4, #16]
 8020f00:	3202      	adds	r2, #2
 8020f02:	f104 010c 	add.w	r1, r4, #12
 8020f06:	0092      	lsls	r2, r2, #2
 8020f08:	300c      	adds	r0, #12
 8020f0a:	f7fe f8dd 	bl	801f0c8 <memcpy>
 8020f0e:	4621      	mov	r1, r4
 8020f10:	4638      	mov	r0, r7
 8020f12:	f7ff ffa5 	bl	8020e60 <_Bfree>
 8020f16:	4644      	mov	r4, r8
 8020f18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020f1c:	3501      	adds	r5, #1
 8020f1e:	615e      	str	r6, [r3, #20]
 8020f20:	6125      	str	r5, [r4, #16]
 8020f22:	4620      	mov	r0, r4
 8020f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f28:	08022c0f 	.word	0x08022c0f
 8020f2c:	08022c2a 	.word	0x08022c2a

08020f30 <__hi0bits>:
 8020f30:	0c03      	lsrs	r3, r0, #16
 8020f32:	041b      	lsls	r3, r3, #16
 8020f34:	b9d3      	cbnz	r3, 8020f6c <__hi0bits+0x3c>
 8020f36:	0400      	lsls	r0, r0, #16
 8020f38:	2310      	movs	r3, #16
 8020f3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020f3e:	bf04      	itt	eq
 8020f40:	0200      	lsleq	r0, r0, #8
 8020f42:	3308      	addeq	r3, #8
 8020f44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020f48:	bf04      	itt	eq
 8020f4a:	0100      	lsleq	r0, r0, #4
 8020f4c:	3304      	addeq	r3, #4
 8020f4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020f52:	bf04      	itt	eq
 8020f54:	0080      	lsleq	r0, r0, #2
 8020f56:	3302      	addeq	r3, #2
 8020f58:	2800      	cmp	r0, #0
 8020f5a:	db05      	blt.n	8020f68 <__hi0bits+0x38>
 8020f5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020f60:	f103 0301 	add.w	r3, r3, #1
 8020f64:	bf08      	it	eq
 8020f66:	2320      	moveq	r3, #32
 8020f68:	4618      	mov	r0, r3
 8020f6a:	4770      	bx	lr
 8020f6c:	2300      	movs	r3, #0
 8020f6e:	e7e4      	b.n	8020f3a <__hi0bits+0xa>

08020f70 <__lo0bits>:
 8020f70:	6803      	ldr	r3, [r0, #0]
 8020f72:	f013 0207 	ands.w	r2, r3, #7
 8020f76:	4601      	mov	r1, r0
 8020f78:	d00b      	beq.n	8020f92 <__lo0bits+0x22>
 8020f7a:	07da      	lsls	r2, r3, #31
 8020f7c:	d423      	bmi.n	8020fc6 <__lo0bits+0x56>
 8020f7e:	0798      	lsls	r0, r3, #30
 8020f80:	bf49      	itett	mi
 8020f82:	085b      	lsrmi	r3, r3, #1
 8020f84:	089b      	lsrpl	r3, r3, #2
 8020f86:	2001      	movmi	r0, #1
 8020f88:	600b      	strmi	r3, [r1, #0]
 8020f8a:	bf5c      	itt	pl
 8020f8c:	600b      	strpl	r3, [r1, #0]
 8020f8e:	2002      	movpl	r0, #2
 8020f90:	4770      	bx	lr
 8020f92:	b298      	uxth	r0, r3
 8020f94:	b9a8      	cbnz	r0, 8020fc2 <__lo0bits+0x52>
 8020f96:	0c1b      	lsrs	r3, r3, #16
 8020f98:	2010      	movs	r0, #16
 8020f9a:	b2da      	uxtb	r2, r3
 8020f9c:	b90a      	cbnz	r2, 8020fa2 <__lo0bits+0x32>
 8020f9e:	3008      	adds	r0, #8
 8020fa0:	0a1b      	lsrs	r3, r3, #8
 8020fa2:	071a      	lsls	r2, r3, #28
 8020fa4:	bf04      	itt	eq
 8020fa6:	091b      	lsreq	r3, r3, #4
 8020fa8:	3004      	addeq	r0, #4
 8020faa:	079a      	lsls	r2, r3, #30
 8020fac:	bf04      	itt	eq
 8020fae:	089b      	lsreq	r3, r3, #2
 8020fb0:	3002      	addeq	r0, #2
 8020fb2:	07da      	lsls	r2, r3, #31
 8020fb4:	d403      	bmi.n	8020fbe <__lo0bits+0x4e>
 8020fb6:	085b      	lsrs	r3, r3, #1
 8020fb8:	f100 0001 	add.w	r0, r0, #1
 8020fbc:	d005      	beq.n	8020fca <__lo0bits+0x5a>
 8020fbe:	600b      	str	r3, [r1, #0]
 8020fc0:	4770      	bx	lr
 8020fc2:	4610      	mov	r0, r2
 8020fc4:	e7e9      	b.n	8020f9a <__lo0bits+0x2a>
 8020fc6:	2000      	movs	r0, #0
 8020fc8:	4770      	bx	lr
 8020fca:	2020      	movs	r0, #32
 8020fcc:	4770      	bx	lr
	...

08020fd0 <__i2b>:
 8020fd0:	b510      	push	{r4, lr}
 8020fd2:	460c      	mov	r4, r1
 8020fd4:	2101      	movs	r1, #1
 8020fd6:	f7ff ff03 	bl	8020de0 <_Balloc>
 8020fda:	4602      	mov	r2, r0
 8020fdc:	b928      	cbnz	r0, 8020fea <__i2b+0x1a>
 8020fde:	4b05      	ldr	r3, [pc, #20]	; (8020ff4 <__i2b+0x24>)
 8020fe0:	4805      	ldr	r0, [pc, #20]	; (8020ff8 <__i2b+0x28>)
 8020fe2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020fe6:	f000 fd99 	bl	8021b1c <__assert_func>
 8020fea:	2301      	movs	r3, #1
 8020fec:	6144      	str	r4, [r0, #20]
 8020fee:	6103      	str	r3, [r0, #16]
 8020ff0:	bd10      	pop	{r4, pc}
 8020ff2:	bf00      	nop
 8020ff4:	08022c0f 	.word	0x08022c0f
 8020ff8:	08022c2a 	.word	0x08022c2a

08020ffc <__multiply>:
 8020ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021000:	4691      	mov	r9, r2
 8021002:	690a      	ldr	r2, [r1, #16]
 8021004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021008:	429a      	cmp	r2, r3
 802100a:	bfb8      	it	lt
 802100c:	460b      	movlt	r3, r1
 802100e:	460c      	mov	r4, r1
 8021010:	bfbc      	itt	lt
 8021012:	464c      	movlt	r4, r9
 8021014:	4699      	movlt	r9, r3
 8021016:	6927      	ldr	r7, [r4, #16]
 8021018:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802101c:	68a3      	ldr	r3, [r4, #8]
 802101e:	6861      	ldr	r1, [r4, #4]
 8021020:	eb07 060a 	add.w	r6, r7, sl
 8021024:	42b3      	cmp	r3, r6
 8021026:	b085      	sub	sp, #20
 8021028:	bfb8      	it	lt
 802102a:	3101      	addlt	r1, #1
 802102c:	f7ff fed8 	bl	8020de0 <_Balloc>
 8021030:	b930      	cbnz	r0, 8021040 <__multiply+0x44>
 8021032:	4602      	mov	r2, r0
 8021034:	4b44      	ldr	r3, [pc, #272]	; (8021148 <__multiply+0x14c>)
 8021036:	4845      	ldr	r0, [pc, #276]	; (802114c <__multiply+0x150>)
 8021038:	f240 115d 	movw	r1, #349	; 0x15d
 802103c:	f000 fd6e 	bl	8021b1c <__assert_func>
 8021040:	f100 0514 	add.w	r5, r0, #20
 8021044:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021048:	462b      	mov	r3, r5
 802104a:	2200      	movs	r2, #0
 802104c:	4543      	cmp	r3, r8
 802104e:	d321      	bcc.n	8021094 <__multiply+0x98>
 8021050:	f104 0314 	add.w	r3, r4, #20
 8021054:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021058:	f109 0314 	add.w	r3, r9, #20
 802105c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021060:	9202      	str	r2, [sp, #8]
 8021062:	1b3a      	subs	r2, r7, r4
 8021064:	3a15      	subs	r2, #21
 8021066:	f022 0203 	bic.w	r2, r2, #3
 802106a:	3204      	adds	r2, #4
 802106c:	f104 0115 	add.w	r1, r4, #21
 8021070:	428f      	cmp	r7, r1
 8021072:	bf38      	it	cc
 8021074:	2204      	movcc	r2, #4
 8021076:	9201      	str	r2, [sp, #4]
 8021078:	9a02      	ldr	r2, [sp, #8]
 802107a:	9303      	str	r3, [sp, #12]
 802107c:	429a      	cmp	r2, r3
 802107e:	d80c      	bhi.n	802109a <__multiply+0x9e>
 8021080:	2e00      	cmp	r6, #0
 8021082:	dd03      	ble.n	802108c <__multiply+0x90>
 8021084:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021088:	2b00      	cmp	r3, #0
 802108a:	d05a      	beq.n	8021142 <__multiply+0x146>
 802108c:	6106      	str	r6, [r0, #16]
 802108e:	b005      	add	sp, #20
 8021090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021094:	f843 2b04 	str.w	r2, [r3], #4
 8021098:	e7d8      	b.n	802104c <__multiply+0x50>
 802109a:	f8b3 a000 	ldrh.w	sl, [r3]
 802109e:	f1ba 0f00 	cmp.w	sl, #0
 80210a2:	d024      	beq.n	80210ee <__multiply+0xf2>
 80210a4:	f104 0e14 	add.w	lr, r4, #20
 80210a8:	46a9      	mov	r9, r5
 80210aa:	f04f 0c00 	mov.w	ip, #0
 80210ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80210b2:	f8d9 1000 	ldr.w	r1, [r9]
 80210b6:	fa1f fb82 	uxth.w	fp, r2
 80210ba:	b289      	uxth	r1, r1
 80210bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80210c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80210c4:	f8d9 2000 	ldr.w	r2, [r9]
 80210c8:	4461      	add	r1, ip
 80210ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80210ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80210d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80210d6:	b289      	uxth	r1, r1
 80210d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80210dc:	4577      	cmp	r7, lr
 80210de:	f849 1b04 	str.w	r1, [r9], #4
 80210e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80210e6:	d8e2      	bhi.n	80210ae <__multiply+0xb2>
 80210e8:	9a01      	ldr	r2, [sp, #4]
 80210ea:	f845 c002 	str.w	ip, [r5, r2]
 80210ee:	9a03      	ldr	r2, [sp, #12]
 80210f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80210f4:	3304      	adds	r3, #4
 80210f6:	f1b9 0f00 	cmp.w	r9, #0
 80210fa:	d020      	beq.n	802113e <__multiply+0x142>
 80210fc:	6829      	ldr	r1, [r5, #0]
 80210fe:	f104 0c14 	add.w	ip, r4, #20
 8021102:	46ae      	mov	lr, r5
 8021104:	f04f 0a00 	mov.w	sl, #0
 8021108:	f8bc b000 	ldrh.w	fp, [ip]
 802110c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021110:	fb09 220b 	mla	r2, r9, fp, r2
 8021114:	4492      	add	sl, r2
 8021116:	b289      	uxth	r1, r1
 8021118:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802111c:	f84e 1b04 	str.w	r1, [lr], #4
 8021120:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021124:	f8be 1000 	ldrh.w	r1, [lr]
 8021128:	0c12      	lsrs	r2, r2, #16
 802112a:	fb09 1102 	mla	r1, r9, r2, r1
 802112e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021132:	4567      	cmp	r7, ip
 8021134:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021138:	d8e6      	bhi.n	8021108 <__multiply+0x10c>
 802113a:	9a01      	ldr	r2, [sp, #4]
 802113c:	50a9      	str	r1, [r5, r2]
 802113e:	3504      	adds	r5, #4
 8021140:	e79a      	b.n	8021078 <__multiply+0x7c>
 8021142:	3e01      	subs	r6, #1
 8021144:	e79c      	b.n	8021080 <__multiply+0x84>
 8021146:	bf00      	nop
 8021148:	08022c0f 	.word	0x08022c0f
 802114c:	08022c2a 	.word	0x08022c2a

08021150 <__pow5mult>:
 8021150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021154:	4615      	mov	r5, r2
 8021156:	f012 0203 	ands.w	r2, r2, #3
 802115a:	4606      	mov	r6, r0
 802115c:	460f      	mov	r7, r1
 802115e:	d007      	beq.n	8021170 <__pow5mult+0x20>
 8021160:	4c25      	ldr	r4, [pc, #148]	; (80211f8 <__pow5mult+0xa8>)
 8021162:	3a01      	subs	r2, #1
 8021164:	2300      	movs	r3, #0
 8021166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802116a:	f7ff fe9b 	bl	8020ea4 <__multadd>
 802116e:	4607      	mov	r7, r0
 8021170:	10ad      	asrs	r5, r5, #2
 8021172:	d03d      	beq.n	80211f0 <__pow5mult+0xa0>
 8021174:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021176:	b97c      	cbnz	r4, 8021198 <__pow5mult+0x48>
 8021178:	2010      	movs	r0, #16
 802117a:	f7fd ff95 	bl	801f0a8 <malloc>
 802117e:	4602      	mov	r2, r0
 8021180:	6270      	str	r0, [r6, #36]	; 0x24
 8021182:	b928      	cbnz	r0, 8021190 <__pow5mult+0x40>
 8021184:	4b1d      	ldr	r3, [pc, #116]	; (80211fc <__pow5mult+0xac>)
 8021186:	481e      	ldr	r0, [pc, #120]	; (8021200 <__pow5mult+0xb0>)
 8021188:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802118c:	f000 fcc6 	bl	8021b1c <__assert_func>
 8021190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021194:	6004      	str	r4, [r0, #0]
 8021196:	60c4      	str	r4, [r0, #12]
 8021198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802119c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80211a0:	b94c      	cbnz	r4, 80211b6 <__pow5mult+0x66>
 80211a2:	f240 2171 	movw	r1, #625	; 0x271
 80211a6:	4630      	mov	r0, r6
 80211a8:	f7ff ff12 	bl	8020fd0 <__i2b>
 80211ac:	2300      	movs	r3, #0
 80211ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80211b2:	4604      	mov	r4, r0
 80211b4:	6003      	str	r3, [r0, #0]
 80211b6:	f04f 0900 	mov.w	r9, #0
 80211ba:	07eb      	lsls	r3, r5, #31
 80211bc:	d50a      	bpl.n	80211d4 <__pow5mult+0x84>
 80211be:	4639      	mov	r1, r7
 80211c0:	4622      	mov	r2, r4
 80211c2:	4630      	mov	r0, r6
 80211c4:	f7ff ff1a 	bl	8020ffc <__multiply>
 80211c8:	4639      	mov	r1, r7
 80211ca:	4680      	mov	r8, r0
 80211cc:	4630      	mov	r0, r6
 80211ce:	f7ff fe47 	bl	8020e60 <_Bfree>
 80211d2:	4647      	mov	r7, r8
 80211d4:	106d      	asrs	r5, r5, #1
 80211d6:	d00b      	beq.n	80211f0 <__pow5mult+0xa0>
 80211d8:	6820      	ldr	r0, [r4, #0]
 80211da:	b938      	cbnz	r0, 80211ec <__pow5mult+0x9c>
 80211dc:	4622      	mov	r2, r4
 80211de:	4621      	mov	r1, r4
 80211e0:	4630      	mov	r0, r6
 80211e2:	f7ff ff0b 	bl	8020ffc <__multiply>
 80211e6:	6020      	str	r0, [r4, #0]
 80211e8:	f8c0 9000 	str.w	r9, [r0]
 80211ec:	4604      	mov	r4, r0
 80211ee:	e7e4      	b.n	80211ba <__pow5mult+0x6a>
 80211f0:	4638      	mov	r0, r7
 80211f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80211f6:	bf00      	nop
 80211f8:	08022d78 	.word	0x08022d78
 80211fc:	08022b9d 	.word	0x08022b9d
 8021200:	08022c2a 	.word	0x08022c2a

08021204 <__lshift>:
 8021204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021208:	460c      	mov	r4, r1
 802120a:	6849      	ldr	r1, [r1, #4]
 802120c:	6923      	ldr	r3, [r4, #16]
 802120e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021212:	68a3      	ldr	r3, [r4, #8]
 8021214:	4607      	mov	r7, r0
 8021216:	4691      	mov	r9, r2
 8021218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802121c:	f108 0601 	add.w	r6, r8, #1
 8021220:	42b3      	cmp	r3, r6
 8021222:	db0b      	blt.n	802123c <__lshift+0x38>
 8021224:	4638      	mov	r0, r7
 8021226:	f7ff fddb 	bl	8020de0 <_Balloc>
 802122a:	4605      	mov	r5, r0
 802122c:	b948      	cbnz	r0, 8021242 <__lshift+0x3e>
 802122e:	4602      	mov	r2, r0
 8021230:	4b2a      	ldr	r3, [pc, #168]	; (80212dc <__lshift+0xd8>)
 8021232:	482b      	ldr	r0, [pc, #172]	; (80212e0 <__lshift+0xdc>)
 8021234:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021238:	f000 fc70 	bl	8021b1c <__assert_func>
 802123c:	3101      	adds	r1, #1
 802123e:	005b      	lsls	r3, r3, #1
 8021240:	e7ee      	b.n	8021220 <__lshift+0x1c>
 8021242:	2300      	movs	r3, #0
 8021244:	f100 0114 	add.w	r1, r0, #20
 8021248:	f100 0210 	add.w	r2, r0, #16
 802124c:	4618      	mov	r0, r3
 802124e:	4553      	cmp	r3, sl
 8021250:	db37      	blt.n	80212c2 <__lshift+0xbe>
 8021252:	6920      	ldr	r0, [r4, #16]
 8021254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021258:	f104 0314 	add.w	r3, r4, #20
 802125c:	f019 091f 	ands.w	r9, r9, #31
 8021260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021264:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021268:	d02f      	beq.n	80212ca <__lshift+0xc6>
 802126a:	f1c9 0e20 	rsb	lr, r9, #32
 802126e:	468a      	mov	sl, r1
 8021270:	f04f 0c00 	mov.w	ip, #0
 8021274:	681a      	ldr	r2, [r3, #0]
 8021276:	fa02 f209 	lsl.w	r2, r2, r9
 802127a:	ea42 020c 	orr.w	r2, r2, ip
 802127e:	f84a 2b04 	str.w	r2, [sl], #4
 8021282:	f853 2b04 	ldr.w	r2, [r3], #4
 8021286:	4298      	cmp	r0, r3
 8021288:	fa22 fc0e 	lsr.w	ip, r2, lr
 802128c:	d8f2      	bhi.n	8021274 <__lshift+0x70>
 802128e:	1b03      	subs	r3, r0, r4
 8021290:	3b15      	subs	r3, #21
 8021292:	f023 0303 	bic.w	r3, r3, #3
 8021296:	3304      	adds	r3, #4
 8021298:	f104 0215 	add.w	r2, r4, #21
 802129c:	4290      	cmp	r0, r2
 802129e:	bf38      	it	cc
 80212a0:	2304      	movcc	r3, #4
 80212a2:	f841 c003 	str.w	ip, [r1, r3]
 80212a6:	f1bc 0f00 	cmp.w	ip, #0
 80212aa:	d001      	beq.n	80212b0 <__lshift+0xac>
 80212ac:	f108 0602 	add.w	r6, r8, #2
 80212b0:	3e01      	subs	r6, #1
 80212b2:	4638      	mov	r0, r7
 80212b4:	612e      	str	r6, [r5, #16]
 80212b6:	4621      	mov	r1, r4
 80212b8:	f7ff fdd2 	bl	8020e60 <_Bfree>
 80212bc:	4628      	mov	r0, r5
 80212be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80212c6:	3301      	adds	r3, #1
 80212c8:	e7c1      	b.n	802124e <__lshift+0x4a>
 80212ca:	3904      	subs	r1, #4
 80212cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80212d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80212d4:	4298      	cmp	r0, r3
 80212d6:	d8f9      	bhi.n	80212cc <__lshift+0xc8>
 80212d8:	e7ea      	b.n	80212b0 <__lshift+0xac>
 80212da:	bf00      	nop
 80212dc:	08022c0f 	.word	0x08022c0f
 80212e0:	08022c2a 	.word	0x08022c2a

080212e4 <__mcmp>:
 80212e4:	b530      	push	{r4, r5, lr}
 80212e6:	6902      	ldr	r2, [r0, #16]
 80212e8:	690c      	ldr	r4, [r1, #16]
 80212ea:	1b12      	subs	r2, r2, r4
 80212ec:	d10e      	bne.n	802130c <__mcmp+0x28>
 80212ee:	f100 0314 	add.w	r3, r0, #20
 80212f2:	3114      	adds	r1, #20
 80212f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80212f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80212fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021300:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021304:	42a5      	cmp	r5, r4
 8021306:	d003      	beq.n	8021310 <__mcmp+0x2c>
 8021308:	d305      	bcc.n	8021316 <__mcmp+0x32>
 802130a:	2201      	movs	r2, #1
 802130c:	4610      	mov	r0, r2
 802130e:	bd30      	pop	{r4, r5, pc}
 8021310:	4283      	cmp	r3, r0
 8021312:	d3f3      	bcc.n	80212fc <__mcmp+0x18>
 8021314:	e7fa      	b.n	802130c <__mcmp+0x28>
 8021316:	f04f 32ff 	mov.w	r2, #4294967295
 802131a:	e7f7      	b.n	802130c <__mcmp+0x28>

0802131c <__mdiff>:
 802131c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021320:	460c      	mov	r4, r1
 8021322:	4606      	mov	r6, r0
 8021324:	4611      	mov	r1, r2
 8021326:	4620      	mov	r0, r4
 8021328:	4690      	mov	r8, r2
 802132a:	f7ff ffdb 	bl	80212e4 <__mcmp>
 802132e:	1e05      	subs	r5, r0, #0
 8021330:	d110      	bne.n	8021354 <__mdiff+0x38>
 8021332:	4629      	mov	r1, r5
 8021334:	4630      	mov	r0, r6
 8021336:	f7ff fd53 	bl	8020de0 <_Balloc>
 802133a:	b930      	cbnz	r0, 802134a <__mdiff+0x2e>
 802133c:	4b3a      	ldr	r3, [pc, #232]	; (8021428 <__mdiff+0x10c>)
 802133e:	4602      	mov	r2, r0
 8021340:	f240 2132 	movw	r1, #562	; 0x232
 8021344:	4839      	ldr	r0, [pc, #228]	; (802142c <__mdiff+0x110>)
 8021346:	f000 fbe9 	bl	8021b1c <__assert_func>
 802134a:	2301      	movs	r3, #1
 802134c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021354:	bfa4      	itt	ge
 8021356:	4643      	movge	r3, r8
 8021358:	46a0      	movge	r8, r4
 802135a:	4630      	mov	r0, r6
 802135c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021360:	bfa6      	itte	ge
 8021362:	461c      	movge	r4, r3
 8021364:	2500      	movge	r5, #0
 8021366:	2501      	movlt	r5, #1
 8021368:	f7ff fd3a 	bl	8020de0 <_Balloc>
 802136c:	b920      	cbnz	r0, 8021378 <__mdiff+0x5c>
 802136e:	4b2e      	ldr	r3, [pc, #184]	; (8021428 <__mdiff+0x10c>)
 8021370:	4602      	mov	r2, r0
 8021372:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021376:	e7e5      	b.n	8021344 <__mdiff+0x28>
 8021378:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802137c:	6926      	ldr	r6, [r4, #16]
 802137e:	60c5      	str	r5, [r0, #12]
 8021380:	f104 0914 	add.w	r9, r4, #20
 8021384:	f108 0514 	add.w	r5, r8, #20
 8021388:	f100 0e14 	add.w	lr, r0, #20
 802138c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021390:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021394:	f108 0210 	add.w	r2, r8, #16
 8021398:	46f2      	mov	sl, lr
 802139a:	2100      	movs	r1, #0
 802139c:	f859 3b04 	ldr.w	r3, [r9], #4
 80213a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80213a4:	fa1f f883 	uxth.w	r8, r3
 80213a8:	fa11 f18b 	uxtah	r1, r1, fp
 80213ac:	0c1b      	lsrs	r3, r3, #16
 80213ae:	eba1 0808 	sub.w	r8, r1, r8
 80213b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80213b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80213ba:	fa1f f888 	uxth.w	r8, r8
 80213be:	1419      	asrs	r1, r3, #16
 80213c0:	454e      	cmp	r6, r9
 80213c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80213c6:	f84a 3b04 	str.w	r3, [sl], #4
 80213ca:	d8e7      	bhi.n	802139c <__mdiff+0x80>
 80213cc:	1b33      	subs	r3, r6, r4
 80213ce:	3b15      	subs	r3, #21
 80213d0:	f023 0303 	bic.w	r3, r3, #3
 80213d4:	3304      	adds	r3, #4
 80213d6:	3415      	adds	r4, #21
 80213d8:	42a6      	cmp	r6, r4
 80213da:	bf38      	it	cc
 80213dc:	2304      	movcc	r3, #4
 80213de:	441d      	add	r5, r3
 80213e0:	4473      	add	r3, lr
 80213e2:	469e      	mov	lr, r3
 80213e4:	462e      	mov	r6, r5
 80213e6:	4566      	cmp	r6, ip
 80213e8:	d30e      	bcc.n	8021408 <__mdiff+0xec>
 80213ea:	f10c 0203 	add.w	r2, ip, #3
 80213ee:	1b52      	subs	r2, r2, r5
 80213f0:	f022 0203 	bic.w	r2, r2, #3
 80213f4:	3d03      	subs	r5, #3
 80213f6:	45ac      	cmp	ip, r5
 80213f8:	bf38      	it	cc
 80213fa:	2200      	movcc	r2, #0
 80213fc:	441a      	add	r2, r3
 80213fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021402:	b17b      	cbz	r3, 8021424 <__mdiff+0x108>
 8021404:	6107      	str	r7, [r0, #16]
 8021406:	e7a3      	b.n	8021350 <__mdiff+0x34>
 8021408:	f856 8b04 	ldr.w	r8, [r6], #4
 802140c:	fa11 f288 	uxtah	r2, r1, r8
 8021410:	1414      	asrs	r4, r2, #16
 8021412:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8021416:	b292      	uxth	r2, r2
 8021418:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802141c:	f84e 2b04 	str.w	r2, [lr], #4
 8021420:	1421      	asrs	r1, r4, #16
 8021422:	e7e0      	b.n	80213e6 <__mdiff+0xca>
 8021424:	3f01      	subs	r7, #1
 8021426:	e7ea      	b.n	80213fe <__mdiff+0xe2>
 8021428:	08022c0f 	.word	0x08022c0f
 802142c:	08022c2a 	.word	0x08022c2a

08021430 <__d2b>:
 8021430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021434:	4689      	mov	r9, r1
 8021436:	2101      	movs	r1, #1
 8021438:	ec57 6b10 	vmov	r6, r7, d0
 802143c:	4690      	mov	r8, r2
 802143e:	f7ff fccf 	bl	8020de0 <_Balloc>
 8021442:	4604      	mov	r4, r0
 8021444:	b930      	cbnz	r0, 8021454 <__d2b+0x24>
 8021446:	4602      	mov	r2, r0
 8021448:	4b25      	ldr	r3, [pc, #148]	; (80214e0 <__d2b+0xb0>)
 802144a:	4826      	ldr	r0, [pc, #152]	; (80214e4 <__d2b+0xb4>)
 802144c:	f240 310a 	movw	r1, #778	; 0x30a
 8021450:	f000 fb64 	bl	8021b1c <__assert_func>
 8021454:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802145c:	bb35      	cbnz	r5, 80214ac <__d2b+0x7c>
 802145e:	2e00      	cmp	r6, #0
 8021460:	9301      	str	r3, [sp, #4]
 8021462:	d028      	beq.n	80214b6 <__d2b+0x86>
 8021464:	4668      	mov	r0, sp
 8021466:	9600      	str	r6, [sp, #0]
 8021468:	f7ff fd82 	bl	8020f70 <__lo0bits>
 802146c:	9900      	ldr	r1, [sp, #0]
 802146e:	b300      	cbz	r0, 80214b2 <__d2b+0x82>
 8021470:	9a01      	ldr	r2, [sp, #4]
 8021472:	f1c0 0320 	rsb	r3, r0, #32
 8021476:	fa02 f303 	lsl.w	r3, r2, r3
 802147a:	430b      	orrs	r3, r1
 802147c:	40c2      	lsrs	r2, r0
 802147e:	6163      	str	r3, [r4, #20]
 8021480:	9201      	str	r2, [sp, #4]
 8021482:	9b01      	ldr	r3, [sp, #4]
 8021484:	61a3      	str	r3, [r4, #24]
 8021486:	2b00      	cmp	r3, #0
 8021488:	bf14      	ite	ne
 802148a:	2202      	movne	r2, #2
 802148c:	2201      	moveq	r2, #1
 802148e:	6122      	str	r2, [r4, #16]
 8021490:	b1d5      	cbz	r5, 80214c8 <__d2b+0x98>
 8021492:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021496:	4405      	add	r5, r0
 8021498:	f8c9 5000 	str.w	r5, [r9]
 802149c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80214a0:	f8c8 0000 	str.w	r0, [r8]
 80214a4:	4620      	mov	r0, r4
 80214a6:	b003      	add	sp, #12
 80214a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80214ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80214b0:	e7d5      	b.n	802145e <__d2b+0x2e>
 80214b2:	6161      	str	r1, [r4, #20]
 80214b4:	e7e5      	b.n	8021482 <__d2b+0x52>
 80214b6:	a801      	add	r0, sp, #4
 80214b8:	f7ff fd5a 	bl	8020f70 <__lo0bits>
 80214bc:	9b01      	ldr	r3, [sp, #4]
 80214be:	6163      	str	r3, [r4, #20]
 80214c0:	2201      	movs	r2, #1
 80214c2:	6122      	str	r2, [r4, #16]
 80214c4:	3020      	adds	r0, #32
 80214c6:	e7e3      	b.n	8021490 <__d2b+0x60>
 80214c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80214cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80214d0:	f8c9 0000 	str.w	r0, [r9]
 80214d4:	6918      	ldr	r0, [r3, #16]
 80214d6:	f7ff fd2b 	bl	8020f30 <__hi0bits>
 80214da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80214de:	e7df      	b.n	80214a0 <__d2b+0x70>
 80214e0:	08022c0f 	.word	0x08022c0f
 80214e4:	08022c2a 	.word	0x08022c2a

080214e8 <_calloc_r>:
 80214e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80214ea:	fba1 2402 	umull	r2, r4, r1, r2
 80214ee:	b94c      	cbnz	r4, 8021504 <_calloc_r+0x1c>
 80214f0:	4611      	mov	r1, r2
 80214f2:	9201      	str	r2, [sp, #4]
 80214f4:	f7fd fe84 	bl	801f200 <_malloc_r>
 80214f8:	9a01      	ldr	r2, [sp, #4]
 80214fa:	4605      	mov	r5, r0
 80214fc:	b930      	cbnz	r0, 802150c <_calloc_r+0x24>
 80214fe:	4628      	mov	r0, r5
 8021500:	b003      	add	sp, #12
 8021502:	bd30      	pop	{r4, r5, pc}
 8021504:	220c      	movs	r2, #12
 8021506:	6002      	str	r2, [r0, #0]
 8021508:	2500      	movs	r5, #0
 802150a:	e7f8      	b.n	80214fe <_calloc_r+0x16>
 802150c:	4621      	mov	r1, r4
 802150e:	f7fd fe03 	bl	801f118 <memset>
 8021512:	e7f4      	b.n	80214fe <_calloc_r+0x16>

08021514 <_realloc_r>:
 8021514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021518:	4680      	mov	r8, r0
 802151a:	4614      	mov	r4, r2
 802151c:	460e      	mov	r6, r1
 802151e:	b921      	cbnz	r1, 802152a <_realloc_r+0x16>
 8021520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021524:	4611      	mov	r1, r2
 8021526:	f7fd be6b 	b.w	801f200 <_malloc_r>
 802152a:	b92a      	cbnz	r2, 8021538 <_realloc_r+0x24>
 802152c:	f7fd fdfc 	bl	801f128 <_free_r>
 8021530:	4625      	mov	r5, r4
 8021532:	4628      	mov	r0, r5
 8021534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021538:	f000 fb20 	bl	8021b7c <_malloc_usable_size_r>
 802153c:	4284      	cmp	r4, r0
 802153e:	4607      	mov	r7, r0
 8021540:	d802      	bhi.n	8021548 <_realloc_r+0x34>
 8021542:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021546:	d812      	bhi.n	802156e <_realloc_r+0x5a>
 8021548:	4621      	mov	r1, r4
 802154a:	4640      	mov	r0, r8
 802154c:	f7fd fe58 	bl	801f200 <_malloc_r>
 8021550:	4605      	mov	r5, r0
 8021552:	2800      	cmp	r0, #0
 8021554:	d0ed      	beq.n	8021532 <_realloc_r+0x1e>
 8021556:	42bc      	cmp	r4, r7
 8021558:	4622      	mov	r2, r4
 802155a:	4631      	mov	r1, r6
 802155c:	bf28      	it	cs
 802155e:	463a      	movcs	r2, r7
 8021560:	f7fd fdb2 	bl	801f0c8 <memcpy>
 8021564:	4631      	mov	r1, r6
 8021566:	4640      	mov	r0, r8
 8021568:	f7fd fdde 	bl	801f128 <_free_r>
 802156c:	e7e1      	b.n	8021532 <_realloc_r+0x1e>
 802156e:	4635      	mov	r5, r6
 8021570:	e7df      	b.n	8021532 <_realloc_r+0x1e>

08021572 <__ssputs_r>:
 8021572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021576:	688e      	ldr	r6, [r1, #8]
 8021578:	429e      	cmp	r6, r3
 802157a:	4682      	mov	sl, r0
 802157c:	460c      	mov	r4, r1
 802157e:	4690      	mov	r8, r2
 8021580:	461f      	mov	r7, r3
 8021582:	d838      	bhi.n	80215f6 <__ssputs_r+0x84>
 8021584:	898a      	ldrh	r2, [r1, #12]
 8021586:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802158a:	d032      	beq.n	80215f2 <__ssputs_r+0x80>
 802158c:	6825      	ldr	r5, [r4, #0]
 802158e:	6909      	ldr	r1, [r1, #16]
 8021590:	eba5 0901 	sub.w	r9, r5, r1
 8021594:	6965      	ldr	r5, [r4, #20]
 8021596:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802159a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802159e:	3301      	adds	r3, #1
 80215a0:	444b      	add	r3, r9
 80215a2:	106d      	asrs	r5, r5, #1
 80215a4:	429d      	cmp	r5, r3
 80215a6:	bf38      	it	cc
 80215a8:	461d      	movcc	r5, r3
 80215aa:	0553      	lsls	r3, r2, #21
 80215ac:	d531      	bpl.n	8021612 <__ssputs_r+0xa0>
 80215ae:	4629      	mov	r1, r5
 80215b0:	f7fd fe26 	bl	801f200 <_malloc_r>
 80215b4:	4606      	mov	r6, r0
 80215b6:	b950      	cbnz	r0, 80215ce <__ssputs_r+0x5c>
 80215b8:	230c      	movs	r3, #12
 80215ba:	f8ca 3000 	str.w	r3, [sl]
 80215be:	89a3      	ldrh	r3, [r4, #12]
 80215c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80215c4:	81a3      	strh	r3, [r4, #12]
 80215c6:	f04f 30ff 	mov.w	r0, #4294967295
 80215ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80215ce:	6921      	ldr	r1, [r4, #16]
 80215d0:	464a      	mov	r2, r9
 80215d2:	f7fd fd79 	bl	801f0c8 <memcpy>
 80215d6:	89a3      	ldrh	r3, [r4, #12]
 80215d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80215dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80215e0:	81a3      	strh	r3, [r4, #12]
 80215e2:	6126      	str	r6, [r4, #16]
 80215e4:	6165      	str	r5, [r4, #20]
 80215e6:	444e      	add	r6, r9
 80215e8:	eba5 0509 	sub.w	r5, r5, r9
 80215ec:	6026      	str	r6, [r4, #0]
 80215ee:	60a5      	str	r5, [r4, #8]
 80215f0:	463e      	mov	r6, r7
 80215f2:	42be      	cmp	r6, r7
 80215f4:	d900      	bls.n	80215f8 <__ssputs_r+0x86>
 80215f6:	463e      	mov	r6, r7
 80215f8:	6820      	ldr	r0, [r4, #0]
 80215fa:	4632      	mov	r2, r6
 80215fc:	4641      	mov	r1, r8
 80215fe:	f7fd fd71 	bl	801f0e4 <memmove>
 8021602:	68a3      	ldr	r3, [r4, #8]
 8021604:	1b9b      	subs	r3, r3, r6
 8021606:	60a3      	str	r3, [r4, #8]
 8021608:	6823      	ldr	r3, [r4, #0]
 802160a:	4433      	add	r3, r6
 802160c:	6023      	str	r3, [r4, #0]
 802160e:	2000      	movs	r0, #0
 8021610:	e7db      	b.n	80215ca <__ssputs_r+0x58>
 8021612:	462a      	mov	r2, r5
 8021614:	f7ff ff7e 	bl	8021514 <_realloc_r>
 8021618:	4606      	mov	r6, r0
 802161a:	2800      	cmp	r0, #0
 802161c:	d1e1      	bne.n	80215e2 <__ssputs_r+0x70>
 802161e:	6921      	ldr	r1, [r4, #16]
 8021620:	4650      	mov	r0, sl
 8021622:	f7fd fd81 	bl	801f128 <_free_r>
 8021626:	e7c7      	b.n	80215b8 <__ssputs_r+0x46>

08021628 <_svfiprintf_r>:
 8021628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802162c:	4698      	mov	r8, r3
 802162e:	898b      	ldrh	r3, [r1, #12]
 8021630:	061b      	lsls	r3, r3, #24
 8021632:	b09d      	sub	sp, #116	; 0x74
 8021634:	4607      	mov	r7, r0
 8021636:	460d      	mov	r5, r1
 8021638:	4614      	mov	r4, r2
 802163a:	d50e      	bpl.n	802165a <_svfiprintf_r+0x32>
 802163c:	690b      	ldr	r3, [r1, #16]
 802163e:	b963      	cbnz	r3, 802165a <_svfiprintf_r+0x32>
 8021640:	2140      	movs	r1, #64	; 0x40
 8021642:	f7fd fddd 	bl	801f200 <_malloc_r>
 8021646:	6028      	str	r0, [r5, #0]
 8021648:	6128      	str	r0, [r5, #16]
 802164a:	b920      	cbnz	r0, 8021656 <_svfiprintf_r+0x2e>
 802164c:	230c      	movs	r3, #12
 802164e:	603b      	str	r3, [r7, #0]
 8021650:	f04f 30ff 	mov.w	r0, #4294967295
 8021654:	e0d1      	b.n	80217fa <_svfiprintf_r+0x1d2>
 8021656:	2340      	movs	r3, #64	; 0x40
 8021658:	616b      	str	r3, [r5, #20]
 802165a:	2300      	movs	r3, #0
 802165c:	9309      	str	r3, [sp, #36]	; 0x24
 802165e:	2320      	movs	r3, #32
 8021660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021664:	f8cd 800c 	str.w	r8, [sp, #12]
 8021668:	2330      	movs	r3, #48	; 0x30
 802166a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021814 <_svfiprintf_r+0x1ec>
 802166e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021672:	f04f 0901 	mov.w	r9, #1
 8021676:	4623      	mov	r3, r4
 8021678:	469a      	mov	sl, r3
 802167a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802167e:	b10a      	cbz	r2, 8021684 <_svfiprintf_r+0x5c>
 8021680:	2a25      	cmp	r2, #37	; 0x25
 8021682:	d1f9      	bne.n	8021678 <_svfiprintf_r+0x50>
 8021684:	ebba 0b04 	subs.w	fp, sl, r4
 8021688:	d00b      	beq.n	80216a2 <_svfiprintf_r+0x7a>
 802168a:	465b      	mov	r3, fp
 802168c:	4622      	mov	r2, r4
 802168e:	4629      	mov	r1, r5
 8021690:	4638      	mov	r0, r7
 8021692:	f7ff ff6e 	bl	8021572 <__ssputs_r>
 8021696:	3001      	adds	r0, #1
 8021698:	f000 80aa 	beq.w	80217f0 <_svfiprintf_r+0x1c8>
 802169c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802169e:	445a      	add	r2, fp
 80216a0:	9209      	str	r2, [sp, #36]	; 0x24
 80216a2:	f89a 3000 	ldrb.w	r3, [sl]
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	f000 80a2 	beq.w	80217f0 <_svfiprintf_r+0x1c8>
 80216ac:	2300      	movs	r3, #0
 80216ae:	f04f 32ff 	mov.w	r2, #4294967295
 80216b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80216b6:	f10a 0a01 	add.w	sl, sl, #1
 80216ba:	9304      	str	r3, [sp, #16]
 80216bc:	9307      	str	r3, [sp, #28]
 80216be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80216c2:	931a      	str	r3, [sp, #104]	; 0x68
 80216c4:	4654      	mov	r4, sl
 80216c6:	2205      	movs	r2, #5
 80216c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216cc:	4851      	ldr	r0, [pc, #324]	; (8021814 <_svfiprintf_r+0x1ec>)
 80216ce:	f7de fd5f 	bl	8000190 <memchr>
 80216d2:	9a04      	ldr	r2, [sp, #16]
 80216d4:	b9d8      	cbnz	r0, 802170e <_svfiprintf_r+0xe6>
 80216d6:	06d0      	lsls	r0, r2, #27
 80216d8:	bf44      	itt	mi
 80216da:	2320      	movmi	r3, #32
 80216dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80216e0:	0711      	lsls	r1, r2, #28
 80216e2:	bf44      	itt	mi
 80216e4:	232b      	movmi	r3, #43	; 0x2b
 80216e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80216ea:	f89a 3000 	ldrb.w	r3, [sl]
 80216ee:	2b2a      	cmp	r3, #42	; 0x2a
 80216f0:	d015      	beq.n	802171e <_svfiprintf_r+0xf6>
 80216f2:	9a07      	ldr	r2, [sp, #28]
 80216f4:	4654      	mov	r4, sl
 80216f6:	2000      	movs	r0, #0
 80216f8:	f04f 0c0a 	mov.w	ip, #10
 80216fc:	4621      	mov	r1, r4
 80216fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021702:	3b30      	subs	r3, #48	; 0x30
 8021704:	2b09      	cmp	r3, #9
 8021706:	d94e      	bls.n	80217a6 <_svfiprintf_r+0x17e>
 8021708:	b1b0      	cbz	r0, 8021738 <_svfiprintf_r+0x110>
 802170a:	9207      	str	r2, [sp, #28]
 802170c:	e014      	b.n	8021738 <_svfiprintf_r+0x110>
 802170e:	eba0 0308 	sub.w	r3, r0, r8
 8021712:	fa09 f303 	lsl.w	r3, r9, r3
 8021716:	4313      	orrs	r3, r2
 8021718:	9304      	str	r3, [sp, #16]
 802171a:	46a2      	mov	sl, r4
 802171c:	e7d2      	b.n	80216c4 <_svfiprintf_r+0x9c>
 802171e:	9b03      	ldr	r3, [sp, #12]
 8021720:	1d19      	adds	r1, r3, #4
 8021722:	681b      	ldr	r3, [r3, #0]
 8021724:	9103      	str	r1, [sp, #12]
 8021726:	2b00      	cmp	r3, #0
 8021728:	bfbb      	ittet	lt
 802172a:	425b      	neglt	r3, r3
 802172c:	f042 0202 	orrlt.w	r2, r2, #2
 8021730:	9307      	strge	r3, [sp, #28]
 8021732:	9307      	strlt	r3, [sp, #28]
 8021734:	bfb8      	it	lt
 8021736:	9204      	strlt	r2, [sp, #16]
 8021738:	7823      	ldrb	r3, [r4, #0]
 802173a:	2b2e      	cmp	r3, #46	; 0x2e
 802173c:	d10c      	bne.n	8021758 <_svfiprintf_r+0x130>
 802173e:	7863      	ldrb	r3, [r4, #1]
 8021740:	2b2a      	cmp	r3, #42	; 0x2a
 8021742:	d135      	bne.n	80217b0 <_svfiprintf_r+0x188>
 8021744:	9b03      	ldr	r3, [sp, #12]
 8021746:	1d1a      	adds	r2, r3, #4
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	9203      	str	r2, [sp, #12]
 802174c:	2b00      	cmp	r3, #0
 802174e:	bfb8      	it	lt
 8021750:	f04f 33ff 	movlt.w	r3, #4294967295
 8021754:	3402      	adds	r4, #2
 8021756:	9305      	str	r3, [sp, #20]
 8021758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021824 <_svfiprintf_r+0x1fc>
 802175c:	7821      	ldrb	r1, [r4, #0]
 802175e:	2203      	movs	r2, #3
 8021760:	4650      	mov	r0, sl
 8021762:	f7de fd15 	bl	8000190 <memchr>
 8021766:	b140      	cbz	r0, 802177a <_svfiprintf_r+0x152>
 8021768:	2340      	movs	r3, #64	; 0x40
 802176a:	eba0 000a 	sub.w	r0, r0, sl
 802176e:	fa03 f000 	lsl.w	r0, r3, r0
 8021772:	9b04      	ldr	r3, [sp, #16]
 8021774:	4303      	orrs	r3, r0
 8021776:	3401      	adds	r4, #1
 8021778:	9304      	str	r3, [sp, #16]
 802177a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802177e:	4826      	ldr	r0, [pc, #152]	; (8021818 <_svfiprintf_r+0x1f0>)
 8021780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021784:	2206      	movs	r2, #6
 8021786:	f7de fd03 	bl	8000190 <memchr>
 802178a:	2800      	cmp	r0, #0
 802178c:	d038      	beq.n	8021800 <_svfiprintf_r+0x1d8>
 802178e:	4b23      	ldr	r3, [pc, #140]	; (802181c <_svfiprintf_r+0x1f4>)
 8021790:	bb1b      	cbnz	r3, 80217da <_svfiprintf_r+0x1b2>
 8021792:	9b03      	ldr	r3, [sp, #12]
 8021794:	3307      	adds	r3, #7
 8021796:	f023 0307 	bic.w	r3, r3, #7
 802179a:	3308      	adds	r3, #8
 802179c:	9303      	str	r3, [sp, #12]
 802179e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217a0:	4433      	add	r3, r6
 80217a2:	9309      	str	r3, [sp, #36]	; 0x24
 80217a4:	e767      	b.n	8021676 <_svfiprintf_r+0x4e>
 80217a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80217aa:	460c      	mov	r4, r1
 80217ac:	2001      	movs	r0, #1
 80217ae:	e7a5      	b.n	80216fc <_svfiprintf_r+0xd4>
 80217b0:	2300      	movs	r3, #0
 80217b2:	3401      	adds	r4, #1
 80217b4:	9305      	str	r3, [sp, #20]
 80217b6:	4619      	mov	r1, r3
 80217b8:	f04f 0c0a 	mov.w	ip, #10
 80217bc:	4620      	mov	r0, r4
 80217be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80217c2:	3a30      	subs	r2, #48	; 0x30
 80217c4:	2a09      	cmp	r2, #9
 80217c6:	d903      	bls.n	80217d0 <_svfiprintf_r+0x1a8>
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	d0c5      	beq.n	8021758 <_svfiprintf_r+0x130>
 80217cc:	9105      	str	r1, [sp, #20]
 80217ce:	e7c3      	b.n	8021758 <_svfiprintf_r+0x130>
 80217d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80217d4:	4604      	mov	r4, r0
 80217d6:	2301      	movs	r3, #1
 80217d8:	e7f0      	b.n	80217bc <_svfiprintf_r+0x194>
 80217da:	ab03      	add	r3, sp, #12
 80217dc:	9300      	str	r3, [sp, #0]
 80217de:	462a      	mov	r2, r5
 80217e0:	4b0f      	ldr	r3, [pc, #60]	; (8021820 <_svfiprintf_r+0x1f8>)
 80217e2:	a904      	add	r1, sp, #16
 80217e4:	4638      	mov	r0, r7
 80217e6:	f7fd fe1f 	bl	801f428 <_printf_float>
 80217ea:	1c42      	adds	r2, r0, #1
 80217ec:	4606      	mov	r6, r0
 80217ee:	d1d6      	bne.n	802179e <_svfiprintf_r+0x176>
 80217f0:	89ab      	ldrh	r3, [r5, #12]
 80217f2:	065b      	lsls	r3, r3, #25
 80217f4:	f53f af2c 	bmi.w	8021650 <_svfiprintf_r+0x28>
 80217f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217fa:	b01d      	add	sp, #116	; 0x74
 80217fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021800:	ab03      	add	r3, sp, #12
 8021802:	9300      	str	r3, [sp, #0]
 8021804:	462a      	mov	r2, r5
 8021806:	4b06      	ldr	r3, [pc, #24]	; (8021820 <_svfiprintf_r+0x1f8>)
 8021808:	a904      	add	r1, sp, #16
 802180a:	4638      	mov	r0, r7
 802180c:	f7fe f8b0 	bl	801f970 <_printf_i>
 8021810:	e7eb      	b.n	80217ea <_svfiprintf_r+0x1c2>
 8021812:	bf00      	nop
 8021814:	08022d84 	.word	0x08022d84
 8021818:	08022d8e 	.word	0x08022d8e
 802181c:	0801f429 	.word	0x0801f429
 8021820:	08021573 	.word	0x08021573
 8021824:	08022d8a 	.word	0x08022d8a

08021828 <__sfputc_r>:
 8021828:	6893      	ldr	r3, [r2, #8]
 802182a:	3b01      	subs	r3, #1
 802182c:	2b00      	cmp	r3, #0
 802182e:	b410      	push	{r4}
 8021830:	6093      	str	r3, [r2, #8]
 8021832:	da08      	bge.n	8021846 <__sfputc_r+0x1e>
 8021834:	6994      	ldr	r4, [r2, #24]
 8021836:	42a3      	cmp	r3, r4
 8021838:	db01      	blt.n	802183e <__sfputc_r+0x16>
 802183a:	290a      	cmp	r1, #10
 802183c:	d103      	bne.n	8021846 <__sfputc_r+0x1e>
 802183e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021842:	f7fe bb19 	b.w	801fe78 <__swbuf_r>
 8021846:	6813      	ldr	r3, [r2, #0]
 8021848:	1c58      	adds	r0, r3, #1
 802184a:	6010      	str	r0, [r2, #0]
 802184c:	7019      	strb	r1, [r3, #0]
 802184e:	4608      	mov	r0, r1
 8021850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021854:	4770      	bx	lr

08021856 <__sfputs_r>:
 8021856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021858:	4606      	mov	r6, r0
 802185a:	460f      	mov	r7, r1
 802185c:	4614      	mov	r4, r2
 802185e:	18d5      	adds	r5, r2, r3
 8021860:	42ac      	cmp	r4, r5
 8021862:	d101      	bne.n	8021868 <__sfputs_r+0x12>
 8021864:	2000      	movs	r0, #0
 8021866:	e007      	b.n	8021878 <__sfputs_r+0x22>
 8021868:	f814 1b01 	ldrb.w	r1, [r4], #1
 802186c:	463a      	mov	r2, r7
 802186e:	4630      	mov	r0, r6
 8021870:	f7ff ffda 	bl	8021828 <__sfputc_r>
 8021874:	1c43      	adds	r3, r0, #1
 8021876:	d1f3      	bne.n	8021860 <__sfputs_r+0xa>
 8021878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802187c <_vfiprintf_r>:
 802187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021880:	460d      	mov	r5, r1
 8021882:	b09d      	sub	sp, #116	; 0x74
 8021884:	4614      	mov	r4, r2
 8021886:	4698      	mov	r8, r3
 8021888:	4606      	mov	r6, r0
 802188a:	b118      	cbz	r0, 8021894 <_vfiprintf_r+0x18>
 802188c:	6983      	ldr	r3, [r0, #24]
 802188e:	b90b      	cbnz	r3, 8021894 <_vfiprintf_r+0x18>
 8021890:	f7fd fae0 	bl	801ee54 <__sinit>
 8021894:	4b89      	ldr	r3, [pc, #548]	; (8021abc <_vfiprintf_r+0x240>)
 8021896:	429d      	cmp	r5, r3
 8021898:	d11b      	bne.n	80218d2 <_vfiprintf_r+0x56>
 802189a:	6875      	ldr	r5, [r6, #4]
 802189c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802189e:	07d9      	lsls	r1, r3, #31
 80218a0:	d405      	bmi.n	80218ae <_vfiprintf_r+0x32>
 80218a2:	89ab      	ldrh	r3, [r5, #12]
 80218a4:	059a      	lsls	r2, r3, #22
 80218a6:	d402      	bmi.n	80218ae <_vfiprintf_r+0x32>
 80218a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80218aa:	f7fd fb96 	bl	801efda <__retarget_lock_acquire_recursive>
 80218ae:	89ab      	ldrh	r3, [r5, #12]
 80218b0:	071b      	lsls	r3, r3, #28
 80218b2:	d501      	bpl.n	80218b8 <_vfiprintf_r+0x3c>
 80218b4:	692b      	ldr	r3, [r5, #16]
 80218b6:	b9eb      	cbnz	r3, 80218f4 <_vfiprintf_r+0x78>
 80218b8:	4629      	mov	r1, r5
 80218ba:	4630      	mov	r0, r6
 80218bc:	f7fe fb40 	bl	801ff40 <__swsetup_r>
 80218c0:	b1c0      	cbz	r0, 80218f4 <_vfiprintf_r+0x78>
 80218c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80218c4:	07dc      	lsls	r4, r3, #31
 80218c6:	d50e      	bpl.n	80218e6 <_vfiprintf_r+0x6a>
 80218c8:	f04f 30ff 	mov.w	r0, #4294967295
 80218cc:	b01d      	add	sp, #116	; 0x74
 80218ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218d2:	4b7b      	ldr	r3, [pc, #492]	; (8021ac0 <_vfiprintf_r+0x244>)
 80218d4:	429d      	cmp	r5, r3
 80218d6:	d101      	bne.n	80218dc <_vfiprintf_r+0x60>
 80218d8:	68b5      	ldr	r5, [r6, #8]
 80218da:	e7df      	b.n	802189c <_vfiprintf_r+0x20>
 80218dc:	4b79      	ldr	r3, [pc, #484]	; (8021ac4 <_vfiprintf_r+0x248>)
 80218de:	429d      	cmp	r5, r3
 80218e0:	bf08      	it	eq
 80218e2:	68f5      	ldreq	r5, [r6, #12]
 80218e4:	e7da      	b.n	802189c <_vfiprintf_r+0x20>
 80218e6:	89ab      	ldrh	r3, [r5, #12]
 80218e8:	0598      	lsls	r0, r3, #22
 80218ea:	d4ed      	bmi.n	80218c8 <_vfiprintf_r+0x4c>
 80218ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80218ee:	f7fd fb75 	bl	801efdc <__retarget_lock_release_recursive>
 80218f2:	e7e9      	b.n	80218c8 <_vfiprintf_r+0x4c>
 80218f4:	2300      	movs	r3, #0
 80218f6:	9309      	str	r3, [sp, #36]	; 0x24
 80218f8:	2320      	movs	r3, #32
 80218fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80218fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8021902:	2330      	movs	r3, #48	; 0x30
 8021904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021ac8 <_vfiprintf_r+0x24c>
 8021908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802190c:	f04f 0901 	mov.w	r9, #1
 8021910:	4623      	mov	r3, r4
 8021912:	469a      	mov	sl, r3
 8021914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021918:	b10a      	cbz	r2, 802191e <_vfiprintf_r+0xa2>
 802191a:	2a25      	cmp	r2, #37	; 0x25
 802191c:	d1f9      	bne.n	8021912 <_vfiprintf_r+0x96>
 802191e:	ebba 0b04 	subs.w	fp, sl, r4
 8021922:	d00b      	beq.n	802193c <_vfiprintf_r+0xc0>
 8021924:	465b      	mov	r3, fp
 8021926:	4622      	mov	r2, r4
 8021928:	4629      	mov	r1, r5
 802192a:	4630      	mov	r0, r6
 802192c:	f7ff ff93 	bl	8021856 <__sfputs_r>
 8021930:	3001      	adds	r0, #1
 8021932:	f000 80aa 	beq.w	8021a8a <_vfiprintf_r+0x20e>
 8021936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021938:	445a      	add	r2, fp
 802193a:	9209      	str	r2, [sp, #36]	; 0x24
 802193c:	f89a 3000 	ldrb.w	r3, [sl]
 8021940:	2b00      	cmp	r3, #0
 8021942:	f000 80a2 	beq.w	8021a8a <_vfiprintf_r+0x20e>
 8021946:	2300      	movs	r3, #0
 8021948:	f04f 32ff 	mov.w	r2, #4294967295
 802194c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021950:	f10a 0a01 	add.w	sl, sl, #1
 8021954:	9304      	str	r3, [sp, #16]
 8021956:	9307      	str	r3, [sp, #28]
 8021958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802195c:	931a      	str	r3, [sp, #104]	; 0x68
 802195e:	4654      	mov	r4, sl
 8021960:	2205      	movs	r2, #5
 8021962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021966:	4858      	ldr	r0, [pc, #352]	; (8021ac8 <_vfiprintf_r+0x24c>)
 8021968:	f7de fc12 	bl	8000190 <memchr>
 802196c:	9a04      	ldr	r2, [sp, #16]
 802196e:	b9d8      	cbnz	r0, 80219a8 <_vfiprintf_r+0x12c>
 8021970:	06d1      	lsls	r1, r2, #27
 8021972:	bf44      	itt	mi
 8021974:	2320      	movmi	r3, #32
 8021976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802197a:	0713      	lsls	r3, r2, #28
 802197c:	bf44      	itt	mi
 802197e:	232b      	movmi	r3, #43	; 0x2b
 8021980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021984:	f89a 3000 	ldrb.w	r3, [sl]
 8021988:	2b2a      	cmp	r3, #42	; 0x2a
 802198a:	d015      	beq.n	80219b8 <_vfiprintf_r+0x13c>
 802198c:	9a07      	ldr	r2, [sp, #28]
 802198e:	4654      	mov	r4, sl
 8021990:	2000      	movs	r0, #0
 8021992:	f04f 0c0a 	mov.w	ip, #10
 8021996:	4621      	mov	r1, r4
 8021998:	f811 3b01 	ldrb.w	r3, [r1], #1
 802199c:	3b30      	subs	r3, #48	; 0x30
 802199e:	2b09      	cmp	r3, #9
 80219a0:	d94e      	bls.n	8021a40 <_vfiprintf_r+0x1c4>
 80219a2:	b1b0      	cbz	r0, 80219d2 <_vfiprintf_r+0x156>
 80219a4:	9207      	str	r2, [sp, #28]
 80219a6:	e014      	b.n	80219d2 <_vfiprintf_r+0x156>
 80219a8:	eba0 0308 	sub.w	r3, r0, r8
 80219ac:	fa09 f303 	lsl.w	r3, r9, r3
 80219b0:	4313      	orrs	r3, r2
 80219b2:	9304      	str	r3, [sp, #16]
 80219b4:	46a2      	mov	sl, r4
 80219b6:	e7d2      	b.n	802195e <_vfiprintf_r+0xe2>
 80219b8:	9b03      	ldr	r3, [sp, #12]
 80219ba:	1d19      	adds	r1, r3, #4
 80219bc:	681b      	ldr	r3, [r3, #0]
 80219be:	9103      	str	r1, [sp, #12]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	bfbb      	ittet	lt
 80219c4:	425b      	neglt	r3, r3
 80219c6:	f042 0202 	orrlt.w	r2, r2, #2
 80219ca:	9307      	strge	r3, [sp, #28]
 80219cc:	9307      	strlt	r3, [sp, #28]
 80219ce:	bfb8      	it	lt
 80219d0:	9204      	strlt	r2, [sp, #16]
 80219d2:	7823      	ldrb	r3, [r4, #0]
 80219d4:	2b2e      	cmp	r3, #46	; 0x2e
 80219d6:	d10c      	bne.n	80219f2 <_vfiprintf_r+0x176>
 80219d8:	7863      	ldrb	r3, [r4, #1]
 80219da:	2b2a      	cmp	r3, #42	; 0x2a
 80219dc:	d135      	bne.n	8021a4a <_vfiprintf_r+0x1ce>
 80219de:	9b03      	ldr	r3, [sp, #12]
 80219e0:	1d1a      	adds	r2, r3, #4
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	9203      	str	r2, [sp, #12]
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	bfb8      	it	lt
 80219ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80219ee:	3402      	adds	r4, #2
 80219f0:	9305      	str	r3, [sp, #20]
 80219f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021ad8 <_vfiprintf_r+0x25c>
 80219f6:	7821      	ldrb	r1, [r4, #0]
 80219f8:	2203      	movs	r2, #3
 80219fa:	4650      	mov	r0, sl
 80219fc:	f7de fbc8 	bl	8000190 <memchr>
 8021a00:	b140      	cbz	r0, 8021a14 <_vfiprintf_r+0x198>
 8021a02:	2340      	movs	r3, #64	; 0x40
 8021a04:	eba0 000a 	sub.w	r0, r0, sl
 8021a08:	fa03 f000 	lsl.w	r0, r3, r0
 8021a0c:	9b04      	ldr	r3, [sp, #16]
 8021a0e:	4303      	orrs	r3, r0
 8021a10:	3401      	adds	r4, #1
 8021a12:	9304      	str	r3, [sp, #16]
 8021a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a18:	482c      	ldr	r0, [pc, #176]	; (8021acc <_vfiprintf_r+0x250>)
 8021a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021a1e:	2206      	movs	r2, #6
 8021a20:	f7de fbb6 	bl	8000190 <memchr>
 8021a24:	2800      	cmp	r0, #0
 8021a26:	d03f      	beq.n	8021aa8 <_vfiprintf_r+0x22c>
 8021a28:	4b29      	ldr	r3, [pc, #164]	; (8021ad0 <_vfiprintf_r+0x254>)
 8021a2a:	bb1b      	cbnz	r3, 8021a74 <_vfiprintf_r+0x1f8>
 8021a2c:	9b03      	ldr	r3, [sp, #12]
 8021a2e:	3307      	adds	r3, #7
 8021a30:	f023 0307 	bic.w	r3, r3, #7
 8021a34:	3308      	adds	r3, #8
 8021a36:	9303      	str	r3, [sp, #12]
 8021a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a3a:	443b      	add	r3, r7
 8021a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8021a3e:	e767      	b.n	8021910 <_vfiprintf_r+0x94>
 8021a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8021a44:	460c      	mov	r4, r1
 8021a46:	2001      	movs	r0, #1
 8021a48:	e7a5      	b.n	8021996 <_vfiprintf_r+0x11a>
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	3401      	adds	r4, #1
 8021a4e:	9305      	str	r3, [sp, #20]
 8021a50:	4619      	mov	r1, r3
 8021a52:	f04f 0c0a 	mov.w	ip, #10
 8021a56:	4620      	mov	r0, r4
 8021a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021a5c:	3a30      	subs	r2, #48	; 0x30
 8021a5e:	2a09      	cmp	r2, #9
 8021a60:	d903      	bls.n	8021a6a <_vfiprintf_r+0x1ee>
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d0c5      	beq.n	80219f2 <_vfiprintf_r+0x176>
 8021a66:	9105      	str	r1, [sp, #20]
 8021a68:	e7c3      	b.n	80219f2 <_vfiprintf_r+0x176>
 8021a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8021a6e:	4604      	mov	r4, r0
 8021a70:	2301      	movs	r3, #1
 8021a72:	e7f0      	b.n	8021a56 <_vfiprintf_r+0x1da>
 8021a74:	ab03      	add	r3, sp, #12
 8021a76:	9300      	str	r3, [sp, #0]
 8021a78:	462a      	mov	r2, r5
 8021a7a:	4b16      	ldr	r3, [pc, #88]	; (8021ad4 <_vfiprintf_r+0x258>)
 8021a7c:	a904      	add	r1, sp, #16
 8021a7e:	4630      	mov	r0, r6
 8021a80:	f7fd fcd2 	bl	801f428 <_printf_float>
 8021a84:	4607      	mov	r7, r0
 8021a86:	1c78      	adds	r0, r7, #1
 8021a88:	d1d6      	bne.n	8021a38 <_vfiprintf_r+0x1bc>
 8021a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021a8c:	07d9      	lsls	r1, r3, #31
 8021a8e:	d405      	bmi.n	8021a9c <_vfiprintf_r+0x220>
 8021a90:	89ab      	ldrh	r3, [r5, #12]
 8021a92:	059a      	lsls	r2, r3, #22
 8021a94:	d402      	bmi.n	8021a9c <_vfiprintf_r+0x220>
 8021a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021a98:	f7fd faa0 	bl	801efdc <__retarget_lock_release_recursive>
 8021a9c:	89ab      	ldrh	r3, [r5, #12]
 8021a9e:	065b      	lsls	r3, r3, #25
 8021aa0:	f53f af12 	bmi.w	80218c8 <_vfiprintf_r+0x4c>
 8021aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021aa6:	e711      	b.n	80218cc <_vfiprintf_r+0x50>
 8021aa8:	ab03      	add	r3, sp, #12
 8021aaa:	9300      	str	r3, [sp, #0]
 8021aac:	462a      	mov	r2, r5
 8021aae:	4b09      	ldr	r3, [pc, #36]	; (8021ad4 <_vfiprintf_r+0x258>)
 8021ab0:	a904      	add	r1, sp, #16
 8021ab2:	4630      	mov	r0, r6
 8021ab4:	f7fd ff5c 	bl	801f970 <_printf_i>
 8021ab8:	e7e4      	b.n	8021a84 <_vfiprintf_r+0x208>
 8021aba:	bf00      	nop
 8021abc:	08022b18 	.word	0x08022b18
 8021ac0:	08022b38 	.word	0x08022b38
 8021ac4:	08022af8 	.word	0x08022af8
 8021ac8:	08022d84 	.word	0x08022d84
 8021acc:	08022d8e 	.word	0x08022d8e
 8021ad0:	0801f429 	.word	0x0801f429
 8021ad4:	08021857 	.word	0x08021857
 8021ad8:	08022d8a 	.word	0x08022d8a

08021adc <_read_r>:
 8021adc:	b538      	push	{r3, r4, r5, lr}
 8021ade:	4d07      	ldr	r5, [pc, #28]	; (8021afc <_read_r+0x20>)
 8021ae0:	4604      	mov	r4, r0
 8021ae2:	4608      	mov	r0, r1
 8021ae4:	4611      	mov	r1, r2
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	602a      	str	r2, [r5, #0]
 8021aea:	461a      	mov	r2, r3
 8021aec:	f7e1 fe8c 	bl	8003808 <_read>
 8021af0:	1c43      	adds	r3, r0, #1
 8021af2:	d102      	bne.n	8021afa <_read_r+0x1e>
 8021af4:	682b      	ldr	r3, [r5, #0]
 8021af6:	b103      	cbz	r3, 8021afa <_read_r+0x1e>
 8021af8:	6023      	str	r3, [r4, #0]
 8021afa:	bd38      	pop	{r3, r4, r5, pc}
 8021afc:	200099b8 	.word	0x200099b8

08021b00 <__ascii_wctomb>:
 8021b00:	b149      	cbz	r1, 8021b16 <__ascii_wctomb+0x16>
 8021b02:	2aff      	cmp	r2, #255	; 0xff
 8021b04:	bf85      	ittet	hi
 8021b06:	238a      	movhi	r3, #138	; 0x8a
 8021b08:	6003      	strhi	r3, [r0, #0]
 8021b0a:	700a      	strbls	r2, [r1, #0]
 8021b0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021b10:	bf98      	it	ls
 8021b12:	2001      	movls	r0, #1
 8021b14:	4770      	bx	lr
 8021b16:	4608      	mov	r0, r1
 8021b18:	4770      	bx	lr
	...

08021b1c <__assert_func>:
 8021b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021b1e:	4614      	mov	r4, r2
 8021b20:	461a      	mov	r2, r3
 8021b22:	4b09      	ldr	r3, [pc, #36]	; (8021b48 <__assert_func+0x2c>)
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	4605      	mov	r5, r0
 8021b28:	68d8      	ldr	r0, [r3, #12]
 8021b2a:	b14c      	cbz	r4, 8021b40 <__assert_func+0x24>
 8021b2c:	4b07      	ldr	r3, [pc, #28]	; (8021b4c <__assert_func+0x30>)
 8021b2e:	9100      	str	r1, [sp, #0]
 8021b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021b34:	4906      	ldr	r1, [pc, #24]	; (8021b50 <__assert_func+0x34>)
 8021b36:	462b      	mov	r3, r5
 8021b38:	f000 f80e 	bl	8021b58 <fiprintf>
 8021b3c:	f000 f826 	bl	8021b8c <abort>
 8021b40:	4b04      	ldr	r3, [pc, #16]	; (8021b54 <__assert_func+0x38>)
 8021b42:	461c      	mov	r4, r3
 8021b44:	e7f3      	b.n	8021b2e <__assert_func+0x12>
 8021b46:	bf00      	nop
 8021b48:	2000008c 	.word	0x2000008c
 8021b4c:	08022d95 	.word	0x08022d95
 8021b50:	08022da2 	.word	0x08022da2
 8021b54:	08022dd0 	.word	0x08022dd0

08021b58 <fiprintf>:
 8021b58:	b40e      	push	{r1, r2, r3}
 8021b5a:	b503      	push	{r0, r1, lr}
 8021b5c:	4601      	mov	r1, r0
 8021b5e:	ab03      	add	r3, sp, #12
 8021b60:	4805      	ldr	r0, [pc, #20]	; (8021b78 <fiprintf+0x20>)
 8021b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b66:	6800      	ldr	r0, [r0, #0]
 8021b68:	9301      	str	r3, [sp, #4]
 8021b6a:	f7ff fe87 	bl	802187c <_vfiprintf_r>
 8021b6e:	b002      	add	sp, #8
 8021b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b74:	b003      	add	sp, #12
 8021b76:	4770      	bx	lr
 8021b78:	2000008c 	.word	0x2000008c

08021b7c <_malloc_usable_size_r>:
 8021b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021b80:	1f18      	subs	r0, r3, #4
 8021b82:	2b00      	cmp	r3, #0
 8021b84:	bfbc      	itt	lt
 8021b86:	580b      	ldrlt	r3, [r1, r0]
 8021b88:	18c0      	addlt	r0, r0, r3
 8021b8a:	4770      	bx	lr

08021b8c <abort>:
 8021b8c:	b508      	push	{r3, lr}
 8021b8e:	2006      	movs	r0, #6
 8021b90:	f000 f82c 	bl	8021bec <raise>
 8021b94:	2001      	movs	r0, #1
 8021b96:	f7e1 fe2d 	bl	80037f4 <_exit>

08021b9a <_raise_r>:
 8021b9a:	291f      	cmp	r1, #31
 8021b9c:	b538      	push	{r3, r4, r5, lr}
 8021b9e:	4604      	mov	r4, r0
 8021ba0:	460d      	mov	r5, r1
 8021ba2:	d904      	bls.n	8021bae <_raise_r+0x14>
 8021ba4:	2316      	movs	r3, #22
 8021ba6:	6003      	str	r3, [r0, #0]
 8021ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8021bac:	bd38      	pop	{r3, r4, r5, pc}
 8021bae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021bb0:	b112      	cbz	r2, 8021bb8 <_raise_r+0x1e>
 8021bb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021bb6:	b94b      	cbnz	r3, 8021bcc <_raise_r+0x32>
 8021bb8:	4620      	mov	r0, r4
 8021bba:	f000 f831 	bl	8021c20 <_getpid_r>
 8021bbe:	462a      	mov	r2, r5
 8021bc0:	4601      	mov	r1, r0
 8021bc2:	4620      	mov	r0, r4
 8021bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021bc8:	f000 b818 	b.w	8021bfc <_kill_r>
 8021bcc:	2b01      	cmp	r3, #1
 8021bce:	d00a      	beq.n	8021be6 <_raise_r+0x4c>
 8021bd0:	1c59      	adds	r1, r3, #1
 8021bd2:	d103      	bne.n	8021bdc <_raise_r+0x42>
 8021bd4:	2316      	movs	r3, #22
 8021bd6:	6003      	str	r3, [r0, #0]
 8021bd8:	2001      	movs	r0, #1
 8021bda:	e7e7      	b.n	8021bac <_raise_r+0x12>
 8021bdc:	2400      	movs	r4, #0
 8021bde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021be2:	4628      	mov	r0, r5
 8021be4:	4798      	blx	r3
 8021be6:	2000      	movs	r0, #0
 8021be8:	e7e0      	b.n	8021bac <_raise_r+0x12>
	...

08021bec <raise>:
 8021bec:	4b02      	ldr	r3, [pc, #8]	; (8021bf8 <raise+0xc>)
 8021bee:	4601      	mov	r1, r0
 8021bf0:	6818      	ldr	r0, [r3, #0]
 8021bf2:	f7ff bfd2 	b.w	8021b9a <_raise_r>
 8021bf6:	bf00      	nop
 8021bf8:	2000008c 	.word	0x2000008c

08021bfc <_kill_r>:
 8021bfc:	b538      	push	{r3, r4, r5, lr}
 8021bfe:	4d07      	ldr	r5, [pc, #28]	; (8021c1c <_kill_r+0x20>)
 8021c00:	2300      	movs	r3, #0
 8021c02:	4604      	mov	r4, r0
 8021c04:	4608      	mov	r0, r1
 8021c06:	4611      	mov	r1, r2
 8021c08:	602b      	str	r3, [r5, #0]
 8021c0a:	f7e1 fde3 	bl	80037d4 <_kill>
 8021c0e:	1c43      	adds	r3, r0, #1
 8021c10:	d102      	bne.n	8021c18 <_kill_r+0x1c>
 8021c12:	682b      	ldr	r3, [r5, #0]
 8021c14:	b103      	cbz	r3, 8021c18 <_kill_r+0x1c>
 8021c16:	6023      	str	r3, [r4, #0]
 8021c18:	bd38      	pop	{r3, r4, r5, pc}
 8021c1a:	bf00      	nop
 8021c1c:	200099b8 	.word	0x200099b8

08021c20 <_getpid_r>:
 8021c20:	f7e1 bdd0 	b.w	80037c4 <_getpid>

08021c24 <_init>:
 8021c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c26:	bf00      	nop
 8021c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021c2a:	bc08      	pop	{r3}
 8021c2c:	469e      	mov	lr, r3
 8021c2e:	4770      	bx	lr

08021c30 <_fini>:
 8021c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c32:	bf00      	nop
 8021c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021c36:	bc08      	pop	{r3}
 8021c38:	469e      	mov	lr, r3
 8021c3a:	4770      	bx	lr
