
Test_Wifi_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d74  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009688  08009688  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009690  08009690  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009690  08009690  00019690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  20000074  0800970c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce8  0800970c  00021ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148e5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003698  00000000  00000000  00034982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00038020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00039300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f41  00000000  00000000  0003a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154b3  00000000  00000000  000543b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009672f  00000000  00000000  0006986c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fff9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  000fffec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08008e9c 	.word	0x08008e9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08008e9c 	.word	0x08008e9c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b976 	b.w	8000494 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	4688      	mov	r8, r1
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d14d      	bne.n	800026c <__udivmoddi4+0xac>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4694      	mov	ip, r2
 80001d4:	d968      	bls.n	80002a8 <__udivmoddi4+0xe8>
 80001d6:	fab2 f282 	clz	r2, r2
 80001da:	b152      	cbz	r2, 80001f2 <__udivmoddi4+0x32>
 80001dc:	fa01 f302 	lsl.w	r3, r1, r2
 80001e0:	f1c2 0120 	rsb	r1, r2, #32
 80001e4:	fa20 f101 	lsr.w	r1, r0, r1
 80001e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ec:	ea41 0803 	orr.w	r8, r1, r3
 80001f0:	4094      	lsls	r4, r2
 80001f2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001fa:	fa1f fe8c 	uxth.w	lr, ip
 80001fe:	fb01 8817 	mls	r8, r1, r7, r8
 8000202:	fb07 f00e 	mul.w	r0, r7, lr
 8000206:	0c23      	lsrs	r3, r4, #16
 8000208:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800020c:	4298      	cmp	r0, r3
 800020e:	d90a      	bls.n	8000226 <__udivmoddi4+0x66>
 8000210:	eb1c 0303 	adds.w	r3, ip, r3
 8000214:	f107 35ff 	add.w	r5, r7, #4294967295
 8000218:	f080 811e 	bcs.w	8000458 <__udivmoddi4+0x298>
 800021c:	4298      	cmp	r0, r3
 800021e:	f240 811b 	bls.w	8000458 <__udivmoddi4+0x298>
 8000222:	3f02      	subs	r7, #2
 8000224:	4463      	add	r3, ip
 8000226:	1a1b      	subs	r3, r3, r0
 8000228:	fbb3 f0f1 	udiv	r0, r3, r1
 800022c:	fb01 3310 	mls	r3, r1, r0, r3
 8000230:	fb00 fe0e 	mul.w	lr, r0, lr
 8000234:	b2a4      	uxth	r4, r4
 8000236:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800023a:	45a6      	cmp	lr, r4
 800023c:	d90a      	bls.n	8000254 <__udivmoddi4+0x94>
 800023e:	eb1c 0404 	adds.w	r4, ip, r4
 8000242:	f100 33ff 	add.w	r3, r0, #4294967295
 8000246:	f080 8109 	bcs.w	800045c <__udivmoddi4+0x29c>
 800024a:	45a6      	cmp	lr, r4
 800024c:	f240 8106 	bls.w	800045c <__udivmoddi4+0x29c>
 8000250:	4464      	add	r4, ip
 8000252:	3802      	subs	r0, #2
 8000254:	2100      	movs	r1, #0
 8000256:	eba4 040e 	sub.w	r4, r4, lr
 800025a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025e:	b11e      	cbz	r6, 8000268 <__udivmoddi4+0xa8>
 8000260:	2300      	movs	r3, #0
 8000262:	40d4      	lsrs	r4, r2
 8000264:	e9c6 4300 	strd	r4, r3, [r6]
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	428b      	cmp	r3, r1
 800026e:	d908      	bls.n	8000282 <__udivmoddi4+0xc2>
 8000270:	2e00      	cmp	r6, #0
 8000272:	f000 80ee 	beq.w	8000452 <__udivmoddi4+0x292>
 8000276:	2100      	movs	r1, #0
 8000278:	e9c6 0500 	strd	r0, r5, [r6]
 800027c:	4608      	mov	r0, r1
 800027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000282:	fab3 f183 	clz	r1, r3
 8000286:	2900      	cmp	r1, #0
 8000288:	d14a      	bne.n	8000320 <__udivmoddi4+0x160>
 800028a:	42ab      	cmp	r3, r5
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd4>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fc 	bhi.w	800048c <__udivmoddi4+0x2cc>
 8000294:	1a84      	subs	r4, r0, r2
 8000296:	eb65 0303 	sbc.w	r3, r5, r3
 800029a:	2001      	movs	r0, #1
 800029c:	4698      	mov	r8, r3
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d0e2      	beq.n	8000268 <__udivmoddi4+0xa8>
 80002a2:	e9c6 4800 	strd	r4, r8, [r6]
 80002a6:	e7df      	b.n	8000268 <__udivmoddi4+0xa8>
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xec>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	f040 8091 	bne.w	80003d8 <__udivmoddi4+0x218>
 80002b6:	eba1 000c 	sub.w	r0, r1, ip
 80002ba:	2101      	movs	r1, #1
 80002bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c0:	fa1f fe8c 	uxth.w	lr, ip
 80002c4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c8:	fb07 0013 	mls	r0, r7, r3, r0
 80002cc:	0c25      	lsrs	r5, r4, #16
 80002ce:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002d2:	fb0e f003 	mul.w	r0, lr, r3
 80002d6:	42a8      	cmp	r0, r5
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x12c>
 80002da:	eb1c 0505 	adds.w	r5, ip, r5
 80002de:	f103 38ff 	add.w	r8, r3, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x12a>
 80002e4:	42a8      	cmp	r0, r5
 80002e6:	f200 80ce 	bhi.w	8000486 <__udivmoddi4+0x2c6>
 80002ea:	4643      	mov	r3, r8
 80002ec:	1a2d      	subs	r5, r5, r0
 80002ee:	fbb5 f0f7 	udiv	r0, r5, r7
 80002f2:	fb07 5510 	mls	r5, r7, r0, r5
 80002f6:	fb0e fe00 	mul.w	lr, lr, r0
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000300:	45a6      	cmp	lr, r4
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x156>
 8000304:	eb1c 0404 	adds.w	r4, ip, r4
 8000308:	f100 35ff 	add.w	r5, r0, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x154>
 800030e:	45a6      	cmp	lr, r4
 8000310:	f200 80b6 	bhi.w	8000480 <__udivmoddi4+0x2c0>
 8000314:	4628      	mov	r0, r5
 8000316:	eba4 040e 	sub.w	r4, r4, lr
 800031a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031e:	e79e      	b.n	800025e <__udivmoddi4+0x9e>
 8000320:	f1c1 0720 	rsb	r7, r1, #32
 8000324:	408b      	lsls	r3, r1
 8000326:	fa22 fc07 	lsr.w	ip, r2, r7
 800032a:	ea4c 0c03 	orr.w	ip, ip, r3
 800032e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000332:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000336:	fbba f8f9 	udiv	r8, sl, r9
 800033a:	fa20 f307 	lsr.w	r3, r0, r7
 800033e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000342:	408d      	lsls	r5, r1
 8000344:	fa1f fe8c 	uxth.w	lr, ip
 8000348:	431d      	orrs	r5, r3
 800034a:	fa00 f301 	lsl.w	r3, r0, r1
 800034e:	fb08 f00e 	mul.w	r0, r8, lr
 8000352:	0c2c      	lsrs	r4, r5, #16
 8000354:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000358:	42a0      	cmp	r0, r4
 800035a:	fa02 f201 	lsl.w	r2, r2, r1
 800035e:	d90b      	bls.n	8000378 <__udivmoddi4+0x1b8>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f108 3aff 	add.w	sl, r8, #4294967295
 8000368:	f080 8088 	bcs.w	800047c <__udivmoddi4+0x2bc>
 800036c:	42a0      	cmp	r0, r4
 800036e:	f240 8085 	bls.w	800047c <__udivmoddi4+0x2bc>
 8000372:	f1a8 0802 	sub.w	r8, r8, #2
 8000376:	4464      	add	r4, ip
 8000378:	1a24      	subs	r4, r4, r0
 800037a:	fbb4 f0f9 	udiv	r0, r4, r9
 800037e:	fb09 4410 	mls	r4, r9, r0, r4
 8000382:	fb00 fe0e 	mul.w	lr, r0, lr
 8000386:	b2ad      	uxth	r5, r5
 8000388:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800038c:	45a6      	cmp	lr, r4
 800038e:	d908      	bls.n	80003a2 <__udivmoddi4+0x1e2>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f100 35ff 	add.w	r5, r0, #4294967295
 8000398:	d26c      	bcs.n	8000474 <__udivmoddi4+0x2b4>
 800039a:	45a6      	cmp	lr, r4
 800039c:	d96a      	bls.n	8000474 <__udivmoddi4+0x2b4>
 800039e:	3802      	subs	r0, #2
 80003a0:	4464      	add	r4, ip
 80003a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a6:	fba0 9502 	umull	r9, r5, r0, r2
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	42ac      	cmp	r4, r5
 80003b0:	46c8      	mov	r8, r9
 80003b2:	46ae      	mov	lr, r5
 80003b4:	d356      	bcc.n	8000464 <__udivmoddi4+0x2a4>
 80003b6:	d053      	beq.n	8000460 <__udivmoddi4+0x2a0>
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d069      	beq.n	8000490 <__udivmoddi4+0x2d0>
 80003bc:	ebb3 0208 	subs.w	r2, r3, r8
 80003c0:	eb64 040e 	sbc.w	r4, r4, lr
 80003c4:	fa22 f301 	lsr.w	r3, r2, r1
 80003c8:	fa04 f707 	lsl.w	r7, r4, r7
 80003cc:	431f      	orrs	r7, r3
 80003ce:	40cc      	lsrs	r4, r1
 80003d0:	e9c6 7400 	strd	r7, r4, [r6]
 80003d4:	2100      	movs	r1, #0
 80003d6:	e747      	b.n	8000268 <__udivmoddi4+0xa8>
 80003d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003dc:	f1c2 0120 	rsb	r1, r2, #32
 80003e0:	fa25 f301 	lsr.w	r3, r5, r1
 80003e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e8:	fa20 f101 	lsr.w	r1, r0, r1
 80003ec:	4095      	lsls	r5, r2
 80003ee:	430d      	orrs	r5, r1
 80003f0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f4:	fb07 3311 	mls	r3, r7, r1, r3
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	0c28      	lsrs	r0, r5, #16
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	fb01 f30e 	mul.w	r3, r1, lr
 8000406:	4283      	cmp	r3, r0
 8000408:	fa04 f402 	lsl.w	r4, r4, r2
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x260>
 800040e:	eb1c 0000 	adds.w	r0, ip, r0
 8000412:	f101 38ff 	add.w	r8, r1, #4294967295
 8000416:	d22f      	bcs.n	8000478 <__udivmoddi4+0x2b8>
 8000418:	4283      	cmp	r3, r0
 800041a:	d92d      	bls.n	8000478 <__udivmoddi4+0x2b8>
 800041c:	3902      	subs	r1, #2
 800041e:	4460      	add	r0, ip
 8000420:	1ac0      	subs	r0, r0, r3
 8000422:	fbb0 f3f7 	udiv	r3, r0, r7
 8000426:	fb07 0013 	mls	r0, r7, r3, r0
 800042a:	b2ad      	uxth	r5, r5
 800042c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000430:	fb03 f00e 	mul.w	r0, r3, lr
 8000434:	42a8      	cmp	r0, r5
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x28a>
 8000438:	eb1c 0505 	adds.w	r5, ip, r5
 800043c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000440:	d216      	bcs.n	8000470 <__udivmoddi4+0x2b0>
 8000442:	42a8      	cmp	r0, r5
 8000444:	d914      	bls.n	8000470 <__udivmoddi4+0x2b0>
 8000446:	3b02      	subs	r3, #2
 8000448:	4465      	add	r5, ip
 800044a:	1a28      	subs	r0, r5, r0
 800044c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000450:	e738      	b.n	80002c4 <__udivmoddi4+0x104>
 8000452:	4631      	mov	r1, r6
 8000454:	4630      	mov	r0, r6
 8000456:	e707      	b.n	8000268 <__udivmoddi4+0xa8>
 8000458:	462f      	mov	r7, r5
 800045a:	e6e4      	b.n	8000226 <__udivmoddi4+0x66>
 800045c:	4618      	mov	r0, r3
 800045e:	e6f9      	b.n	8000254 <__udivmoddi4+0x94>
 8000460:	454b      	cmp	r3, r9
 8000462:	d2a9      	bcs.n	80003b8 <__udivmoddi4+0x1f8>
 8000464:	ebb9 0802 	subs.w	r8, r9, r2
 8000468:	eb65 0e0c 	sbc.w	lr, r5, ip
 800046c:	3801      	subs	r0, #1
 800046e:	e7a3      	b.n	80003b8 <__udivmoddi4+0x1f8>
 8000470:	4643      	mov	r3, r8
 8000472:	e7ea      	b.n	800044a <__udivmoddi4+0x28a>
 8000474:	4628      	mov	r0, r5
 8000476:	e794      	b.n	80003a2 <__udivmoddi4+0x1e2>
 8000478:	4641      	mov	r1, r8
 800047a:	e7d1      	b.n	8000420 <__udivmoddi4+0x260>
 800047c:	46d0      	mov	r8, sl
 800047e:	e77b      	b.n	8000378 <__udivmoddi4+0x1b8>
 8000480:	4464      	add	r4, ip
 8000482:	3802      	subs	r0, #2
 8000484:	e747      	b.n	8000316 <__udivmoddi4+0x156>
 8000486:	3b02      	subs	r3, #2
 8000488:	4465      	add	r5, ip
 800048a:	e72f      	b.n	80002ec <__udivmoddi4+0x12c>
 800048c:	4608      	mov	r0, r1
 800048e:	e706      	b.n	800029e <__udivmoddi4+0xde>
 8000490:	4631      	mov	r1, r6
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0xa8>

08000494 <__aeabi_idiv0>:
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop

08000498 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <vApplicationGetIdleTaskMemory+0x28>)
 80004a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	20000348 	.word	0x20000348
 80004c4:	200003fc 	.word	0x200003fc

080004c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c8:	b5b0      	push	{r4, r5, r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	printf("Start init wifi ...\n");
 80004ce:	4814      	ldr	r0, [pc, #80]	; (8000520 <MX_FREERTOS_Init+0x58>)
 80004d0:	f006 feec 	bl	80072ac <puts>
	Wifi_Init(osPriorityHigh);
 80004d4:	2002      	movs	r0, #2
 80004d6:	f000 ffc3 	bl	8001460 <Wifi_Init>
	if(Wifi_Restart() == true)printf(" wifi_restart successful ! \n");
 80004da:	f001 f827 	bl	800152c <Wifi_Restart>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d003      	beq.n	80004ec <MX_FREERTOS_Init+0x24>
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <MX_FREERTOS_Init+0x5c>)
 80004e6:	f006 fee1 	bl	80072ac <puts>
 80004ea:	e002      	b.n	80004f2 <MX_FREERTOS_Init+0x2a>
	else printf(" wifi_restart failed ! \n");
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <MX_FREERTOS_Init+0x60>)
 80004ee:	f006 fedd 	bl	80072ac <puts>
	//Wifi_TcpIp_GetConnectionStatus();
	Wifi_UserInit();
 80004f2:	f001 ff7d 	bl	80023f0 <Wifi_UserInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadStaticDef(Task01, StartTask01, osPriorityNormal, 0, 128, Task01Buffer, &Task01ControlBlock);
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_FREERTOS_Init+0x64>)
 80004f8:	1d3c      	adds	r4, r7, #4
 80004fa:	461d      	mov	r5, r3
 80004fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000500:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000504:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f004 f936 	bl	800477e <osThreadCreate>
 8000512:	4603      	mov	r3, r0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <MX_FREERTOS_Init+0x68>)
 8000516:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bdb0      	pop	{r4, r5, r7, pc}
 8000520:	08008ebc 	.word	0x08008ebc
 8000524:	08008ed0 	.word	0x08008ed0
 8000528:	08008eec 	.word	0x08008eec
 800052c:	08008f04 	.word	0x08008f04
 8000530:	20000090 	.word	0x20000090

08000534 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f004 f96a 	bl	8004816 <osDelay>
 8000542:	e7fb      	b.n	800053c <StartTask01+0x8>

08000544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <MX_GPIO_Init+0xc0>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a29      	ldr	r2, [pc, #164]	; (8000604 <MX_GPIO_Init+0xc0>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_GPIO_Init+0xc0>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <MX_GPIO_Init+0xc0>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a23      	ldr	r2, [pc, #140]	; (8000604 <MX_GPIO_Init+0xc0>)
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MX_GPIO_Init+0xc0>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_GPIO_Init+0xc0>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <MX_GPIO_Init+0xc0>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_GPIO_Init+0xc0>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a17      	ldr	r2, [pc, #92]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2120      	movs	r1, #32
 80005be:	4812      	ldr	r0, [pc, #72]	; (8000608 <MX_GPIO_Init+0xc4>)
 80005c0:	f002 face 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_GPIO_Init+0xc8>)
 80005dc:	f002 f930 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e0:	2320      	movs	r3, #32
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_GPIO_Init+0xc4>)
 80005f8:	f002 f922 	bl	8002840 <HAL_GPIO_Init>

}
 80005fc:	bf00      	nop
 80005fe:	3728      	adds	r7, #40	; 0x28
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000
 800060c:	40020800 	.word	0x40020800

08000610 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000618:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d013      	beq.n	8000650 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000628:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800062c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000630:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000638:	e000      	b.n	800063c <ITM_SendChar+0x2c>
    {
      __NOP();
 800063a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800063c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000646:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e009      	b.n	8000682 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffca 	bl	8000610 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	dbf1      	blt.n	800066e <_write+0x12>
}
return len;
 800068a:	687b      	ldr	r3, [r7, #4]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 ff3f 	bl	800251a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f80c 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ff50 	bl	8000544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 fa18 	bl	8000ad8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80006a8:	f000 f9ec 	bl	8000a84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006ac:	f7ff ff0c 	bl	80004c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006b0:	f004 f85e 	bl	8004770 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x20>
	...

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b092      	sub	sp, #72	; 0x48
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fccd 	bl	8007066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <SystemClock_Config+0x98>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <SystemClock_Config+0x98>)
 80006e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	2301      	movs	r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2300      	movs	r3, #0
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000704:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fa3e 	bl	8002b90 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800071a:	f000 f82a 	bl	8000772 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2101      	movs	r1, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fd5a 	bl	80031f0 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000742:	f000 f816 	bl	8000772 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3748      	adds	r7, #72	; 0x48
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40007000 	.word	0x40007000

08000754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000766:	f001 fef1 	bl	800254c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000776:	b672      	cpsid	i
}
 8000778:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077a:	e7fe      	b.n	800077a <Error_Handler+0x8>

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_MspInit+0x64>)
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <HAL_MspInit+0x64>)
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	6253      	str	r3, [r2, #36]	; 0x24
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_MspInit+0x64>)
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_MspInit+0x64>)
 800079c:	6a1b      	ldr	r3, [r3, #32]
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <HAL_MspInit+0x64>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6213      	str	r3, [r2, #32]
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_MspInit+0x64>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_MspInit+0x64>)
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_MspInit+0x64>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6253      	str	r3, [r2, #36]	; 0x24
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_MspInit+0x64>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	210f      	movs	r1, #15
 80007ce:	f06f 0001 	mvn.w	r0, #1
 80007d2:	f001 ff8c 	bl	80026ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <HAL_InitTick+0xe4>)
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <HAL_InitTick+0xe4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6253      	str	r3, [r2, #36]	; 0x24
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <HAL_InitTick+0xe4>)
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000812:	f107 0210 	add.w	r2, r7, #16
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f002 ff4d 	bl	80036bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000822:	6a3b      	ldr	r3, [r7, #32]
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	2b00      	cmp	r3, #0
 800082a:	d103      	bne.n	8000834 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800082c:	f002 ff1e 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8000830:	6378      	str	r0, [r7, #52]	; 0x34
 8000832:	e004      	b.n	800083e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000834:	f002 ff1a 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8000838:	4603      	mov	r3, r0
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_InitTick+0xe8>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	0c9b      	lsrs	r3, r3, #18
 8000848:	3b01      	subs	r3, #1
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <HAL_InitTick+0xec>)
 800084e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000852:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <HAL_InitTick+0xec>)
 8000856:	f240 32e7 	movw	r2, #999	; 0x3e7
 800085a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <HAL_InitTick+0xec>)
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_InitTick+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_InitTick+0xec>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800086e:	4818      	ldr	r0, [pc, #96]	; (80008d0 <HAL_InitTick+0xec>)
 8000870:	f002 ffb4 	bl	80037dc <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800087a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800087e:	2b00      	cmp	r3, #0
 8000880:	d11b      	bne.n	80008ba <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000882:	4813      	ldr	r0, [pc, #76]	; (80008d0 <HAL_InitTick+0xec>)
 8000884:	f002 fff2 	bl	800386c <HAL_TIM_Base_Start_IT>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800088e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000892:	2b00      	cmp	r3, #0
 8000894:	d111      	bne.n	80008ba <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000896:	201c      	movs	r0, #28
 8000898:	f001 ff45 	bl	8002726 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d808      	bhi.n	80008b4 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	201c      	movs	r0, #28
 80008a8:	f001 ff21 	bl	80026ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <HAL_InitTick+0xf0>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e002      	b.n	80008ba <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3738      	adds	r7, #56	; 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	200005fc 	.word	0x200005fc
 80008d4:	20000004 	.word	0x20000004

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM2_IRQHandler+0x10>)
 800090a:	f003 f801 	bl	8003910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200005fc 	.word	0x200005fc

08000918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <USART1_IRQHandler+0x14>)
 800091e:	f003 fa77 	bl	8003e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  Wifi_RxCallBack();
 8000922:	f000 fb9f 	bl	8001064 <Wifi_RxCallBack>
  /* USER CODE END USART1_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000640 	.word	0x20000640

08000930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return 1;
 8000934:	2301      	movs	r3, #1
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <_kill>:

int _kill(int pid, int sig)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000948:	f006 fa5c 	bl	8006e04 <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	2216      	movs	r2, #22
 8000950:	601a      	str	r2, [r3, #0]
  return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_exit>:

void _exit (int status)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000966:	f04f 31ff 	mov.w	r1, #4294967295
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffe7 	bl	800093e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000970:	e7fe      	b.n	8000970 <_exit+0x12>

08000972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e00a      	b.n	800099a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000984:	f3af 8000 	nop.w
 8000988:	4601      	mov	r1, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	60ba      	str	r2, [r7, #8]
 8000990:	b2ca      	uxtb	r2, r1
 8000992:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3301      	adds	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbf0      	blt.n	8000984 <_read+0x12>
  }

  return len;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d2:	605a      	str	r2, [r3, #4]
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <_isatty>:

int _isatty(int file)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f006 f9e2 	bl	8006e04 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20014000 	.word	0x20014000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	2000063c 	.word	0x2000063c
 8000a74:	20001ce8 	.word	0x20001ce8

08000a78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_USART1_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000abc:	f003 f898 	bl	8003bf0 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f7ff fe54 	bl	8000772 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000640 	.word	0x20000640
 8000ad4:	40013800 	.word	0x40013800

08000ad8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART2_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f003 f86e 	bl	8003bf0 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f7ff fe2a 	bl	8000772 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000684 	.word	0x20000684
 8000b28:	40004400 	.word	0x40004400

08000b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <HAL_UART_MspInit+0xec>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d133      	bne.n	8000bb6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4e:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6213      	str	r3, [r2, #32]
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a2c      	ldr	r2, [pc, #176]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b90:	2307      	movs	r3, #7
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4821      	ldr	r0, [pc, #132]	; (8000c20 <HAL_UART_MspInit+0xf4>)
 8000b9c:	f001 fe50 	bl	8002840 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	2025      	movs	r0, #37	; 0x25
 8000ba6:	f001 fda2 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000baa:	2025      	movs	r0, #37	; 0x25
 8000bac:	f001 fdbb 	bl	8002726 <HAL_NVIC_EnableIRQ>
    Wifi_RxCallBack();
 8000bb0:	f000 fa58 	bl	8001064 <Wifi_RxCallBack>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb4:	e02c      	b.n	8000c10 <HAL_UART_MspInit+0xe4>
  else if(uartHandle->Instance==USART2)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1a      	ldr	r2, [pc, #104]	; (8000c24 <HAL_UART_MspInit+0xf8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d127      	bne.n	8000c10 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bca:	6253      	str	r3, [r2, #36]	; 0x24
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	61d3      	str	r3, [r2, #28]
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_UART_MspInit+0xf0>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c00:	2307      	movs	r3, #7
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_UART_MspInit+0xf4>)
 8000c0c:	f001 fe18 	bl	8002840 <HAL_GPIO_Init>
}
 8000c10:	bf00      	nop
 8000c12:	3730      	adds	r7, #48	; 0x30
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40013800 	.word	0x40013800
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40004400 	.word	0x40004400

08000c28 <Wifi_SendRaw>:

Wifi_t	Wifi;

//#########################################################################################################
bool	Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3a:	d812      	bhi.n	8000c62 <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	480a      	ldr	r0, [pc, #40]	; (8000c6c <Wifi_SendRaw+0x44>)
 8000c44:	f006 fa01 	bl	800704a <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 8000c48:	887a      	ldrh	r2, [r7, #2]
 8000c4a:	2364      	movs	r3, #100	; 0x64
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <Wifi_SendRaw+0x48>)
 8000c50:	f003 f81b 	bl	8003c8a <HAL_UART_Transmit>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <Wifi_SendRaw+0x36>
			return true;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e002      	b.n	8000c64 <Wifi_SendRaw+0x3c>
		else
			return false;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200008d1 	.word	0x200008d1
 8000c70:	20000640 	.word	0x20000640

08000c74 <Wifi_SendString>:
//#########################################################################################################
bool	Wifi_SendString(char *data)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff fa7f 	bl	8000180 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4619      	mov	r1, r3
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffcd 	bl	8000c28 <Wifi_SendRaw>
 8000c8e:	4603      	mov	r3, r0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <Wifi_SendStringAndWait>:
//#########################################################################################################
bool	Wifi_SendStringAndWait(char *data,uint16_t DelayMs)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
	if(Wifi_SendRaw((uint8_t*)data,strlen(data))==false)
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fa6b 	bl	8000180 <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ffb9 	bl	8000c28 <Wifi_SendRaw>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f083 0301 	eor.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <Wifi_SendStringAndWait+0x2e>
		return false;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e004      	b.n	8000cd0 <Wifi_SendStringAndWait+0x38>
	osDelay(DelayMs);
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fda4 	bl	8004816 <osDelay>
	return true;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <Wifi_WaitForString>:
//#########################################################################################################
bool	Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 8000cd8:	b40c      	push	{r2, r3}
 8000cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	466b      	mov	r3, sp
 8000ce8:	461e      	mov	r6, r3

	if(result == NULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <Wifi_WaitForString+0x1c>
		return false;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e074      	b.n	8000dde <Wifi_WaitForString+0x106>
	if(CountOfParameter == 0)
 8000cf4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <Wifi_WaitForString+0x28>
		return false;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e06e      	b.n	8000dde <Wifi_WaitForString+0x106>

	*result=0;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]

  va_list tag;
	va_start (tag,CountOfParameter);
 8000d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d0a:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8000d0c:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8000d10:	460b      	mov	r3, r1
 8000d12:	3b01      	subs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	b2cb      	uxtb	r3, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	4691      	mov	r9, r2
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000d2a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000d2e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000d32:	b2cb      	uxtb	r3, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	461c      	mov	r4, r3
 8000d38:	4615      	mov	r5, r2
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	016b      	lsls	r3, r5, #5
 8000d44:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000d48:	0162      	lsls	r2, r4, #5
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	3307      	adds	r3, #7
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	ebad 0d03 	sub.w	sp, sp, r3
 8000d58:	466b      	mov	r3, sp
 8000d5a:	3303      	adds	r3, #3
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	75fb      	strb	r3, [r7, #23]
 8000d66:	e00a      	b.n	8000d7e <Wifi_WaitForString+0xa6>
		arg[i] = va_arg (tag, char *);
 8000d68:	7dfa      	ldrb	r2, [r7, #23]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1d19      	adds	r1, r3, #4
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
 8000d7e:	7dfa      	ldrb	r2, [r7, #23]
 8000d80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3ef      	bcc.n	8000d68 <Wifi_WaitForString+0x90>
  va_end (tag);


	//////////////////////////////////
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	e022      	b.n	8000dd4 <Wifi_WaitForString+0xfc>
	{
		osDelay(50);
 8000d8e:	2032      	movs	r0, #50	; 0x32
 8000d90:	f003 fd41 	bl	8004816 <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	77fb      	strb	r3, [r7, #31]
 8000d98:	e014      	b.n	8000dc4 <Wifi_WaitForString+0xec>
		{
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 8000d9a:	7ffa      	ldrb	r2, [r7, #31]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4812      	ldr	r0, [pc, #72]	; (8000df0 <Wifi_WaitForString+0x118>)
 8000da6:	f006 fba7 	bl	80074f8 <strstr>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <Wifi_WaitForString+0xe6>
			{
				*result = mx+1;
 8000db0:	7ffb      	ldrb	r3, [r7, #31]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	701a      	strb	r2, [r3, #0]
				return true;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <Wifi_WaitForString+0x106>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000dbe:	7ffb      	ldrb	r3, [r7, #31]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	77fb      	strb	r3, [r7, #31]
 8000dc4:	7ffa      	ldrb	r2, [r7, #31]
 8000dc6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3e5      	bcc.n	8000d9a <Wifi_WaitForString+0xc2>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	3332      	adds	r3, #50	; 0x32
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3d8      	bcc.n	8000d8e <Wifi_WaitForString+0xb6>
			}
		}
	}
	// timeout
	return false;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	46b5      	mov	sp, r6

}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3724      	adds	r7, #36	; 0x24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dea:	b002      	add	sp, #8
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200006d1 	.word	0x200006d1

08000df4 <Wifi_ReturnString>:
//#########################################################################################################
bool	Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	72fb      	strb	r3, [r7, #11]
	if(result == NULL)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <Wifi_ReturnString+0x18>
		return false;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e02e      	b.n	8000e6a <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 8000e0c:	7afb      	ldrb	r3, [r7, #11]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <Wifi_ReturnString+0x22>
		return false;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e029      	b.n	8000e6a <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <Wifi_ReturnString+0x80>)
 8000e18:	617b      	str	r3, [r7, #20]


	str = strtok (str,SplitterChars);
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f006 fb81 	bl	8007524 <strtok>
 8000e22:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d118      	bne.n	8000e5c <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
		return false;
 8000e30:	2300      	movs	r3, #0
 8000e32:	e01a      	b.n	8000e6a <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	2000      	movs	r0, #0
 8000e38:	f006 fb74 	bl	8007524 <strtok>
 8000e3c:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <Wifi_ReturnString+0x56>
			WantWhichOne--;
 8000e44:	7afb      	ldrb	r3, [r7, #11]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 8000e4a:	7afb      	ldrb	r3, [r7, #11]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d105      	bne.n	8000e5c <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8000e50:	6979      	ldr	r1, [r7, #20]
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f006 fb48 	bl	80074e8 <strcpy>
			return true;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e006      	b.n	8000e6a <Wifi_ReturnString+0x76>
	while (str != NULL)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1e8      	bne.n	8000e34 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
	return false;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200006d1 	.word	0x200006d1

08000e78 <Wifi_ReturnStrings>:

//#########################################################################################################
bool	Wifi_ReturnStrings(char *InputString,char *SplitterChars,uint8_t CountOfParameter,...)
{
 8000e78:	b40c      	push	{r2, r3}
 8000e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	466b      	mov	r3, sp
 8000e88:	461e      	mov	r6, r3
	if(CountOfParameter == 0)
 8000e8a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <Wifi_ReturnStrings+0x1e>
		return false;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e06f      	b.n	8000f76 <Wifi_ReturnStrings+0xfe>
	va_list tag;
	va_start (tag,CountOfParameter);
 8000e96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e9a:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8000e9c:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	b2cb      	uxtb	r3, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4691      	mov	r9, r2
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000eba:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ebe:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000ec2:	b2cb      	uxtb	r3, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	461c      	mov	r4, r3
 8000ec8:	4615      	mov	r5, r2
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	016b      	lsls	r3, r5, #5
 8000ed4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ed8:	0162      	lsls	r2, r4, #5
 8000eda:	460b      	mov	r3, r1
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	3307      	adds	r3, #7
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ee8:	466b      	mov	r3, sp
 8000eea:	3303      	adds	r3, #3
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	75fb      	strb	r3, [r7, #23]
 8000ef6:	e00a      	b.n	8000f0e <Wifi_ReturnStrings+0x96>
		arg[i] = va_arg (tag, char *);
 8000ef8:	7dfa      	ldrb	r2, [r7, #23]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1d19      	adds	r1, r3, #4
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	6819      	ldr	r1, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	7dfa      	ldrb	r2, [r7, #23]
 8000f10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d3ef      	bcc.n	8000ef8 <Wifi_ReturnStrings+0x80>
  va_end (tag);

	char *str;
	str = strtok (InputString,SplitterChars);
 8000f18:	6839      	ldr	r1, [r7, #0]
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f006 fb02 	bl	8007524 <strtok>
 8000f20:	61b8      	str	r0, [r7, #24]
	if(str == NULL)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <Wifi_ReturnStrings+0xb4>
		return false;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e024      	b.n	8000f76 <Wifi_ReturnStrings+0xfe>
	uint8_t i=0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	77fb      	strb	r3, [r7, #31]
	while (str != NULL)
 8000f30:	e01d      	b.n	8000f6e <Wifi_ReturnStrings+0xf6>
  {
    str = strtok (NULL,SplitterChars);
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	2000      	movs	r0, #0
 8000f36:	f006 faf5 	bl	8007524 <strtok>
 8000f3a:	61b8      	str	r0, [r7, #24]
		if(str != NULL)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d004      	beq.n	8000f4c <Wifi_ReturnStrings+0xd4>
			CountOfParameter--;
 8000f42:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		strcpy(arg[i],str);
 8000f4c:	7ffa      	ldrb	r2, [r7, #31]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	69b9      	ldr	r1, [r7, #24]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fac6 	bl	80074e8 <strcpy>
		i++;
 8000f5c:	7ffb      	ldrb	r3, [r7, #31]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	77fb      	strb	r3, [r7, #31]
		if(CountOfParameter==0)
 8000f62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <Wifi_ReturnStrings+0xf6>
		{
			return true;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e003      	b.n	8000f76 <Wifi_ReturnStrings+0xfe>
	while (str != NULL)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1de      	bne.n	8000f32 <Wifi_ReturnStrings+0xba>
		}
  }
	return false;
 8000f74:	2300      	movs	r3, #0
 8000f76:	46b5      	mov	sp, r6

}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3724      	adds	r7, #36	; 0x24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f82:	b002      	add	sp, #8
 8000f84:	4770      	bx	lr
	...

08000f88 <Wifi_ReturnInteger>:
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	460b      	mov	r3, r1
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <Wifi_ReturnInteger+0x40>)
 8000f9e:	f7ff ff29 	bl	8000df4 <Wifi_ReturnString>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f083 0301 	eor.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <Wifi_ReturnInteger+0x2a>
		return false;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e006      	b.n	8000fc0 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <Wifi_ReturnInteger+0x40>)
 8000fb4:	f005 ff22 	bl	8006dfc <atoi>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	601a      	str	r2, [r3, #0]
	return true;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200006d1 	.word	0x200006d1

08000fcc <Wifi_RemoveChar>:
	*result = atof((char*)Wifi.RxBuffer);
	return true;
}
//#########################################################################################################
void Wifi_RemoveChar(char *str, char garbage)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	char *src, *dst;
  for (src = dst = str; *src != '\0'; src++)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e00e      	b.n	8001000 <Wifi_RemoveChar+0x34>
	{
		*dst = *src;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	701a      	strb	r2, [r3, #0]
		if (*dst != garbage)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d002      	beq.n	8000ffa <Wifi_RemoveChar+0x2e>
			dst++;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
  for (src = dst = str; *src != '\0'; src++)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ec      	bne.n	8000fe2 <Wifi_RemoveChar+0x16>
  }
  *dst = '\0';
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <Wifi_RxClear>:
//#########################################################################################################
void	Wifi_RxClear(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	2100      	movs	r1, #0
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <Wifi_RxClear+0x28>)
 8001024:	f006 f81f 	bl	8007066 <memset>
	Wifi.RxIndex=0;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <Wifi_RxClear+0x2c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8001030:	2201      	movs	r2, #1
 8001032:	4904      	ldr	r1, [pc, #16]	; (8001044 <Wifi_RxClear+0x2c>)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <Wifi_RxClear+0x30>)
 8001036:	f002 feba 	bl	8003dae <HAL_UART_Receive_IT>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200006d1 	.word	0x200006d1
 8001044:	200006d0 	.word	0x200006d0
 8001048:	20000640 	.word	0x20000640

0800104c <Wifi_TxClear>:
//#########################################################################################################
void	Wifi_TxClear(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	2100      	movs	r1, #0
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <Wifi_TxClear+0x14>)
 8001058:	f006 f805 	bl	8007066 <memset>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200008d1 	.word	0x200008d1

08001064 <Wifi_RxCallBack>:
//#########################################################################################################
void	Wifi_RxCallBack(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)
 8001068:	4b9a      	ldr	r3, [pc, #616]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800106a:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d018      	beq.n	80010aa <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8001078:	4b96      	ldr	r3, [pc, #600]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800107a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800107e:	4619      	mov	r1, r3
 8001080:	4b94      	ldr	r3, [pc, #592]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001086:	440b      	add	r3, r1
 8001088:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 800108a:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800108c:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8001090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001094:	f080 80ab 	bcs.w	80011ee <Wifi_RxCallBack+0x18a>
      Wifi.RxIndex++;
 8001098:	4b8e      	ldr	r3, [pc, #568]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800109a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800109e:	3301      	adds	r3, #1
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b8c      	ldr	r3, [pc, #560]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010a4:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 80010a8:	e0a1      	b.n	80011ee <Wifi_RxCallBack+0x18a>
  }
  //--- at command buffer
  //+++  data buffer
  else
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 80010aa:	f001 fa61 	bl	8002570 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010b2:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b32      	cmp	r3, #50	; 0x32
 80010ba:	d903      	bls.n	80010c4 <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 80010bc:	4b85      	ldr	r3, [pc, #532]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 80010c4:	4b83      	ldr	r3, [pc, #524]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010c6:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d167      	bne.n	800119e <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 80010ce:	4b81      	ldr	r3, [pc, #516]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010d0:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 80010d4:	f083 0301 	eor.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d028      	beq.n	8001130 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 80010de:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010e0:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b7b      	ldr	r3, [pc, #492]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b7a      	ldr	r3, [pc, #488]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010ec:	440b      	add	r3, r1
 80010ee:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 80010f2:	4b78      	ldr	r3, [pc, #480]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010f4:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80010fe:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 8001102:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001104:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8001108:	3b01      	subs	r3, #1
 800110a:	4a72      	ldr	r2, [pc, #456]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800110c:	4413      	add	r3, r2
 800110e:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8001112:	2b3a      	cmp	r3, #58	; 0x3a
 8001114:	d16b      	bne.n	80011ee <Wifi_RxCallBack+0x18a>
        {
          Wifi.RxDataConnectionNumber=0;
 8001116:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 800111e:	486e      	ldr	r0, [pc, #440]	; (80012d8 <Wifi_RxCallBack+0x274>)
 8001120:	f005 fe6c 	bl	8006dfc <atoi>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800112a:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 800112e:	e05e      	b.n	80011ee <Wifi_RxCallBack+0x18a>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8001130:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001132:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8001136:	4619      	mov	r1, r3
 8001138:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800113e:	440b      	add	r3, r1
 8001140:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8001144:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001146:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001150:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 8001154:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001156:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 800115a:	2b2c      	cmp	r3, #44	; 0x2c
 800115c:	d107      	bne.n	800116e <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001160:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8001164:	3b30      	subs	r3, #48	; 0x30
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800116a:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 800116e:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001170:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8001174:	2b03      	cmp	r3, #3
 8001176:	d93a      	bls.n	80011ee <Wifi_RxCallBack+0x18a>
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800117a:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800117e:	3b01      	subs	r3, #1
 8001180:	4a54      	ldr	r2, [pc, #336]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001182:	4413      	add	r3, r2
 8001184:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8001188:	2b3a      	cmp	r3, #58	; 0x3a
 800118a:	d130      	bne.n	80011ee <Wifi_RxCallBack+0x18a>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 800118c:	4853      	ldr	r0, [pc, #332]	; (80012dc <Wifi_RxCallBack+0x278>)
 800118e:	f005 fe35 	bl	8006dfc <atoi>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b4f      	ldr	r3, [pc, #316]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001198:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 800119c:	e027      	b.n	80011ee <Wifi_RxCallBack+0x18a>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else
    {
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 800119e:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011a0:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 80011a4:	4619      	mov	r1, r3
 80011a6:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011ac:	440b      	add	r3, r1
 80011ae:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 80011b2:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011b4:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 80011b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011bc:	d207      	bcs.n	80011ce <Wifi_RxCallBack+0x16a>
        Wifi.RxIndexForData++;
 80011be:	4b45      	ldr	r3, [pc, #276]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011c0:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011ca:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011d0:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011d6:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 80011da:	429a      	cmp	r2, r3
 80011dc:	d307      	bcc.n	80011ee <Wifi_RxCallBack+0x18a>
      {
        Wifi.RxIsData=false;
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
        Wifi.GotNewData=true;
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
      }
    }
    //--- Fill Data Buffer
  }
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	4938      	ldr	r1, [pc, #224]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011f2:	483b      	ldr	r0, [pc, #236]	; (80012e0 <Wifi_RxCallBack+0x27c>)
 80011f4:	f002 fddb 	bl	8003dae <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80011fa:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d966      	bls.n	80012d0 <Wifi_RxCallBack+0x26c>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001204:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8001208:	3b04      	subs	r3, #4
 800120a:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800120c:	4413      	add	r3, r2
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	2b2b      	cmp	r3, #43	; 0x2b
 8001212:	d15d      	bne.n	80012d0 <Wifi_RxCallBack+0x26c>
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001216:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800121a:	3b03      	subs	r3, #3
 800121c:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800121e:	4413      	add	r3, r2
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	2b49      	cmp	r3, #73	; 0x49
 8001224:	d154      	bne.n	80012d0 <Wifi_RxCallBack+0x26c>
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001228:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800122c:	3b02      	subs	r3, #2
 800122e:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001230:	4413      	add	r3, r2
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	2b50      	cmp	r3, #80	; 0x50
 8001236:	d14b      	bne.n	80012d0 <Wifi_RxCallBack+0x26c>
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800123a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800123e:	3b01      	subs	r3, #1
 8001240:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001242:	4413      	add	r3, r2
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	2b44      	cmp	r3, #68	; 0x44
 8001248:	d142      	bne.n	80012d0 <Wifi_RxCallBack+0x26c>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 800124a:	2208      	movs	r2, #8
 800124c:	2100      	movs	r1, #0
 800124e:	4825      	ldr	r0, [pc, #148]	; (80012e4 <Wifi_RxCallBack+0x280>)
 8001250:	f005 ff09 	bl	8007066 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001256:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800125a:	3b04      	subs	r3, #4
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800125e:	4413      	add	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001266:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800126a:	3b03      	subs	r3, #3
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800126e:	4413      	add	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001276:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800127a:	3b02      	subs	r3, #2
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800127e:	4413      	add	r3, r2
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001286:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800128a:	3b01      	subs	r3, #1
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <Wifi_RxCallBack+0x270>)
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <Wifi_RxCallBack+0x270>)
 8001296:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800129a:	3b04      	subs	r3, #4
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80012a0:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();
 80012c4:	f001 f954 	bl	8002570 <HAL_GetTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a02      	ldr	r2, [pc, #8]	; (80012d4 <Wifi_RxCallBack+0x270>)
 80012cc:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
  //--- check +IPD in At command buffer
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200006d0 	.word	0x200006d0
 80012d8:	20000dd5 	.word	0x20000dd5
 80012dc:	20000dd7 	.word	0x20000dd7
 80012e0:	20000640 	.word	0x20000640
 80012e4:	20000dd4 	.word	0x20000dd4

080012e8 <WifiTask>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void WifiTask(void const * argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	osDelay(3000);
 80012f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012f4:	f003 fa8f 	bl	8004816 <osDelay>
	Wifi_SendStringAndWait("AT\r\n",1000);
 80012f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012fc:	4853      	ldr	r0, [pc, #332]	; (800144c <WifiTask+0x164>)
 80012fe:	f7ff fccb 	bl	8000c98 <Wifi_SendStringAndWait>
 	Wifi_SetRfPower(82);
 8001302:	2052      	movs	r0, #82	; 0x52
 8001304:	f000 f95c 	bl	80015c0 <Wifi_SetRfPower>
  Wifi_TcpIp_GetMultiConnection();
 8001308:	f000 fdfa 	bl	8001f00 <Wifi_TcpIp_GetMultiConnection>
  Wifi_TcpIp_Close(0);
 800130c:	2000      	movs	r0, #0
 800130e:	f000 fefb 	bl	8002108 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 fef8 	bl	8002108 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(2);
 8001318:	2002      	movs	r0, #2
 800131a:	f000 fef5 	bl	8002108 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(3);
 800131e:	2003      	movs	r0, #3
 8001320:	f000 fef2 	bl	8002108 <Wifi_TcpIp_Close>
  Wifi_TcpIp_Close(4);
 8001324:	2004      	movs	r0, #4
 8001326:	f000 feef 	bl	8002108 <Wifi_TcpIp_Close>
  Wifi_TcpIp_SetMultiConnection(true);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 fd94 	bl	8001e58 <Wifi_TcpIp_SetMultiConnection>
	Wifi_GetMode();
 8001330:	f000 f9e8 	bl	8001704 <Wifi_GetMode>
	Wifi_Station_DhcpIsEnable();
 8001334:	f000 fb52 	bl	80019dc <Wifi_Station_DhcpIsEnable>
	Wifi_UserInit();
 8001338:	f001 f85a 	bl	80023f0 <Wifi_UserInit>


	//#######################
	while(1)
	{
		Wifi_GetMyIp();
 800133c:	f000 fa42 	bl	80017c4 <Wifi_GetMyIp>
    if((Wifi.Mode==WifiMode_SoftAp) || (Wifi.Mode==WifiMode_StationAndSoftAp))
 8001340:	4b43      	ldr	r3, [pc, #268]	; (8001450 <WifiTask+0x168>)
 8001342:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8001346:	2b02      	cmp	r3, #2
 8001348:	d004      	beq.n	8001354 <WifiTask+0x6c>
 800134a:	4b41      	ldr	r3, [pc, #260]	; (8001450 <WifiTask+0x168>)
 800134c:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8001350:	2b03      	cmp	r3, #3
 8001352:	d101      	bne.n	8001358 <WifiTask+0x70>
      Wifi_SoftAp_GetConnectedDevices();
 8001354:	f000 fbd0 	bl	8001af8 <Wifi_SoftAp_GetConnectedDevices>
		Wifi_TcpIp_GetConnectionStatus();
 8001358:	f000 fc94 	bl	8001c84 <Wifi_TcpIp_GetConnectionStatus>
    Wifi_RxClear();
 800135c:	f7ff fe5c 	bl	8001018 <Wifi_RxClear>
		for(uint8_t i=0; i< 100; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e06b      	b.n	800143e <WifiTask+0x156>
    {
      if( Wifi.GotNewData==true)
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <WifiTask+0x168>)
 8001368:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 800136c:	2b00      	cmp	r3, #0
 800136e:	d060      	beq.n	8001432 <WifiTask+0x14a>
      {
        Wifi.GotNewData=false;
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <WifiTask+0x168>)
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
        for(uint8_t ii=0; ii<5 ; ii++)
 8001378:	2300      	movs	r3, #0
 800137a:	73bb      	strb	r3, [r7, #14]
 800137c:	e056      	b.n	800142c <WifiTask+0x144>
        {
          if((strstr(Wifi.TcpIpConnections[ii].Type,"UDP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
 800137e:	7bba      	ldrb	r2, [r7, #14]
 8001380:	4613      	mov	r3, r2
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800138c:	4a30      	ldr	r2, [pc, #192]	; (8001450 <WifiTask+0x168>)
 800138e:	4413      	add	r3, r2
 8001390:	3306      	adds	r3, #6
 8001392:	4930      	ldr	r1, [pc, #192]	; (8001454 <WifiTask+0x16c>)
 8001394:	4618      	mov	r0, r3
 8001396:	f006 f8af 	bl	80074f8 <strstr>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d018      	beq.n	80013d2 <WifiTask+0xea>
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <WifiTask+0x168>)
 80013a2:	f893 1712 	ldrb.w	r1, [r3, #1810]	; 0x712
 80013a6:	7bba      	ldrb	r2, [r7, #14]
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <WifiTask+0x168>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4403      	add	r3, r0
 80013b4:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4299      	cmp	r1, r3
 80013bc:	d109      	bne.n	80013d2 <WifiTask+0xea>
            Wifi_UserGetUdpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <WifiTask+0x168>)
 80013c0:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <WifiTask+0x168>)
 80013c6:	f8b2 1710 	ldrh.w	r1, [r2, #1808]	; 0x710
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <WifiTask+0x170>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f857 	bl	8002480 <Wifi_UserGetUdpData>
          if((strstr(Wifi.TcpIpConnections[ii].Type,"TCP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
 80013d2:	7bba      	ldrb	r2, [r7, #14]
 80013d4:	4613      	mov	r3, r2
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <WifiTask+0x168>)
 80013e2:	4413      	add	r3, r2
 80013e4:	3306      	adds	r3, #6
 80013e6:	491d      	ldr	r1, [pc, #116]	; (800145c <WifiTask+0x174>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 f885 	bl	80074f8 <strstr>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d018      	beq.n	8001426 <WifiTask+0x13e>
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <WifiTask+0x168>)
 80013f6:	f893 1712 	ldrb.w	r1, [r3, #1810]	; 0x712
 80013fa:	7bba      	ldrb	r2, [r7, #14]
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <WifiTask+0x168>)
 80013fe:	4613      	mov	r3, r2
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4403      	add	r3, r0
 8001408:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4299      	cmp	r1, r3
 8001410:	d109      	bne.n	8001426 <WifiTask+0x13e>
            Wifi_UserGetTcpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <WifiTask+0x168>)
 8001414:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <WifiTask+0x168>)
 800141a:	f8b2 1710 	ldrh.w	r1, [r2, #1808]	; 0x710
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <WifiTask+0x170>)
 8001420:	4618      	mov	r0, r3
 8001422:	f001 f841 	bl	80024a8 <Wifi_UserGetTcpData>
        for(uint8_t ii=0; ii<5 ; ii++)
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	3301      	adds	r3, #1
 800142a:	73bb      	strb	r3, [r7, #14]
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	2b04      	cmp	r3, #4
 8001430:	d9a5      	bls.n	800137e <WifiTask+0x96>
        }
      }
      osDelay(10);
 8001432:	200a      	movs	r0, #10
 8001434:	f003 f9ef 	bl	8004816 <osDelay>
		for(uint8_t i=0; i< 100; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	2b63      	cmp	r3, #99	; 0x63
 8001442:	d990      	bls.n	8001366 <WifiTask+0x7e>
    }
    Wifi_UserProcess();
 8001444:	f000 fff6 	bl	8002434 <Wifi_UserProcess>
		Wifi_GetMyIp();
 8001448:	e778      	b.n	800133c <WifiTask+0x54>
 800144a:	bf00      	nop
 800144c:	08008f20 	.word	0x08008f20
 8001450:	200006d0 	.word	0x200006d0
 8001454:	08008f28 	.word	0x08008f28
 8001458:	200009d4 	.word	0x200009d4
 800145c:	08008f2c 	.word	0x08008f2c

08001460 <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void	Wifi_Init(osPriority	Priority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
	//HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
	//printf("HAL_UART_RECEIVE_IT : %d\n",HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1));
	if (HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1) != HAL_UART_ERROR_NONE)
 800146a:	2201      	movs	r2, #1
 800146c:	4924      	ldr	r1, [pc, #144]	; (8001500 <Wifi_Init+0xa0>)
 800146e:	4825      	ldr	r0, [pc, #148]	; (8001504 <Wifi_Init+0xa4>)
 8001470:	f002 fc9d 	bl	8003dae <HAL_UART_Receive_IT>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <Wifi_Init+0x22>
	{
	    printf("UART initialization failed\n");
 800147a:	4823      	ldr	r0, [pc, #140]	; (8001508 <Wifi_Init+0xa8>)
 800147c:	f005 ff16 	bl	80072ac <puts>
 8001480:	e002      	b.n	8001488 <Wifi_Init+0x28>
	}
	else
	{
	    printf("UART initialization succeeded\n");
 8001482:	4822      	ldr	r0, [pc, #136]	; (800150c <Wifi_Init+0xac>)
 8001484:	f005 ff12 	bl	80072ac <puts>
	}
	Wifi_RxClear();
 8001488:	f7ff fdc6 	bl	8001018 <Wifi_RxClear>
	Wifi_TxClear();
 800148c:	f7ff fdde 	bl	800104c <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 8001498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f9cd 	bl	800483e <osSemaphoreCreate>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <Wifi_Init+0xb0>)
 80014a8:	6013      	str	r3, [r2, #0]
	if (WifiSemHandle == NULL)
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <Wifi_Init+0xb0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <Wifi_Init+0x5a>
	{
		printf("Semaphore creation failed\n");
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <Wifi_Init+0xb4>)
 80014b4:	f005 fefa 	bl	80072ac <puts>
 80014b8:	e002      	b.n	80014c0 <Wifi_Init+0x60>
	}
	else
	{
		printf("Semaphore creation succeeded\n");
 80014ba:	4817      	ldr	r0, [pc, #92]	; (8001518 <Wifi_Init+0xb8>)
 80014bc:	f005 fef6 	bl	80072ac <puts>
	}
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <Wifi_Init+0xbc>)
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <Wifi_Init+0xc0>)
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	82bb      	strh	r3, [r7, #20]
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 f94a 	bl	800477e <osThreadCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <Wifi_Init+0xc4>)
 80014ee:	6013      	str	r3, [r2, #0]
	printf("Wifi Init done ! \n");
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <Wifi_Init+0xc8>)
 80014f2:	f005 fedb 	bl	80072ac <puts>
}
 80014f6:	bf00      	nop
 80014f8:	3730      	adds	r7, #48	; 0x30
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200006d0 	.word	0x200006d0
 8001504:	20000640 	.word	0x20000640
 8001508:	08008f30 	.word	0x08008f30
 800150c:	08008f4c 	.word	0x08008f4c
 8001510:	200006cc 	.word	0x200006cc
 8001514:	08008f6c 	.word	0x08008f6c
 8001518:	08008f88 	.word	0x08008f88
 800151c:	08008fa8 	.word	0x08008fa8
 8001520:	080012e9 	.word	0x080012e9
 8001524:	200006c8 	.word	0x200006c8
 8001528:	08008fb8 	.word	0x08008fb8

0800152c <Wifi_Restart>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Restart(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001532:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <Wifi_Restart+0x80>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f04f 31ff 	mov.w	r1, #4294967295
 800153a:	4618      	mov	r0, r3
 800153c:	f003 f9b2 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8001544:	f7ff fd68 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RST\r\n");
 8001548:	4919      	ldr	r1, [pc, #100]	; (80015b0 <Wifi_Restart+0x84>)
 800154a:	481a      	ldr	r0, [pc, #104]	; (80015b4 <Wifi_Restart+0x88>)
 800154c:	f005 ff30 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001550:	4818      	ldr	r0, [pc, #96]	; (80015b4 <Wifi_Restart+0x88>)
 8001552:	f7ff fb8f 	bl	8000c74 <Wifi_SendString>
 8001556:	4603      	mov	r3, r0
 8001558:	f083 0301 	eor.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d114      	bne.n	800158c <Wifi_Restart+0x60>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001562:	1db9      	adds	r1, r7, #6
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <Wifi_Restart+0x8c>)
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <Wifi_Restart+0x90>)
 800156a:	2202      	movs	r2, #2
 800156c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001570:	f7ff fbb2 	bl	8000cd8 <Wifi_WaitForString>
 8001574:	4603      	mov	r3, r0
 8001576:	f083 0301 	eor.w	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <Wifi_Restart+0x64>
			break;
		if(result == 2)
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d006      	beq.n	8001594 <Wifi_Restart+0x68>
			break;
		returnVal=true;
 8001586:	2301      	movs	r3, #1
 8001588:	71fb      	strb	r3, [r7, #7]
 800158a:	e004      	b.n	8001596 <Wifi_Restart+0x6a>
			break;
 800158c:	bf00      	nop
 800158e:	e002      	b.n	8001596 <Wifi_Restart+0x6a>
			break;
 8001590:	bf00      	nop
 8001592:	e000      	b.n	8001596 <Wifi_Restart+0x6a>
			break;
 8001594:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <Wifi_Restart+0x80>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f003 f9d0 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200006cc 	.word	0x200006cc
 80015b0:	08008fcc 	.word	0x08008fcc
 80015b4:	200008d1 	.word	0x200008d1
 80015b8:	08008fdc 	.word	0x08008fdc
 80015bc:	08008fd8 	.word	0x08008fd8

080015c0 <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <Wifi_SetRfPower+0x88>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 f966 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80015dc:	f7ff fd1c 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4919      	ldr	r1, [pc, #100]	; (800164c <Wifi_SetRfPower+0x8c>)
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <Wifi_SetRfPower+0x90>)
 80015e8:	f005 fee2 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80015ec:	4818      	ldr	r0, [pc, #96]	; (8001650 <Wifi_SetRfPower+0x90>)
 80015ee:	f7ff fb41 	bl	8000c74 <Wifi_SendString>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80015fe:	f107 010e 	add.w	r1, r7, #14
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <Wifi_SetRfPower+0x94>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <Wifi_SetRfPower+0x98>)
 8001608:	2202      	movs	r2, #2
 800160a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160e:	f7ff fb63 	bl	8000cd8 <Wifi_WaitForString>
 8001612:	4603      	mov	r3, r0
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d006      	beq.n	8001632 <Wifi_SetRfPower+0x72>
			break;
		returnVal=true;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e004      	b.n	8001634 <Wifi_SetRfPower+0x74>
			break;
 800162a:	bf00      	nop
 800162c:	e002      	b.n	8001634 <Wifi_SetRfPower+0x74>
			break;
 800162e:	bf00      	nop
 8001630:	e000      	b.n	8001634 <Wifi_SetRfPower+0x74>
			break;
 8001632:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <Wifi_SetRfPower+0x88>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 f981 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200006cc 	.word	0x200006cc
 800164c:	08009014 	.word	0x08009014
 8001650:	200008d1 	.word	0x200008d1
 8001654:	08008fdc 	.word	0x08008fdc
 8001658:	08008fd8 	.word	0x08008fd8

0800165c <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <Wifi_SetMode+0x90>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f04f 31ff 	mov.w	r1, #4294967295
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f918 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001678:	f7ff fcce 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	461a      	mov	r2, r3
 8001680:	491b      	ldr	r1, [pc, #108]	; (80016f0 <Wifi_SetMode+0x94>)
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <Wifi_SetMode+0x98>)
 8001684:	f005 fe94 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001688:	481a      	ldr	r0, [pc, #104]	; (80016f4 <Wifi_SetMode+0x98>)
 800168a:	f7ff faf3 	bl	8000c74 <Wifi_SendString>
 800168e:	4603      	mov	r3, r0
 8001690:	f083 0301 	eor.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <Wifi_SetMode+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800169a:	f107 010e 	add.w	r1, r7, #14
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <Wifi_SetMode+0x9c>)
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <Wifi_SetMode+0xa0>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016aa:	f7ff fb15 	bl	8000cd8 <Wifi_WaitForString>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f083 0301 	eor.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10b      	bne.n	80016d2 <Wifi_SetMode+0x76>
			break;
		if(result == 2)
 80016ba:	7bbb      	ldrb	r3, [r7, #14]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d00a      	beq.n	80016d6 <Wifi_SetMode+0x7a>
			break;
		Wifi.Mode = WifiMode_;
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <Wifi_SetMode+0xa4>)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f882 371a 	strb.w	r3, [r2, #1818]	; 0x71a
		returnVal=true;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e004      	b.n	80016d8 <Wifi_SetMode+0x7c>
			break;
 80016ce:	bf00      	nop
 80016d0:	e002      	b.n	80016d8 <Wifi_SetMode+0x7c>
			break;
 80016d2:	bf00      	nop
 80016d4:	e000      	b.n	80016d8 <Wifi_SetMode+0x7c>
			break;
 80016d6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <Wifi_SetMode+0x90>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 f92f 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200006cc 	.word	0x200006cc
 80016f0:	08009024 	.word	0x08009024
 80016f4:	200008d1 	.word	0x200008d1
 80016f8:	08008fdc 	.word	0x08008fdc
 80016fc:	08008fd8 	.word	0x08008fd8
 8001700:	200006d0 	.word	0x200006d0

08001704 <Wifi_GetMode>:
//#########################################################################################################
bool	Wifi_GetMode(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <Wifi_GetMode+0xa4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f04f 31ff 	mov.w	r1, #4294967295
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f8c6 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001718:	2300      	movs	r3, #0
 800171a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800171c:	f7ff fc7c 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 8001720:	4922      	ldr	r1, [pc, #136]	; (80017ac <Wifi_GetMode+0xa8>)
 8001722:	4823      	ldr	r0, [pc, #140]	; (80017b0 <Wifi_GetMode+0xac>)
 8001724:	f005 fe44 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001728:	4821      	ldr	r0, [pc, #132]	; (80017b0 <Wifi_GetMode+0xac>)
 800172a:	f7ff faa3 	bl	8000c74 <Wifi_SendString>
 800172e:	4603      	mov	r3, r0
 8001730:	f083 0301 	eor.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d126      	bne.n	8001788 <Wifi_GetMode+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800173a:	1db9      	adds	r1, r7, #6
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <Wifi_GetMode+0xb0>)
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <Wifi_GetMode+0xb4>)
 8001742:	2202      	movs	r2, #2
 8001744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001748:	f7ff fac6 	bl	8000cd8 <Wifi_WaitForString>
 800174c:	4603      	mov	r3, r0
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d119      	bne.n	800178c <Wifi_GetMode+0x88>
			break;
		if(result == 2)
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d018      	beq.n	8001790 <Wifi_GetMode+0x8c>
			break;
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 800175e:	1dbb      	adds	r3, r7, #6
 8001760:	4a16      	ldr	r2, [pc, #88]	; (80017bc <Wifi_GetMode+0xb8>)
 8001762:	2101      	movs	r1, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fc0f 	bl	8000f88 <Wifi_ReturnInteger>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <Wifi_GetMode+0x76>
			Wifi.Mode = (WifiMode_t)result ;
 8001770:	79ba      	ldrb	r2, [r7, #6]
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <Wifi_GetMode+0xbc>)
 8001774:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8001778:	e003      	b.n	8001782 <Wifi_GetMode+0x7e>
		else
			Wifi.Mode = WifiMode_Error;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <Wifi_GetMode+0xbc>)
 800177c:	2200      	movs	r2, #0
 800177e:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
		returnVal=true;
 8001782:	2301      	movs	r3, #1
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e004      	b.n	8001792 <Wifi_GetMode+0x8e>
			break;
 8001788:	bf00      	nop
 800178a:	e002      	b.n	8001792 <Wifi_GetMode+0x8e>
			break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <Wifi_GetMode+0x8e>
			break;
 8001790:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <Wifi_GetMode+0xa4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 f8d2 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 800179c:	79fb      	ldrb	r3, [r7, #7]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200006cc 	.word	0x200006cc
 80017ac:	08009038 	.word	0x08009038
 80017b0:	200008d1 	.word	0x200008d1
 80017b4:	08008fdc 	.word	0x08008fdc
 80017b8:	08008fd8 	.word	0x08008fd8
 80017bc:	0800904c 	.word	0x0800904c
 80017c0:	200006d0 	.word	0x200006d0

080017c4 <Wifi_GetMyIp>:
//#########################################################################################################
bool	Wifi_GetMyIp(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <Wifi_GetMyIp+0x110>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f04f 31ff 	mov.w	r1, #4294967295
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 f866 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80017dc:	f7ff fc1c 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIFSR\r\n");
 80017e0:	493d      	ldr	r1, [pc, #244]	; (80018d8 <Wifi_GetMyIp+0x114>)
 80017e2:	483e      	ldr	r0, [pc, #248]	; (80018dc <Wifi_GetMyIp+0x118>)
 80017e4:	f005 fde4 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80017e8:	483c      	ldr	r0, [pc, #240]	; (80018dc <Wifi_GetMyIp+0x118>)
 80017ea:	f7ff fa43 	bl	8000c74 <Wifi_SendString>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f083 0301 	eor.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d153      	bne.n	80018a2 <Wifi_GetMyIp+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80017fa:	1df9      	adds	r1, r7, #7
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <Wifi_GetMyIp+0x11c>)
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <Wifi_GetMyIp+0x120>)
 8001802:	2202      	movs	r2, #2
 8001804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001808:	f7ff fa66 	bl	8000cd8 <Wifi_WaitForString>
 800180c:	4603      	mov	r3, r0
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d146      	bne.n	80018a6 <Wifi_GetMyIp+0xe2>
			break;
		if(result == 2)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d045      	beq.n	80018aa <Wifi_GetMyIp+0xe6>
			break;
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:APIP,\"%[^\"]",Wifi.MyIP);
 800181e:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <Wifi_GetMyIp+0x124>)
 8001820:	4932      	ldr	r1, [pc, #200]	; (80018ec <Wifi_GetMyIp+0x128>)
 8001822:	4833      	ldr	r0, [pc, #204]	; (80018f0 <Wifi_GetMyIp+0x12c>)
 8001824:	f005 fde4 	bl	80073f0 <siscanf>
    sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:STAIP,\"%[^\"]",Wifi.MyIP);
 8001828:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <Wifi_GetMyIp+0x124>)
 800182a:	4932      	ldr	r1, [pc, #200]	; (80018f4 <Wifi_GetMyIp+0x130>)
 800182c:	4830      	ldr	r0, [pc, #192]	; (80018f0 <Wifi_GetMyIp+0x12c>)
 800182e:	f005 fddf 	bl	80073f0 <siscanf>


    Wifi_RxClear();
 8001832:	f7ff fbf1 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTA?\r\n");
 8001836:	4930      	ldr	r1, [pc, #192]	; (80018f8 <Wifi_GetMyIp+0x134>)
 8001838:	4828      	ldr	r0, [pc, #160]	; (80018dc <Wifi_GetMyIp+0x118>)
 800183a:	f005 fdb9 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800183e:	4827      	ldr	r0, [pc, #156]	; (80018dc <Wifi_GetMyIp+0x118>)
 8001840:	f7ff fa18 	bl	8000c74 <Wifi_SendString>
 8001844:	4603      	mov	r3, r0
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d12e      	bne.n	80018ae <Wifi_GetMyIp+0xea>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001850:	1df9      	adds	r1, r7, #7
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <Wifi_GetMyIp+0x11c>)
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <Wifi_GetMyIp+0x120>)
 8001858:	2202      	movs	r2, #2
 800185a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185e:	f7ff fa3b 	bl	8000cd8 <Wifi_WaitForString>
 8001862:	4603      	mov	r3, r0
 8001864:	f083 0301 	eor.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d121      	bne.n	80018b2 <Wifi_GetMyIp+0xee>
			break;
		if(result == 2)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d020      	beq.n	80018b6 <Wifi_GetMyIp+0xf2>
			break;

    char *str=strstr((char*)Wifi.RxBuffer,"gateway:");
 8001874:	4921      	ldr	r1, [pc, #132]	; (80018fc <Wifi_GetMyIp+0x138>)
 8001876:	481e      	ldr	r0, [pc, #120]	; (80018f0 <Wifi_GetMyIp+0x12c>)
 8001878:	f005 fe3e 	bl	80074f8 <strstr>
 800187c:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01a      	beq.n	80018ba <Wifi_GetMyIp+0xf6>
      break;
    if(Wifi_ReturnStrings(str,"\"",1,Wifi.MyGateWay)==false)
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <Wifi_GetMyIp+0x13c>)
 8001886:	2201      	movs	r2, #1
 8001888:	491e      	ldr	r1, [pc, #120]	; (8001904 <Wifi_GetMyIp+0x140>)
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f7ff faf4 	bl	8000e78 <Wifi_ReturnStrings>
 8001890:	4603      	mov	r3, r0
 8001892:	f083 0301 	eor.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d110      	bne.n	80018be <Wifi_GetMyIp+0xfa>
      break;

		returnVal=true;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e00e      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
			break;
 80018a2:	bf00      	nop
 80018a4:	e00c      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
			break;
 80018a6:	bf00      	nop
 80018a8:	e00a      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
			break;
 80018aa:	bf00      	nop
 80018ac:	e008      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
			break;
 80018ae:	bf00      	nop
 80018b0:	e006      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
			break;
 80018b2:	bf00      	nop
 80018b4:	e004      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
			break;
 80018b6:	bf00      	nop
 80018b8:	e002      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
      break;
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <Wifi_GetMyIp+0xfc>
      break;
 80018be:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <Wifi_GetMyIp+0x110>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 f83b 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200006cc 	.word	0x200006cc
 80018d8:	08009050 	.word	0x08009050
 80018dc:	200008d1 	.word	0x200008d1
 80018e0:	08008fdc 	.word	0x08008fdc
 80018e4:	08008fd8 	.word	0x08008fd8
 80018e8:	20000deb 	.word	0x20000deb
 80018ec:	0800905c 	.word	0x0800905c
 80018f0:	200006d1 	.word	0x200006d1
 80018f4:	0800907c 	.word	0x0800907c
 80018f8:	0800909c 	.word	0x0800909c
 80018fc:	080090ac 	.word	0x080090ac
 8001900:	20000dfb 	.word	0x20000dfb
 8001904:	080090b8 	.word	0x080090b8

08001908 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <Wifi_Station_ConnectToAp+0xb4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	4618      	mov	r0, r3
 800191e:	f002 ffc1 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 8001926:	f7ff fb77 	bl	8001018 <Wifi_RxClear>
		if(MAC==NULL){
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10c      	bne.n	800194a <Wifi_Station_ConnectToAp+0x42>
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,Pass);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4922      	ldr	r1, [pc, #136]	; (80019c0 <Wifi_Station_ConnectToAp+0xb8>)
 8001936:	4823      	ldr	r0, [pc, #140]	; (80019c4 <Wifi_Station_ConnectToAp+0xbc>)
 8001938:	f005 fd3a 	bl	80073b0 <siprintf>
			printf(Wifi.TxBuffer,"AT+CWJAP= %s , %s \n\n",SSID,Pass);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4921      	ldr	r1, [pc, #132]	; (80019c8 <Wifi_Station_ConnectToAp+0xc0>)
 8001942:	4820      	ldr	r0, [pc, #128]	; (80019c4 <Wifi_Station_ConnectToAp+0xbc>)
 8001944:	f005 fc2c 	bl	80071a0 <iprintf>
 8001948:	e007      	b.n	800195a <Wifi_Station_ConnectToAp+0x52>
		}else
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	491e      	ldr	r1, [pc, #120]	; (80019cc <Wifi_Station_ConnectToAp+0xc4>)
 8001954:	481b      	ldr	r0, [pc, #108]	; (80019c4 <Wifi_Station_ConnectToAp+0xbc>)
 8001956:	f005 fd2b 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800195a:	481a      	ldr	r0, [pc, #104]	; (80019c4 <Wifi_Station_ConnectToAp+0xbc>)
 800195c:	f7ff f98a 	bl	8000c74 <Wifi_SendString>
 8001960:	4603      	mov	r3, r0
 8001962:	f083 0301 	eor.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d117      	bne.n	800199c <Wifi_Station_ConnectToAp+0x94>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 800196c:	f107 0116 	add.w	r1, r7, #22
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <Wifi_Station_ConnectToAp+0xc8>)
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <Wifi_Station_ConnectToAp+0xcc>)
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <Wifi_Station_ConnectToAp+0xd0>)
 800197a:	2203      	movs	r2, #3
 800197c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001980:	f7ff f9aa 	bl	8000cd8 <Wifi_WaitForString>
 8001984:	4603      	mov	r3, r0
 8001986:	f083 0301 	eor.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <Wifi_Station_ConnectToAp+0x98>
			break;
		if( result > 1)
 8001990:	7dbb      	ldrb	r3, [r7, #22]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d806      	bhi.n	80019a4 <Wifi_Station_ConnectToAp+0x9c>
			break;
		returnVal=true;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
 800199a:	e004      	b.n	80019a6 <Wifi_Station_ConnectToAp+0x9e>
			break;
 800199c:	bf00      	nop
 800199e:	e002      	b.n	80019a6 <Wifi_Station_ConnectToAp+0x9e>
			break;
 80019a0:	bf00      	nop
 80019a2:	e000      	b.n	80019a6 <Wifi_Station_ConnectToAp+0x9e>
			break;
 80019a4:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <Wifi_Station_ConnectToAp+0xb4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 ffc8 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200006cc 	.word	0x200006cc
 80019c0:	080090bc 	.word	0x080090bc
 80019c4:	200008d1 	.word	0x200008d1
 80019c8:	080090d4 	.word	0x080090d4
 80019cc:	080090ec 	.word	0x080090ec
 80019d0:	08009110 	.word	0x08009110
 80019d4:	0800911c 	.word	0x0800911c
 80019d8:	08009108 	.word	0x08009108

080019dc <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <Wifi_Station_DhcpIsEnable+0x100>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 ff5a 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80019f0:	2300      	movs	r3, #0
 80019f2:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80019f4:	f7ff fb10 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 80019f8:	4939      	ldr	r1, [pc, #228]	; (8001ae0 <Wifi_Station_DhcpIsEnable+0x104>)
 80019fa:	483a      	ldr	r0, [pc, #232]	; (8001ae4 <Wifi_Station_DhcpIsEnable+0x108>)
 80019fc:	f005 fcd8 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001a00:	4838      	ldr	r0, [pc, #224]	; (8001ae4 <Wifi_Station_DhcpIsEnable+0x108>)
 8001a02:	f7ff f937 	bl	8000c74 <Wifi_SendString>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f083 0301 	eor.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d153      	bne.n	8001aba <Wifi_Station_DhcpIsEnable+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001a12:	1db9      	adds	r1, r7, #6
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <Wifi_Station_DhcpIsEnable+0x10c>)
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4b34      	ldr	r3, [pc, #208]	; (8001aec <Wifi_Station_DhcpIsEnable+0x110>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a20:	f7ff f95a 	bl	8000cd8 <Wifi_WaitForString>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f083 0301 	eor.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d146      	bne.n	8001abe <Wifi_Station_DhcpIsEnable+0xe2>
			break;
		if(result == 2)
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d045      	beq.n	8001ac2 <Wifi_Station_DhcpIsEnable+0xe6>
			break;
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8001a36:	1dbb      	adds	r3, r7, #6
 8001a38:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <Wifi_Station_DhcpIsEnable+0x114>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff faa3 	bl	8000f88 <Wifi_ReturnInteger>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f083 0301 	eor.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d13b      	bne.n	8001ac6 <Wifi_Station_DhcpIsEnable+0xea>
			break;
		switch(result)
 8001a4e:	79bb      	ldrb	r3, [r7, #6]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d82f      	bhi.n	8001ab4 <Wifi_Station_DhcpIsEnable+0xd8>
 8001a54:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <Wifi_Station_DhcpIsEnable+0x80>)
 8001a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5a:	bf00      	nop
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a7f 	.word	0x08001a7f
 8001a64:	08001a91 	.word	0x08001a91
 8001a68:	08001aa3 	.word	0x08001aa3
		{
			case 0:
				Wifi.StationDhcp=false;
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8001a7c:	e01a      	b.n	8001ab4 <Wifi_Station_DhcpIsEnable+0xd8>
			case 1:
				Wifi.StationDhcp=false;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8001a8e:	e011      	b.n	8001ab4 <Wifi_Station_DhcpIsEnable+0xd8>
			case 2:
				Wifi.StationDhcp=true;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8001aa0:	e008      	b.n	8001ab4 <Wifi_Station_DhcpIsEnable+0xd8>
			case 3:
				Wifi.StationDhcp=true;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <Wifi_Station_DhcpIsEnable+0x118>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8001ab2:	bf00      	nop
		}
		returnVal=true;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	e006      	b.n	8001ac8 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8001aba:	bf00      	nop
 8001abc:	e004      	b.n	8001ac8 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8001abe:	bf00      	nop
 8001ac0:	e002      	b.n	8001ac8 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8001ac2:	bf00      	nop
 8001ac4:	e000      	b.n	8001ac8 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8001ac6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <Wifi_Station_DhcpIsEnable+0x100>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 ff37 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200006cc 	.word	0x200006cc
 8001ae0:	0800914c 	.word	0x0800914c
 8001ae4:	200008d1 	.word	0x200008d1
 8001ae8:	08008fdc 	.word	0x08008fdc
 8001aec:	08008fd8 	.word	0x08008fd8
 8001af0:	0800904c 	.word	0x0800904c
 8001af4:	200006d0 	.word	0x200006d0

08001af8 <Wifi_SoftAp_GetConnectedDevices>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_SoftAp_GetConnectedDevices(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af0a      	add	r7, sp, #40	; 0x28
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <Wifi_SoftAp_GetConnectedDevices+0x144>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f04f 31ff 	mov.w	r1, #4294967295
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fecc 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8001b10:	f7ff fa82 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWLIF\r\n");
 8001b14:	494a      	ldr	r1, [pc, #296]	; (8001c40 <Wifi_SoftAp_GetConnectedDevices+0x148>)
 8001b16:	484b      	ldr	r0, [pc, #300]	; (8001c44 <Wifi_SoftAp_GetConnectedDevices+0x14c>)
 8001b18:	f005 fc4a 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001b1c:	4849      	ldr	r0, [pc, #292]	; (8001c44 <Wifi_SoftAp_GetConnectedDevices+0x14c>)
 8001b1e:	f7ff f8a9 	bl	8000c74 <Wifi_SendString>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d176      	bne.n	8001c1c <Wifi_SoftAp_GetConnectedDevices+0x124>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001b2e:	1d79      	adds	r1, r7, #5
 8001b30:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <Wifi_SoftAp_GetConnectedDevices+0x150>)
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <Wifi_SoftAp_GetConnectedDevices+0x154>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3c:	f7ff f8cc 	bl	8000cd8 <Wifi_WaitForString>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d169      	bne.n	8001c20 <Wifi_SoftAp_GetConnectedDevices+0x128>
			break;
		if(result == 2)
 8001b4c:	797b      	ldrb	r3, [r7, #5]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d068      	beq.n	8001c24 <Wifi_SoftAp_GetConnectedDevices+0x12c>
			break;
		Wifi_RemoveChar((char*)Wifi.RxBuffer,'\r');
 8001b52:	210d      	movs	r1, #13
 8001b54:	483e      	ldr	r0, [pc, #248]	; (8001c50 <Wifi_SoftAp_GetConnectedDevices+0x158>)
 8001b56:	f7ff fa39 	bl	8000fcc <Wifi_RemoveChar>
    Wifi_ReturnStrings((char*)Wifi.RxBuffer,"\n,",10,Wifi.SoftApConnectedDevicesIp[0],Wifi.SoftApConnectedDevicesMac[0],Wifi.SoftApConnectedDevicesIp[1],Wifi.SoftApConnectedDevicesMac[1],Wifi.SoftApConnectedDevicesIp[2],Wifi.SoftApConnectedDevicesMac[2],Wifi.SoftApConnectedDevicesIp[3],Wifi.SoftApConnectedDevicesMac[3],Wifi.SoftApConnectedDevicesIp[4],Wifi.SoftApConnectedDevicesMac[4]);
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <Wifi_SoftAp_GetConnectedDevices+0x15c>)
 8001b5c:	9308      	str	r3, [sp, #32]
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <Wifi_SoftAp_GetConnectedDevices+0x160>)
 8001b60:	9307      	str	r3, [sp, #28]
 8001b62:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <Wifi_SoftAp_GetConnectedDevices+0x164>)
 8001b64:	9306      	str	r3, [sp, #24]
 8001b66:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <Wifi_SoftAp_GetConnectedDevices+0x168>)
 8001b68:	9305      	str	r3, [sp, #20]
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <Wifi_SoftAp_GetConnectedDevices+0x16c>)
 8001b6c:	9304      	str	r3, [sp, #16]
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <Wifi_SoftAp_GetConnectedDevices+0x170>)
 8001b70:	9303      	str	r3, [sp, #12]
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <Wifi_SoftAp_GetConnectedDevices+0x174>)
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <Wifi_SoftAp_GetConnectedDevices+0x178>)
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <Wifi_SoftAp_GetConnectedDevices+0x17c>)
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <Wifi_SoftAp_GetConnectedDevices+0x180>)
 8001b80:	220a      	movs	r2, #10
 8001b82:	493e      	ldr	r1, [pc, #248]	; (8001c7c <Wifi_SoftAp_GetConnectedDevices+0x184>)
 8001b84:	4832      	ldr	r0, [pc, #200]	; (8001c50 <Wifi_SoftAp_GetConnectedDevices+0x158>)
 8001b86:	f7ff f977 	bl	8000e78 <Wifi_ReturnStrings>
		for(uint8_t i=0 ; i<6 ; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	71bb      	strb	r3, [r7, #6]
 8001b8e:	e03f      	b.n	8001c10 <Wifi_SoftAp_GetConnectedDevices+0x118>
    {
      if( (Wifi.SoftApConnectedDevicesIp[i][0]<'0') || (Wifi.SoftApConnectedDevicesIp[i][0]>'9'))
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b2f      	cmp	r3, #47	; 0x2f
 8001ba0:	d908      	bls.n	8001bb4 <Wifi_SoftAp_GetConnectedDevices+0xbc>
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	4a36      	ldr	r2, [pc, #216]	; (8001c80 <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	4413      	add	r3, r2
 8001baa:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b39      	cmp	r3, #57	; 0x39
 8001bb2:	d907      	bls.n	8001bc4 <Wifi_SoftAp_GetConnectedDevices+0xcc>
        Wifi.SoftApConnectedDevicesIp[i][0]=0;
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	f203 734d 	addw	r3, r3, #1869	; 0x74d
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
      if( (Wifi.SoftApConnectedDevicesMac[i][0]<'0') || (Wifi.SoftApConnectedDevicesMac[i][0]>'9'))
 8001bc4:	79ba      	ldrb	r2, [r7, #6]
 8001bc6:	492e      	ldr	r1, [pc, #184]	; (8001c80 <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8001bda:	d90b      	bls.n	8001bf4 <Wifi_SoftAp_GetConnectedDevices+0xfc>
 8001bdc:	79ba      	ldrb	r2, [r7, #6]
 8001bde:	4928      	ldr	r1, [pc, #160]	; (8001c80 <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	440b      	add	r3, r1
 8001bea:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b39      	cmp	r3, #57	; 0x39
 8001bf2:	d90a      	bls.n	8001c0a <Wifi_SoftAp_GetConnectedDevices+0x112>
        Wifi.SoftApConnectedDevicesMac[i][0]=0;
 8001bf4:	79ba      	ldrb	r2, [r7, #6]
 8001bf6:	4922      	ldr	r1, [pc, #136]	; (8001c80 <Wifi_SoftAp_GetConnectedDevices+0x188>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	f203 73ad 	addw	r3, r3, #1965	; 0x7ad
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0 ; i<6 ; i++)
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	71bb      	strb	r3, [r7, #6]
 8001c10:	79bb      	ldrb	r3, [r7, #6]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d9bc      	bls.n	8001b90 <Wifi_SoftAp_GetConnectedDevices+0x98>
    }

		returnVal=true;
 8001c16:	2301      	movs	r3, #1
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	e004      	b.n	8001c26 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;
 8001c1c:	bf00      	nop
 8001c1e:	e002      	b.n	8001c26 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <Wifi_SoftAp_GetConnectedDevices+0x12e>
			break;
 8001c24:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <Wifi_SoftAp_GetConnectedDevices+0x144>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fe88 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200006cc 	.word	0x200006cc
 8001c40:	08009180 	.word	0x08009180
 8001c44:	200008d1 	.word	0x200008d1
 8001c48:	08008fdc 	.word	0x08008fdc
 8001c4c:	08008fd8 	.word	0x08008fd8
 8001c50:	200006d1 	.word	0x200006d1
 8001c54:	20000ec5 	.word	0x20000ec5
 8001c58:	20000e5d 	.word	0x20000e5d
 8001c5c:	20000eb3 	.word	0x20000eb3
 8001c60:	20000e4d 	.word	0x20000e4d
 8001c64:	20000ea1 	.word	0x20000ea1
 8001c68:	20000e3d 	.word	0x20000e3d
 8001c6c:	20000e8f 	.word	0x20000e8f
 8001c70:	20000e2d 	.word	0x20000e2d
 8001c74:	20000e7d 	.word	0x20000e7d
 8001c78:	20000e1d 	.word	0x20000e1d
 8001c7c:	0800918c 	.word	0x0800918c
 8001c80:	200006d0 	.word	0x200006d0

08001c84 <Wifi_TcpIp_GetConnectionStatus>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_TcpIp_GetConnectionStatus(void)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af04      	add	r7, sp, #16
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001c8a:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fe06 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001c9c:	f7ff f9bc 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTATUS\r\n");
 8001ca0:	4963      	ldr	r1, [pc, #396]	; (8001e30 <Wifi_TcpIp_GetConnectionStatus+0x1ac>)
 8001ca2:	4864      	ldr	r0, [pc, #400]	; (8001e34 <Wifi_TcpIp_GetConnectionStatus+0x1b0>)
 8001ca4:	f005 fb84 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001ca8:	4862      	ldr	r0, [pc, #392]	; (8001e34 <Wifi_TcpIp_GetConnectionStatus+0x1b0>)
 8001caa:	f7fe ffe3 	bl	8000c74 <Wifi_SendString>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 80a7 	bne.w	8001e0a <Wifi_TcpIp_GetConnectionStatus+0x186>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001cbc:	1d79      	adds	r1, r7, #5
 8001cbe:	4b5e      	ldr	r3, [pc, #376]	; (8001e38 <Wifi_TcpIp_GetConnectionStatus+0x1b4>)
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	; (8001e3c <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cca:	f7ff f805 	bl	8000cd8 <Wifi_WaitForString>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8099 	bne.w	8001e0e <Wifi_TcpIp_GetConnectionStatus+0x18a>
			break;
		if(result == 2)
 8001cdc:	797b      	ldrb	r3, [r7, #5]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	f000 8097 	beq.w	8001e12 <Wifi_TcpIp_GetConnectionStatus+0x18e>
			break;


		char *str = strstr((char*)Wifi.RxBuffer,"\nSTATUS:");
 8001ce4:	4956      	ldr	r1, [pc, #344]	; (8001e40 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8001ce6:	4857      	ldr	r0, [pc, #348]	; (8001e44 <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 8001ce8:	f005 fc06 	bl	80074f8 <strstr>
 8001cec:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8090 	beq.w	8001e16 <Wifi_TcpIp_GetConnectionStatus+0x192>
      break;
    str = strchr(str,':');
 8001cf6:	213a      	movs	r1, #58	; 0x3a
 8001cf8:	68b8      	ldr	r0, [r7, #8]
 8001cfa:	f005 fbe8 	bl	80074ce <strchr>
 8001cfe:	60b8      	str	r0, [r7, #8]
    str++;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	e012      	b.n	8001d32 <Wifi_TcpIp_GetConnectionStatus+0xae>
      Wifi.TcpIpConnections[i].status=(WifiConnectionStatus_t)atoi(str);
 8001d0c:	68b8      	ldr	r0, [r7, #8]
 8001d0e:	f005 f875 	bl	8006dfc <atoi>
 8001d12:	4603      	mov	r3, r0
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	b2d8      	uxtb	r0, r3
 8001d18:	494b      	ldr	r1, [pc, #300]	; (8001e48 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	440b      	add	r3, r1
 8001d24:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8001d28:	4602      	mov	r2, r0
 8001d2a:	701a      	strb	r2, [r3, #0]
    for(uint8_t i=0 ; i<5 ;i++)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d9e9      	bls.n	8001d0c <Wifi_TcpIp_GetConnectionStatus+0x88>
    str = strstr((char*)Wifi.RxBuffer,"+CIPSTATUS:");
 8001d38:	4944      	ldr	r1, [pc, #272]	; (8001e4c <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 8001d3a:	4842      	ldr	r0, [pc, #264]	; (8001e44 <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 8001d3c:	f005 fbdc 	bl	80074f8 <strstr>
 8001d40:	60b8      	str	r0, [r7, #8]
    printf("CIPSTATUS : %s",str);
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	4842      	ldr	r0, [pc, #264]	; (8001e50 <Wifi_TcpIp_GetConnectionStatus+0x1cc>)
 8001d46:	f005 fa2b 	bl	80071a0 <iprintf>
    for(uint8_t i=0 ; i<5 ;i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71bb      	strb	r3, [r7, #6]
 8001d4e:	e054      	b.n	8001dfa <Wifi_TcpIp_GetConnectionStatus+0x176>
    {
      sscanf(str,"+CIPSTATUS:%d,\"%3s\",\"%[^\"]\",%d,%d,%d",(int*)&Wifi.TcpIpConnections[i].LinkId,Wifi.TcpIpConnections[i].Type,Wifi.TcpIpConnections[i].RemoteIp,(int*)&Wifi.TcpIpConnections[i].RemotePort,(int*)&Wifi.TcpIpConnections[i].LocalPort,(int*)&Wifi.TcpIpConnections[i].RunAsServer);
 8001d50:	79ba      	ldrb	r2, [r7, #6]
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8001d5e:	4a3a      	ldr	r2, [pc, #232]	; (8001e48 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8001d60:	4413      	add	r3, r2
 8001d62:	1d5d      	adds	r5, r3, #5
 8001d64:	79ba      	ldrb	r2, [r7, #6]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8001d72:	4a35      	ldr	r2, [pc, #212]	; (8001e48 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8001d74:	4413      	add	r3, r2
 8001d76:	1d9e      	adds	r6, r3, #6
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8001d86:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	f103 010a 	add.w	r1, r3, #10
 8001d8e:	79ba      	ldrb	r2, [r7, #6]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001d9c:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	1d18      	adds	r0, r3, #4
 8001da2:	79ba      	ldrb	r2, [r7, #6]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001db0:	4a25      	ldr	r2, [pc, #148]	; (8001e48 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8001db2:	4413      	add	r3, r2
 8001db4:	1d9c      	adds	r4, r3, #6
 8001db6:	79ba      	ldrb	r2, [r7, #6]
 8001db8:	4613      	mov	r3, r2
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3308      	adds	r3, #8
 8001dca:	9303      	str	r3, [sp, #12]
 8001dcc:	9402      	str	r4, [sp, #8]
 8001dce:	9001      	str	r0, [sp, #4]
 8001dd0:	9100      	str	r1, [sp, #0]
 8001dd2:	4633      	mov	r3, r6
 8001dd4:	462a      	mov	r2, r5
 8001dd6:	491f      	ldr	r1, [pc, #124]	; (8001e54 <Wifi_TcpIp_GetConnectionStatus+0x1d0>)
 8001dd8:	68b8      	ldr	r0, [r7, #8]
 8001dda:	f005 fb09 	bl	80073f0 <siscanf>
      str++;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
      str = strstr(str,"+CIPSTATUS:");
 8001de4:	4919      	ldr	r1, [pc, #100]	; (8001e4c <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f005 fb86 	bl	80074f8 <strstr>
 8001dec:	60b8      	str	r0, [r7, #8]
      if(str==NULL)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <Wifi_TcpIp_GetConnectionStatus+0x17e>
    for(uint8_t i=0 ; i<5 ;i++)
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	3301      	adds	r3, #1
 8001df8:	71bb      	strb	r3, [r7, #6]
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d9a7      	bls.n	8001d50 <Wifi_TcpIp_GetConnectionStatus+0xcc>
 8001e00:	e000      	b.n	8001e04 <Wifi_TcpIp_GetConnectionStatus+0x180>
        break;
 8001e02:	bf00      	nop
    }
		returnVal=true;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e006      	b.n	8001e18 <Wifi_TcpIp_GetConnectionStatus+0x194>
			break;
 8001e0a:	bf00      	nop
 8001e0c:	e004      	b.n	8001e18 <Wifi_TcpIp_GetConnectionStatus+0x194>
			break;
 8001e0e:	bf00      	nop
 8001e10:	e002      	b.n	8001e18 <Wifi_TcpIp_GetConnectionStatus+0x194>
			break;
 8001e12:	bf00      	nop
 8001e14:	e000      	b.n	8001e18 <Wifi_TcpIp_GetConnectionStatus+0x194>
      break;
 8001e16:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fd8f 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2c:	200006cc 	.word	0x200006cc
 8001e30:	080091b4 	.word	0x080091b4
 8001e34:	200008d1 	.word	0x200008d1
 8001e38:	08008fdc 	.word	0x08008fdc
 8001e3c:	08008fd8 	.word	0x08008fd8
 8001e40:	080091c4 	.word	0x080091c4
 8001e44:	200006d1 	.word	0x200006d1
 8001e48:	200006d0 	.word	0x200006d0
 8001e4c:	080091d0 	.word	0x080091d0
 8001e50:	080091dc 	.word	0x080091dc
 8001e54:	080091ec 	.word	0x080091ec

08001e58 <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <Wifi_TcpIp_SetMultiConnection+0x90>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fd1a 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001e74:	f7ff f8d0 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	491b      	ldr	r1, [pc, #108]	; (8001eec <Wifi_TcpIp_SetMultiConnection+0x94>)
 8001e7e:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <Wifi_TcpIp_SetMultiConnection+0x98>)
 8001e80:	f005 fa96 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001e84:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <Wifi_TcpIp_SetMultiConnection+0x98>)
 8001e86:	f7fe fef5 	bl	8000c74 <Wifi_SendString>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d119      	bne.n	8001eca <Wifi_TcpIp_SetMultiConnection+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001e96:	f107 010e 	add.w	r1, r7, #14
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <Wifi_TcpIp_SetMultiConnection+0x9c>)
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <Wifi_TcpIp_SetMultiConnection+0xa0>)
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea6:	f7fe ff17 	bl	8000cd8 <Wifi_WaitForString>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10b      	bne.n	8001ece <Wifi_TcpIp_SetMultiConnection+0x76>
			break;
		if(result == 2)
 8001eb6:	7bbb      	ldrb	r3, [r7, #14]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d00a      	beq.n	8001ed2 <Wifi_TcpIp_SetMultiConnection+0x7a>
			break;
    Wifi.TcpIpMultiConnection=EnableMultiConnections;
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <Wifi_TcpIp_SetMultiConnection+0xa4>)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f882 3819 	strb.w	r3, [r2, #2073]	; 0x819
		returnVal=true;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e004      	b.n	8001ed4 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8001eca:	bf00      	nop
 8001ecc:	e002      	b.n	8001ed4 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8001ece:	bf00      	nop
 8001ed0:	e000      	b.n	8001ed4 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8001ed2:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <Wifi_TcpIp_SetMultiConnection+0x90>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 fd31 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200006cc 	.word	0x200006cc
 8001eec:	08009228 	.word	0x08009228
 8001ef0:	200008d1 	.word	0x200008d1
 8001ef4:	08008fdc 	.word	0x08008fdc
 8001ef8:	08008fd8 	.word	0x08008fd8
 8001efc:	200006d0 	.word	0x200006d0

08001f00 <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af02      	add	r7, sp, #8

  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <Wifi_TcpIp_GetMultiConnection+0xac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 fcc8 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001f14:	2300      	movs	r3, #0
 8001f16:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8001f18:	f7ff f87e 	bl	8001018 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 8001f1c:	4924      	ldr	r1, [pc, #144]	; (8001fb0 <Wifi_TcpIp_GetMultiConnection+0xb0>)
 8001f1e:	4825      	ldr	r0, [pc, #148]	; (8001fb4 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 8001f20:	f005 fa46 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 8001f26:	f7fe fea5 	bl	8000c74 <Wifi_SendString>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d129      	bne.n	8001f8a <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001f36:	1db9      	adds	r1, r7, #6
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <Wifi_TcpIp_GetMultiConnection+0xb8>)
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <Wifi_TcpIp_GetMultiConnection+0xbc>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f44:	f7fe fec8 	bl	8000cd8 <Wifi_WaitForString>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f083 0301 	eor.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d11c      	bne.n	8001f8e <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(result == 2)
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d01b      	beq.n	8001f92 <Wifi_TcpIp_GetMultiConnection+0x92>
			break;
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8001f5a:	1dbb      	adds	r3, r7, #6
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <Wifi_TcpIp_GetMultiConnection+0xc0>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f811 	bl	8000f88 <Wifi_ReturnInteger>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d111      	bne.n	8001f96 <Wifi_TcpIp_GetMultiConnection+0x96>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 8001f80:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
		returnVal=true;
 8001f84:	2301      	movs	r3, #1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	e006      	b.n	8001f98 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 8001f8a:	bf00      	nop
 8001f8c:	e004      	b.n	8001f98 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 8001f8e:	bf00      	nop
 8001f90:	e002      	b.n	8001f98 <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 8001f92:	bf00      	nop
 8001f94:	e000      	b.n	8001f98 <Wifi_TcpIp_GetMultiConnection+0x98>
      break;
 8001f96:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <Wifi_TcpIp_GetMultiConnection+0xac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fccf 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200006cc 	.word	0x200006cc
 8001fb0:	08009238 	.word	0x08009238
 8001fb4:	200008d1 	.word	0x200008d1
 8001fb8:	08008fdc 	.word	0x08008fdc
 8001fbc:	08008fd8 	.word	0x08008fd8
 8001fc0:	0800904c 	.word	0x0800904c
 8001fc4:	200006d0 	.word	0x200006d0

08001fc8 <Wifi_TcpIp_StartTcpConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	81bb      	strh	r3, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	80fb      	strh	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001fe0:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <Wifi_TcpIp_StartTcpConnection+0x11c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f002 fc5b 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
	do
	{
    Wifi_RxClear();
 8001ff2:	f7ff f811 	bl	8001018 <Wifi_RxClear>
    sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 8001ff6:	89bb      	ldrh	r3, [r7, #12]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	493b      	ldr	r1, [pc, #236]	; (80020e8 <Wifi_TcpIp_StartTcpConnection+0x120>)
 8001ffc:	483b      	ldr	r0, [pc, #236]	; (80020ec <Wifi_TcpIp_StartTcpConnection+0x124>)
 8001ffe:	f005 f9d7 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002002:	483a      	ldr	r0, [pc, #232]	; (80020ec <Wifi_TcpIp_StartTcpConnection+0x124>)
 8002004:	f7fe fe36 	bl	8000c74 <Wifi_SendString>
 8002008:	4603      	mov	r3, r0
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d152      	bne.n	80020ba <Wifi_TcpIp_StartTcpConnection+0xf2>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8002014:	f107 0116 	add.w	r1, r7, #22
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <Wifi_TcpIp_StartTcpConnection+0x128>)
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 800201e:	2202      	movs	r2, #2
 8002020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002024:	f7fe fe58 	bl	8000cd8 <Wifi_WaitForString>
 8002028:	4603      	mov	r3, r0
 800202a:	f083 0301 	eor.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d144      	bne.n	80020be <Wifi_TcpIp_StartTcpConnection+0xf6>
			break;
		if(result == 2)
 8002034:	7dbb      	ldrb	r3, [r7, #22]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d043      	beq.n	80020c2 <Wifi_TcpIp_StartTcpConnection+0xfa>
			break;
		Wifi_RxClear();
 800203a:	f7fe ffed 	bl	8001018 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800203e:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <Wifi_TcpIp_StartTcpConnection+0x130>)
 8002040:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <Wifi_TcpIp_StartTcpConnection+0x9a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 800204e:	89ba      	ldrh	r2, [r7, #12]
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4928      	ldr	r1, [pc, #160]	; (80020fc <Wifi_TcpIp_StartTcpConnection+0x134>)
 800205a:	4824      	ldr	r0, [pc, #144]	; (80020ec <Wifi_TcpIp_StartTcpConnection+0x124>)
 800205c:	f005 f9a8 	bl	80073b0 <siprintf>
 8002060:	e00a      	b.n	8002078 <Wifi_TcpIp_StartTcpConnection+0xb0>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 8002062:	7bf9      	ldrb	r1, [r7, #15]
 8002064:	89bb      	ldrh	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	9201      	str	r2, [sp, #4]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	460a      	mov	r2, r1
 8002070:	4923      	ldr	r1, [pc, #140]	; (8002100 <Wifi_TcpIp_StartTcpConnection+0x138>)
 8002072:	481e      	ldr	r0, [pc, #120]	; (80020ec <Wifi_TcpIp_StartTcpConnection+0x124>)
 8002074:	f005 f99c 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002078:	481c      	ldr	r0, [pc, #112]	; (80020ec <Wifi_TcpIp_StartTcpConnection+0x124>)
 800207a:	f7fe fdfb 	bl	8000c74 <Wifi_SendString>
 800207e:	4603      	mov	r3, r0
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d11d      	bne.n	80020c6 <Wifi_TcpIp_StartTcpConnection+0xfe>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 800208a:	f107 0116 	add.w	r1, r7, #22
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <Wifi_TcpIp_StartTcpConnection+0x128>)
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <Wifi_TcpIp_StartTcpConnection+0x13c>)
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 8002098:	2203      	movs	r2, #3
 800209a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800209e:	f7fe fe1b 	bl	8000cd8 <Wifi_WaitForString>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <Wifi_TcpIp_StartTcpConnection+0x102>
			break;
		if(result == 3)
 80020ae:	7dbb      	ldrb	r3, [r7, #22]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d00c      	beq.n	80020ce <Wifi_TcpIp_StartTcpConnection+0x106>
			break;
		returnVal=true;
 80020b4:	2301      	movs	r3, #1
 80020b6:	75fb      	strb	r3, [r7, #23]
 80020b8:	e00a      	b.n	80020d0 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 80020ba:	bf00      	nop
 80020bc:	e008      	b.n	80020d0 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 80020be:	bf00      	nop
 80020c0:	e006      	b.n	80020d0 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 80020c2:	bf00      	nop
 80020c4:	e004      	b.n	80020d0 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 80020c6:	bf00      	nop
 80020c8:	e002      	b.n	80020d0 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 80020ca:	bf00      	nop
 80020cc:	e000      	b.n	80020d0 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
 80020ce:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <Wifi_TcpIp_StartTcpConnection+0x11c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fc33 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 80020da:	7dfb      	ldrb	r3, [r7, #23]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200006cc 	.word	0x200006cc
 80020e8:	08009248 	.word	0x08009248
 80020ec:	200008d1 	.word	0x200008d1
 80020f0:	08008fdc 	.word	0x08008fdc
 80020f4:	08008fd8 	.word	0x08008fd8
 80020f8:	200006d0 	.word	0x200006d0
 80020fc:	0800925c 	.word	0x0800925c
 8002100:	0800927c 	.word	0x0800927c
 8002104:	080092a0 	.word	0x080092a0

08002108 <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <Wifi_TcpIp_Close+0xa4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f04f 31ff 	mov.w	r1, #4294967295
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fbc2 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8002124:	f7fe ff78 	bl	8001018 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <Wifi_TcpIp_Close+0xa8>)
 800212a:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <Wifi_TcpIp_Close+0x3a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 8002138:	491e      	ldr	r1, [pc, #120]	; (80021b4 <Wifi_TcpIp_Close+0xac>)
 800213a:	481f      	ldr	r0, [pc, #124]	; (80021b8 <Wifi_TcpIp_Close+0xb0>)
 800213c:	f005 f938 	bl	80073b0 <siprintf>
 8002140:	e005      	b.n	800214e <Wifi_TcpIp_Close+0x46>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	461a      	mov	r2, r3
 8002146:	491d      	ldr	r1, [pc, #116]	; (80021bc <Wifi_TcpIp_Close+0xb4>)
 8002148:	481b      	ldr	r0, [pc, #108]	; (80021b8 <Wifi_TcpIp_Close+0xb0>)
 800214a:	f005 f931 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800214e:	481a      	ldr	r0, [pc, #104]	; (80021b8 <Wifi_TcpIp_Close+0xb0>)
 8002150:	f7fe fd90 	bl	8000c74 <Wifi_SendString>
 8002154:	4603      	mov	r3, r0
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d115      	bne.n	800218c <Wifi_TcpIp_Close+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8002160:	f107 010e 	add.w	r1, r7, #14
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <Wifi_TcpIp_Close+0xb8>)
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <Wifi_TcpIp_Close+0xbc>)
 800216a:	2202      	movs	r2, #2
 800216c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002170:	f7fe fdb2 	bl	8000cd8 <Wifi_WaitForString>
 8002174:	4603      	mov	r3, r0
 8002176:	f083 0301 	eor.w	r3, r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <Wifi_TcpIp_Close+0x88>
			break;
		if(result == 2)
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d006      	beq.n	8002194 <Wifi_TcpIp_Close+0x8c>
			break;
		returnVal=true;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e004      	b.n	8002196 <Wifi_TcpIp_Close+0x8e>
			break;
 800218c:	bf00      	nop
 800218e:	e002      	b.n	8002196 <Wifi_TcpIp_Close+0x8e>
			break;
 8002190:	bf00      	nop
 8002192:	e000      	b.n	8002196 <Wifi_TcpIp_Close+0x8e>
			break;
 8002194:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <Wifi_TcpIp_Close+0xa4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f002 fbd0 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200006cc 	.word	0x200006cc
 80021b0:	200006d0 	.word	0x200006d0
 80021b4:	080092f4 	.word	0x080092f4
 80021b8:	200008d1 	.word	0x200008d1
 80021bc:	08009304 	.word	0x08009304
 80021c0:	08008fdc 	.word	0x08008fdc
 80021c4:	08008fd8 	.word	0x08008fd8

080021c8 <Wifi_TcpIp_SendDataUdp>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_SendDataUdp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	4603      	mov	r3, r0
 80021d0:	603a      	str	r2, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	460b      	mov	r3, r1
 80021d6:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80021d8:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <Wifi_TcpIp_SendDataUdp+0xdc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 fb5f 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80021ea:	f7fe ff15 	bl	8001018 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <Wifi_TcpIp_SendDataUdp+0xe0>)
 80021f0:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 80021f4:	f083 0301 	eor.w	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <Wifi_TcpIp_SendDataUdp+0x40>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=0\r\n");
 80021fe:	492b      	ldr	r1, [pc, #172]	; (80022ac <Wifi_TcpIp_SendDataUdp+0xe4>)
 8002200:	482b      	ldr	r0, [pc, #172]	; (80022b0 <Wifi_TcpIp_SendDataUdp+0xe8>)
 8002202:	f005 f8d5 	bl	80073b0 <siprintf>
 8002206:	e005      	b.n	8002214 <Wifi_TcpIp_SendDataUdp+0x4c>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSEND=%d,%d\r\n",LinkId,dataLen);
 8002208:	79fa      	ldrb	r2, [r7, #7]
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	4929      	ldr	r1, [pc, #164]	; (80022b4 <Wifi_TcpIp_SendDataUdp+0xec>)
 800220e:	4828      	ldr	r0, [pc, #160]	; (80022b0 <Wifi_TcpIp_SendDataUdp+0xe8>)
 8002210:	f005 f8ce 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002214:	4826      	ldr	r0, [pc, #152]	; (80022b0 <Wifi_TcpIp_SendDataUdp+0xe8>)
 8002216:	f7fe fd2d 	bl	8000c74 <Wifi_SendString>
 800221a:	4603      	mov	r3, r0
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d12c      	bne.n	8002280 <Wifi_TcpIp_SendDataUdp+0xb8>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,">","ERROR")==false)
 8002226:	f107 010e 	add.w	r1, r7, #14
 800222a:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <Wifi_TcpIp_SendDataUdp+0xf0>)
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <Wifi_TcpIp_SendDataUdp+0xf4>)
 8002230:	2202      	movs	r2, #2
 8002232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002236:	f7fe fd4f 	bl	8000cd8 <Wifi_WaitForString>
 800223a:	4603      	mov	r3, r0
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11e      	bne.n	8002284 <Wifi_TcpIp_SendDataUdp+0xbc>
			break;
		if(result == 2)
 8002246:	7bbb      	ldrb	r3, [r7, #14]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d01d      	beq.n	8002288 <Wifi_TcpIp_SendDataUdp+0xc0>
			break;
    Wifi_RxClear();
 800224c:	f7fe fee4 	bl	8001018 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 8002250:	88bb      	ldrh	r3, [r7, #4]
 8002252:	4619      	mov	r1, r3
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f7fe fce7 	bl	8000c28 <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800225a:	f107 010e 	add.w	r1, r7, #14
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <Wifi_TcpIp_SendDataUdp+0xf0>)
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <Wifi_TcpIp_SendDataUdp+0xf8>)
 8002264:	2202      	movs	r2, #2
 8002266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800226a:	f7fe fd35 	bl	8000cd8 <Wifi_WaitForString>
 800226e:	4603      	mov	r3, r0
 8002270:	f083 0301 	eor.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <Wifi_TcpIp_SendDataUdp+0xc4>
			break;
		returnVal=true;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e006      	b.n	800228e <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8002280:	bf00      	nop
 8002282:	e004      	b.n	800228e <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <Wifi_TcpIp_SendDataUdp+0xc6>
			break;
 800228c:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <Wifi_TcpIp_SendDataUdp+0xdc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fb54 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 8002298:	7bfb      	ldrb	r3, [r7, #15]

}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200006cc 	.word	0x200006cc
 80022a8:	200006d0 	.word	0x200006d0
 80022ac:	0800933c 	.word	0x0800933c
 80022b0:	200008d1 	.word	0x200008d1
 80022b4:	08009350 	.word	0x08009350
 80022b8:	08008fdc 	.word	0x08008fdc
 80022bc:	08009364 	.word	0x08009364
 80022c0:	08008fd8 	.word	0x08008fd8

080022c4 <Wifi_TcpIp_SendDataTcp>:
//#########################################################################################################
bool  Wifi_TcpIp_SendDataTcp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4603      	mov	r3, r0
 80022cc:	603a      	str	r2, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	460b      	mov	r3, r1
 80022d2:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80022d4:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <Wifi_TcpIp_SendDataTcp+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 fae1 	bl	80048a4 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80022e6:	f7fe fe97 	bl	8001018 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 80022ea:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <Wifi_TcpIp_SendDataTcp+0x10c>)
 80022ec:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <Wifi_TcpIp_SendDataTcp+0x44>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d\r\n",dataLen);
 80022fa:	88bb      	ldrh	r3, [r7, #4]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4935      	ldr	r1, [pc, #212]	; (80023d4 <Wifi_TcpIp_SendDataTcp+0x110>)
 8002300:	4835      	ldr	r0, [pc, #212]	; (80023d8 <Wifi_TcpIp_SendDataTcp+0x114>)
 8002302:	f005 f855 	bl	80073b0 <siprintf>
 8002306:	e005      	b.n	8002314 <Wifi_TcpIp_SendDataTcp+0x50>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d,%d\r\n",LinkId,dataLen);
 8002308:	79fa      	ldrb	r2, [r7, #7]
 800230a:	88bb      	ldrh	r3, [r7, #4]
 800230c:	4933      	ldr	r1, [pc, #204]	; (80023dc <Wifi_TcpIp_SendDataTcp+0x118>)
 800230e:	4832      	ldr	r0, [pc, #200]	; (80023d8 <Wifi_TcpIp_SendDataTcp+0x114>)
 8002310:	f005 f84e 	bl	80073b0 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8002314:	4830      	ldr	r0, [pc, #192]	; (80023d8 <Wifi_TcpIp_SendDataTcp+0x114>)
 8002316:	f7fe fcad 	bl	8000c74 <Wifi_SendString>
 800231a:	4603      	mov	r3, r0
 800231c:	f083 0301 	eor.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d13e      	bne.n	80023a4 <Wifi_TcpIp_SendDataTcp+0xe0>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8002326:	f107 010e 	add.w	r1, r7, #14
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <Wifi_TcpIp_SendDataTcp+0x11c>)
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <Wifi_TcpIp_SendDataTcp+0x120>)
 8002330:	2202      	movs	r2, #2
 8002332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002336:	f7fe fccf 	bl	8000cd8 <Wifi_WaitForString>
 800233a:	4603      	mov	r3, r0
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d130      	bne.n	80023a8 <Wifi_TcpIp_SendDataTcp+0xe4>
			break;
			if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,3,">","ERROR","busy")==false)
 8002346:	f107 010e 	add.w	r1, r7, #14
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <Wifi_TcpIp_SendDataTcp+0x124>)
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <Wifi_TcpIp_SendDataTcp+0x11c>)
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <Wifi_TcpIp_SendDataTcp+0x128>)
 8002354:	2203      	movs	r2, #3
 8002356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235a:	f7fe fcbd 	bl	8000cd8 <Wifi_WaitForString>
 800235e:	4603      	mov	r3, r0
 8002360:	f083 0301 	eor.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d120      	bne.n	80023ac <Wifi_TcpIp_SendDataTcp+0xe8>
			break;
		if(result > 1)
 800236a:	7bbb      	ldrb	r3, [r7, #14]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d81f      	bhi.n	80023b0 <Wifi_TcpIp_SendDataTcp+0xec>
			break;
    Wifi_RxClear();
 8002370:	f7fe fe52 	bl	8001018 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	4619      	mov	r1, r3
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f7fe fc55 	bl	8000c28 <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800237e:	f107 010e 	add.w	r1, r7, #14
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <Wifi_TcpIp_SendDataTcp+0x11c>)
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <Wifi_TcpIp_SendDataTcp+0x120>)
 8002388:	2202      	movs	r2, #2
 800238a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800238e:	f7fe fca3 	bl	8000cd8 <Wifi_WaitForString>
 8002392:	4603      	mov	r3, r0
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <Wifi_TcpIp_SendDataTcp+0xf0>
			break;
		returnVal=true;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e008      	b.n	80023b6 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 80023a4:	bf00      	nop
 80023a6:	e006      	b.n	80023b6 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 80023a8:	bf00      	nop
 80023aa:	e004      	b.n	80023b6 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 80023ac:	bf00      	nop
 80023ae:	e002      	b.n	80023b6 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <Wifi_TcpIp_SendDataTcp+0xf2>
			break;
 80023b4:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <Wifi_TcpIp_SendDataTcp+0x108>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fac0 	bl	8004940 <osSemaphoreRelease>
	return returnVal;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200006cc 	.word	0x200006cc
 80023d0:	200006d0 	.word	0x200006d0
 80023d4:	08009368 	.word	0x08009368
 80023d8:	200008d1 	.word	0x200008d1
 80023dc:	0800937c 	.word	0x0800937c
 80023e0:	08008fdc 	.word	0x08008fdc
 80023e4:	08008fd8 	.word	0x08008fd8
 80023e8:	08009394 	.word	0x08009394
 80023ec:	08009364 	.word	0x08009364

080023f0 <Wifi_UserInit>:
#include "Wifi.h"

//#######################################################################################
void	Wifi_UserInit(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	Wifi_SetMode(WifiMode_Station);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7ff f931 	bl	800165c <Wifi_SetMode>
  //Wifi_SetMode(WifiMode_SoftAp);

  while (Wifi_Station_ConnectToAp("Jules","montazac",NULL) == false){
 80023fa:	e002      	b.n	8002402 <Wifi_UserInit+0x12>
	  printf("Reconexion en cours ...\n");
 80023fc:	4809      	ldr	r0, [pc, #36]	; (8002424 <Wifi_UserInit+0x34>)
 80023fe:	f004 ff55 	bl	80072ac <puts>
  while (Wifi_Station_ConnectToAp("Jules","montazac",NULL) == false){
 8002402:	2200      	movs	r2, #0
 8002404:	4908      	ldr	r1, [pc, #32]	; (8002428 <Wifi_UserInit+0x38>)
 8002406:	4809      	ldr	r0, [pc, #36]	; (800242c <Wifi_UserInit+0x3c>)
 8002408:	f7ff fa7e 	bl	8001908 <Wifi_Station_ConnectToAp>
 800240c:	4603      	mov	r3, r0
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f1      	bne.n	80023fc <Wifi_UserInit+0xc>
  }
  printf("\n Connexion établie ! \n");
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <Wifi_UserInit+0x40>)
 800241a:	f004 ff47 	bl	80072ac <puts>
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0800939c 	.word	0x0800939c
 8002428:	080093b4 	.word	0x080093b4
 800242c:	080093c0 	.word	0x080093c0
 8002430:	080093c8 	.word	0x080093c8

08002434 <Wifi_UserProcess>:
//#######################################################################################
void  Wifi_UserProcess(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  static uint8_t last=0;
  if(strstr(Wifi.MyIP,"0.0.0.0")!=NULL)
 8002438:	490d      	ldr	r1, [pc, #52]	; (8002470 <Wifi_UserProcess+0x3c>)
 800243a:	480e      	ldr	r0, [pc, #56]	; (8002474 <Wifi_UserProcess+0x40>)
 800243c:	f005 f85c 	bl	80074f8 <strstr>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <Wifi_UserProcess+0x1a>
  {
    if(last!=1)
	{

	}
    last=1;
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <Wifi_UserProcess+0x44>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
    {
      Wifi_TcpIp_StartTcpConnection(0,Wifi.MyGateWay,33333,10);
    }
    last=2;
  }
}
 800244c:	e00d      	b.n	800246a <Wifi_UserProcess+0x36>
    if(last!=2)
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <Wifi_UserProcess+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d006      	beq.n	8002464 <Wifi_UserProcess+0x30>
      Wifi_TcpIp_StartTcpConnection(0,Wifi.MyGateWay,33333,10);
 8002456:	230a      	movs	r3, #10
 8002458:	f248 2235 	movw	r2, #33333	; 0x8235
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <Wifi_UserProcess+0x48>)
 800245e:	2000      	movs	r0, #0
 8002460:	f7ff fdb2 	bl	8001fc8 <Wifi_TcpIp_StartTcpConnection>
    last=2;
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <Wifi_UserProcess+0x44>)
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	080093e0 	.word	0x080093e0
 8002474:	20000deb 	.word	0x20000deb
 8002478:	20000f84 	.word	0x20000f84
 800247c:	20000dfb 	.word	0x20000dfb

08002480 <Wifi_UserGetUdpData>:
//#######################################################################################
void  Wifi_UserGetUdpData(uint8_t LinkId,uint16_t DataLen,uint8_t *Data)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	603a      	str	r2, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	460b      	mov	r3, r1
 800248e:	80bb      	strh	r3, [r7, #4]
  Wifi_TcpIp_SendDataUdp(LinkId,2,(uint8_t*)"OK");
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <Wifi_UserGetUdpData+0x24>)
 8002494:	2102      	movs	r1, #2
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fe96 	bl	80021c8 <Wifi_TcpIp_SendDataUdp>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	080093e8 	.word	0x080093e8

080024a8 <Wifi_UserGetTcpData>:
//#######################################################################################
void  Wifi_UserGetTcpData(uint8_t LinkId,uint16_t DataLen,uint8_t *Data)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	603a      	str	r2, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
 80024b4:	460b      	mov	r3, r1
 80024b6:	80bb      	strh	r3, [r7, #4]
  Wifi_TcpIp_SendDataTcp(LinkId,2,(uint8_t*)"OK");
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <Wifi_UserGetTcpData+0x24>)
 80024bc:	2102      	movs	r1, #2
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff00 	bl	80022c4 <Wifi_TcpIp_SendDataTcp>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	080093e8 	.word	0x080093e8

080024d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d0:	480c      	ldr	r0, [pc, #48]	; (8002504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024d2:	490d      	ldr	r1, [pc, #52]	; (8002508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024d4:	4a0d      	ldr	r2, [pc, #52]	; (800250c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d8:	e002      	b.n	80024e0 <LoopCopyDataInit>

080024da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024de:	3304      	adds	r3, #4

080024e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e4:	d3f9      	bcc.n	80024da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e8:	4c0a      	ldr	r4, [pc, #40]	; (8002514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ec:	e001      	b.n	80024f2 <LoopFillZerobss>

080024ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f0:	3204      	adds	r2, #4

080024f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f4:	d3fb      	bcc.n	80024ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024f6:	f7fe fabf 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024fa:	f004 fd7f 	bl	8006ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024fe:	f7fe f8c9 	bl	8000694 <main>
  bx lr
 8002502:	4770      	bx	lr
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800250c:	08009698 	.word	0x08009698
  ldr r2, =_sbss
 8002510:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002514:	20001ce8 	.word	0x20001ce8

08002518 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC1_IRQHandler>

0800251a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002524:	2003      	movs	r0, #3
 8002526:	f000 f8d7 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252a:	200f      	movs	r0, #15
 800252c:	f7fe f95a 	bl	80007e4 <HAL_InitTick>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	e001      	b.n	8002540 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800253c:	f7fe f91e 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002540:	79fb      	ldrb	r3, [r7, #7]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_IncTick+0x1c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_IncTick+0x20>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4413      	add	r3, r2
 800255a:	4a03      	ldr	r2, [pc, #12]	; (8002568 <HAL_IncTick+0x1c>)
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000f88 	.word	0x20000f88
 800256c:	20000008 	.word	0x20000008

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <HAL_GetTick+0x10>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	20000f88 	.word	0x20000f88

08002584 <__NVIC_SetPriorityGrouping>:
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4906      	ldr	r1, [pc, #24]	; (800261c <__NVIC_EnableIRQ+0x34>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff4f 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff64 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ffb2 	bl	8002674 <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff81 	bl	8002620 <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff57 	bl	80025e8 <__NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d008      	beq.n	800276c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2204      	movs	r2, #4
 800275e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e022      	b.n	80027b2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 020e 	bic.w	r2, r2, #14
 800277a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f003 021c 	and.w	r2, r3, #28
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d005      	beq.n	80027e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2204      	movs	r2, #4
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e029      	b.n	8002834 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020e 	bic.w	r2, r2, #14
 80027ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f003 021c 	and.w	r2, r3, #28
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
    }
  }
  return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002856:	e160      	b.n	8002b1a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2101      	movs	r1, #1
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8152 	beq.w	8002b14 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d005      	beq.n	8002888 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002884:	2b02      	cmp	r3, #2
 8002886:	d130      	bne.n	80028ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80028be:	2201      	movs	r2, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 0201 	and.w	r2, r3, #1
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d017      	beq.n	8002926 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d123      	bne.n	800297a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	08da      	lsrs	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3208      	adds	r2, #8
 8002974:	6939      	ldr	r1, [r7, #16]
 8002976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0203 	and.w	r2, r3, #3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80ac 	beq.w	8002b14 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029bc:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4a5d      	ldr	r2, [pc, #372]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6213      	str	r3, [r2, #32]
 80029c8:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80029d4:	4a59      	ldr	r2, [pc, #356]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	220f      	movs	r2, #15
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a51      	ldr	r2, [pc, #324]	; (8002b40 <HAL_GPIO_Init+0x300>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d025      	beq.n	8002a4c <HAL_GPIO_Init+0x20c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d01f      	beq.n	8002a48 <HAL_GPIO_Init+0x208>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x308>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d019      	beq.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_GPIO_Init+0x30c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <HAL_GPIO_Init+0x200>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <HAL_GPIO_Init+0x310>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00d      	beq.n	8002a3c <HAL_GPIO_Init+0x1fc>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <HAL_GPIO_Init+0x314>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <HAL_GPIO_Init+0x1f8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a4b      	ldr	r2, [pc, #300]	; (8002b58 <HAL_GPIO_Init+0x318>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_GPIO_Init+0x1f4>
 8002a30:	2306      	movs	r3, #6
 8002a32:	e00c      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a34:	2307      	movs	r3, #7
 8002a36:	e00a      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a38:	2305      	movs	r3, #5
 8002a3a:	e008      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e006      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a40:	2303      	movs	r3, #3
 8002a42:	e004      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e002      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	f002 0203 	and.w	r2, r2, #3
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	4093      	lsls	r3, r2
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a5e:	4937      	ldr	r1, [pc, #220]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	3302      	adds	r3, #2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6c:	4b3b      	ldr	r3, [pc, #236]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a90:	4a32      	ldr	r2, [pc, #200]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aba:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3301      	adds	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f ae97 	bne.w	8002858 <HAL_GPIO_Init+0x18>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40021400 	.word	0x40021400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40010400 	.word	0x40010400

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e31d      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b94      	ldr	r3, [pc, #592]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b91      	ldr	r3, [pc, #580]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d07b      	beq.n	8002cba <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d006      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d10f      	bne.n	8002bee <HAL_RCC_OscConfig+0x5e>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d10b      	bne.n	8002bee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd6:	4b87      	ldr	r3, [pc, #540]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d06a      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x128>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d166      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e2f7      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x74>
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e02d      	b.n	8002c60 <HAL_RCC_OscConfig+0xd0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCC_OscConfig+0x96>
 8002c0c:	4b79      	ldr	r3, [pc, #484]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a78      	ldr	r2, [pc, #480]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e01c      	b.n	8002c60 <HAL_RCC_OscConfig+0xd0>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0xb8>
 8002c2e:	4b71      	ldr	r3, [pc, #452]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a70      	ldr	r2, [pc, #448]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6e      	ldr	r3, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6d      	ldr	r2, [pc, #436]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xd0>
 8002c48:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a69      	ldr	r2, [pc, #420]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a66      	ldr	r2, [pc, #408]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff fc82 	bl	8002570 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff fc7e 	bl	8002570 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e2ad      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c82:	4b5c      	ldr	r3, [pc, #368]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff fc6e 	bl	8002570 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff fc6a 	bl	8002570 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e299      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002caa:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x108>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d05a      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d119      	bne.n	8002d06 <HAL_RCC_OscConfig+0x176>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d116      	bne.n	8002d06 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd8:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x160>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e276      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	493d      	ldr	r1, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d04:	e03a      	b.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d020      	beq.n	8002d50 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCC_OscConfig+0x268>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7ff fc2c 	bl	8002570 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7ff fc28 	bl	8002570 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e257      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	492a      	ldr	r1, [pc, #168]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d50:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_RCC_OscConfig+0x268>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7ff fc0b 	bl	8002570 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7ff fc07 	bl	8002570 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e236      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d70:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80b8 	beq.w	8002efa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d170      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_OscConfig+0x218>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e21a      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d921      	bls.n	8002dfc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fcad 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e208      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4906      	ldr	r1, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	4901      	ldr	r1, [pc, #4]	; (8002df4 <HAL_RCC_OscConfig+0x264>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
 8002df2:	e020      	b.n	8002e36 <HAL_RCC_OscConfig+0x2a6>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfc:	4b99      	ldr	r3, [pc, #612]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4996      	ldr	r1, [pc, #600]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0e:	4b95      	ldr	r3, [pc, #596]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	4991      	ldr	r1, [pc, #580]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc78 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e1d3      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	0b5b      	lsrs	r3, r3, #13
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e46:	4a87      	ldr	r2, [pc, #540]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	6892      	ldr	r2, [r2, #8]
 8002e4a:	0912      	lsrs	r2, r2, #4
 8002e4c:	f002 020f 	and.w	r2, r2, #15
 8002e50:	4985      	ldr	r1, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002e52:	5c8a      	ldrb	r2, [r1, r2]
 8002e54:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e56:	4a85      	ldr	r2, [pc, #532]	; (800306c <HAL_RCC_OscConfig+0x4dc>)
 8002e58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e5a:	4b85      	ldr	r3, [pc, #532]	; (8003070 <HAL_RCC_OscConfig+0x4e0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fcc0 	bl	80007e4 <HAL_InitTick>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d045      	beq.n	8002efa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	e1b5      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d029      	beq.n	8002ece <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e7a:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCC_OscConfig+0x4e4>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7ff fb76 	bl	8002570 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e88:	f7ff fb72 	bl	8002570 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1a1      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea6:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	496c      	ldr	r1, [pc, #432]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4967      	ldr	r1, [pc, #412]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	e015      	b.n	8002efa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ece:	4b69      	ldr	r3, [pc, #420]	; (8003074 <HAL_RCC_OscConfig+0x4e4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff fb4c 	bl	8002570 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002edc:	f7ff fb48 	bl	8002570 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e177      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002eee:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d030      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b5a      	ldr	r3, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7ff fb2c 	bl	8002570 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7ff fb28 	bl	8002570 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e157      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f2e:	4b4d      	ldr	r3, [pc, #308]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x38c>
 8002f3a:	e015      	b.n	8002f68 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3c:	4b4e      	ldr	r3, [pc, #312]	; (8003078 <HAL_RCC_OscConfig+0x4e8>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7ff fb15 	bl	8002570 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4a:	f7ff fb11 	bl	8002570 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e140      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f5c:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80b5 	beq.w	80030e0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b37      	ldr	r3, [pc, #220]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	4a36      	ldr	r2, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6253      	str	r3, [r2, #36]	; 0x24
 8002f92:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	4b36      	ldr	r3, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x4ec>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d118      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fae:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_RCC_OscConfig+0x4ec>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a32      	ldr	r2, [pc, #200]	; (800307c <HAL_RCC_OscConfig+0x4ec>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fba:	f7ff fad9 	bl	8002570 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc2:	f7ff fad5 	bl	8002570 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b64      	cmp	r3, #100	; 0x64
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e104      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_RCC_OscConfig+0x4ec>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x466>
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6353      	str	r3, [r2, #52]	; 0x34
 8002ff4:	e02d      	b.n	8003052 <HAL_RCC_OscConfig+0x4c2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x488>
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	6353      	str	r3, [r2, #52]	; 0x34
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003014:	6353      	str	r3, [r2, #52]	; 0x34
 8003016:	e01c      	b.n	8003052 <HAL_RCC_OscConfig+0x4c2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d10c      	bne.n	800303a <HAL_RCC_OscConfig+0x4aa>
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302a:	6353      	str	r3, [r2, #52]	; 0x34
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003036:	6353      	str	r3, [r2, #52]	; 0x34
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0x4c2>
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003044:	6353      	str	r3, [r2, #52]	; 0x34
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	4a06      	ldr	r2, [pc, #24]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 800304c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003050:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d024      	beq.n	80030a4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7ff fa89 	bl	8002570 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003060:	e019      	b.n	8003096 <HAL_RCC_OscConfig+0x506>
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	0800940c 	.word	0x0800940c
 800306c:	20000000 	.word	0x20000000
 8003070:	20000004 	.word	0x20000004
 8003074:	42470020 	.word	0x42470020
 8003078:	42470680 	.word	0x42470680
 800307c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7ff fa76 	bl	8002570 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0a3      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ee      	beq.n	8003080 <HAL_RCC_OscConfig+0x4f0>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7ff fa64 	bl	8002570 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7ff fa60 	bl	8002570 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e08d      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030c2:	4b49      	ldr	r3, [pc, #292]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ee      	bne.n	80030ac <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d4:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	4a43      	ldr	r2, [pc, #268]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 80030da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d079      	beq.n	80031dc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d056      	beq.n	800319c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d13b      	bne.n	800316e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_RCC_OscConfig+0x65c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7ff fa38 	bl	8002570 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003104:	f7ff fa34 	bl	8002570 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e063      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003116:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	4319      	orrs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	430b      	orrs	r3, r1
 800313a:	492b      	ldr	r1, [pc, #172]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0x65c>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7ff fa13 	bl	8002570 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314e:	f7ff fa0f 	bl	8002570 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e03e      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x5be>
 800316c:	e036      	b.n	80031dc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <HAL_RCC_OscConfig+0x65c>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7ff f9fc 	bl	8002570 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7ff f9f8 	bl	8002570 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e027      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x5ec>
 800319a:	e01f      	b.n	80031dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e01a      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_RCC_OscConfig+0x658>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d106      	bne.n	80031d8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	42470060 	.word	0x42470060

080031f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e11a      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b8f      	ldr	r3, [pc, #572]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d919      	bls.n	8003246 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCC_ClockConfig+0x34>
 8003218:	4b8a      	ldr	r3, [pc, #552]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a89      	ldr	r2, [pc, #548]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b87      	ldr	r3, [pc, #540]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 0201 	bic.w	r2, r3, #1
 800322c:	4985      	ldr	r1, [pc, #532]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003234:	4b83      	ldr	r3, [pc, #524]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0f9      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003252:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	497a      	ldr	r1, [pc, #488]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 808e 	beq.w	800338e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d121      	bne.n	80032ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0d7      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d115      	bne.n	80032ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0cb      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0bf      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032ba:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0b7      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	495c      	ldr	r1, [pc, #368]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7ff f948 	bl	8002570 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d112      	bne.n	8003310 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7ff f940 	bl	8002570 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e09b      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003302:	4b51      	ldr	r3, [pc, #324]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d1ee      	bne.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 800330e:	e03e      	b.n	800338e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d112      	bne.n	800333e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331a:	f7ff f929 	bl	8002570 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e084      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003330:	4b45      	ldr	r3, [pc, #276]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d1ee      	bne.n	800331a <HAL_RCC_ClockConfig+0x12a>
 800333c:	e027      	b.n	800338e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d11d      	bne.n	8003382 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7ff f912 	bl	8002570 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e06d      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b04      	cmp	r3, #4
 8003368:	d1ee      	bne.n	8003348 <HAL_RCC_ClockConfig+0x158>
 800336a:	e010      	b.n	800338e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7ff f900 	bl	8002570 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e05b      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800338e:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d219      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1be>
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a27      	ldr	r2, [pc, #156]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0201 	bic.w	r2, r3, #1
 80033b6:	4923      	ldr	r1, [pc, #140]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_ClockConfig+0x254>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e034      	b.n	800343a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4917      	ldr	r1, [pc, #92]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490f      	ldr	r1, [pc, #60]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f823 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RCC_ClockConfig+0x258>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490b      	ldr	r1, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCC_ClockConfig+0x264>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f9d8 	bl	80007e4 <HAL_InitTick>
 8003434:	4603      	mov	r3, r0
 8003436:	72fb      	strb	r3, [r7, #11]

  return status;
 8003438:	7afb      	ldrb	r3, [r7, #11]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023c00 	.word	0x40023c00
 8003448:	40023800 	.word	0x40023800
 800344c:	0800940c 	.word	0x0800940c
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800345c:	b092      	sub	sp, #72	; 0x48
 800345e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003460:	4b79      	ldr	r3, [pc, #484]	; (8003648 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d00d      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003470:	2b0c      	cmp	r3, #12
 8003472:	f200 80d5 	bhi.w	8003620 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003476:	2b04      	cmp	r3, #4
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x28>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x2e>
 800347e:	e0cf      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b72      	ldr	r3, [pc, #456]	; (800364c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003484:	e0da      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003486:	4b72      	ldr	r3, [pc, #456]	; (8003650 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800348a:	e0d7      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800348c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348e:	0c9b      	lsrs	r3, r3, #18
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349c:	0d9b      	lsrs	r3, r3, #22
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	3301      	adds	r3, #1
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a6:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d05d      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	2200      	movs	r2, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	4611      	mov	r1, r2
 80034ba:	4604      	mov	r4, r0
 80034bc:	460d      	mov	r5, r1
 80034be:	4622      	mov	r2, r4
 80034c0:	462b      	mov	r3, r5
 80034c2:	f04f 0000 	mov.w	r0, #0
 80034c6:	f04f 0100 	mov.w	r1, #0
 80034ca:	0159      	lsls	r1, r3, #5
 80034cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d0:	0150      	lsls	r0, r2, #5
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4621      	mov	r1, r4
 80034d8:	1a51      	subs	r1, r2, r1
 80034da:	6139      	str	r1, [r7, #16]
 80034dc:	4629      	mov	r1, r5
 80034de:	eb63 0301 	sbc.w	r3, r3, r1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f0:	4659      	mov	r1, fp
 80034f2:	018b      	lsls	r3, r1, #6
 80034f4:	4651      	mov	r1, sl
 80034f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034fa:	4651      	mov	r1, sl
 80034fc:	018a      	lsls	r2, r1, #6
 80034fe:	46d4      	mov	ip, sl
 8003500:	ebb2 080c 	subs.w	r8, r2, ip
 8003504:	4659      	mov	r1, fp
 8003506:	eb63 0901 	sbc.w	r9, r3, r1
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351e:	4690      	mov	r8, r2
 8003520:	4699      	mov	r9, r3
 8003522:	4623      	mov	r3, r4
 8003524:	eb18 0303 	adds.w	r3, r8, r3
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	462b      	mov	r3, r5
 800352c:	eb49 0303 	adc.w	r3, r9, r3
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800353e:	4629      	mov	r1, r5
 8003540:	024b      	lsls	r3, r1, #9
 8003542:	4620      	mov	r0, r4
 8003544:	4629      	mov	r1, r5
 8003546:	4604      	mov	r4, r0
 8003548:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800354c:	4601      	mov	r1, r0
 800354e:	024a      	lsls	r2, r1, #9
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003556:	2200      	movs	r2, #0
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
 800355a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800355c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003560:	f7fc fe16 	bl	8000190 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
 800356c:	e055      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2200      	movs	r2, #0
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	627a      	str	r2, [r7, #36]	; 0x24
 8003576:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800357a:	4642      	mov	r2, r8
 800357c:	464b      	mov	r3, r9
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358c:	0150      	lsls	r0, r2, #5
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	46c4      	mov	ip, r8
 8003594:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003598:	4640      	mov	r0, r8
 800359a:	4649      	mov	r1, r9
 800359c:	468c      	mov	ip, r1
 800359e:	eb63 0b0c 	sbc.w	fp, r3, ip
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ae:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035b2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035b6:	ebb2 040a 	subs.w	r4, r2, sl
 80035ba:	eb63 050b 	sbc.w	r5, r3, fp
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	00eb      	lsls	r3, r5, #3
 80035c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035cc:	00e2      	lsls	r2, r4, #3
 80035ce:	4614      	mov	r4, r2
 80035d0:	461d      	mov	r5, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	18e3      	adds	r3, r4, r3
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	460b      	mov	r3, r1
 80035da:	eb45 0303 	adc.w	r3, r5, r3
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ec:	4629      	mov	r1, r5
 80035ee:	028b      	lsls	r3, r1, #10
 80035f0:	4620      	mov	r0, r4
 80035f2:	4629      	mov	r1, r5
 80035f4:	4604      	mov	r4, r0
 80035f6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80035fa:	4601      	mov	r1, r0
 80035fc:	028a      	lsls	r2, r1, #10
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	2200      	movs	r2, #0
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800360e:	f7fc fdbf 	bl	8000190 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4613      	mov	r3, r2
 8003618:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800361a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800361e:	e00d      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	0b5b      	lsrs	r3, r3, #13
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	3301      	adds	r3, #1
 8003630:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800363a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800363e:	4618      	mov	r0, r3
 8003640:	3748      	adds	r7, #72	; 0x48
 8003642:	46bd      	mov	sp, r7
 8003644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	00f42400 	.word	0x00f42400
 8003650:	007a1200 	.word	0x007a1200
 8003654:	08009400 	.word	0x08009400

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <HAL_RCC_GetHCLKFreq+0x10>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003670:	f7ff fff2 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	0800941c 	.word	0x0800941c

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003698:	f7ff ffde 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0adb      	lsrs	r3, r3, #11
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800941c 	.word	0x0800941c

080036bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	220f      	movs	r2, #15
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_RCC_GetClockConfig+0x58>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_RCC_GetClockConfig+0x58>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_GetClockConfig+0x58>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_RCC_GetClockConfig+0x58>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0201 	and.w	r2, r3, #1
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	40023800 	.word	0x40023800
 8003718:	40023c00 	.word	0x40023c00

0800371c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d12c      	bne.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e016      	b.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6253      	str	r3, [r2, #36]	; 0x24
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800376c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003780:	d105      	bne.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003788:	d101      	bne.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800378a:	2301      	movs	r3, #1
 800378c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 0201 	bic.w	r2, r3, #1
 80037a8:	490b      	ldr	r1, [pc, #44]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
 80037d8:	40023c00 	.word	0x40023c00

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e031      	b.n	8003852 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f829 	bl	800385a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 f978 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e03a      	b.n	80038fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d00e      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x58>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <HAL_TIM_Base_Start_IT+0x98>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x58>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <HAL_TIM_Base_Start_IT+0x9c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x58>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_TIM_Base_Start_IT+0xa0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d010      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	e007      	b.n	80038f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40010800 	.word	0x40010800

08003910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d122      	bne.n	800396c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d11b      	bne.n	800396c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0202 	mvn.w	r2, #2
 800393c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8c1 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8b4 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f8c3 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d122      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b04      	cmp	r3, #4
 8003986:	d11b      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0204 	mvn.w	r2, #4
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f897 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f88a 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f899 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d122      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d11b      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0208 	mvn.w	r2, #8
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2204      	movs	r2, #4
 80039ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f86d 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f860 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f86f 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d122      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d11b      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0210 	mvn.w	r2, #16
 8003a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f843 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f836 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f845 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10e      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0201 	mvn.w	r2, #1
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fc fe60 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d107      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f81f 	bl	8003afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d00f      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a2b      	ldr	r2, [pc, #172]	; (8003bd8 <TIM_Base_SetConfig+0xc8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <TIM_Base_SetConfig+0xcc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <TIM_Base_SetConfig+0xd0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <TIM_Base_SetConfig+0xd4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d108      	bne.n	8003b5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b60:	d017      	beq.n	8003b92 <TIM_Base_SetConfig+0x82>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <TIM_Base_SetConfig+0xc8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <TIM_Base_SetConfig+0x82>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <TIM_Base_SetConfig+0xcc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_Base_SetConfig+0x82>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <TIM_Base_SetConfig+0xd0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_Base_SetConfig+0x82>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <TIM_Base_SetConfig+0xd4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_Base_SetConfig+0x82>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <TIM_Base_SetConfig+0xd8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0x82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	; (8003bec <TIM_Base_SetConfig+0xdc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	615a      	str	r2, [r3, #20]
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40010800 	.word	0x40010800
 8003be8:	40010c00 	.word	0x40010c00
 8003bec:	40011000 	.word	0x40011000

08003bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e03f      	b.n	8003c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc ff88 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fc8f 	bl	8004558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b08a      	sub	sp, #40	; 0x28
 8003c8e:	af02      	add	r7, sp, #8
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d17c      	bne.n	8003da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_UART_Transmit+0x2c>
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e075      	b.n	8003da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_UART_Transmit+0x3e>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e06e      	b.n	8003da6 <HAL_UART_Transmit+0x11c>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2221      	movs	r2, #33	; 0x21
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cde:	f7fe fc47 	bl	8002570 <HAL_GetTick>
 8003ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf8:	d108      	bne.n	8003d0c <HAL_UART_Transmit+0x82>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	e003      	b.n	8003d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d1c:	e02a      	b.n	8003d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2180      	movs	r1, #128	; 0x80
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fa41 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e036      	b.n	8003da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	3302      	adds	r3, #2
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	e007      	b.n	8003d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1cf      	bne.n	8003d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fa11 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e006      	b.n	8003da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d11d      	bne.n	8003e04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_UART_Receive_IT+0x26>
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e016      	b.n	8003e06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Receive_IT+0x38>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e00f      	b.n	8003e06 <HAL_UART_Receive_IT+0x58>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa22 	bl	8004244 <UART_Start_Receive_IT>
 8003e00:	4603      	mov	r3, r0
 8003e02:	e000      	b.n	8003e06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_UART_IRQHandler+0x52>
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fad2 	bl	8004404 <UART_Receive_IT>
      return;
 8003e60:	e17b      	b.n	800415a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80b1 	beq.w	8003fcc <HAL_UART_IRQHandler+0x1bc>
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_UART_IRQHandler+0x70>
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80a6 	beq.w	8003fcc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x90>
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xb0>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0202 	orr.w	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_UART_IRQHandler+0xd0>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0204 	orr.w	r2, r3, #4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00f      	beq.n	8003f0a <HAL_UART_IRQHandler+0xfa>
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <HAL_UART_IRQHandler+0xee>
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0208 	orr.w	r2, r3, #8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 811e 	beq.w	8004150 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_UART_IRQHandler+0x11e>
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa6b 	bl	8004404 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_UART_IRQHandler+0x146>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d031      	beq.n	8003fba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9ad 	bl	80042b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d123      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d013      	beq.n	8003faa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	4a76      	ldr	r2, [pc, #472]	; (8004160 <HAL_UART_IRQHandler+0x350>)
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fc14 	bl	80027bc <HAL_DMA_Abort_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d016      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00e      	b.n	8003fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8ec 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00a      	b.n	8003fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8e8 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e006      	b.n	8003fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8e4 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fc6:	e0c3      	b.n	8004150 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	bf00      	nop
    return;
 8003fca:	e0c1      	b.n	8004150 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f040 80a1 	bne.w	8004118 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 809b 	beq.w	8004118 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8095 	beq.w	8004118 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d14e      	bne.n	80040b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800401c:	8a3b      	ldrh	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8098 	beq.w	8004154 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004028:	8a3a      	ldrh	r2, [r7, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	f080 8092 	bcs.w	8004154 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8a3a      	ldrh	r2, [r7, #16]
 8004034:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b20      	cmp	r3, #32
 800403e:	d02b      	beq.n	8004098 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0210 	bic.w	r2, r2, #16
 800408c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fb55 	bl	8002742 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f876 	bl	800419a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040ae:	e051      	b.n	8004154 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d047      	beq.n	8004158 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040c8:	8a7b      	ldrh	r3, [r7, #18]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d044      	beq.n	8004158 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0210 	bic.w	r2, r2, #16
 800410a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800410c:	8a7b      	ldrh	r3, [r7, #18]
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f842 	bl	800419a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004116:	e01f      	b.n	8004158 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <HAL_UART_IRQHandler+0x324>
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f902 	bl	8004336 <UART_Transmit_IT>
    return;
 8004132:	e012      	b.n	800415a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <HAL_UART_IRQHandler+0x34a>
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f943 	bl	80043d4 <UART_EndTransmit_IT>
    return;
 800414e:	e004      	b.n	800415a <HAL_UART_IRQHandler+0x34a>
    return;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <HAL_UART_IRQHandler+0x34a>
      return;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <HAL_UART_IRQHandler+0x34a>
      return;
 8004158:	bf00      	nop
  }
}
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	0800430f 	.word	0x0800430f

08004164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c0:	e02c      	b.n	800421c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d028      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d0:	f7fe f9ce 	bl	8002570 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d21d      	bcs.n	800421c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e00f      	b.n	800423c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	429a      	cmp	r2, r3
 8004238:	d0c3      	beq.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2222      	movs	r2, #34	; 0x22
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004288:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0220 	orr.w	r2, r2, #32
 80042a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d107      	bne.n	80042f6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0210 	bic.w	r2, r2, #16
 80042f4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr

0800430e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff ff2d 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b21      	cmp	r3, #33	; 0x21
 8004348:	d13e      	bne.n	80043c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	d114      	bne.n	800437e <UART_Transmit_IT+0x48>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d110      	bne.n	800437e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	1c9a      	adds	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	621a      	str	r2, [r3, #32]
 800437c:	e008      	b.n	8004390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6211      	str	r1, [r2, #32]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29b      	uxth	r3, r3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4619      	mov	r1, r3
 800439e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff feb5 	bl	8004164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b22      	cmp	r3, #34	; 0x22
 8004416:	f040 8099 	bne.w	800454c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004422:	d117      	bne.n	8004454 <UART_Receive_IT+0x50>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d113      	bne.n	8004454 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	b29b      	uxth	r3, r3
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	b29a      	uxth	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
 8004452:	e026      	b.n	80044a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004466:	d007      	beq.n	8004478 <UART_Receive_IT+0x74>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <UART_Receive_IT+0x82>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e008      	b.n	8004498 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004492:	b2da      	uxtb	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4619      	mov	r1, r3
 80044b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d148      	bne.n	8004548 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0220 	bic.w	r2, r2, #32
 80044c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d123      	bne.n	800453e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0210 	bic.w	r2, r2, #16
 800450a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b10      	cmp	r3, #16
 8004518:	d10a      	bne.n	8004530 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff fe2f 	bl	800419a <HAL_UARTEx_RxEventCallback>
 800453c:	e002      	b.n	8004544 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fe19 	bl	8004176 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	e002      	b.n	800454e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	e000      	b.n	800454e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4313      	orrs	r3, r2
 800458c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004598:	f023 030c 	bic.w	r3, r3, #12
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a55      	ldr	r2, [pc, #340]	; (8004718 <UART_SetConfig+0x1c0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d103      	bne.n	80045ce <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045c6:	f7ff f865 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	e002      	b.n	80045d4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045ce:	f7ff f84d 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 80045d2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045dc:	d14c      	bne.n	8004678 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a49      	ldr	r2, [pc, #292]	; (800471c <UART_SetConfig+0x1c4>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	0119      	lsls	r1, r3, #4
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009a      	lsls	r2, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	fbb2 f2f3 	udiv	r2, r2, r3
 8004614:	4b41      	ldr	r3, [pc, #260]	; (800471c <UART_SetConfig+0x1c4>)
 8004616:	fba3 0302 	umull	r0, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2064      	movs	r0, #100	; 0x64
 800461e:	fb00 f303 	mul.w	r3, r0, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	3332      	adds	r3, #50	; 0x32
 8004628:	4a3c      	ldr	r2, [pc, #240]	; (800471c <UART_SetConfig+0x1c4>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004636:	4419      	add	r1, r3
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009a      	lsls	r2, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fbb2 f2f3 	udiv	r2, r2, r3
 800464e:	4b33      	ldr	r3, [pc, #204]	; (800471c <UART_SetConfig+0x1c4>)
 8004650:	fba3 0302 	umull	r0, r3, r3, r2
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	2064      	movs	r0, #100	; 0x64
 8004658:	fb00 f303 	mul.w	r3, r0, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	3332      	adds	r3, #50	; 0x32
 8004662:	4a2e      	ldr	r2, [pc, #184]	; (800471c <UART_SetConfig+0x1c4>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	f003 0207 	and.w	r2, r3, #7
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	440a      	add	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004676:	e04a      	b.n	800470e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009a      	lsls	r2, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	4a23      	ldr	r2, [pc, #140]	; (800471c <UART_SetConfig+0x1c4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	0119      	lsls	r1, r3, #4
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009a      	lsls	r2, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <UART_SetConfig+0x1c4>)
 80046b0:	fba3 0302 	umull	r0, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2064      	movs	r0, #100	; 0x64
 80046b8:	fb00 f303 	mul.w	r3, r0, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a16      	ldr	r2, [pc, #88]	; (800471c <UART_SetConfig+0x1c4>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ce:	4419      	add	r1, r3
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009a      	lsls	r2, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <UART_SetConfig+0x1c4>)
 80046e8:	fba3 0302 	umull	r0, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2064      	movs	r0, #100	; 0x64
 80046f0:	fb00 f303 	mul.w	r3, r0, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <UART_SetConfig+0x1c4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	440a      	add	r2, r1
 800470c:	609a      	str	r2, [r3, #8]
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40013800 	.word	0x40013800
 800471c:	51eb851f 	.word	0x51eb851f

08004720 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800472e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004732:	2b84      	cmp	r3, #132	; 0x84
 8004734:	d005      	beq.n	8004742 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004736:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	3303      	adds	r3, #3
 8004740:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004742:	68fb      	ldr	r3, [r7, #12]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004754:	f3ef 8305 	mrs	r3, IPSR
 8004758:	607b      	str	r3, [r7, #4]
  return(result);
 800475a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004774:	f001 f91a 	bl	80059ac <vTaskStartScheduler>
  
  return osOK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	bd80      	pop	{r7, pc}

0800477e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800477e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004780:	b089      	sub	sp, #36	; 0x24
 8004782:	af04      	add	r7, sp, #16
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <osThreadCreate+0x54>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01c      	beq.n	80047d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685c      	ldr	r4, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681d      	ldr	r5, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691e      	ldr	r6, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff ffb8 	bl	8004720 <makeFreeRtosPriority>
 80047b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ba:	9202      	str	r2, [sp, #8]
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	9100      	str	r1, [sp, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4632      	mov	r2, r6
 80047c4:	4629      	mov	r1, r5
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 ff1b 	bl	8005602 <xTaskCreateStatic>
 80047cc:	4603      	mov	r3, r0
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e01c      	b.n	800480c <osThreadCreate+0x8e>

  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685c      	ldr	r4, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047de:	b29e      	uxth	r6, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ff9a 	bl	8004720 <makeFreeRtosPriority>
 80047ec:	4602      	mov	r2, r0
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	9200      	str	r2, [sp, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	4632      	mov	r2, r6
 80047fa:	4629      	mov	r1, r5
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 ff5c 	bl	80056ba <xTaskCreate>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004816 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <osDelay+0x16>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	e000      	b.n	800482e <osDelay+0x18>
 800482c:	2301      	movs	r3, #1
 800482e:	4618      	mov	r0, r3
 8004830:	f001 f888 	bl	8005944 <vTaskDelay>
  
  return osOK;
 8004834:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af02      	add	r7, sp, #8
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d10a      	bne.n	800486c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2203      	movs	r2, #3
 800485c:	9200      	str	r2, [sp, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	2100      	movs	r1, #0
 8004862:	2001      	movs	r0, #1
 8004864:	f000 f9ba 	bl	8004bdc <xQueueGenericCreateStatic>
 8004868:	4603      	mov	r3, r0
 800486a:	e016      	b.n	800489a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	e014      	b.n	800489a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d110      	bne.n	8004898 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004876:	2203      	movs	r2, #3
 8004878:	2100      	movs	r1, #0
 800487a:	2001      	movs	r0, #1
 800487c:	f000 fa25 	bl	8004cca <xQueueGenericCreate>
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <osSemaphoreCreate+0x56>
 8004888:	2300      	movs	r3, #0
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fa78 	bl	8004d84 <xQueueGenericSend>
      return sema;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e000      	b.n	800489a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004898:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	e03a      	b.n	8004932 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d103      	bne.n	80048d0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e009      	b.n	80048e4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <osSemaphoreWait+0x40>
      ticks = 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80048e4:	f7ff ff33 	bl	800474e <inHandlerMode>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d017      	beq.n	800491e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	461a      	mov	r2, r3
 80048f4:	2100      	movs	r1, #0
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fcdc 	bl	80052b4 <xQueueReceiveFromISR>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d001      	beq.n	8004906 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004902:	23ff      	movs	r3, #255	; 0xff
 8004904:	e015      	b.n	8004932 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d011      	beq.n	8004930 <osSemaphoreWait+0x8c>
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <osSemaphoreWait+0x98>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	e008      	b.n	8004930 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fbbb 	bl	800509c <xQueueSemaphoreTake>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800492c:	23ff      	movs	r3, #255	; 0xff
 800492e:	e000      	b.n	8004932 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800494c:	2300      	movs	r3, #0
 800494e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004950:	f7ff fefd 	bl	800474e <inHandlerMode>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fb0d 	bl	8004f80 <xQueueGiveFromISR>
 8004966:	4603      	mov	r3, r0
 8004968:	2b01      	cmp	r3, #1
 800496a:	d001      	beq.n	8004970 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800496c:	23ff      	movs	r3, #255	; 0xff
 800496e:	e017      	b.n	80049a0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d013      	beq.n	800499e <osSemaphoreRelease+0x5e>
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <osSemaphoreRelease+0x68>)
 8004978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	e00a      	b.n	800499e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004988:	2300      	movs	r3, #0
 800498a:	2200      	movs	r2, #0
 800498c:	2100      	movs	r1, #0
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9f8 	bl	8004d84 <xQueueGenericSend>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800499a:	23ff      	movs	r3, #255	; 0xff
 800499c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f103 0208 	add.w	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f103 0208 	add.w	r2, r3, #8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f103 0208 	add.w	r2, r3, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d103      	bne.n	8004a68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e00c      	b.n	8004a82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e002      	b.n	8004a76 <vListInsert+0x2e>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d2f6      	bcs.n	8004a70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6852      	ldr	r2, [r2, #4]
 8004ad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d103      	bne.n	8004aec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	1e5a      	subs	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
	...

08004b0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b36:	f001 fe89 	bl	800684c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	3b01      	subs	r3, #1
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	22ff      	movs	r2, #255	; 0xff
 8004b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	22ff      	movs	r2, #255	; 0xff
 8004b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d114      	bne.n	8004bb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01a      	beq.n	8004bca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3310      	adds	r3, #16
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 f95f 	bl	8005e5c <xTaskRemoveFromEventList>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d012      	beq.n	8004bca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <xQueueGenericReset+0xcc>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	e009      	b.n	8004bca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3310      	adds	r3, #16
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fef6 	bl	80049ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3324      	adds	r3, #36	; 0x24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fef1 	bl	80049ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bca:	f001 fe6f 	bl	80068ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bce:	2301      	movs	r3, #1
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08e      	sub	sp, #56	; 0x38
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <xQueueGenericCreateStatic+0x52>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <xQueueGenericCreateStatic+0x56>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <xQueueGenericCreateStatic+0x58>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <xQueueGenericCreateStatic+0x7e>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <xQueueGenericCreateStatic+0x82>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <xQueueGenericCreateStatic+0x84>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	61fb      	str	r3, [r7, #28]
}
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c7a:	2348      	movs	r3, #72	; 0x48
 8004c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b48      	cmp	r3, #72	; 0x48
 8004c82:	d00a      	beq.n	8004c9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	61bb      	str	r3, [r7, #24]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f843 	bl	8004d46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3730      	adds	r7, #48	; 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b08a      	sub	sp, #40	; 0x28
 8004cce:	af02      	add	r7, sp, #8
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	613b      	str	r3, [r7, #16]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e004      	b.n	8004d0a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3348      	adds	r3, #72	; 0x48
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fe9c 	bl	8006a4c <pvPortMalloc>
 8004d14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00f      	beq.n	8004d3c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	3348      	adds	r3, #72	; 0x48
 8004d20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d2a:	79fa      	ldrb	r2, [r7, #7]
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f805 	bl	8004d46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	e002      	b.n	8004d68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d74:	2101      	movs	r1, #1
 8004d76:	69b8      	ldr	r0, [r7, #24]
 8004d78:	f7ff fec8 	bl	8004b0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08e      	sub	sp, #56	; 0x38
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d92:	2300      	movs	r3, #0
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericSend+0x32>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <xQueueGenericSend+0x40>
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <xQueueGenericSend+0x44>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <xQueueGenericSend+0x46>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <xQueueGenericSend+0x60>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericSend+0x6e>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <xQueueGenericSend+0x72>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueGenericSend+0x74>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xQueueGenericSend+0x8e>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	623b      	str	r3, [r7, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e12:	f001 f9e7 	bl	80061e4 <xTaskGetSchedulerState>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <xQueueGenericSend+0x9e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <xQueueGenericSend+0xa2>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueGenericSend+0xa4>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61fb      	str	r3, [r7, #28]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e42:	f001 fd03 	bl	800684c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <xQueueGenericSend+0xd4>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d129      	bne.n	8004eac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5e:	f000 fac0 	bl	80053e2 <prvCopyDataToQueue>
 8004e62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	3324      	adds	r3, #36	; 0x24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fff3 	bl	8005e5c <xTaskRemoveFromEventList>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d013      	beq.n	8004ea4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e7c:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <xQueueGenericSend+0x1f8>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	e00a      	b.n	8004ea4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e94:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <xQueueGenericSend+0x1f8>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ea4:	f001 fd02 	bl	80068ac <vPortExitCritical>
				return pdPASS;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e063      	b.n	8004f74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eb2:	f001 fcfb 	bl	80068ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e05c      	b.n	8004f74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f001 f82b 	bl	8005f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ece:	f001 fced 	bl	80068ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ed2:	f000 fdd5 	bl	8005a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ed6:	f001 fcb9 	bl	800684c <vPortEnterCritical>
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee6:	d103      	bne.n	8004ef0 <xQueueGenericSend+0x16c>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef6:	b25b      	sxtb	r3, r3
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d103      	bne.n	8004f06 <xQueueGenericSend+0x182>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f06:	f001 fcd1 	bl	80068ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f0a:	1d3a      	adds	r2, r7, #4
 8004f0c:	f107 0314 	add.w	r3, r7, #20
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 f81a 	bl	8005f4c <xTaskCheckForTimeOut>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d124      	bne.n	8004f68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f20:	f000 fb57 	bl	80055d2 <prvIsQueueFull>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d018      	beq.n	8004f5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	3310      	adds	r3, #16
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 ff6e 	bl	8005e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3a:	f000 fae2 	bl	8005502 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f3e:	f000 fdad 	bl	8005a9c <xTaskResumeAll>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f af7c 	bne.w	8004e42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <xQueueGenericSend+0x1f8>)
 8004f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	e772      	b.n	8004e42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5e:	f000 fad0 	bl	8005502 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f62:	f000 fd9b 	bl	8005a9c <xTaskResumeAll>
 8004f66:	e76c      	b.n	8004e42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f6a:	f000 faca 	bl	8005502 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f6e:	f000 fd95 	bl	8005a9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f72:	2300      	movs	r3, #0
		}
	}
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3738      	adds	r7, #56	; 0x38
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08e      	sub	sp, #56	; 0x38
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	623b      	str	r3, [r7, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	61fb      	str	r3, [r7, #28]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <xQueueGiveFromISR+0x58>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <xQueueGiveFromISR+0x5c>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <xQueueGiveFromISR+0x5e>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	61bb      	str	r3, [r7, #24]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ff8:	f001 fcea 	bl	80069d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ffc:	f3ef 8211 	mrs	r2, BASEPRI
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	617a      	str	r2, [r7, #20]
 8005012:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005014:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005024:	429a      	cmp	r2, r3
 8005026:	d22b      	bcs.n	8005080 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800503a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d112      	bne.n	800506a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	3324      	adds	r3, #36	; 0x24
 8005050:	4618      	mov	r0, r3
 8005052:	f000 ff03 	bl	8005e5c <xTaskRemoveFromEventList>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00e      	beq.n	800507a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e007      	b.n	800507a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800506a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800506e:	3301      	adds	r3, #1
 8005070:	b2db      	uxtb	r3, r3
 8005072:	b25a      	sxtb	r2, r3
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800507a:	2301      	movs	r3, #1
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
 800507e:	e001      	b.n	8005084 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005080:	2300      	movs	r3, #0
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800508e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005092:	4618      	mov	r0, r3
 8005094:	3738      	adds	r7, #56	; 0x38
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08e      	sub	sp, #56	; 0x38
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	623b      	str	r3, [r7, #32]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	61fb      	str	r3, [r7, #28]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ec:	f001 f87a 	bl	80061e4 <xTaskGetSchedulerState>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <xQueueSemaphoreTake+0x60>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <xQueueSemaphoreTake+0x64>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <xQueueSemaphoreTake+0x66>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	61bb      	str	r3, [r7, #24]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800511c:	f001 fb96 	bl	800684c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	2b00      	cmp	r3, #0
 800512a:	d024      	beq.n	8005176 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	1e5a      	subs	r2, r3, #1
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800513c:	f001 fa1c 	bl	8006578 <pvTaskIncrementMutexHeldCount>
 8005140:	4602      	mov	r2, r0
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00f      	beq.n	800516e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	3310      	adds	r3, #16
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fe82 	bl	8005e5c <xTaskRemoveFromEventList>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800515e:	4b54      	ldr	r3, [pc, #336]	; (80052b0 <xQueueSemaphoreTake+0x214>)
 8005160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800516e:	f001 fb9d 	bl	80068ac <vPortExitCritical>
				return pdPASS;
 8005172:	2301      	movs	r3, #1
 8005174:	e097      	b.n	80052a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d111      	bne.n	80051a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	617b      	str	r3, [r7, #20]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005198:	f001 fb88 	bl	80068ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800519c:	2300      	movs	r3, #0
 800519e:	e082      	b.n	80052a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051a6:	f107 030c 	add.w	r3, r7, #12
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 feb8 	bl	8005f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051b4:	f001 fb7a 	bl	80068ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051b8:	f000 fc62 	bl	8005a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051bc:	f001 fb46 	bl	800684c <vPortEnterCritical>
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d103      	bne.n	80051d6 <xQueueSemaphoreTake+0x13a>
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051dc:	b25b      	sxtb	r3, r3
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d103      	bne.n	80051ec <xQueueSemaphoreTake+0x150>
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ec:	f001 fb5e 	bl	80068ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051f0:	463a      	mov	r2, r7
 80051f2:	f107 030c 	add.w	r3, r7, #12
 80051f6:	4611      	mov	r1, r2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fea7 	bl	8005f4c <xTaskCheckForTimeOut>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d132      	bne.n	800526a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005206:	f000 f9ce 	bl	80055a6 <prvIsQueueEmpty>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d026      	beq.n	800525e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005218:	f001 fb18 	bl	800684c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fffd 	bl	8006220 <xTaskPriorityInherit>
 8005226:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005228:	f001 fb40 	bl	80068ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	3324      	adds	r3, #36	; 0x24
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	4611      	mov	r1, r2
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fded 	bl	8005e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800523a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800523c:	f000 f961 	bl	8005502 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005240:	f000 fc2c 	bl	8005a9c <xTaskResumeAll>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	f47f af68 	bne.w	800511c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800524c:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <xQueueSemaphoreTake+0x214>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	e75e      	b.n	800511c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800525e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005260:	f000 f94f 	bl	8005502 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005264:	f000 fc1a 	bl	8005a9c <xTaskResumeAll>
 8005268:	e758      	b.n	800511c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800526a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800526c:	f000 f949 	bl	8005502 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005270:	f000 fc14 	bl	8005a9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005276:	f000 f996 	bl	80055a6 <prvIsQueueEmpty>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	f43f af4d 	beq.w	800511c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005288:	f001 fae0 	bl	800684c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800528c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800528e:	f000 f891 	bl	80053b4 <prvGetDisinheritPriorityAfterTimeout>
 8005292:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800529a:	4618      	mov	r0, r3
 800529c:	f001 f8cc 	bl	8006438 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80052a0:	f001 fb04 	bl	80068ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3738      	adds	r7, #56	; 0x38
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08e      	sub	sp, #56	; 0x38
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	623b      	str	r3, [r7, #32]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <xQueueReceiveFromISR+0x3a>
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <xQueueReceiveFromISR+0x3e>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <xQueueReceiveFromISR+0x40>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	61fb      	str	r3, [r7, #28]
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800530e:	f001 fb5f 	bl	80069d0 <vPortValidateInterruptPriority>
	__asm volatile
 8005312:	f3ef 8211 	mrs	r2, BASEPRI
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	61ba      	str	r2, [r7, #24]
 8005328:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800532a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02f      	beq.n	800539a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005348:	f000 f8b5 	bl	80054b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	1e5a      	subs	r2, r3, #1
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005354:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d112      	bne.n	8005384 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d016      	beq.n	8005394 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	3310      	adds	r3, #16
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fd76 	bl	8005e5c <xTaskRemoveFromEventList>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e007      	b.n	8005394 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005388:	3301      	adds	r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	b25a      	sxtb	r2, r3
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005394:	2301      	movs	r3, #1
 8005396:	637b      	str	r3, [r7, #52]	; 0x34
 8005398:	e001      	b.n	800539e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800539a:	2300      	movs	r3, #0
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f383 8811 	msr	BASEPRI, r3
}
 80053a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3738      	adds	r7, #56	; 0x38
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1c3 0307 	rsb	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e001      	b.n	80053d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80053d6:	68fb      	ldr	r3, [r7, #12]
	}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10d      	bne.n	800541c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d14d      	bne.n	80054a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 ff8d 	bl	800632c <xTaskPriorityDisinherit>
 8005412:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	605a      	str	r2, [r3, #4]
 800541a:	e043      	b.n	80054a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d119      	bne.n	8005456 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6898      	ldr	r0, [r3, #8]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	461a      	mov	r2, r3
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	f001 fe0c 	bl	800704a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	441a      	add	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d32b      	bcc.n	80054a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	e026      	b.n	80054a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68d8      	ldr	r0, [r3, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	461a      	mov	r2, r3
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	f001 fdf2 	bl	800704a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	425b      	negs	r3, r3
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d207      	bcs.n	8005492 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	425b      	negs	r3, r3
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d105      	bne.n	80054a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054ac:	697b      	ldr	r3, [r7, #20]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d018      	beq.n	80054fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	441a      	add	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d303      	bcc.n	80054ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68d9      	ldr	r1, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	461a      	mov	r2, r3
 80054f4:	6838      	ldr	r0, [r7, #0]
 80054f6:	f001 fda8 	bl	800704a <memcpy>
	}
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800550a:	f001 f99f 	bl	800684c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005514:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005516:	e011      	b.n	800553c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d012      	beq.n	8005546 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3324      	adds	r3, #36	; 0x24
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fc99 	bl	8005e5c <xTaskRemoveFromEventList>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005530:	f000 fd6e 	bl	8006010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	3b01      	subs	r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800553c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	dce9      	bgt.n	8005518 <prvUnlockQueue+0x16>
 8005544:	e000      	b.n	8005548 <prvUnlockQueue+0x46>
					break;
 8005546:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	22ff      	movs	r2, #255	; 0xff
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005550:	f001 f9ac 	bl	80068ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005554:	f001 f97a 	bl	800684c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005560:	e011      	b.n	8005586 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d012      	beq.n	8005590 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3310      	adds	r3, #16
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fc74 	bl	8005e5c <xTaskRemoveFromEventList>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800557a:	f000 fd49 	bl	8006010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	3b01      	subs	r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800558a:	2b00      	cmp	r3, #0
 800558c:	dce9      	bgt.n	8005562 <prvUnlockQueue+0x60>
 800558e:	e000      	b.n	8005592 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005590:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	22ff      	movs	r2, #255	; 0xff
 8005596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800559a:	f001 f987 	bl	80068ac <vPortExitCritical>
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055ae:	f001 f94d 	bl	800684c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d102      	bne.n	80055c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e001      	b.n	80055c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055c4:	f001 f972 	bl	80068ac <vPortExitCritical>

	return xReturn;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055da:	f001 f937 	bl	800684c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d102      	bne.n	80055f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e001      	b.n	80055f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f4:	f001 f95a 	bl	80068ac <vPortExitCritical>

	return xReturn;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08e      	sub	sp, #56	; 0x38
 8005606:	af04      	add	r7, sp, #16
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <xTaskCreateStatic+0x2a>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	623b      	str	r3, [r7, #32]
}
 8005628:	bf00      	nop
 800562a:	e7fe      	b.n	800562a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <xTaskCreateStatic+0x46>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	61fb      	str	r3, [r7, #28]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005648:	23b4      	movs	r3, #180	; 0xb4
 800564a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2bb4      	cmp	r3, #180	; 0xb4
 8005650:	d00a      	beq.n	8005668 <xTaskCreateStatic+0x66>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61bb      	str	r3, [r7, #24]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01e      	beq.n	80056ac <xTaskCreateStatic+0xaa>
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01b      	beq.n	80056ac <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	2202      	movs	r2, #2
 8005682:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005686:	2300      	movs	r3, #0
 8005688:	9303      	str	r3, [sp, #12]
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	9302      	str	r3, [sp, #8]
 800568e:	f107 0314 	add.w	r3, r7, #20
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f850 	bl	8005744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056a6:	f000 f8e3 	bl	8005870 <prvAddNewTaskToReadyList>
 80056aa:	e001      	b.n	80056b0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056b0:	697b      	ldr	r3, [r7, #20]
	}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3728      	adds	r7, #40	; 0x28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08c      	sub	sp, #48	; 0x30
 80056be:	af04      	add	r7, sp, #16
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 f9bc 	bl	8006a4c <pvPortMalloc>
 80056d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00e      	beq.n	80056fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80056dc:	20b4      	movs	r0, #180	; 0xb4
 80056de:	f001 f9b5 	bl	8006a4c <pvPortMalloc>
 80056e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
 80056f0:	e005      	b.n	80056fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056f2:	6978      	ldr	r0, [r7, #20]
 80056f4:	f001 fa6e 	bl	8006bd4 <vPortFree>
 80056f8:	e001      	b.n	80056fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d017      	beq.n	8005734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	2300      	movs	r3, #0
 8005710:	9303      	str	r3, [sp, #12]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	9302      	str	r3, [sp, #8]
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	9301      	str	r3, [sp, #4]
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f80e 	bl	8005744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005728:	69f8      	ldr	r0, [r7, #28]
 800572a:	f000 f8a1 	bl	8005870 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800572e:	2301      	movs	r3, #1
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e002      	b.n	800573a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800573a:	69bb      	ldr	r3, [r7, #24]
	}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800575c:	3b01      	subs	r3, #1
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	617b      	str	r3, [r7, #20]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e012      	b.n	80057b8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	7819      	ldrb	r1, [r3, #0]
 800579a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	3334      	adds	r3, #52	; 0x34
 80057a2:	460a      	mov	r2, r1
 80057a4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d006      	beq.n	80057c0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d9e9      	bls.n	8005792 <prvInitialiseNewTask+0x4e>
 80057be:	e000      	b.n	80057c2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80057c0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	2b06      	cmp	r3, #6
 80057ce:	d901      	bls.n	80057d4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057d0:	2306      	movs	r3, #6
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2200      	movs	r2, #0
 80057e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff f8fd 	bl	80049ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	3318      	adds	r3, #24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff f8f8 	bl	80049ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	f1c3 0207 	rsb	r2, r3, #7
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	2200      	movs	r2, #0
 800581c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	334c      	adds	r3, #76	; 0x4c
 8005824:	2260      	movs	r2, #96	; 0x60
 8005826:	2100      	movs	r1, #0
 8005828:	4618      	mov	r0, r3
 800582a:	f001 fc1c 	bl	8007066 <memset>
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <prvInitialiseNewTask+0x120>)
 8005832:	651a      	str	r2, [r3, #80]	; 0x50
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	4a0c      	ldr	r2, [pc, #48]	; (8005868 <prvInitialiseNewTask+0x124>)
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	4a0b      	ldr	r2, [pc, #44]	; (800586c <prvInitialiseNewTask+0x128>)
 800583e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	69b8      	ldr	r0, [r7, #24]
 8005846:	f000 ff11 	bl	800666c <pxPortInitialiseStack>
 800584a:	4602      	mov	r2, r0
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800585c:	bf00      	nop
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	08009444 	.word	0x08009444
 8005868:	08009464 	.word	0x08009464
 800586c:	08009424 	.word	0x08009424

08005870 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005878:	f000 ffe8 	bl	800684c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800587c:	4b2a      	ldr	r3, [pc, #168]	; (8005928 <prvAddNewTaskToReadyList+0xb8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	4a29      	ldr	r2, [pc, #164]	; (8005928 <prvAddNewTaskToReadyList+0xb8>)
 8005884:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005886:	4b29      	ldr	r3, [pc, #164]	; (800592c <prvAddNewTaskToReadyList+0xbc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800588e:	4a27      	ldr	r2, [pc, #156]	; (800592c <prvAddNewTaskToReadyList+0xbc>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005894:	4b24      	ldr	r3, [pc, #144]	; (8005928 <prvAddNewTaskToReadyList+0xb8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d110      	bne.n	80058be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800589c:	f000 fbdc 	bl	8006058 <prvInitialiseTaskLists>
 80058a0:	e00d      	b.n	80058be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058a2:	4b23      	ldr	r3, [pc, #140]	; (8005930 <prvAddNewTaskToReadyList+0xc0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058aa:	4b20      	ldr	r3, [pc, #128]	; (800592c <prvAddNewTaskToReadyList+0xbc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d802      	bhi.n	80058be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058b8:	4a1c      	ldr	r2, [pc, #112]	; (800592c <prvAddNewTaskToReadyList+0xbc>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058be:	4b1d      	ldr	r3, [pc, #116]	; (8005934 <prvAddNewTaskToReadyList+0xc4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3301      	adds	r3, #1
 80058c4:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <prvAddNewTaskToReadyList+0xc4>)
 80058c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	2201      	movs	r2, #1
 80058ce:	409a      	lsls	r2, r3
 80058d0:	4b19      	ldr	r3, [pc, #100]	; (8005938 <prvAddNewTaskToReadyList+0xc8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	4a18      	ldr	r2, [pc, #96]	; (8005938 <prvAddNewTaskToReadyList+0xc8>)
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4a15      	ldr	r2, [pc, #84]	; (800593c <prvAddNewTaskToReadyList+0xcc>)
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f7ff f886 	bl	8004a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058f6:	f000 ffd9 	bl	80068ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <prvAddNewTaskToReadyList+0xc0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <prvAddNewTaskToReadyList+0xbc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d207      	bcs.n	8005920 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <prvAddNewTaskToReadyList+0xd0>)
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2000108c 	.word	0x2000108c
 800592c:	20000f8c 	.word	0x20000f8c
 8005930:	20001098 	.word	0x20001098
 8005934:	200010a8 	.word	0x200010a8
 8005938:	20001094 	.word	0x20001094
 800593c:	20000f90 	.word	0x20000f90
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d017      	beq.n	8005986 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005956:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <vTaskDelay+0x60>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <vTaskDelay+0x30>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60bb      	str	r3, [r7, #8]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005974:	f000 f884 	bl	8005a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005978:	2100      	movs	r1, #0
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fe10 	bl	80065a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005980:	f000 f88c 	bl	8005a9c <xTaskResumeAll>
 8005984:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d107      	bne.n	800599c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <vTaskDelay+0x64>)
 800598e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	200010b4 	.word	0x200010b4
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059ba:	463a      	mov	r2, r7
 80059bc:	1d39      	adds	r1, r7, #4
 80059be:	f107 0308 	add.w	r3, r7, #8
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fa fd68 	bl	8000498 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	9202      	str	r2, [sp, #8]
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	2300      	movs	r3, #0
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2300      	movs	r3, #0
 80059d8:	460a      	mov	r2, r1
 80059da:	4921      	ldr	r1, [pc, #132]	; (8005a60 <vTaskStartScheduler+0xb4>)
 80059dc:	4821      	ldr	r0, [pc, #132]	; (8005a64 <vTaskStartScheduler+0xb8>)
 80059de:	f7ff fe10 	bl	8005602 <xTaskCreateStatic>
 80059e2:	4603      	mov	r3, r0
 80059e4:	4a20      	ldr	r2, [pc, #128]	; (8005a68 <vTaskStartScheduler+0xbc>)
 80059e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059e8:	4b1f      	ldr	r3, [pc, #124]	; (8005a68 <vTaskStartScheduler+0xbc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059f0:	2301      	movs	r3, #1
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e001      	b.n	80059fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d11b      	bne.n	8005a38 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
}
 8005a12:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a14:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <vTaskStartScheduler+0xc0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	334c      	adds	r3, #76	; 0x4c
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <vTaskStartScheduler+0xc4>)
 8005a1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <vTaskStartScheduler+0xc8>)
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295
 8005a24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <vTaskStartScheduler+0xcc>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a2c:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <vTaskStartScheduler+0xd0>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a32:	f000 fe99 	bl	8006768 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a36:	e00e      	b.n	8005a56 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d10a      	bne.n	8005a56 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <vTaskStartScheduler+0xa8>
}
 8005a56:	bf00      	nop
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	080093ec 	.word	0x080093ec
 8005a64:	08006029 	.word	0x08006029
 8005a68:	200010b0 	.word	0x200010b0
 8005a6c:	20000f8c 	.word	0x20000f8c
 8005a70:	20000010 	.word	0x20000010
 8005a74:	200010ac 	.word	0x200010ac
 8005a78:	20001098 	.word	0x20001098
 8005a7c:	20001090 	.word	0x20001090

08005a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <vTaskSuspendAll+0x18>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <vTaskSuspendAll+0x18>)
 8005a8c:	6013      	str	r3, [r2, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	200010b4 	.word	0x200010b4

08005a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005aaa:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	603b      	str	r3, [r7, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ac8:	f000 fec0 	bl	800684c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005acc:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005ad4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad6:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d161      	bne.n	8005ba2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ade:	4b35      	ldr	r3, [pc, #212]	; (8005bb4 <xTaskResumeAll+0x118>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d05d      	beq.n	8005ba2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ae6:	e02e      	b.n	8005b46 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005ae8:	4b33      	ldr	r3, [pc, #204]	; (8005bb8 <xTaskResumeAll+0x11c>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3318      	adds	r3, #24
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe ffdf 	bl	8004ab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe ffda 	bl	8004ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	2201      	movs	r2, #1
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <xTaskResumeAll+0x120>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	4a2a      	ldr	r2, [pc, #168]	; (8005bbc <xTaskResumeAll+0x120>)
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <xTaskResumeAll+0x124>)
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7fe ff68 	bl	8004a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b36:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <xTaskResumeAll+0x128>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <xTaskResumeAll+0x12c>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b46:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <xTaskResumeAll+0x11c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1cc      	bne.n	8005ae8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b54:	f000 fb22 	bl	800619c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b58:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <xTaskResumeAll+0x130>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b64:	f000 f836 	bl	8005bd4 <xTaskIncrementTick>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <xTaskResumeAll+0x12c>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1f1      	bne.n	8005b64 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <xTaskResumeAll+0x130>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <xTaskResumeAll+0x12c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b92:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <xTaskResumeAll+0x134>)
 8005b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ba2:	f000 fe83 	bl	80068ac <vPortExitCritical>

	return xAlreadyYielded;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	200010b4 	.word	0x200010b4
 8005bb4:	2000108c 	.word	0x2000108c
 8005bb8:	2000104c 	.word	0x2000104c
 8005bbc:	20001094 	.word	0x20001094
 8005bc0:	20000f90 	.word	0x20000f90
 8005bc4:	20000f8c 	.word	0x20000f8c
 8005bc8:	200010a0 	.word	0x200010a0
 8005bcc:	2000109c 	.word	0x2000109c
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bde:	4b51      	ldr	r3, [pc, #324]	; (8005d24 <xTaskIncrementTick+0x150>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f040 808d 	bne.w	8005d02 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005be8:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <xTaskIncrementTick+0x154>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bf0:	4a4d      	ldr	r2, [pc, #308]	; (8005d28 <xTaskIncrementTick+0x154>)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d120      	bne.n	8005c3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bfc:	4b4b      	ldr	r3, [pc, #300]	; (8005d2c <xTaskIncrementTick+0x158>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	603b      	str	r3, [r7, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <xTaskIncrementTick+0x46>
 8005c1c:	4b43      	ldr	r3, [pc, #268]	; (8005d2c <xTaskIncrementTick+0x158>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	4b43      	ldr	r3, [pc, #268]	; (8005d30 <xTaskIncrementTick+0x15c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a41      	ldr	r2, [pc, #260]	; (8005d2c <xTaskIncrementTick+0x158>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4a41      	ldr	r2, [pc, #260]	; (8005d30 <xTaskIncrementTick+0x15c>)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	4b40      	ldr	r3, [pc, #256]	; (8005d34 <xTaskIncrementTick+0x160>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a3f      	ldr	r2, [pc, #252]	; (8005d34 <xTaskIncrementTick+0x160>)
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	f000 faaf 	bl	800619c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c3e:	4b3e      	ldr	r3, [pc, #248]	; (8005d38 <xTaskIncrementTick+0x164>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d34d      	bcc.n	8005ce4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c48:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <xTaskIncrementTick+0x158>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <xTaskIncrementTick+0x82>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <xTaskIncrementTick+0x84>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5c:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <xTaskIncrementTick+0x164>)
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	601a      	str	r2, [r3, #0]
					break;
 8005c64:	e03e      	b.n	8005ce4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c66:	4b31      	ldr	r3, [pc, #196]	; (8005d2c <xTaskIncrementTick+0x158>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d203      	bcs.n	8005c86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c7e:	4a2e      	ldr	r2, [pc, #184]	; (8005d38 <xTaskIncrementTick+0x164>)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6013      	str	r3, [r2, #0]
						break;
 8005c84:	e02e      	b.n	8005ce4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe ff14 	bl	8004ab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	3318      	adds	r3, #24
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe ff0b 	bl	8004ab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	409a      	lsls	r2, r3
 8005caa:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <xTaskIncrementTick+0x168>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <xTaskIncrementTick+0x168>)
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <xTaskIncrementTick+0x16c>)
 8005cc2:	441a      	add	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f7fe fe99 	bl	8004a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4b1b      	ldr	r3, [pc, #108]	; (8005d44 <xTaskIncrementTick+0x170>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3b4      	bcc.n	8005c48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce2:	e7b1      	b.n	8005c48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ce4:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <xTaskIncrementTick+0x170>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	4915      	ldr	r1, [pc, #84]	; (8005d40 <xTaskIncrementTick+0x16c>)
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d907      	bls.n	8005d0c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	e004      	b.n	8005d0c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <xTaskIncrementTick+0x174>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	4a0f      	ldr	r2, [pc, #60]	; (8005d48 <xTaskIncrementTick+0x174>)
 8005d0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <xTaskIncrementTick+0x178>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d18:	697b      	ldr	r3, [r7, #20]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200010b4 	.word	0x200010b4
 8005d28:	20001090 	.word	0x20001090
 8005d2c:	20001044 	.word	0x20001044
 8005d30:	20001048 	.word	0x20001048
 8005d34:	200010a4 	.word	0x200010a4
 8005d38:	200010ac 	.word	0x200010ac
 8005d3c:	20001094 	.word	0x20001094
 8005d40:	20000f90 	.word	0x20000f90
 8005d44:	20000f8c 	.word	0x20000f8c
 8005d48:	2000109c 	.word	0x2000109c
 8005d4c:	200010a0 	.word	0x200010a0

08005d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d56:	4b29      	ldr	r3, [pc, #164]	; (8005dfc <vTaskSwitchContext+0xac>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <vTaskSwitchContext+0xb0>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d64:	e044      	b.n	8005df0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005d66:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <vTaskSwitchContext+0xb0>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d6c:	4b25      	ldr	r3, [pc, #148]	; (8005e04 <vTaskSwitchContext+0xb4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	fab3 f383 	clz	r3, r3
 8005d78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d7a:	7afb      	ldrb	r3, [r7, #11]
 8005d7c:	f1c3 031f 	rsb	r3, r3, #31
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	4921      	ldr	r1, [pc, #132]	; (8005e08 <vTaskSwitchContext+0xb8>)
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <vTaskSwitchContext+0x5c>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	607b      	str	r3, [r7, #4]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <vTaskSwitchContext+0x5a>
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <vTaskSwitchContext+0xb8>)
 8005db8:	4413      	add	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3308      	adds	r3, #8
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d104      	bne.n	8005ddc <vTaskSwitchContext+0x8c>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <vTaskSwitchContext+0xbc>)
 8005de4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <vTaskSwitchContext+0xbc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	334c      	adds	r3, #76	; 0x4c
 8005dec:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <vTaskSwitchContext+0xc0>)
 8005dee:	6013      	str	r3, [r2, #0]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	200010b4 	.word	0x200010b4
 8005e00:	200010a0 	.word	0x200010a0
 8005e04:	20001094 	.word	0x20001094
 8005e08:	20000f90 	.word	0x20000f90
 8005e0c:	20000f8c 	.word	0x20000f8c
 8005e10:	20000010 	.word	0x20000010

08005e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	60fb      	str	r3, [r7, #12]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <vTaskPlaceOnEventList+0x44>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3318      	adds	r3, #24
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fe fe00 	bl	8004a48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e48:	2101      	movs	r1, #1
 8005e4a:	6838      	ldr	r0, [r7, #0]
 8005e4c:	f000 fba8 	bl	80065a0 <prvAddCurrentTaskToDelayedList>
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000f8c 	.word	0x20000f8c

08005e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3318      	adds	r3, #24
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fe fe13 	bl	8004ab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <xTaskRemoveFromEventList+0xac>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d11c      	bne.n	8005ed4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fe0a 	bl	8004ab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <xTaskRemoveFromEventList+0xb0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <xTaskRemoveFromEventList+0xb0>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <xTaskRemoveFromEventList+0xb4>)
 8005ec4:	441a      	add	r2, r3
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fe fd98 	bl	8004a02 <vListInsertEnd>
 8005ed2:	e005      	b.n	8005ee0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	3318      	adds	r3, #24
 8005ed8:	4619      	mov	r1, r3
 8005eda:	480e      	ldr	r0, [pc, #56]	; (8005f14 <xTaskRemoveFromEventList+0xb8>)
 8005edc:	f7fe fd91 	bl	8004a02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <xTaskRemoveFromEventList+0xbc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d905      	bls.n	8005efa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <xTaskRemoveFromEventList+0xc0>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e001      	b.n	8005efe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005efe:	697b      	ldr	r3, [r7, #20]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	200010b4 	.word	0x200010b4
 8005f0c:	20001094 	.word	0x20001094
 8005f10:	20000f90 	.word	0x20000f90
 8005f14:	2000104c 	.word	0x2000104c
 8005f18:	20000f8c 	.word	0x20000f8c
 8005f1c:	200010a0 	.word	0x200010a0

08005f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <vTaskInternalSetTimeOutState+0x24>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <vTaskInternalSetTimeOutState+0x28>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	605a      	str	r2, [r3, #4]
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	200010a4 	.word	0x200010a4
 8005f48:	20001090 	.word	0x20001090

08005f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	613b      	str	r3, [r7, #16]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60fb      	str	r3, [r7, #12]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f8e:	f000 fc5d 	bl	800684c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <xTaskCheckForTimeOut+0xbc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d102      	bne.n	8005fb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e023      	b.n	8005ffa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b15      	ldr	r3, [pc, #84]	; (800600c <xTaskCheckForTimeOut+0xc0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d007      	beq.n	8005fce <xTaskCheckForTimeOut+0x82>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d302      	bcc.n	8005fce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e015      	b.n	8005ffa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d20b      	bcs.n	8005ff0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff9b 	bl	8005f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	e004      	b.n	8005ffa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ffa:	f000 fc57 	bl	80068ac <vPortExitCritical>

	return xReturn;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20001090 	.word	0x20001090
 800600c:	200010a4 	.word	0x200010a4

08006010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <vTaskMissedYield+0x14>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	200010a0 	.word	0x200010a0

08006028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006030:	f000 f852 	bl	80060d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <prvIdleTask+0x28>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d9f9      	bls.n	8006030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <prvIdleTask+0x2c>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800604c:	e7f0      	b.n	8006030 <prvIdleTask+0x8>
 800604e:	bf00      	nop
 8006050:	20000f90 	.word	0x20000f90
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	e00c      	b.n	800607e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4a12      	ldr	r2, [pc, #72]	; (80060b8 <prvInitialiseTaskLists+0x60>)
 8006070:	4413      	add	r3, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fc9a 	bl	80049ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3301      	adds	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b06      	cmp	r3, #6
 8006082:	d9ef      	bls.n	8006064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006084:	480d      	ldr	r0, [pc, #52]	; (80060bc <prvInitialiseTaskLists+0x64>)
 8006086:	f7fe fc91 	bl	80049ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800608a:	480d      	ldr	r0, [pc, #52]	; (80060c0 <prvInitialiseTaskLists+0x68>)
 800608c:	f7fe fc8e 	bl	80049ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006090:	480c      	ldr	r0, [pc, #48]	; (80060c4 <prvInitialiseTaskLists+0x6c>)
 8006092:	f7fe fc8b 	bl	80049ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006096:	480c      	ldr	r0, [pc, #48]	; (80060c8 <prvInitialiseTaskLists+0x70>)
 8006098:	f7fe fc88 	bl	80049ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800609c:	480b      	ldr	r0, [pc, #44]	; (80060cc <prvInitialiseTaskLists+0x74>)
 800609e:	f7fe fc85 	bl	80049ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <prvInitialiseTaskLists+0x78>)
 80060a4:	4a05      	ldr	r2, [pc, #20]	; (80060bc <prvInitialiseTaskLists+0x64>)
 80060a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060a8:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <prvInitialiseTaskLists+0x7c>)
 80060aa:	4a05      	ldr	r2, [pc, #20]	; (80060c0 <prvInitialiseTaskLists+0x68>)
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000f90 	.word	0x20000f90
 80060bc:	2000101c 	.word	0x2000101c
 80060c0:	20001030 	.word	0x20001030
 80060c4:	2000104c 	.word	0x2000104c
 80060c8:	20001060 	.word	0x20001060
 80060cc:	20001078 	.word	0x20001078
 80060d0:	20001044 	.word	0x20001044
 80060d4:	20001048 	.word	0x20001048

080060d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060de:	e019      	b.n	8006114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060e0:	f000 fbb4 	bl	800684c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80060e4:	4b10      	ldr	r3, [pc, #64]	; (8006128 <prvCheckTasksWaitingTermination+0x50>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fce1 	bl	8004ab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <prvCheckTasksWaitingTermination+0x54>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4a0b      	ldr	r2, [pc, #44]	; (800612c <prvCheckTasksWaitingTermination+0x54>)
 80060fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <prvCheckTasksWaitingTermination+0x58>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3b01      	subs	r3, #1
 8006106:	4a0a      	ldr	r2, [pc, #40]	; (8006130 <prvCheckTasksWaitingTermination+0x58>)
 8006108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800610a:	f000 fbcf 	bl	80068ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f810 	bl	8006134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006114:	4b06      	ldr	r3, [pc, #24]	; (8006130 <prvCheckTasksWaitingTermination+0x58>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e1      	bne.n	80060e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20001060 	.word	0x20001060
 800612c:	2000108c 	.word	0x2000108c
 8006130:	20001074 	.word	0x20001074

08006134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	334c      	adds	r3, #76	; 0x4c
 8006140:	4618      	mov	r0, r3
 8006142:	f001 f8c9 	bl	80072d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fd3d 	bl	8006bd4 <vPortFree>
				vPortFree( pxTCB );
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd3a 	bl	8006bd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006160:	e018      	b.n	8006194 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006168:	2b01      	cmp	r3, #1
 800616a:	d103      	bne.n	8006174 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fd31 	bl	8006bd4 <vPortFree>
	}
 8006172:	e00f      	b.n	8006194 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800617a:	2b02      	cmp	r3, #2
 800617c:	d00a      	beq.n	8006194 <prvDeleteTCB+0x60>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60fb      	str	r3, [r7, #12]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <prvDeleteTCB+0x5e>
	}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a2:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <prvResetNextTaskUnblockTime+0x40>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <prvResetNextTaskUnblockTime+0x14>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <prvResetNextTaskUnblockTime+0x16>
 80061b0:	2300      	movs	r3, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <prvResetNextTaskUnblockTime+0x44>)
 80061b8:	f04f 32ff 	mov.w	r2, #4294967295
 80061bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061be:	e008      	b.n	80061d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <prvResetNextTaskUnblockTime+0x40>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	4a04      	ldr	r2, [pc, #16]	; (80061e0 <prvResetNextTaskUnblockTime+0x44>)
 80061d0:	6013      	str	r3, [r2, #0]
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr
 80061dc:	20001044 	.word	0x20001044
 80061e0:	200010ac 	.word	0x200010ac

080061e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061ea:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <xTaskGetSchedulerState+0x34>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061f2:	2301      	movs	r3, #1
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	e008      	b.n	800620a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <xTaskGetSchedulerState+0x38>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006200:	2302      	movs	r3, #2
 8006202:	607b      	str	r3, [r7, #4]
 8006204:	e001      	b.n	800620a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800620a:	687b      	ldr	r3, [r7, #4]
	}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20001098 	.word	0x20001098
 800621c:	200010b4 	.word	0x200010b4

08006220 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d06e      	beq.n	8006314 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623a:	4b39      	ldr	r3, [pc, #228]	; (8006320 <xTaskPriorityInherit+0x100>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	429a      	cmp	r2, r3
 8006242:	d25e      	bcs.n	8006302 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	db06      	blt.n	800625a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624c:	4b34      	ldr	r3, [pc, #208]	; (8006320 <xTaskPriorityInherit+0x100>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	f1c3 0207 	rsb	r2, r3, #7
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6959      	ldr	r1, [r3, #20]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4a2e      	ldr	r2, [pc, #184]	; (8006324 <xTaskPriorityInherit+0x104>)
 800626c:	4413      	add	r3, r2
 800626e:	4299      	cmp	r1, r3
 8006270:	d101      	bne.n	8006276 <xTaskPriorityInherit+0x56>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <xTaskPriorityInherit+0x58>
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d03a      	beq.n	80062f2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	3304      	adds	r3, #4
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fc19 	bl	8004ab8 <uxListRemove>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d115      	bne.n	80062b8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	4924      	ldr	r1, [pc, #144]	; (8006324 <xTaskPriorityInherit+0x104>)
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <xTaskPriorityInherit+0x98>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	2201      	movs	r2, #1
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43da      	mvns	r2, r3
 80062ae:	4b1e      	ldr	r3, [pc, #120]	; (8006328 <xTaskPriorityInherit+0x108>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4013      	ands	r3, r2
 80062b4:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <xTaskPriorityInherit+0x108>)
 80062b6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062b8:	4b19      	ldr	r3, [pc, #100]	; (8006320 <xTaskPriorityInherit+0x100>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	2201      	movs	r2, #1
 80062c8:	409a      	lsls	r2, r3
 80062ca:	4b17      	ldr	r3, [pc, #92]	; (8006328 <xTaskPriorityInherit+0x108>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	4a15      	ldr	r2, [pc, #84]	; (8006328 <xTaskPriorityInherit+0x108>)
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4a10      	ldr	r2, [pc, #64]	; (8006324 <xTaskPriorityInherit+0x104>)
 80062e2:	441a      	add	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7fe fb89 	bl	8004a02 <vListInsertEnd>
 80062f0:	e004      	b.n	80062fc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <xTaskPriorityInherit+0x100>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e008      	b.n	8006314 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <xTaskPriorityInherit+0x100>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d201      	bcs.n	8006314 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006310:	2301      	movs	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006314:	68fb      	ldr	r3, [r7, #12]
	}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000f8c 	.word	0x20000f8c
 8006324:	20000f90 	.word	0x20000f90
 8006328:	20001094 	.word	0x20001094

0800632c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d06e      	beq.n	8006420 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006342:	4b3a      	ldr	r3, [pc, #232]	; (800642c <xTaskPriorityDisinherit+0x100>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	429a      	cmp	r2, r3
 800634a:	d00a      	beq.n	8006362 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60bb      	str	r3, [r7, #8]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006384:	1e5a      	subs	r2, r3, #1
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	429a      	cmp	r2, r3
 8006394:	d044      	beq.n	8006420 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	2b00      	cmp	r3, #0
 800639c:	d140      	bne.n	8006420 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fb88 	bl	8004ab8 <uxListRemove>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d115      	bne.n	80063da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b2:	491f      	ldr	r1, [pc, #124]	; (8006430 <xTaskPriorityDisinherit+0x104>)
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <xTaskPriorityDisinherit+0xae>
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	2201      	movs	r2, #1
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	43da      	mvns	r2, r3
 80063d0:	4b18      	ldr	r3, [pc, #96]	; (8006434 <xTaskPriorityDisinherit+0x108>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4013      	ands	r3, r2
 80063d6:	4a17      	ldr	r2, [pc, #92]	; (8006434 <xTaskPriorityDisinherit+0x108>)
 80063d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	f1c3 0207 	rsb	r2, r3, #7
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	2201      	movs	r2, #1
 80063f4:	409a      	lsls	r2, r3
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <xTaskPriorityDisinherit+0x108>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	4a0d      	ldr	r2, [pc, #52]	; (8006434 <xTaskPriorityDisinherit+0x108>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4a08      	ldr	r2, [pc, #32]	; (8006430 <xTaskPriorityDisinherit+0x104>)
 800640e:	441a      	add	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	3304      	adds	r3, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f7fe faf3 	bl	8004a02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006420:	697b      	ldr	r3, [r7, #20]
	}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000f8c 	.word	0x20000f8c
 8006430:	20000f90 	.word	0x20000f90
 8006434:	20001094 	.word	0x20001094

08006438 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006446:	2301      	movs	r3, #1
 8006448:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8088 	beq.w	8006562 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60fb      	str	r3, [r7, #12]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d902      	bls.n	8006480 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e002      	b.n	8006486 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	429a      	cmp	r2, r3
 800648e:	d068      	beq.n	8006562 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	429a      	cmp	r2, r3
 8006498:	d163      	bne.n	8006562 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800649a:	4b34      	ldr	r3, [pc, #208]	; (800656c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d10a      	bne.n	80064ba <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60bb      	str	r3, [r7, #8]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	db04      	blt.n	80064d8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f1c3 0207 	rsb	r2, r3, #7
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	6959      	ldr	r1, [r3, #20]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4a22      	ldr	r2, [pc, #136]	; (8006570 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80064e8:	4413      	add	r3, r2
 80064ea:	4299      	cmp	r1, r3
 80064ec:	d101      	bne.n	80064f2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d034      	beq.n	8006562 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fadb 	bl	8004ab8 <uxListRemove>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d115      	bne.n	8006534 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650c:	4918      	ldr	r1, [pc, #96]	; (8006570 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	2201      	movs	r2, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	43da      	mvns	r2, r3
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4013      	ands	r3, r2
 8006530:	4a10      	ldr	r2, [pc, #64]	; (8006574 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006532:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4313      	orrs	r3, r2
 8006542:	4a0c      	ldr	r2, [pc, #48]	; (8006574 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006554:	441a      	add	r2, r3
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7fe fa50 	bl	8004a02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006562:	bf00      	nop
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000f8c 	.word	0x20000f8c
 8006570:	20000f90 	.word	0x20000f90
 8006574:	20001094 	.word	0x20001094

08006578 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800657c:	4b07      	ldr	r3, [pc, #28]	; (800659c <pvTaskIncrementMutexHeldCount+0x24>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <pvTaskIncrementMutexHeldCount+0x24>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800658a:	3201      	adds	r2, #1
 800658c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800658e:	4b03      	ldr	r3, [pc, #12]	; (800659c <pvTaskIncrementMutexHeldCount+0x24>)
 8006590:	681b      	ldr	r3, [r3, #0]
	}
 8006592:	4618      	mov	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000f8c 	.word	0x20000f8c

080065a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065aa:	4b29      	ldr	r3, [pc, #164]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b0:	4b28      	ldr	r3, [pc, #160]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe fa7e 	bl	8004ab8 <uxListRemove>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80065c2:	4b24      	ldr	r3, [pc, #144]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	2201      	movs	r2, #1
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43da      	mvns	r2, r3
 80065d0:	4b21      	ldr	r3, [pc, #132]	; (8006658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4013      	ands	r3, r2
 80065d6:	4a20      	ldr	r2, [pc, #128]	; (8006658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d10a      	bne.n	80065f8 <prvAddCurrentTaskToDelayedList+0x58>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	481a      	ldr	r0, [pc, #104]	; (800665c <prvAddCurrentTaskToDelayedList+0xbc>)
 80065f2:	f7fe fa06 	bl	8004a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065f6:	e026      	b.n	8006646 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d209      	bcs.n	8006624 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006610:	4b13      	ldr	r3, [pc, #76]	; (8006660 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7fe fa13 	bl	8004a48 <vListInsert>
}
 8006622:	e010      	b.n	8006646 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006624:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7fe fa09 	bl	8004a48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	d202      	bcs.n	8006646 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006640:	4a09      	ldr	r2, [pc, #36]	; (8006668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6013      	str	r3, [r2, #0]
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20001090 	.word	0x20001090
 8006654:	20000f8c 	.word	0x20000f8c
 8006658:	20001094 	.word	0x20001094
 800665c:	20001078 	.word	0x20001078
 8006660:	20001048 	.word	0x20001048
 8006664:	20001044 	.word	0x20001044
 8006668:	200010ac 	.word	0x200010ac

0800666c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3b04      	subs	r3, #4
 800667c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3b04      	subs	r3, #4
 800668a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f023 0201 	bic.w	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3b04      	subs	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <pxPortInitialiseStack+0x54>)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3b14      	subs	r3, #20
 80066a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b20      	subs	r3, #32
 80066b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr
 80066c0:	080066c5 	.word	0x080066c5

080066c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ce:	4b12      	ldr	r3, [pc, #72]	; (8006718 <prvTaskExitError+0x54>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d00a      	beq.n	80066ee <prvTaskExitError+0x2a>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	60fb      	str	r3, [r7, #12]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <prvTaskExitError+0x28>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60bb      	str	r3, [r7, #8]
}
 8006700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006702:	bf00      	nop
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0fc      	beq.n	8006704 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800670a:	bf00      	nop
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	2000000c 	.word	0x2000000c
 800671c:	00000000 	.word	0x00000000

08006720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <pxCurrentTCBConst2>)
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800672a:	f380 8809 	msr	PSP, r0
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8811 	msr	BASEPRI, r0
 800673a:	f04e 0e0d 	orr.w	lr, lr, #13
 800673e:	4770      	bx	lr

08006740 <pxCurrentTCBConst2>:
 8006740:	20000f8c 	.word	0x20000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006748:	4806      	ldr	r0, [pc, #24]	; (8006764 <prvPortStartFirstTask+0x1c>)
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f380 8808 	msr	MSP, r0
 8006752:	b662      	cpsie	i
 8006754:	b661      	cpsie	f
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	df00      	svc	0
 8006760:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006762:	bf00      	nop
 8006764:	e000ed08 	.word	0xe000ed08

08006768 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800676e:	4b32      	ldr	r3, [pc, #200]	; (8006838 <xPortStartScheduler+0xd0>)
 8006770:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006790:	b2da      	uxtb	r2, r3
 8006792:	4b2a      	ldr	r3, [pc, #168]	; (800683c <xPortStartScheduler+0xd4>)
 8006794:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006796:	4b2a      	ldr	r3, [pc, #168]	; (8006840 <xPortStartScheduler+0xd8>)
 8006798:	2207      	movs	r2, #7
 800679a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800679c:	e009      	b.n	80067b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800679e:	4b28      	ldr	r3, [pc, #160]	; (8006840 <xPortStartScheduler+0xd8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	4a26      	ldr	r2, [pc, #152]	; (8006840 <xPortStartScheduler+0xd8>)
 80067a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d0ef      	beq.n	800679e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067be:	4b20      	ldr	r3, [pc, #128]	; (8006840 <xPortStartScheduler+0xd8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f1c3 0307 	rsb	r3, r3, #7
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d00a      	beq.n	80067e0 <xPortStartScheduler+0x78>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60bb      	str	r3, [r7, #8]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067e0:	4b17      	ldr	r3, [pc, #92]	; (8006840 <xPortStartScheduler+0xd8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	4a16      	ldr	r2, [pc, #88]	; (8006840 <xPortStartScheduler+0xd8>)
 80067e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067ea:	4b15      	ldr	r3, [pc, #84]	; (8006840 <xPortStartScheduler+0xd8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067f2:	4a13      	ldr	r2, [pc, #76]	; (8006840 <xPortStartScheduler+0xd8>)
 80067f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067fe:	4b11      	ldr	r3, [pc, #68]	; (8006844 <xPortStartScheduler+0xdc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a10      	ldr	r2, [pc, #64]	; (8006844 <xPortStartScheduler+0xdc>)
 8006804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006808:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <xPortStartScheduler+0xdc>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a0d      	ldr	r2, [pc, #52]	; (8006844 <xPortStartScheduler+0xdc>)
 8006810:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006814:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006816:	f000 f8b9 	bl	800698c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <xPortStartScheduler+0xe0>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006820:	f7ff ff92 	bl	8006748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006824:	f7ff fa94 	bl	8005d50 <vTaskSwitchContext>
	prvTaskExitError();
 8006828:	f7ff ff4c 	bl	80066c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	e000e400 	.word	0xe000e400
 800683c:	200010b8 	.word	0x200010b8
 8006840:	200010bc 	.word	0x200010bc
 8006844:	e000ed20 	.word	0xe000ed20
 8006848:	2000000c 	.word	0x2000000c

0800684c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	607b      	str	r3, [r7, #4]
}
 8006864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006866:	4b0f      	ldr	r3, [pc, #60]	; (80068a4 <vPortEnterCritical+0x58>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	4a0d      	ldr	r2, [pc, #52]	; (80068a4 <vPortEnterCritical+0x58>)
 800686e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006870:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <vPortEnterCritical+0x58>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d10f      	bne.n	8006898 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <vPortEnterCritical+0x5c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <vPortEnterCritical+0x4c>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	603b      	str	r3, [r7, #0]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vPortEnterCritical+0x4a>
	}
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <vPortExitCritical+0x4c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <vPortExitCritical+0x24>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068d0:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <vPortExitCritical+0x4c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <vPortExitCritical+0x4c>)
 80068d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <vPortExitCritical+0x4c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <vPortExitCritical+0x42>
 80068e2:	2300      	movs	r3, #0
 80068e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	f383 8811 	msr	BASEPRI, r3
}
 80068ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr
 80068f8:	2000000c 	.word	0x2000000c
 80068fc:	00000000 	.word	0x00000000

08006900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006900:	f3ef 8009 	mrs	r0, PSP
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <pxCurrentTCBConst>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006910:	6010      	str	r0, [r2, #0]
 8006912:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006916:	f04f 0050 	mov.w	r0, #80	; 0x50
 800691a:	f380 8811 	msr	BASEPRI, r0
 800691e:	f7ff fa17 	bl	8005d50 <vTaskSwitchContext>
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8811 	msr	BASEPRI, r0
 800692a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800692e:	6819      	ldr	r1, [r3, #0]
 8006930:	6808      	ldr	r0, [r1, #0]
 8006932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006936:	f380 8809 	msr	PSP, r0
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	4770      	bx	lr

08006940 <pxCurrentTCBConst>:
 8006940:	20000f8c 	.word	0x20000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	607b      	str	r3, [r7, #4]
}
 8006960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006962:	f7ff f937 	bl	8005bd4 <xTaskIncrementTick>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <SysTick_Handler+0x40>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f383 8811 	msr	BASEPRI, r3
}
 800697e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006990:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <vPortSetupTimerInterrupt+0x30>)
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <vPortSetupTimerInterrupt+0x34>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <vPortSetupTimerInterrupt+0x38>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a09      	ldr	r2, [pc, #36]	; (80069c8 <vPortSetupTimerInterrupt+0x3c>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	099b      	lsrs	r3, r3, #6
 80069a8:	4a08      	ldr	r2, [pc, #32]	; (80069cc <vPortSetupTimerInterrupt+0x40>)
 80069aa:	3b01      	subs	r3, #1
 80069ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ae:	4b03      	ldr	r3, [pc, #12]	; (80069bc <vPortSetupTimerInterrupt+0x30>)
 80069b0:	2207      	movs	r2, #7
 80069b2:	601a      	str	r2, [r3, #0]
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	e000e010 	.word	0xe000e010
 80069c0:	e000e018 	.word	0xe000e018
 80069c4:	20000000 	.word	0x20000000
 80069c8:	10624dd3 	.word	0x10624dd3
 80069cc:	e000e014 	.word	0xe000e014

080069d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069d6:	f3ef 8305 	mrs	r3, IPSR
 80069da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b0f      	cmp	r3, #15
 80069e0:	d914      	bls.n	8006a0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069e2:	4a16      	ldr	r2, [pc, #88]	; (8006a3c <vPortValidateInterruptPriority+0x6c>)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <vPortValidateInterruptPriority+0x70>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	7afa      	ldrb	r2, [r7, #11]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d20a      	bcs.n	8006a0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	607b      	str	r3, [r7, #4]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <vPortValidateInterruptPriority+0x74>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <vPortValidateInterruptPriority+0x78>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d90a      	bls.n	8006a32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	603b      	str	r3, [r7, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vPortValidateInterruptPriority+0x60>
	}
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr
 8006a3c:	e000e3f0 	.word	0xe000e3f0
 8006a40:	200010b8 	.word	0x200010b8
 8006a44:	e000ed0c 	.word	0xe000ed0c
 8006a48:	200010bc 	.word	0x200010bc

08006a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a58:	f7ff f812 	bl	8005a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a5c:	4b58      	ldr	r3, [pc, #352]	; (8006bc0 <pvPortMalloc+0x174>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a64:	f000 f910 	bl	8006c88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a68:	4b56      	ldr	r3, [pc, #344]	; (8006bc4 <pvPortMalloc+0x178>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 808e 	bne.w	8006b92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01d      	beq.n	8006ab8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d014      	beq.n	8006ab8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f023 0307 	bic.w	r3, r3, #7
 8006a94:	3308      	adds	r3, #8
 8006a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <pvPortMalloc+0x6c>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	617b      	str	r3, [r7, #20]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d069      	beq.n	8006b92 <pvPortMalloc+0x146>
 8006abe:	4b42      	ldr	r3, [pc, #264]	; (8006bc8 <pvPortMalloc+0x17c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d864      	bhi.n	8006b92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ac8:	4b40      	ldr	r3, [pc, #256]	; (8006bcc <pvPortMalloc+0x180>)
 8006aca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006acc:	4b3f      	ldr	r3, [pc, #252]	; (8006bcc <pvPortMalloc+0x180>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ad2:	e004      	b.n	8006ade <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d903      	bls.n	8006af0 <pvPortMalloc+0xa4>
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1f1      	bne.n	8006ad4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006af0:	4b33      	ldr	r3, [pc, #204]	; (8006bc0 <pvPortMalloc+0x174>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d04b      	beq.n	8006b92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2208      	movs	r2, #8
 8006b00:	4413      	add	r3, r2
 8006b02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	2308      	movs	r3, #8
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d91f      	bls.n	8006b5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4413      	add	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <pvPortMalloc+0xf8>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	613b      	str	r3, [r7, #16]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b56:	69b8      	ldr	r0, [r7, #24]
 8006b58:	f000 f8f8 	bl	8006d4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <pvPortMalloc+0x17c>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	4a18      	ldr	r2, [pc, #96]	; (8006bc8 <pvPortMalloc+0x17c>)
 8006b68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b6a:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <pvPortMalloc+0x17c>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b18      	ldr	r3, [pc, #96]	; (8006bd0 <pvPortMalloc+0x184>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d203      	bcs.n	8006b7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <pvPortMalloc+0x17c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <pvPortMalloc+0x184>)
 8006b7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <pvPortMalloc+0x178>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b92:	f7fe ff83 	bl	8005a9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <pvPortMalloc+0x16a>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <pvPortMalloc+0x168>
	return pvReturn;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3728      	adds	r7, #40	; 0x28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20001cc8 	.word	0x20001cc8
 8006bc4:	20001cd4 	.word	0x20001cd4
 8006bc8:	20001ccc 	.word	0x20001ccc
 8006bcc:	20001cc0 	.word	0x20001cc0
 8006bd0:	20001cd0 	.word	0x20001cd0

08006bd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d048      	beq.n	8006c78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006be6:	2308      	movs	r3, #8
 8006be8:	425b      	negs	r3, r3
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4413      	add	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	4b21      	ldr	r3, [pc, #132]	; (8006c80 <vPortFree+0xac>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <vPortFree+0x44>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60fb      	str	r3, [r7, #12]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <vPortFree+0x62>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	60bb      	str	r3, [r7, #8]
}
 8006c32:	bf00      	nop
 8006c34:	e7fe      	b.n	8006c34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <vPortFree+0xac>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d019      	beq.n	8006c78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d115      	bne.n	8006c78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <vPortFree+0xac>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	43db      	mvns	r3, r3
 8006c56:	401a      	ands	r2, r3
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c5c:	f7fe ff10 	bl	8005a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <vPortFree+0xb0>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4413      	add	r3, r2
 8006c6a:	4a06      	ldr	r2, [pc, #24]	; (8006c84 <vPortFree+0xb0>)
 8006c6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c6e:	6938      	ldr	r0, [r7, #16]
 8006c70:	f000 f86c 	bl	8006d4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c74:	f7fe ff12 	bl	8005a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c78:	bf00      	nop
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20001cd4 	.word	0x20001cd4
 8006c84:	20001ccc 	.word	0x20001ccc

08006c88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <prvHeapInit+0xac>)
 8006c96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00c      	beq.n	8006cbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3307      	adds	r3, #7
 8006ca6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0307 	bic.w	r3, r3, #7
 8006cae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <prvHeapInit+0xac>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cc0:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <prvHeapInit+0xb0>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cc6:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <prvHeapInit+0xb0>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	1a9b      	subs	r3, r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0307 	bic.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <prvHeapInit+0xb4>)
 8006ce8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cea:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <prvHeapInit+0xb4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <prvHeapInit+0xb4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <prvHeapInit+0xb4>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4a0a      	ldr	r2, [pc, #40]	; (8006d40 <prvHeapInit+0xb8>)
 8006d16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4a09      	ldr	r2, [pc, #36]	; (8006d44 <prvHeapInit+0xbc>)
 8006d1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d20:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <prvHeapInit+0xc0>)
 8006d22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d26:	601a      	str	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	200010c0 	.word	0x200010c0
 8006d38:	20001cc0 	.word	0x20001cc0
 8006d3c:	20001cc8 	.word	0x20001cc8
 8006d40:	20001cd0 	.word	0x20001cd0
 8006d44:	20001ccc 	.word	0x20001ccc
 8006d48:	20001cd4 	.word	0x20001cd4

08006d4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d54:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <prvInsertBlockIntoFreeList+0xa8>)
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e002      	b.n	8006d60 <prvInsertBlockIntoFreeList+0x14>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d8f7      	bhi.n	8006d5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	4413      	add	r3, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d108      	bne.n	8006d8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	441a      	add	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	441a      	add	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d118      	bne.n	8006dd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <prvInsertBlockIntoFreeList+0xac>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d00d      	beq.n	8006dca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	441a      	add	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	e008      	b.n	8006ddc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <prvInsertBlockIntoFreeList+0xac>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e003      	b.n	8006ddc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d002      	beq.n	8006dea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	20001cc0 	.word	0x20001cc0
 8006df8:	20001cc8 	.word	0x20001cc8

08006dfc <atoi>:
 8006dfc:	220a      	movs	r2, #10
 8006dfe:	2100      	movs	r1, #0
 8006e00:	f000 bc6a 	b.w	80076d8 <strtol>

08006e04 <__errno>:
 8006e04:	4b01      	ldr	r3, [pc, #4]	; (8006e0c <__errno+0x8>)
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000010 	.word	0x20000010

08006e10 <std>:
 8006e10:	2300      	movs	r3, #0
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e1e:	6083      	str	r3, [r0, #8]
 8006e20:	8181      	strh	r1, [r0, #12]
 8006e22:	6643      	str	r3, [r0, #100]	; 0x64
 8006e24:	81c2      	strh	r2, [r0, #14]
 8006e26:	6183      	str	r3, [r0, #24]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	305c      	adds	r0, #92	; 0x5c
 8006e2e:	f000 f91a 	bl	8007066 <memset>
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <std+0x38>)
 8006e34:	6224      	str	r4, [r4, #32]
 8006e36:	6263      	str	r3, [r4, #36]	; 0x24
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <std+0x3c>)
 8006e3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <std+0x40>)
 8006e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e40:	4b04      	ldr	r3, [pc, #16]	; (8006e54 <std+0x44>)
 8006e42:	6323      	str	r3, [r4, #48]	; 0x30
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	08007445 	.word	0x08007445
 8006e4c:	0800746b 	.word	0x0800746b
 8006e50:	080074a3 	.word	0x080074a3
 8006e54:	080074c7 	.word	0x080074c7

08006e58 <_cleanup_r>:
 8006e58:	4901      	ldr	r1, [pc, #4]	; (8006e60 <_cleanup_r+0x8>)
 8006e5a:	f000 b8af 	b.w	8006fbc <_fwalk_reent>
 8006e5e:	bf00      	nop
 8006e60:	080079f1 	.word	0x080079f1

08006e64 <__sfmoreglue>:
 8006e64:	2268      	movs	r2, #104	; 0x68
 8006e66:	b570      	push	{r4, r5, r6, lr}
 8006e68:	1e4d      	subs	r5, r1, #1
 8006e6a:	4355      	muls	r5, r2
 8006e6c:	460e      	mov	r6, r1
 8006e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e72:	f000 f921 	bl	80070b8 <_malloc_r>
 8006e76:	4604      	mov	r4, r0
 8006e78:	b140      	cbz	r0, 8006e8c <__sfmoreglue+0x28>
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e80:	300c      	adds	r0, #12
 8006e82:	60a0      	str	r0, [r4, #8]
 8006e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e88:	f000 f8ed 	bl	8007066 <memset>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}

08006e90 <__sfp_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sfp_lock_acquire+0x8>)
 8006e92:	f000 b8d8 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	20001cd9 	.word	0x20001cd9

08006e9c <__sfp_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__sfp_lock_release+0x8>)
 8006e9e:	f000 b8d3 	b.w	8007048 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	20001cd9 	.word	0x20001cd9

08006ea8 <__sinit_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__sinit_lock_acquire+0x8>)
 8006eaa:	f000 b8cc 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	20001cda 	.word	0x20001cda

08006eb4 <__sinit_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sinit_lock_release+0x8>)
 8006eb6:	f000 b8c7 	b.w	8007048 <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	20001cda 	.word	0x20001cda

08006ec0 <__sinit>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	f7ff fff0 	bl	8006ea8 <__sinit_lock_acquire>
 8006ec8:	69a3      	ldr	r3, [r4, #24]
 8006eca:	b11b      	cbz	r3, 8006ed4 <__sinit+0x14>
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f7ff bff0 	b.w	8006eb4 <__sinit_lock_release>
 8006ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <__sinit+0x68>)
 8006edc:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <__sinit+0x6c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	bf08      	it	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	4620      	mov	r0, r4
 8006eea:	bf08      	it	eq
 8006eec:	61a3      	streq	r3, [r4, #24]
 8006eee:	f000 f81f 	bl	8006f30 <__sfp>
 8006ef2:	6060      	str	r0, [r4, #4]
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 f81b 	bl	8006f30 <__sfp>
 8006efa:	60a0      	str	r0, [r4, #8]
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 f817 	bl	8006f30 <__sfp>
 8006f02:	2200      	movs	r2, #0
 8006f04:	2104      	movs	r1, #4
 8006f06:	60e0      	str	r0, [r4, #12]
 8006f08:	6860      	ldr	r0, [r4, #4]
 8006f0a:	f7ff ff81 	bl	8006e10 <std>
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2109      	movs	r1, #9
 8006f12:	68a0      	ldr	r0, [r4, #8]
 8006f14:	f7ff ff7c 	bl	8006e10 <std>
 8006f18:	2202      	movs	r2, #2
 8006f1a:	2112      	movs	r1, #18
 8006f1c:	68e0      	ldr	r0, [r4, #12]
 8006f1e:	f7ff ff77 	bl	8006e10 <std>
 8006f22:	2301      	movs	r3, #1
 8006f24:	61a3      	str	r3, [r4, #24]
 8006f26:	e7d1      	b.n	8006ecc <__sinit+0xc>
 8006f28:	08009484 	.word	0x08009484
 8006f2c:	08006e59 	.word	0x08006e59

08006f30 <__sfp>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	4607      	mov	r7, r0
 8006f34:	f7ff ffac 	bl	8006e90 <__sfp_lock_acquire>
 8006f38:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <__sfp+0x84>)
 8006f3a:	681e      	ldr	r6, [r3, #0]
 8006f3c:	69b3      	ldr	r3, [r6, #24]
 8006f3e:	b913      	cbnz	r3, 8006f46 <__sfp+0x16>
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff ffbd 	bl	8006ec0 <__sinit>
 8006f46:	3648      	adds	r6, #72	; 0x48
 8006f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	d503      	bpl.n	8006f58 <__sfp+0x28>
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	b30b      	cbz	r3, 8006f98 <__sfp+0x68>
 8006f54:	6836      	ldr	r6, [r6, #0]
 8006f56:	e7f7      	b.n	8006f48 <__sfp+0x18>
 8006f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f5c:	b9d5      	cbnz	r5, 8006f94 <__sfp+0x64>
 8006f5e:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <__sfp+0x88>)
 8006f60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f64:	60e3      	str	r3, [r4, #12]
 8006f66:	6665      	str	r5, [r4, #100]	; 0x64
 8006f68:	f000 f86c 	bl	8007044 <__retarget_lock_init_recursive>
 8006f6c:	f7ff ff96 	bl	8006e9c <__sfp_lock_release>
 8006f70:	2208      	movs	r2, #8
 8006f72:	4629      	mov	r1, r5
 8006f74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f7c:	6025      	str	r5, [r4, #0]
 8006f7e:	61a5      	str	r5, [r4, #24]
 8006f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f84:	f000 f86f 	bl	8007066 <memset>
 8006f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f90:	4620      	mov	r0, r4
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	3468      	adds	r4, #104	; 0x68
 8006f96:	e7d9      	b.n	8006f4c <__sfp+0x1c>
 8006f98:	2104      	movs	r1, #4
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	f7ff ff62 	bl	8006e64 <__sfmoreglue>
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	6030      	str	r0, [r6, #0]
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d1d5      	bne.n	8006f54 <__sfp+0x24>
 8006fa8:	f7ff ff78 	bl	8006e9c <__sfp_lock_release>
 8006fac:	230c      	movs	r3, #12
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	e7ee      	b.n	8006f90 <__sfp+0x60>
 8006fb2:	bf00      	nop
 8006fb4:	08009484 	.word	0x08009484
 8006fb8:	ffff0001 	.word	0xffff0001

08006fbc <_fwalk_reent>:
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	4688      	mov	r8, r1
 8006fc4:	2700      	movs	r7, #0
 8006fc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fce:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd2:	d505      	bpl.n	8006fe0 <_fwalk_reent+0x24>
 8006fd4:	6824      	ldr	r4, [r4, #0]
 8006fd6:	2c00      	cmp	r4, #0
 8006fd8:	d1f7      	bne.n	8006fca <_fwalk_reent+0xe>
 8006fda:	4638      	mov	r0, r7
 8006fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe0:	89ab      	ldrh	r3, [r5, #12]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d907      	bls.n	8006ff6 <_fwalk_reent+0x3a>
 8006fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fea:	3301      	adds	r3, #1
 8006fec:	d003      	beq.n	8006ff6 <_fwalk_reent+0x3a>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	47c0      	blx	r8
 8006ff4:	4307      	orrs	r7, r0
 8006ff6:	3568      	adds	r5, #104	; 0x68
 8006ff8:	e7e9      	b.n	8006fce <_fwalk_reent+0x12>
	...

08006ffc <__libc_init_array>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	2600      	movs	r6, #0
 8007000:	4d0c      	ldr	r5, [pc, #48]	; (8007034 <__libc_init_array+0x38>)
 8007002:	4c0d      	ldr	r4, [pc, #52]	; (8007038 <__libc_init_array+0x3c>)
 8007004:	1b64      	subs	r4, r4, r5
 8007006:	10a4      	asrs	r4, r4, #2
 8007008:	42a6      	cmp	r6, r4
 800700a:	d109      	bne.n	8007020 <__libc_init_array+0x24>
 800700c:	f001 ff46 	bl	8008e9c <_init>
 8007010:	2600      	movs	r6, #0
 8007012:	4d0a      	ldr	r5, [pc, #40]	; (800703c <__libc_init_array+0x40>)
 8007014:	4c0a      	ldr	r4, [pc, #40]	; (8007040 <__libc_init_array+0x44>)
 8007016:	1b64      	subs	r4, r4, r5
 8007018:	10a4      	asrs	r4, r4, #2
 800701a:	42a6      	cmp	r6, r4
 800701c:	d105      	bne.n	800702a <__libc_init_array+0x2e>
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	f855 3b04 	ldr.w	r3, [r5], #4
 8007024:	4798      	blx	r3
 8007026:	3601      	adds	r6, #1
 8007028:	e7ee      	b.n	8007008 <__libc_init_array+0xc>
 800702a:	f855 3b04 	ldr.w	r3, [r5], #4
 800702e:	4798      	blx	r3
 8007030:	3601      	adds	r6, #1
 8007032:	e7f2      	b.n	800701a <__libc_init_array+0x1e>
 8007034:	08009690 	.word	0x08009690
 8007038:	08009690 	.word	0x08009690
 800703c:	08009690 	.word	0x08009690
 8007040:	08009694 	.word	0x08009694

08007044 <__retarget_lock_init_recursive>:
 8007044:	4770      	bx	lr

08007046 <__retarget_lock_acquire_recursive>:
 8007046:	4770      	bx	lr

08007048 <__retarget_lock_release_recursive>:
 8007048:	4770      	bx	lr

0800704a <memcpy>:
 800704a:	440a      	add	r2, r1
 800704c:	4291      	cmp	r1, r2
 800704e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007052:	d100      	bne.n	8007056 <memcpy+0xc>
 8007054:	4770      	bx	lr
 8007056:	b510      	push	{r4, lr}
 8007058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800705c:	4291      	cmp	r1, r2
 800705e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007062:	d1f9      	bne.n	8007058 <memcpy+0xe>
 8007064:	bd10      	pop	{r4, pc}

08007066 <memset>:
 8007066:	4603      	mov	r3, r0
 8007068:	4402      	add	r2, r0
 800706a:	4293      	cmp	r3, r2
 800706c:	d100      	bne.n	8007070 <memset+0xa>
 800706e:	4770      	bx	lr
 8007070:	f803 1b01 	strb.w	r1, [r3], #1
 8007074:	e7f9      	b.n	800706a <memset+0x4>
	...

08007078 <sbrk_aligned>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	4e0e      	ldr	r6, [pc, #56]	; (80070b4 <sbrk_aligned+0x3c>)
 800707c:	460c      	mov	r4, r1
 800707e:	6831      	ldr	r1, [r6, #0]
 8007080:	4605      	mov	r5, r0
 8007082:	b911      	cbnz	r1, 800708a <sbrk_aligned+0x12>
 8007084:	f000 f984 	bl	8007390 <_sbrk_r>
 8007088:	6030      	str	r0, [r6, #0]
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f97f 	bl	8007390 <_sbrk_r>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d00a      	beq.n	80070ac <sbrk_aligned+0x34>
 8007096:	1cc4      	adds	r4, r0, #3
 8007098:	f024 0403 	bic.w	r4, r4, #3
 800709c:	42a0      	cmp	r0, r4
 800709e:	d007      	beq.n	80070b0 <sbrk_aligned+0x38>
 80070a0:	1a21      	subs	r1, r4, r0
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f974 	bl	8007390 <_sbrk_r>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d101      	bne.n	80070b0 <sbrk_aligned+0x38>
 80070ac:	f04f 34ff 	mov.w	r4, #4294967295
 80070b0:	4620      	mov	r0, r4
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	20001ce0 	.word	0x20001ce0

080070b8 <_malloc_r>:
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	1ccd      	adds	r5, r1, #3
 80070be:	f025 0503 	bic.w	r5, r5, #3
 80070c2:	3508      	adds	r5, #8
 80070c4:	2d0c      	cmp	r5, #12
 80070c6:	bf38      	it	cc
 80070c8:	250c      	movcc	r5, #12
 80070ca:	2d00      	cmp	r5, #0
 80070cc:	4607      	mov	r7, r0
 80070ce:	db01      	blt.n	80070d4 <_malloc_r+0x1c>
 80070d0:	42a9      	cmp	r1, r5
 80070d2:	d905      	bls.n	80070e0 <_malloc_r+0x28>
 80070d4:	230c      	movs	r3, #12
 80070d6:	2600      	movs	r6, #0
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	4630      	mov	r0, r6
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e0:	4e2e      	ldr	r6, [pc, #184]	; (800719c <_malloc_r+0xe4>)
 80070e2:	f000 fd53 	bl	8007b8c <__malloc_lock>
 80070e6:	6833      	ldr	r3, [r6, #0]
 80070e8:	461c      	mov	r4, r3
 80070ea:	bb34      	cbnz	r4, 800713a <_malloc_r+0x82>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7ff ffc2 	bl	8007078 <sbrk_aligned>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	4604      	mov	r4, r0
 80070f8:	d14d      	bne.n	8007196 <_malloc_r+0xde>
 80070fa:	6834      	ldr	r4, [r6, #0]
 80070fc:	4626      	mov	r6, r4
 80070fe:	2e00      	cmp	r6, #0
 8007100:	d140      	bne.n	8007184 <_malloc_r+0xcc>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	4631      	mov	r1, r6
 8007106:	4638      	mov	r0, r7
 8007108:	eb04 0803 	add.w	r8, r4, r3
 800710c:	f000 f940 	bl	8007390 <_sbrk_r>
 8007110:	4580      	cmp	r8, r0
 8007112:	d13a      	bne.n	800718a <_malloc_r+0xd2>
 8007114:	6821      	ldr	r1, [r4, #0]
 8007116:	3503      	adds	r5, #3
 8007118:	1a6d      	subs	r5, r5, r1
 800711a:	f025 0503 	bic.w	r5, r5, #3
 800711e:	3508      	adds	r5, #8
 8007120:	2d0c      	cmp	r5, #12
 8007122:	bf38      	it	cc
 8007124:	250c      	movcc	r5, #12
 8007126:	4638      	mov	r0, r7
 8007128:	4629      	mov	r1, r5
 800712a:	f7ff ffa5 	bl	8007078 <sbrk_aligned>
 800712e:	3001      	adds	r0, #1
 8007130:	d02b      	beq.n	800718a <_malloc_r+0xd2>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	442b      	add	r3, r5
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	e00e      	b.n	8007158 <_malloc_r+0xa0>
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	1b52      	subs	r2, r2, r5
 800713e:	d41e      	bmi.n	800717e <_malloc_r+0xc6>
 8007140:	2a0b      	cmp	r2, #11
 8007142:	d916      	bls.n	8007172 <_malloc_r+0xba>
 8007144:	1961      	adds	r1, r4, r5
 8007146:	42a3      	cmp	r3, r4
 8007148:	6025      	str	r5, [r4, #0]
 800714a:	bf18      	it	ne
 800714c:	6059      	strne	r1, [r3, #4]
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	bf08      	it	eq
 8007152:	6031      	streq	r1, [r6, #0]
 8007154:	5162      	str	r2, [r4, r5]
 8007156:	604b      	str	r3, [r1, #4]
 8007158:	4638      	mov	r0, r7
 800715a:	f104 060b 	add.w	r6, r4, #11
 800715e:	f000 fd1b 	bl	8007b98 <__malloc_unlock>
 8007162:	f026 0607 	bic.w	r6, r6, #7
 8007166:	1d23      	adds	r3, r4, #4
 8007168:	1af2      	subs	r2, r6, r3
 800716a:	d0b6      	beq.n	80070da <_malloc_r+0x22>
 800716c:	1b9b      	subs	r3, r3, r6
 800716e:	50a3      	str	r3, [r4, r2]
 8007170:	e7b3      	b.n	80070da <_malloc_r+0x22>
 8007172:	6862      	ldr	r2, [r4, #4]
 8007174:	42a3      	cmp	r3, r4
 8007176:	bf0c      	ite	eq
 8007178:	6032      	streq	r2, [r6, #0]
 800717a:	605a      	strne	r2, [r3, #4]
 800717c:	e7ec      	b.n	8007158 <_malloc_r+0xa0>
 800717e:	4623      	mov	r3, r4
 8007180:	6864      	ldr	r4, [r4, #4]
 8007182:	e7b2      	b.n	80070ea <_malloc_r+0x32>
 8007184:	4634      	mov	r4, r6
 8007186:	6876      	ldr	r6, [r6, #4]
 8007188:	e7b9      	b.n	80070fe <_malloc_r+0x46>
 800718a:	230c      	movs	r3, #12
 800718c:	4638      	mov	r0, r7
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	f000 fd02 	bl	8007b98 <__malloc_unlock>
 8007194:	e7a1      	b.n	80070da <_malloc_r+0x22>
 8007196:	6025      	str	r5, [r4, #0]
 8007198:	e7de      	b.n	8007158 <_malloc_r+0xa0>
 800719a:	bf00      	nop
 800719c:	20001cdc 	.word	0x20001cdc

080071a0 <iprintf>:
 80071a0:	b40f      	push	{r0, r1, r2, r3}
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <iprintf+0x2c>)
 80071a4:	b513      	push	{r0, r1, r4, lr}
 80071a6:	681c      	ldr	r4, [r3, #0]
 80071a8:	b124      	cbz	r4, 80071b4 <iprintf+0x14>
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	b913      	cbnz	r3, 80071b4 <iprintf+0x14>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f7ff fe86 	bl	8006ec0 <__sinit>
 80071b4:	ab05      	add	r3, sp, #20
 80071b6:	4620      	mov	r0, r4
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	68a1      	ldr	r1, [r4, #8]
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	f001 f891 	bl	80082e4 <_vfiprintf_r>
 80071c2:	b002      	add	sp, #8
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	b004      	add	sp, #16
 80071ca:	4770      	bx	lr
 80071cc:	20000010 	.word	0x20000010

080071d0 <_puts_r>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	460e      	mov	r6, r1
 80071d4:	4605      	mov	r5, r0
 80071d6:	b118      	cbz	r0, 80071e0 <_puts_r+0x10>
 80071d8:	6983      	ldr	r3, [r0, #24]
 80071da:	b90b      	cbnz	r3, 80071e0 <_puts_r+0x10>
 80071dc:	f7ff fe70 	bl	8006ec0 <__sinit>
 80071e0:	69ab      	ldr	r3, [r5, #24]
 80071e2:	68ac      	ldr	r4, [r5, #8]
 80071e4:	b913      	cbnz	r3, 80071ec <_puts_r+0x1c>
 80071e6:	4628      	mov	r0, r5
 80071e8:	f7ff fe6a 	bl	8006ec0 <__sinit>
 80071ec:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <_puts_r+0xd0>)
 80071ee:	429c      	cmp	r4, r3
 80071f0:	d120      	bne.n	8007234 <_puts_r+0x64>
 80071f2:	686c      	ldr	r4, [r5, #4]
 80071f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f6:	07db      	lsls	r3, r3, #31
 80071f8:	d405      	bmi.n	8007206 <_puts_r+0x36>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	0598      	lsls	r0, r3, #22
 80071fe:	d402      	bmi.n	8007206 <_puts_r+0x36>
 8007200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007202:	f7ff ff20 	bl	8007046 <__retarget_lock_acquire_recursive>
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	0719      	lsls	r1, r3, #28
 800720a:	d51d      	bpl.n	8007248 <_puts_r+0x78>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	b1db      	cbz	r3, 8007248 <_puts_r+0x78>
 8007210:	3e01      	subs	r6, #1
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007218:	3b01      	subs	r3, #1
 800721a:	60a3      	str	r3, [r4, #8]
 800721c:	bb39      	cbnz	r1, 800726e <_puts_r+0x9e>
 800721e:	2b00      	cmp	r3, #0
 8007220:	da38      	bge.n	8007294 <_puts_r+0xc4>
 8007222:	4622      	mov	r2, r4
 8007224:	210a      	movs	r1, #10
 8007226:	4628      	mov	r0, r5
 8007228:	f000 fa60 	bl	80076ec <__swbuf_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d011      	beq.n	8007254 <_puts_r+0x84>
 8007230:	250a      	movs	r5, #10
 8007232:	e011      	b.n	8007258 <_puts_r+0x88>
 8007234:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <_puts_r+0xd4>)
 8007236:	429c      	cmp	r4, r3
 8007238:	d101      	bne.n	800723e <_puts_r+0x6e>
 800723a:	68ac      	ldr	r4, [r5, #8]
 800723c:	e7da      	b.n	80071f4 <_puts_r+0x24>
 800723e:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <_puts_r+0xd8>)
 8007240:	429c      	cmp	r4, r3
 8007242:	bf08      	it	eq
 8007244:	68ec      	ldreq	r4, [r5, #12]
 8007246:	e7d5      	b.n	80071f4 <_puts_r+0x24>
 8007248:	4621      	mov	r1, r4
 800724a:	4628      	mov	r0, r5
 800724c:	f000 fab2 	bl	80077b4 <__swsetup_r>
 8007250:	2800      	cmp	r0, #0
 8007252:	d0dd      	beq.n	8007210 <_puts_r+0x40>
 8007254:	f04f 35ff 	mov.w	r5, #4294967295
 8007258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800725a:	07da      	lsls	r2, r3, #31
 800725c:	d405      	bmi.n	800726a <_puts_r+0x9a>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	059b      	lsls	r3, r3, #22
 8007262:	d402      	bmi.n	800726a <_puts_r+0x9a>
 8007264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007266:	f7ff feef 	bl	8007048 <__retarget_lock_release_recursive>
 800726a:	4628      	mov	r0, r5
 800726c:	bd70      	pop	{r4, r5, r6, pc}
 800726e:	2b00      	cmp	r3, #0
 8007270:	da04      	bge.n	800727c <_puts_r+0xac>
 8007272:	69a2      	ldr	r2, [r4, #24]
 8007274:	429a      	cmp	r2, r3
 8007276:	dc06      	bgt.n	8007286 <_puts_r+0xb6>
 8007278:	290a      	cmp	r1, #10
 800727a:	d004      	beq.n	8007286 <_puts_r+0xb6>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	6022      	str	r2, [r4, #0]
 8007282:	7019      	strb	r1, [r3, #0]
 8007284:	e7c5      	b.n	8007212 <_puts_r+0x42>
 8007286:	4622      	mov	r2, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 fa2f 	bl	80076ec <__swbuf_r>
 800728e:	3001      	adds	r0, #1
 8007290:	d1bf      	bne.n	8007212 <_puts_r+0x42>
 8007292:	e7df      	b.n	8007254 <_puts_r+0x84>
 8007294:	250a      	movs	r5, #10
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	701d      	strb	r5, [r3, #0]
 800729e:	e7db      	b.n	8007258 <_puts_r+0x88>
 80072a0:	08009444 	.word	0x08009444
 80072a4:	08009464 	.word	0x08009464
 80072a8:	08009424 	.word	0x08009424

080072ac <puts>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <puts+0xc>)
 80072ae:	4601      	mov	r1, r0
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	f7ff bf8d 	b.w	80071d0 <_puts_r>
 80072b6:	bf00      	nop
 80072b8:	20000010 	.word	0x20000010

080072bc <cleanup_glue>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	6809      	ldr	r1, [r1, #0]
 80072c2:	4605      	mov	r5, r0
 80072c4:	b109      	cbz	r1, 80072ca <cleanup_glue+0xe>
 80072c6:	f7ff fff9 	bl	80072bc <cleanup_glue>
 80072ca:	4621      	mov	r1, r4
 80072cc:	4628      	mov	r0, r5
 80072ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d2:	f000 bc67 	b.w	8007ba4 <_free_r>
	...

080072d8 <_reclaim_reent>:
 80072d8:	4b2c      	ldr	r3, [pc, #176]	; (800738c <_reclaim_reent+0xb4>)
 80072da:	b570      	push	{r4, r5, r6, lr}
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4604      	mov	r4, r0
 80072e0:	4283      	cmp	r3, r0
 80072e2:	d051      	beq.n	8007388 <_reclaim_reent+0xb0>
 80072e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072e6:	b143      	cbz	r3, 80072fa <_reclaim_reent+0x22>
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d14a      	bne.n	8007384 <_reclaim_reent+0xac>
 80072ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f0:	6819      	ldr	r1, [r3, #0]
 80072f2:	b111      	cbz	r1, 80072fa <_reclaim_reent+0x22>
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 fc55 	bl	8007ba4 <_free_r>
 80072fa:	6961      	ldr	r1, [r4, #20]
 80072fc:	b111      	cbz	r1, 8007304 <_reclaim_reent+0x2c>
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 fc50 	bl	8007ba4 <_free_r>
 8007304:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007306:	b111      	cbz	r1, 800730e <_reclaim_reent+0x36>
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fc4b 	bl	8007ba4 <_free_r>
 800730e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007310:	b111      	cbz	r1, 8007318 <_reclaim_reent+0x40>
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fc46 	bl	8007ba4 <_free_r>
 8007318:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800731a:	b111      	cbz	r1, 8007322 <_reclaim_reent+0x4a>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fc41 	bl	8007ba4 <_free_r>
 8007322:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007324:	b111      	cbz	r1, 800732c <_reclaim_reent+0x54>
 8007326:	4620      	mov	r0, r4
 8007328:	f000 fc3c 	bl	8007ba4 <_free_r>
 800732c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800732e:	b111      	cbz	r1, 8007336 <_reclaim_reent+0x5e>
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fc37 	bl	8007ba4 <_free_r>
 8007336:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007338:	b111      	cbz	r1, 8007340 <_reclaim_reent+0x68>
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fc32 	bl	8007ba4 <_free_r>
 8007340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007342:	b111      	cbz	r1, 800734a <_reclaim_reent+0x72>
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fc2d 	bl	8007ba4 <_free_r>
 800734a:	69a3      	ldr	r3, [r4, #24]
 800734c:	b1e3      	cbz	r3, 8007388 <_reclaim_reent+0xb0>
 800734e:	4620      	mov	r0, r4
 8007350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007352:	4798      	blx	r3
 8007354:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007356:	b1b9      	cbz	r1, 8007388 <_reclaim_reent+0xb0>
 8007358:	4620      	mov	r0, r4
 800735a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800735e:	f7ff bfad 	b.w	80072bc <cleanup_glue>
 8007362:	5949      	ldr	r1, [r1, r5]
 8007364:	b941      	cbnz	r1, 8007378 <_reclaim_reent+0xa0>
 8007366:	3504      	adds	r5, #4
 8007368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800736a:	2d80      	cmp	r5, #128	; 0x80
 800736c:	68d9      	ldr	r1, [r3, #12]
 800736e:	d1f8      	bne.n	8007362 <_reclaim_reent+0x8a>
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fc17 	bl	8007ba4 <_free_r>
 8007376:	e7ba      	b.n	80072ee <_reclaim_reent+0x16>
 8007378:	680e      	ldr	r6, [r1, #0]
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fc12 	bl	8007ba4 <_free_r>
 8007380:	4631      	mov	r1, r6
 8007382:	e7ef      	b.n	8007364 <_reclaim_reent+0x8c>
 8007384:	2500      	movs	r5, #0
 8007386:	e7ef      	b.n	8007368 <_reclaim_reent+0x90>
 8007388:	bd70      	pop	{r4, r5, r6, pc}
 800738a:	bf00      	nop
 800738c:	20000010 	.word	0x20000010

08007390 <_sbrk_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	2300      	movs	r3, #0
 8007394:	4d05      	ldr	r5, [pc, #20]	; (80073ac <_sbrk_r+0x1c>)
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7f9 fb36 	bl	8000a0c <_sbrk>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_sbrk_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_sbrk_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20001ce4 	.word	0x20001ce4

080073b0 <siprintf>:
 80073b0:	b40e      	push	{r1, r2, r3}
 80073b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073b6:	b500      	push	{lr}
 80073b8:	b09c      	sub	sp, #112	; 0x70
 80073ba:	ab1d      	add	r3, sp, #116	; 0x74
 80073bc:	9002      	str	r0, [sp, #8]
 80073be:	9006      	str	r0, [sp, #24]
 80073c0:	9107      	str	r1, [sp, #28]
 80073c2:	9104      	str	r1, [sp, #16]
 80073c4:	4808      	ldr	r0, [pc, #32]	; (80073e8 <siprintf+0x38>)
 80073c6:	4909      	ldr	r1, [pc, #36]	; (80073ec <siprintf+0x3c>)
 80073c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073cc:	9105      	str	r1, [sp, #20]
 80073ce:	6800      	ldr	r0, [r0, #0]
 80073d0:	a902      	add	r1, sp, #8
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	f000 fc8a 	bl	8007cec <_svfiprintf_r>
 80073d8:	2200      	movs	r2, #0
 80073da:	9b02      	ldr	r3, [sp, #8]
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	b01c      	add	sp, #112	; 0x70
 80073e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073e4:	b003      	add	sp, #12
 80073e6:	4770      	bx	lr
 80073e8:	20000010 	.word	0x20000010
 80073ec:	ffff0208 	.word	0xffff0208

080073f0 <siscanf>:
 80073f0:	b40e      	push	{r1, r2, r3}
 80073f2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80073f6:	b530      	push	{r4, r5, lr}
 80073f8:	b09c      	sub	sp, #112	; 0x70
 80073fa:	ac1f      	add	r4, sp, #124	; 0x7c
 80073fc:	f854 5b04 	ldr.w	r5, [r4], #4
 8007400:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007404:	9002      	str	r0, [sp, #8]
 8007406:	9006      	str	r0, [sp, #24]
 8007408:	f7f8 feba 	bl	8000180 <strlen>
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <siscanf+0x4c>)
 800740e:	9003      	str	r0, [sp, #12]
 8007410:	930b      	str	r3, [sp, #44]	; 0x2c
 8007412:	2300      	movs	r3, #0
 8007414:	930f      	str	r3, [sp, #60]	; 0x3c
 8007416:	9314      	str	r3, [sp, #80]	; 0x50
 8007418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800741c:	9007      	str	r0, [sp, #28]
 800741e:	4808      	ldr	r0, [pc, #32]	; (8007440 <siscanf+0x50>)
 8007420:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007424:	462a      	mov	r2, r5
 8007426:	4623      	mov	r3, r4
 8007428:	a902      	add	r1, sp, #8
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	9401      	str	r4, [sp, #4]
 800742e:	f000 fdb7 	bl	8007fa0 <__ssvfiscanf_r>
 8007432:	b01c      	add	sp, #112	; 0x70
 8007434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007438:	b003      	add	sp, #12
 800743a:	4770      	bx	lr
 800743c:	08007467 	.word	0x08007467
 8007440:	20000010 	.word	0x20000010

08007444 <__sread>:
 8007444:	b510      	push	{r4, lr}
 8007446:	460c      	mov	r4, r1
 8007448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744c:	f001 fb62 	bl	8008b14 <_read_r>
 8007450:	2800      	cmp	r0, #0
 8007452:	bfab      	itete	ge
 8007454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007456:	89a3      	ldrhlt	r3, [r4, #12]
 8007458:	181b      	addge	r3, r3, r0
 800745a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800745e:	bfac      	ite	ge
 8007460:	6563      	strge	r3, [r4, #84]	; 0x54
 8007462:	81a3      	strhlt	r3, [r4, #12]
 8007464:	bd10      	pop	{r4, pc}

08007466 <__seofread>:
 8007466:	2000      	movs	r0, #0
 8007468:	4770      	bx	lr

0800746a <__swrite>:
 800746a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800746e:	461f      	mov	r7, r3
 8007470:	898b      	ldrh	r3, [r1, #12]
 8007472:	4605      	mov	r5, r0
 8007474:	05db      	lsls	r3, r3, #23
 8007476:	460c      	mov	r4, r1
 8007478:	4616      	mov	r6, r2
 800747a:	d505      	bpl.n	8007488 <__swrite+0x1e>
 800747c:	2302      	movs	r3, #2
 800747e:	2200      	movs	r2, #0
 8007480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007484:	f000 fb02 	bl	8007a8c <_lseek_r>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	4632      	mov	r2, r6
 800748c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	4628      	mov	r0, r5
 8007494:	463b      	mov	r3, r7
 8007496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800749a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	f000 b977 	b.w	8007790 <_write_r>

080074a2 <__sseek>:
 80074a2:	b510      	push	{r4, lr}
 80074a4:	460c      	mov	r4, r1
 80074a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074aa:	f000 faef 	bl	8007a8c <_lseek_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	bf15      	itete	ne
 80074b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074be:	81a3      	strheq	r3, [r4, #12]
 80074c0:	bf18      	it	ne
 80074c2:	81a3      	strhne	r3, [r4, #12]
 80074c4:	bd10      	pop	{r4, pc}

080074c6 <__sclose>:
 80074c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ca:	f000 b9ff 	b.w	80078cc <_close_r>

080074ce <strchr>:
 80074ce:	4603      	mov	r3, r0
 80074d0:	b2c9      	uxtb	r1, r1
 80074d2:	4618      	mov	r0, r3
 80074d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d8:	b112      	cbz	r2, 80074e0 <strchr+0x12>
 80074da:	428a      	cmp	r2, r1
 80074dc:	d1f9      	bne.n	80074d2 <strchr+0x4>
 80074de:	4770      	bx	lr
 80074e0:	2900      	cmp	r1, #0
 80074e2:	bf18      	it	ne
 80074e4:	2000      	movne	r0, #0
 80074e6:	4770      	bx	lr

080074e8 <strcpy>:
 80074e8:	4603      	mov	r3, r0
 80074ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ee:	f803 2b01 	strb.w	r2, [r3], #1
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d1f9      	bne.n	80074ea <strcpy+0x2>
 80074f6:	4770      	bx	lr

080074f8 <strstr>:
 80074f8:	780a      	ldrb	r2, [r1, #0]
 80074fa:	b570      	push	{r4, r5, r6, lr}
 80074fc:	b96a      	cbnz	r2, 800751a <strstr+0x22>
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	429a      	cmp	r2, r3
 8007502:	d109      	bne.n	8007518 <strstr+0x20>
 8007504:	460c      	mov	r4, r1
 8007506:	4605      	mov	r5, r0
 8007508:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f6      	beq.n	80074fe <strstr+0x6>
 8007510:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007514:	429e      	cmp	r6, r3
 8007516:	d0f7      	beq.n	8007508 <strstr+0x10>
 8007518:	3001      	adds	r0, #1
 800751a:	7803      	ldrb	r3, [r0, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1ef      	bne.n	8007500 <strstr+0x8>
 8007520:	4618      	mov	r0, r3
 8007522:	e7ec      	b.n	80074fe <strstr+0x6>

08007524 <strtok>:
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <strtok+0x5c>)
 8007526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752a:	681f      	ldr	r7, [r3, #0]
 800752c:	4605      	mov	r5, r0
 800752e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007530:	460e      	mov	r6, r1
 8007532:	b9ec      	cbnz	r4, 8007570 <strtok+0x4c>
 8007534:	2050      	movs	r0, #80	; 0x50
 8007536:	f000 fb21 	bl	8007b7c <malloc>
 800753a:	4602      	mov	r2, r0
 800753c:	65b8      	str	r0, [r7, #88]	; 0x58
 800753e:	b920      	cbnz	r0, 800754a <strtok+0x26>
 8007540:	2157      	movs	r1, #87	; 0x57
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <strtok+0x60>)
 8007544:	4810      	ldr	r0, [pc, #64]	; (8007588 <strtok+0x64>)
 8007546:	f000 f9a3 	bl	8007890 <__assert_func>
 800754a:	e9c0 4400 	strd	r4, r4, [r0]
 800754e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007552:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007556:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800755a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800755e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007562:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007566:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800756a:	6184      	str	r4, [r0, #24]
 800756c:	7704      	strb	r4, [r0, #28]
 800756e:	6244      	str	r4, [r0, #36]	; 0x24
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007576:	2301      	movs	r3, #1
 8007578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757c:	f000 b806 	b.w	800758c <__strtok_r>
 8007580:	20000010 	.word	0x20000010
 8007584:	08009488 	.word	0x08009488
 8007588:	0800949f 	.word	0x0800949f

0800758c <__strtok_r>:
 800758c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758e:	b908      	cbnz	r0, 8007594 <__strtok_r+0x8>
 8007590:	6810      	ldr	r0, [r2, #0]
 8007592:	b188      	cbz	r0, 80075b8 <__strtok_r+0x2c>
 8007594:	4604      	mov	r4, r0
 8007596:	460f      	mov	r7, r1
 8007598:	4620      	mov	r0, r4
 800759a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800759e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80075a2:	b91e      	cbnz	r6, 80075ac <__strtok_r+0x20>
 80075a4:	b965      	cbnz	r5, 80075c0 <__strtok_r+0x34>
 80075a6:	4628      	mov	r0, r5
 80075a8:	6015      	str	r5, [r2, #0]
 80075aa:	e005      	b.n	80075b8 <__strtok_r+0x2c>
 80075ac:	42b5      	cmp	r5, r6
 80075ae:	d1f6      	bne.n	800759e <__strtok_r+0x12>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <__strtok_r+0xa>
 80075b4:	6014      	str	r4, [r2, #0]
 80075b6:	7003      	strb	r3, [r0, #0]
 80075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ba:	461c      	mov	r4, r3
 80075bc:	e00c      	b.n	80075d8 <__strtok_r+0x4c>
 80075be:	b915      	cbnz	r5, 80075c6 <__strtok_r+0x3a>
 80075c0:	460e      	mov	r6, r1
 80075c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80075ca:	42ab      	cmp	r3, r5
 80075cc:	d1f7      	bne.n	80075be <__strtok_r+0x32>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0f3      	beq.n	80075ba <__strtok_r+0x2e>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80075d8:	6014      	str	r4, [r2, #0]
 80075da:	e7ed      	b.n	80075b8 <__strtok_r+0x2c>

080075dc <_strtol_l.constprop.0>:
 80075dc:	2b01      	cmp	r3, #1
 80075de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e2:	4680      	mov	r8, r0
 80075e4:	d001      	beq.n	80075ea <_strtol_l.constprop.0+0xe>
 80075e6:	2b24      	cmp	r3, #36	; 0x24
 80075e8:	d906      	bls.n	80075f8 <_strtol_l.constprop.0+0x1c>
 80075ea:	f7ff fc0b 	bl	8006e04 <__errno>
 80075ee:	2316      	movs	r3, #22
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	2000      	movs	r0, #0
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f8:	460d      	mov	r5, r1
 80075fa:	4f35      	ldr	r7, [pc, #212]	; (80076d0 <_strtol_l.constprop.0+0xf4>)
 80075fc:	4628      	mov	r0, r5
 80075fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007602:	5de6      	ldrb	r6, [r4, r7]
 8007604:	f016 0608 	ands.w	r6, r6, #8
 8007608:	d1f8      	bne.n	80075fc <_strtol_l.constprop.0+0x20>
 800760a:	2c2d      	cmp	r4, #45	; 0x2d
 800760c:	d12f      	bne.n	800766e <_strtol_l.constprop.0+0x92>
 800760e:	2601      	movs	r6, #1
 8007610:	782c      	ldrb	r4, [r5, #0]
 8007612:	1c85      	adds	r5, r0, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d057      	beq.n	80076c8 <_strtol_l.constprop.0+0xec>
 8007618:	2b10      	cmp	r3, #16
 800761a:	d109      	bne.n	8007630 <_strtol_l.constprop.0+0x54>
 800761c:	2c30      	cmp	r4, #48	; 0x30
 800761e:	d107      	bne.n	8007630 <_strtol_l.constprop.0+0x54>
 8007620:	7828      	ldrb	r0, [r5, #0]
 8007622:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007626:	2858      	cmp	r0, #88	; 0x58
 8007628:	d149      	bne.n	80076be <_strtol_l.constprop.0+0xe2>
 800762a:	2310      	movs	r3, #16
 800762c:	786c      	ldrb	r4, [r5, #1]
 800762e:	3502      	adds	r5, #2
 8007630:	2700      	movs	r7, #0
 8007632:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007636:	f10e 3eff 	add.w	lr, lr, #4294967295
 800763a:	fbbe f9f3 	udiv	r9, lr, r3
 800763e:	4638      	mov	r0, r7
 8007640:	fb03 ea19 	mls	sl, r3, r9, lr
 8007644:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007648:	f1bc 0f09 	cmp.w	ip, #9
 800764c:	d814      	bhi.n	8007678 <_strtol_l.constprop.0+0x9c>
 800764e:	4664      	mov	r4, ip
 8007650:	42a3      	cmp	r3, r4
 8007652:	dd22      	ble.n	800769a <_strtol_l.constprop.0+0xbe>
 8007654:	2f00      	cmp	r7, #0
 8007656:	db1d      	blt.n	8007694 <_strtol_l.constprop.0+0xb8>
 8007658:	4581      	cmp	r9, r0
 800765a:	d31b      	bcc.n	8007694 <_strtol_l.constprop.0+0xb8>
 800765c:	d101      	bne.n	8007662 <_strtol_l.constprop.0+0x86>
 800765e:	45a2      	cmp	sl, r4
 8007660:	db18      	blt.n	8007694 <_strtol_l.constprop.0+0xb8>
 8007662:	2701      	movs	r7, #1
 8007664:	fb00 4003 	mla	r0, r0, r3, r4
 8007668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800766c:	e7ea      	b.n	8007644 <_strtol_l.constprop.0+0x68>
 800766e:	2c2b      	cmp	r4, #43	; 0x2b
 8007670:	bf04      	itt	eq
 8007672:	782c      	ldrbeq	r4, [r5, #0]
 8007674:	1c85      	addeq	r5, r0, #2
 8007676:	e7cd      	b.n	8007614 <_strtol_l.constprop.0+0x38>
 8007678:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800767c:	f1bc 0f19 	cmp.w	ip, #25
 8007680:	d801      	bhi.n	8007686 <_strtol_l.constprop.0+0xaa>
 8007682:	3c37      	subs	r4, #55	; 0x37
 8007684:	e7e4      	b.n	8007650 <_strtol_l.constprop.0+0x74>
 8007686:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800768a:	f1bc 0f19 	cmp.w	ip, #25
 800768e:	d804      	bhi.n	800769a <_strtol_l.constprop.0+0xbe>
 8007690:	3c57      	subs	r4, #87	; 0x57
 8007692:	e7dd      	b.n	8007650 <_strtol_l.constprop.0+0x74>
 8007694:	f04f 37ff 	mov.w	r7, #4294967295
 8007698:	e7e6      	b.n	8007668 <_strtol_l.constprop.0+0x8c>
 800769a:	2f00      	cmp	r7, #0
 800769c:	da07      	bge.n	80076ae <_strtol_l.constprop.0+0xd2>
 800769e:	2322      	movs	r3, #34	; 0x22
 80076a0:	4670      	mov	r0, lr
 80076a2:	f8c8 3000 	str.w	r3, [r8]
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	d0a4      	beq.n	80075f4 <_strtol_l.constprop.0+0x18>
 80076aa:	1e69      	subs	r1, r5, #1
 80076ac:	e005      	b.n	80076ba <_strtol_l.constprop.0+0xde>
 80076ae:	b106      	cbz	r6, 80076b2 <_strtol_l.constprop.0+0xd6>
 80076b0:	4240      	negs	r0, r0
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	d09e      	beq.n	80075f4 <_strtol_l.constprop.0+0x18>
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d1f7      	bne.n	80076aa <_strtol_l.constprop.0+0xce>
 80076ba:	6011      	str	r1, [r2, #0]
 80076bc:	e79a      	b.n	80075f4 <_strtol_l.constprop.0+0x18>
 80076be:	2430      	movs	r4, #48	; 0x30
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1b5      	bne.n	8007630 <_strtol_l.constprop.0+0x54>
 80076c4:	2308      	movs	r3, #8
 80076c6:	e7b3      	b.n	8007630 <_strtol_l.constprop.0+0x54>
 80076c8:	2c30      	cmp	r4, #48	; 0x30
 80076ca:	d0a9      	beq.n	8007620 <_strtol_l.constprop.0+0x44>
 80076cc:	230a      	movs	r3, #10
 80076ce:	e7af      	b.n	8007630 <_strtol_l.constprop.0+0x54>
 80076d0:	08009539 	.word	0x08009539

080076d4 <_strtol_r>:
 80076d4:	f7ff bf82 	b.w	80075dc <_strtol_l.constprop.0>

080076d8 <strtol>:
 80076d8:	4613      	mov	r3, r2
 80076da:	460a      	mov	r2, r1
 80076dc:	4601      	mov	r1, r0
 80076de:	4802      	ldr	r0, [pc, #8]	; (80076e8 <strtol+0x10>)
 80076e0:	6800      	ldr	r0, [r0, #0]
 80076e2:	f7ff bf7b 	b.w	80075dc <_strtol_l.constprop.0>
 80076e6:	bf00      	nop
 80076e8:	20000010 	.word	0x20000010

080076ec <__swbuf_r>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	460e      	mov	r6, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	4605      	mov	r5, r0
 80076f4:	b118      	cbz	r0, 80076fe <__swbuf_r+0x12>
 80076f6:	6983      	ldr	r3, [r0, #24]
 80076f8:	b90b      	cbnz	r3, 80076fe <__swbuf_r+0x12>
 80076fa:	f7ff fbe1 	bl	8006ec0 <__sinit>
 80076fe:	4b21      	ldr	r3, [pc, #132]	; (8007784 <__swbuf_r+0x98>)
 8007700:	429c      	cmp	r4, r3
 8007702:	d12b      	bne.n	800775c <__swbuf_r+0x70>
 8007704:	686c      	ldr	r4, [r5, #4]
 8007706:	69a3      	ldr	r3, [r4, #24]
 8007708:	60a3      	str	r3, [r4, #8]
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	071a      	lsls	r2, r3, #28
 800770e:	d52f      	bpl.n	8007770 <__swbuf_r+0x84>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	b36b      	cbz	r3, 8007770 <__swbuf_r+0x84>
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	b2f6      	uxtb	r6, r6
 800771a:	1ac0      	subs	r0, r0, r3
 800771c:	6963      	ldr	r3, [r4, #20]
 800771e:	4637      	mov	r7, r6
 8007720:	4283      	cmp	r3, r0
 8007722:	dc04      	bgt.n	800772e <__swbuf_r+0x42>
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f000 f962 	bl	80079f0 <_fflush_r>
 800772c:	bb30      	cbnz	r0, 800777c <__swbuf_r+0x90>
 800772e:	68a3      	ldr	r3, [r4, #8]
 8007730:	3001      	adds	r0, #1
 8007732:	3b01      	subs	r3, #1
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	701e      	strb	r6, [r3, #0]
 800773e:	6963      	ldr	r3, [r4, #20]
 8007740:	4283      	cmp	r3, r0
 8007742:	d004      	beq.n	800774e <__swbuf_r+0x62>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	07db      	lsls	r3, r3, #31
 8007748:	d506      	bpl.n	8007758 <__swbuf_r+0x6c>
 800774a:	2e0a      	cmp	r6, #10
 800774c:	d104      	bne.n	8007758 <__swbuf_r+0x6c>
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f94d 	bl	80079f0 <_fflush_r>
 8007756:	b988      	cbnz	r0, 800777c <__swbuf_r+0x90>
 8007758:	4638      	mov	r0, r7
 800775a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800775c:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <__swbuf_r+0x9c>)
 800775e:	429c      	cmp	r4, r3
 8007760:	d101      	bne.n	8007766 <__swbuf_r+0x7a>
 8007762:	68ac      	ldr	r4, [r5, #8]
 8007764:	e7cf      	b.n	8007706 <__swbuf_r+0x1a>
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <__swbuf_r+0xa0>)
 8007768:	429c      	cmp	r4, r3
 800776a:	bf08      	it	eq
 800776c:	68ec      	ldreq	r4, [r5, #12]
 800776e:	e7ca      	b.n	8007706 <__swbuf_r+0x1a>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f81e 	bl	80077b4 <__swsetup_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	d0cb      	beq.n	8007714 <__swbuf_r+0x28>
 800777c:	f04f 37ff 	mov.w	r7, #4294967295
 8007780:	e7ea      	b.n	8007758 <__swbuf_r+0x6c>
 8007782:	bf00      	nop
 8007784:	08009444 	.word	0x08009444
 8007788:	08009464 	.word	0x08009464
 800778c:	08009424 	.word	0x08009424

08007790 <_write_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4604      	mov	r4, r0
 8007794:	4608      	mov	r0, r1
 8007796:	4611      	mov	r1, r2
 8007798:	2200      	movs	r2, #0
 800779a:	4d05      	ldr	r5, [pc, #20]	; (80077b0 <_write_r+0x20>)
 800779c:	602a      	str	r2, [r5, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	f7f8 ff5c 	bl	800065c <_write>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_write_r+0x1e>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_write_r+0x1e>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	20001ce4 	.word	0x20001ce4

080077b4 <__swsetup_r>:
 80077b4:	4b32      	ldr	r3, [pc, #200]	; (8007880 <__swsetup_r+0xcc>)
 80077b6:	b570      	push	{r4, r5, r6, lr}
 80077b8:	681d      	ldr	r5, [r3, #0]
 80077ba:	4606      	mov	r6, r0
 80077bc:	460c      	mov	r4, r1
 80077be:	b125      	cbz	r5, 80077ca <__swsetup_r+0x16>
 80077c0:	69ab      	ldr	r3, [r5, #24]
 80077c2:	b913      	cbnz	r3, 80077ca <__swsetup_r+0x16>
 80077c4:	4628      	mov	r0, r5
 80077c6:	f7ff fb7b 	bl	8006ec0 <__sinit>
 80077ca:	4b2e      	ldr	r3, [pc, #184]	; (8007884 <__swsetup_r+0xd0>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d10f      	bne.n	80077f0 <__swsetup_r+0x3c>
 80077d0:	686c      	ldr	r4, [r5, #4]
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077d8:	0719      	lsls	r1, r3, #28
 80077da:	d42c      	bmi.n	8007836 <__swsetup_r+0x82>
 80077dc:	06dd      	lsls	r5, r3, #27
 80077de:	d411      	bmi.n	8007804 <__swsetup_r+0x50>
 80077e0:	2309      	movs	r3, #9
 80077e2:	6033      	str	r3, [r6, #0]
 80077e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	e03e      	b.n	800786e <__swsetup_r+0xba>
 80077f0:	4b25      	ldr	r3, [pc, #148]	; (8007888 <__swsetup_r+0xd4>)
 80077f2:	429c      	cmp	r4, r3
 80077f4:	d101      	bne.n	80077fa <__swsetup_r+0x46>
 80077f6:	68ac      	ldr	r4, [r5, #8]
 80077f8:	e7eb      	b.n	80077d2 <__swsetup_r+0x1e>
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <__swsetup_r+0xd8>)
 80077fc:	429c      	cmp	r4, r3
 80077fe:	bf08      	it	eq
 8007800:	68ec      	ldreq	r4, [r5, #12]
 8007802:	e7e6      	b.n	80077d2 <__swsetup_r+0x1e>
 8007804:	0758      	lsls	r0, r3, #29
 8007806:	d512      	bpl.n	800782e <__swsetup_r+0x7a>
 8007808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800780a:	b141      	cbz	r1, 800781e <__swsetup_r+0x6a>
 800780c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007810:	4299      	cmp	r1, r3
 8007812:	d002      	beq.n	800781a <__swsetup_r+0x66>
 8007814:	4630      	mov	r0, r6
 8007816:	f000 f9c5 	bl	8007ba4 <_free_r>
 800781a:	2300      	movs	r3, #0
 800781c:	6363      	str	r3, [r4, #52]	; 0x34
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	2300      	movs	r3, #0
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	f043 0308 	orr.w	r3, r3, #8
 8007834:	81a3      	strh	r3, [r4, #12]
 8007836:	6923      	ldr	r3, [r4, #16]
 8007838:	b94b      	cbnz	r3, 800784e <__swsetup_r+0x9a>
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	d003      	beq.n	800784e <__swsetup_r+0x9a>
 8007846:	4621      	mov	r1, r4
 8007848:	4630      	mov	r0, r6
 800784a:	f000 f957 	bl	8007afc <__smakebuf_r>
 800784e:	89a0      	ldrh	r0, [r4, #12]
 8007850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007854:	f010 0301 	ands.w	r3, r0, #1
 8007858:	d00a      	beq.n	8007870 <__swsetup_r+0xbc>
 800785a:	2300      	movs	r3, #0
 800785c:	60a3      	str	r3, [r4, #8]
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	425b      	negs	r3, r3
 8007862:	61a3      	str	r3, [r4, #24]
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	b943      	cbnz	r3, 800787a <__swsetup_r+0xc6>
 8007868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800786c:	d1ba      	bne.n	80077e4 <__swsetup_r+0x30>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	0781      	lsls	r1, r0, #30
 8007872:	bf58      	it	pl
 8007874:	6963      	ldrpl	r3, [r4, #20]
 8007876:	60a3      	str	r3, [r4, #8]
 8007878:	e7f4      	b.n	8007864 <__swsetup_r+0xb0>
 800787a:	2000      	movs	r0, #0
 800787c:	e7f7      	b.n	800786e <__swsetup_r+0xba>
 800787e:	bf00      	nop
 8007880:	20000010 	.word	0x20000010
 8007884:	08009444 	.word	0x08009444
 8007888:	08009464 	.word	0x08009464
 800788c:	08009424 	.word	0x08009424

08007890 <__assert_func>:
 8007890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007892:	4614      	mov	r4, r2
 8007894:	461a      	mov	r2, r3
 8007896:	4b09      	ldr	r3, [pc, #36]	; (80078bc <__assert_func+0x2c>)
 8007898:	4605      	mov	r5, r0
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68d8      	ldr	r0, [r3, #12]
 800789e:	b14c      	cbz	r4, 80078b4 <__assert_func+0x24>
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <__assert_func+0x30>)
 80078a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078a6:	9100      	str	r1, [sp, #0]
 80078a8:	462b      	mov	r3, r5
 80078aa:	4906      	ldr	r1, [pc, #24]	; (80078c4 <__assert_func+0x34>)
 80078ac:	f000 f8dc 	bl	8007a68 <fiprintf>
 80078b0:	f001 fa26 	bl	8008d00 <abort>
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <__assert_func+0x38>)
 80078b6:	461c      	mov	r4, r3
 80078b8:	e7f3      	b.n	80078a2 <__assert_func+0x12>
 80078ba:	bf00      	nop
 80078bc:	20000010 	.word	0x20000010
 80078c0:	080094fc 	.word	0x080094fc
 80078c4:	08009509 	.word	0x08009509
 80078c8:	08009537 	.word	0x08009537

080078cc <_close_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	2300      	movs	r3, #0
 80078d0:	4d05      	ldr	r5, [pc, #20]	; (80078e8 <_close_r+0x1c>)
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	602b      	str	r3, [r5, #0]
 80078d8:	f7f9 f868 	bl	80009ac <_close>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_close_r+0x1a>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_close_r+0x1a>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20001ce4 	.word	0x20001ce4

080078ec <__sflush_r>:
 80078ec:	898a      	ldrh	r2, [r1, #12]
 80078ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f0:	4605      	mov	r5, r0
 80078f2:	0710      	lsls	r0, r2, #28
 80078f4:	460c      	mov	r4, r1
 80078f6:	d457      	bmi.n	80079a8 <__sflush_r+0xbc>
 80078f8:	684b      	ldr	r3, [r1, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dc04      	bgt.n	8007908 <__sflush_r+0x1c>
 80078fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	dc01      	bgt.n	8007908 <__sflush_r+0x1c>
 8007904:	2000      	movs	r0, #0
 8007906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800790a:	2e00      	cmp	r6, #0
 800790c:	d0fa      	beq.n	8007904 <__sflush_r+0x18>
 800790e:	2300      	movs	r3, #0
 8007910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007914:	682f      	ldr	r7, [r5, #0]
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	d032      	beq.n	8007980 <__sflush_r+0x94>
 800791a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	075a      	lsls	r2, r3, #29
 8007920:	d505      	bpl.n	800792e <__sflush_r+0x42>
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	1ac0      	subs	r0, r0, r3
 8007926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007928:	b10b      	cbz	r3, 800792e <__sflush_r+0x42>
 800792a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800792c:	1ac0      	subs	r0, r0, r3
 800792e:	2300      	movs	r3, #0
 8007930:	4602      	mov	r2, r0
 8007932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007934:	4628      	mov	r0, r5
 8007936:	6a21      	ldr	r1, [r4, #32]
 8007938:	47b0      	blx	r6
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	d106      	bne.n	800794e <__sflush_r+0x62>
 8007940:	6829      	ldr	r1, [r5, #0]
 8007942:	291d      	cmp	r1, #29
 8007944:	d82c      	bhi.n	80079a0 <__sflush_r+0xb4>
 8007946:	4a29      	ldr	r2, [pc, #164]	; (80079ec <__sflush_r+0x100>)
 8007948:	40ca      	lsrs	r2, r1
 800794a:	07d6      	lsls	r6, r2, #31
 800794c:	d528      	bpl.n	80079a0 <__sflush_r+0xb4>
 800794e:	2200      	movs	r2, #0
 8007950:	6062      	str	r2, [r4, #4]
 8007952:	6922      	ldr	r2, [r4, #16]
 8007954:	04d9      	lsls	r1, r3, #19
 8007956:	6022      	str	r2, [r4, #0]
 8007958:	d504      	bpl.n	8007964 <__sflush_r+0x78>
 800795a:	1c42      	adds	r2, r0, #1
 800795c:	d101      	bne.n	8007962 <__sflush_r+0x76>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	b903      	cbnz	r3, 8007964 <__sflush_r+0x78>
 8007962:	6560      	str	r0, [r4, #84]	; 0x54
 8007964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007966:	602f      	str	r7, [r5, #0]
 8007968:	2900      	cmp	r1, #0
 800796a:	d0cb      	beq.n	8007904 <__sflush_r+0x18>
 800796c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007970:	4299      	cmp	r1, r3
 8007972:	d002      	beq.n	800797a <__sflush_r+0x8e>
 8007974:	4628      	mov	r0, r5
 8007976:	f000 f915 	bl	8007ba4 <_free_r>
 800797a:	2000      	movs	r0, #0
 800797c:	6360      	str	r0, [r4, #52]	; 0x34
 800797e:	e7c2      	b.n	8007906 <__sflush_r+0x1a>
 8007980:	6a21      	ldr	r1, [r4, #32]
 8007982:	2301      	movs	r3, #1
 8007984:	4628      	mov	r0, r5
 8007986:	47b0      	blx	r6
 8007988:	1c41      	adds	r1, r0, #1
 800798a:	d1c7      	bne.n	800791c <__sflush_r+0x30>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0c4      	beq.n	800791c <__sflush_r+0x30>
 8007992:	2b1d      	cmp	r3, #29
 8007994:	d001      	beq.n	800799a <__sflush_r+0xae>
 8007996:	2b16      	cmp	r3, #22
 8007998:	d101      	bne.n	800799e <__sflush_r+0xb2>
 800799a:	602f      	str	r7, [r5, #0]
 800799c:	e7b2      	b.n	8007904 <__sflush_r+0x18>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	e7ae      	b.n	8007906 <__sflush_r+0x1a>
 80079a8:	690f      	ldr	r7, [r1, #16]
 80079aa:	2f00      	cmp	r7, #0
 80079ac:	d0aa      	beq.n	8007904 <__sflush_r+0x18>
 80079ae:	0793      	lsls	r3, r2, #30
 80079b0:	bf18      	it	ne
 80079b2:	2300      	movne	r3, #0
 80079b4:	680e      	ldr	r6, [r1, #0]
 80079b6:	bf08      	it	eq
 80079b8:	694b      	ldreq	r3, [r1, #20]
 80079ba:	1bf6      	subs	r6, r6, r7
 80079bc:	600f      	str	r7, [r1, #0]
 80079be:	608b      	str	r3, [r1, #8]
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	dd9f      	ble.n	8007904 <__sflush_r+0x18>
 80079c4:	4633      	mov	r3, r6
 80079c6:	463a      	mov	r2, r7
 80079c8:	4628      	mov	r0, r5
 80079ca:	6a21      	ldr	r1, [r4, #32]
 80079cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80079d0:	47e0      	blx	ip
 80079d2:	2800      	cmp	r0, #0
 80079d4:	dc06      	bgt.n	80079e4 <__sflush_r+0xf8>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295
 80079dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	e790      	b.n	8007906 <__sflush_r+0x1a>
 80079e4:	4407      	add	r7, r0
 80079e6:	1a36      	subs	r6, r6, r0
 80079e8:	e7ea      	b.n	80079c0 <__sflush_r+0xd4>
 80079ea:	bf00      	nop
 80079ec:	20400001 	.word	0x20400001

080079f0 <_fflush_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	690b      	ldr	r3, [r1, #16]
 80079f4:	4605      	mov	r5, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b913      	cbnz	r3, 8007a00 <_fflush_r+0x10>
 80079fa:	2500      	movs	r5, #0
 80079fc:	4628      	mov	r0, r5
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	b118      	cbz	r0, 8007a0a <_fflush_r+0x1a>
 8007a02:	6983      	ldr	r3, [r0, #24]
 8007a04:	b90b      	cbnz	r3, 8007a0a <_fflush_r+0x1a>
 8007a06:	f7ff fa5b 	bl	8006ec0 <__sinit>
 8007a0a:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <_fflush_r+0x6c>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	d11b      	bne.n	8007a48 <_fflush_r+0x58>
 8007a10:	686c      	ldr	r4, [r5, #4]
 8007a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0ef      	beq.n	80079fa <_fflush_r+0xa>
 8007a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a1c:	07d0      	lsls	r0, r2, #31
 8007a1e:	d404      	bmi.n	8007a2a <_fflush_r+0x3a>
 8007a20:	0599      	lsls	r1, r3, #22
 8007a22:	d402      	bmi.n	8007a2a <_fflush_r+0x3a>
 8007a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a26:	f7ff fb0e 	bl	8007046 <__retarget_lock_acquire_recursive>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f7ff ff5d 	bl	80078ec <__sflush_r>
 8007a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a34:	4605      	mov	r5, r0
 8007a36:	07da      	lsls	r2, r3, #31
 8007a38:	d4e0      	bmi.n	80079fc <_fflush_r+0xc>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	059b      	lsls	r3, r3, #22
 8007a3e:	d4dd      	bmi.n	80079fc <_fflush_r+0xc>
 8007a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a42:	f7ff fb01 	bl	8007048 <__retarget_lock_release_recursive>
 8007a46:	e7d9      	b.n	80079fc <_fflush_r+0xc>
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <_fflush_r+0x70>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d101      	bne.n	8007a52 <_fflush_r+0x62>
 8007a4e:	68ac      	ldr	r4, [r5, #8]
 8007a50:	e7df      	b.n	8007a12 <_fflush_r+0x22>
 8007a52:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <_fflush_r+0x74>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	bf08      	it	eq
 8007a58:	68ec      	ldreq	r4, [r5, #12]
 8007a5a:	e7da      	b.n	8007a12 <_fflush_r+0x22>
 8007a5c:	08009444 	.word	0x08009444
 8007a60:	08009464 	.word	0x08009464
 8007a64:	08009424 	.word	0x08009424

08007a68 <fiprintf>:
 8007a68:	b40e      	push	{r1, r2, r3}
 8007a6a:	b503      	push	{r0, r1, lr}
 8007a6c:	4601      	mov	r1, r0
 8007a6e:	ab03      	add	r3, sp, #12
 8007a70:	4805      	ldr	r0, [pc, #20]	; (8007a88 <fiprintf+0x20>)
 8007a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a76:	6800      	ldr	r0, [r0, #0]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	f000 fc33 	bl	80082e4 <_vfiprintf_r>
 8007a7e:	b002      	add	sp, #8
 8007a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a84:	b003      	add	sp, #12
 8007a86:	4770      	bx	lr
 8007a88:	20000010 	.word	0x20000010

08007a8c <_lseek_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	4611      	mov	r1, r2
 8007a94:	2200      	movs	r2, #0
 8007a96:	4d05      	ldr	r5, [pc, #20]	; (8007aac <_lseek_r+0x20>)
 8007a98:	602a      	str	r2, [r5, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f7f8 ffaa 	bl	80009f4 <_lseek>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_lseek_r+0x1e>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_lseek_r+0x1e>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20001ce4 	.word	0x20001ce4

08007ab0 <__swhatbuf_r>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	460e      	mov	r6, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	4614      	mov	r4, r2
 8007aba:	2900      	cmp	r1, #0
 8007abc:	461d      	mov	r5, r3
 8007abe:	b096      	sub	sp, #88	; 0x58
 8007ac0:	da08      	bge.n	8007ad4 <__swhatbuf_r+0x24>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ac8:	602a      	str	r2, [r5, #0]
 8007aca:	061a      	lsls	r2, r3, #24
 8007acc:	d410      	bmi.n	8007af0 <__swhatbuf_r+0x40>
 8007ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ad2:	e00e      	b.n	8007af2 <__swhatbuf_r+0x42>
 8007ad4:	466a      	mov	r2, sp
 8007ad6:	f001 f91b 	bl	8008d10 <_fstat_r>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	dbf1      	blt.n	8007ac2 <__swhatbuf_r+0x12>
 8007ade:	9a01      	ldr	r2, [sp, #4]
 8007ae0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ae4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ae8:	425a      	negs	r2, r3
 8007aea:	415a      	adcs	r2, r3
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	e7ee      	b.n	8007ace <__swhatbuf_r+0x1e>
 8007af0:	2340      	movs	r3, #64	; 0x40
 8007af2:	2000      	movs	r0, #0
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	b016      	add	sp, #88	; 0x58
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007afc <__smakebuf_r>:
 8007afc:	898b      	ldrh	r3, [r1, #12]
 8007afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b00:	079d      	lsls	r5, r3, #30
 8007b02:	4606      	mov	r6, r0
 8007b04:	460c      	mov	r4, r1
 8007b06:	d507      	bpl.n	8007b18 <__smakebuf_r+0x1c>
 8007b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	2301      	movs	r3, #1
 8007b12:	6163      	str	r3, [r4, #20]
 8007b14:	b002      	add	sp, #8
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	466a      	mov	r2, sp
 8007b1a:	ab01      	add	r3, sp, #4
 8007b1c:	f7ff ffc8 	bl	8007ab0 <__swhatbuf_r>
 8007b20:	9900      	ldr	r1, [sp, #0]
 8007b22:	4605      	mov	r5, r0
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff fac7 	bl	80070b8 <_malloc_r>
 8007b2a:	b948      	cbnz	r0, 8007b40 <__smakebuf_r+0x44>
 8007b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b30:	059a      	lsls	r2, r3, #22
 8007b32:	d4ef      	bmi.n	8007b14 <__smakebuf_r+0x18>
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	f043 0302 	orr.w	r3, r3, #2
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	e7e3      	b.n	8007b08 <__smakebuf_r+0xc>
 8007b40:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <__smakebuf_r+0x7c>)
 8007b42:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	6020      	str	r0, [r4, #0]
 8007b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	9b00      	ldr	r3, [sp, #0]
 8007b50:	6120      	str	r0, [r4, #16]
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	9b01      	ldr	r3, [sp, #4]
 8007b56:	b15b      	cbz	r3, 8007b70 <__smakebuf_r+0x74>
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b5e:	f001 f8e9 	bl	8008d34 <_isatty_r>
 8007b62:	b128      	cbz	r0, 8007b70 <__smakebuf_r+0x74>
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	81a3      	strh	r3, [r4, #12]
 8007b70:	89a0      	ldrh	r0, [r4, #12]
 8007b72:	4305      	orrs	r5, r0
 8007b74:	81a5      	strh	r5, [r4, #12]
 8007b76:	e7cd      	b.n	8007b14 <__smakebuf_r+0x18>
 8007b78:	08006e59 	.word	0x08006e59

08007b7c <malloc>:
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <malloc+0xc>)
 8007b7e:	4601      	mov	r1, r0
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	f7ff ba99 	b.w	80070b8 <_malloc_r>
 8007b86:	bf00      	nop
 8007b88:	20000010 	.word	0x20000010

08007b8c <__malloc_lock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_lock+0x8>)
 8007b8e:	f7ff ba5a 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8007b92:	bf00      	nop
 8007b94:	20001cd8 	.word	0x20001cd8

08007b98 <__malloc_unlock>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__malloc_unlock+0x8>)
 8007b9a:	f7ff ba55 	b.w	8007048 <__retarget_lock_release_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	20001cd8 	.word	0x20001cd8

08007ba4 <_free_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	d040      	beq.n	8007c2e <_free_r+0x8a>
 8007bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb0:	1f0c      	subs	r4, r1, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfb8      	it	lt
 8007bb6:	18e4      	addlt	r4, r4, r3
 8007bb8:	f7ff ffe8 	bl	8007b8c <__malloc_lock>
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <_free_r+0x8c>)
 8007bbe:	6813      	ldr	r3, [r2, #0]
 8007bc0:	b933      	cbnz	r3, 8007bd0 <_free_r+0x2c>
 8007bc2:	6063      	str	r3, [r4, #4]
 8007bc4:	6014      	str	r4, [r2, #0]
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bcc:	f7ff bfe4 	b.w	8007b98 <__malloc_unlock>
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d908      	bls.n	8007be6 <_free_r+0x42>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	1821      	adds	r1, r4, r0
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	bf01      	itttt	eq
 8007bdc:	6819      	ldreq	r1, [r3, #0]
 8007bde:	685b      	ldreq	r3, [r3, #4]
 8007be0:	1809      	addeq	r1, r1, r0
 8007be2:	6021      	streq	r1, [r4, #0]
 8007be4:	e7ed      	b.n	8007bc2 <_free_r+0x1e>
 8007be6:	461a      	mov	r2, r3
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	b10b      	cbz	r3, 8007bf0 <_free_r+0x4c>
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	d9fa      	bls.n	8007be6 <_free_r+0x42>
 8007bf0:	6811      	ldr	r1, [r2, #0]
 8007bf2:	1850      	adds	r0, r2, r1
 8007bf4:	42a0      	cmp	r0, r4
 8007bf6:	d10b      	bne.n	8007c10 <_free_r+0x6c>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	4401      	add	r1, r0
 8007bfc:	1850      	adds	r0, r2, r1
 8007bfe:	4283      	cmp	r3, r0
 8007c00:	6011      	str	r1, [r2, #0]
 8007c02:	d1e0      	bne.n	8007bc6 <_free_r+0x22>
 8007c04:	6818      	ldr	r0, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4401      	add	r1, r0
 8007c0a:	6011      	str	r1, [r2, #0]
 8007c0c:	6053      	str	r3, [r2, #4]
 8007c0e:	e7da      	b.n	8007bc6 <_free_r+0x22>
 8007c10:	d902      	bls.n	8007c18 <_free_r+0x74>
 8007c12:	230c      	movs	r3, #12
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	e7d6      	b.n	8007bc6 <_free_r+0x22>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	1821      	adds	r1, r4, r0
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	bf01      	itttt	eq
 8007c20:	6819      	ldreq	r1, [r3, #0]
 8007c22:	685b      	ldreq	r3, [r3, #4]
 8007c24:	1809      	addeq	r1, r1, r0
 8007c26:	6021      	streq	r1, [r4, #0]
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	6054      	str	r4, [r2, #4]
 8007c2c:	e7cb      	b.n	8007bc6 <_free_r+0x22>
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	20001cdc 	.word	0x20001cdc

08007c34 <__ssputs_r>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	688e      	ldr	r6, [r1, #8]
 8007c3a:	4682      	mov	sl, r0
 8007c3c:	429e      	cmp	r6, r3
 8007c3e:	460c      	mov	r4, r1
 8007c40:	4690      	mov	r8, r2
 8007c42:	461f      	mov	r7, r3
 8007c44:	d838      	bhi.n	8007cb8 <__ssputs_r+0x84>
 8007c46:	898a      	ldrh	r2, [r1, #12]
 8007c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c4c:	d032      	beq.n	8007cb4 <__ssputs_r+0x80>
 8007c4e:	6825      	ldr	r5, [r4, #0]
 8007c50:	6909      	ldr	r1, [r1, #16]
 8007c52:	3301      	adds	r3, #1
 8007c54:	eba5 0901 	sub.w	r9, r5, r1
 8007c58:	6965      	ldr	r5, [r4, #20]
 8007c5a:	444b      	add	r3, r9
 8007c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c64:	106d      	asrs	r5, r5, #1
 8007c66:	429d      	cmp	r5, r3
 8007c68:	bf38      	it	cc
 8007c6a:	461d      	movcc	r5, r3
 8007c6c:	0553      	lsls	r3, r2, #21
 8007c6e:	d531      	bpl.n	8007cd4 <__ssputs_r+0xa0>
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7ff fa21 	bl	80070b8 <_malloc_r>
 8007c76:	4606      	mov	r6, r0
 8007c78:	b950      	cbnz	r0, 8007c90 <__ssputs_r+0x5c>
 8007c7a:	230c      	movs	r3, #12
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	f8ca 3000 	str.w	r3, [sl]
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	464a      	mov	r2, r9
 8007c92:	6921      	ldr	r1, [r4, #16]
 8007c94:	f7ff f9d9 	bl	800704a <memcpy>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	6126      	str	r6, [r4, #16]
 8007ca6:	444e      	add	r6, r9
 8007ca8:	6026      	str	r6, [r4, #0]
 8007caa:	463e      	mov	r6, r7
 8007cac:	6165      	str	r5, [r4, #20]
 8007cae:	eba5 0509 	sub.w	r5, r5, r9
 8007cb2:	60a5      	str	r5, [r4, #8]
 8007cb4:	42be      	cmp	r6, r7
 8007cb6:	d900      	bls.n	8007cba <__ssputs_r+0x86>
 8007cb8:	463e      	mov	r6, r7
 8007cba:	4632      	mov	r2, r6
 8007cbc:	4641      	mov	r1, r8
 8007cbe:	6820      	ldr	r0, [r4, #0]
 8007cc0:	f001 f856 	bl	8008d70 <memmove>
 8007cc4:	68a3      	ldr	r3, [r4, #8]
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	1b9b      	subs	r3, r3, r6
 8007cca:	60a3      	str	r3, [r4, #8]
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	4433      	add	r3, r6
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	e7db      	b.n	8007c8c <__ssputs_r+0x58>
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	f001 f865 	bl	8008da4 <_realloc_r>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d1e1      	bne.n	8007ca4 <__ssputs_r+0x70>
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	6921      	ldr	r1, [r4, #16]
 8007ce4:	f7ff ff5e 	bl	8007ba4 <_free_r>
 8007ce8:	e7c7      	b.n	8007c7a <__ssputs_r+0x46>
	...

08007cec <_svfiprintf_r>:
 8007cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4698      	mov	r8, r3
 8007cf2:	898b      	ldrh	r3, [r1, #12]
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	061b      	lsls	r3, r3, #24
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	b09d      	sub	sp, #116	; 0x74
 8007cfe:	d50e      	bpl.n	8007d1e <_svfiprintf_r+0x32>
 8007d00:	690b      	ldr	r3, [r1, #16]
 8007d02:	b963      	cbnz	r3, 8007d1e <_svfiprintf_r+0x32>
 8007d04:	2140      	movs	r1, #64	; 0x40
 8007d06:	f7ff f9d7 	bl	80070b8 <_malloc_r>
 8007d0a:	6028      	str	r0, [r5, #0]
 8007d0c:	6128      	str	r0, [r5, #16]
 8007d0e:	b920      	cbnz	r0, 8007d1a <_svfiprintf_r+0x2e>
 8007d10:	230c      	movs	r3, #12
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	e0d1      	b.n	8007ebe <_svfiprintf_r+0x1d2>
 8007d1a:	2340      	movs	r3, #64	; 0x40
 8007d1c:	616b      	str	r3, [r5, #20]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	9309      	str	r3, [sp, #36]	; 0x24
 8007d22:	2320      	movs	r3, #32
 8007d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d28:	2330      	movs	r3, #48	; 0x30
 8007d2a:	f04f 0901 	mov.w	r9, #1
 8007d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ed8 <_svfiprintf_r+0x1ec>
 8007d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d42:	b10a      	cbz	r2, 8007d48 <_svfiprintf_r+0x5c>
 8007d44:	2a25      	cmp	r2, #37	; 0x25
 8007d46:	d1f9      	bne.n	8007d3c <_svfiprintf_r+0x50>
 8007d48:	ebba 0b04 	subs.w	fp, sl, r4
 8007d4c:	d00b      	beq.n	8007d66 <_svfiprintf_r+0x7a>
 8007d4e:	465b      	mov	r3, fp
 8007d50:	4622      	mov	r2, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7ff ff6d 	bl	8007c34 <__ssputs_r>
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f000 80aa 	beq.w	8007eb4 <_svfiprintf_r+0x1c8>
 8007d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d62:	445a      	add	r2, fp
 8007d64:	9209      	str	r2, [sp, #36]	; 0x24
 8007d66:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 80a2 	beq.w	8007eb4 <_svfiprintf_r+0x1c8>
 8007d70:	2300      	movs	r3, #0
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7a:	f10a 0a01 	add.w	sl, sl, #1
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	9307      	str	r3, [sp, #28]
 8007d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d86:	931a      	str	r3, [sp, #104]	; 0x68
 8007d88:	4654      	mov	r4, sl
 8007d8a:	2205      	movs	r2, #5
 8007d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d90:	4851      	ldr	r0, [pc, #324]	; (8007ed8 <_svfiprintf_r+0x1ec>)
 8007d92:	f000 ffdf 	bl	8008d54 <memchr>
 8007d96:	9a04      	ldr	r2, [sp, #16]
 8007d98:	b9d8      	cbnz	r0, 8007dd2 <_svfiprintf_r+0xe6>
 8007d9a:	06d0      	lsls	r0, r2, #27
 8007d9c:	bf44      	itt	mi
 8007d9e:	2320      	movmi	r3, #32
 8007da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da4:	0711      	lsls	r1, r2, #28
 8007da6:	bf44      	itt	mi
 8007da8:	232b      	movmi	r3, #43	; 0x2b
 8007daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dae:	f89a 3000 	ldrb.w	r3, [sl]
 8007db2:	2b2a      	cmp	r3, #42	; 0x2a
 8007db4:	d015      	beq.n	8007de2 <_svfiprintf_r+0xf6>
 8007db6:	4654      	mov	r4, sl
 8007db8:	2000      	movs	r0, #0
 8007dba:	f04f 0c0a 	mov.w	ip, #10
 8007dbe:	9a07      	ldr	r2, [sp, #28]
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc6:	3b30      	subs	r3, #48	; 0x30
 8007dc8:	2b09      	cmp	r3, #9
 8007dca:	d94e      	bls.n	8007e6a <_svfiprintf_r+0x17e>
 8007dcc:	b1b0      	cbz	r0, 8007dfc <_svfiprintf_r+0x110>
 8007dce:	9207      	str	r2, [sp, #28]
 8007dd0:	e014      	b.n	8007dfc <_svfiprintf_r+0x110>
 8007dd2:	eba0 0308 	sub.w	r3, r0, r8
 8007dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	46a2      	mov	sl, r4
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	e7d2      	b.n	8007d88 <_svfiprintf_r+0x9c>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	1d19      	adds	r1, r3, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	9103      	str	r1, [sp, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfbb      	ittet	lt
 8007dee:	425b      	neglt	r3, r3
 8007df0:	f042 0202 	orrlt.w	r2, r2, #2
 8007df4:	9307      	strge	r3, [sp, #28]
 8007df6:	9307      	strlt	r3, [sp, #28]
 8007df8:	bfb8      	it	lt
 8007dfa:	9204      	strlt	r2, [sp, #16]
 8007dfc:	7823      	ldrb	r3, [r4, #0]
 8007dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8007e00:	d10c      	bne.n	8007e1c <_svfiprintf_r+0x130>
 8007e02:	7863      	ldrb	r3, [r4, #1]
 8007e04:	2b2a      	cmp	r3, #42	; 0x2a
 8007e06:	d135      	bne.n	8007e74 <_svfiprintf_r+0x188>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	3402      	adds	r4, #2
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9203      	str	r2, [sp, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfb8      	it	lt
 8007e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007edc <_svfiprintf_r+0x1f0>
 8007e20:	2203      	movs	r2, #3
 8007e22:	4650      	mov	r0, sl
 8007e24:	7821      	ldrb	r1, [r4, #0]
 8007e26:	f000 ff95 	bl	8008d54 <memchr>
 8007e2a:	b140      	cbz	r0, 8007e3e <_svfiprintf_r+0x152>
 8007e2c:	2340      	movs	r3, #64	; 0x40
 8007e2e:	eba0 000a 	sub.w	r0, r0, sl
 8007e32:	fa03 f000 	lsl.w	r0, r3, r0
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	3401      	adds	r4, #1
 8007e3a:	4303      	orrs	r3, r0
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e42:	2206      	movs	r2, #6
 8007e44:	4826      	ldr	r0, [pc, #152]	; (8007ee0 <_svfiprintf_r+0x1f4>)
 8007e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e4a:	f000 ff83 	bl	8008d54 <memchr>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d038      	beq.n	8007ec4 <_svfiprintf_r+0x1d8>
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <_svfiprintf_r+0x1f8>)
 8007e54:	bb1b      	cbnz	r3, 8007e9e <_svfiprintf_r+0x1b2>
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	3307      	adds	r3, #7
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	3308      	adds	r3, #8
 8007e60:	9303      	str	r3, [sp, #12]
 8007e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e64:	4433      	add	r3, r6
 8007e66:	9309      	str	r3, [sp, #36]	; 0x24
 8007e68:	e767      	b.n	8007d3a <_svfiprintf_r+0x4e>
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e72:	e7a5      	b.n	8007dc0 <_svfiprintf_r+0xd4>
 8007e74:	2300      	movs	r3, #0
 8007e76:	f04f 0c0a 	mov.w	ip, #10
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	3401      	adds	r4, #1
 8007e7e:	9305      	str	r3, [sp, #20]
 8007e80:	4620      	mov	r0, r4
 8007e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e86:	3a30      	subs	r2, #48	; 0x30
 8007e88:	2a09      	cmp	r2, #9
 8007e8a:	d903      	bls.n	8007e94 <_svfiprintf_r+0x1a8>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0c5      	beq.n	8007e1c <_svfiprintf_r+0x130>
 8007e90:	9105      	str	r1, [sp, #20]
 8007e92:	e7c3      	b.n	8007e1c <_svfiprintf_r+0x130>
 8007e94:	4604      	mov	r4, r0
 8007e96:	2301      	movs	r3, #1
 8007e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9c:	e7f0      	b.n	8007e80 <_svfiprintf_r+0x194>
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <_svfiprintf_r+0x1fc>)
 8007ea8:	a904      	add	r1, sp, #16
 8007eaa:	f3af 8000 	nop.w
 8007eae:	1c42      	adds	r2, r0, #1
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	d1d6      	bne.n	8007e62 <_svfiprintf_r+0x176>
 8007eb4:	89ab      	ldrh	r3, [r5, #12]
 8007eb6:	065b      	lsls	r3, r3, #25
 8007eb8:	f53f af2c 	bmi.w	8007d14 <_svfiprintf_r+0x28>
 8007ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ebe:	b01d      	add	sp, #116	; 0x74
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	ab03      	add	r3, sp, #12
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4638      	mov	r0, r7
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <_svfiprintf_r+0x1fc>)
 8007ece:	a904      	add	r1, sp, #16
 8007ed0:	f000 fba8 	bl	8008624 <_printf_i>
 8007ed4:	e7eb      	b.n	8007eae <_svfiprintf_r+0x1c2>
 8007ed6:	bf00      	nop
 8007ed8:	08009639 	.word	0x08009639
 8007edc:	0800963f 	.word	0x0800963f
 8007ee0:	08009643 	.word	0x08009643
 8007ee4:	00000000 	.word	0x00000000
 8007ee8:	08007c35 	.word	0x08007c35

08007eec <_sungetc_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	1c4b      	adds	r3, r1, #1
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	d103      	bne.n	8007efc <_sungetc_r+0x10>
 8007ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ef8:	4628      	mov	r0, r5
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	8993      	ldrh	r3, [r2, #12]
 8007efe:	b2cd      	uxtb	r5, r1
 8007f00:	f023 0320 	bic.w	r3, r3, #32
 8007f04:	8193      	strh	r3, [r2, #12]
 8007f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f08:	6852      	ldr	r2, [r2, #4]
 8007f0a:	b18b      	cbz	r3, 8007f30 <_sungetc_r+0x44>
 8007f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	dd08      	ble.n	8007f24 <_sungetc_r+0x38>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	1e5a      	subs	r2, r3, #1
 8007f16:	6022      	str	r2, [r4, #0]
 8007f18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	6063      	str	r3, [r4, #4]
 8007f22:	e7e9      	b.n	8007ef8 <_sungetc_r+0xc>
 8007f24:	4621      	mov	r1, r4
 8007f26:	f000 feb3 	bl	8008c90 <__submore>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d0f1      	beq.n	8007f12 <_sungetc_r+0x26>
 8007f2e:	e7e1      	b.n	8007ef4 <_sungetc_r+0x8>
 8007f30:	6921      	ldr	r1, [r4, #16]
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	b151      	cbz	r1, 8007f4c <_sungetc_r+0x60>
 8007f36:	4299      	cmp	r1, r3
 8007f38:	d208      	bcs.n	8007f4c <_sungetc_r+0x60>
 8007f3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007f3e:	42a9      	cmp	r1, r5
 8007f40:	d104      	bne.n	8007f4c <_sungetc_r+0x60>
 8007f42:	3b01      	subs	r3, #1
 8007f44:	3201      	adds	r2, #1
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	6062      	str	r2, [r4, #4]
 8007f4a:	e7d5      	b.n	8007ef8 <_sungetc_r+0xc>
 8007f4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f54:	6363      	str	r3, [r4, #52]	; 0x34
 8007f56:	2303      	movs	r3, #3
 8007f58:	63a3      	str	r3, [r4, #56]	; 0x38
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	2301      	movs	r3, #1
 8007f64:	e7dc      	b.n	8007f20 <_sungetc_r+0x34>

08007f66 <__ssrefill_r>:
 8007f66:	b510      	push	{r4, lr}
 8007f68:	460c      	mov	r4, r1
 8007f6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007f6c:	b169      	cbz	r1, 8007f8a <__ssrefill_r+0x24>
 8007f6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f72:	4299      	cmp	r1, r3
 8007f74:	d001      	beq.n	8007f7a <__ssrefill_r+0x14>
 8007f76:	f7ff fe15 	bl	8007ba4 <_free_r>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f7e:	6360      	str	r0, [r4, #52]	; 0x34
 8007f80:	6063      	str	r3, [r4, #4]
 8007f82:	b113      	cbz	r3, 8007f8a <__ssrefill_r+0x24>
 8007f84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	2300      	movs	r3, #0
 8007f94:	6063      	str	r3, [r4, #4]
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	f043 0320 	orr.w	r3, r3, #32
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	e7f3      	b.n	8007f88 <__ssrefill_r+0x22>

08007fa0 <__ssvfiscanf_r>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4606      	mov	r6, r0
 8007faa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007fae:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007fb2:	49a7      	ldr	r1, [pc, #668]	; (8008250 <__ssvfiscanf_r+0x2b0>)
 8007fb4:	f10d 0804 	add.w	r8, sp, #4
 8007fb8:	91a0      	str	r1, [sp, #640]	; 0x280
 8007fba:	49a6      	ldr	r1, [pc, #664]	; (8008254 <__ssvfiscanf_r+0x2b4>)
 8007fbc:	4fa6      	ldr	r7, [pc, #664]	; (8008258 <__ssvfiscanf_r+0x2b8>)
 8007fbe:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800825c <__ssvfiscanf_r+0x2bc>
 8007fc2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007fc6:	91a1      	str	r1, [sp, #644]	; 0x284
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	7813      	ldrb	r3, [r2, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 815c 	beq.w	800828a <__ssvfiscanf_r+0x2ea>
 8007fd2:	5dd9      	ldrb	r1, [r3, r7]
 8007fd4:	1c55      	adds	r5, r2, #1
 8007fd6:	f011 0108 	ands.w	r1, r1, #8
 8007fda:	d019      	beq.n	8008010 <__ssvfiscanf_r+0x70>
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dd0f      	ble.n	8008002 <__ssvfiscanf_r+0x62>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	781a      	ldrb	r2, [r3, #0]
 8007fe6:	5cba      	ldrb	r2, [r7, r2]
 8007fe8:	0712      	lsls	r2, r2, #28
 8007fea:	d401      	bmi.n	8007ff0 <__ssvfiscanf_r+0x50>
 8007fec:	462a      	mov	r2, r5
 8007fee:	e7ec      	b.n	8007fca <__ssvfiscanf_r+0x2a>
 8007ff0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	3201      	adds	r2, #1
 8007ff6:	9245      	str	r2, [sp, #276]	; 0x114
 8007ff8:	6862      	ldr	r2, [r4, #4]
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	3a01      	subs	r2, #1
 8007ffe:	6062      	str	r2, [r4, #4]
 8008000:	e7ec      	b.n	8007fdc <__ssvfiscanf_r+0x3c>
 8008002:	4621      	mov	r1, r4
 8008004:	4630      	mov	r0, r6
 8008006:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008008:	4798      	blx	r3
 800800a:	2800      	cmp	r0, #0
 800800c:	d0e9      	beq.n	8007fe2 <__ssvfiscanf_r+0x42>
 800800e:	e7ed      	b.n	8007fec <__ssvfiscanf_r+0x4c>
 8008010:	2b25      	cmp	r3, #37	; 0x25
 8008012:	d012      	beq.n	800803a <__ssvfiscanf_r+0x9a>
 8008014:	469a      	mov	sl, r3
 8008016:	6863      	ldr	r3, [r4, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f340 8094 	ble.w	8008146 <__ssvfiscanf_r+0x1a6>
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	7813      	ldrb	r3, [r2, #0]
 8008022:	4553      	cmp	r3, sl
 8008024:	f040 8131 	bne.w	800828a <__ssvfiscanf_r+0x2ea>
 8008028:	6863      	ldr	r3, [r4, #4]
 800802a:	3201      	adds	r2, #1
 800802c:	3b01      	subs	r3, #1
 800802e:	6063      	str	r3, [r4, #4]
 8008030:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008032:	6022      	str	r2, [r4, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	9345      	str	r3, [sp, #276]	; 0x114
 8008038:	e7d8      	b.n	8007fec <__ssvfiscanf_r+0x4c>
 800803a:	9141      	str	r1, [sp, #260]	; 0x104
 800803c:	9143      	str	r1, [sp, #268]	; 0x10c
 800803e:	7853      	ldrb	r3, [r2, #1]
 8008040:	2b2a      	cmp	r3, #42	; 0x2a
 8008042:	bf04      	itt	eq
 8008044:	2310      	moveq	r3, #16
 8008046:	1c95      	addeq	r5, r2, #2
 8008048:	f04f 020a 	mov.w	r2, #10
 800804c:	bf08      	it	eq
 800804e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008050:	46aa      	mov	sl, r5
 8008052:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008056:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800805a:	2b09      	cmp	r3, #9
 800805c:	d91d      	bls.n	800809a <__ssvfiscanf_r+0xfa>
 800805e:	2203      	movs	r2, #3
 8008060:	487e      	ldr	r0, [pc, #504]	; (800825c <__ssvfiscanf_r+0x2bc>)
 8008062:	f000 fe77 	bl	8008d54 <memchr>
 8008066:	b140      	cbz	r0, 800807a <__ssvfiscanf_r+0xda>
 8008068:	2301      	movs	r3, #1
 800806a:	4655      	mov	r5, sl
 800806c:	eba0 0009 	sub.w	r0, r0, r9
 8008070:	fa03 f000 	lsl.w	r0, r3, r0
 8008074:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008076:	4318      	orrs	r0, r3
 8008078:	9041      	str	r0, [sp, #260]	; 0x104
 800807a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800807e:	2b78      	cmp	r3, #120	; 0x78
 8008080:	d806      	bhi.n	8008090 <__ssvfiscanf_r+0xf0>
 8008082:	2b57      	cmp	r3, #87	; 0x57
 8008084:	d810      	bhi.n	80080a8 <__ssvfiscanf_r+0x108>
 8008086:	2b25      	cmp	r3, #37	; 0x25
 8008088:	d0c4      	beq.n	8008014 <__ssvfiscanf_r+0x74>
 800808a:	d857      	bhi.n	800813c <__ssvfiscanf_r+0x19c>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d065      	beq.n	800815c <__ssvfiscanf_r+0x1bc>
 8008090:	2303      	movs	r3, #3
 8008092:	9347      	str	r3, [sp, #284]	; 0x11c
 8008094:	230a      	movs	r3, #10
 8008096:	9342      	str	r3, [sp, #264]	; 0x108
 8008098:	e072      	b.n	8008180 <__ssvfiscanf_r+0x1e0>
 800809a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800809c:	4655      	mov	r5, sl
 800809e:	fb02 1103 	mla	r1, r2, r3, r1
 80080a2:	3930      	subs	r1, #48	; 0x30
 80080a4:	9143      	str	r1, [sp, #268]	; 0x10c
 80080a6:	e7d3      	b.n	8008050 <__ssvfiscanf_r+0xb0>
 80080a8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80080ac:	2a20      	cmp	r2, #32
 80080ae:	d8ef      	bhi.n	8008090 <__ssvfiscanf_r+0xf0>
 80080b0:	a101      	add	r1, pc, #4	; (adr r1, 80080b8 <__ssvfiscanf_r+0x118>)
 80080b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	0800816b 	.word	0x0800816b
 80080bc:	08008091 	.word	0x08008091
 80080c0:	08008091 	.word	0x08008091
 80080c4:	080081c9 	.word	0x080081c9
 80080c8:	08008091 	.word	0x08008091
 80080cc:	08008091 	.word	0x08008091
 80080d0:	08008091 	.word	0x08008091
 80080d4:	08008091 	.word	0x08008091
 80080d8:	08008091 	.word	0x08008091
 80080dc:	08008091 	.word	0x08008091
 80080e0:	08008091 	.word	0x08008091
 80080e4:	080081df 	.word	0x080081df
 80080e8:	080081b5 	.word	0x080081b5
 80080ec:	08008143 	.word	0x08008143
 80080f0:	08008143 	.word	0x08008143
 80080f4:	08008143 	.word	0x08008143
 80080f8:	08008091 	.word	0x08008091
 80080fc:	080081b9 	.word	0x080081b9
 8008100:	08008091 	.word	0x08008091
 8008104:	08008091 	.word	0x08008091
 8008108:	08008091 	.word	0x08008091
 800810c:	08008091 	.word	0x08008091
 8008110:	080081ef 	.word	0x080081ef
 8008114:	080081c1 	.word	0x080081c1
 8008118:	08008163 	.word	0x08008163
 800811c:	08008091 	.word	0x08008091
 8008120:	08008091 	.word	0x08008091
 8008124:	080081eb 	.word	0x080081eb
 8008128:	08008091 	.word	0x08008091
 800812c:	080081b5 	.word	0x080081b5
 8008130:	08008091 	.word	0x08008091
 8008134:	08008091 	.word	0x08008091
 8008138:	0800816b 	.word	0x0800816b
 800813c:	3b45      	subs	r3, #69	; 0x45
 800813e:	2b02      	cmp	r3, #2
 8008140:	d8a6      	bhi.n	8008090 <__ssvfiscanf_r+0xf0>
 8008142:	2305      	movs	r3, #5
 8008144:	e01b      	b.n	800817e <__ssvfiscanf_r+0x1de>
 8008146:	4621      	mov	r1, r4
 8008148:	4630      	mov	r0, r6
 800814a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800814c:	4798      	blx	r3
 800814e:	2800      	cmp	r0, #0
 8008150:	f43f af65 	beq.w	800801e <__ssvfiscanf_r+0x7e>
 8008154:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008156:	2800      	cmp	r0, #0
 8008158:	f040 808d 	bne.w	8008276 <__ssvfiscanf_r+0x2d6>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	e08f      	b.n	8008282 <__ssvfiscanf_r+0x2e2>
 8008162:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008164:	f042 0220 	orr.w	r2, r2, #32
 8008168:	9241      	str	r2, [sp, #260]	; 0x104
 800816a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800816c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008170:	9241      	str	r2, [sp, #260]	; 0x104
 8008172:	2210      	movs	r2, #16
 8008174:	2b6f      	cmp	r3, #111	; 0x6f
 8008176:	bf34      	ite	cc
 8008178:	2303      	movcc	r3, #3
 800817a:	2304      	movcs	r3, #4
 800817c:	9242      	str	r2, [sp, #264]	; 0x108
 800817e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	dd42      	ble.n	800820c <__ssvfiscanf_r+0x26c>
 8008186:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008188:	0659      	lsls	r1, r3, #25
 800818a:	d404      	bmi.n	8008196 <__ssvfiscanf_r+0x1f6>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	5cba      	ldrb	r2, [r7, r2]
 8008192:	0712      	lsls	r2, r2, #28
 8008194:	d441      	bmi.n	800821a <__ssvfiscanf_r+0x27a>
 8008196:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008198:	2b02      	cmp	r3, #2
 800819a:	dc50      	bgt.n	800823e <__ssvfiscanf_r+0x29e>
 800819c:	466b      	mov	r3, sp
 800819e:	4622      	mov	r2, r4
 80081a0:	4630      	mov	r0, r6
 80081a2:	a941      	add	r1, sp, #260	; 0x104
 80081a4:	f000 fb64 	bl	8008870 <_scanf_chars>
 80081a8:	2801      	cmp	r0, #1
 80081aa:	d06e      	beq.n	800828a <__ssvfiscanf_r+0x2ea>
 80081ac:	2802      	cmp	r0, #2
 80081ae:	f47f af1d 	bne.w	8007fec <__ssvfiscanf_r+0x4c>
 80081b2:	e7cf      	b.n	8008154 <__ssvfiscanf_r+0x1b4>
 80081b4:	220a      	movs	r2, #10
 80081b6:	e7dd      	b.n	8008174 <__ssvfiscanf_r+0x1d4>
 80081b8:	2300      	movs	r3, #0
 80081ba:	9342      	str	r3, [sp, #264]	; 0x108
 80081bc:	2303      	movs	r3, #3
 80081be:	e7de      	b.n	800817e <__ssvfiscanf_r+0x1de>
 80081c0:	2308      	movs	r3, #8
 80081c2:	9342      	str	r3, [sp, #264]	; 0x108
 80081c4:	2304      	movs	r3, #4
 80081c6:	e7da      	b.n	800817e <__ssvfiscanf_r+0x1de>
 80081c8:	4629      	mov	r1, r5
 80081ca:	4640      	mov	r0, r8
 80081cc:	f000 fcb4 	bl	8008b38 <__sccl>
 80081d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80081d2:	4605      	mov	r5, r0
 80081d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d8:	9341      	str	r3, [sp, #260]	; 0x104
 80081da:	2301      	movs	r3, #1
 80081dc:	e7cf      	b.n	800817e <__ssvfiscanf_r+0x1de>
 80081de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80081e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e4:	9341      	str	r3, [sp, #260]	; 0x104
 80081e6:	2300      	movs	r3, #0
 80081e8:	e7c9      	b.n	800817e <__ssvfiscanf_r+0x1de>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e7c7      	b.n	800817e <__ssvfiscanf_r+0x1de>
 80081ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 80081f0:	06c3      	lsls	r3, r0, #27
 80081f2:	f53f aefb 	bmi.w	8007fec <__ssvfiscanf_r+0x4c>
 80081f6:	9b00      	ldr	r3, [sp, #0]
 80081f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80081fa:	1d19      	adds	r1, r3, #4
 80081fc:	9100      	str	r1, [sp, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f010 0f01 	tst.w	r0, #1
 8008204:	bf14      	ite	ne
 8008206:	801a      	strhne	r2, [r3, #0]
 8008208:	601a      	streq	r2, [r3, #0]
 800820a:	e6ef      	b.n	8007fec <__ssvfiscanf_r+0x4c>
 800820c:	4621      	mov	r1, r4
 800820e:	4630      	mov	r0, r6
 8008210:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008212:	4798      	blx	r3
 8008214:	2800      	cmp	r0, #0
 8008216:	d0b6      	beq.n	8008186 <__ssvfiscanf_r+0x1e6>
 8008218:	e79c      	b.n	8008154 <__ssvfiscanf_r+0x1b4>
 800821a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800821c:	3201      	adds	r2, #1
 800821e:	9245      	str	r2, [sp, #276]	; 0x114
 8008220:	6862      	ldr	r2, [r4, #4]
 8008222:	3a01      	subs	r2, #1
 8008224:	2a00      	cmp	r2, #0
 8008226:	6062      	str	r2, [r4, #4]
 8008228:	dd02      	ble.n	8008230 <__ssvfiscanf_r+0x290>
 800822a:	3301      	adds	r3, #1
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	e7ad      	b.n	800818c <__ssvfiscanf_r+0x1ec>
 8008230:	4621      	mov	r1, r4
 8008232:	4630      	mov	r0, r6
 8008234:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008236:	4798      	blx	r3
 8008238:	2800      	cmp	r0, #0
 800823a:	d0a7      	beq.n	800818c <__ssvfiscanf_r+0x1ec>
 800823c:	e78a      	b.n	8008154 <__ssvfiscanf_r+0x1b4>
 800823e:	2b04      	cmp	r3, #4
 8008240:	dc0e      	bgt.n	8008260 <__ssvfiscanf_r+0x2c0>
 8008242:	466b      	mov	r3, sp
 8008244:	4622      	mov	r2, r4
 8008246:	4630      	mov	r0, r6
 8008248:	a941      	add	r1, sp, #260	; 0x104
 800824a:	f000 fb6b 	bl	8008924 <_scanf_i>
 800824e:	e7ab      	b.n	80081a8 <__ssvfiscanf_r+0x208>
 8008250:	08007eed 	.word	0x08007eed
 8008254:	08007f67 	.word	0x08007f67
 8008258:	08009539 	.word	0x08009539
 800825c:	0800963f 	.word	0x0800963f
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <__ssvfiscanf_r+0x2f0>)
 8008262:	2b00      	cmp	r3, #0
 8008264:	f43f aec2 	beq.w	8007fec <__ssvfiscanf_r+0x4c>
 8008268:	466b      	mov	r3, sp
 800826a:	4622      	mov	r2, r4
 800826c:	4630      	mov	r0, r6
 800826e:	a941      	add	r1, sp, #260	; 0x104
 8008270:	f3af 8000 	nop.w
 8008274:	e798      	b.n	80081a8 <__ssvfiscanf_r+0x208>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f013 0f40 	tst.w	r3, #64	; 0x40
 800827c:	bf18      	it	ne
 800827e:	f04f 30ff 	movne.w	r0, #4294967295
 8008282:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800828c:	e7f9      	b.n	8008282 <__ssvfiscanf_r+0x2e2>
 800828e:	bf00      	nop
 8008290:	00000000 	.word	0x00000000

08008294 <__sfputc_r>:
 8008294:	6893      	ldr	r3, [r2, #8]
 8008296:	b410      	push	{r4}
 8008298:	3b01      	subs	r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	6093      	str	r3, [r2, #8]
 800829e:	da07      	bge.n	80082b0 <__sfputc_r+0x1c>
 80082a0:	6994      	ldr	r4, [r2, #24]
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	db01      	blt.n	80082aa <__sfputc_r+0x16>
 80082a6:	290a      	cmp	r1, #10
 80082a8:	d102      	bne.n	80082b0 <__sfputc_r+0x1c>
 80082aa:	bc10      	pop	{r4}
 80082ac:	f7ff ba1e 	b.w	80076ec <__swbuf_r>
 80082b0:	6813      	ldr	r3, [r2, #0]
 80082b2:	1c58      	adds	r0, r3, #1
 80082b4:	6010      	str	r0, [r2, #0]
 80082b6:	7019      	strb	r1, [r3, #0]
 80082b8:	4608      	mov	r0, r1
 80082ba:	bc10      	pop	{r4}
 80082bc:	4770      	bx	lr

080082be <__sfputs_r>:
 80082be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c0:	4606      	mov	r6, r0
 80082c2:	460f      	mov	r7, r1
 80082c4:	4614      	mov	r4, r2
 80082c6:	18d5      	adds	r5, r2, r3
 80082c8:	42ac      	cmp	r4, r5
 80082ca:	d101      	bne.n	80082d0 <__sfputs_r+0x12>
 80082cc:	2000      	movs	r0, #0
 80082ce:	e007      	b.n	80082e0 <__sfputs_r+0x22>
 80082d0:	463a      	mov	r2, r7
 80082d2:	4630      	mov	r0, r6
 80082d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d8:	f7ff ffdc 	bl	8008294 <__sfputc_r>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d1f3      	bne.n	80082c8 <__sfputs_r+0xa>
 80082e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082e4 <_vfiprintf_r>:
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	460d      	mov	r5, r1
 80082ea:	4614      	mov	r4, r2
 80082ec:	4698      	mov	r8, r3
 80082ee:	4606      	mov	r6, r0
 80082f0:	b09d      	sub	sp, #116	; 0x74
 80082f2:	b118      	cbz	r0, 80082fc <_vfiprintf_r+0x18>
 80082f4:	6983      	ldr	r3, [r0, #24]
 80082f6:	b90b      	cbnz	r3, 80082fc <_vfiprintf_r+0x18>
 80082f8:	f7fe fde2 	bl	8006ec0 <__sinit>
 80082fc:	4b89      	ldr	r3, [pc, #548]	; (8008524 <_vfiprintf_r+0x240>)
 80082fe:	429d      	cmp	r5, r3
 8008300:	d11b      	bne.n	800833a <_vfiprintf_r+0x56>
 8008302:	6875      	ldr	r5, [r6, #4]
 8008304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008306:	07d9      	lsls	r1, r3, #31
 8008308:	d405      	bmi.n	8008316 <_vfiprintf_r+0x32>
 800830a:	89ab      	ldrh	r3, [r5, #12]
 800830c:	059a      	lsls	r2, r3, #22
 800830e:	d402      	bmi.n	8008316 <_vfiprintf_r+0x32>
 8008310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008312:	f7fe fe98 	bl	8007046 <__retarget_lock_acquire_recursive>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	071b      	lsls	r3, r3, #28
 800831a:	d501      	bpl.n	8008320 <_vfiprintf_r+0x3c>
 800831c:	692b      	ldr	r3, [r5, #16]
 800831e:	b9eb      	cbnz	r3, 800835c <_vfiprintf_r+0x78>
 8008320:	4629      	mov	r1, r5
 8008322:	4630      	mov	r0, r6
 8008324:	f7ff fa46 	bl	80077b4 <__swsetup_r>
 8008328:	b1c0      	cbz	r0, 800835c <_vfiprintf_r+0x78>
 800832a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800832c:	07dc      	lsls	r4, r3, #31
 800832e:	d50e      	bpl.n	800834e <_vfiprintf_r+0x6a>
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	b01d      	add	sp, #116	; 0x74
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	4b7b      	ldr	r3, [pc, #492]	; (8008528 <_vfiprintf_r+0x244>)
 800833c:	429d      	cmp	r5, r3
 800833e:	d101      	bne.n	8008344 <_vfiprintf_r+0x60>
 8008340:	68b5      	ldr	r5, [r6, #8]
 8008342:	e7df      	b.n	8008304 <_vfiprintf_r+0x20>
 8008344:	4b79      	ldr	r3, [pc, #484]	; (800852c <_vfiprintf_r+0x248>)
 8008346:	429d      	cmp	r5, r3
 8008348:	bf08      	it	eq
 800834a:	68f5      	ldreq	r5, [r6, #12]
 800834c:	e7da      	b.n	8008304 <_vfiprintf_r+0x20>
 800834e:	89ab      	ldrh	r3, [r5, #12]
 8008350:	0598      	lsls	r0, r3, #22
 8008352:	d4ed      	bmi.n	8008330 <_vfiprintf_r+0x4c>
 8008354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008356:	f7fe fe77 	bl	8007048 <__retarget_lock_release_recursive>
 800835a:	e7e9      	b.n	8008330 <_vfiprintf_r+0x4c>
 800835c:	2300      	movs	r3, #0
 800835e:	9309      	str	r3, [sp, #36]	; 0x24
 8008360:	2320      	movs	r3, #32
 8008362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008366:	2330      	movs	r3, #48	; 0x30
 8008368:	f04f 0901 	mov.w	r9, #1
 800836c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008370:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008530 <_vfiprintf_r+0x24c>
 8008374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008378:	4623      	mov	r3, r4
 800837a:	469a      	mov	sl, r3
 800837c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008380:	b10a      	cbz	r2, 8008386 <_vfiprintf_r+0xa2>
 8008382:	2a25      	cmp	r2, #37	; 0x25
 8008384:	d1f9      	bne.n	800837a <_vfiprintf_r+0x96>
 8008386:	ebba 0b04 	subs.w	fp, sl, r4
 800838a:	d00b      	beq.n	80083a4 <_vfiprintf_r+0xc0>
 800838c:	465b      	mov	r3, fp
 800838e:	4622      	mov	r2, r4
 8008390:	4629      	mov	r1, r5
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff ff93 	bl	80082be <__sfputs_r>
 8008398:	3001      	adds	r0, #1
 800839a:	f000 80aa 	beq.w	80084f2 <_vfiprintf_r+0x20e>
 800839e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a0:	445a      	add	r2, fp
 80083a2:	9209      	str	r2, [sp, #36]	; 0x24
 80083a4:	f89a 3000 	ldrb.w	r3, [sl]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80a2 	beq.w	80084f2 <_vfiprintf_r+0x20e>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295
 80083b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b8:	f10a 0a01 	add.w	sl, sl, #1
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	9307      	str	r3, [sp, #28]
 80083c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083c4:	931a      	str	r3, [sp, #104]	; 0x68
 80083c6:	4654      	mov	r4, sl
 80083c8:	2205      	movs	r2, #5
 80083ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ce:	4858      	ldr	r0, [pc, #352]	; (8008530 <_vfiprintf_r+0x24c>)
 80083d0:	f000 fcc0 	bl	8008d54 <memchr>
 80083d4:	9a04      	ldr	r2, [sp, #16]
 80083d6:	b9d8      	cbnz	r0, 8008410 <_vfiprintf_r+0x12c>
 80083d8:	06d1      	lsls	r1, r2, #27
 80083da:	bf44      	itt	mi
 80083dc:	2320      	movmi	r3, #32
 80083de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e2:	0713      	lsls	r3, r2, #28
 80083e4:	bf44      	itt	mi
 80083e6:	232b      	movmi	r3, #43	; 0x2b
 80083e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ec:	f89a 3000 	ldrb.w	r3, [sl]
 80083f0:	2b2a      	cmp	r3, #42	; 0x2a
 80083f2:	d015      	beq.n	8008420 <_vfiprintf_r+0x13c>
 80083f4:	4654      	mov	r4, sl
 80083f6:	2000      	movs	r0, #0
 80083f8:	f04f 0c0a 	mov.w	ip, #10
 80083fc:	9a07      	ldr	r2, [sp, #28]
 80083fe:	4621      	mov	r1, r4
 8008400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008404:	3b30      	subs	r3, #48	; 0x30
 8008406:	2b09      	cmp	r3, #9
 8008408:	d94e      	bls.n	80084a8 <_vfiprintf_r+0x1c4>
 800840a:	b1b0      	cbz	r0, 800843a <_vfiprintf_r+0x156>
 800840c:	9207      	str	r2, [sp, #28]
 800840e:	e014      	b.n	800843a <_vfiprintf_r+0x156>
 8008410:	eba0 0308 	sub.w	r3, r0, r8
 8008414:	fa09 f303 	lsl.w	r3, r9, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	46a2      	mov	sl, r4
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	e7d2      	b.n	80083c6 <_vfiprintf_r+0xe2>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	1d19      	adds	r1, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	9103      	str	r1, [sp, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfbb      	ittet	lt
 800842c:	425b      	neglt	r3, r3
 800842e:	f042 0202 	orrlt.w	r2, r2, #2
 8008432:	9307      	strge	r3, [sp, #28]
 8008434:	9307      	strlt	r3, [sp, #28]
 8008436:	bfb8      	it	lt
 8008438:	9204      	strlt	r2, [sp, #16]
 800843a:	7823      	ldrb	r3, [r4, #0]
 800843c:	2b2e      	cmp	r3, #46	; 0x2e
 800843e:	d10c      	bne.n	800845a <_vfiprintf_r+0x176>
 8008440:	7863      	ldrb	r3, [r4, #1]
 8008442:	2b2a      	cmp	r3, #42	; 0x2a
 8008444:	d135      	bne.n	80084b2 <_vfiprintf_r+0x1ce>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	3402      	adds	r4, #2
 800844a:	1d1a      	adds	r2, r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	9203      	str	r2, [sp, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfb8      	it	lt
 8008454:	f04f 33ff 	movlt.w	r3, #4294967295
 8008458:	9305      	str	r3, [sp, #20]
 800845a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008534 <_vfiprintf_r+0x250>
 800845e:	2203      	movs	r2, #3
 8008460:	4650      	mov	r0, sl
 8008462:	7821      	ldrb	r1, [r4, #0]
 8008464:	f000 fc76 	bl	8008d54 <memchr>
 8008468:	b140      	cbz	r0, 800847c <_vfiprintf_r+0x198>
 800846a:	2340      	movs	r3, #64	; 0x40
 800846c:	eba0 000a 	sub.w	r0, r0, sl
 8008470:	fa03 f000 	lsl.w	r0, r3, r0
 8008474:	9b04      	ldr	r3, [sp, #16]
 8008476:	3401      	adds	r4, #1
 8008478:	4303      	orrs	r3, r0
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008480:	2206      	movs	r2, #6
 8008482:	482d      	ldr	r0, [pc, #180]	; (8008538 <_vfiprintf_r+0x254>)
 8008484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008488:	f000 fc64 	bl	8008d54 <memchr>
 800848c:	2800      	cmp	r0, #0
 800848e:	d03f      	beq.n	8008510 <_vfiprintf_r+0x22c>
 8008490:	4b2a      	ldr	r3, [pc, #168]	; (800853c <_vfiprintf_r+0x258>)
 8008492:	bb1b      	cbnz	r3, 80084dc <_vfiprintf_r+0x1f8>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	3307      	adds	r3, #7
 8008498:	f023 0307 	bic.w	r3, r3, #7
 800849c:	3308      	adds	r3, #8
 800849e:	9303      	str	r3, [sp, #12]
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	443b      	add	r3, r7
 80084a4:	9309      	str	r3, [sp, #36]	; 0x24
 80084a6:	e767      	b.n	8008378 <_vfiprintf_r+0x94>
 80084a8:	460c      	mov	r4, r1
 80084aa:	2001      	movs	r0, #1
 80084ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b0:	e7a5      	b.n	80083fe <_vfiprintf_r+0x11a>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f04f 0c0a 	mov.w	ip, #10
 80084b8:	4619      	mov	r1, r3
 80084ba:	3401      	adds	r4, #1
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	4620      	mov	r0, r4
 80084c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c4:	3a30      	subs	r2, #48	; 0x30
 80084c6:	2a09      	cmp	r2, #9
 80084c8:	d903      	bls.n	80084d2 <_vfiprintf_r+0x1ee>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0c5      	beq.n	800845a <_vfiprintf_r+0x176>
 80084ce:	9105      	str	r1, [sp, #20]
 80084d0:	e7c3      	b.n	800845a <_vfiprintf_r+0x176>
 80084d2:	4604      	mov	r4, r0
 80084d4:	2301      	movs	r3, #1
 80084d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084da:	e7f0      	b.n	80084be <_vfiprintf_r+0x1da>
 80084dc:	ab03      	add	r3, sp, #12
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	462a      	mov	r2, r5
 80084e2:	4630      	mov	r0, r6
 80084e4:	4b16      	ldr	r3, [pc, #88]	; (8008540 <_vfiprintf_r+0x25c>)
 80084e6:	a904      	add	r1, sp, #16
 80084e8:	f3af 8000 	nop.w
 80084ec:	4607      	mov	r7, r0
 80084ee:	1c78      	adds	r0, r7, #1
 80084f0:	d1d6      	bne.n	80084a0 <_vfiprintf_r+0x1bc>
 80084f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f4:	07d9      	lsls	r1, r3, #31
 80084f6:	d405      	bmi.n	8008504 <_vfiprintf_r+0x220>
 80084f8:	89ab      	ldrh	r3, [r5, #12]
 80084fa:	059a      	lsls	r2, r3, #22
 80084fc:	d402      	bmi.n	8008504 <_vfiprintf_r+0x220>
 80084fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008500:	f7fe fda2 	bl	8007048 <__retarget_lock_release_recursive>
 8008504:	89ab      	ldrh	r3, [r5, #12]
 8008506:	065b      	lsls	r3, r3, #25
 8008508:	f53f af12 	bmi.w	8008330 <_vfiprintf_r+0x4c>
 800850c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800850e:	e711      	b.n	8008334 <_vfiprintf_r+0x50>
 8008510:	ab03      	add	r3, sp, #12
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	462a      	mov	r2, r5
 8008516:	4630      	mov	r0, r6
 8008518:	4b09      	ldr	r3, [pc, #36]	; (8008540 <_vfiprintf_r+0x25c>)
 800851a:	a904      	add	r1, sp, #16
 800851c:	f000 f882 	bl	8008624 <_printf_i>
 8008520:	e7e4      	b.n	80084ec <_vfiprintf_r+0x208>
 8008522:	bf00      	nop
 8008524:	08009444 	.word	0x08009444
 8008528:	08009464 	.word	0x08009464
 800852c:	08009424 	.word	0x08009424
 8008530:	08009639 	.word	0x08009639
 8008534:	0800963f 	.word	0x0800963f
 8008538:	08009643 	.word	0x08009643
 800853c:	00000000 	.word	0x00000000
 8008540:	080082bf 	.word	0x080082bf

08008544 <_printf_common>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	4616      	mov	r6, r2
 800854a:	4699      	mov	r9, r3
 800854c:	688a      	ldr	r2, [r1, #8]
 800854e:	690b      	ldr	r3, [r1, #16]
 8008550:	4607      	mov	r7, r0
 8008552:	4293      	cmp	r3, r2
 8008554:	bfb8      	it	lt
 8008556:	4613      	movlt	r3, r2
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800855e:	460c      	mov	r4, r1
 8008560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008564:	b10a      	cbz	r2, 800856a <_printf_common+0x26>
 8008566:	3301      	adds	r3, #1
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	0699      	lsls	r1, r3, #26
 800856e:	bf42      	ittt	mi
 8008570:	6833      	ldrmi	r3, [r6, #0]
 8008572:	3302      	addmi	r3, #2
 8008574:	6033      	strmi	r3, [r6, #0]
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	f015 0506 	ands.w	r5, r5, #6
 800857c:	d106      	bne.n	800858c <_printf_common+0x48>
 800857e:	f104 0a19 	add.w	sl, r4, #25
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	6832      	ldr	r2, [r6, #0]
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	42ab      	cmp	r3, r5
 800858a:	dc28      	bgt.n	80085de <_printf_common+0x9a>
 800858c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008590:	1e13      	subs	r3, r2, #0
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	bf18      	it	ne
 8008596:	2301      	movne	r3, #1
 8008598:	0692      	lsls	r2, r2, #26
 800859a:	d42d      	bmi.n	80085f8 <_printf_common+0xb4>
 800859c:	4649      	mov	r1, r9
 800859e:	4638      	mov	r0, r7
 80085a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a4:	47c0      	blx	r8
 80085a6:	3001      	adds	r0, #1
 80085a8:	d020      	beq.n	80085ec <_printf_common+0xa8>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	68e5      	ldr	r5, [r4, #12]
 80085ae:	f003 0306 	and.w	r3, r3, #6
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	bf18      	it	ne
 80085b6:	2500      	movne	r5, #0
 80085b8:	6832      	ldr	r2, [r6, #0]
 80085ba:	f04f 0600 	mov.w	r6, #0
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	bf08      	it	eq
 80085c2:	1aad      	subeq	r5, r5, r2
 80085c4:	6922      	ldr	r2, [r4, #16]
 80085c6:	bf08      	it	eq
 80085c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085cc:	4293      	cmp	r3, r2
 80085ce:	bfc4      	itt	gt
 80085d0:	1a9b      	subgt	r3, r3, r2
 80085d2:	18ed      	addgt	r5, r5, r3
 80085d4:	341a      	adds	r4, #26
 80085d6:	42b5      	cmp	r5, r6
 80085d8:	d11a      	bne.n	8008610 <_printf_common+0xcc>
 80085da:	2000      	movs	r0, #0
 80085dc:	e008      	b.n	80085f0 <_printf_common+0xac>
 80085de:	2301      	movs	r3, #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	4649      	mov	r1, r9
 80085e4:	4638      	mov	r0, r7
 80085e6:	47c0      	blx	r8
 80085e8:	3001      	adds	r0, #1
 80085ea:	d103      	bne.n	80085f4 <_printf_common+0xb0>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f4:	3501      	adds	r5, #1
 80085f6:	e7c4      	b.n	8008582 <_printf_common+0x3e>
 80085f8:	2030      	movs	r0, #48	; 0x30
 80085fa:	18e1      	adds	r1, r4, r3
 80085fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008606:	4422      	add	r2, r4
 8008608:	3302      	adds	r3, #2
 800860a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800860e:	e7c5      	b.n	800859c <_printf_common+0x58>
 8008610:	2301      	movs	r3, #1
 8008612:	4622      	mov	r2, r4
 8008614:	4649      	mov	r1, r9
 8008616:	4638      	mov	r0, r7
 8008618:	47c0      	blx	r8
 800861a:	3001      	adds	r0, #1
 800861c:	d0e6      	beq.n	80085ec <_printf_common+0xa8>
 800861e:	3601      	adds	r6, #1
 8008620:	e7d9      	b.n	80085d6 <_printf_common+0x92>
	...

08008624 <_printf_i>:
 8008624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	7e0f      	ldrb	r7, [r1, #24]
 800862a:	4691      	mov	r9, r2
 800862c:	2f78      	cmp	r7, #120	; 0x78
 800862e:	4680      	mov	r8, r0
 8008630:	460c      	mov	r4, r1
 8008632:	469a      	mov	sl, r3
 8008634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800863a:	d807      	bhi.n	800864c <_printf_i+0x28>
 800863c:	2f62      	cmp	r7, #98	; 0x62
 800863e:	d80a      	bhi.n	8008656 <_printf_i+0x32>
 8008640:	2f00      	cmp	r7, #0
 8008642:	f000 80d9 	beq.w	80087f8 <_printf_i+0x1d4>
 8008646:	2f58      	cmp	r7, #88	; 0x58
 8008648:	f000 80a4 	beq.w	8008794 <_printf_i+0x170>
 800864c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008654:	e03a      	b.n	80086cc <_printf_i+0xa8>
 8008656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800865a:	2b15      	cmp	r3, #21
 800865c:	d8f6      	bhi.n	800864c <_printf_i+0x28>
 800865e:	a101      	add	r1, pc, #4	; (adr r1, 8008664 <_printf_i+0x40>)
 8008660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086d1 	.word	0x080086d1
 800866c:	0800864d 	.word	0x0800864d
 8008670:	0800864d 	.word	0x0800864d
 8008674:	0800864d 	.word	0x0800864d
 8008678:	0800864d 	.word	0x0800864d
 800867c:	080086d1 	.word	0x080086d1
 8008680:	0800864d 	.word	0x0800864d
 8008684:	0800864d 	.word	0x0800864d
 8008688:	0800864d 	.word	0x0800864d
 800868c:	0800864d 	.word	0x0800864d
 8008690:	080087df 	.word	0x080087df
 8008694:	08008701 	.word	0x08008701
 8008698:	080087c1 	.word	0x080087c1
 800869c:	0800864d 	.word	0x0800864d
 80086a0:	0800864d 	.word	0x0800864d
 80086a4:	08008801 	.word	0x08008801
 80086a8:	0800864d 	.word	0x0800864d
 80086ac:	08008701 	.word	0x08008701
 80086b0:	0800864d 	.word	0x0800864d
 80086b4:	0800864d 	.word	0x0800864d
 80086b8:	080087c9 	.word	0x080087c9
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	602a      	str	r2, [r5, #0]
 80086c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0a4      	b.n	800881a <_printf_i+0x1f6>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	6829      	ldr	r1, [r5, #0]
 80086d4:	0606      	lsls	r6, r0, #24
 80086d6:	f101 0304 	add.w	r3, r1, #4
 80086da:	d50a      	bpl.n	80086f2 <_printf_i+0xce>
 80086dc:	680e      	ldr	r6, [r1, #0]
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	da03      	bge.n	80086ec <_printf_i+0xc8>
 80086e4:	232d      	movs	r3, #45	; 0x2d
 80086e6:	4276      	negs	r6, r6
 80086e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ec:	230a      	movs	r3, #10
 80086ee:	485e      	ldr	r0, [pc, #376]	; (8008868 <_printf_i+0x244>)
 80086f0:	e019      	b.n	8008726 <_printf_i+0x102>
 80086f2:	680e      	ldr	r6, [r1, #0]
 80086f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	bf18      	it	ne
 80086fc:	b236      	sxthne	r6, r6
 80086fe:	e7ef      	b.n	80086e0 <_printf_i+0xbc>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6820      	ldr	r0, [r4, #0]
 8008704:	1d19      	adds	r1, r3, #4
 8008706:	6029      	str	r1, [r5, #0]
 8008708:	0601      	lsls	r1, r0, #24
 800870a:	d501      	bpl.n	8008710 <_printf_i+0xec>
 800870c:	681e      	ldr	r6, [r3, #0]
 800870e:	e002      	b.n	8008716 <_printf_i+0xf2>
 8008710:	0646      	lsls	r6, r0, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0xe8>
 8008714:	881e      	ldrh	r6, [r3, #0]
 8008716:	2f6f      	cmp	r7, #111	; 0x6f
 8008718:	bf0c      	ite	eq
 800871a:	2308      	moveq	r3, #8
 800871c:	230a      	movne	r3, #10
 800871e:	4852      	ldr	r0, [pc, #328]	; (8008868 <_printf_i+0x244>)
 8008720:	2100      	movs	r1, #0
 8008722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008726:	6865      	ldr	r5, [r4, #4]
 8008728:	2d00      	cmp	r5, #0
 800872a:	bfa8      	it	ge
 800872c:	6821      	ldrge	r1, [r4, #0]
 800872e:	60a5      	str	r5, [r4, #8]
 8008730:	bfa4      	itt	ge
 8008732:	f021 0104 	bicge.w	r1, r1, #4
 8008736:	6021      	strge	r1, [r4, #0]
 8008738:	b90e      	cbnz	r6, 800873e <_printf_i+0x11a>
 800873a:	2d00      	cmp	r5, #0
 800873c:	d04d      	beq.n	80087da <_printf_i+0x1b6>
 800873e:	4615      	mov	r5, r2
 8008740:	fbb6 f1f3 	udiv	r1, r6, r3
 8008744:	fb03 6711 	mls	r7, r3, r1, r6
 8008748:	5dc7      	ldrb	r7, [r0, r7]
 800874a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800874e:	4637      	mov	r7, r6
 8008750:	42bb      	cmp	r3, r7
 8008752:	460e      	mov	r6, r1
 8008754:	d9f4      	bls.n	8008740 <_printf_i+0x11c>
 8008756:	2b08      	cmp	r3, #8
 8008758:	d10b      	bne.n	8008772 <_printf_i+0x14e>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	07de      	lsls	r6, r3, #31
 800875e:	d508      	bpl.n	8008772 <_printf_i+0x14e>
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	6861      	ldr	r1, [r4, #4]
 8008764:	4299      	cmp	r1, r3
 8008766:	bfde      	ittt	le
 8008768:	2330      	movle	r3, #48	; 0x30
 800876a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800876e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008772:	1b52      	subs	r2, r2, r5
 8008774:	6122      	str	r2, [r4, #16]
 8008776:	464b      	mov	r3, r9
 8008778:	4621      	mov	r1, r4
 800877a:	4640      	mov	r0, r8
 800877c:	f8cd a000 	str.w	sl, [sp]
 8008780:	aa03      	add	r2, sp, #12
 8008782:	f7ff fedf 	bl	8008544 <_printf_common>
 8008786:	3001      	adds	r0, #1
 8008788:	d14c      	bne.n	8008824 <_printf_i+0x200>
 800878a:	f04f 30ff 	mov.w	r0, #4294967295
 800878e:	b004      	add	sp, #16
 8008790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008794:	4834      	ldr	r0, [pc, #208]	; (8008868 <_printf_i+0x244>)
 8008796:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800879a:	6829      	ldr	r1, [r5, #0]
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	f851 6b04 	ldr.w	r6, [r1], #4
 80087a2:	6029      	str	r1, [r5, #0]
 80087a4:	061d      	lsls	r5, r3, #24
 80087a6:	d514      	bpl.n	80087d2 <_printf_i+0x1ae>
 80087a8:	07df      	lsls	r7, r3, #31
 80087aa:	bf44      	itt	mi
 80087ac:	f043 0320 	orrmi.w	r3, r3, #32
 80087b0:	6023      	strmi	r3, [r4, #0]
 80087b2:	b91e      	cbnz	r6, 80087bc <_printf_i+0x198>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	f023 0320 	bic.w	r3, r3, #32
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	2310      	movs	r3, #16
 80087be:	e7af      	b.n	8008720 <_printf_i+0xfc>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	f043 0320 	orr.w	r3, r3, #32
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	2378      	movs	r3, #120	; 0x78
 80087ca:	4828      	ldr	r0, [pc, #160]	; (800886c <_printf_i+0x248>)
 80087cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087d0:	e7e3      	b.n	800879a <_printf_i+0x176>
 80087d2:	0659      	lsls	r1, r3, #25
 80087d4:	bf48      	it	mi
 80087d6:	b2b6      	uxthmi	r6, r6
 80087d8:	e7e6      	b.n	80087a8 <_printf_i+0x184>
 80087da:	4615      	mov	r5, r2
 80087dc:	e7bb      	b.n	8008756 <_printf_i+0x132>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	6826      	ldr	r6, [r4, #0]
 80087e2:	1d18      	adds	r0, r3, #4
 80087e4:	6961      	ldr	r1, [r4, #20]
 80087e6:	6028      	str	r0, [r5, #0]
 80087e8:	0635      	lsls	r5, r6, #24
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	d501      	bpl.n	80087f2 <_printf_i+0x1ce>
 80087ee:	6019      	str	r1, [r3, #0]
 80087f0:	e002      	b.n	80087f8 <_printf_i+0x1d4>
 80087f2:	0670      	lsls	r0, r6, #25
 80087f4:	d5fb      	bpl.n	80087ee <_printf_i+0x1ca>
 80087f6:	8019      	strh	r1, [r3, #0]
 80087f8:	2300      	movs	r3, #0
 80087fa:	4615      	mov	r5, r2
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	e7ba      	b.n	8008776 <_printf_i+0x152>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	2100      	movs	r1, #0
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	602a      	str	r2, [r5, #0]
 8008808:	681d      	ldr	r5, [r3, #0]
 800880a:	6862      	ldr	r2, [r4, #4]
 800880c:	4628      	mov	r0, r5
 800880e:	f000 faa1 	bl	8008d54 <memchr>
 8008812:	b108      	cbz	r0, 8008818 <_printf_i+0x1f4>
 8008814:	1b40      	subs	r0, r0, r5
 8008816:	6060      	str	r0, [r4, #4]
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	2300      	movs	r3, #0
 800881e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008822:	e7a8      	b.n	8008776 <_printf_i+0x152>
 8008824:	462a      	mov	r2, r5
 8008826:	4649      	mov	r1, r9
 8008828:	4640      	mov	r0, r8
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	47d0      	blx	sl
 800882e:	3001      	adds	r0, #1
 8008830:	d0ab      	beq.n	800878a <_printf_i+0x166>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	079b      	lsls	r3, r3, #30
 8008836:	d413      	bmi.n	8008860 <_printf_i+0x23c>
 8008838:	68e0      	ldr	r0, [r4, #12]
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	4298      	cmp	r0, r3
 800883e:	bfb8      	it	lt
 8008840:	4618      	movlt	r0, r3
 8008842:	e7a4      	b.n	800878e <_printf_i+0x16a>
 8008844:	2301      	movs	r3, #1
 8008846:	4632      	mov	r2, r6
 8008848:	4649      	mov	r1, r9
 800884a:	4640      	mov	r0, r8
 800884c:	47d0      	blx	sl
 800884e:	3001      	adds	r0, #1
 8008850:	d09b      	beq.n	800878a <_printf_i+0x166>
 8008852:	3501      	adds	r5, #1
 8008854:	68e3      	ldr	r3, [r4, #12]
 8008856:	9903      	ldr	r1, [sp, #12]
 8008858:	1a5b      	subs	r3, r3, r1
 800885a:	42ab      	cmp	r3, r5
 800885c:	dcf2      	bgt.n	8008844 <_printf_i+0x220>
 800885e:	e7eb      	b.n	8008838 <_printf_i+0x214>
 8008860:	2500      	movs	r5, #0
 8008862:	f104 0619 	add.w	r6, r4, #25
 8008866:	e7f5      	b.n	8008854 <_printf_i+0x230>
 8008868:	0800964a 	.word	0x0800964a
 800886c:	0800965b 	.word	0x0800965b

08008870 <_scanf_chars>:
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	4615      	mov	r5, r2
 8008876:	688a      	ldr	r2, [r1, #8]
 8008878:	4680      	mov	r8, r0
 800887a:	460c      	mov	r4, r1
 800887c:	b932      	cbnz	r2, 800888c <_scanf_chars+0x1c>
 800887e:	698a      	ldr	r2, [r1, #24]
 8008880:	2a00      	cmp	r2, #0
 8008882:	bf0c      	ite	eq
 8008884:	2201      	moveq	r2, #1
 8008886:	f04f 32ff 	movne.w	r2, #4294967295
 800888a:	608a      	str	r2, [r1, #8]
 800888c:	2700      	movs	r7, #0
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008920 <_scanf_chars+0xb0>
 8008894:	06d1      	lsls	r1, r2, #27
 8008896:	bf5f      	itttt	pl
 8008898:	681a      	ldrpl	r2, [r3, #0]
 800889a:	1d11      	addpl	r1, r2, #4
 800889c:	6019      	strpl	r1, [r3, #0]
 800889e:	6816      	ldrpl	r6, [r2, #0]
 80088a0:	69a0      	ldr	r0, [r4, #24]
 80088a2:	b188      	cbz	r0, 80088c8 <_scanf_chars+0x58>
 80088a4:	2801      	cmp	r0, #1
 80088a6:	d107      	bne.n	80088b8 <_scanf_chars+0x48>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	6963      	ldr	r3, [r4, #20]
 80088ae:	5c9b      	ldrb	r3, [r3, r2]
 80088b0:	b953      	cbnz	r3, 80088c8 <_scanf_chars+0x58>
 80088b2:	2f00      	cmp	r7, #0
 80088b4:	d031      	beq.n	800891a <_scanf_chars+0xaa>
 80088b6:	e022      	b.n	80088fe <_scanf_chars+0x8e>
 80088b8:	2802      	cmp	r0, #2
 80088ba:	d120      	bne.n	80088fe <_scanf_chars+0x8e>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80088c4:	071b      	lsls	r3, r3, #28
 80088c6:	d41a      	bmi.n	80088fe <_scanf_chars+0x8e>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	3701      	adds	r7, #1
 80088cc:	06da      	lsls	r2, r3, #27
 80088ce:	bf5e      	ittt	pl
 80088d0:	682b      	ldrpl	r3, [r5, #0]
 80088d2:	781b      	ldrbpl	r3, [r3, #0]
 80088d4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80088d8:	682a      	ldr	r2, [r5, #0]
 80088da:	686b      	ldr	r3, [r5, #4]
 80088dc:	3201      	adds	r2, #1
 80088de:	602a      	str	r2, [r5, #0]
 80088e0:	68a2      	ldr	r2, [r4, #8]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	3a01      	subs	r2, #1
 80088e6:	606b      	str	r3, [r5, #4]
 80088e8:	60a2      	str	r2, [r4, #8]
 80088ea:	b142      	cbz	r2, 80088fe <_scanf_chars+0x8e>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	dcd7      	bgt.n	80088a0 <_scanf_chars+0x30>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4640      	mov	r0, r8
 80088f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80088f8:	4798      	blx	r3
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0d0      	beq.n	80088a0 <_scanf_chars+0x30>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	f013 0310 	ands.w	r3, r3, #16
 8008904:	d105      	bne.n	8008912 <_scanf_chars+0xa2>
 8008906:	68e2      	ldr	r2, [r4, #12]
 8008908:	3201      	adds	r2, #1
 800890a:	60e2      	str	r2, [r4, #12]
 800890c:	69a2      	ldr	r2, [r4, #24]
 800890e:	b102      	cbz	r2, 8008912 <_scanf_chars+0xa2>
 8008910:	7033      	strb	r3, [r6, #0]
 8008912:	2000      	movs	r0, #0
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	443b      	add	r3, r7
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800891e:	bf00      	nop
 8008920:	08009539 	.word	0x08009539

08008924 <_scanf_i>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	460c      	mov	r4, r1
 800892a:	4698      	mov	r8, r3
 800892c:	4b75      	ldr	r3, [pc, #468]	; (8008b04 <_scanf_i+0x1e0>)
 800892e:	b087      	sub	sp, #28
 8008930:	4682      	mov	sl, r0
 8008932:	4616      	mov	r6, r2
 8008934:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008938:	ab03      	add	r3, sp, #12
 800893a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800893e:	4b72      	ldr	r3, [pc, #456]	; (8008b08 <_scanf_i+0x1e4>)
 8008940:	69a1      	ldr	r1, [r4, #24]
 8008942:	4a72      	ldr	r2, [pc, #456]	; (8008b0c <_scanf_i+0x1e8>)
 8008944:	4627      	mov	r7, r4
 8008946:	2903      	cmp	r1, #3
 8008948:	bf18      	it	ne
 800894a:	461a      	movne	r2, r3
 800894c:	68a3      	ldr	r3, [r4, #8]
 800894e:	9201      	str	r2, [sp, #4]
 8008950:	1e5a      	subs	r2, r3, #1
 8008952:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008956:	bf81      	itttt	hi
 8008958:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800895c:	eb03 0905 	addhi.w	r9, r3, r5
 8008960:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008964:	60a3      	strhi	r3, [r4, #8]
 8008966:	f857 3b1c 	ldr.w	r3, [r7], #28
 800896a:	bf98      	it	ls
 800896c:	f04f 0900 	movls.w	r9, #0
 8008970:	463d      	mov	r5, r7
 8008972:	f04f 0b00 	mov.w	fp, #0
 8008976:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	6831      	ldr	r1, [r6, #0]
 800897e:	ab03      	add	r3, sp, #12
 8008980:	2202      	movs	r2, #2
 8008982:	7809      	ldrb	r1, [r1, #0]
 8008984:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008988:	f000 f9e4 	bl	8008d54 <memchr>
 800898c:	b328      	cbz	r0, 80089da <_scanf_i+0xb6>
 800898e:	f1bb 0f01 	cmp.w	fp, #1
 8008992:	d159      	bne.n	8008a48 <_scanf_i+0x124>
 8008994:	6862      	ldr	r2, [r4, #4]
 8008996:	b92a      	cbnz	r2, 80089a4 <_scanf_i+0x80>
 8008998:	2308      	movs	r3, #8
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	6063      	str	r3, [r4, #4]
 800899e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	6822      	ldr	r2, [r4, #0]
 80089a6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80089aa:	6022      	str	r2, [r4, #0]
 80089ac:	68a2      	ldr	r2, [r4, #8]
 80089ae:	1e51      	subs	r1, r2, #1
 80089b0:	60a1      	str	r1, [r4, #8]
 80089b2:	b192      	cbz	r2, 80089da <_scanf_i+0xb6>
 80089b4:	6832      	ldr	r2, [r6, #0]
 80089b6:	1c51      	adds	r1, r2, #1
 80089b8:	6031      	str	r1, [r6, #0]
 80089ba:	7812      	ldrb	r2, [r2, #0]
 80089bc:	f805 2b01 	strb.w	r2, [r5], #1
 80089c0:	6872      	ldr	r2, [r6, #4]
 80089c2:	3a01      	subs	r2, #1
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	6072      	str	r2, [r6, #4]
 80089c8:	dc07      	bgt.n	80089da <_scanf_i+0xb6>
 80089ca:	4631      	mov	r1, r6
 80089cc:	4650      	mov	r0, sl
 80089ce:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80089d2:	4790      	blx	r2
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f040 8085 	bne.w	8008ae4 <_scanf_i+0x1c0>
 80089da:	f10b 0b01 	add.w	fp, fp, #1
 80089de:	f1bb 0f03 	cmp.w	fp, #3
 80089e2:	d1cb      	bne.n	800897c <_scanf_i+0x58>
 80089e4:	6863      	ldr	r3, [r4, #4]
 80089e6:	b90b      	cbnz	r3, 80089ec <_scanf_i+0xc8>
 80089e8:	230a      	movs	r3, #10
 80089ea:	6063      	str	r3, [r4, #4]
 80089ec:	6863      	ldr	r3, [r4, #4]
 80089ee:	4948      	ldr	r1, [pc, #288]	; (8008b10 <_scanf_i+0x1ec>)
 80089f0:	6960      	ldr	r0, [r4, #20]
 80089f2:	1ac9      	subs	r1, r1, r3
 80089f4:	f000 f8a0 	bl	8008b38 <__sccl>
 80089f8:	f04f 0b00 	mov.w	fp, #0
 80089fc:	68a3      	ldr	r3, [r4, #8]
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d03d      	beq.n	8008a80 <_scanf_i+0x15c>
 8008a04:	6831      	ldr	r1, [r6, #0]
 8008a06:	6960      	ldr	r0, [r4, #20]
 8008a08:	f891 c000 	ldrb.w	ip, [r1]
 8008a0c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d035      	beq.n	8008a80 <_scanf_i+0x15c>
 8008a14:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008a18:	d124      	bne.n	8008a64 <_scanf_i+0x140>
 8008a1a:	0510      	lsls	r0, r2, #20
 8008a1c:	d522      	bpl.n	8008a64 <_scanf_i+0x140>
 8008a1e:	f10b 0b01 	add.w	fp, fp, #1
 8008a22:	f1b9 0f00 	cmp.w	r9, #0
 8008a26:	d003      	beq.n	8008a30 <_scanf_i+0x10c>
 8008a28:	3301      	adds	r3, #1
 8008a2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a2e:	60a3      	str	r3, [r4, #8]
 8008a30:	6873      	ldr	r3, [r6, #4]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	6073      	str	r3, [r6, #4]
 8008a38:	dd1b      	ble.n	8008a72 <_scanf_i+0x14e>
 8008a3a:	6833      	ldr	r3, [r6, #0]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	6033      	str	r3, [r6, #0]
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	e7d9      	b.n	80089fc <_scanf_i+0xd8>
 8008a48:	f1bb 0f02 	cmp.w	fp, #2
 8008a4c:	d1ae      	bne.n	80089ac <_scanf_i+0x88>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008a54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008a58:	d1bf      	bne.n	80089da <_scanf_i+0xb6>
 8008a5a:	2310      	movs	r3, #16
 8008a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	e7a2      	b.n	80089aa <_scanf_i+0x86>
 8008a64:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008a68:	6022      	str	r2, [r4, #0]
 8008a6a:	780b      	ldrb	r3, [r1, #0]
 8008a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8008a70:	e7de      	b.n	8008a30 <_scanf_i+0x10c>
 8008a72:	4631      	mov	r1, r6
 8008a74:	4650      	mov	r0, sl
 8008a76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a7a:	4798      	blx	r3
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d0df      	beq.n	8008a40 <_scanf_i+0x11c>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	05db      	lsls	r3, r3, #23
 8008a84:	d50d      	bpl.n	8008aa2 <_scanf_i+0x17e>
 8008a86:	42bd      	cmp	r5, r7
 8008a88:	d909      	bls.n	8008a9e <_scanf_i+0x17a>
 8008a8a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008a8e:	4632      	mov	r2, r6
 8008a90:	4650      	mov	r0, sl
 8008a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a96:	f105 39ff 	add.w	r9, r5, #4294967295
 8008a9a:	4798      	blx	r3
 8008a9c:	464d      	mov	r5, r9
 8008a9e:	42bd      	cmp	r5, r7
 8008aa0:	d02d      	beq.n	8008afe <_scanf_i+0x1da>
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	f012 0210 	ands.w	r2, r2, #16
 8008aa8:	d113      	bne.n	8008ad2 <_scanf_i+0x1ae>
 8008aaa:	702a      	strb	r2, [r5, #0]
 8008aac:	4639      	mov	r1, r7
 8008aae:	6863      	ldr	r3, [r4, #4]
 8008ab0:	4650      	mov	r0, sl
 8008ab2:	9e01      	ldr	r6, [sp, #4]
 8008ab4:	47b0      	blx	r6
 8008ab6:	6821      	ldr	r1, [r4, #0]
 8008ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8008abc:	f011 0f20 	tst.w	r1, #32
 8008ac0:	d013      	beq.n	8008aea <_scanf_i+0x1c6>
 8008ac2:	1d1a      	adds	r2, r3, #4
 8008ac4:	f8c8 2000 	str.w	r2, [r8]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6018      	str	r0, [r3, #0]
 8008acc:	68e3      	ldr	r3, [r4, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60e3      	str	r3, [r4, #12]
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	1bed      	subs	r5, r5, r7
 8008ad6:	44ab      	add	fp, r5
 8008ad8:	6925      	ldr	r5, [r4, #16]
 8008ada:	445d      	add	r5, fp
 8008adc:	6125      	str	r5, [r4, #16]
 8008ade:	b007      	add	sp, #28
 8008ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae4:	f04f 0b00 	mov.w	fp, #0
 8008ae8:	e7ca      	b.n	8008a80 <_scanf_i+0x15c>
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	f8c8 2000 	str.w	r2, [r8]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f011 0f01 	tst.w	r1, #1
 8008af6:	bf14      	ite	ne
 8008af8:	8018      	strhne	r0, [r3, #0]
 8008afa:	6018      	streq	r0, [r3, #0]
 8008afc:	e7e6      	b.n	8008acc <_scanf_i+0x1a8>
 8008afe:	2001      	movs	r0, #1
 8008b00:	e7ed      	b.n	8008ade <_scanf_i+0x1ba>
 8008b02:	bf00      	nop
 8008b04:	080093f4 	.word	0x080093f4
 8008b08:	08008c8d 	.word	0x08008c8d
 8008b0c:	080076d5 	.word	0x080076d5
 8008b10:	08009685 	.word	0x08009685

08008b14 <_read_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4d05      	ldr	r5, [pc, #20]	; (8008b34 <_read_r+0x20>)
 8008b20:	602a      	str	r2, [r5, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f7f7 ff25 	bl	8000972 <_read>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_read_r+0x1e>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_read_r+0x1e>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	20001ce4 	.word	0x20001ce4

08008b38 <__sccl>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	780b      	ldrb	r3, [r1, #0]
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	2b5e      	cmp	r3, #94	; 0x5e
 8008b40:	bf13      	iteet	ne
 8008b42:	2200      	movne	r2, #0
 8008b44:	2201      	moveq	r2, #1
 8008b46:	784b      	ldrbeq	r3, [r1, #1]
 8008b48:	1c48      	addne	r0, r1, #1
 8008b4a:	bf08      	it	eq
 8008b4c:	1c88      	addeq	r0, r1, #2
 8008b4e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008b52:	1e61      	subs	r1, r4, #1
 8008b54:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008b58:	42a9      	cmp	r1, r5
 8008b5a:	d1fb      	bne.n	8008b54 <__sccl+0x1c>
 8008b5c:	b90b      	cbnz	r3, 8008b62 <__sccl+0x2a>
 8008b5e:	3801      	subs	r0, #1
 8008b60:	bd70      	pop	{r4, r5, r6, pc}
 8008b62:	f082 0201 	eor.w	r2, r2, #1
 8008b66:	4605      	mov	r5, r0
 8008b68:	54e2      	strb	r2, [r4, r3]
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008b70:	292d      	cmp	r1, #45	; 0x2d
 8008b72:	d006      	beq.n	8008b82 <__sccl+0x4a>
 8008b74:	295d      	cmp	r1, #93	; 0x5d
 8008b76:	d0f3      	beq.n	8008b60 <__sccl+0x28>
 8008b78:	b909      	cbnz	r1, 8008b7e <__sccl+0x46>
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	e7f0      	b.n	8008b60 <__sccl+0x28>
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e7f1      	b.n	8008b66 <__sccl+0x2e>
 8008b82:	786e      	ldrb	r6, [r5, #1]
 8008b84:	2e5d      	cmp	r6, #93	; 0x5d
 8008b86:	d0fa      	beq.n	8008b7e <__sccl+0x46>
 8008b88:	42b3      	cmp	r3, r6
 8008b8a:	dcf8      	bgt.n	8008b7e <__sccl+0x46>
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	3502      	adds	r5, #2
 8008b90:	3101      	adds	r1, #1
 8008b92:	428e      	cmp	r6, r1
 8008b94:	5462      	strb	r2, [r4, r1]
 8008b96:	dcfb      	bgt.n	8008b90 <__sccl+0x58>
 8008b98:	1af1      	subs	r1, r6, r3
 8008b9a:	3901      	subs	r1, #1
 8008b9c:	42b3      	cmp	r3, r6
 8008b9e:	bfa8      	it	ge
 8008ba0:	2100      	movge	r1, #0
 8008ba2:	1c58      	adds	r0, r3, #1
 8008ba4:	1843      	adds	r3, r0, r1
 8008ba6:	e7e0      	b.n	8008b6a <__sccl+0x32>

08008ba8 <_strtoul_l.constprop.0>:
 8008ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bac:	4686      	mov	lr, r0
 8008bae:	460d      	mov	r5, r1
 8008bb0:	4f35      	ldr	r7, [pc, #212]	; (8008c88 <_strtoul_l.constprop.0+0xe0>)
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bb8:	5de6      	ldrb	r6, [r4, r7]
 8008bba:	f016 0608 	ands.w	r6, r6, #8
 8008bbe:	d1f8      	bne.n	8008bb2 <_strtoul_l.constprop.0+0xa>
 8008bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8008bc2:	d12f      	bne.n	8008c24 <_strtoul_l.constprop.0+0x7c>
 8008bc4:	2601      	movs	r6, #1
 8008bc6:	782c      	ldrb	r4, [r5, #0]
 8008bc8:	1c85      	adds	r5, r0, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d057      	beq.n	8008c7e <_strtoul_l.constprop.0+0xd6>
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d109      	bne.n	8008be6 <_strtoul_l.constprop.0+0x3e>
 8008bd2:	2c30      	cmp	r4, #48	; 0x30
 8008bd4:	d107      	bne.n	8008be6 <_strtoul_l.constprop.0+0x3e>
 8008bd6:	7828      	ldrb	r0, [r5, #0]
 8008bd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008bdc:	2858      	cmp	r0, #88	; 0x58
 8008bde:	d149      	bne.n	8008c74 <_strtoul_l.constprop.0+0xcc>
 8008be0:	2310      	movs	r3, #16
 8008be2:	786c      	ldrb	r4, [r5, #1]
 8008be4:	3502      	adds	r5, #2
 8008be6:	f04f 38ff 	mov.w	r8, #4294967295
 8008bea:	fbb8 f8f3 	udiv	r8, r8, r3
 8008bee:	2700      	movs	r7, #0
 8008bf0:	fb03 f908 	mul.w	r9, r3, r8
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	ea6f 0909 	mvn.w	r9, r9
 8008bfa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008bfe:	f1bc 0f09 	cmp.w	ip, #9
 8008c02:	d814      	bhi.n	8008c2e <_strtoul_l.constprop.0+0x86>
 8008c04:	4664      	mov	r4, ip
 8008c06:	42a3      	cmp	r3, r4
 8008c08:	dd22      	ble.n	8008c50 <_strtoul_l.constprop.0+0xa8>
 8008c0a:	2f00      	cmp	r7, #0
 8008c0c:	db1d      	blt.n	8008c4a <_strtoul_l.constprop.0+0xa2>
 8008c0e:	4580      	cmp	r8, r0
 8008c10:	d31b      	bcc.n	8008c4a <_strtoul_l.constprop.0+0xa2>
 8008c12:	d101      	bne.n	8008c18 <_strtoul_l.constprop.0+0x70>
 8008c14:	45a1      	cmp	r9, r4
 8008c16:	db18      	blt.n	8008c4a <_strtoul_l.constprop.0+0xa2>
 8008c18:	2701      	movs	r7, #1
 8008c1a:	fb00 4003 	mla	r0, r0, r3, r4
 8008c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c22:	e7ea      	b.n	8008bfa <_strtoul_l.constprop.0+0x52>
 8008c24:	2c2b      	cmp	r4, #43	; 0x2b
 8008c26:	bf04      	itt	eq
 8008c28:	782c      	ldrbeq	r4, [r5, #0]
 8008c2a:	1c85      	addeq	r5, r0, #2
 8008c2c:	e7cd      	b.n	8008bca <_strtoul_l.constprop.0+0x22>
 8008c2e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008c32:	f1bc 0f19 	cmp.w	ip, #25
 8008c36:	d801      	bhi.n	8008c3c <_strtoul_l.constprop.0+0x94>
 8008c38:	3c37      	subs	r4, #55	; 0x37
 8008c3a:	e7e4      	b.n	8008c06 <_strtoul_l.constprop.0+0x5e>
 8008c3c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008c40:	f1bc 0f19 	cmp.w	ip, #25
 8008c44:	d804      	bhi.n	8008c50 <_strtoul_l.constprop.0+0xa8>
 8008c46:	3c57      	subs	r4, #87	; 0x57
 8008c48:	e7dd      	b.n	8008c06 <_strtoul_l.constprop.0+0x5e>
 8008c4a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c4e:	e7e6      	b.n	8008c1e <_strtoul_l.constprop.0+0x76>
 8008c50:	2f00      	cmp	r7, #0
 8008c52:	da07      	bge.n	8008c64 <_strtoul_l.constprop.0+0xbc>
 8008c54:	2322      	movs	r3, #34	; 0x22
 8008c56:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5a:	f8ce 3000 	str.w	r3, [lr]
 8008c5e:	b932      	cbnz	r2, 8008c6e <_strtoul_l.constprop.0+0xc6>
 8008c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c64:	b106      	cbz	r6, 8008c68 <_strtoul_l.constprop.0+0xc0>
 8008c66:	4240      	negs	r0, r0
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	d0f9      	beq.n	8008c60 <_strtoul_l.constprop.0+0xb8>
 8008c6c:	b107      	cbz	r7, 8008c70 <_strtoul_l.constprop.0+0xc8>
 8008c6e:	1e69      	subs	r1, r5, #1
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	e7f5      	b.n	8008c60 <_strtoul_l.constprop.0+0xb8>
 8008c74:	2430      	movs	r4, #48	; 0x30
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1b5      	bne.n	8008be6 <_strtoul_l.constprop.0+0x3e>
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	e7b3      	b.n	8008be6 <_strtoul_l.constprop.0+0x3e>
 8008c7e:	2c30      	cmp	r4, #48	; 0x30
 8008c80:	d0a9      	beq.n	8008bd6 <_strtoul_l.constprop.0+0x2e>
 8008c82:	230a      	movs	r3, #10
 8008c84:	e7af      	b.n	8008be6 <_strtoul_l.constprop.0+0x3e>
 8008c86:	bf00      	nop
 8008c88:	08009539 	.word	0x08009539

08008c8c <_strtoul_r>:
 8008c8c:	f7ff bf8c 	b.w	8008ba8 <_strtoul_l.constprop.0>

08008c90 <__submore>:
 8008c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	d11b      	bne.n	8008cd8 <__submore+0x48>
 8008ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ca4:	f7fe fa08 	bl	80070b8 <_malloc_r>
 8008ca8:	b918      	cbnz	r0, 8008cb2 <__submore+0x22>
 8008caa:	f04f 30ff 	mov.w	r0, #4294967295
 8008cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cb8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8008cbe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008cc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008cc6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008cca:	7043      	strb	r3, [r0, #1]
 8008ccc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008cd0:	7003      	strb	r3, [r0, #0]
 8008cd2:	6020      	str	r0, [r4, #0]
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	e7ea      	b.n	8008cae <__submore+0x1e>
 8008cd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008cda:	0077      	lsls	r7, r6, #1
 8008cdc:	463a      	mov	r2, r7
 8008cde:	f000 f861 	bl	8008da4 <_realloc_r>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d0e0      	beq.n	8008caa <__submore+0x1a>
 8008ce8:	eb00 0806 	add.w	r8, r0, r6
 8008cec:	4601      	mov	r1, r0
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	f7fe f9aa 	bl	800704a <memcpy>
 8008cf6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008cfa:	f8c4 8000 	str.w	r8, [r4]
 8008cfe:	e7e9      	b.n	8008cd4 <__submore+0x44>

08008d00 <abort>:
 8008d00:	2006      	movs	r0, #6
 8008d02:	b508      	push	{r3, lr}
 8008d04:	f000 f8a6 	bl	8008e54 <raise>
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f7f7 fe28 	bl	800095e <_exit>
	...

08008d10 <_fstat_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	2300      	movs	r3, #0
 8008d14:	4d06      	ldr	r5, [pc, #24]	; (8008d30 <_fstat_r+0x20>)
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	602b      	str	r3, [r5, #0]
 8008d1e:	f7f7 fe50 	bl	80009c2 <_fstat>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	d102      	bne.n	8008d2c <_fstat_r+0x1c>
 8008d26:	682b      	ldr	r3, [r5, #0]
 8008d28:	b103      	cbz	r3, 8008d2c <_fstat_r+0x1c>
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	bd38      	pop	{r3, r4, r5, pc}
 8008d2e:	bf00      	nop
 8008d30:	20001ce4 	.word	0x20001ce4

08008d34 <_isatty_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	2300      	movs	r3, #0
 8008d38:	4d05      	ldr	r5, [pc, #20]	; (8008d50 <_isatty_r+0x1c>)
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	f7f7 fe4e 	bl	80009e0 <_isatty>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_isatty_r+0x1a>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_isatty_r+0x1a>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20001ce4 	.word	0x20001ce4

08008d54 <memchr>:
 8008d54:	4603      	mov	r3, r0
 8008d56:	b510      	push	{r4, lr}
 8008d58:	b2c9      	uxtb	r1, r1
 8008d5a:	4402      	add	r2, r0
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	d101      	bne.n	8008d66 <memchr+0x12>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e003      	b.n	8008d6e <memchr+0x1a>
 8008d66:	7804      	ldrb	r4, [r0, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	428c      	cmp	r4, r1
 8008d6c:	d1f6      	bne.n	8008d5c <memchr+0x8>
 8008d6e:	bd10      	pop	{r4, pc}

08008d70 <memmove>:
 8008d70:	4288      	cmp	r0, r1
 8008d72:	b510      	push	{r4, lr}
 8008d74:	eb01 0402 	add.w	r4, r1, r2
 8008d78:	d902      	bls.n	8008d80 <memmove+0x10>
 8008d7a:	4284      	cmp	r4, r0
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	d807      	bhi.n	8008d90 <memmove+0x20>
 8008d80:	1e43      	subs	r3, r0, #1
 8008d82:	42a1      	cmp	r1, r4
 8008d84:	d008      	beq.n	8008d98 <memmove+0x28>
 8008d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d8e:	e7f8      	b.n	8008d82 <memmove+0x12>
 8008d90:	4601      	mov	r1, r0
 8008d92:	4402      	add	r2, r0
 8008d94:	428a      	cmp	r2, r1
 8008d96:	d100      	bne.n	8008d9a <memmove+0x2a>
 8008d98:	bd10      	pop	{r4, pc}
 8008d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da2:	e7f7      	b.n	8008d94 <memmove+0x24>

08008da4 <_realloc_r>:
 8008da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da8:	4680      	mov	r8, r0
 8008daa:	4614      	mov	r4, r2
 8008dac:	460e      	mov	r6, r1
 8008dae:	b921      	cbnz	r1, 8008dba <_realloc_r+0x16>
 8008db0:	4611      	mov	r1, r2
 8008db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008db6:	f7fe b97f 	b.w	80070b8 <_malloc_r>
 8008dba:	b92a      	cbnz	r2, 8008dc8 <_realloc_r+0x24>
 8008dbc:	f7fe fef2 	bl	8007ba4 <_free_r>
 8008dc0:	4625      	mov	r5, r4
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc8:	f000 f860 	bl	8008e8c <_malloc_usable_size_r>
 8008dcc:	4284      	cmp	r4, r0
 8008dce:	4607      	mov	r7, r0
 8008dd0:	d802      	bhi.n	8008dd8 <_realloc_r+0x34>
 8008dd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dd6:	d812      	bhi.n	8008dfe <_realloc_r+0x5a>
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f7fe f96c 	bl	80070b8 <_malloc_r>
 8008de0:	4605      	mov	r5, r0
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d0ed      	beq.n	8008dc2 <_realloc_r+0x1e>
 8008de6:	42bc      	cmp	r4, r7
 8008de8:	4622      	mov	r2, r4
 8008dea:	4631      	mov	r1, r6
 8008dec:	bf28      	it	cs
 8008dee:	463a      	movcs	r2, r7
 8008df0:	f7fe f92b 	bl	800704a <memcpy>
 8008df4:	4631      	mov	r1, r6
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7fe fed4 	bl	8007ba4 <_free_r>
 8008dfc:	e7e1      	b.n	8008dc2 <_realloc_r+0x1e>
 8008dfe:	4635      	mov	r5, r6
 8008e00:	e7df      	b.n	8008dc2 <_realloc_r+0x1e>

08008e02 <_raise_r>:
 8008e02:	291f      	cmp	r1, #31
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4604      	mov	r4, r0
 8008e08:	460d      	mov	r5, r1
 8008e0a:	d904      	bls.n	8008e16 <_raise_r+0x14>
 8008e0c:	2316      	movs	r3, #22
 8008e0e:	6003      	str	r3, [r0, #0]
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e18:	b112      	cbz	r2, 8008e20 <_raise_r+0x1e>
 8008e1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e1e:	b94b      	cbnz	r3, 8008e34 <_raise_r+0x32>
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 f831 	bl	8008e88 <_getpid_r>
 8008e26:	462a      	mov	r2, r5
 8008e28:	4601      	mov	r1, r0
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e30:	f000 b818 	b.w	8008e64 <_kill_r>
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d00a      	beq.n	8008e4e <_raise_r+0x4c>
 8008e38:	1c59      	adds	r1, r3, #1
 8008e3a:	d103      	bne.n	8008e44 <_raise_r+0x42>
 8008e3c:	2316      	movs	r3, #22
 8008e3e:	6003      	str	r3, [r0, #0]
 8008e40:	2001      	movs	r0, #1
 8008e42:	e7e7      	b.n	8008e14 <_raise_r+0x12>
 8008e44:	2400      	movs	r4, #0
 8008e46:	4628      	mov	r0, r5
 8008e48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e4c:	4798      	blx	r3
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e7e0      	b.n	8008e14 <_raise_r+0x12>
	...

08008e54 <raise>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <raise+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f7ff bfd2 	b.w	8008e02 <_raise_r>
 8008e5e:	bf00      	nop
 8008e60:	20000010 	.word	0x20000010

08008e64 <_kill_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	2300      	movs	r3, #0
 8008e68:	4d06      	ldr	r5, [pc, #24]	; (8008e84 <_kill_r+0x20>)
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	4611      	mov	r1, r2
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	f7f7 fd64 	bl	800093e <_kill>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d102      	bne.n	8008e80 <_kill_r+0x1c>
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	b103      	cbz	r3, 8008e80 <_kill_r+0x1c>
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	bd38      	pop	{r3, r4, r5, pc}
 8008e82:	bf00      	nop
 8008e84:	20001ce4 	.word	0x20001ce4

08008e88 <_getpid_r>:
 8008e88:	f7f7 bd52 	b.w	8000930 <_getpid>

08008e8c <_malloc_usable_size_r>:
 8008e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e90:	1f18      	subs	r0, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bfbc      	itt	lt
 8008e96:	580b      	ldrlt	r3, [r1, r0]
 8008e98:	18c0      	addlt	r0, r0, r3
 8008e9a:	4770      	bx	lr

08008e9c <_init>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr

08008ea8 <_fini>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr
