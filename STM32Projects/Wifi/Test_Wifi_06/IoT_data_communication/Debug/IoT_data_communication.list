
IoT_data_communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8d4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000106c  0800ea18  0800ea18  0001ea18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa84  0800fa84  0001fa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa8c  0800fa8c  0001fa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fa90  0800fa90  0001fa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000008  0800fa94  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001570  200001f8  0800fc84  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001768  0800fc84  00021768  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022d4b  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d3c  00000000  00000000  00042f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022c8  00000000  00000000  00046cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002188  00000000  00000000  00048f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002658f  00000000  00000000  0004b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f6d1  00000000  00000000  0007168f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f6a4a  00000000  00000000  00090d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001877aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aba0  00000000  00000000  001877fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e9fc 	.word	0x0800e9fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	0800e9fc 	.word	0x0800e9fc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9aa 	b.w	8000f04 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83c 	bl	8000c34 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff5b 	bl	8000a8c <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fcd1 	bl	80005a8 <__aeabi_dmul>
 8000c06:	f7ff ffa7 	bl	8000b58 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc52 	bl	80004b4 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fcc8 	bl	80005a8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb0a 	bl	8000238 <__aeabi_dsub>
 8000c24:	f7ff ff98 	bl	8000b58 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9d08      	ldr	r5, [sp, #32]
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	468e      	mov	lr, r1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d14d      	bne.n	8000cde <__udivmoddi4+0xaa>
 8000c42:	428a      	cmp	r2, r1
 8000c44:	4694      	mov	ip, r2
 8000c46:	d969      	bls.n	8000d1c <__udivmoddi4+0xe8>
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	b152      	cbz	r2, 8000c64 <__udivmoddi4+0x30>
 8000c4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c52:	f1c2 0120 	rsb	r1, r2, #32
 8000c56:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c62:	4094      	lsls	r4, r2
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	0c21      	lsrs	r1, r4, #16
 8000c6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c6e:	fa1f f78c 	uxth.w	r7, ip
 8000c72:	fb08 e316 	mls	r3, r8, r6, lr
 8000c76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7a:	fb06 f107 	mul.w	r1, r6, r7
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x64>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 811f 	bcs.w	8000ecc <__udivmoddi4+0x298>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 811c 	bls.w	8000ecc <__udivmoddi4+0x298>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 f707 	mul.w	r7, r0, r7
 8000cac:	42a7      	cmp	r7, r4
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x92>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb8:	f080 810a 	bcs.w	8000ed0 <__udivmoddi4+0x29c>
 8000cbc:	42a7      	cmp	r7, r4
 8000cbe:	f240 8107 	bls.w	8000ed0 <__udivmoddi4+0x29c>
 8000cc2:	4464      	add	r4, ip
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	1be4      	subs	r4, r4, r7
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa4>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xc2>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80ef 	beq.w	8000ec6 <__udivmoddi4+0x292>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x160>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd4>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80f9 	bhi.w	8000efa <__udivmoddi4+0x2c6>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	469e      	mov	lr, r3
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa4>
 8000d16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xec>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 8092 	bne.w	8000e4e <__udivmoddi4+0x21a>
 8000d2a:	eba1 010c 	sub.w	r1, r1, ip
 8000d2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d32:	fa1f fe8c 	uxth.w	lr, ip
 8000d36:	2601      	movs	r6, #1
 8000d38:	0c20      	lsrs	r0, r4, #16
 8000d3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d46:	fb0e f003 	mul.w	r0, lr, r3
 8000d4a:	4288      	cmp	r0, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x12c>
 8000d4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x12a>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f200 80cb 	bhi.w	8000ef4 <__udivmoddi4+0x2c0>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d68:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d70:	fb0e fe00 	mul.w	lr, lr, r0
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x156>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x154>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f200 80bb 	bhi.w	8000efe <__udivmoddi4+0x2ca>
 8000d88:	4608      	mov	r0, r1
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x9a>
 8000d94:	f1c6 0720 	rsb	r7, r6, #32
 8000d98:	40b3      	lsls	r3, r6
 8000d9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da2:	fa20 f407 	lsr.w	r4, r0, r7
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	431c      	orrs	r4, r3
 8000dac:	40f9      	lsrs	r1, r7
 8000dae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db2:	fa00 f306 	lsl.w	r3, r0, r6
 8000db6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dba:	0c20      	lsrs	r0, r4, #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b8>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ddc:	f080 8088 	bcs.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de0:	4288      	cmp	r0, r1
 8000de2:	f240 8085 	bls.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1a09      	subs	r1, r1, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df4:	fb09 1110 	mls	r1, r9, r0, r1
 8000df8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e00:	458e      	cmp	lr, r1
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1e2>
 8000e04:	eb1c 0101 	adds.w	r1, ip, r1
 8000e08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e0c:	d26c      	bcs.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e0e:	458e      	cmp	lr, r1
 8000e10:	d96a      	bls.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4461      	add	r1, ip
 8000e16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e1e:	eba1 010e 	sub.w	r1, r1, lr
 8000e22:	42a1      	cmp	r1, r4
 8000e24:	46c8      	mov	r8, r9
 8000e26:	46a6      	mov	lr, r4
 8000e28:	d356      	bcc.n	8000ed8 <__udivmoddi4+0x2a4>
 8000e2a:	d053      	beq.n	8000ed4 <__udivmoddi4+0x2a0>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x212>
 8000e2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e32:	eb61 010e 	sbc.w	r1, r1, lr
 8000e36:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e3e:	40f1      	lsrs	r1, r6
 8000e40:	431f      	orrs	r7, r3
 8000e42:	e9c5 7100 	strd	r7, r1, [r5]
 8000e46:	2600      	movs	r6, #0
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1c2 0320 	rsb	r3, r2, #32
 8000e52:	40d8      	lsrs	r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5c:	4091      	lsls	r1, r2
 8000e5e:	4301      	orrs	r1, r0
 8000e60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e70:	0c0b      	lsrs	r3, r1, #16
 8000e72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e76:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7a:	429e      	cmp	r6, r3
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x260>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8a:	d22f      	bcs.n	8000eec <__udivmoddi4+0x2b8>
 8000e8c:	429e      	cmp	r6, r3
 8000e8e:	d92d      	bls.n	8000eec <__udivmoddi4+0x2b8>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1b9b      	subs	r3, r3, r6
 8000e96:	b289      	uxth	r1, r1
 8000e98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x28a>
 8000eac:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb4:	d216      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d914      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eba:	3e02      	subs	r6, #2
 8000ebc:	4461      	add	r1, ip
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec4:	e738      	b.n	8000d38 <__udivmoddi4+0x104>
 8000ec6:	462e      	mov	r6, r5
 8000ec8:	4628      	mov	r0, r5
 8000eca:	e705      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	e6e3      	b.n	8000c98 <__udivmoddi4+0x64>
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	e6f8      	b.n	8000cc6 <__udivmoddi4+0x92>
 8000ed4:	454b      	cmp	r3, r9
 8000ed6:	d2a9      	bcs.n	8000e2c <__udivmoddi4+0x1f8>
 8000ed8:	ebb9 0802 	subs.w	r8, r9, r2
 8000edc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	e7a3      	b.n	8000e2c <__udivmoddi4+0x1f8>
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	e7ea      	b.n	8000ebe <__udivmoddi4+0x28a>
 8000ee8:	4620      	mov	r0, r4
 8000eea:	e794      	b.n	8000e16 <__udivmoddi4+0x1e2>
 8000eec:	4640      	mov	r0, r8
 8000eee:	e7d1      	b.n	8000e94 <__udivmoddi4+0x260>
 8000ef0:	46d0      	mov	r8, sl
 8000ef2:	e77b      	b.n	8000dec <__udivmoddi4+0x1b8>
 8000ef4:	3b02      	subs	r3, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	e732      	b.n	8000d60 <__udivmoddi4+0x12c>
 8000efa:	4630      	mov	r0, r6
 8000efc:	e709      	b.n	8000d12 <__udivmoddi4+0xde>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e742      	b.n	8000d8a <__udivmoddi4+0x156>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f14:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f24:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f28:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00b      	beq.n	8000f48 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f30:	e000      	b.n	8000f34 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f32:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f3e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f66:	f023 0218 	bic.w	r2, r3, #24
 8000f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <init_done>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_done()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	e017      	b.n	8001024 <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4816      	ldr	r0, [pc, #88]	; (8001050 <init_done+0x68>)
 8000ff8:	f006 f8ae 	bl	8007158 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000ffc:	20c8      	movs	r0, #200	; 0xc8
 8000ffe:	f004 f8d9 	bl	80051b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001002:	2101      	movs	r1, #1
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <init_done+0x68>)
 8001006:	f006 f8a7 	bl	8007158 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800100a:	20c8      	movs	r0, #200	; 0xc8
 800100c:	f004 f8d2 	bl	80051b4 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001010:	2102      	movs	r1, #2
 8001012:	480f      	ldr	r0, [pc, #60]	; (8001050 <init_done+0x68>)
 8001014:	f006 f8a0 	bl	8007158 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001018:	20c8      	movs	r0, #200	; 0xc8
 800101a:	f004 f8cb 	bl	80051b4 <HAL_Delay>
	for(int i=0; i<3; i++)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	dde4      	ble.n	8000ff4 <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2120      	movs	r1, #32
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <init_done+0x68>)
 8001030:	f006 f87a 	bl	8007128 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2101      	movs	r1, #1
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <init_done+0x68>)
 800103a:	f006 f875 	bl	8007128 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <init_done+0x68>)
 8001044:	f006 f870 	bl	8007128 <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	48000400 	.word	0x48000400

08001054 <acq_internal_temp>:

static HAL_StatusTypeDef acq_internal_temp(uint16_t *temperature)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001060:	217f      	movs	r1, #127	; 0x7f
 8001062:	481f      	ldr	r0, [pc, #124]	; (80010e0 <acq_internal_temp+0x8c>)
 8001064:	f005 fa34 	bl	80064d0 <HAL_ADCEx_Calibration_Start>
	if((ret = HAL_ADC_Start(&hadc1)) != HAL_OK)
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <acq_internal_temp+0x8c>)
 800106a:	f004 fc15 	bl	8005898 <HAL_ADC_Start>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <acq_internal_temp+0x28>
		return ret;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	e02d      	b.n	80010d8 <acq_internal_temp+0x84>
	HAL_Delay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f004 f899 	bl	80051b4 <HAL_Delay>
	*temperature = __LL_ADC_CALC_TEMPERATURE(3300, HAL_ADC_GetValue(&hadc1), LL_ADC_RESOLUTION_12B);
 8001082:	4817      	ldr	r0, [pc, #92]	; (80010e0 <acq_internal_temp+0x8c>)
 8001084:	f004 fc8f 	bl	80059a6 <HAL_ADC_GetValue>
 8001088:	4603      	mov	r3, r0
 800108a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <acq_internal_temp+0x90>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	099b      	lsrs	r3, r3, #6
 800109a:	461a      	mov	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <acq_internal_temp+0x94>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2264      	movs	r2, #100	; 0x64
 80010a4:	fb03 f202 	mul.w	r2, r3, r2
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <acq_internal_temp+0x98>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <acq_internal_temp+0x94>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	1acb      	subs	r3, r1, r3
 80010b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	331e      	adds	r3, #30
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	801a      	strh	r2, [r3, #0]
	if((ret = HAL_ADC_Stop(&hadc1)) != HAL_OK)
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <acq_internal_temp+0x8c>)
 80010c4:	f004 fc3c 	bl	8005940 <HAL_ADC_Stop>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <acq_internal_temp+0x82>
		return ret;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	e000      	b.n	80010d8 <acq_internal_temp+0x84>
	return ret;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000214 	.word	0x20000214
 80010e4:	057619f1 	.word	0x057619f1
 80010e8:	1fff75a8 	.word	0x1fff75a8
 80010ec:	1fff75ca 	.word	0x1fff75ca

080010f0 <formate_json_button>:

static char* formate_json_button(int value)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 80010f8:	f003 fa52 	bl	80045a0 <json_value_init_object>
 80010fc:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <formate_json_button+0x18>
		return NULL;
 8001104:	2300      	movs	r3, #0
 8001106:	e020      	b.n	800114a <formate_json_button+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f003 f991 	bl	8004430 <json_value_get_object>
 800110e:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <formate_json_button+0x2a>
		return NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	e017      	b.n	800114a <formate_json_button+0x5a>

	if(json_object_set_number(obj, "id", value) != JSONSuccess)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f9da 	bl	80004d4 <__aeabi_i2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	490a      	ldr	r1, [pc, #40]	; (8001154 <formate_json_button+0x64>)
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f003 fc60 	bl	80049f0 <json_object_set_number>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <formate_json_button+0x4a>
		return NULL;
 8001136:	2300      	movs	r3, #0
 8001138:	e007      	b.n	800114a <formate_json_button+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f003 fb5c 	bl	80047f8 <json_serialize_to_string>
 8001140:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f003 f9fe 	bl	8004544 <json_value_free>

	return serialized_string;
 8001148:	68fb      	ldr	r3, [r7, #12]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	0800ea18 	.word	0x0800ea18

08001158 <formate_json_temp>:

static char* formate_json_temp(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 8001160:	f003 fa1e 	bl	80045a0 <json_value_init_object>
 8001164:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <formate_json_temp+0x18>
		return NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	e020      	b.n	80011b2 <formate_json_temp+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f003 f95d 	bl	8004430 <json_value_get_object>
 8001176:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <formate_json_temp+0x2a>
		return NULL;
 800117e:	2300      	movs	r3, #0
 8001180:	e017      	b.n	80011b2 <formate_json_temp+0x5a>

	if(json_object_set_number(obj, "value", value) != JSONSuccess)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff f9a6 	bl	80004d4 <__aeabi_i2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	ec43 2b10 	vmov	d0, r2, r3
 8001190:	490a      	ldr	r1, [pc, #40]	; (80011bc <formate_json_temp+0x64>)
 8001192:	6938      	ldr	r0, [r7, #16]
 8001194:	f003 fc2c 	bl	80049f0 <json_object_set_number>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <formate_json_temp+0x4a>
		return NULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	e007      	b.n	80011b2 <formate_json_temp+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f003 fb28 	bl	80047f8 <json_serialize_to_string>
 80011a8:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f003 f9ca 	bl	8004544 <json_value_free>

	return serialized_string;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0800ea1c 	.word	0x0800ea1c

080011c0 <check_subscription>:

static int check_subscription()
{
 80011c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c4:	b091      	sub	sp, #68	; 0x44
 80011c6:	af00      	add	r7, sp, #0
	if (UART_ESP32_RecvEndFlag == 1) {
 80011c8:	4b91      	ldr	r3, [pc, #580]	; (8001410 <check_subscription+0x250>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	f040 8117 	bne.w	8001402 <check_subscription+0x242>
		char pattern[24];
		memset(pattern, 0, sizeof(pattern));
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2218      	movs	r2, #24
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a fc72 	bl	800bac4 <memset>
		//sprintf((char*) pattern, "+MQTTSUBRECV:0,\"isen%s/led\",", CARD_NUMBER);
		sprintf((char*) pattern, "+MQTTSUBRECV:0,\"Ewine/");
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	498c      	ldr	r1, [pc, #560]	; (8001414 <check_subscription+0x254>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00a fdf3 	bl	800bdd0 <siprintf>
		uint16_t data_size = 0, off = sizeof(pattern)-1; // \0 not needed
 80011ea:	2300      	movs	r3, #0
 80011ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80011ee:	2317      	movs	r3, #23
 80011f0:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (strstr((const char*) UART_ESP32_RxBUF, pattern) != NULL) {
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4888      	ldr	r0, [pc, #544]	; (8001418 <check_subscription+0x258>)
 80011f8:	f00a fe6e 	bl	800bed8 <strstr>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80f9 	beq.w	80013f6 <check_subscription+0x236>
			printf("APP: Match succeed\r\n");
 8001204:	4885      	ldr	r0, [pc, #532]	; (800141c <check_subscription+0x25c>)
 8001206:	f00a fdcb 	bl	800bda0 <puts>
			int topic_id = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
			// nul mais ok
			if(UART_ESP32_RxBUF[off] == 'l')
 800120e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001210:	4a81      	ldr	r2, [pc, #516]	; (8001418 <check_subscription+0x258>)
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	2b6c      	cmp	r3, #108	; 0x6c
 8001216:	d105      	bne.n	8001224 <check_subscription+0x64>
			{
				topic_id = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
				off+= 5;
 800121c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800121e:	3305      	adds	r3, #5
 8001220:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001222:	e004      	b.n	800122e <check_subscription+0x6e>
			}
			else
			{
				topic_id = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
				off+= 9;
 8001228:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800122a:	3309      	adds	r3, #9
 800122c:	877b      	strh	r3, [r7, #58]	; 0x3a
			}

			if(topic_id == 1)
 800122e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 80b9 	bne.w	80013a8 <check_subscription+0x1e8>
			{
 8001236:	466b      	mov	r3, sp
 8001238:	461e      	mov	r6, r3
				data_size = atoi(&UART_ESP32_RxBUF[off]);
 800123a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800123c:	4a76      	ldr	r2, [pc, #472]	; (8001418 <check_subscription+0x258>)
 800123e:	4413      	add	r3, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f00a f9b9 	bl	800b5b8 <atoi>
 8001246:	4603      	mov	r3, r0
 8001248:	873b      	strh	r3, [r7, #56]	; 0x38
				if(data_size < 10)
 800124a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800124c:	2b09      	cmp	r3, #9
 800124e:	d803      	bhi.n	8001258 <check_subscription+0x98>
					off+=2;
 8001250:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001252:	3302      	adds	r3, #2
 8001254:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001256:	e002      	b.n	800125e <check_subscription+0x9e>
				else
					off+=3;
 8001258:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800125a:	3303      	adds	r3, #3
 800125c:	877b      	strh	r3, [r7, #58]	; 0x3a
				uint8_t data[data_size];
 800125e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001260:	460b      	mov	r3, r1
 8001262:	3b01      	subs	r3, #1
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
 8001266:	b28b      	uxth	r3, r1
 8001268:	2200      	movs	r2, #0
 800126a:	4698      	mov	r8, r3
 800126c:	4691      	mov	r9, r2
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800127a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800127e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001282:	b28b      	uxth	r3, r1
 8001284:	2200      	movs	r2, #0
 8001286:	461c      	mov	r4, r3
 8001288:	4615      	mov	r5, r2
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	00eb      	lsls	r3, r5, #3
 8001294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001298:	00e2      	lsls	r2, r4, #3
 800129a:	460b      	mov	r3, r1
 800129c:	3307      	adds	r3, #7
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	ebad 0d03 	sub.w	sp, sp, r3
 80012a6:	466b      	mov	r3, sp
 80012a8:	3300      	adds	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
				memcpy(data,&UART_ESP32_RxBUF[off],data_size);
 80012ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80012ae:	4a5a      	ldr	r2, [pc, #360]	; (8001418 <check_subscription+0x258>)
 80012b0:	4413      	add	r3, r2
 80012b2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80012b4:	4619      	mov	r1, r3
 80012b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012b8:	f00a fbdc 	bl	800ba74 <memcpy>
				memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 80012bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c0:	2100      	movs	r1, #0
 80012c2:	4855      	ldr	r0, [pc, #340]	; (8001418 <check_subscription+0x258>)
 80012c4:	f00a fbfe 	bl	800bac4 <memset>

				UART_ESP32_RxLen = 0;
 80012c8:	4b55      	ldr	r3, [pc, #340]	; (8001420 <check_subscription+0x260>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
				UART_ESP32_RecvEndFlag = 0;
 80012ce:	4b50      	ldr	r3, [pc, #320]	; (8001410 <check_subscription+0x250>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 80012d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d8:	494f      	ldr	r1, [pc, #316]	; (8001418 <check_subscription+0x258>)
 80012da:	4852      	ldr	r0, [pc, #328]	; (8001424 <check_subscription+0x264>)
 80012dc:	f008 f80c 	bl	80092f8 <HAL_UART_Receive_DMA>

				JSON_Value *val = json_parse_string(data);
 80012e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012e2:	f002 ffa7 	bl	8004234 <json_parse_string>
 80012e6:	62b8      	str	r0, [r7, #40]	; 0x28
				JSON_Object *obj = json_value_get_object(val);
 80012e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ea:	f003 f8a1 	bl	8004430 <json_value_get_object>
 80012ee:	6278      	str	r0, [r7, #36]	; 0x24
				int led_id = json_object_get_number (obj, "id");
 80012f0:	494d      	ldr	r1, [pc, #308]	; (8001428 <check_subscription+0x268>)
 80012f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f4:	f002 ffdd 	bl	80042b2 <json_object_get_number>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc02 	bl	8000b08 <__aeabi_d2iz>
 8001304:	4603      	mov	r3, r0
 8001306:	623b      	str	r3, [r7, #32]
				int led_state = json_object_get_number (obj, "state");
 8001308:	4948      	ldr	r1, [pc, #288]	; (800142c <check_subscription+0x26c>)
 800130a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800130c:	f002 ffd1 	bl	80042b2 <json_object_get_number>
 8001310:	ec53 2b10 	vmov	r2, r3, d0
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fbf6 	bl	8000b08 <__aeabi_d2iz>
 800131c:	4603      	mov	r3, r0
 800131e:	61fb      	str	r3, [r7, #28]
				json_value_free(val);
 8001320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001322:	f003 f90f 	bl	8004544 <json_value_free>
				switch(led_id)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d027      	beq.n	800137c <check_subscription+0x1bc>
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b03      	cmp	r3, #3
 8001330:	dc33      	bgt.n	800139a <check_subscription+0x1da>
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d003      	beq.n	8001340 <check_subscription+0x180>
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d00f      	beq.n	800135e <check_subscription+0x19e>
 800133e:	e02c      	b.n	800139a <check_subscription+0x1da>
				{
				case 1:
					if(led_state)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <check_subscription+0x192>
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2120      	movs	r1, #32
 800134a:	4839      	ldr	r0, [pc, #228]	; (8001430 <check_subscription+0x270>)
 800134c:	f005 feec 	bl	8007128 <HAL_GPIO_WritePin>
					else
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
					break;
 8001350:	e028      	b.n	80013a4 <check_subscription+0x1e4>
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2120      	movs	r1, #32
 8001356:	4836      	ldr	r0, [pc, #216]	; (8001430 <check_subscription+0x270>)
 8001358:	f005 fee6 	bl	8007128 <HAL_GPIO_WritePin>
					break;
 800135c:	e022      	b.n	80013a4 <check_subscription+0x1e4>
				case 2:
					if(led_state)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <check_subscription+0x1b0>
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2101      	movs	r1, #1
 8001368:	4831      	ldr	r0, [pc, #196]	; (8001430 <check_subscription+0x270>)
 800136a:	f005 fedd 	bl	8007128 <HAL_GPIO_WritePin>
					else
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
					break;
 800136e:	e019      	b.n	80013a4 <check_subscription+0x1e4>
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2101      	movs	r1, #1
 8001374:	482e      	ldr	r0, [pc, #184]	; (8001430 <check_subscription+0x270>)
 8001376:	f005 fed7 	bl	8007128 <HAL_GPIO_WritePin>
					break;
 800137a:	e013      	b.n	80013a4 <check_subscription+0x1e4>
				case 3:
					if(led_state)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <check_subscription+0x1ce>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001382:	2201      	movs	r2, #1
 8001384:	2102      	movs	r1, #2
 8001386:	482a      	ldr	r0, [pc, #168]	; (8001430 <check_subscription+0x270>)
 8001388:	f005 fece 	bl	8007128 <HAL_GPIO_WritePin>
					else
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
					break;
 800138c:	e00a      	b.n	80013a4 <check_subscription+0x1e4>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2102      	movs	r1, #2
 8001392:	4827      	ldr	r0, [pc, #156]	; (8001430 <check_subscription+0x270>)
 8001394:	f005 fec8 	bl	8007128 <HAL_GPIO_WritePin>
					break;
 8001398:	e004      	b.n	80013a4 <check_subscription+0x1e4>
				default:
					printf("Bad led_id %d\n",led_id);
 800139a:	6a39      	ldr	r1, [r7, #32]
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <check_subscription+0x274>)
 800139e:	f00a fc79 	bl	800bc94 <iprintf>
					break;
 80013a2:	bf00      	nop
 80013a4:	46b5      	mov	sp, r6
 80013a6:	e024      	b.n	80013f2 <check_subscription+0x232>
				}
			}
			else if(topic_id == 2)
 80013a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d11d      	bne.n	80013ea <check_subscription+0x22a>
			{
				// PUB ADC temperature
				uint16_t temp = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	807b      	strh	r3, [r7, #2]
				acq_internal_temp(&temp);
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe4d 	bl	8001054 <acq_internal_temp>
				char *data = formate_json_temp((int)temp);
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fecb 	bl	8001158 <formate_json_temp>
 80013c2:	6378      	str	r0, [r7, #52]	; 0x34
				if(esp8266_Publish_Temp_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TEMP_MQTT)
 80013c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013c6:	f7fe fedb 	bl	8000180 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013d2:	f00a f88d 	bl	800b4f0 <esp8266_Publish_Temp_BrokerMQTT>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b0b      	cmp	r3, #11
 80013da:	d002      	beq.n	80013e2 <check_subscription+0x222>
					printf("APP: TEMP esp8266_Publish_BrokerMQTT() failed\n");
 80013dc:	4816      	ldr	r0, [pc, #88]	; (8001438 <check_subscription+0x278>)
 80013de:	f00a fcdf 	bl	800bda0 <puts>
				json_free_serialized_string(data);
 80013e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013e4:	f003 fa3a 	bl	800485c <json_free_serialized_string>
 80013e8:	e003      	b.n	80013f2 <check_subscription+0x232>
			}
			else
				printf("topic_id unknown %d\n",topic_id);
 80013ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <check_subscription+0x27c>)
 80013ee:	f00a fc51 	bl	800bc94 <iprintf>

			return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e006      	b.n	8001404 <check_subscription+0x244>
		}
		else
		{
			printf("APP: Match failed\r\n");
 80013f6:	4812      	ldr	r0, [pc, #72]	; (8001440 <check_subscription+0x280>)
 80013f8:	f00a fcd2 	bl	800bda0 <puts>
			return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	e000      	b.n	8001404 <check_subscription+0x244>
		}
	}
	else
	{
		return 1;
 8001402:	2301      	movs	r3, #1
	}
}
 8001404:	4618      	mov	r0, r3
 8001406:	3744      	adds	r7, #68	; 0x44
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800140e:	bf00      	nop
 8001410:	20001755 	.word	0x20001755
 8001414:	0800ea24 	.word	0x0800ea24
 8001418:	20000f54 	.word	0x20000f54
 800141c:	0800ea3c 	.word	0x0800ea3c
 8001420:	20001754 	.word	0x20001754
 8001424:	20000278 	.word	0x20000278
 8001428:	0800ea18 	.word	0x0800ea18
 800142c:	0800ea50 	.word	0x0800ea50
 8001430:	48000400 	.word	0x48000400
 8001434:	0800ea58 	.word	0x0800ea58
 8001438:	0800ea68 	.word	0x0800ea68
 800143c:	0800ea98 	.word	0x0800ea98
 8001440:	0800eab0 	.word	0x0800eab0

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f003 fe2d 	bl	80050a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f8bd 	bl	80015cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001452:	f000 f931 	bl	80016b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f000 fad1 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 800145a:	f000 fabd 	bl	80019d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800145e:	f000 fa1d 	bl	800189c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001462:	f000 fa91 	bl	8001988 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8001466:	f000 f9bd 	bl	80017e4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800146a:	f000 f957 	bl	800171c <MX_ADC1_Init>
  MX_TIM17_Init();
 800146e:	f000 fa63 	bl	8001938 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  if (esp8266_SetupIP() != _SUCCEED) {
 8001472:	f009 fc19 	bl	800aca8 <esp8266_SetupIP>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d00a      	beq.n	8001492 <main+0x4e>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 800147c:	4847      	ldr	r0, [pc, #284]	; (800159c <main+0x158>)
 800147e:	f00a fc8f 	bl	800bda0 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001482:	2102      	movs	r1, #2
 8001484:	4846      	ldr	r0, [pc, #280]	; (80015a0 <main+0x15c>)
 8001486:	f005 fe67 	bl	8007158 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800148a:	20c8      	movs	r0, #200	; 0xc8
 800148c:	f003 fe92 	bl	80051b4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001490:	e7f7      	b.n	8001482 <main+0x3e>
	  }
  }

  if(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 8001492:	f009 fecb 	bl	800b22c <esp8266_SetupConnect_BrokerMQTT>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d00a      	beq.n	80014b2 <main+0x6e>
  {
	  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 800149c:	4841      	ldr	r0, [pc, #260]	; (80015a4 <main+0x160>)
 800149e:	f00a fc7f 	bl	800bda0 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014a2:	2102      	movs	r1, #2
 80014a4:	483e      	ldr	r0, [pc, #248]	; (80015a0 <main+0x15c>)
 80014a6:	f005 fe57 	bl	8007158 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 80014aa:	20c8      	movs	r0, #200	; 0xc8
 80014ac:	f003 fe82 	bl	80051b4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014b0:	e7f7      	b.n	80014a2 <main+0x5e>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  init_done();
 80014b2:	f7ff fd99 	bl	8000fe8 <init_done>
	  //click button to start
	  printf("Waiting to start...\n");
 80014b6:	483c      	ldr	r0, [pc, #240]	; (80015a8 <main+0x164>)
 80014b8:	f00a fc72 	bl	800bda0 <puts>
	  while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) != GPIO_PIN_RESET)
 80014bc:	e006      	b.n	80014cc <main+0x88>
	  {
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80014be:	2120      	movs	r1, #32
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <main+0x15c>)
 80014c2:	f005 fe49 	bl	8007158 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80014c6:	2064      	movs	r0, #100	; 0x64
 80014c8:	f003 fe74 	bl	80051b4 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) != GPIO_PIN_RESET)
 80014cc:	2102      	movs	r1, #2
 80014ce:	4837      	ldr	r0, [pc, #220]	; (80015ac <main+0x168>)
 80014d0:	f005 fe12 	bl	80070f8 <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f1      	bne.n	80014be <main+0x7a>
	  }
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2120      	movs	r1, #32
 80014de:	4830      	ldr	r0, [pc, #192]	; (80015a0 <main+0x15c>)
 80014e0:	f005 fe22 	bl	8007128 <HAL_GPIO_WritePin>

	  printf("App started...\n");
 80014e4:	4832      	ldr	r0, [pc, #200]	; (80015b0 <main+0x16c>)
 80014e6:	f00a fc5b 	bl	800bda0 <puts>

	  // app part
	  while(1)
	  {
		  if(get_mqtt_state() < _SUBSCRIBED_LED_MQTT)
 80014ea:	f00a f859 	bl	800b5a0 <get_mqtt_state>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b07      	cmp	r3, #7
 80014f2:	d807      	bhi.n	8001504 <main+0xc0>
		  {
			  if(esp8266_Subscribe_Led_BrokerMQTT() != _SUBSCRIBED_LED_MQTT)
 80014f4:	f009 ff04 	bl	800b300 <esp8266_Subscribe_Led_BrokerMQTT>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d002      	beq.n	8001504 <main+0xc0>
				printf("APP: esp8266_Subscribe_Led_BrokerMQTT() failed\n");
 80014fe:	482d      	ldr	r0, [pc, #180]	; (80015b4 <main+0x170>)
 8001500:	f00a fc4e 	bl	800bda0 <puts>
		  }
		  if(get_mqtt_state() < _SUBSCRIBED_TEMP_MQTT)
 8001504:	f00a f84c 	bl	800b5a0 <get_mqtt_state>
 8001508:	4603      	mov	r3, r0
 800150a:	2b08      	cmp	r3, #8
 800150c:	d807      	bhi.n	800151e <main+0xda>
		  {
			  if(esp8266_Subscribe_Temp_BrokerMQTT() != _SUBSCRIBED_TEMP_MQTT)
 800150e:	f009 ff47 	bl	800b3a0 <esp8266_Subscribe_Temp_BrokerMQTT>
 8001512:	4603      	mov	r3, r0
 8001514:	2b09      	cmp	r3, #9
 8001516:	d002      	beq.n	800151e <main+0xda>
		  		printf("APP: esp8266_Subscribe_Temp_BrokerMQTT() failed\n");
 8001518:	4827      	ldr	r0, [pc, #156]	; (80015b8 <main+0x174>)
 800151a:	f00a fc41 	bl	800bda0 <puts>
		  }

		  //
		  switch(button_pushed)
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <main+0x178>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d002      	beq.n	800152c <main+0xe8>
 8001526:	2b02      	cmp	r3, #2
 8001528:	d017      	beq.n	800155a <main+0x116>
 800152a:	e02a      	b.n	8001582 <main+0x13e>
		  {
		  case B1:
		  {
			  char *data = formate_json_button(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fddf 	bl	80010f0 <formate_json_button>
 8001532:	60b8      	str	r0, [r7, #8]
			  if(esp8266_Publish_Button_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_BUTTON_MQTT)
 8001534:	68b8      	ldr	r0, [r7, #8]
 8001536:	f7fe fe23 	bl	8000180 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29b      	uxth	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f009 ff7d 	bl	800b440 <esp8266_Publish_Button_BrokerMQTT>
 8001546:	4603      	mov	r3, r0
 8001548:	2b0a      	cmp	r3, #10
 800154a:	d002      	beq.n	8001552 <main+0x10e>
				printf("APP: B1 esp8266_Publish_Button_BrokerMQTT() failed\n");
 800154c:	481c      	ldr	r0, [pc, #112]	; (80015c0 <main+0x17c>)
 800154e:	f00a fc27 	bl	800bda0 <puts>
			  json_free_serialized_string(data);
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f003 f982 	bl	800485c <json_free_serialized_string>
		  }
			  break;
 8001558:	e013      	b.n	8001582 <main+0x13e>
		  case B2:
		  {
			  char *data = formate_json_button(2);
 800155a:	2002      	movs	r0, #2
 800155c:	f7ff fdc8 	bl	80010f0 <formate_json_button>
 8001560:	60f8      	str	r0, [r7, #12]
			  if(esp8266_Publish_Button_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_BUTTON_MQTT)
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7fe fe0c 	bl	8000180 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b29b      	uxth	r3, r3
 800156c:	4619      	mov	r1, r3
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f009 ff66 	bl	800b440 <esp8266_Publish_Button_BrokerMQTT>
 8001574:	4603      	mov	r3, r0
 8001576:	2b0a      	cmp	r3, #10
 8001578:	d002      	beq.n	8001580 <main+0x13c>
				printf("APP: B2 esp8266_Publish_Button_BrokerMQTT() failed\n");
 800157a:	4812      	ldr	r0, [pc, #72]	; (80015c4 <main+0x180>)
 800157c:	f00a fc10 	bl	800bda0 <puts>
		  }
			  break;
 8001580:	bf00      	nop
		  }
		  button_pushed = NONE;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <main+0x178>)
 8001584:	2200      	movs	r2, #0
 8001586:	801a      	strh	r2, [r3, #0]

		  int sub_status = check_subscription();
 8001588:	f7ff fe1a 	bl	80011c0 <check_subscription>
 800158c:	6078      	str	r0, [r7, #4]
		  if(sub_status == 0)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1aa      	bne.n	80014ea <main+0xa6>
			  printf("APP: check_subscription() SUB MQTT RCV\n");
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <main+0x184>)
 8001596:	f00a fc03 	bl	800bda0 <puts>
	  {
 800159a:	e7a6      	b.n	80014ea <main+0xa6>
 800159c:	0800eac4 	.word	0x0800eac4
 80015a0:	48000400 	.word	0x48000400
 80015a4:	0800eb00 	.word	0x0800eb00
 80015a8:	0800eb44 	.word	0x0800eb44
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	0800eb58 	.word	0x0800eb58
 80015b4:	0800eb68 	.word	0x0800eb68
 80015b8:	0800eb98 	.word	0x0800eb98
 80015bc:	20000740 	.word	0x20000740
 80015c0:	0800ebc8 	.word	0x0800ebc8
 80015c4:	0800ebfc 	.word	0x0800ebfc
 80015c8:	0800ec30 	.word	0x0800ec30

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b09a      	sub	sp, #104	; 0x68
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	2248      	movs	r2, #72	; 0x48
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00a fa72 	bl	800bac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001600:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f023 0303 	bic.w	r3, r3, #3
 800160c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001616:	f005 fed5 	bl	80073c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fc9b 	bl	8000f56 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <SystemClock_Config+0xe8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001628:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <SystemClock_Config+0xe8>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <SystemClock_Config+0xe8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800163c:	2327      	movs	r3, #39	; 0x27
 800163e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001646:	2301      	movs	r3, #1
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001654:	2340      	movs	r3, #64	; 0x40
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001658:	2300      	movs	r3, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800165c:	2360      	movs	r3, #96	; 0x60
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fa3f 	bl	8007aec <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001674:	f000 fa80 	bl	8001b78 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001678:	236f      	movs	r3, #111	; 0x6f
 800167a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800167c:	2302      	movs	r3, #2
 800167e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2101      	movs	r1, #1
 8001698:	4618      	mov	r0, r3
 800169a:	f006 fd9b 	bl	80081d4 <HAL_RCC_ClockConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80016a4:	f000 fa68 	bl	8001b78 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016a8:	f007 fb56 	bl	8008d58 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016ac:	bf00      	nop
 80016ae:	3768      	adds	r7, #104	; 0x68
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	58000400 	.word	0x58000400

080016b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	; 0x50
 80016bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2250      	movs	r2, #80	; 0x50
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00a f9fd 	bl	800bac4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80016ca:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 80016ce:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80016d0:	2318      	movs	r3, #24
 80016d2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80016d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80016da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80016e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80016e6:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80016ea:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4618      	mov	r0, r3
 8001704:	f007 f9b2 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800170e:	f000 fa33 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001712:	bf00      	nop
 8001714:	3750      	adds	r7, #80	; 0x50
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001734:	4a29      	ldr	r2, [pc, #164]	; (80017dc <MX_ADC1_Init+0xc0>)
 8001736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <MX_ADC1_Init+0xbc>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_ADC1_Init+0xbc>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001752:	2204      	movs	r2, #4
 8001754:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001758:	2200      	movs	r2, #0
 800175a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_ADC1_Init+0xbc>)
 800175e:	2200      	movs	r2, #0
 8001760:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001764:	2201      	movs	r2, #1
 8001766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MX_ADC1_Init+0xbc>)
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001778:	2200      	movs	r2, #0
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_ADC1_Init+0xbc>)
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_ADC1_Init+0xbc>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001792:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_ADC1_Init+0xbc>)
 8001794:	f003 ff34 	bl	8005600 <HAL_ADC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800179e:	f000 f9eb 	bl	8001b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_ADC1_Init+0xc4>)
 80017a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a6:	2306      	movs	r3, #6
 80017a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017aa:	2307      	movs	r3, #7
 80017ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017ae:	237f      	movs	r3, #127	; 0x7f
 80017b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017b2:	2304      	movs	r3, #4
 80017b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <MX_ADC1_Init+0xbc>)
 80017c0:	f004 f8fe 	bl	80059c0 <HAL_ADC_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017ca:	f000 f9d5 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000214 	.word	0x20000214
 80017dc:	50040000 	.word	0x50040000
 80017e0:	c7520000 	.word	0xc7520000

080017e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <MX_LPUART1_UART_Init+0xb0>)
 80017ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001828:	2200      	movs	r2, #0
 800182a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800182c:	4818      	ldr	r0, [pc, #96]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 800182e:	f007 fc85 	bl	800913c <HAL_UART_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001838:	f000 f99e 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183c:	2100      	movs	r1, #0
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001840:	f008 ffaa 	bl	800a798 <HAL_UARTEx_SetTxFifoThreshold>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800184a:	f000 f995 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184e:	2100      	movs	r1, #0
 8001850:	480f      	ldr	r0, [pc, #60]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001852:	f008 ffdf 	bl	800a814 <HAL_UARTEx_SetRxFifoThreshold>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800185c:	f000 f98c 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001862:	f008 ff60 	bl	800a726 <HAL_UARTEx_DisableFifoMode>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800186c:	f000 f984 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0210 	orr.w	r2, r2, #16
 800187e:	601a      	str	r2, [r3, #0]
  	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8001880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001884:	4904      	ldr	r1, [pc, #16]	; (8001898 <MX_LPUART1_UART_Init+0xb4>)
 8001886:	4802      	ldr	r0, [pc, #8]	; (8001890 <MX_LPUART1_UART_Init+0xac>)
 8001888:	f007 fd36 	bl	80092f8 <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000278 	.word	0x20000278
 8001894:	40008000 	.word	0x40008000
 8001898:	20000f54 	.word	0x20000f54

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018a2:	4a24      	ldr	r2, [pc, #144]	; (8001934 <MX_USART1_UART_Init+0x98>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018c4:	220c      	movs	r2, #12
 80018c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018e8:	f007 fc28 	bl	800913c <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80018f2:	f000 f941 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f6:	2100      	movs	r1, #0
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018fa:	f008 ff4d 	bl	800a798 <HAL_UARTEx_SetTxFifoThreshold>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001904:	f000 f938 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	4809      	ldr	r0, [pc, #36]	; (8001930 <MX_USART1_UART_Init+0x94>)
 800190c:	f008 ff82 	bl	800a814 <HAL_UARTEx_SetRxFifoThreshold>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001916:	f000 f92f 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART1_UART_Init+0x94>)
 800191c:	f008 ff03 	bl	800a726 <HAL_UARTEx_DisableFifoMode>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001926:	f000 f927 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000030c 	.word	0x2000030c
 8001934:	40013800 	.word	0x40013800

08001938 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_TIM17_Init+0x48>)
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <MX_TIM17_Init+0x4c>)
 8001940:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_TIM17_Init+0x48>)
 8001944:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001948:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <MX_TIM17_Init+0x48>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 30000;
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_TIM17_Init+0x48>)
 8001952:	f247 5230 	movw	r2, #30000	; 0x7530
 8001956:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_TIM17_Init+0x48>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_TIM17_Init+0x48>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_TIM17_Init+0x48>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM17_Init+0x48>)
 800196c:	f007 fb0b 	bl	8008f86 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001976:	f000 f8ff 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000400 	.word	0x20000400
 8001984:	40014800 	.word	0x40014800

08001988 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 800198e:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <MX_USB_PCD_Init+0x4c>)
 8001990:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 8001994:	2208      	movs	r2, #8
 8001996:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 800199a:	2202      	movs	r2, #2
 800199c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_USB_PCD_Init+0x48>)
 80019be:	f005 fbfd 	bl	80071bc <HAL_PCD_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80019c8:	f000 f8d6 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000044c 	.word	0x2000044c
 80019d4:	40006800 	.word	0x40006800

080019d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019dc:	2004      	movs	r0, #4
 80019de:	f7ff fad0 	bl	8000f82 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7ff facd 	bl	8000f82 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	200b      	movs	r0, #11
 80019ee:	f004 feac 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f2:	200b      	movs	r0, #11
 80019f4:	f004 fec3 	bl	800677e <HAL_NVIC_EnableIRQ>

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a10:	2004      	movs	r0, #4
 8001a12:	f7ff facf 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff facc 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7ff fac9 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	2008      	movs	r0, #8
 8001a24:	f7ff fac6 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f005 fb7a 	bl	8007128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2123      	movs	r1, #35	; 0x23
 8001a38:	482a      	ldr	r0, [pc, #168]	; (8001ae4 <MX_GPIO_Init+0xe8>)
 8001a3a:	f005 fb75 	bl	8007128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP32_RST_Pin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8001a3e:	2308      	movs	r3, #8
 8001a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a56:	f005 f9df 	bl	8006e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481e      	ldr	r0, [pc, #120]	; (8001ae8 <MX_GPIO_Init+0xec>)
 8001a6e:	f005 f9d3 	bl	8006e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001a72:	2323      	movs	r3, #35	; 0x23
 8001a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <MX_GPIO_Init+0xe8>)
 8001a88:	f005 f9c6 	bl	8006e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4813      	ldr	r0, [pc, #76]	; (8001aec <MX_GPIO_Init+0xf0>)
 8001aa0:	f005 f9ba 	bl	8006e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_GPIO_Init+0xf0>)
 8001ab6:	f005 f9af 	bl	8006e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2006      	movs	r0, #6
 8001ac0:	f004 fe43 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ac4:	2006      	movs	r0, #6
 8001ac6:	f004 fe5a 	bl	800677e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	200a      	movs	r0, #10
 8001ad0:	f004 fe3b 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f004 fe52 	bl	800677e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	48000c00 	.word	0x48000c00

08001af0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	printf("CALLBACK LPUART\n");
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <HAL_UART_RxCpltCallback+0x18>)
 8001afa:	f00a f951 	bl	800bda0 <puts>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0800ec58 	.word	0x0800ec58

08001b0c <_write>:

int _write(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e009      	b.n	8001b32 <_write+0x26>
	{
	//__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f9ee 	bl	8000f08 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbf1      	blt.n	8001b1e <_write+0x12>
	}
	return len;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_EXTI_Callback+0x1c>
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d107      	bne.n	8001b68 <HAL_GPIO_EXTI_Callback+0x24>
	{
	case B1_Pin:
		button_pushed = B1;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	801a      	strh	r2, [r3, #0]
		break;
 8001b5e:	e003      	b.n	8001b68 <HAL_GPIO_EXTI_Callback+0x24>
	case B2_Pin:
		button_pushed = B2;
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b62:	2202      	movs	r2, #2
 8001b64:	801a      	strh	r2, [r3, #0]
		break;
 8001b66:	bf00      	nop
	}
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000740 	.word	0x20000740

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x8>
	...

08001b84 <serialize_int>:

static char *parson_float_format = NULL;

// +BCH
int serialize_int(double num, char *buf)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b8e:	6078      	str	r0, [r7, #4]
	if(buf == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <serialize_int+0x18>
		return -1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	e00a      	b.n	8001bb2 <serialize_int+0x2e>

	return sprintf(buf,"%d",(int)num);
 8001b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ba0:	f7fe ffb2 	bl	8000b08 <__aeabi_d2iz>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4904      	ldr	r1, [pc, #16]	; (8001bbc <serialize_int+0x38>)
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f00a f910 	bl	800bdd0 <siprintf>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0800ec68 	.word	0x0800ec68

08001bc0 <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <parson_strndup+0x40>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	3201      	adds	r2, #1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4798      	blx	r3
 8001bd6:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <parson_strndup+0x22>
        return NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e00a      	b.n	8001bf8 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f009 ff3f 	bl	800ba74 <memcpy>
    return output_string;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000008 	.word	0x20000008

08001c04 <parson_strdup>:

static char * parson_strdup(const char *string) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fab7 	bl	8000180 <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffd2 	bl	8001bc0 <parson_strndup>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <hex_char_to_int>:

static int hex_char_to_int(char c) {
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b2f      	cmp	r3, #47	; 0x2f
 8001c34:	d905      	bls.n	8001c42 <hex_char_to_int+0x1c>
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b39      	cmp	r3, #57	; 0x39
 8001c3a:	d802      	bhi.n	8001c42 <hex_char_to_int+0x1c>
        return c - '0';
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	3b30      	subs	r3, #48	; 0x30
 8001c40:	e013      	b.n	8001c6a <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b60      	cmp	r3, #96	; 0x60
 8001c46:	d905      	bls.n	8001c54 <hex_char_to_int+0x2e>
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b66      	cmp	r3, #102	; 0x66
 8001c4c:	d802      	bhi.n	8001c54 <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	3b57      	subs	r3, #87	; 0x57
 8001c52:	e00a      	b.n	8001c6a <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	d905      	bls.n	8001c66 <hex_char_to_int+0x40>
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b46      	cmp	r3, #70	; 0x46
 8001c5e:	d802      	bhi.n	8001c66 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	3b37      	subs	r3, #55	; 0x37
 8001c64:	e001      	b.n	8001c6a <hex_char_to_int+0x44>
    }
    return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <parse_utf16_hex>:

static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00e      	beq.n	8001ca6 <parse_utf16_hex+0x30>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <parse_utf16_hex+0x30>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3302      	adds	r3, #2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <parse_utf16_hex+0x30>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3303      	adds	r3, #3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <parse_utf16_hex+0x36>
        return JSONFailure;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e03b      	b.n	8001d24 <parse_utf16_hex+0xae>
    }
    x1 = hex_char_to_int(s[0]);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ffb8 	bl	8001c26 <hex_char_to_int>
 8001cb6:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffb1 	bl	8001c26 <hex_char_to_int>
 8001cc4:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3302      	adds	r3, #2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ffaa 	bl	8001c26 <hex_char_to_int>
 8001cd2:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ffa3 	bl	8001c26 <hex_char_to_int>
 8001ce0:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d00b      	beq.n	8001d02 <parse_utf16_hex+0x8c>
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d007      	beq.n	8001d02 <parse_utf16_hex+0x8c>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d003      	beq.n	8001d02 <parse_utf16_hex+0x8c>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d102      	bne.n	8001d08 <parse_utf16_hex+0x92>
        return JSONFailure;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e00d      	b.n	8001d24 <parse_utf16_hex+0xae>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	031a      	lsls	r2, r3, #12
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	431a      	orrs	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <is_decimal>:
        string += len;
    }
    return PARSON_TRUE;
}

static parson_bool_t is_decimal(const char *string, size_t length) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d90a      	bls.n	8001d52 <is_decimal+0x26>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b30      	cmp	r3, #48	; 0x30
 8001d42:	d106      	bne.n	8001d52 <is_decimal+0x26>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d4c:	d001      	beq.n	8001d52 <is_decimal+0x26>
        return PARSON_FALSE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e024      	b.n	8001d9c <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d91b      	bls.n	8001d90 <is_decimal+0x64>
 8001d58:	2202      	movs	r2, #2
 8001d5a:	4912      	ldr	r1, [pc, #72]	; (8001da4 <is_decimal+0x78>)
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f00a f8a7 	bl	800beb0 <strncmp>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d113      	bne.n	8001d90 <is_decimal+0x64>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d70:	d00e      	beq.n	8001d90 <is_decimal+0x64>
        return PARSON_FALSE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e012      	b.n	8001d9c <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <is_decimal+0x7c>)
 8001d82:	f00a f888 	bl	800be96 <strchr>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <is_decimal+0x64>
            return PARSON_FALSE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e005      	b.n	8001d9c <is_decimal+0x70>
    while (length--) {
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	1e5a      	subs	r2, r3, #1
 8001d94:	603a      	str	r2, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ed      	bne.n	8001d76 <is_decimal+0x4a>
        }
    }
    return PARSON_TRUE;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0800ec70 	.word	0x0800ec70
 8001da8:	0800ec74 	.word	0x0800ec74

08001dac <hash_string>:

static unsigned long hash_string(const char *string, size_t n) {
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 8001db6:	f241 5305 	movw	r3, #5381	; 0x1505
 8001dba:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e011      	b.n	8001dea <hash_string+0x3e>
        c = string[i];
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00e      	beq.n	8001df4 <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	441a      	add	r2, r3
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	3301      	adds	r3, #1
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d3e9      	bcc.n	8001dc6 <hash_string+0x1a>
 8001df2:	e000      	b.n	8001df6 <hash_string+0x4a>
            break;
 8001df4:	bf00      	nop
    }
    return hash;
 8001df6:	697b      	ldr	r3, [r7, #20]
#endif
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <json_object_make+0x50>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2024      	movs	r0, #36	; 0x24
 8001e18:	4798      	blx	r3
 8001e1a:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <json_object_make+0x22>
        return NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e011      	b.n	8001e4a <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f000 f814 	bl	8001e5c <json_object_init>
 8001e34:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <json_object_make+0x44>
        parson_free(new_obj);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <json_object_make+0x54>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	4798      	blx	r3
        return NULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <json_object_make+0x46>
    }
    return new_obj;
 8001e48:	68bb      	ldr	r3, [r7, #8]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	2000000c 	.word	0x2000000c

08001e5c <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001fbc <json_object_init+0x160>
 8001ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eaa:	ee17 2a90 	vmov	r2, s15
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <json_object_init+0x60>
        return JSONSuccess;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e07b      	b.n	8001fb4 <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8001ebc:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <json_object_init+0x164>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6a12      	ldr	r2, [r2, #32]
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4798      	blx	r3
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <json_object_init+0x164>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	69d2      	ldr	r2, [r2, #28]
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	4610      	mov	r0, r2
 8001edc:	4798      	blx	r3
 8001ede:	4602      	mov	r2, r0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <json_object_init+0x164>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	69d2      	ldr	r2, [r2, #28]
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4798      	blx	r3
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <json_object_init+0x164>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	69d2      	ldr	r2, [r2, #28]
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	4610      	mov	r0, r2
 8001f04:	4798      	blx	r3
 8001f06:	4602      	mov	r2, r0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <json_object_init+0x164>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	69d2      	ldr	r2, [r2, #28]
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4610      	mov	r0, r2
 8001f18:	4798      	blx	r3
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d024      	beq.n	8001f72 <json_object_init+0x116>
        || object->names == NULL
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <json_object_init+0x116>
        || object->values == NULL
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01c      	beq.n	8001f72 <json_object_init+0x116>
        || object->cell_ixs == NULL
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d018      	beq.n	8001f72 <json_object_init+0x116>
        || object->hashes == NULL) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d014      	beq.n	8001f72 <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e00a      	b.n	8001f64 <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3ef      	bcc.n	8001f4e <json_object_init+0xf2>
    }
    return JSONSuccess;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e020      	b.n	8001fb4 <json_object_init+0x158>
        goto error;
 8001f72:	bf00      	nop
error:
    parson_free(object->cells);
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <json_object_init+0x168>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6852      	ldr	r2, [r2, #4]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4798      	blx	r3
    parson_free(object->names);
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <json_object_init+0x168>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68d2      	ldr	r2, [r2, #12]
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4798      	blx	r3
    parson_free(object->values);
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <json_object_init+0x168>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6912      	ldr	r2, [r2, #16]
 8001f94:	4610      	mov	r0, r2
 8001f96:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <json_object_init+0x168>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6952      	ldr	r2, [r2, #20]
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4798      	blx	r3
    parson_free(object->hashes);
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <json_object_init+0x168>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6892      	ldr	r2, [r2, #8]
 8001fac:	4610      	mov	r0, r2
 8001fae:	4798      	blx	r3
    return JSONFailure;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	3f333333 	.word	0x3f333333
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	2000000c 	.word	0x2000000c

08001fc8 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e01b      	b.n	8002016 <json_object_deinit+0x4e>
        if (free_keys) {
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <json_object_deinit+0xcc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	68d1      	ldr	r1, [r2, #12]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	440a      	add	r2, r1
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4798      	blx	r3
        }
        if (free_values) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fa9a 	bl	8004544 <json_value_free>
    for (i = 0; i < object->count; i++) {
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3de      	bcc.n	8001fde <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <json_object_deinit+0xcc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	6852      	ldr	r2, [r2, #4]
 800203a:	4610      	mov	r0, r2
 800203c:	4798      	blx	r3
    parson_free(object->names);
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <json_object_deinit+0xcc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	68d2      	ldr	r2, [r2, #12]
 8002046:	4610      	mov	r0, r2
 8002048:	4798      	blx	r3
    parson_free(object->values);
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <json_object_deinit+0xcc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	6912      	ldr	r2, [r2, #16]
 8002052:	4610      	mov	r0, r2
 8002054:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <json_object_deinit+0xcc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	6952      	ldr	r2, [r2, #20]
 800205e:	4610      	mov	r0, r2
 8002060:	4798      	blx	r3
    parson_free(object->hashes);
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <json_object_deinit+0xcc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	6892      	ldr	r2, [r2, #8]
 800206a:	4610      	mov	r0, r2
 800206c:	4798      	blx	r3

    object->cells = NULL;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
}
 800208c:	bf00      	nop
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000000c 	.word	0x2000000c

08002098 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b092      	sub	sp, #72	; 0x48
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	bf38      	it	cc
 80020ba:	2310      	movcc	r3, #16
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fec9 	bl	8001e5c <json_object_init>
 80020ca:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e046      	b.n	8002166 <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f002 f949 	bl	8004370 <json_object_get_wrapping_value>
 80020de:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 80020e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e2:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	647b      	str	r3, [r7, #68]	; 0x44
 80020e8:	e028      	b.n	800213c <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800210c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f897 	bl	8002242 <json_object_add>
 8002114:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff4f 	bl	8001fc8 <json_object_deinit>
            return JSONFailure;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e01a      	b.n	8002166 <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 8002136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002138:	3301      	adds	r3, #1
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002142:	429a      	cmp	r2, r3
 8002144:	d3d1      	bcc.n	80020ea <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ff3c 	bl	8001fc8 <json_object_deinit>
    *object = new_object;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	461d      	mov	r5, r3
 8002154:	f107 040c 	add.w	r4, r7, #12
 8002158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3748      	adds	r7, #72	; 0x48
 800216a:	46bd      	mov	sp, r7
 800216c:	bdb0      	pop	{r4, r5, r7, pc}

0800216e <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 800216e:	b580      	push	{r7, lr}
 8002170:	b08c      	sub	sp, #48	; 0x30
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	3b01      	subs	r3, #1
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4013      	ands	r3, r2
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021aa:	e03f      	b.n	800222c <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 80021ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	441a      	add	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d101      	bne.n	80021d6 <json_object_get_cell_ix+0x68>
            return ix;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	e031      	b.n	800223a <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d11b      	bne.n	8002224 <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 80021fa:	69b8      	ldr	r0, [r7, #24]
 80021fc:	f7fd ffc0 	bl	8000180 <strlen>
 8002200:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d10d      	bne.n	8002226 <json_object_get_cell_ix+0xb8>
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	68b8      	ldr	r0, [r7, #8]
 8002210:	f009 fe4e 	bl	800beb0 <strncmp>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
            return ix;
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	e00a      	b.n	800223a <json_object_get_cell_ix+0xcc>
            continue;
 8002224:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	3301      	adds	r3, #1
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002232:	429a      	cmp	r2, r3
 8002234:	d3ba      	bcc.n	80021ac <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223a:	4618      	mov	r0, r3
 800223c:	3730      	adds	r7, #48	; 0x30
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 8002242:	b580      	push	{r7, lr}
 8002244:	b08a      	sub	sp, #40	; 0x28
 8002246:	af02      	add	r7, sp, #8
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <json_object_add+0x30>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <json_object_add+0x30>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <json_object_add+0x36>
        return JSONFailure;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e06e      	b.n	8002356 <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8002278:	68b8      	ldr	r0, [r7, #8]
 800227a:	f7fd ff81 	bl	8000180 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	4619      	mov	r1, r3
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f7ff fd92 	bl	8001dac <hash_string>
 8002288:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	f7fd ff76 	bl	8000180 <strlen>
 8002294:	4602      	mov	r2, r0
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ff64 	bl	800216e <json_object_get_cell_ix>
 80022a6:	61f8      	str	r0, [r7, #28]
    if (found) {
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <json_object_add+0x72>
        return JSONFailure;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e050      	b.n	8002356 <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d316      	bcc.n	80022ee <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fee9 	bl	8002098 <json_object_grow_and_rehash>
 80022c6:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <json_object_add+0x92>
            return JSONFailure;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e040      	b.n	8002356 <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80022d4:	68b8      	ldr	r0, [r7, #8]
 80022d6:	f7fd ff53 	bl	8000180 <strlen>
 80022da:	4602      	mov	r2, r0
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff ff41 	bl	800216e <json_object_get_cell_ix>
 80022ec:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6992      	ldr	r2, [r2, #24]
 800230c:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	601a      	str	r2, [r3, #0]
    object->count++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f002 f811 	bl	8004370 <json_object_get_wrapping_value>
 800234e:	4602      	mov	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 800235e:	b580      	push	{r7, lr}
 8002360:	b08a      	sub	sp, #40	; 0x28
 8002362:	af02      	add	r7, sp, #8
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    parson_bool_t found = PARSON_FALSE;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
    size_t item_ix = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
    if (!object || !name) {
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <json_object_getn_value+0x28>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <json_object_getn_value+0x2c>
        return NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	e022      	b.n	80023d0 <json_object_getn_value+0x72>
    }
    hash = hash_string(name, name_len);
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	68b8      	ldr	r0, [r7, #8]
 800238e:	f7ff fd0d 	bl	8001dac <hash_string>
 8002392:	61f8      	str	r0, [r7, #28]
    found = PARSON_FALSE;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, name_len, hash, &found);
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fee2 	bl	800216e <json_object_get_cell_ix>
 80023aa:	61b8      	str	r0, [r7, #24]
    if (!found) {
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <json_object_getn_value+0x58>
        return NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e00c      	b.n	80023d0 <json_object_getn_value+0x72>
    }
    item_ix = object->cells[cell_ix];
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	617b      	str	r3, [r7, #20]
    return object->values[item_ix];
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2101      	movs	r1, #1
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fdef 	bl	8001fc8 <json_object_deinit>
    parson_free(object);
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <json_object_free+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000000c 	.word	0x2000000c

08002400 <json_array_make>:

/* JSON Array */
static JSON_Array * json_array_make(JSON_Value *wrapping_value) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <json_array_make+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2010      	movs	r0, #16
 800240e:	4798      	blx	r3
 8002410:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <json_array_make+0x1c>
        return NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	e00c      	b.n	8002436 <json_array_make+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
    return new_array;
 8002434:	68fb      	ldr	r3, [r7, #12]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000008 	.word	0x20000008

08002444 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	429a      	cmp	r2, r3
 8002458:	d310      	bcc.n	800247c <json_array_add+0x38>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2b10      	cmp	r3, #16
 8002462:	bf38      	it	cc
 8002464:	2310      	movcc	r3, #16
 8002466:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) != JSONSuccess) {
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f81e 	bl	80024ac <json_array_resize>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <json_array_add+0x38>
            return JSONFailure;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e013      	b.n	80024a4 <json_array_add+0x60>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f001 ffb4 	bl	80043ea <json_array_get_wrapping_value>
 8002482:	4602      	mov	r2, r0
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	601a      	str	r2, [r3, #0]
    array->count++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <json_array_resize+0x1a>
        return JSONFailure;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	e02a      	b.n	800251c <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <json_array_resize+0x78>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	4610      	mov	r0, r2
 80024d0:	4798      	blx	r3
 80024d2:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <json_array_resize+0x34>
        return JSONFailure;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e01d      	b.n	800251c <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00c      	beq.n	8002502 <json_array_resize+0x56>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	461a      	mov	r2, r3
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f009 fab9 	bl	800ba74 <memcpy>
    }
    parson_free(array->items);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <json_array_resize+0x7c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6852      	ldr	r2, [r2, #4]
 800250a:	4610      	mov	r0, r2
 800250c:	4798      	blx	r3
    array->items = new_items;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000008 	.word	0x20000008
 8002528:	2000000c 	.word	0x2000000c

0800252c <json_array_free>:

static void json_array_free(JSON_Array *array) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e00b      	b.n	8002552 <json_array_free+0x26>
        json_value_free(array->items[i]);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f001 fffc 	bl	8004544 <json_value_free>
    for (i = 0; i < array->count; i++) {
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d3ee      	bcc.n	800253a <json_array_free+0xe>
    }
    parson_free(array->items);
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <json_array_free+0x4c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6852      	ldr	r2, [r2, #4]
 8002564:	4610      	mov	r0, r2
 8002566:	4798      	blx	r3
    parson_free(array);
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <json_array_free+0x4c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	2000000c 	.word	0x2000000c

0800257c <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <json_value_init_string_no_copy+0x40>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2010      	movs	r0, #16
 800258c:	4798      	blx	r3
 800258e:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <json_value_init_string_no_copy+0x1e>
        return NULL;
 8002596:	2300      	movs	r3, #0
 8002598:	e00c      	b.n	80025b4 <json_value_init_string_no_copy+0x38>
    }
    new_value->parent = NULL;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2202      	movs	r2, #2
 80025a4:	605a      	str	r2, [r3, #4]
    new_value->value.string.chars = string;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]
    new_value->value.string.length = length;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	60da      	str	r2, [r3, #12]
    return new_value;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000008 	.word	0x20000008

080025c0 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b22      	cmp	r3, #34	; 0x22
 80025d0:	d002      	beq.n	80025d8 <skip_quotes+0x18>
        return JSONFailure;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e02f      	b.n	8002638 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 80025e2:	e01e      	b.n	8002622 <skip_quotes+0x62>
        if (**string == '\0') {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <skip_quotes+0x34>
            return JSONFailure;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	e021      	b.n	8002638 <skip_quotes+0x78>
        } else if (**string == '\\') {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b5c      	cmp	r3, #92	; 0x5c
 80025fc:	d10c      	bne.n	8002618 <skip_quotes+0x58>
            SKIP_CHAR(string);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <skip_quotes+0x58>
                return JSONFailure;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	e00f      	b.n	8002638 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b22      	cmp	r3, #34	; 0x22
 800262a:	d1db      	bne.n	80025e4 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <parse_utf16>:

static JSON_Status parse_utf16(const char **unprocessed, char **processed) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
    JSON_Status status = JSONFailure;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	617b      	str	r3, [r7, #20]
    unprocessed_ptr++; /* skips u */
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	3301      	adds	r3, #1
 8002664:	61bb      	str	r3, [r7, #24]
    status = parse_utf16_hex(unprocessed_ptr, &cp);
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	4619      	mov	r1, r3
 800266c:	69b8      	ldr	r0, [r7, #24]
 800266e:	f7ff fb02 	bl	8001c76 <parse_utf16_hex>
 8002672:	6178      	str	r0, [r7, #20]
    if (status != JSONSuccess) {
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <parse_utf16+0x3c>
        return JSONFailure;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e0ce      	b.n	800281e <parse_utf16+0x1da>
    }
    if (cp < 0x80) {
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b7f      	cmp	r3, #127	; 0x7f
 8002684:	d804      	bhi.n	8002690 <parse_utf16+0x4c>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e0bc      	b.n	800280a <parse_utf16+0x1c6>
    } else if (cp < 0x800) {
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002696:	d219      	bcs.n	80026cc <parse_utf16+0x88>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e09e      	b.n	800280a <parse_utf16+0x1c6>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80026d2:	d303      	bcc.n	80026dc <parse_utf16+0x98>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80026da:	d325      	bcc.n	8002728 <parse_utf16+0xe4>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	0b1b      	lsrs	r3, r3, #12
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f063 031f 	orn	r3, r3, #31
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002712:	b2da      	uxtb	r2, r3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3302      	adds	r3, #2
 8002718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3302      	adds	r3, #2
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e070      	b.n	800280a <parse_utf16+0x1c6>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800272e:	d369      	bcc.n	8002804 <parse_utf16+0x1c0>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002736:	d265      	bcs.n	8002804 <parse_utf16+0x1c0>
        lead = cp;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3304      	adds	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	61ba      	str	r2, [r7, #24]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b5c      	cmp	r3, #92	; 0x5c
 800274c:	d105      	bne.n	800275a <parse_utf16+0x116>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	61ba      	str	r2, [r7, #24]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b75      	cmp	r3, #117	; 0x75
 8002758:	d002      	beq.n	8002760 <parse_utf16+0x11c>
            return JSONFailure;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	e05e      	b.n	800281e <parse_utf16+0x1da>
        }
        status = parse_utf16_hex(unprocessed_ptr, &trail);
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	4619      	mov	r1, r3
 8002766:	69b8      	ldr	r0, [r7, #24]
 8002768:	f7ff fa85 	bl	8001c76 <parse_utf16_hex>
 800276c:	6178      	str	r0, [r7, #20]
        if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <parse_utf16+0x140>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800277a:	d303      	bcc.n	8002784 <parse_utf16+0x140>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002782:	d302      	bcc.n	800278a <parse_utf16+0x146>
            return JSONFailure;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	e049      	b.n	800281e <parse_utf16+0x1da>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	029a      	lsls	r2, r3, #10
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <parse_utf16+0x1e4>)
 8002790:	4013      	ands	r3, r2
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002798:	4313      	orrs	r3, r2
 800279a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800279e:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0c9b      	lsrs	r3, r3, #18
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f063 030f 	orn	r3, r3, #15
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0b1b      	lsrs	r3, r3, #12
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3302      	adds	r3, #2
 80027de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3303      	adds	r3, #3
 80027f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3303      	adds	r3, #3
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	e002      	b.n	800280a <parse_utf16+0x1c6>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	e009      	b.n	800281e <parse_utf16+0x1da>
    }
    unprocessed_ptr += 3;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3303      	adds	r3, #3
 800280e:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	000ffc00 	.word	0x000ffc00

0800282c <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len, size_t *output_len) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
    const char *input_ptr = input;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	617b      	str	r3, [r7, #20]
    size_t initial_size = (input_len + 1) * sizeof(char);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3301      	adds	r3, #1
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    size_t final_size = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
    output = (char*)parson_malloc(initial_size);
 8002852:	4b69      	ldr	r3, [pc, #420]	; (80029f8 <process_string+0x1cc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002858:	4798      	blx	r3
 800285a:	61f8      	str	r0, [r7, #28]
    if (output == NULL) {
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80b9 	beq.w	80029d6 <process_string+0x1aa>
        goto error;
    }
    output_ptr = output;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8002868:	e08a      	b.n	8002980 <process_string+0x154>
        if (*input_ptr == '\\') {
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b5c      	cmp	r3, #92	; 0x5c
 8002870:	d176      	bne.n	8002960 <process_string+0x134>
            input_ptr++;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
            switch (*input_ptr) {
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b75      	cmp	r3, #117	; 0x75
 800287e:	f300 80ac 	bgt.w	80029da <process_string+0x1ae>
 8002882:	2b5c      	cmp	r3, #92	; 0x5c
 8002884:	da04      	bge.n	8002890 <process_string+0x64>
 8002886:	2b22      	cmp	r3, #34	; 0x22
 8002888:	d03e      	beq.n	8002908 <process_string+0xdc>
 800288a:	2b2f      	cmp	r3, #47	; 0x2f
 800288c:	d044      	beq.n	8002918 <process_string+0xec>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 800288e:	e0a4      	b.n	80029da <process_string+0x1ae>
            switch (*input_ptr) {
 8002890:	3b5c      	subs	r3, #92	; 0x5c
 8002892:	2b19      	cmp	r3, #25
 8002894:	f200 80a1 	bhi.w	80029da <process_string+0x1ae>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <process_string+0x74>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	08002911 	.word	0x08002911
 80028a4:	080029db 	.word	0x080029db
 80028a8:	080029db 	.word	0x080029db
 80028ac:	080029db 	.word	0x080029db
 80028b0:	080029db 	.word	0x080029db
 80028b4:	080029db 	.word	0x080029db
 80028b8:	08002921 	.word	0x08002921
 80028bc:	080029db 	.word	0x080029db
 80028c0:	080029db 	.word	0x080029db
 80028c4:	080029db 	.word	0x080029db
 80028c8:	08002929 	.word	0x08002929
 80028cc:	080029db 	.word	0x080029db
 80028d0:	080029db 	.word	0x080029db
 80028d4:	080029db 	.word	0x080029db
 80028d8:	080029db 	.word	0x080029db
 80028dc:	080029db 	.word	0x080029db
 80028e0:	080029db 	.word	0x080029db
 80028e4:	080029db 	.word	0x080029db
 80028e8:	08002931 	.word	0x08002931
 80028ec:	080029db 	.word	0x080029db
 80028f0:	080029db 	.word	0x080029db
 80028f4:	080029db 	.word	0x080029db
 80028f8:	08002939 	.word	0x08002939
 80028fc:	080029db 	.word	0x080029db
 8002900:	08002941 	.word	0x08002941
 8002904:	08002949 	.word	0x08002949
                case '\"': *output_ptr = '\"'; break;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2222      	movs	r2, #34	; 0x22
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e031      	b.n	8002974 <process_string+0x148>
                case '\\': *output_ptr = '\\'; break;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	225c      	movs	r2, #92	; 0x5c
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e02d      	b.n	8002974 <process_string+0x148>
                case '/':  *output_ptr = '/';  break;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	222f      	movs	r2, #47	; 0x2f
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e029      	b.n	8002974 <process_string+0x148>
                case 'b':  *output_ptr = '\b'; break;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2208      	movs	r2, #8
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e025      	b.n	8002974 <process_string+0x148>
                case 'f':  *output_ptr = '\f'; break;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	220c      	movs	r2, #12
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e021      	b.n	8002974 <process_string+0x148>
                case 'n':  *output_ptr = '\n'; break;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	220a      	movs	r2, #10
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e01d      	b.n	8002974 <process_string+0x148>
                case 'r':  *output_ptr = '\r'; break;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	220d      	movs	r2, #13
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e019      	b.n	8002974 <process_string+0x148>
                case 't':  *output_ptr = '\t'; break;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2209      	movs	r2, #9
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e015      	b.n	8002974 <process_string+0x148>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
 8002948:	f107 0210 	add.w	r2, r7, #16
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fe76 	bl	8002644 <parse_utf16>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <process_string+0x146>
                        goto error;
 800295e:	e041      	b.n	80029e4 <process_string+0x1b8>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b1f      	cmp	r3, #31
 8002966:	d93a      	bls.n	80029de <process_string+0x1b2>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e000      	b.n	8002974 <process_string+0x148>
                    break;
 8002972:	bf00      	nop
        }
        output_ptr++;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	3301      	adds	r3, #1
 8002978:	613b      	str	r3, [r7, #16]
        input_ptr++;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <process_string+0x16c>
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4293      	cmp	r3, r2
 8002994:	f63f af69 	bhi.w	800286a <process_string+0x3e>
    }
    *output_ptr = '\0';
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	623b      	str	r3, [r7, #32]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <process_string+0x1cc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a38      	ldr	r0, [r7, #32]
 80029ae:	4798      	blx	r3
 80029b0:	61b8      	str	r0, [r7, #24]
    if (resized_output == NULL) {
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d014      	beq.n	80029e2 <process_string+0x1b6>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	69f9      	ldr	r1, [r7, #28]
 80029bc:	69b8      	ldr	r0, [r7, #24]
 80029be:	f009 f859 	bl	800ba74 <memcpy>
    *output_len = final_size - 1;
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
    parson_free(output);
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <process_string+0x1d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69f8      	ldr	r0, [r7, #28]
 80029d0:	4798      	blx	r3
    return resized_output;
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	e00b      	b.n	80029ee <process_string+0x1c2>
        goto error;
 80029d6:	bf00      	nop
 80029d8:	e004      	b.n	80029e4 <process_string+0x1b8>
                    goto error;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <process_string+0x1b8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <process_string+0x1b8>
        goto error;
 80029e2:	bf00      	nop
error:
    parson_free(output);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <process_string+0x1d0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69f8      	ldr	r0, [r7, #28]
 80029ea:	4798      	blx	r3
    return NULL;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000008 	.word	0x20000008
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
    const char *string_start = *string;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]
    size_t input_string_len = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fdd3 	bl	80025c0 <skip_quotes>
 8002a1a:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <get_quoted_string+0x26>
        return NULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e00d      	b.n	8002a42 <get_quoted_string+0x42>
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	3b02      	subs	r3, #2
 8002a30:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, input_string_len, output_string_len);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	6939      	ldr	r1, [r7, #16]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fef6 	bl	800282c <process_string>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a5c:	d906      	bls.n	8002a6c <parse_value+0x20>
        return NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e08d      	b.n	8002b7e <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	4a44      	ldr	r2, [pc, #272]	; (8002b88 <parse_value+0x13c>)
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ef      	bne.n	8002a62 <parse_value+0x16>
    switch (**string) {
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b7b      	cmp	r3, #123	; 0x7b
 8002a8a:	dc77      	bgt.n	8002b7c <parse_value+0x130>
 8002a8c:	2b5b      	cmp	r3, #91	; 0x5b
 8002a8e:	da08      	bge.n	8002aa2 <parse_value+0x56>
 8002a90:	2b39      	cmp	r3, #57	; 0x39
 8002a92:	dc73      	bgt.n	8002b7c <parse_value+0x130>
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	da67      	bge.n	8002b68 <parse_value+0x11c>
 8002a98:	2b22      	cmp	r3, #34	; 0x22
 8002a9a:	d05b      	beq.n	8002b54 <parse_value+0x108>
 8002a9c:	2b2d      	cmp	r3, #45	; 0x2d
 8002a9e:	d063      	beq.n	8002b68 <parse_value+0x11c>
 8002aa0:	e06c      	b.n	8002b7c <parse_value+0x130>
 8002aa2:	3b5b      	subs	r3, #91	; 0x5b
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d869      	bhi.n	8002b7c <parse_value+0x130>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <parse_value+0x64>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002b45 	.word	0x08002b45
 8002ab4:	08002b7d 	.word	0x08002b7d
 8002ab8:	08002b7d 	.word	0x08002b7d
 8002abc:	08002b7d 	.word	0x08002b7d
 8002ac0:	08002b7d 	.word	0x08002b7d
 8002ac4:	08002b7d 	.word	0x08002b7d
 8002ac8:	08002b7d 	.word	0x08002b7d
 8002acc:	08002b7d 	.word	0x08002b7d
 8002ad0:	08002b7d 	.word	0x08002b7d
 8002ad4:	08002b7d 	.word	0x08002b7d
 8002ad8:	08002b7d 	.word	0x08002b7d
 8002adc:	08002b5f 	.word	0x08002b5f
 8002ae0:	08002b7d 	.word	0x08002b7d
 8002ae4:	08002b7d 	.word	0x08002b7d
 8002ae8:	08002b7d 	.word	0x08002b7d
 8002aec:	08002b7d 	.word	0x08002b7d
 8002af0:	08002b7d 	.word	0x08002b7d
 8002af4:	08002b7d 	.word	0x08002b7d
 8002af8:	08002b7d 	.word	0x08002b7d
 8002afc:	08002b73 	.word	0x08002b73
 8002b00:	08002b7d 	.word	0x08002b7d
 8002b04:	08002b7d 	.word	0x08002b7d
 8002b08:	08002b7d 	.word	0x08002b7d
 8002b0c:	08002b7d 	.word	0x08002b7d
 8002b10:	08002b7d 	.word	0x08002b7d
 8002b14:	08002b5f 	.word	0x08002b5f
 8002b18:	08002b7d 	.word	0x08002b7d
 8002b1c:	08002b7d 	.word	0x08002b7d
 8002b20:	08002b7d 	.word	0x08002b7d
 8002b24:	08002b7d 	.word	0x08002b7d
 8002b28:	08002b7d 	.word	0x08002b7d
 8002b2c:	08002b7d 	.word	0x08002b7d
 8002b30:	08002b35 	.word	0x08002b35
        case '{':
            return parse_object_value(string, nesting + 1);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f826 	bl	8002b8c <parse_object_value>
 8002b40:	4603      	mov	r3, r0
 8002b42:	e01c      	b.n	8002b7e <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f934 	bl	8002db8 <parse_array_value>
 8002b50:	4603      	mov	r3, r0
 8002b52:	e014      	b.n	8002b7e <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f9f9 	bl	8002f4c <parse_string_value>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	e00f      	b.n	8002b7e <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa1e 	bl	8002fa0 <parse_boolean_value>
 8002b64:	4603      	mov	r3, r0
 8002b66:	e00a      	b.n	8002b7e <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fa55 	bl	8003018 <parse_number_value>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	e005      	b.n	8002b7e <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 faae 	bl	80030d4 <parse_null_value>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	e000      	b.n	8002b7e <parse_value+0x132>
        default:
            return NULL;
 8002b7c:	2300      	movs	r3, #0
    }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0800f650 	.word	0x0800f650

08002b8c <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
    JSON_Status status = JSONFailure;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	61fb      	str	r3, [r7, #28]
    JSON_Value *output_value = NULL, *new_value = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
    JSON_Object *output_object = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
    char *new_key = NULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]

    output_value = json_value_init_object();
 8002bac:	f001 fcf8 	bl	80045a0 <json_value_init_object>
 8002bb0:	61b8      	str	r0, [r7, #24]
    if (output_value == NULL) {
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <parse_object_value+0x30>
        return NULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e0f5      	b.n	8002da8 <parse_object_value+0x21c>
    }
    if (**string != '{') {
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b7b      	cmp	r3, #123	; 0x7b
 8002bc4:	d004      	beq.n	8002bd0 <parse_object_value+0x44>
        json_value_free(output_value);
 8002bc6:	69b8      	ldr	r0, [r7, #24]
 8002bc8:	f001 fcbc 	bl	8004544 <json_value_free>
        return NULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e0eb      	b.n	8002da8 <parse_object_value+0x21c>
    }
    output_object = json_value_get_object(output_value);
 8002bd0:	69b8      	ldr	r0, [r7, #24]
 8002bd2:	f001 fc2d 	bl	8004430 <json_value_get_object>
 8002bd6:	6138      	str	r0, [r7, #16]
    SKIP_CHAR(string);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 8002be2:	e004      	b.n	8002bee <parse_object_value+0x62>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a6e      	ldr	r2, [pc, #440]	; (8002db0 <parse_object_value+0x224>)
 8002bf8:	4413      	add	r3, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ef      	bne.n	8002be4 <parse_object_value+0x58>
    if (**string == '}') { /* empty object */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b7d      	cmp	r3, #125	; 0x7d
 8002c0c:	f040 80a1 	bne.w	8002d52 <parse_object_value+0x1c6>
        SKIP_CHAR(string);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
        return output_value;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	e0c4      	b.n	8002da8 <parse_object_value+0x21c>
    }
    while (**string != '\0') {
        size_t key_len = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
        new_key = get_quoted_string(string, &key_len);
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	4619      	mov	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fee9 	bl	8002a00 <get_quoted_string>
 8002c2e:	60f8      	str	r0, [r7, #12]
        /* We do not support key names with embedded \0 chars */
        if (!new_key) {
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <parse_object_value+0xb4>
            json_value_free(output_value);
 8002c36:	69b8      	ldr	r0, [r7, #24]
 8002c38:	f001 fc84 	bl	8004544 <json_value_free>
            return NULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e0b3      	b.n	8002da8 <parse_object_value+0x21c>
        }
        if (key_len != strlen(new_key)) {
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7fd fa9d 	bl	8000180 <strlen>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d00d      	beq.n	8002c6a <parse_object_value+0xde>
            parson_free(new_key);
 8002c4e:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <parse_object_value+0x228>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	4798      	blx	r3
            json_value_free(output_value);
 8002c56:	69b8      	ldr	r0, [r7, #24]
 8002c58:	f001 fc74 	bl	8004544 <json_value_free>
            return NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e0a3      	b.n	8002da8 <parse_object_value+0x21c>
        }
        SKIP_WHITESPACES(string);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <parse_object_value+0x224>)
 8002c74:	4413      	add	r3, r2
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ef      	bne.n	8002c60 <parse_object_value+0xd4>
        if (**string != ':') {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b3a      	cmp	r3, #58	; 0x3a
 8002c88:	d008      	beq.n	8002c9c <parse_object_value+0x110>
            parson_free(new_key);
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <parse_object_value+0x228>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	4798      	blx	r3
            json_value_free(output_value);
 8002c92:	69b8      	ldr	r0, [r7, #24]
 8002c94:	f001 fc56 	bl	8004544 <json_value_free>
            return NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e085      	b.n	8002da8 <parse_object_value+0x21c>
        }
        SKIP_CHAR(string);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 8002ca6:	6839      	ldr	r1, [r7, #0]
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fecf 	bl	8002a4c <parse_value>
 8002cae:	6178      	str	r0, [r7, #20]
        if (new_value == NULL) {
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <parse_object_value+0x13c>
            parson_free(new_key);
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <parse_object_value+0x228>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	4798      	blx	r3
            json_value_free(output_value);
 8002cbe:	69b8      	ldr	r0, [r7, #24]
 8002cc0:	f001 fc40 	bl	8004544 <json_value_free>
            return NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e06f      	b.n	8002da8 <parse_object_value+0x21c>
        }
        status = json_object_add(output_object, new_key, new_value);
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	6938      	ldr	r0, [r7, #16]
 8002cce:	f7ff fab8 	bl	8002242 <json_object_add>
 8002cd2:	61f8      	str	r0, [r7, #28]
        if (status != JSONSuccess) {
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <parse_object_value+0x170>
            parson_free(new_key);
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <parse_object_value+0x228>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	4798      	blx	r3
            json_value_free(new_value);
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f001 fc2e 	bl	8004544 <json_value_free>
            json_value_free(output_value);
 8002ce8:	69b8      	ldr	r0, [r7, #24]
 8002cea:	f001 fc2b 	bl	8004544 <json_value_free>
            return NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e05a      	b.n	8002da8 <parse_object_value+0x21c>
        }
        SKIP_WHITESPACES(string);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <parse_object_value+0x224>)
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ef      	bne.n	8002cf2 <parse_object_value+0x166>
        if (**string != ',') {
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b2c      	cmp	r3, #44	; 0x2c
 8002d1a:	d121      	bne.n	8002d60 <parse_object_value+0x1d4>
            break;
        }
        SKIP_CHAR(string);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8002d26:	e004      	b.n	8002d32 <parse_object_value+0x1a6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <parse_object_value+0x224>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ef      	bne.n	8002d28 <parse_object_value+0x19c>
        if (**string == '}') {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b7d      	cmp	r3, #125	; 0x7d
 8002d50:	d008      	beq.n	8002d64 <parse_object_value+0x1d8>
    while (**string != '\0') {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f47f af60 	bne.w	8002c1e <parse_object_value+0x92>
 8002d5e:	e008      	b.n	8002d72 <parse_object_value+0x1e6>
            break;
 8002d60:	bf00      	nop
 8002d62:	e006      	b.n	8002d72 <parse_object_value+0x1e6>
            break;
 8002d64:	bf00      	nop
        }
    }
    SKIP_WHITESPACES(string);
 8002d66:	e004      	b.n	8002d72 <parse_object_value+0x1e6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <parse_object_value+0x224>)
 8002d7c:	4413      	add	r3, r2
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ef      	bne.n	8002d68 <parse_object_value+0x1dc>
    if (**string != '}') {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b7d      	cmp	r3, #125	; 0x7d
 8002d90:	d004      	beq.n	8002d9c <parse_object_value+0x210>
        json_value_free(output_value);
 8002d92:	69b8      	ldr	r0, [r7, #24]
 8002d94:	f001 fbd6 	bl	8004544 <json_value_free>
        return NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e005      	b.n	8002da8 <parse_object_value+0x21c>
    }
    SKIP_CHAR(string);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
    return output_value;
 8002da6:	69bb      	ldr	r3, [r7, #24]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	0800f650 	.word	0x0800f650
 8002db4:	2000000c 	.word	0x2000000c

08002db8 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 8002dce:	f001 fc13 	bl	80045f8 <json_value_init_array>
 8002dd2:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <parse_array_value+0x26>
        return NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e0b0      	b.n	8002f40 <parse_array_value+0x188>
    }
    if (**string != '[') {
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b5b      	cmp	r3, #91	; 0x5b
 8002de6:	d004      	beq.n	8002df2 <parse_array_value+0x3a>
        json_value_free(output_value);
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f001 fbab 	bl	8004544 <json_value_free>
        return NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e0a6      	b.n	8002f40 <parse_array_value+0x188>
    }
    output_array = json_value_get_array(output_value);
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f001 fb2e 	bl	8004454 <json_value_get_array>
 8002df8:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 8002e04:	e004      	b.n	8002e10 <parse_array_value+0x58>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <parse_array_value+0x190>)
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ef      	bne.n	8002e06 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b5d      	cmp	r3, #93	; 0x5d
 8002e2e:	d152      	bne.n	8002ed6 <parse_array_value+0x11e>
        SKIP_CHAR(string);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
        return output_value;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	e080      	b.n	8002f40 <parse_array_value+0x188>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fe03 	bl	8002a4c <parse_value>
 8002e46:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <parse_array_value+0xa0>
            json_value_free(output_value);
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f001 fb78 	bl	8004544 <json_value_free>
            return NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e073      	b.n	8002f40 <parse_array_value+0x188>
        }
        if (json_array_add(output_array, new_array_value) != JSONSuccess) {
 8002e58:	6939      	ldr	r1, [r7, #16]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff faf2 	bl	8002444 <json_array_add>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <parse_array_value+0xc8>
            json_value_free(new_array_value);
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f001 fb6c 	bl	8004544 <json_value_free>
            json_value_free(output_value);
 8002e6c:	6978      	ldr	r0, [r7, #20]
 8002e6e:	f001 fb69 	bl	8004544 <json_value_free>
            return NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e064      	b.n	8002f40 <parse_array_value+0x188>
        }
        SKIP_WHITESPACES(string);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <parse_array_value+0x190>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ef      	bne.n	8002e76 <parse_array_value+0xbe>
        if (**string != ',') {
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b2c      	cmp	r3, #44	; 0x2c
 8002e9e:	d120      	bne.n	8002ee2 <parse_array_value+0x12a>
            break;
        }
        SKIP_CHAR(string);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8002eaa:	e004      	b.n	8002eb6 <parse_array_value+0xfe>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <parse_array_value+0x190>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ef      	bne.n	8002eac <parse_array_value+0xf4>
        if (**string == ']') {
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b5d      	cmp	r3, #93	; 0x5d
 8002ed4:	d007      	beq.n	8002ee6 <parse_array_value+0x12e>
    while (**string != '\0') {
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ae      	bne.n	8002e3e <parse_array_value+0x86>
 8002ee0:	e008      	b.n	8002ef4 <parse_array_value+0x13c>
            break;
 8002ee2:	bf00      	nop
 8002ee4:	e006      	b.n	8002ef4 <parse_array_value+0x13c>
            break;
 8002ee6:	bf00      	nop
        }
    }
    SKIP_WHITESPACES(string);
 8002ee8:	e004      	b.n	8002ef4 <parse_array_value+0x13c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <parse_array_value+0x190>)
 8002efe:	4413      	add	r3, r2
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ef      	bne.n	8002eea <parse_array_value+0x132>
    if (**string != ']' || /* Trim array after parsing is over */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b5d      	cmp	r3, #93	; 0x5d
 8002f12:	d10a      	bne.n	8002f2a <parse_array_value+0x172>
        json_array_resize(output_array, json_array_get_count(output_array)) != JSONSuccess) {
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f001 fa57 	bl	80043c8 <json_array_get_count>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff fac4 	bl	80024ac <json_array_resize>
 8002f24:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <parse_array_value+0x17c>
            json_value_free(output_value);
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	f001 fb0a 	bl	8004544 <json_value_free>
            return NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e005      	b.n	8002f40 <parse_array_value+0x188>
    }
    SKIP_CHAR(string);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
    return output_value;
 8002f3e:	697b      	ldr	r3, [r7, #20]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	0800f650 	.word	0x0800f650

08002f4c <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
    size_t new_string_len = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fd4c 	bl	8002a00 <get_quoted_string>
 8002f68:	6138      	str	r0, [r7, #16]
    if (new_string == NULL) {
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <parse_string_value+0x28>
        return NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e00f      	b.n	8002f94 <parse_string_value+0x48>
    }
    value = json_value_init_string_no_copy(new_string, new_string_len);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4619      	mov	r1, r3
 8002f78:	6938      	ldr	r0, [r7, #16]
 8002f7a:	f7ff faff 	bl	800257c <json_value_init_string_no_copy>
 8002f7e:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <parse_string_value+0x46>
        parson_free(new_string);
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <parse_string_value+0x50>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6938      	ldr	r0, [r7, #16]
 8002f8c:	4798      	blx	r3
        return NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <parse_string_value+0x48>
    }
    return value;
 8002f92:	697b      	ldr	r3, [r7, #20]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	2000000c 	.word	0x2000000c

08002fa0 <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 8002fa8:	2304      	movs	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 8002fac:	2305      	movs	r3, #5
 8002fae:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4815      	ldr	r0, [pc, #84]	; (8003010 <parse_boolean_value+0x70>)
 8002fba:	f008 ff79 	bl	800beb0 <strncmp>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <parse_boolean_value+0x3a>
        *string += true_token_size;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f001 fb8f 	bl	80046f4 <json_value_init_boolean>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	e015      	b.n	8003006 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480c      	ldr	r0, [pc, #48]	; (8003014 <parse_boolean_value+0x74>)
 8002fe4:	f008 ff64 	bl	800beb0 <strncmp>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <parse_boolean_value+0x64>
        *string += false_token_size;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f001 fb7a 	bl	80046f4 <json_value_init_boolean>
 8003000:	4603      	mov	r3, r0
 8003002:	e000      	b.n	8003006 <parse_boolean_value+0x66>
    }
    return NULL;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	0800ec78 	.word	0x0800ec78
 8003014:	0800ec80 	.word	0x0800ec80

08003018 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 800302c:	f008 fac8 	bl	800b5c0 <__errno>
 8003030:	4603      	mov	r3, r0
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f107 020c 	add.w	r2, r7, #12
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f009 fd83 	bl	800cb4c <strtod>
 8003046:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 800304a:	f008 fab9 	bl	800b5c0 <__errno>
 800304e:	4603      	mov	r3, r0
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b22      	cmp	r3, #34	; 0x22
 8003054:	d116      	bne.n	8003084 <parse_number_value+0x6c>
 8003056:	f04f 32ff 	mov.w	r2, #4294967295
 800305a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800305e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003062:	f7fd fd13 	bl	8000a8c <__aeabi_dcmplt>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <parse_number_value+0x68>
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <parse_number_value+0xb8>)
 8003072:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003076:	f7fd fd27 	bl	8000ac8 <__aeabi_dcmpgt>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <parse_number_value+0x6c>
        return NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	e021      	b.n	80030c8 <parse_number_value+0xb0>
    }
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 8003084:	f008 fa9c 	bl	800b5c0 <__errno>
 8003088:	4603      	mov	r3, r0
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <parse_number_value+0x84>
 8003090:	f008 fa96 	bl	800b5c0 <__errno>
 8003094:	4603      	mov	r3, r0
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b22      	cmp	r3, #34	; 0x22
 800309a:	d10b      	bne.n	80030b4 <parse_number_value+0x9c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fe fe3f 	bl	8001d2c <is_decimal>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <parse_number_value+0xa0>
        return NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e007      	b.n	80030c8 <parse_number_value+0xb0>
    }
    *string = end;
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 80030be:	ed97 0b04 	vldr	d0, [r7, #16]
 80030c2:	f001 fac5 	bl	8004650 <json_value_init_number>
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	7fefffff 	.word	0x7fefffff

080030d4 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 80030dc:	2304      	movs	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4619      	mov	r1, r3
 80030e8:	480a      	ldr	r0, [pc, #40]	; (8003114 <parse_null_value+0x40>)
 80030ea:	f008 fee1 	bl	800beb0 <strncmp>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <parse_null_value+0x34>
        *string += token_size;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	441a      	add	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 8003100:	f001 fb1c 	bl	800473c <json_value_init_null>
 8003104:	4603      	mov	r3, r0
 8003106:	e000      	b.n	800310a <parse_null_value+0x36>
    }
    return NULL;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	0800ec88 	.word	0x0800ec88

08003118 <json_serialize_to_buffer_r>:
                                    APPEND_STRING(PARSON_INDENT_STR);\
                                }\
                            } while (0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b098      	sub	sp, #96	; 0x60
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	63bb      	str	r3, [r7, #56]	; 0x38
 800312a:	2300      	movs	r3, #0
 800312c:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Value *temp_value = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Array *array = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Object *object = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t i = 0, count = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	657b      	str	r3, [r7, #84]	; 0x54
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
    double num = 0.0;
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
 8003154:	2300      	movs	r3, #0
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t len = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f001 f955 	bl	800440c <json_value_get_type>
 8003162:	4603      	mov	r3, r0
 8003164:	3301      	adds	r3, #1
 8003166:	2b07      	cmp	r3, #7
 8003168:	f200 8355 	bhi.w	8003816 <json_serialize_to_buffer_r+0x6fe>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <json_serialize_to_buffer_r+0x5c>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	08003811 	.word	0x08003811
 8003178:	08003817 	.word	0x08003817
 800317c:	080037dd 	.word	0x080037dd
 8003180:	080036a3 	.word	0x080036a3
 8003184:	08003763 	.word	0x08003763
 8003188:	080033c1 	.word	0x080033c1
 800318c:	08003195 	.word	0x08003195
 8003190:	080036f1 	.word	0x080036f1
        case JSONArray:
            array = json_value_get_array(value);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f001 f95d 	bl	8004454 <json_value_get_array>
 800319a:	62f8      	str	r0, [r7, #44]	; 0x2c
            count = json_array_get_count(array);
 800319c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800319e:	f001 f913 	bl	80043c8 <json_array_get_count>
 80031a2:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("[");
 80031a4:	2301      	movs	r3, #1
 80031a6:	653b      	str	r3, [r7, #80]	; 0x50
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00e      	beq.n	80031cc <json_serialize_to_buffer_r+0xb4>
 80031ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b0:	461a      	mov	r2, r3
 80031b2:	497e      	ldr	r1, [pc, #504]	; (80033ac <json_serialize_to_buffer_r+0x294>)
 80031b4:	68b8      	ldr	r0, [r7, #8]
 80031b6:	f008 fc5d 	bl	800ba74 <memcpy>
 80031ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	4413      	add	r3, r2
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4413      	add	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d0:	4413      	add	r3, r2
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01a      	beq.n	8003210 <json_serialize_to_buffer_r+0xf8>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d017      	beq.n	8003210 <json_serialize_to_buffer_r+0xf8>
                APPEND_STRING("\n");
 80031e0:	2301      	movs	r3, #1
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00e      	beq.n	8003208 <json_serialize_to_buffer_r+0xf0>
 80031ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ec:	461a      	mov	r2, r3
 80031ee:	4970      	ldr	r1, [pc, #448]	; (80033b0 <json_serialize_to_buffer_r+0x298>)
 80031f0:	68b8      	ldr	r0, [r7, #8]
 80031f2:	f008 fc3f 	bl	800ba74 <memcpy>
 80031f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4413      	add	r3, r2
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800320a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800320c:	4413      	add	r3, r2
 800320e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8003210:	2300      	movs	r3, #0
 8003212:	657b      	str	r3, [r7, #84]	; 0x54
 8003214:	e081      	b.n	800331a <json_serialize_to_buffer_r+0x202>
                if (is_pretty) {
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <json_serialize_to_buffer_r+0x14c>
                    APPEND_INDENT(level+1);
 800321c:	2300      	movs	r3, #0
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003220:	2300      	movs	r3, #0
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
 8003224:	e01a      	b.n	800325c <json_serialize_to_buffer_r+0x144>
 8003226:	2304      	movs	r3, #4
 8003228:	653b      	str	r3, [r7, #80]	; 0x50
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <json_serialize_to_buffer_r+0x136>
 8003230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003232:	461a      	mov	r2, r3
 8003234:	495f      	ldr	r1, [pc, #380]	; (80033b4 <json_serialize_to_buffer_r+0x29c>)
 8003236:	68b8      	ldr	r0, [r7, #8]
 8003238:	f008 fc1c 	bl	800ba74 <memcpy>
 800323c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4413      	add	r3, r2
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003252:	4413      	add	r3, r2
 8003254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003258:	3301      	adds	r3, #1
 800325a:	64bb      	str	r3, [r7, #72]	; 0x48
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003260:	429a      	cmp	r2, r3
 8003262:	dae0      	bge.n	8003226 <json_serialize_to_buffer_r+0x10e>
                }
                temp_value = json_array_get_value(array, i);
 8003264:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003268:	f001 f893 	bl	8004392 <json_array_get_value>
 800326c:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800327c:	f7ff ff4c 	bl	8003118 <json_serialize_to_buffer_r>
 8003280:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8003282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003284:	2b00      	cmp	r3, #0
 8003286:	da02      	bge.n	800328e <json_serialize_to_buffer_r+0x176>
                    return -1;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
 800328c:	e2c5      	b.n	800381a <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <json_serialize_to_buffer_r+0x184>
                    buf += written;
 8003294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4413      	add	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 800329c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800329e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a0:	4413      	add	r3, r2
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d217      	bcs.n	80032de <json_serialize_to_buffer_r+0x1c6>
                    APPEND_STRING(",");
 80032ae:	2301      	movs	r3, #1
 80032b0:	653b      	str	r3, [r7, #80]	; 0x50
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <json_serialize_to_buffer_r+0x1be>
 80032b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ba:	461a      	mov	r2, r3
 80032bc:	493e      	ldr	r1, [pc, #248]	; (80033b8 <json_serialize_to_buffer_r+0x2a0>)
 80032be:	68b8      	ldr	r0, [r7, #8]
 80032c0:	f008 fbd8 	bl	800ba74 <memcpy>
 80032c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4413      	add	r3, r2
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4413      	add	r3, r2
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032da:	4413      	add	r3, r2
 80032dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <json_serialize_to_buffer_r+0x1fc>
                    APPEND_STRING("\n");
 80032e4:	2301      	movs	r3, #1
 80032e6:	653b      	str	r3, [r7, #80]	; 0x50
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00e      	beq.n	800330c <json_serialize_to_buffer_r+0x1f4>
 80032ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f0:	461a      	mov	r2, r3
 80032f2:	492f      	ldr	r1, [pc, #188]	; (80033b0 <json_serialize_to_buffer_r+0x298>)
 80032f4:	68b8      	ldr	r0, [r7, #8]
 80032f6:	f008 fbbd 	bl	800ba74 <memcpy>
 80032fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	4413      	add	r3, r2
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4413      	add	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800330e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003310:	4413      	add	r3, r2
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8003314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003316:	3301      	adds	r3, #1
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
 800331a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	429a      	cmp	r2, r3
 8003320:	f4ff af79 	bcc.w	8003216 <json_serialize_to_buffer_r+0xfe>
                }
            }
            if (count > 0 && is_pretty) {
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d026      	beq.n	8003378 <json_serialize_to_buffer_r+0x260>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <json_serialize_to_buffer_r+0x260>
                APPEND_INDENT(level);
 8003330:	2300      	movs	r3, #0
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
 8003334:	2300      	movs	r3, #0
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
 8003338:	e01a      	b.n	8003370 <json_serialize_to_buffer_r+0x258>
 800333a:	2304      	movs	r3, #4
 800333c:	653b      	str	r3, [r7, #80]	; 0x50
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <json_serialize_to_buffer_r+0x24a>
 8003344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003346:	461a      	mov	r2, r3
 8003348:	491a      	ldr	r1, [pc, #104]	; (80033b4 <json_serialize_to_buffer_r+0x29c>)
 800334a:	68b8      	ldr	r0, [r7, #8]
 800334c:	f008 fb92 	bl	800ba74 <memcpy>
 8003350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4413      	add	r3, r2
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	4413      	add	r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003366:	4413      	add	r3, r2
 8003368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	3301      	adds	r3, #1
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
 8003370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	dbe0      	blt.n	800333a <json_serialize_to_buffer_r+0x222>
            }
            APPEND_STRING("]");
 8003378:	2301      	movs	r3, #1
 800337a:	653b      	str	r3, [r7, #80]	; 0x50
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00e      	beq.n	80033a0 <json_serialize_to_buffer_r+0x288>
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	461a      	mov	r2, r3
 8003386:	490d      	ldr	r1, [pc, #52]	; (80033bc <json_serialize_to_buffer_r+0x2a4>)
 8003388:	68b8      	ldr	r0, [r7, #8]
 800338a:	f008 fb73 	bl	800ba74 <memcpy>
 800338e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4413      	add	r3, r2
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a4:	4413      	add	r3, r2
 80033a6:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80033a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033aa:	e236      	b.n	800381a <json_serialize_to_buffer_r+0x702>
 80033ac:	0800ec90 	.word	0x0800ec90
 80033b0:	0800ec94 	.word	0x0800ec94
 80033b4:	0800ec98 	.word	0x0800ec98
 80033b8:	0800eca0 	.word	0x0800eca0
 80033bc:	0800eca4 	.word	0x0800eca4
        case JSONObject:
            object = json_value_get_object(value);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f001 f835 	bl	8004430 <json_value_get_object>
 80033c6:	62b8      	str	r0, [r7, #40]	; 0x28
            count  = json_object_get_count(object);
 80033c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ca:	f000 ff8a 	bl	80042e2 <json_object_get_count>
 80033ce:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("{");
 80033d0:	2301      	movs	r3, #1
 80033d2:	653b      	str	r3, [r7, #80]	; 0x50
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <json_serialize_to_buffer_r+0x2e0>
 80033da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033dc:	461a      	mov	r2, r3
 80033de:	498e      	ldr	r1, [pc, #568]	; (8003618 <json_serialize_to_buffer_r+0x500>)
 80033e0:	68b8      	ldr	r0, [r7, #8]
 80033e2:	f008 fb47 	bl	800ba74 <memcpy>
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	4413      	add	r3, r2
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	4413      	add	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	4413      	add	r3, r2
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01a      	beq.n	800343c <json_serialize_to_buffer_r+0x324>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d017      	beq.n	800343c <json_serialize_to_buffer_r+0x324>
                APPEND_STRING("\n");
 800340c:	2301      	movs	r3, #1
 800340e:	653b      	str	r3, [r7, #80]	; 0x50
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00e      	beq.n	8003434 <json_serialize_to_buffer_r+0x31c>
 8003416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003418:	461a      	mov	r2, r3
 800341a:	4980      	ldr	r1, [pc, #512]	; (800361c <json_serialize_to_buffer_r+0x504>)
 800341c:	68b8      	ldr	r0, [r7, #8]
 800341e:	f008 fb29 	bl	800ba74 <memcpy>
 8003422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4413      	add	r3, r2
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4413      	add	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003438:	4413      	add	r3, r2
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 800343c:	2300      	movs	r3, #0
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
 8003440:	e0da      	b.n	80035f8 <json_serialize_to_buffer_r+0x4e0>
                key = json_object_get_name(object, i);
 8003442:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003446:	f000 ff5d 	bl	8004304 <json_object_get_name>
 800344a:	63b8      	str	r0, [r7, #56]	; 0x38
                if (key == NULL) {
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <json_serialize_to_buffer_r+0x340>
                    return -1;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	e1e0      	b.n	800381a <json_serialize_to_buffer_r+0x702>
                }
                if (is_pretty) {
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d023      	beq.n	80034a6 <json_serialize_to_buffer_r+0x38e>
                    APPEND_INDENT(level+1);
 800345e:	2300      	movs	r3, #0
 8003460:	643b      	str	r3, [r7, #64]	; 0x40
 8003462:	2300      	movs	r3, #0
 8003464:	643b      	str	r3, [r7, #64]	; 0x40
 8003466:	e01a      	b.n	800349e <json_serialize_to_buffer_r+0x386>
 8003468:	2304      	movs	r3, #4
 800346a:	653b      	str	r3, [r7, #80]	; 0x50
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00e      	beq.n	8003490 <json_serialize_to_buffer_r+0x378>
 8003472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003474:	461a      	mov	r2, r3
 8003476:	496a      	ldr	r1, [pc, #424]	; (8003620 <json_serialize_to_buffer_r+0x508>)
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f008 fafb 	bl	800ba74 <memcpy>
 800347e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4413      	add	r3, r2
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4413      	add	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003494:	4413      	add	r3, r2
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	3301      	adds	r3, #1
 800349c:	643b      	str	r3, [r7, #64]	; 0x40
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dae0      	bge.n	8003468 <json_serialize_to_buffer_r+0x350>
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 80034a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034a8:	f7fc fe6a 	bl	8000180 <strlen>
 80034ac:	4603      	mov	r3, r0
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	4619      	mov	r1, r3
 80034b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034b4:	f000 f9c6 	bl	8003844 <json_serialize_string>
 80034b8:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 80034ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da02      	bge.n	80034c6 <json_serialize_to_buffer_r+0x3ae>
                    return -1;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295
 80034c4:	e1a9      	b.n	800381a <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <json_serialize_to_buffer_r+0x3bc>
                    buf += written;
 80034cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4413      	add	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 80034d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d8:	4413      	add	r3, r2
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
                APPEND_STRING(":");
 80034dc:	2301      	movs	r3, #1
 80034de:	653b      	str	r3, [r7, #80]	; 0x50
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00e      	beq.n	8003504 <json_serialize_to_buffer_r+0x3ec>
 80034e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e8:	461a      	mov	r2, r3
 80034ea:	494e      	ldr	r1, [pc, #312]	; (8003624 <json_serialize_to_buffer_r+0x50c>)
 80034ec:	68b8      	ldr	r0, [r7, #8]
 80034ee:	f008 fac1 	bl	800ba74 <memcpy>
 80034f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	4413      	add	r3, r2
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4413      	add	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003508:	4413      	add	r3, r2
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (is_pretty) {
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <json_serialize_to_buffer_r+0x42a>
                    APPEND_STRING(" ");
 8003512:	2301      	movs	r3, #1
 8003514:	653b      	str	r3, [r7, #80]	; 0x50
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00e      	beq.n	800353a <json_serialize_to_buffer_r+0x422>
 800351c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351e:	461a      	mov	r2, r3
 8003520:	4941      	ldr	r1, [pc, #260]	; (8003628 <json_serialize_to_buffer_r+0x510>)
 8003522:	68b8      	ldr	r0, [r7, #8]
 8003524:	f008 faa6 	bl	800ba74 <memcpy>
 8003528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	4413      	add	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353e:	4413      	add	r3, r2
 8003540:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                temp_value = json_object_get_value_at(object, i);
 8003542:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003546:	f000 fef8 	bl	800433a <json_object_get_value_at>
 800354a:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355a:	f7ff fddd 	bl	8003118 <json_serialize_to_buffer_r>
 800355e:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8003560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	da02      	bge.n	800356c <json_serialize_to_buffer_r+0x454>
                    return -1;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	e156      	b.n	800381a <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <json_serialize_to_buffer_r+0x462>
                    buf += written;
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4413      	add	r3, r2
 8003578:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 800357a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800357c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357e:	4413      	add	r3, r2
 8003580:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	3b01      	subs	r3, #1
 8003586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003588:	429a      	cmp	r2, r3
 800358a:	d217      	bcs.n	80035bc <json_serialize_to_buffer_r+0x4a4>
                    APPEND_STRING(",");
 800358c:	2301      	movs	r3, #1
 800358e:	653b      	str	r3, [r7, #80]	; 0x50
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00e      	beq.n	80035b4 <json_serialize_to_buffer_r+0x49c>
 8003596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003598:	461a      	mov	r2, r3
 800359a:	4924      	ldr	r1, [pc, #144]	; (800362c <json_serialize_to_buffer_r+0x514>)
 800359c:	68b8      	ldr	r0, [r7, #8]
 800359e:	f008 fa69 	bl	800ba74 <memcpy>
 80035a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4413      	add	r3, r2
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b8:	4413      	add	r3, r2
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d017      	beq.n	80035f2 <json_serialize_to_buffer_r+0x4da>
                    APPEND_STRING("\n");
 80035c2:	2301      	movs	r3, #1
 80035c4:	653b      	str	r3, [r7, #80]	; 0x50
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <json_serialize_to_buffer_r+0x4d2>
 80035cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ce:	461a      	mov	r2, r3
 80035d0:	4912      	ldr	r1, [pc, #72]	; (800361c <json_serialize_to_buffer_r+0x504>)
 80035d2:	68b8      	ldr	r0, [r7, #8]
 80035d4:	f008 fa4e 	bl	800ba74 <memcpy>
 80035d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	4413      	add	r3, r2
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ee:	4413      	add	r3, r2
 80035f0:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	3301      	adds	r3, #1
 80035f6:	657b      	str	r3, [r7, #84]	; 0x54
 80035f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f4ff af20 	bcc.w	8003442 <json_serialize_to_buffer_r+0x32a>
                }
            }
            if (count > 0 && is_pretty) {
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d032      	beq.n	800366e <json_serialize_to_buffer_r+0x556>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d02f      	beq.n	800366e <json_serialize_to_buffer_r+0x556>
                APPEND_INDENT(level);
 800360e:	2300      	movs	r3, #0
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003612:	2300      	movs	r3, #0
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003616:	e026      	b.n	8003666 <json_serialize_to_buffer_r+0x54e>
 8003618:	0800eca8 	.word	0x0800eca8
 800361c:	0800ec94 	.word	0x0800ec94
 8003620:	0800ec98 	.word	0x0800ec98
 8003624:	0800ecac 	.word	0x0800ecac
 8003628:	0800ecb0 	.word	0x0800ecb0
 800362c:	0800eca0 	.word	0x0800eca0
 8003630:	2304      	movs	r3, #4
 8003632:	653b      	str	r3, [r7, #80]	; 0x50
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <json_serialize_to_buffer_r+0x540>
 800363a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363c:	461a      	mov	r2, r3
 800363e:	4979      	ldr	r1, [pc, #484]	; (8003824 <json_serialize_to_buffer_r+0x70c>)
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f008 fa17 	bl	800ba74 <memcpy>
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	4413      	add	r3, r2
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800365a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365c:	4413      	add	r3, r2
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003662:	3301      	adds	r3, #1
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	dbe0      	blt.n	8003630 <json_serialize_to_buffer_r+0x518>
            }
            APPEND_STRING("}");
 800366e:	2301      	movs	r3, #1
 8003670:	653b      	str	r3, [r7, #80]	; 0x50
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <json_serialize_to_buffer_r+0x57e>
 8003678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367a:	461a      	mov	r2, r3
 800367c:	496a      	ldr	r1, [pc, #424]	; (8003828 <json_serialize_to_buffer_r+0x710>)
 800367e:	68b8      	ldr	r0, [r7, #8]
 8003680:	f008 f9f8 	bl	800ba74 <memcpy>
 8003684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	4413      	add	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369a:	4413      	add	r3, r2
 800369c:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 800369e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a0:	e0bb      	b.n	800381a <json_serialize_to_buffer_r+0x702>
        case JSONString:
            string = json_value_get_string(value);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fefa 	bl	800449c <json_value_get_string>
 80036a8:	6378      	str	r0, [r7, #52]	; 0x34
            if (string == NULL) {
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <json_serialize_to_buffer_r+0x59e>
                return -1;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295
 80036b4:	e0b1      	b.n	800381a <json_serialize_to_buffer_r+0x702>
            }
            len = json_value_get_string_len(value);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 ff03 	bl	80044c2 <json_value_get_string_len>
 80036bc:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	6979      	ldr	r1, [r7, #20]
 80036c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036c4:	f000 f8be 	bl	8003844 <json_serialize_string>
 80036c8:	6538      	str	r0, [r7, #80]	; 0x50
            if (written < 0) {
 80036ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da02      	bge.n	80036d6 <json_serialize_to_buffer_r+0x5be>
                return -1;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	e0a1      	b.n	800381a <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <json_serialize_to_buffer_r+0x5cc>
                buf += written;
 80036dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4413      	add	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 80036e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e8:	4413      	add	r3, r2
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80036ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ee:	e094      	b.n	800381a <json_serialize_to_buffer_r+0x702>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 ff14 	bl	800451e <json_value_get_boolean>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d018      	beq.n	800372e <json_serialize_to_buffer_r+0x616>
                APPEND_STRING("true");
 80036fc:	2304      	movs	r3, #4
 80036fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <json_serialize_to_buffer_r+0x60c>
 8003706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003708:	461a      	mov	r2, r3
 800370a:	4948      	ldr	r1, [pc, #288]	; (800382c <json_serialize_to_buffer_r+0x714>)
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	f008 f9b1 	bl	800ba74 <memcpy>
 8003712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4413      	add	r3, r2
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	4413      	add	r3, r2
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372c:	e017      	b.n	800375e <json_serialize_to_buffer_r+0x646>
            } else {
                APPEND_STRING("false");
 800372e:	2305      	movs	r3, #5
 8003730:	653b      	str	r3, [r7, #80]	; 0x50
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <json_serialize_to_buffer_r+0x63e>
 8003738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373a:	461a      	mov	r2, r3
 800373c:	493c      	ldr	r1, [pc, #240]	; (8003830 <json_serialize_to_buffer_r+0x718>)
 800373e:	68b8      	ldr	r0, [r7, #8]
 8003740:	f008 f998 	bl	800ba74 <memcpy>
 8003744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4413      	add	r3, r2
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	4413      	add	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375a:	4413      	add	r3, r2
 800375c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            return written_total;
 800375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003760:	e05b      	b.n	800381a <json_serialize_to_buffer_r+0x702>
        case JSONNumber:
            num = json_value_get_number(value);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fec0 	bl	80044e8 <json_value_get_number>
 8003768:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <json_serialize_to_buffer_r+0x65e>
                num_buf = buf;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	663b      	str	r3, [r7, #96]	; 0x60
            }
            if (parson_number_serialization_function) {
 8003776:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <json_serialize_to_buffer_r+0x71c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <json_serialize_to_buffer_r+0x676>
                written = parson_number_serialization_function(num, num_buf);
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <json_serialize_to_buffer_r+0x71c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003784:	ed97 0b06 	vldr	d0, [r7, #24]
 8003788:	4798      	blx	r3
 800378a:	6538      	str	r0, [r7, #80]	; 0x50
 800378c:	e013      	b.n	80037b6 <json_serialize_to_buffer_r+0x69e>
            } else if (parson_float_format) {
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <json_serialize_to_buffer_r+0x720>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <json_serialize_to_buffer_r+0x690>
                written = sprintf(num_buf, parson_float_format, num);
 8003796:	4b28      	ldr	r3, [pc, #160]	; (8003838 <json_serialize_to_buffer_r+0x720>)
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800379e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80037a0:	f008 fb16 	bl	800bdd0 <siprintf>
 80037a4:	6538      	str	r0, [r7, #80]	; 0x50
 80037a6:	e006      	b.n	80037b6 <json_serialize_to_buffer_r+0x69e>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 80037a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ac:	4923      	ldr	r1, [pc, #140]	; (800383c <json_serialize_to_buffer_r+0x724>)
 80037ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80037b0:	f008 fb0e 	bl	800bdd0 <siprintf>
 80037b4:	6538      	str	r0, [r7, #80]	; 0x50
            }
            if (written < 0) {
 80037b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da02      	bge.n	80037c2 <json_serialize_to_buffer_r+0x6aa>
                return -1;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	e02b      	b.n	800381a <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <json_serialize_to_buffer_r+0x6b8>
                buf += written;
 80037c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 80037d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	4413      	add	r3, r2
 80037d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80037d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037da:	e01e      	b.n	800381a <json_serialize_to_buffer_r+0x702>
        case JSONNull:
            APPEND_STRING("null");
 80037dc:	2304      	movs	r3, #4
 80037de:	653b      	str	r3, [r7, #80]	; 0x50
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <json_serialize_to_buffer_r+0x6ec>
 80037e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e8:	461a      	mov	r2, r3
 80037ea:	4915      	ldr	r1, [pc, #84]	; (8003840 <json_serialize_to_buffer_r+0x728>)
 80037ec:	68b8      	ldr	r0, [r7, #8]
 80037ee:	f008 f941 	bl	800ba74 <memcpy>
 80037f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	4413      	add	r3, r2
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4413      	add	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003808:	4413      	add	r3, r2
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	e004      	b.n	800381a <json_serialize_to_buffer_r+0x702>
        case JSONError:
            return -1;
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
 8003814:	e001      	b.n	800381a <json_serialize_to_buffer_r+0x702>
        default:
            return -1;
 8003816:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3758      	adds	r7, #88	; 0x58
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	0800ec98 	.word	0x0800ec98
 8003828:	0800ecb4 	.word	0x0800ecb4
 800382c:	0800ec78 	.word	0x0800ec78
 8003830:	0800ec80 	.word	0x0800ec80
 8003834:	20000014 	.word	0x20000014
 8003838:	20000744 	.word	0x20000744
 800383c:	0800ecb8 	.word	0x0800ecb8
 8003840:	0800ec88 	.word	0x0800ec88

08003844 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 8003854:	2300      	movs	r3, #0
 8003856:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
    // +BCH
    //APPEND_STRING("\"");
    APPEND_STRING("\\\"");
 8003862:	2302      	movs	r3, #2
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <json_serialize_string+0x46>
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	461a      	mov	r2, r3
 8003870:	49b8      	ldr	r1, [pc, #736]	; (8003b54 <json_serialize_string+0x310>)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f008 f8fe 	bl	800ba74 <memcpy>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4413      	add	r3, r2
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	f000 bc9b 	b.w	80041d0 <json_serialize_string+0x98c>
        c = string[i];
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b5c      	cmp	r3, #92	; 0x5c
 80038a8:	f200 8482 	bhi.w	80041b0 <json_serialize_string+0x96c>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <json_serialize_string+0x70>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	08003b9f 	.word	0x08003b9f
 80038b8:	08003bd1 	.word	0x08003bd1
 80038bc:	08003c03 	.word	0x08003c03
 80038c0:	08003c35 	.word	0x08003c35
 80038c4:	08003c67 	.word	0x08003c67
 80038c8:	08003c99 	.word	0x08003c99
 80038cc:	08003ccb 	.word	0x08003ccb
 80038d0:	08003cfd 	.word	0x08003cfd
 80038d4:	08003a8d 	.word	0x08003a8d
 80038d8:	08003b6d 	.word	0x08003b6d
 80038dc:	08003af1 	.word	0x08003af1
 80038e0:	08003d2f 	.word	0x08003d2f
 80038e4:	08003abf 	.word	0x08003abf
 80038e8:	08003b23 	.word	0x08003b23
 80038ec:	08003d61 	.word	0x08003d61
 80038f0:	08003d93 	.word	0x08003d93
 80038f4:	08003df5 	.word	0x08003df5
 80038f8:	08003e27 	.word	0x08003e27
 80038fc:	08003e59 	.word	0x08003e59
 8003900:	08003e8b 	.word	0x08003e8b
 8003904:	08003ebd 	.word	0x08003ebd
 8003908:	08003eef 	.word	0x08003eef
 800390c:	08003f21 	.word	0x08003f21
 8003910:	08003f53 	.word	0x08003f53
 8003914:	08003f85 	.word	0x08003f85
 8003918:	08003fb7 	.word	0x08003fb7
 800391c:	08003fe9 	.word	0x08003fe9
 8003920:	0800401b 	.word	0x0800401b
 8003924:	0800407d 	.word	0x0800407d
 8003928:	080040af 	.word	0x080040af
 800392c:	080040e1 	.word	0x080040e1
 8003930:	08004113 	.word	0x08004113
 8003934:	080041b1 	.word	0x080041b1
 8003938:	080041b1 	.word	0x080041b1
 800393c:	08003a29 	.word	0x08003a29
 8003940:	080041b1 	.word	0x080041b1
 8003944:	080041b1 	.word	0x080041b1
 8003948:	080041b1 	.word	0x080041b1
 800394c:	080041b1 	.word	0x080041b1
 8003950:	080041b1 	.word	0x080041b1
 8003954:	080041b1 	.word	0x080041b1
 8003958:	080041b1 	.word	0x080041b1
 800395c:	080041b1 	.word	0x080041b1
 8003960:	080041b1 	.word	0x080041b1
 8003964:	080041b1 	.word	0x080041b1
 8003968:	080041b1 	.word	0x080041b1
 800396c:	080041b1 	.word	0x080041b1
 8003970:	08004145 	.word	0x08004145
 8003974:	080041b1 	.word	0x080041b1
 8003978:	080041b1 	.word	0x080041b1
 800397c:	080041b1 	.word	0x080041b1
 8003980:	080041b1 	.word	0x080041b1
 8003984:	080041b1 	.word	0x080041b1
 8003988:	080041b1 	.word	0x080041b1
 800398c:	080041b1 	.word	0x080041b1
 8003990:	080041b1 	.word	0x080041b1
 8003994:	080041b1 	.word	0x080041b1
 8003998:	080041b1 	.word	0x080041b1
 800399c:	080041b1 	.word	0x080041b1
 80039a0:	080041b1 	.word	0x080041b1
 80039a4:	080041b1 	.word	0x080041b1
 80039a8:	080041b1 	.word	0x080041b1
 80039ac:	080041b1 	.word	0x080041b1
 80039b0:	080041b1 	.word	0x080041b1
 80039b4:	080041b1 	.word	0x080041b1
 80039b8:	080041b1 	.word	0x080041b1
 80039bc:	080041b1 	.word	0x080041b1
 80039c0:	080041b1 	.word	0x080041b1
 80039c4:	080041b1 	.word	0x080041b1
 80039c8:	080041b1 	.word	0x080041b1
 80039cc:	080041b1 	.word	0x080041b1
 80039d0:	080041b1 	.word	0x080041b1
 80039d4:	080041b1 	.word	0x080041b1
 80039d8:	080041b1 	.word	0x080041b1
 80039dc:	080041b1 	.word	0x080041b1
 80039e0:	080041b1 	.word	0x080041b1
 80039e4:	080041b1 	.word	0x080041b1
 80039e8:	080041b1 	.word	0x080041b1
 80039ec:	080041b1 	.word	0x080041b1
 80039f0:	080041b1 	.word	0x080041b1
 80039f4:	080041b1 	.word	0x080041b1
 80039f8:	080041b1 	.word	0x080041b1
 80039fc:	080041b1 	.word	0x080041b1
 8003a00:	080041b1 	.word	0x080041b1
 8003a04:	080041b1 	.word	0x080041b1
 8003a08:	080041b1 	.word	0x080041b1
 8003a0c:	080041b1 	.word	0x080041b1
 8003a10:	080041b1 	.word	0x080041b1
 8003a14:	080041b1 	.word	0x080041b1
 8003a18:	080041b1 	.word	0x080041b1
 8003a1c:	080041b1 	.word	0x080041b1
 8003a20:	080041b1 	.word	0x080041b1
 8003a24:	08003a5b 	.word	0x08003a5b
        	case '\"': APPEND_STRING("\\\""); break;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <json_serialize_string+0x20c>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	461a      	mov	r2, r3
 8003a36:	4947      	ldr	r1, [pc, #284]	; (8003b54 <json_serialize_string+0x310>)
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f008 f81b 	bl	800ba74 <memcpy>
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e3b7      	b.n	80041ca <json_serialize_string+0x986>
            case '\\': APPEND_STRING("\\\\"); break;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00e      	beq.n	8003a82 <json_serialize_string+0x23e>
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	461a      	mov	r2, r3
 8003a68:	493b      	ldr	r1, [pc, #236]	; (8003b58 <json_serialize_string+0x314>)
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f008 f802 	bl	800ba74 <memcpy>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e39e      	b.n	80041ca <json_serialize_string+0x986>
            case '\b': APPEND_STRING("\\b"); break;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00e      	beq.n	8003ab4 <json_serialize_string+0x270>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4930      	ldr	r1, [pc, #192]	; (8003b5c <json_serialize_string+0x318>)
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f007 ffe9 	bl	800ba74 <memcpy>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	e385      	b.n	80041ca <json_serialize_string+0x986>
            case '\f': APPEND_STRING("\\f"); break;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <json_serialize_string+0x2a2>
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4924      	ldr	r1, [pc, #144]	; (8003b60 <json_serialize_string+0x31c>)
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f007 ffd0 	bl	800ba74 <memcpy>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e36c      	b.n	80041ca <json_serialize_string+0x986>
            case '\n': APPEND_STRING("\\n"); break;
 8003af0:	2302      	movs	r3, #2
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <json_serialize_string+0x2d4>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4919      	ldr	r1, [pc, #100]	; (8003b64 <json_serialize_string+0x320>)
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f007 ffb7 	bl	800ba74 <memcpy>
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e353      	b.n	80041ca <json_serialize_string+0x986>
            case '\r': APPEND_STRING("\\r"); break;
 8003b22:	2302      	movs	r3, #2
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <json_serialize_string+0x306>
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	490d      	ldr	r1, [pc, #52]	; (8003b68 <json_serialize_string+0x324>)
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f007 ff9e 	bl	800ba74 <memcpy>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e33a      	b.n	80041ca <json_serialize_string+0x986>
 8003b54:	0800ecc0 	.word	0x0800ecc0
 8003b58:	0800ecc4 	.word	0x0800ecc4
 8003b5c:	0800ecc8 	.word	0x0800ecc8
 8003b60:	0800eccc 	.word	0x0800eccc
 8003b64:	0800ecd0 	.word	0x0800ecd0
 8003b68:	0800ecd4 	.word	0x0800ecd4
            case '\t': APPEND_STRING("\\t"); break;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00e      	beq.n	8003b94 <json_serialize_string+0x350>
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4992      	ldr	r1, [pc, #584]	; (8003dc4 <json_serialize_string+0x580>)
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f007 ff79 	bl	800ba74 <memcpy>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4413      	add	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e315      	b.n	80041ca <json_serialize_string+0x986>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <json_serialize_string+0x382>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	461a      	mov	r2, r3
 8003bac:	4986      	ldr	r1, [pc, #536]	; (8003dc8 <json_serialize_string+0x584>)
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f007 ff60 	bl	800ba74 <memcpy>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	e2fc      	b.n	80041ca <json_serialize_string+0x986>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8003bd0:	2306      	movs	r3, #6
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <json_serialize_string+0x3b4>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	497b      	ldr	r1, [pc, #492]	; (8003dcc <json_serialize_string+0x588>)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f007 ff47 	bl	800ba74 <memcpy>
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e2e3      	b.n	80041ca <json_serialize_string+0x986>
            case '\x02': APPEND_STRING("\\u0002"); break;
 8003c02:	2306      	movs	r3, #6
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <json_serialize_string+0x3e6>
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	496f      	ldr	r1, [pc, #444]	; (8003dd0 <json_serialize_string+0x58c>)
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f007 ff2e 	bl	800ba74 <memcpy>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e2ca      	b.n	80041ca <json_serialize_string+0x986>
            case '\x03': APPEND_STRING("\\u0003"); break;
 8003c34:	2306      	movs	r3, #6
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00e      	beq.n	8003c5c <json_serialize_string+0x418>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	461a      	mov	r2, r3
 8003c42:	4964      	ldr	r1, [pc, #400]	; (8003dd4 <json_serialize_string+0x590>)
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f007 ff15 	bl	800ba74 <memcpy>
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4413      	add	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e2b1      	b.n	80041ca <json_serialize_string+0x986>
            case '\x04': APPEND_STRING("\\u0004"); break;
 8003c66:	2306      	movs	r3, #6
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00e      	beq.n	8003c8e <json_serialize_string+0x44a>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	461a      	mov	r2, r3
 8003c74:	4958      	ldr	r1, [pc, #352]	; (8003dd8 <json_serialize_string+0x594>)
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f007 fefc 	bl	800ba74 <memcpy>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e298      	b.n	80041ca <json_serialize_string+0x986>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8003c98:	2306      	movs	r3, #6
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <json_serialize_string+0x47c>
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	494d      	ldr	r1, [pc, #308]	; (8003ddc <json_serialize_string+0x598>)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f007 fee3 	bl	800ba74 <memcpy>
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e27f      	b.n	80041ca <json_serialize_string+0x986>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8003cca:	2306      	movs	r3, #6
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <json_serialize_string+0x4ae>
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4941      	ldr	r1, [pc, #260]	; (8003de0 <json_serialize_string+0x59c>)
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f007 feca 	bl	800ba74 <memcpy>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e266      	b.n	80041ca <json_serialize_string+0x986>
            case '\x07': APPEND_STRING("\\u0007"); break;
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00e      	beq.n	8003d24 <json_serialize_string+0x4e0>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4936      	ldr	r1, [pc, #216]	; (8003de4 <json_serialize_string+0x5a0>)
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f007 feb1 	bl	800ba74 <memcpy>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	e24d      	b.n	80041ca <json_serialize_string+0x986>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 8003d2e:	2306      	movs	r3, #6
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00e      	beq.n	8003d56 <json_serialize_string+0x512>
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	492a      	ldr	r1, [pc, #168]	; (8003de8 <json_serialize_string+0x5a4>)
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f007 fe98 	bl	800ba74 <memcpy>
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4413      	add	r3, r2
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e234      	b.n	80041ca <json_serialize_string+0x986>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 8003d60:	2306      	movs	r3, #6
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <json_serialize_string+0x544>
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	491f      	ldr	r1, [pc, #124]	; (8003dec <json_serialize_string+0x5a8>)
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f007 fe7f 	bl	800ba74 <memcpy>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e21b      	b.n	80041ca <json_serialize_string+0x986>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 8003d92:	2306      	movs	r3, #6
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00e      	beq.n	8003dba <json_serialize_string+0x576>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4913      	ldr	r1, [pc, #76]	; (8003df0 <json_serialize_string+0x5ac>)
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f007 fe66 	bl	800ba74 <memcpy>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4413      	add	r3, r2
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e202      	b.n	80041ca <json_serialize_string+0x986>
 8003dc4:	0800ecd8 	.word	0x0800ecd8
 8003dc8:	0800ecdc 	.word	0x0800ecdc
 8003dcc:	0800ece4 	.word	0x0800ece4
 8003dd0:	0800ecec 	.word	0x0800ecec
 8003dd4:	0800ecf4 	.word	0x0800ecf4
 8003dd8:	0800ecfc 	.word	0x0800ecfc
 8003ddc:	0800ed04 	.word	0x0800ed04
 8003de0:	0800ed0c 	.word	0x0800ed0c
 8003de4:	0800ed14 	.word	0x0800ed14
 8003de8:	0800ed1c 	.word	0x0800ed1c
 8003dec:	0800ed24 	.word	0x0800ed24
 8003df0:	0800ed2c 	.word	0x0800ed2c
            case '\x10': APPEND_STRING("\\u0010"); break;
 8003df4:	2306      	movs	r3, #6
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00e      	beq.n	8003e1c <json_serialize_string+0x5d8>
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4992      	ldr	r1, [pc, #584]	; (800404c <json_serialize_string+0x808>)
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f007 fe35 	bl	800ba74 <memcpy>
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e1d1      	b.n	80041ca <json_serialize_string+0x986>
            case '\x11': APPEND_STRING("\\u0011"); break;
 8003e26:	2306      	movs	r3, #6
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <json_serialize_string+0x60a>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	461a      	mov	r2, r3
 8003e34:	4986      	ldr	r1, [pc, #536]	; (8004050 <json_serialize_string+0x80c>)
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f007 fe1c 	bl	800ba74 <memcpy>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e1b8      	b.n	80041ca <json_serialize_string+0x986>
            case '\x12': APPEND_STRING("\\u0012"); break;
 8003e58:	2306      	movs	r3, #6
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <json_serialize_string+0x63c>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	461a      	mov	r2, r3
 8003e66:	497b      	ldr	r1, [pc, #492]	; (8004054 <json_serialize_string+0x810>)
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f007 fe03 	bl	800ba74 <memcpy>
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	e19f      	b.n	80041ca <json_serialize_string+0x986>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8003e8a:	2306      	movs	r3, #6
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00e      	beq.n	8003eb2 <json_serialize_string+0x66e>
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	461a      	mov	r2, r3
 8003e98:	496f      	ldr	r1, [pc, #444]	; (8004058 <json_serialize_string+0x814>)
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f007 fdea 	bl	800ba74 <memcpy>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e186      	b.n	80041ca <json_serialize_string+0x986>
            case '\x14': APPEND_STRING("\\u0014"); break;
 8003ebc:	2306      	movs	r3, #6
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <json_serialize_string+0x6a0>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4964      	ldr	r1, [pc, #400]	; (800405c <json_serialize_string+0x818>)
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f007 fdd1 	bl	800ba74 <memcpy>
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e16d      	b.n	80041ca <json_serialize_string+0x986>
            case '\x15': APPEND_STRING("\\u0015"); break;
 8003eee:	2306      	movs	r3, #6
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <json_serialize_string+0x6d2>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4958      	ldr	r1, [pc, #352]	; (8004060 <json_serialize_string+0x81c>)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f007 fdb8 	bl	800ba74 <memcpy>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e154      	b.n	80041ca <json_serialize_string+0x986>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8003f20:	2306      	movs	r3, #6
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00e      	beq.n	8003f48 <json_serialize_string+0x704>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	494d      	ldr	r1, [pc, #308]	; (8004064 <json_serialize_string+0x820>)
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f007 fd9f 	bl	800ba74 <memcpy>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e13b      	b.n	80041ca <json_serialize_string+0x986>
            case '\x17': APPEND_STRING("\\u0017"); break;
 8003f52:	2306      	movs	r3, #6
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <json_serialize_string+0x736>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4941      	ldr	r1, [pc, #260]	; (8004068 <json_serialize_string+0x824>)
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f007 fd86 	bl	800ba74 <memcpy>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4413      	add	r3, r2
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	e122      	b.n	80041ca <json_serialize_string+0x986>
            case '\x18': APPEND_STRING("\\u0018"); break;
 8003f84:	2306      	movs	r3, #6
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <json_serialize_string+0x768>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4936      	ldr	r1, [pc, #216]	; (800406c <json_serialize_string+0x828>)
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f007 fd6d 	bl	800ba74 <memcpy>
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e109      	b.n	80041ca <json_serialize_string+0x986>
            case '\x19': APPEND_STRING("\\u0019"); break;
 8003fb6:	2306      	movs	r3, #6
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00e      	beq.n	8003fde <json_serialize_string+0x79a>
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	492a      	ldr	r1, [pc, #168]	; (8004070 <json_serialize_string+0x82c>)
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f007 fd54 	bl	800ba74 <memcpy>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4413      	add	r3, r2
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e0f0      	b.n	80041ca <json_serialize_string+0x986>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8003fe8:	2306      	movs	r3, #6
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <json_serialize_string+0x7cc>
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	491f      	ldr	r1, [pc, #124]	; (8004074 <json_serialize_string+0x830>)
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f007 fd3b 	bl	800ba74 <memcpy>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e0d7      	b.n	80041ca <json_serialize_string+0x986>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 800401a:	2306      	movs	r3, #6
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <json_serialize_string+0x7fe>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	461a      	mov	r2, r3
 8004028:	4913      	ldr	r1, [pc, #76]	; (8004078 <json_serialize_string+0x834>)
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f007 fd22 	bl	800ba74 <memcpy>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e0be      	b.n	80041ca <json_serialize_string+0x986>
 800404c:	0800ed34 	.word	0x0800ed34
 8004050:	0800ed3c 	.word	0x0800ed3c
 8004054:	0800ed44 	.word	0x0800ed44
 8004058:	0800ed4c 	.word	0x0800ed4c
 800405c:	0800ed54 	.word	0x0800ed54
 8004060:	0800ed5c 	.word	0x0800ed5c
 8004064:	0800ed64 	.word	0x0800ed64
 8004068:	0800ed6c 	.word	0x0800ed6c
 800406c:	0800ed74 	.word	0x0800ed74
 8004070:	0800ed7c 	.word	0x0800ed7c
 8004074:	0800ed84 	.word	0x0800ed84
 8004078:	0800ed8c 	.word	0x0800ed8c
            case '\x1c': APPEND_STRING("\\u001c"); break;
 800407c:	2306      	movs	r3, #6
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00e      	beq.n	80040a4 <json_serialize_string+0x860>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	461a      	mov	r2, r3
 800408a:	4962      	ldr	r1, [pc, #392]	; (8004214 <json_serialize_string+0x9d0>)
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f007 fcf1 	bl	800ba74 <memcpy>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e08d      	b.n	80041ca <json_serialize_string+0x986>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 80040ae:	2306      	movs	r3, #6
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <json_serialize_string+0x892>
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	461a      	mov	r2, r3
 80040bc:	4956      	ldr	r1, [pc, #344]	; (8004218 <json_serialize_string+0x9d4>)
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f007 fcd8 	bl	800ba74 <memcpy>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	e074      	b.n	80041ca <json_serialize_string+0x986>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 80040e0:	2306      	movs	r3, #6
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <json_serialize_string+0x8c4>
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	461a      	mov	r2, r3
 80040ee:	494b      	ldr	r1, [pc, #300]	; (800421c <json_serialize_string+0x9d8>)
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f007 fcbf 	bl	800ba74 <memcpy>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e05b      	b.n	80041ca <json_serialize_string+0x986>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8004112:	2306      	movs	r3, #6
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <json_serialize_string+0x8f6>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	461a      	mov	r2, r3
 8004120:	493f      	ldr	r1, [pc, #252]	; (8004220 <json_serialize_string+0x9dc>)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f007 fca6 	bl	800ba74 <memcpy>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e042      	b.n	80041ca <json_serialize_string+0x986>
            case '/':
                if (parson_escape_slashes) {
 8004144:	4b37      	ldr	r3, [pc, #220]	; (8004224 <json_serialize_string+0x9e0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d018      	beq.n	800417e <json_serialize_string+0x93a>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 800414c:	2302      	movs	r3, #2
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00e      	beq.n	8004174 <json_serialize_string+0x930>
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	461a      	mov	r2, r3
 800415a:	4933      	ldr	r1, [pc, #204]	; (8004228 <json_serialize_string+0x9e4>)
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f007 fc89 	bl	800ba74 <memcpy>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 800417c:	e025      	b.n	80041ca <json_serialize_string+0x986>
                    APPEND_STRING("/");
 800417e:	2301      	movs	r3, #1
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <json_serialize_string+0x962>
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	461a      	mov	r2, r3
 800418c:	4927      	ldr	r1, [pc, #156]	; (800422c <json_serialize_string+0x9e8>)
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f007 fc70 	bl	800ba74 <memcpy>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
                break;
 80041ae:	e00c      	b.n	80041ca <json_serialize_string+0x986>
            default:
                if (buf != NULL) {
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <json_serialize_string+0x97e>
                    buf[0] = c;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	7dfa      	ldrb	r2, [r7, #23]
 80041ba:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3301      	adds	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	3301      	adds	r3, #1
 80041c6:	61bb      	str	r3, [r7, #24]
                break;
 80041c8:	bf00      	nop
    for (i = 0; i < len; i++) {
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	f4ff ab60 	bcc.w	800389a <json_serialize_string+0x56>
        }
    }
    // +BCH
	//APPEND_STRING("\"");
	APPEND_STRING("\\\"");
 80041da:	2302      	movs	r3, #2
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <json_serialize_string+0x9be>
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	461a      	mov	r2, r3
 80041e8:	4911      	ldr	r1, [pc, #68]	; (8004230 <json_serialize_string+0x9ec>)
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f007 fc42 	bl	800ba74 <memcpy>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
    return written_total;
 800420a:	69bb      	ldr	r3, [r7, #24]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	0800ed94 	.word	0x0800ed94
 8004218:	0800ed9c 	.word	0x0800ed9c
 800421c:	0800eda4 	.word	0x0800eda4
 8004220:	0800edac 	.word	0x0800edac
 8004224:	20000010 	.word	0x20000010
 8004228:	0800edb4 	.word	0x0800edb4
 800422c:	0800edb8 	.word	0x0800edb8
 8004230:	0800ecc0 	.word	0x0800ecc0

08004234 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <json_parse_string+0x12>
        return NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	e016      	b.n	8004274 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2bef      	cmp	r3, #239	; 0xef
 800424c:	d10c      	bne.n	8004268 <json_parse_string+0x34>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3301      	adds	r3, #1
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2bbb      	cmp	r3, #187	; 0xbb
 8004256:	d107      	bne.n	8004268 <json_parse_string+0x34>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3302      	adds	r3, #2
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2bbf      	cmp	r3, #191	; 0xbf
 8004260:	d102      	bne.n	8004268 <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3303      	adds	r3, #3
 8004266:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fbed 	bl	8002a4c <parse_value>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <json_object_get_value+0x16>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <json_object_get_value+0x1a>
        return NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	e009      	b.n	80042aa <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 8004296:	6838      	ldr	r0, [r7, #0]
 8004298:	f7fb ff72 	bl	8000180 <strlen>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe f85b 	bl	800235e <json_object_getn_value>
 80042a8:	4603      	mov	r3, r0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <json_object_get_number>:

size_t json_object_get_string_len(const JSON_Object *object, const char *name) {
    return json_value_get_string_len(json_object_get_value(object, name));
}

double json_object_get_number(const JSON_Object *object, const char *name) {
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_get_value(object, name));
 80042bc:	6839      	ldr	r1, [r7, #0]
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffdc 	bl	800427c <json_object_get_value>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f90e 	bl	80044e8 <json_value_get_number>
 80042cc:	eeb0 7a40 	vmov.f32	s14, s0
 80042d0:	eef0 7a60 	vmov.f32	s15, s1
}
 80042d4:	eeb0 0a47 	vmov.f32	s0, s14
 80042d8:	eef0 0a67 	vmov.f32	s1, s15
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <json_object_get_count+0x14>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	e000      	b.n	80042f8 <json_object_get_count+0x16>
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d006      	beq.n	8004322 <json_object_get_name+0x1e>
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ffe4 	bl	80042e2 <json_object_get_count>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4293      	cmp	r3, r2
 8004320:	d301      	bcc.n	8004326 <json_object_get_name+0x22>
        return NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	e005      	b.n	8004332 <json_object_get_name+0x2e>
    }
    return object->names[index];
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	681b      	ldr	r3, [r3, #0]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d006      	beq.n	8004358 <json_object_get_value_at+0x1e>
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ffc9 	bl	80042e2 <json_object_get_count>
 8004350:	4602      	mov	r2, r0
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	4293      	cmp	r3, r2
 8004356:	d301      	bcc.n	800435c <json_object_get_value_at+0x22>
        return NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	e005      	b.n	8004368 <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
    if (!object) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <json_object_get_wrapping_value+0x12>
        return NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	e001      	b.n	8004386 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <json_array_get_value+0x1e>
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f810 	bl	80043c8 <json_array_get_count>
 80043a8:	4602      	mov	r2, r0
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d301      	bcc.n	80043b4 <json_array_get_value+0x22>
        return NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e005      	b.n	80043c0 <json_array_get_value+0x2e>
    }
    return array->items[index];
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <json_array_get_count+0x14>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	e000      	b.n	80043de <json_array_get_count+0x16>
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
    if (!array) {
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <json_array_get_wrapping_value+0x12>
        return NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e001      	b.n	8004400 <json_array_get_wrapping_value+0x16>
    }
    return array->wrapping_value;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <json_value_get_type+0x14>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	e001      	b.n	8004424 <json_value_get_type+0x18>
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ffe7 	bl	800440c <json_value_get_type>
 800443e:	4603      	mov	r3, r0
 8004440:	2b04      	cmp	r3, #4
 8004442:	d102      	bne.n	800444a <json_value_get_object+0x1a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	e000      	b.n	800444c <json_value_get_object+0x1c>
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ffd5 	bl	800440c <json_value_get_type>
 8004462:	4603      	mov	r3, r0
 8004464:	2b05      	cmp	r3, #5
 8004466:	d102      	bne.n	800446e <json_value_get_array+0x1a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	e000      	b.n	8004470 <json_value_get_array+0x1c>
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ffc3 	bl	800440c <json_value_get_type>
 8004486:	4603      	mov	r3, r0
 8004488:	2b02      	cmp	r3, #2
 800448a:	d102      	bne.n	8004492 <json_value_get_string_desc+0x1a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3308      	adds	r3, #8
 8004490:	e000      	b.n	8004494 <json_value_get_string_desc+0x1c>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ffe7 	bl	8004478 <json_value_get_string_desc>
 80044aa:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <json_value_get_string+0x1c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	e000      	b.n	80044ba <json_value_get_string+0x1e>
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ffd4 	bl	8004478 <json_value_get_string_desc>
 80044d0:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <json_value_get_string_len+0x1c>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	e000      	b.n	80044e0 <json_value_get_string_len+0x1e>
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff8b 	bl	800440c <json_value_get_type>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d103      	bne.n	8004504 <json_value_get_number+0x1c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004502:	e003      	b.n	800450c <json_value_get_number+0x24>
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	ec43 2b17 	vmov	d7, r2, r3
}
 8004510:	eeb0 0a47 	vmov.f32	s0, s14
 8004514:	eef0 0a67 	vmov.f32	s1, s15
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff70 	bl	800440c <json_value_get_type>
 800452c:	4603      	mov	r3, r0
 800452e:	2b06      	cmp	r3, #6
 8004530:	d102      	bne.n	8004538 <json_value_get_boolean+0x1a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	e001      	b.n	800453c <json_value_get_boolean+0x1e>
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ff5d 	bl	800440c <json_value_get_type>
 8004552:	4603      	mov	r3, r0
 8004554:	2b05      	cmp	r3, #5
 8004556:	d012      	beq.n	800457e <json_value_free+0x3a>
 8004558:	2b05      	cmp	r3, #5
 800455a:	dc16      	bgt.n	800458a <json_value_free+0x46>
 800455c:	2b02      	cmp	r3, #2
 800455e:	d007      	beq.n	8004570 <json_value_free+0x2c>
 8004560:	2b04      	cmp	r3, #4
 8004562:	d112      	bne.n	800458a <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fd ff35 	bl	80023d8 <json_object_free>
            break;
 800456e:	e00d      	b.n	800458c <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <json_value_free+0x58>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	4610      	mov	r0, r2
 800457a:	4798      	blx	r3
            break;
 800457c:	e006      	b.n	800458c <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd ffd2 	bl	800252c <json_array_free>
            break;
 8004588:	e000      	b.n	800458c <json_value_free+0x48>
        default:
            break;
 800458a:	bf00      	nop
    }
    parson_free(value);
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <json_value_free+0x58>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	2000000c 	.word	0x2000000c

080045a0 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <json_value_init_object+0x50>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2010      	movs	r0, #16
 80045ac:	4798      	blx	r3
 80045ae:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <json_value_init_object+0x1a>
        return NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e016      	b.n	80045e8 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2204      	movs	r2, #4
 80045c4:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd fc1c 	bl	8001e04 <json_object_make>
 80045cc:	4602      	mov	r2, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <json_value_init_object+0x46>
        parson_free(new_value);
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <json_value_init_object+0x54>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
        return NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <json_value_init_object+0x48>
    }
    return new_value;
 80045e6:	687b      	ldr	r3, [r7, #4]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000008 	.word	0x20000008
 80045f4:	2000000c 	.word	0x2000000c

080045f8 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <json_value_init_array+0x50>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2010      	movs	r0, #16
 8004604:	4798      	blx	r3
 8004606:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <json_value_init_array+0x1a>
        return NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	e016      	b.n	8004640 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2205      	movs	r2, #5
 800461c:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_make(new_value);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd feee 	bl	8002400 <json_array_make>
 8004624:	4602      	mov	r2, r0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <json_value_init_array+0x46>
        parson_free(new_value);
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <json_value_init_array+0x54>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
        return NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <json_value_init_array+0x48>
    }
    return new_value;
 800463e:	687b      	ldr	r3, [r7, #4]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000008 	.word	0x20000008
 800464c:	2000000c 	.word	0x2000000c

08004650 <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 800465e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004666:	f7fc fa39 	bl	8000adc <__aeabi_dcmpun>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d121      	bne.n	80046b4 <json_value_init_number+0x64>
 8004670:	683c      	ldr	r4, [r7, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004678:	2301      	movs	r3, #1
 800467a:	461e      	mov	r6, r3
 800467c:	f04f 32ff 	mov.w	r2, #4294967295
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <json_value_init_number+0x9c>)
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	f7fc fa29 	bl	8000adc <__aeabi_dcmpun>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <json_value_init_number+0x58>
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	4b15      	ldr	r3, [pc, #84]	; (80046ec <json_value_init_number+0x9c>)
 8004696:	4620      	mov	r0, r4
 8004698:	4629      	mov	r1, r5
 800469a:	f7fc fa01 	bl	8000aa0 <__aeabi_dcmple>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <json_value_init_number+0x58>
 80046a4:	2300      	movs	r3, #0
 80046a6:	461e      	mov	r6, r3
 80046a8:	b2f3      	uxtb	r3, r6
 80046aa:	f083 0301 	eor.w	r3, r3, #1
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <json_value_init_number+0x68>
        return NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e015      	b.n	80046e4 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <json_value_init_number+0xa0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2010      	movs	r0, #16
 80046be:	4798      	blx	r3
 80046c0:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <json_value_init_number+0x7c>
        return NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e00b      	b.n	80046e4 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2203      	movs	r2, #3
 80046d6:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046de:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ec:	7fefffff 	.word	0x7fefffff
 80046f0:	20000008 	.word	0x20000008

080046f4 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <json_value_init_boolean+0x44>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2010      	movs	r0, #16
 8004702:	4798      	blx	r3
 8004704:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <json_value_init_boolean+0x1c>
        return NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	e00f      	b.n	8004730 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2206      	movs	r2, #6
 800471a:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	609a      	str	r2, [r3, #8]
    return new_value;
 800472e:	68fb      	ldr	r3, [r7, #12]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000008 	.word	0x20000008

0800473c <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <json_value_init_null+0x30>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2010      	movs	r0, #16
 8004748:	4798      	blx	r3
 800474a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <json_value_init_null+0x1a>
        return NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	e006      	b.n	8004764 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	605a      	str	r2, [r3, #4]
    return new_value;
 8004762:	687b      	ldr	r3, [r7, #4]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000008 	.word	0x20000008

08004770 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b096      	sub	sp, #88	; 0x58
 8004774:	af02      	add	r7, sp, #8
 8004776:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	2300      	movs	r3, #0
 8004780:	2200      	movs	r2, #0
 8004782:	2100      	movs	r1, #0
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fe fcc7 	bl	8003118 <json_serialize_to_buffer_r>
 800478a:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	2b00      	cmp	r3, #0
 8004790:	db02      	blt.n	8004798 <json_serialization_size+0x28>
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	3301      	adds	r3, #1
 8004796:	e000      	b.n	800479a <json_serialization_size+0x2a>
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3750      	adds	r7, #80	; 0x50
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b088      	sub	sp, #32
 80047a6:	af02      	add	r7, sp, #8
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
    int written = -1;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
 80047b2:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff ffdb 	bl	8004770 <json_serialization_size>
 80047ba:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <json_serialize_to_buffer+0x28>
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d202      	bcs.n	80047d0 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	e00f      	b.n	80047f0 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 80047d0:	2300      	movs	r3, #0
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	2200      	movs	r2, #0
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7fe fc9c 	bl	8003118 <json_serialize_to_buffer_r>
 80047e0:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da02      	bge.n	80047ee <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ec:	e000      	b.n	80047f0 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 8004800:	f04f 33ff 	mov.w	r3, #4294967295
 8004804:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff ffb2 	bl	8004770 <json_serialization_size>
 800480c:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <json_serialize_to_string+0x24>
        return NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	e018      	b.n	800484e <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <json_serialize_to_string+0x60>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6938      	ldr	r0, [r7, #16]
 8004822:	4798      	blx	r3
 8004824:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <json_serialize_to_string+0x38>
        return NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	e00e      	b.n	800484e <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff ffb4 	bl	80047a2 <json_serialize_to_buffer>
 800483a:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f80a 	bl	800485c <json_free_serialized_string>
        return NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <json_serialize_to_string+0x56>
    }
    return buf;
 800484c:	68fb      	ldr	r3, [r7, #12]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000008 	.word	0x20000008

0800485c <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <json_free_serialized_string+0x18>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	2000000c 	.word	0x2000000c

08004878 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b08e      	sub	sp, #56	; 0x38
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 8004894:	2300      	movs	r3, #0
 8004896:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <json_object_set_value+0x3e>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d006      	beq.n	80048b6 <json_object_set_value+0x3e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <json_object_set_value+0x3e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <json_object_set_value+0x44>
        return JSONFailure;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	e095      	b.n	80049e8 <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 80048bc:	68b8      	ldr	r0, [r7, #8]
 80048be:	f7fb fc5f 	bl	8000180 <strlen>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4619      	mov	r1, r3
 80048c6:	68b8      	ldr	r0, [r7, #8]
 80048c8:	f7fd fa70 	bl	8001dac <hash_string>
 80048cc:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80048d2:	68b8      	ldr	r0, [r7, #8]
 80048d4:	f7fb fc54 	bl	8000180 <strlen>
 80048d8:	4602      	mov	r2, r0
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7fd fc42 	bl	800216e <json_object_get_cell_ix>
 80048ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01f      	beq.n	8004932 <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 800490e:	6a38      	ldr	r0, [r7, #32]
 8004910:	f7ff fe18 	bl	8004544 <json_value_free>
        object->values[item_ix] = value;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fd24 	bl	8004370 <json_object_get_wrapping_value>
 8004928:	4602      	mov	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 800492e:	2300      	movs	r3, #0
 8004930:	e05a      	b.n	80049e8 <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	429a      	cmp	r2, r3
 800493c:	d316      	bcc.n	800496c <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7fd fbaa 	bl	8002098 <json_object_grow_and_rehash>
 8004944:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <json_object_set_value+0xda>
            return JSONFailure;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	e04a      	b.n	80049e8 <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8004952:	68b8      	ldr	r0, [r7, #8]
 8004954:	f7fb fc14 	bl	8000180 <strlen>
 8004958:	4602      	mov	r2, r0
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7fd fc02 	bl	800216e <json_object_get_cell_ix>
 800496a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 800496c:	68b8      	ldr	r0, [r7, #8]
 800496e:	f7fd f949 	bl	8001c04 <parson_strdup>
 8004972:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <json_object_set_value+0x108>
        return JSONFailure;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	e033      	b.n	80049e8 <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	6992      	ldr	r2, [r2, #24]
 800499e:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049be:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ce:	601a      	str	r2, [r3, #0]
    object->count++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff fcc8 	bl	8004370 <json_object_get_wrapping_value>
 80049e0:	4602      	mov	r2, r0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3730      	adds	r7, #48	; 0x30
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 80049fe:	ed97 0b00 	vldr	d0, [r7]
 8004a02:	f7ff fe25 	bl	8004650 <json_value_init_number>
 8004a06:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f7ff ff33 	bl	8004878 <json_object_set_value>
 8004a12:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <json_object_set_number+0x30>
        json_value_free(value);
 8004a1a:	6978      	ldr	r0, [r7, #20]
 8004a1c:	f7ff fd92 	bl	8004544 <json_value_free>
    }
    return status;
 8004a20:	693b      	ldr	r3, [r7, #16]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <LL_AHB2_GRP1_EnableClock>:
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a80:	68fb      	ldr	r3, [r7, #12]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af2:	b480      	push	{r7}
 8004af4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <HAL_ADC_MspInit+0x24>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d103      	bne.n	8004b1a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b12:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b16:	f7ff ff88 	bl	8004a2a <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	50040000 	.word	0x50040000

08004b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b09c      	sub	sp, #112	; 0x70
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	2250      	movs	r2, #80	; 0x50
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f006 ffbb 	bl	800bac4 <memset>
  if(huart->Instance==LPUART1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a44      	ldr	r2, [pc, #272]	; (8004c64 <HAL_UART_MspInit+0x13c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d156      	bne.n	8004c06 <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b60:	f107 030c 	add.w	r3, r7, #12
 8004b64:	4618      	mov	r0, r3
 8004b66:	f003 ff81 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004b70:	f7fd f802 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004b74:	2001      	movs	r0, #1
 8004b76:	f7ff ff8a 	bl	8004a8e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b7a:	2004      	movs	r0, #4
 8004b7c:	f7ff ff55 	bl	8004a2a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8004b80:	2303      	movs	r3, #3
 8004b82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b84:	2302      	movs	r3, #2
 8004b86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004b90:	2308      	movs	r3, #8
 8004b92:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4833      	ldr	r0, [pc, #204]	; (8004c68 <HAL_UART_MspInit+0x140>)
 8004b9c:	f002 f93c 	bl	8006e18 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004ba0:	4b32      	ldr	r3, [pc, #200]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004ba2:	4a33      	ldr	r2, [pc, #204]	; (8004c70 <HAL_UART_MspInit+0x148>)
 8004ba4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004ba6:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004ba8:	2210      	movs	r2, #16
 8004baa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bac:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8004bca:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bd0:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004bd6:	4825      	ldr	r0, [pc, #148]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bd8:	f001 fdec 	bl	80067b4 <HAL_DMA_Init>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8004be2:	f7fc ffc9 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004bee:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <HAL_UART_MspInit+0x144>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2025      	movs	r0, #37	; 0x25
 8004bfa:	f001 fda6 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004bfe:	2025      	movs	r0, #37	; 0x25
 8004c00:	f001 fdbd 	bl	800677e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c04:	e029      	b.n	8004c5a <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <HAL_UART_MspInit+0x14c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d124      	bne.n	8004c5a <HAL_UART_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c10:	2301      	movs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c14:	2300      	movs	r3, #0
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f003 ff25 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_UART_MspInit+0x104>
      Error_Handler();
 8004c28:	f7fc ffa6 	bl	8001b78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c30:	f7ff ff46 	bl	8004ac0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c34:	2002      	movs	r0, #2
 8004c36:	f7ff fef8 	bl	8004a2a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004c3a:	23c0      	movs	r3, #192	; 0xc0
 8004c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c42:	2301      	movs	r3, #1
 8004c44:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c46:	2300      	movs	r3, #0
 8004c48:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c4a:	2307      	movs	r3, #7
 8004c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c52:	4619      	mov	r1, r3
 8004c54:	4808      	ldr	r0, [pc, #32]	; (8004c78 <HAL_UART_MspInit+0x150>)
 8004c56:	f002 f8df 	bl	8006e18 <HAL_GPIO_Init>
}
 8004c5a:	bf00      	nop
 8004c5c:	3770      	adds	r7, #112	; 0x70
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40008000 	.word	0x40008000
 8004c68:	48000800 	.word	0x48000800
 8004c6c:	200003a0 	.word	0x200003a0
 8004c70:	40020008 	.word	0x40020008
 8004c74:	40013800 	.word	0x40013800
 8004c78:	48000400 	.word	0x48000400

08004c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <HAL_TIM_Base_MspInit+0x24>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d103      	bne.n	8004c96 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004c8e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004c92:	f7ff ff15 	bl	8004ac0 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40014800 	.word	0x40014800

08004ca4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <HAL_PCD_MspInit+0x5c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d118      	bne.n	8004cf8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	f7ff feaf 	bl	8004a2a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004ccc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004cd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004cde:	230a      	movs	r3, #10
 8004ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cec:	f002 f894 	bl	8006e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004cf0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004cf4:	f7ff feb2 	bl	8004a5c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004cf8:	bf00      	nop
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40006800 	.word	0x40006800

08004d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d08:	e7fe      	b.n	8004d08 <NMI_Handler+0x4>

08004d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d0e:	e7fe      	b.n	8004d0e <HardFault_Handler+0x4>

08004d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d14:	e7fe      	b.n	8004d14 <MemManage_Handler+0x4>

08004d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d16:	b480      	push	{r7}
 8004d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d1a:	e7fe      	b.n	8004d1a <BusFault_Handler+0x4>

08004d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d20:	e7fe      	b.n	8004d20 <UsageFault_Handler+0x4>

08004d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d50:	f000 fa04 	bl	800515c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f002 fa15 	bl	800718c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004d6a:	2010      	movs	r0, #16
 8004d6c:	f002 fa0e 	bl	800718c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004d70:	bf00      	nop
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004d78:	4802      	ldr	r0, [pc, #8]	; (8004d84 <DMA1_Channel1_IRQHandler+0x10>)
 8004d7a:	f001 fefc 	bl	8006b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200003a0 	.word	0x200003a0

08004d88 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET)) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d039      	beq.n	8004e22 <LPUART1_IRQHandler+0x9a>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2210      	movs	r2, #16
 8004db4:	621a      	str	r2, [r3, #32]
		temp = hlpuart1.Instance->ISR;
 8004db6:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	603b      	str	r3, [r7, #0]
		temp = hlpuart1.Instance->RDR;
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	603b      	str	r3, [r7, #0]
		//HAL_UART_DMAStop(&hlpuart1);
		temp = hlpuart1.hdmarx->Instance->CNDTR;
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
		// reset index dma buffer to 1024 (countdown)
		__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
		hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df6:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
		UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	425b      	negs	r3, r3
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <LPUART1_IRQHandler+0xac>)
 8004e1a:	701a      	strb	r2, [r3, #0]
		UART_ESP32_RecvEndFlag = 1;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <LPUART1_IRQHandler+0xb0>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004e22:	4803      	ldr	r0, [pc, #12]	; (8004e30 <LPUART1_IRQHandler+0xa8>)
 8004e24:	f004 fab4 	bl	8009390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000278 	.word	0x20000278
 8004e34:	20001754 	.word	0x20001754
 8004e38:	20001755 	.word	0x20001755

08004e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return 1;
 8004e40:	2301      	movs	r3, #1
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <_kill>:

int _kill(int pid, int sig)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e56:	f006 fbb3 	bl	800b5c0 <__errno>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2216      	movs	r2, #22
 8004e5e:	601a      	str	r2, [r3, #0]
  return -1;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <_exit>:

void _exit (int status)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e74:	f04f 31ff 	mov.w	r1, #4294967295
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ffe7 	bl	8004e4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e7e:	e7fe      	b.n	8004e7e <_exit+0x12>

08004e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e00a      	b.n	8004ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e92:	f3af 8000 	nop.w
 8004e96:	4601      	mov	r1, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	60ba      	str	r2, [r7, #8]
 8004e9e:	b2ca      	uxtb	r2, r1
 8004ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	dbf0      	blt.n	8004e92 <_read+0x12>
  }

  return len;
 8004eb0:	687b      	ldr	r3, [r7, #4]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_close>:
  }
  return len;
}

int _close(int file)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <_isatty>:

int _isatty(int file)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004efa:	2301      	movs	r3, #1
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f2c:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <_sbrk+0x5c>)
 8004f2e:	4b15      	ldr	r3, [pc, #84]	; (8004f84 <_sbrk+0x60>)
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <_sbrk+0x64>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <_sbrk+0x64>)
 8004f42:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <_sbrk+0x68>)
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <_sbrk+0x64>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d207      	bcs.n	8004f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f54:	f006 fb34 	bl	800b5c0 <__errno>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	220c      	movs	r2, #12
 8004f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	e009      	b.n	8004f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <_sbrk+0x64>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <_sbrk+0x64>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <_sbrk+0x64>)
 8004f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20030000 	.word	0x20030000
 8004f84:	00000400 	.word	0x00000400
 8004f88:	20000748 	.word	0x20000748
 8004f8c:	20001768 	.word	0x20001768

08004f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <SystemInit+0x98>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	4a23      	ldr	r2, [pc, #140]	; (8005028 <SystemInit+0x98>)
 8004f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004fbc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <SystemInit+0x9c>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fda:	f023 0305 	bic.w	r3, r3, #5
 8004fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <SystemInit+0xa0>)
 8004ffc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005002:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <SystemInit+0xa0>)
 8005004:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005014:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	2200      	movs	r2, #0
 800501c:	619a      	str	r2, [r3, #24]
}
 800501e:	bf00      	nop
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	e000ed00 	.word	0xe000ed00
 800502c:	faf6fefb 	.word	0xfaf6fefb
 8005030:	22041000 	.word	0x22041000

08005034 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005034:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005036:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005038:	3304      	adds	r3, #4

0800503a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800503a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800503c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800503e:	d3f9      	bcc.n	8005034 <CopyDataInit>
  bx lr
 8005040:	4770      	bx	lr

08005042 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005042:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005044:	3004      	adds	r0, #4

08005046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005046:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005048:	d3fb      	bcc.n	8005042 <FillZerobss>
  bx lr
 800504a:	4770      	bx	lr

0800504c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800504c:	480c      	ldr	r0, [pc, #48]	; (8005080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800504e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005050:	f7ff ff9e 	bl	8004f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005054:	480b      	ldr	r0, [pc, #44]	; (8005084 <LoopForever+0x6>)
 8005056:	490c      	ldr	r1, [pc, #48]	; (8005088 <LoopForever+0xa>)
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <LoopForever+0xe>)
 800505a:	2300      	movs	r3, #0
 800505c:	f7ff ffed 	bl	800503a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005060:	480b      	ldr	r0, [pc, #44]	; (8005090 <LoopForever+0x12>)
 8005062:	490c      	ldr	r1, [pc, #48]	; (8005094 <LoopForever+0x16>)
 8005064:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <LoopForever+0x1a>)
 8005066:	2300      	movs	r3, #0
 8005068:	f7ff ffe7 	bl	800503a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800506c:	480b      	ldr	r0, [pc, #44]	; (800509c <LoopForever+0x1e>)
 800506e:	490c      	ldr	r1, [pc, #48]	; (80050a0 <LoopForever+0x22>)
 8005070:	2300      	movs	r3, #0
 8005072:	f7ff ffe8 	bl	8005046 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005076:	f006 fc61 	bl	800b93c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800507a:	f7fc f9e3 	bl	8001444 <main>

0800507e <LoopForever>:

LoopForever:
  b LoopForever
 800507e:	e7fe      	b.n	800507e <LoopForever>
  ldr   r0, =_estack
 8005080:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005084:	20000008 	.word	0x20000008
 8005088:	200001f8 	.word	0x200001f8
 800508c:	0800fa94 	.word	0x0800fa94
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005090:	20030000 	.word	0x20030000
 8005094:	20030000 	.word	0x20030000
 8005098:	0800fc84 	.word	0x0800fc84
  INIT_BSS _sbss, _ebss
 800509c:	200001f8 	.word	0x200001f8
 80050a0:	20001768 	.word	0x20001768

080050a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050a4:	e7fe      	b.n	80050a4 <ADC1_IRQHandler>
	...

080050a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <HAL_Init+0x3c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <HAL_Init+0x3c>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050be:	2003      	movs	r0, #3
 80050c0:	f001 fb38 	bl	8006734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050c4:	2000      	movs	r0, #0
 80050c6:	f000 f80f 	bl	80050e8 <HAL_InitTick>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	71fb      	strb	r3, [r7, #7]
 80050d4:	e001      	b.n	80050da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050d6:	f7ff fd0c 	bl	8004af2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050da:	79fb      	ldrb	r3, [r7, #7]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	58004000 	.word	0x58004000

080050e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <HAL_InitTick+0x6c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d024      	beq.n	8005146 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80050fc:	f003 fa16 	bl	800852c <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <HAL_InitTick+0x6c>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800510c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fb40 	bl	800679a <HAL_SYSTICK_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b0f      	cmp	r3, #15
 8005124:	d809      	bhi.n	800513a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005126:	2200      	movs	r2, #0
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	f04f 30ff 	mov.w	r0, #4294967295
 800512e:	f001 fb0c 	bl	800674a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <HAL_InitTick+0x70>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e007      	b.n	800514a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e004      	b.n	800514a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e001      	b.n	800514a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000020 	.word	0x20000020
 8005158:	2000001c 	.word	0x2000001c

0800515c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_IncTick+0x20>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_IncTick+0x24>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4413      	add	r3, r2
 800516c:	4a04      	ldr	r2, [pc, #16]	; (8005180 <HAL_IncTick+0x24>)
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000020 	.word	0x20000020
 8005180:	2000074c 	.word	0x2000074c

08005184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return uwTick;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_GetTick+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	2000074c 	.word	0x2000074c

0800519c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80051a0:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <HAL_GetTickPrio+0x14>)
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	2000001c 	.word	0x2000001c

080051b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051bc:	f7ff ffe2 	bl	8005184 <HAL_GetTick>
 80051c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d005      	beq.n	80051da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_Delay+0x44>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051da:	bf00      	nop
 80051dc:	f7ff ffd2 	bl	8005184 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d8f7      	bhi.n	80051dc <HAL_Delay+0x28>
  {
  }
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000020 	.word	0x20000020

080051fc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3360      	adds	r3, #96	; 0x60
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <LL_ADC_SetOffset+0x44>)
 8005286:	4013      	ands	r3, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	4313      	orrs	r3, r2
 8005294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	03fff000 	.word	0x03fff000

080052ac <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3360      	adds	r3, #96	; 0x60
 80052ba:	461a      	mov	r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3360      	adds	r3, #96	; 0x60
 80052e8:	461a      	mov	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3330      	adds	r3, #48	; 0x30
 800531e:	461a      	mov	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	4413      	add	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	211f      	movs	r1, #31
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	401a      	ands	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0e9b      	lsrs	r3, r3, #26
 8005346:	f003 011f 	and.w	r1, r3, #31
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	431a      	orrs	r2, r3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005366:	b480      	push	{r7}
 8005368:	b087      	sub	sp, #28
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3314      	adds	r3, #20
 8005376:	461a      	mov	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	0e5b      	lsrs	r3, r3, #25
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	4413      	add	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	0d1b      	lsrs	r3, r3, #20
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	2107      	movs	r1, #7
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	0d1b      	lsrs	r3, r3, #20
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	431a      	orrs	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d4:	43db      	mvns	r3, r3
 80053d6:	401a      	ands	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f003 0318 	and.w	r3, r3, #24
 80053de:	4908      	ldr	r1, [pc, #32]	; (8005400 <LL_ADC_SetChannelSingleDiff+0x44>)
 80053e0:	40d9      	lsrs	r1, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	400b      	ands	r3, r1
 80053e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	0007ffff 	.word	0x0007ffff

08005404 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6093      	str	r3, [r2, #8]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543c:	d101      	bne.n	8005442 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005464:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800548c:	d101      	bne.n	8005492 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054b4:	f043 0201 	orr.w	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054dc:	f043 0202 	orr.w	r2, r3, #2
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <LL_ADC_IsEnabled+0x18>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <LL_ADC_IsEnabled+0x1a>
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b02      	cmp	r3, #2
 8005528:	d101      	bne.n	800552e <LL_ADC_IsDisableOngoing+0x18>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <LL_ADC_IsDisableOngoing+0x1a>
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800554c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005550:	f043 0204 	orr.w	r2, r3, #4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005578:	f043 0210 	orr.w	r2, r3, #16
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d101      	bne.n	80055a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d101      	bne.n	80055f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005610:	2300      	movs	r3, #0
 8005612:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e12e      	b.n	800587c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fa67 	bl	8004b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff feef 	bl	8005428 <LL_ADC_IsDeepPowerDownEnabled>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fed5 	bl	8005404 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff0a 	bl	8005478 <LL_ADC_IsInternalRegulatorEnabled>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d115      	bne.n	8005696 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff feee 	bl	8005450 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005674:	4b83      	ldr	r3, [pc, #524]	; (8005884 <HAL_ADC_Init+0x284>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	099b      	lsrs	r3, r3, #6
 800567a:	4a83      	ldr	r2, [pc, #524]	; (8005888 <HAL_ADC_Init+0x288>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	099b      	lsrs	r3, r3, #6
 8005682:	3301      	adds	r3, #1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005688:	e002      	b.n	8005690 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	3b01      	subs	r3, #1
 800568e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f9      	bne.n	800568a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff feec 	bl	8005478 <LL_ADC_IsInternalRegulatorEnabled>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f043 0210 	orr.w	r2, r3, #16
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	f043 0201 	orr.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ff60 	bl	800558c <LL_ADC_REG_IsConversionOngoing>
 80056cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 80c7 	bne.w	800586a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 80c3 	bne.w	800586a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056ec:	f043 0202 	orr.w	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fef9 	bl	80054f0 <LL_ADC_IsEnabled>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005704:	4861      	ldr	r0, [pc, #388]	; (800588c <HAL_ADC_Init+0x28c>)
 8005706:	f7ff fef3 	bl	80054f0 <LL_ADC_IsEnabled>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4619      	mov	r1, r3
 8005716:	485e      	ldr	r0, [pc, #376]	; (8005890 <HAL_ADC_Init+0x290>)
 8005718:	f7ff fd70 	bl	80051fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7e5b      	ldrb	r3, [r3, #25]
 8005720:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005726:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800572c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005732:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800573a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800573c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d106      	bne.n	800575c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	3b01      	subs	r3, #1
 8005754:	045b      	lsls	r3, r3, #17
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	4b45      	ldr	r3, [pc, #276]	; (8005894 <HAL_ADC_Init+0x294>)
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	69b9      	ldr	r1, [r7, #24]
 8005788:	430b      	orrs	r3, r1
 800578a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fefb 	bl	800558c <LL_ADC_REG_IsConversionOngoing>
 8005796:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff ff1c 	bl	80055da <LL_ADC_INJ_IsConversionOngoing>
 80057a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d13d      	bne.n	8005826 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d13a      	bne.n	8005826 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	69b9      	ldr	r1, [r7, #24]
 80057d6:	430b      	orrs	r3, r1
 80057d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d118      	bne.n	8005816 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057ee:	f023 0304 	bic.w	r3, r3, #4
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057fa:	4311      	orrs	r1, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005800:	4311      	orrs	r1, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005806:	430a      	orrs	r2, r1
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	611a      	str	r2, [r3, #16]
 8005814:	e007      	b.n	8005826 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d10c      	bne.n	8005848 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	f023 010f 	bic.w	r1, r3, #15
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	1e5a      	subs	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
 8005846:	e007      	b.n	8005858 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 020f 	bic.w	r2, r2, #15
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	f023 0303 	bic.w	r3, r3, #3
 8005860:	f043 0201 	orr.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	655a      	str	r2, [r3, #84]	; 0x54
 8005868:	e007      	b.n	800587a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800587a:	7ffb      	ldrb	r3, [r7, #31]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3720      	adds	r7, #32
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000018 	.word	0x20000018
 8005888:	053e2d63 	.word	0x053e2d63
 800588c:	50040000 	.word	0x50040000
 8005890:	50040300 	.word	0x50040300
 8005894:	fff0c007 	.word	0xfff0c007

08005898 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fe71 	bl	800558c <LL_ADC_REG_IsConversionOngoing>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d140      	bne.n	8005932 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_ADC_Start+0x26>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e03c      	b.n	8005938 <HAL_ADC_Start+0xa0>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fcfc 	bl	80062c4 <ADC_Enable>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d128      	bne.n	8005928 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f6:	d106      	bne.n	8005906 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	f023 0206 	bic.w	r2, r3, #6
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	659a      	str	r2, [r3, #88]	; 0x58
 8005904:	e002      	b.n	800590c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	221c      	movs	r2, #28
 8005912:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fe0b 	bl	800553c <LL_ADC_REG_StartConversion>
 8005926:	e006      	b.n	8005936 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005930:	e001      	b.n	8005936 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005932:	2302      	movs	r3, #2
 8005934:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_ADC_Stop+0x16>
 8005952:	2302      	movs	r3, #2
 8005954:	e023      	b.n	800599e <HAL_ADC_Stop+0x5e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800595e:	2103      	movs	r1, #3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fbf3 	bl	800614c <ADC_ConversionStop>
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d111      	bne.n	8005994 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fd21 	bl	80063b8 <ADC_Disable>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b0b6      	sub	sp, #216	; 0xd8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_ADC_ConfigChannel+0x22>
 80059de:	2302      	movs	r3, #2
 80059e0:	e39f      	b.n	8006122 <HAL_ADC_ConfigChannel+0x762>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fdcc 	bl	800558c <LL_ADC_REG_IsConversionOngoing>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 8384 	bne.w	8006104 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f7ff fc80 	bl	800530e <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fdba 	bl	800558c <LL_ADC_REG_IsConversionOngoing>
 8005a18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fdda 	bl	80055da <LL_ADC_INJ_IsConversionOngoing>
 8005a26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 81a6 	bne.w	8005d80 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f040 81a1 	bne.w	8005d80 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6819      	ldr	r1, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f7ff fc8b 	bl	8005366 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	08db      	lsrs	r3, r3, #3
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d00a      	beq.n	8005a88 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6919      	ldr	r1, [r3, #16]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a82:	f7ff fbef 	bl	8005264 <LL_ADC_SetOffset>
 8005a86:	e17b      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fc0c 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_ADC_ConfigChannel+0xf4>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff fc01 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	0e9b      	lsrs	r3, r3, #26
 8005aae:	f003 021f 	and.w	r2, r3, #31
 8005ab2:	e01e      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x132>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fbf6 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aca:	fa93 f3a3 	rbit	r3, r3
 8005ace:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8005ae2:	2320      	movs	r3, #32
 8005ae4:	e004      	b.n	8005af0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8005ae6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005aea:	fab3 f383 	clz	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <HAL_ADC_ConfigChannel+0x14a>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	0e9b      	lsrs	r3, r3, #26
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	e018      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x17c>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b16:	fa93 f3a3 	rbit	r3, r3
 8005b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005b26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8005b2e:	2320      	movs	r3, #32
 8005b30:	e004      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8005b32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d106      	bne.n	8005b4e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fbc5 	bl	80052d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2101      	movs	r1, #1
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fba9 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x1ba>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fb9e 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005b70:	4603      	mov	r3, r0
 8005b72:	0e9b      	lsrs	r3, r3, #26
 8005b74:	f003 021f 	and.w	r2, r3, #31
 8005b78:	e01e      	b.n	8005bb8 <HAL_ADC_ConfigChannel+0x1f8>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fb93 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b90:	fa93 f3a3 	rbit	r3, r3
 8005b94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005b98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005ba8:	2320      	movs	r3, #32
 8005baa:	e004      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bb0:	fab3 f383 	clz	r3, r3
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x210>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	0e9b      	lsrs	r3, r3, #26
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	e018      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x242>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	e004      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8005bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bfc:	fab3 f383 	clz	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d106      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fb62 	bl	80052d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2102      	movs	r1, #2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fb46 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <HAL_ADC_ConfigChannel+0x280>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2102      	movs	r1, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fb3b 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005c36:	4603      	mov	r3, r0
 8005c38:	0e9b      	lsrs	r3, r3, #26
 8005c3a:	f003 021f 	and.w	r2, r3, #31
 8005c3e:	e01e      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x2be>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2102      	movs	r1, #2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fb30 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8005c6e:	2320      	movs	r3, #32
 8005c70:	e004      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c76:	fab3 f383 	clz	r3, r3
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <HAL_ADC_ConfigChannel+0x2d6>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	0e9b      	lsrs	r3, r3, #26
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	e016      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x304>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ca2:	fa93 f3a3 	rbit	r3, r3
 8005ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005cb6:	2320      	movs	r3, #32
 8005cb8:	e004      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d106      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2102      	movs	r1, #2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fb01 	bl	80052d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2103      	movs	r1, #3
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fae5 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <HAL_ADC_ConfigChannel+0x342>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2103      	movs	r1, #3
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fada 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	0e9b      	lsrs	r3, r3, #26
 8005cfc:	f003 021f 	and.w	r2, r3, #31
 8005d00:	e017      	b.n	8005d32 <HAL_ADC_ConfigChannel+0x372>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2103      	movs	r1, #3
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff facf 	bl	80052ac <LL_ADC_GetOffsetChannel>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d14:	fa93 f3a3 	rbit	r3, r3
 8005d18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8005d24:	2320      	movs	r3, #32
 8005d26:	e003      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8005d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d2a:	fab3 f383 	clz	r3, r3
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_ADC_ConfigChannel+0x38a>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	0e9b      	lsrs	r3, r3, #26
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	e011      	b.n	8005d6e <HAL_ADC_ConfigChannel+0x3ae>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d52:	fa93 f3a3 	rbit	r3, r3
 8005d56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8005d62:	2320      	movs	r3, #32
 8005d64:	e003      	b.n	8005d6e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d68:	fab3 f383 	clz	r3, r3
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d106      	bne.n	8005d80 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2200      	movs	r2, #0
 8005d78:	2103      	movs	r1, #3
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff faac 	bl	80052d8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fbb3 	bl	80054f0 <LL_ADC_IsEnabled>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 81c2 	bne.w	8006116 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f7ff fb0c 	bl	80053bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a8e      	ldr	r2, [pc, #568]	; (8005fe4 <HAL_ADC_ConfigChannel+0x624>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f040 8130 	bne.w	8006010 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_ADC_ConfigChannel+0x418>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	0e9b      	lsrs	r3, r3, #26
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	bf94      	ite	ls
 8005dd0:	2301      	movls	r3, #1
 8005dd2:	2300      	movhi	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e019      	b.n	8005e0c <HAL_ADC_ConfigChannel+0x44c>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de0:	fa93 f3a3 	rbit	r3, r3
 8005de4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005de8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8005df0:	2320      	movs	r3, #32
 8005df2:	e003      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df6:	fab3 f383 	clz	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	2b09      	cmp	r3, #9
 8005e04:	bf94      	ite	ls
 8005e06:	2301      	movls	r3, #1
 8005e08:	2300      	movhi	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d079      	beq.n	8005f04 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x46c>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	0e9b      	lsrs	r3, r3, #26
 8005e22:	3301      	adds	r3, #1
 8005e24:	069b      	lsls	r3, r3, #26
 8005e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e2a:	e015      	b.n	8005e58 <HAL_ADC_ConfigChannel+0x498>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	fa93 f3a3 	rbit	r3, r3
 8005e38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005e44:	2320      	movs	r3, #32
 8005e46:	e003      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4a:	fab3 f383 	clz	r3, r3
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	3301      	adds	r3, #1
 8005e52:	069b      	lsls	r3, r3, #26
 8005e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x4b8>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	0e9b      	lsrs	r3, r3, #26
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	e017      	b.n	8005ea8 <HAL_ADC_ConfigChannel+0x4e8>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e80:	fa93 f3a3 	rbit	r3, r3
 8005e84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005e90:	2320      	movs	r3, #32
 8005e92:	e003      	b.n	8005e9c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	ea42 0103 	orr.w	r1, r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_ADC_ConfigChannel+0x50e>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	0e9b      	lsrs	r3, r3, #26
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	f003 021f 	and.w	r2, r3, #31
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	051b      	lsls	r3, r3, #20
 8005ecc:	e018      	b.n	8005f00 <HAL_ADC_ConfigChannel+0x540>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	fa93 f3a3 	rbit	r3, r3
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005ee6:	2320      	movs	r3, #32
 8005ee8:	e003      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	fab3 f383 	clz	r3, r3
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f00:	430b      	orrs	r3, r1
 8005f02:	e080      	b.n	8006006 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d107      	bne.n	8005f20 <HAL_ADC_ConfigChannel+0x560>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0e9b      	lsrs	r3, r3, #26
 8005f16:	3301      	adds	r3, #1
 8005f18:	069b      	lsls	r3, r3, #26
 8005f1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f1e:	e015      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x58c>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	fa93 f3a3 	rbit	r3, r3
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005f38:	2320      	movs	r3, #32
 8005f3a:	e003      	b.n	8005f44 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	fab3 f383 	clz	r3, r3
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	3301      	adds	r3, #1
 8005f46:	069b      	lsls	r3, r3, #26
 8005f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <HAL_ADC_ConfigChannel+0x5ac>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0e9b      	lsrs	r3, r3, #26
 8005f5e:	3301      	adds	r3, #1
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2101      	movs	r1, #1
 8005f66:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6a:	e017      	b.n	8005f9c <HAL_ADC_ConfigChannel+0x5dc>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	fa93 f3a3 	rbit	r3, r3
 8005f78:	61fb      	str	r3, [r7, #28]
  return result;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005f84:	2320      	movs	r3, #32
 8005f86:	e003      	b.n	8005f90 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	fab3 f383 	clz	r3, r3
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	3301      	adds	r3, #1
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	ea42 0103 	orr.w	r1, r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10d      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x608>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	0e9b      	lsrs	r3, r3, #26
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f003 021f 	and.w	r2, r3, #31
 8005fb8:	4613      	mov	r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3b1e      	subs	r3, #30
 8005fc0:	051b      	lsls	r3, r3, #20
 8005fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	e01d      	b.n	8006004 <HAL_ADC_ConfigChannel+0x644>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	fa93 f3a3 	rbit	r3, r3
 8005fd4:	613b      	str	r3, [r7, #16]
  return result;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d103      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	e005      	b.n	8005ff0 <HAL_ADC_ConfigChannel+0x630>
 8005fe4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	fab3 f383 	clz	r3, r3
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f003 021f 	and.w	r2, r3, #31
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3b1e      	subs	r3, #30
 8005ffe:	051b      	lsls	r3, r3, #20
 8006000:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006004:	430b      	orrs	r3, r1
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	6892      	ldr	r2, [r2, #8]
 800600a:	4619      	mov	r1, r3
 800600c:	f7ff f9ab 	bl	8005366 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4b45      	ldr	r3, [pc, #276]	; (800612c <HAL_ADC_ConfigChannel+0x76c>)
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d07c      	beq.n	8006116 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800601c:	4844      	ldr	r0, [pc, #272]	; (8006130 <HAL_ADC_ConfigChannel+0x770>)
 800601e:	f7ff f913 	bl	8005248 <LL_ADC_GetCommonPathInternalCh>
 8006022:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006026:	4843      	ldr	r0, [pc, #268]	; (8006134 <HAL_ADC_ConfigChannel+0x774>)
 8006028:	f7ff fa62 	bl	80054f0 <LL_ADC_IsEnabled>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d15e      	bne.n	80060f0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a40      	ldr	r2, [pc, #256]	; (8006138 <HAL_ADC_ConfigChannel+0x778>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d127      	bne.n	800608c <HAL_ADC_ConfigChannel+0x6cc>
 800603c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d121      	bne.n	800608c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a39      	ldr	r2, [pc, #228]	; (8006134 <HAL_ADC_ConfigChannel+0x774>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d161      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006056:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800605a:	4619      	mov	r1, r3
 800605c:	4834      	ldr	r0, [pc, #208]	; (8006130 <HAL_ADC_ConfigChannel+0x770>)
 800605e:	f7ff f8e0 	bl	8005222 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006062:	4b36      	ldr	r3, [pc, #216]	; (800613c <HAL_ADC_ConfigChannel+0x77c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	4a35      	ldr	r2, [pc, #212]	; (8006140 <HAL_ADC_ConfigChannel+0x780>)
 800606a:	fba2 2303 	umull	r2, r3, r2, r3
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	4613      	mov	r3, r2
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800607c:	e002      	b.n	8006084 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b01      	subs	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f9      	bne.n	800607e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800608a:	e044      	b.n	8006116 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <HAL_ADC_ConfigChannel+0x784>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d113      	bne.n	80060be <HAL_ADC_ConfigChannel+0x6fe>
 8006096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800609a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a23      	ldr	r2, [pc, #140]	; (8006134 <HAL_ADC_ConfigChannel+0x774>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d134      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80060ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060b4:	4619      	mov	r1, r3
 80060b6:	481e      	ldr	r0, [pc, #120]	; (8006130 <HAL_ADC_ConfigChannel+0x770>)
 80060b8:	f7ff f8b3 	bl	8005222 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060bc:	e02b      	b.n	8006116 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a21      	ldr	r2, [pc, #132]	; (8006148 <HAL_ADC_ConfigChannel+0x788>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d126      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x756>
 80060c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d120      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a16      	ldr	r2, [pc, #88]	; (8006134 <HAL_ADC_ConfigChannel+0x774>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d11b      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80060de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060e6:	4619      	mov	r1, r3
 80060e8:	4811      	ldr	r0, [pc, #68]	; (8006130 <HAL_ADC_ConfigChannel+0x770>)
 80060ea:	f7ff f89a 	bl	8005222 <LL_ADC_SetCommonPathInternalCh>
 80060ee:	e012      	b.n	8006116 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	f043 0220 	orr.w	r2, r3, #32
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006102:	e008      	b.n	8006116 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800611e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006122:	4618      	mov	r0, r3
 8006124:	37d8      	adds	r7, #216	; 0xd8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	80080000 	.word	0x80080000
 8006130:	50040300 	.word	0x50040300
 8006134:	50040000 	.word	0x50040000
 8006138:	c7520000 	.word	0xc7520000
 800613c:	20000018 	.word	0x20000018
 8006140:	053e2d63 	.word	0x053e2d63
 8006144:	cb840000 	.word	0xcb840000
 8006148:	80000001 	.word	0x80000001

0800614c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fa12 	bl	800558c <LL_ADC_REG_IsConversionOngoing>
 8006168:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fa33 	bl	80055da <LL_ADC_INJ_IsConversionOngoing>
 8006174:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8098 	beq.w	80062b4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d02a      	beq.n	80061e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7e5b      	ldrb	r3, [r3, #25]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d126      	bne.n	80061e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7e1b      	ldrb	r3, [r3, #24]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d122      	bne.n	80061e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80061a6:	e014      	b.n	80061d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4a45      	ldr	r2, [pc, #276]	; (80062c0 <ADC_ConversionStop+0x174>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d90d      	bls.n	80061cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	f043 0210 	orr.w	r2, r3, #16
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c0:	f043 0201 	orr.w	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e074      	b.n	80062b6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	3301      	adds	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d1e3      	bne.n	80061a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2240      	movs	r2, #64	; 0x40
 80061e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d014      	beq.n	8006218 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff f9ca 	bl	800558c <LL_ADC_REG_IsConversionOngoing>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00c      	beq.n	8006218 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f987 	bl	8005516 <LL_ADC_IsDisableOngoing>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f9a6 	bl	8005564 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d014      	beq.n	8006248 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff f9d9 	bl	80055da <LL_ADC_INJ_IsConversionOngoing>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff f96f 	bl	8005516 <LL_ADC_IsDisableOngoing>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff f9b5 	bl	80055b2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d005      	beq.n	800625a <ADC_ConversionStop+0x10e>
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d105      	bne.n	8006260 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006254:	230c      	movs	r3, #12
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e005      	b.n	8006266 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800625a:	2308      	movs	r3, #8
 800625c:	617b      	str	r3, [r7, #20]
        break;
 800625e:	e002      	b.n	8006266 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006260:	2304      	movs	r3, #4
 8006262:	617b      	str	r3, [r7, #20]
        break;
 8006264:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006266:	f7fe ff8d 	bl	8005184 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800626c:	e01b      	b.n	80062a6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800626e:	f7fe ff89 	bl	8005184 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b05      	cmp	r3, #5
 800627a:	d914      	bls.n	80062a6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4013      	ands	r3, r2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f043 0210 	orr.w	r2, r3, #16
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e007      	b.n	80062b6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1dc      	bne.n	800626e <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	a33fffff 	.word	0xa33fffff

080062c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff f90b 	bl	80054f0 <LL_ADC_IsEnabled>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d15e      	bne.n	800639e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	4b30      	ldr	r3, [pc, #192]	; (80063a8 <ADC_Enable+0xe4>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00d      	beq.n	800630a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	f043 0210 	orr.w	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fe:	f043 0201 	orr.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e04a      	b.n	80063a0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff f8c6 	bl	80054a0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006314:	4825      	ldr	r0, [pc, #148]	; (80063ac <ADC_Enable+0xe8>)
 8006316:	f7fe ff97 	bl	8005248 <LL_ADC_GetCommonPathInternalCh>
 800631a:	4603      	mov	r3, r0
 800631c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00f      	beq.n	8006344 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006324:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <ADC_Enable+0xec>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	099b      	lsrs	r3, r3, #6
 800632a:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <ADC_Enable+0xf0>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	099b      	lsrs	r3, r3, #6
 8006332:	3301      	adds	r3, #1
 8006334:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006336:	e002      	b.n	800633e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	3b01      	subs	r3, #1
 800633c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f9      	bne.n	8006338 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006344:	f7fe ff1e 	bl	8005184 <HAL_GetTick>
 8006348:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800634a:	e021      	b.n	8006390 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff f8cd 	bl	80054f0 <LL_ADC_IsEnabled>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff f89d 	bl	80054a0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006366:	f7fe ff0d 	bl	8005184 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d90d      	bls.n	8006390 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	f043 0210 	orr.w	r2, r3, #16
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006384:	f043 0201 	orr.w	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e007      	b.n	80063a0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b01      	cmp	r3, #1
 800639c:	d1d6      	bne.n	800634c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	8000003f 	.word	0x8000003f
 80063ac:	50040300 	.word	0x50040300
 80063b0:	20000018 	.word	0x20000018
 80063b4:	053e2d63 	.word	0x053e2d63

080063b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff f8a6 	bl	8005516 <LL_ADC_IsDisableOngoing>
 80063ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff f88d 	bl	80054f0 <LL_ADC_IsEnabled>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d047      	beq.n	800646c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d144      	bne.n	800646c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 030d 	and.w	r3, r3, #13
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d10c      	bne.n	800640a <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff f867 	bl	80054c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2203      	movs	r2, #3
 8006400:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006402:	f7fe febf 	bl	8005184 <HAL_GetTick>
 8006406:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006408:	e029      	b.n	800645e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	f043 0210 	orr.w	r2, r3, #16
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	f043 0201 	orr.w	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e023      	b.n	800646e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006426:	f7fe fead 	bl	8005184 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d914      	bls.n	800645e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00d      	beq.n	800645e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	f043 0210 	orr.w	r2, r3, #16
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	f043 0201 	orr.w	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e007      	b.n	800646e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1dc      	bne.n	8006426 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <LL_ADC_StartCalibration>:
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006488:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006492:	4313      	orrs	r3, r2
 8006494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064bc:	d101      	bne.n	80064c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80064da:	2300      	movs	r3, #0
 80064dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_ADCEx_Calibration_Start+0x1c>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e04d      	b.n	8006588 <HAL_ADCEx_Calibration_Start+0xb8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ff5f 	bl	80063b8 <ADC_Disable>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d136      	bne.n	8006572 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800650c:	f023 0302 	bic.w	r3, r3, #2
 8006510:	f043 0202 	orr.w	r2, r3, #2
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ffa9 	bl	8006476 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006524:	e014      	b.n	8006550 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	3301      	adds	r3, #1
 800652a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a18      	ldr	r2, [pc, #96]	; (8006590 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d90d      	bls.n	8006550 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	f023 0312 	bic.w	r3, r3, #18
 800653c:	f043 0210 	orr.w	r2, r3, #16
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e01b      	b.n	8006588 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff ffa7 	bl	80064a8 <LL_ADC_IsCalibrationOnGoing>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e2      	bne.n	8006526 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f023 0303 	bic.w	r3, r3, #3
 8006568:	f043 0201 	orr.w	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
 8006570:	e005      	b.n	800657e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	f043 0210 	orr.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	00026aaa 	.word	0x00026aaa

08006594 <__NVIC_SetPriorityGrouping>:
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <__NVIC_SetPriorityGrouping+0x44>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065b0:	4013      	ands	r3, r2
 80065b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065c6:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <__NVIC_SetPriorityGrouping+0x44>)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	60d3      	str	r3, [r2, #12]
}
 80065cc:	bf00      	nop
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	e000ed00 	.word	0xe000ed00

080065dc <__NVIC_GetPriorityGrouping>:
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <__NVIC_GetPriorityGrouping+0x18>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	0a1b      	lsrs	r3, r3, #8
 80065e6:	f003 0307 	and.w	r3, r3, #7
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	e000ed00 	.word	0xe000ed00

080065f8 <__NVIC_EnableIRQ>:
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006606:	2b00      	cmp	r3, #0
 8006608:	db0b      	blt.n	8006622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	f003 021f 	and.w	r2, r3, #31
 8006610:	4907      	ldr	r1, [pc, #28]	; (8006630 <__NVIC_EnableIRQ+0x38>)
 8006612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	2001      	movs	r0, #1
 800661a:	fa00 f202 	lsl.w	r2, r0, r2
 800661e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	e000e100 	.word	0xe000e100

08006634 <__NVIC_SetPriority>:
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	6039      	str	r1, [r7, #0]
 800663e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006644:	2b00      	cmp	r3, #0
 8006646:	db0a      	blt.n	800665e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	490c      	ldr	r1, [pc, #48]	; (8006680 <__NVIC_SetPriority+0x4c>)
 800664e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006652:	0112      	lsls	r2, r2, #4
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	440b      	add	r3, r1
 8006658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800665c:	e00a      	b.n	8006674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	4908      	ldr	r1, [pc, #32]	; (8006684 <__NVIC_SetPriority+0x50>)
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	3b04      	subs	r3, #4
 800666c:	0112      	lsls	r2, r2, #4
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	440b      	add	r3, r1
 8006672:	761a      	strb	r2, [r3, #24]
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	e000e100 	.word	0xe000e100
 8006684:	e000ed00 	.word	0xe000ed00

08006688 <NVIC_EncodePriority>:
{
 8006688:	b480      	push	{r7}
 800668a:	b089      	sub	sp, #36	; 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f1c3 0307 	rsb	r3, r3, #7
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	bf28      	it	cs
 80066a6:	2304      	movcs	r3, #4
 80066a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	3304      	adds	r3, #4
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	d902      	bls.n	80066b8 <NVIC_EncodePriority+0x30>
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	3b03      	subs	r3, #3
 80066b6:	e000      	b.n	80066ba <NVIC_EncodePriority+0x32>
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066bc:	f04f 32ff 	mov.w	r2, #4294967295
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43da      	mvns	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	401a      	ands	r2, r3
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066d0:	f04f 31ff 	mov.w	r1, #4294967295
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	fa01 f303 	lsl.w	r3, r1, r3
 80066da:	43d9      	mvns	r1, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066e0:	4313      	orrs	r3, r2
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3724      	adds	r7, #36	; 0x24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <SysTick_Config>:
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006700:	d301      	bcc.n	8006706 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006702:	2301      	movs	r3, #1
 8006704:	e00f      	b.n	8006726 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006706:	4a0a      	ldr	r2, [pc, #40]	; (8006730 <SysTick_Config+0x40>)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3b01      	subs	r3, #1
 800670c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800670e:	210f      	movs	r1, #15
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	f7ff ff8e 	bl	8006634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <SysTick_Config+0x40>)
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800671e:	4b04      	ldr	r3, [pc, #16]	; (8006730 <SysTick_Config+0x40>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	e000e010 	.word	0xe000e010

08006734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff ff29 	bl	8006594 <__NVIC_SetPriorityGrouping>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	4603      	mov	r3, r0
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006758:	f7ff ff40 	bl	80065dc <__NVIC_GetPriorityGrouping>
 800675c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	6978      	ldr	r0, [r7, #20]
 8006764:	f7ff ff90 	bl	8006688 <NVIC_EncodePriority>
 8006768:	4602      	mov	r2, r0
 800676a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676e:	4611      	mov	r1, r2
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff ff5f 	bl	8006634 <__NVIC_SetPriority>
}
 8006776:	bf00      	nop
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	4603      	mov	r3, r0
 8006786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff ff33 	bl	80065f8 <__NVIC_EnableIRQ>
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ffa4 	bl	80066f0 <SysTick_Config>
 80067a8:	4603      	mov	r3, r0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e08e      	b.n	80068e4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	4b47      	ldr	r3, [pc, #284]	; (80068ec <HAL_DMA_Init+0x138>)
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d80f      	bhi.n	80067f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	4b45      	ldr	r3, [pc, #276]	; (80068f0 <HAL_DMA_Init+0x13c>)
 80067da:	4413      	add	r3, r2
 80067dc:	4a45      	ldr	r2, [pc, #276]	; (80068f4 <HAL_DMA_Init+0x140>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	009a      	lsls	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a42      	ldr	r2, [pc, #264]	; (80068f8 <HAL_DMA_Init+0x144>)
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40
 80067f0:	e00e      	b.n	8006810 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	4b40      	ldr	r3, [pc, #256]	; (80068fc <HAL_DMA_Init+0x148>)
 80067fa:	4413      	add	r3, r2
 80067fc:	4a3d      	ldr	r2, [pc, #244]	; (80068f4 <HAL_DMA_Init+0x140>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	009a      	lsls	r2, r3, #2
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a3c      	ldr	r2, [pc, #240]	; (8006900 <HAL_DMA_Init+0x14c>)
 800680e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800684c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa74 	bl	8006d50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006870:	d102      	bne.n	8006878 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006880:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006884:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800688e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d010      	beq.n	80068ba <HAL_DMA_Init+0x106>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d80c      	bhi.n	80068ba <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa93 	bl	8006dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	e008      	b.n	80068cc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40020407 	.word	0x40020407
 80068f0:	bffdfff8 	.word	0xbffdfff8
 80068f4:	cccccccd 	.word	0xcccccccd
 80068f8:	40020000 	.word	0x40020000
 80068fc:	bffdfbf8 	.word	0xbffdfbf8
 8006900:	40020400 	.word	0x40020400

08006904 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_DMA_Start_IT+0x20>
 8006920:	2302      	movs	r3, #2
 8006922:	e066      	b.n	80069f2 <HAL_DMA_Start_IT+0xee>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d155      	bne.n	80069e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f9b9 	bl	8006cd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	2b00      	cmp	r3, #0
 8006968:	d008      	beq.n	800697c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 020e 	orr.w	r2, r2, #14
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e00f      	b.n	800699c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0204 	bic.w	r2, r2, #4
 800698a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 020a 	orr.w	r2, r2, #10
 800699a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0201 	orr.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e005      	b.n	80069f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80069ec:	2302      	movs	r3, #2
 80069ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e04f      	b.n	8006aac <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d008      	beq.n	8006a2a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e040      	b.n	8006aac <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 020e 	bic.w	r2, r2, #14
 8006a38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	f003 021c 	and.w	r2, r3, #28
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2101      	movs	r1, #1
 8006a68:	fa01 f202 	lsl.w	r2, r1, r2
 8006a6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00c      	beq.n	8006a9a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d005      	beq.n	8006adc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	e047      	b.n	8006b6c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 020e 	bic.w	r2, r2, #14
 8006aea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	f003 021c 	and.w	r2, r3, #28
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2101      	movs	r1, #1
 8006b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
    }
  }
  return status;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f003 031c 	and.w	r3, r3, #28
 8006b96:	2204      	movs	r2, #4
 8006b98:	409a      	lsls	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d026      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x7a>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d021      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0204 	bic.w	r2, r2, #4
 8006bc8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	f003 021c 	and.w	r2, r3, #28
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8006bdc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d071      	beq.n	8006cca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006bee:	e06c      	b.n	8006cca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	f003 031c 	and.w	r3, r3, #28
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d02e      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xec>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d029      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 020a 	bic.w	r2, r2, #10
 8006c2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	f003 021c 	and.w	r2, r3, #28
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	2102      	movs	r1, #2
 8006c42:	fa01 f202 	lsl.w	r2, r1, r2
 8006c46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d038      	beq.n	8006cca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006c60:	e033      	b.n	8006cca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	f003 031c 	and.w	r3, r3, #28
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	409a      	lsls	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02a      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x156>
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d025      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 020e 	bic.w	r2, r2, #14
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c94:	f003 021c 	and.w	r2, r3, #28
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8006ca2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
}
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006cfc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f003 021c 	and.w	r2, r3, #28
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d108      	bne.n	8006d34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d32:	e007      	b.n	8006d44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d80a      	bhi.n	8006d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	089b      	lsrs	r3, r3, #2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d70:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6493      	str	r3, [r2, #72]	; 0x48
 8006d78:	e007      	b.n	8006d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7e:	089b      	lsrs	r3, r3, #2
 8006d80:	009a      	lsls	r2, r3, #2
 8006d82:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006d84:	4413      	add	r3, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	3b08      	subs	r3, #8
 8006d92:	4a0c      	ldr	r2, [pc, #48]	; (8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006d94:	fba2 2303 	umull	r2, r3, r2, r3
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006da0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	2201      	movs	r2, #1
 8006daa:	409a      	lsls	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	40020407 	.word	0x40020407
 8006dc0:	4002081c 	.word	0x4002081c
 8006dc4:	cccccccd 	.word	0xcccccccd
 8006dc8:	40020880 	.word	0x40020880

08006dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	409a      	lsls	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	1000823f 	.word	0x1000823f
 8006e14:	40020940 	.word	0x40020940

08006e18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e26:	e14c      	b.n	80070c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	4013      	ands	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 813e 	beq.w	80070bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d005      	beq.n	8006e58 <HAL_GPIO_Init+0x40>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d130      	bne.n	8006eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	2203      	movs	r2, #3
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e8e:	2201      	movs	r2, #1
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	43db      	mvns	r3, r3
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	f003 0201 	and.w	r2, r3, #1
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d017      	beq.n	8006ef6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4013      	ands	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d123      	bne.n	8006f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	08da      	lsrs	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3208      	adds	r2, #8
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	220f      	movs	r2, #15
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4013      	ands	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	08da      	lsrs	r2, r3, #3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3208      	adds	r2, #8
 8006f44:	6939      	ldr	r1, [r7, #16]
 8006f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	2203      	movs	r2, #3
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f003 0203 	and.w	r2, r3, #3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8098 	beq.w	80070bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006f8c:	4a54      	ldr	r2, [pc, #336]	; (80070e0 <HAL_GPIO_Init+0x2c8>)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	3302      	adds	r3, #2
 8006f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	220f      	movs	r2, #15
 8006fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4013      	ands	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006fb6:	d019      	beq.n	8006fec <HAL_GPIO_Init+0x1d4>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a4a      	ldr	r2, [pc, #296]	; (80070e4 <HAL_GPIO_Init+0x2cc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <HAL_GPIO_Init+0x1d0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a49      	ldr	r2, [pc, #292]	; (80070e8 <HAL_GPIO_Init+0x2d0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00d      	beq.n	8006fe4 <HAL_GPIO_Init+0x1cc>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a48      	ldr	r2, [pc, #288]	; (80070ec <HAL_GPIO_Init+0x2d4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <HAL_GPIO_Init+0x1c8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a47      	ldr	r2, [pc, #284]	; (80070f0 <HAL_GPIO_Init+0x2d8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d101      	bne.n	8006fdc <HAL_GPIO_Init+0x1c4>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	e008      	b.n	8006fee <HAL_GPIO_Init+0x1d6>
 8006fdc:	2307      	movs	r3, #7
 8006fde:	e006      	b.n	8006fee <HAL_GPIO_Init+0x1d6>
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e004      	b.n	8006fee <HAL_GPIO_Init+0x1d6>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e002      	b.n	8006fee <HAL_GPIO_Init+0x1d6>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_GPIO_Init+0x1d6>
 8006fec:	2300      	movs	r3, #0
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	f002 0203 	and.w	r2, r2, #3
 8006ff4:	0092      	lsls	r2, r2, #2
 8006ff6:	4093      	lsls	r3, r2
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006ffe:	4938      	ldr	r1, [pc, #224]	; (80070e0 <HAL_GPIO_Init+0x2c8>)
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	089b      	lsrs	r3, r3, #2
 8007004:	3302      	adds	r3, #2
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800700c:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	43db      	mvns	r3, r3
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4013      	ands	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007030:	4a30      	ldr	r2, [pc, #192]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007036:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	43db      	mvns	r3, r3
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4013      	ands	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800705a:	4a26      	ldr	r2, [pc, #152]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007060:	4b24      	ldr	r3, [pc, #144]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 8007062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	43db      	mvns	r3, r3
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007086:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800708e:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 8007090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	43db      	mvns	r3, r3
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4013      	ands	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80070b4:	4a0f      	ldr	r2, [pc, #60]	; (80070f4 <HAL_GPIO_Init+0x2dc>)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3301      	adds	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f aeab 	bne.w	8006e28 <HAL_GPIO_Init+0x10>
  }
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40010000 	.word	0x40010000
 80070e4:	48000400 	.word	0x48000400
 80070e8:	48000800 	.word	0x48000800
 80070ec:	48000c00 	.word	0x48000c00
 80070f0:	48001000 	.word	0x48001000
 80070f4:	58000800 	.word	0x58000800

080070f8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e001      	b.n	800711a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	807b      	strh	r3, [r7, #2]
 8007134:	4613      	mov	r3, r2
 8007136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007138:	787b      	ldrb	r3, [r7, #1]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800713e:	887a      	ldrh	r2, [r7, #2]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007144:	e002      	b.n	800714c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007146:	887a      	ldrh	r2, [r7, #2]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800716a:	887a      	ldrh	r2, [r7, #2]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4013      	ands	r3, r2
 8007170:	041a      	lsls	r2, r3, #16
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	43d9      	mvns	r1, r3
 8007176:	887b      	ldrh	r3, [r7, #2]
 8007178:	400b      	ands	r3, r1
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	619a      	str	r2, [r3, #24]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	4013      	ands	r3, r2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d006      	beq.n	80071b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071a2:	4a05      	ldr	r2, [pc, #20]	; (80071b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fa fcca 	bl	8001b44 <HAL_GPIO_EXTI_Callback>
  }
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	58000800 	.word	0x58000800

080071bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80071bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071be:	b08b      	sub	sp, #44	; 0x2c
 80071c0:	af06      	add	r7, sp, #24
 80071c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e0cb      	b.n	8007366 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fd fd5e 	bl	8004ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2203      	movs	r2, #3
 80071ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f003 fb99 	bl	800a92c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
 80071fe:	e040      	b.n	8007282 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	440b      	add	r3, r1
 8007210:	3301      	adds	r3, #1
 8007212:	2201      	movs	r2, #1
 8007214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	440b      	add	r3, r1
 8007226:	7bfa      	ldrb	r2, [r7, #15]
 8007228:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	440b      	add	r3, r1
 800723a:	3303      	adds	r3, #3
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007240:	7bfa      	ldrb	r2, [r7, #15]
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	440b      	add	r3, r1
 800724e:	3338      	adds	r3, #56	; 0x38
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007254:	7bfa      	ldrb	r2, [r7, #15]
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	440b      	add	r3, r1
 8007262:	333c      	adds	r3, #60	; 0x3c
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007268:	7bfa      	ldrb	r2, [r7, #15]
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	440b      	add	r3, r1
 8007276:	3340      	adds	r3, #64	; 0x40
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	3301      	adds	r3, #1
 8007280:	73fb      	strb	r3, [r7, #15]
 8007282:	7bfa      	ldrb	r2, [r7, #15]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	d3b9      	bcc.n	8007200 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	e044      	b.n	800731c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007292:	7bfa      	ldrb	r2, [r7, #15]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	440b      	add	r3, r1
 80072a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80072a8:	7bfa      	ldrb	r2, [r7, #15]
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	440b      	add	r3, r1
 80072b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072ba:	7bfa      	ldrb	r2, [r7, #15]
 80072bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072be:	7bfa      	ldrb	r2, [r7, #15]
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	440b      	add	r3, r1
 80072cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80072d4:	7bfa      	ldrb	r2, [r7, #15]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072ea:	7bfa      	ldrb	r2, [r7, #15]
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	440b      	add	r3, r1
 80072f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	440b      	add	r3, r1
 800730e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	3301      	adds	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
 800731c:	7bfa      	ldrb	r2, [r7, #15]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d3b5      	bcc.n	8007292 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	687e      	ldr	r6, [r7, #4]
 800732e:	466d      	mov	r5, sp
 8007330:	f106 0410 	add.w	r4, r6, #16
 8007334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	602b      	str	r3, [r5, #0]
 800733c:	1d33      	adds	r3, r6, #4
 800733e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007340:	6838      	ldr	r0, [r7, #0]
 8007342:	f003 fb0e 	bl	800a962 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d102      	bne.n	8007364 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f805 	bl	800736e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800736e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007392:	b29b      	uxth	r3, r3
 8007394:	f043 0301 	orr.w	r3, r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f043 0302 	orr.w	r3, r3, #2
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d2:	6013      	str	r3, [r2, #0]
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	58000400 	.word	0x58000400

080073e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <HAL_PWREx_GetVoltageRange+0x18>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	58000400 	.word	0x58000400

08007400 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800740e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007412:	d101      	bne.n	8007418 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007414:	2301      	movs	r3, #1
 8007416:	e000      	b.n	800741a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <LL_RCC_HSE_Enable>:
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007436:	6013      	str	r3, [r2, #0]
}
 8007438:	bf00      	nop
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <LL_RCC_HSE_Disable>:
{
 8007442:	b480      	push	{r7}
 8007444:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007454:	6013      	str	r3, [r2, #0]
}
 8007456:	bf00      	nop
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <LL_RCC_HSE_IsReady>:
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007472:	d101      	bne.n	8007478 <LL_RCC_HSE_IsReady+0x18>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <LL_RCC_HSE_IsReady+0x1a>
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <LL_RCC_HSI_Enable>:
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007496:	6013      	str	r3, [r2, #0]
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <LL_RCC_HSI_Disable>:
{
 80074a2:	b480      	push	{r7}
 80074a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80074a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b4:	6013      	str	r3, [r2, #0]
}
 80074b6:	bf00      	nop
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LL_RCC_HSI_IsReady>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80074c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d2:	d101      	bne.n	80074d8 <LL_RCC_HSI_IsReady+0x18>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <LL_RCC_HSI_IsReady+0x1a>
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80074ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	061b      	lsls	r3, r3, #24
 80074fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074fe:	4313      	orrs	r3, r2
 8007500:	604b      	str	r3, [r1, #4]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <LL_RCC_HSI48_Enable>:
{
 800750e:	b480      	push	{r7}
 8007510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800751a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007526:	bf00      	nop
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <LL_RCC_HSI48_Disable>:
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800753c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007548:	bf00      	nop
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <LL_RCC_HSI48_IsReady>:
{
 8007552:	b480      	push	{r7}
 8007554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800755a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b02      	cmp	r3, #2
 8007564:	d101      	bne.n	800756a <LL_RCC_HSI48_IsReady+0x18>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <LL_RCC_HSI48_IsReady+0x1a>
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <LL_RCC_LSE_Enable>:
{
 8007576:	b480      	push	{r7}
 8007578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800757a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800758e:	bf00      	nop
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <LL_RCC_LSE_Disable>:
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800759c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075a8:	f023 0301 	bic.w	r3, r3, #1
 80075ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80075b0:	bf00      	nop
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <LL_RCC_LSE_EnableBypass>:
{
 80075ba:	b480      	push	{r7}
 80075bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80075be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075ca:	f043 0304 	orr.w	r3, r3, #4
 80075ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80075d2:	bf00      	nop
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <LL_RCC_LSE_DisableBypass>:
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80075e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075ec:	f023 0304 	bic.w	r3, r3, #4
 80075f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80075f4:	bf00      	nop
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80075fe:	b480      	push	{r7}
 8007600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b02      	cmp	r3, #2
 8007610:	d101      	bne.n	8007616 <LL_RCC_LSE_IsReady+0x18>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <LL_RCC_LSE_IsReady+0x1a>
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8007622:	b480      	push	{r7}
 8007624:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800762e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800763a:	bf00      	nop
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8007644:	b480      	push	{r7}
 8007646:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800765c:	bf00      	nop
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8007666:	b480      	push	{r7}
 8007668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800766a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800766e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b02      	cmp	r3, #2
 8007678:	d101      	bne.n	800767e <LL_RCC_LSI1_IsReady+0x18>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <LL_RCC_LSI1_IsReady+0x1a>
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800768a:	b480      	push	{r7}
 800768c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800768e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800769a:	f043 0304 	orr.w	r3, r3, #4
 800769e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80076a2:	bf00      	nop
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80076b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076bc:	f023 0304 	bic.w	r3, r3, #4
 80076c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80076c4:	bf00      	nop
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80076ce:	b480      	push	{r7}
 80076d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80076d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d101      	bne.n	80076e6 <LL_RCC_LSI2_IsReady+0x18>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <LL_RCC_LSI2_IsReady+0x1a>
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80076fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007702:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	6013      	str	r3, [r2, #0]
}
 8007734:	bf00      	nop
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800773e:	b480      	push	{r7}
 8007740:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	6013      	str	r3, [r2, #0]
}
 8007752:	bf00      	nop
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d101      	bne.n	8007772 <LL_RCC_MSI_IsReady+0x16>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <LL_RCC_MSI_IsReady+0x18>
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4313      	orrs	r3, r2
 8007798:	600b      	str	r3, [r1, #0]
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80077ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077b6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2bb0      	cmp	r3, #176	; 0xb0
 80077bc:	d901      	bls.n	80077c2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80077be:	23b0      	movs	r3, #176	; 0xb0
 80077c0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80077c2:	687b      	ldr	r3, [r7, #4]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80077d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077ea:	4313      	orrs	r3, r2
 80077ec:	604b      	str	r3, [r1, #4]
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f023 0203 	bic.w	r2, r3, #3
 800780c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4313      	orrs	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007822:	b480      	push	{r7}
 8007824:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 030c 	and.w	r3, r3, #12
}
 8007830:	4618      	mov	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800784c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800786a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800789a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800789e:	f023 020f 	bic.w	r2, r3, #15
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	091b      	lsrs	r3, r3, #4
 80078a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078aa:	4313      	orrs	r3, r2
 80078ac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80078c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	608b      	str	r3, [r1, #8]
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80078ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80078f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	608b      	str	r3, [r1, #8]
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800791a:	4618      	mov	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800792c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007936:	4618      	mov	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800794e:	4618      	mov	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800795c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007966:	4618      	mov	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800797e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007982:	6013      	str	r3, [r2, #0]
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800798e:	b480      	push	{r7}
 8007990:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800799c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079a0:	6013      	str	r3, [r2, #0]
}
 80079a2:	bf00      	nop
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80079b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079be:	d101      	bne.n	80079c4 <LL_RCC_PLL_IsReady+0x18>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e000      	b.n	80079c6 <LL_RCC_PLL_IsReady+0x1a>
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80079d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80079ea:	b480      	push	{r7}
 80079ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80079ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007a02:	b480      	push	{r7}
 8007a04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f003 0303 	and.w	r3, r3, #3
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007a32:	b480      	push	{r7}
 8007a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a44:	d101      	bne.n	8007a4a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007a56:	b480      	push	{r7}
 8007a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a6a:	d101      	bne.n	8007a70 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e000      	b.n	8007a72 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a90:	d101      	bne.n	8007a96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab4:	d101      	bne.n	8007aba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ad4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ad8:	d101      	bne.n	8007ade <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
	...

08007aec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b08d      	sub	sp, #52	; 0x34
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e363      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 808d 	beq.w	8007c26 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b0c:	f7ff fe89 	bl	8007822 <LL_RCC_GetSysClkSource>
 8007b10:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b12:	f7ff ff82 	bl	8007a1a <LL_RCC_PLL_GetMainSource>
 8007b16:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_RCC_OscConfig+0x3e>
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	2b0c      	cmp	r3, #12
 8007b22:	d147      	bne.n	8007bb4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d144      	bne.n	8007bb4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e347      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007b3a:	f7ff fe34 	bl	80077a6 <LL_RCC_MSI_GetRange>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	429c      	cmp	r4, r3
 8007b42:	d914      	bls.n	8007b6e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 fd2f 	bl	80085ac <RCC_SetFlashLatencyFromMSIRange>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e336      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff fe0e 	bl	800777e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff fe32 	bl	80077d0 <LL_RCC_MSI_SetCalibTrimming>
 8007b6c:	e013      	b.n	8007b96 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fe03 	bl	800777e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff fe27 	bl	80077d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fd10 	bl	80085ac <RCC_SetFlashLatencyFromMSIRange>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e317      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007b96:	f000 fcc9 	bl	800852c <HAL_RCC_GetHCLKFreq>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4aa4      	ldr	r2, [pc, #656]	; (8007e30 <HAL_RCC_OscConfig+0x344>)
 8007b9e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ba0:	4ba4      	ldr	r3, [pc, #656]	; (8007e34 <HAL_RCC_OscConfig+0x348>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fa9f 	bl	80050e8 <HAL_InitTick>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d039      	beq.n	8007c24 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e308      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01e      	beq.n	8007bfa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007bbc:	f7ff fdb0 	bl	8007720 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007bc0:	f7fd fae0 	bl	8005184 <HAL_GetTick>
 8007bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007bc8:	f7fd fadc 	bl	8005184 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e2f5      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007bda:	f7ff fdbf 	bl	800775c <LL_RCC_MSI_IsReady>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0f1      	beq.n	8007bc8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff fdc8 	bl	800777e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff fdec 	bl	80077d0 <LL_RCC_MSI_SetCalibTrimming>
 8007bf8:	e015      	b.n	8007c26 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007bfa:	f7ff fda0 	bl	800773e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007bfe:	f7fd fac1 	bl	8005184 <HAL_GetTick>
 8007c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c06:	f7fd fabd 	bl	8005184 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e2d6      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007c18:	f7ff fda0 	bl	800775c <LL_RCC_MSI_IsReady>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1f1      	bne.n	8007c06 <HAL_RCC_OscConfig+0x11a>
 8007c22:	e000      	b.n	8007c26 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007c24:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d047      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c32:	f7ff fdf6 	bl	8007822 <LL_RCC_GetSysClkSource>
 8007c36:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c38:	f7ff feef 	bl	8007a1a <LL_RCC_PLL_GetMainSource>
 8007c3c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d005      	beq.n	8007c50 <HAL_RCC_OscConfig+0x164>
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	2b0c      	cmp	r3, #12
 8007c48:	d108      	bne.n	8007c5c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d105      	bne.n	8007c5c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d134      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e2b4      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c64:	d102      	bne.n	8007c6c <HAL_RCC_OscConfig+0x180>
 8007c66:	f7ff fbdd 	bl	8007424 <LL_RCC_HSE_Enable>
 8007c6a:	e001      	b.n	8007c70 <HAL_RCC_OscConfig+0x184>
 8007c6c:	f7ff fbe9 	bl	8007442 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d012      	beq.n	8007c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c78:	f7fd fa84 	bl	8005184 <HAL_GetTick>
 8007c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c80:	f7fd fa80 	bl	8005184 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b64      	cmp	r3, #100	; 0x64
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e299      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007c92:	f7ff fbe5 	bl	8007460 <LL_RCC_HSE_IsReady>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f1      	beq.n	8007c80 <HAL_RCC_OscConfig+0x194>
 8007c9c:	e011      	b.n	8007cc2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9e:	f7fd fa71 	bl	8005184 <HAL_GetTick>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca6:	f7fd fa6d 	bl	8005184 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b64      	cmp	r3, #100	; 0x64
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e286      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007cb8:	f7ff fbd2 	bl	8007460 <LL_RCC_HSE_IsReady>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f1      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d04c      	beq.n	8007d68 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cce:	f7ff fda8 	bl	8007822 <LL_RCC_GetSysClkSource>
 8007cd2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cd4:	f7ff fea1 	bl	8007a1a <LL_RCC_PLL_GetMainSource>
 8007cd8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d005      	beq.n	8007cec <HAL_RCC_OscConfig+0x200>
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	2b0c      	cmp	r3, #12
 8007ce4:	d10e      	bne.n	8007d04 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d10b      	bne.n	8007d04 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e266      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fbf1 	bl	80074e4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007d02:	e031      	b.n	8007d68 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d019      	beq.n	8007d40 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d0c:	f7ff fbba 	bl	8007484 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d10:	f7fd fa38 	bl	8005184 <HAL_GetTick>
 8007d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d18:	f7fd fa34 	bl	8005184 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e24d      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007d2a:	f7ff fbc9 	bl	80074c0 <LL_RCC_HSI_IsReady>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f1      	beq.n	8007d18 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff fbd3 	bl	80074e4 <LL_RCC_HSI_SetCalibTrimming>
 8007d3e:	e013      	b.n	8007d68 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d40:	f7ff fbaf 	bl	80074a2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7fd fa1e 	bl	8005184 <HAL_GetTick>
 8007d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d4c:	f7fd fa1a 	bl	8005184 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e233      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007d5e:	f7ff fbaf 	bl	80074c0 <LL_RCC_HSI_IsReady>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f1      	bne.n	8007d4c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80a3 	beq.w	8007ec8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d076      	beq.n	8007e78 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d046      	beq.n	8007e24 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007d96:	f7ff fc66 	bl	8007666 <LL_RCC_LSI1_IsReady>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007da0:	f7ff fc3f 	bl	8007622 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007da4:	f7fd f9ee 	bl	8005184 <HAL_GetTick>
 8007da8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007dac:	f7fd f9ea 	bl	8005184 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e203      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007dbe:	f7ff fc52 	bl	8007666 <LL_RCC_LSI1_IsReady>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f1      	beq.n	8007dac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007dc8:	f7ff fc5f 	bl	800768a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fd f9da 	bl	8005184 <HAL_GetTick>
 8007dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007dd4:	f7fd f9d6 	bl	8005184 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e1ef      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007de6:	f7ff fc72 	bl	80076ce <LL_RCC_LSI2_IsReady>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0f1      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff fc7c 	bl	80076f2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007dfa:	f7ff fc23 	bl	8007644 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfe:	f7fd f9c1 	bl	8005184 <HAL_GetTick>
 8007e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007e06:	f7fd f9bd 	bl	8005184 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e1d6      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007e18:	f7ff fc25 	bl	8007666 <LL_RCC_LSI1_IsReady>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f1      	bne.n	8007e06 <HAL_RCC_OscConfig+0x31a>
 8007e22:	e051      	b.n	8007ec8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007e24:	f7ff fbfd 	bl	8007622 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e28:	f7fd f9ac 	bl	8005184 <HAL_GetTick>
 8007e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007e2e:	e00c      	b.n	8007e4a <HAL_RCC_OscConfig+0x35e>
 8007e30:	20000018 	.word	0x20000018
 8007e34:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007e38:	f7fd f9a4 	bl	8005184 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e1bd      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007e4a:	f7ff fc0c 	bl	8007666 <LL_RCC_LSI1_IsReady>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0f1      	beq.n	8007e38 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007e54:	f7ff fc2a 	bl	80076ac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007e5a:	f7fd f993 	bl	8005184 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e1ac      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007e6c:	f7ff fc2f 	bl	80076ce <LL_RCC_LSI2_IsReady>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f1      	bne.n	8007e5a <HAL_RCC_OscConfig+0x36e>
 8007e76:	e027      	b.n	8007ec8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007e78:	f7ff fc18 	bl	80076ac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e7c:	f7fd f982 	bl	8005184 <HAL_GetTick>
 8007e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007e84:	f7fd f97e 	bl	8005184 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e197      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007e96:	f7ff fc1a 	bl	80076ce <LL_RCC_LSI2_IsReady>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1f1      	bne.n	8007e84 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007ea0:	f7ff fbd0 	bl	8007644 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea4:	f7fd f96e 	bl	8005184 <HAL_GetTick>
 8007ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007eac:	f7fd f96a 	bl	8005184 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e183      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007ebe:	f7ff fbd2 	bl	8007666 <LL_RCC_LSI1_IsReady>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1f1      	bne.n	8007eac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d05b      	beq.n	8007f8c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ed4:	4ba7      	ldr	r3, [pc, #668]	; (8008174 <HAL_RCC_OscConfig+0x688>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d114      	bne.n	8007f0a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007ee0:	f7ff fa70 	bl	80073c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ee4:	f7fd f94e 	bl	8005184 <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eec:	f7fd f94a 	bl	8005184 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e163      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007efe:	4b9d      	ldr	r3, [pc, #628]	; (8008174 <HAL_RCC_OscConfig+0x688>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d102      	bne.n	8007f18 <HAL_RCC_OscConfig+0x42c>
 8007f12:	f7ff fb30 	bl	8007576 <LL_RCC_LSE_Enable>
 8007f16:	e00c      	b.n	8007f32 <HAL_RCC_OscConfig+0x446>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b05      	cmp	r3, #5
 8007f1e:	d104      	bne.n	8007f2a <HAL_RCC_OscConfig+0x43e>
 8007f20:	f7ff fb4b 	bl	80075ba <LL_RCC_LSE_EnableBypass>
 8007f24:	f7ff fb27 	bl	8007576 <LL_RCC_LSE_Enable>
 8007f28:	e003      	b.n	8007f32 <HAL_RCC_OscConfig+0x446>
 8007f2a:	f7ff fb35 	bl	8007598 <LL_RCC_LSE_Disable>
 8007f2e:	f7ff fb55 	bl	80075dc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d014      	beq.n	8007f64 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f3a:	f7fd f923 	bl	8005184 <HAL_GetTick>
 8007f3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007f40:	e00a      	b.n	8007f58 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f42:	f7fd f91f 	bl	8005184 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d901      	bls.n	8007f58 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e136      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007f58:	f7ff fb51 	bl	80075fe <LL_RCC_LSE_IsReady>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0ef      	beq.n	8007f42 <HAL_RCC_OscConfig+0x456>
 8007f62:	e013      	b.n	8007f8c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f64:	f7fd f90e 	bl	8005184 <HAL_GetTick>
 8007f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007f6a:	e00a      	b.n	8007f82 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f6c:	f7fd f90a 	bl	8005184 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e121      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007f82:	f7ff fb3c 	bl	80075fe <LL_RCC_LSE_IsReady>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1ef      	bne.n	8007f6c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d02c      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d014      	beq.n	8007fca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fa0:	f7ff fab5 	bl	800750e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa4:	f7fd f8ee 	bl	8005184 <HAL_GetTick>
 8007fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fac:	f7fd f8ea 	bl	8005184 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e103      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007fbe:	f7ff fac8 	bl	8007552 <LL_RCC_HSI48_IsReady>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0f1      	beq.n	8007fac <HAL_RCC_OscConfig+0x4c0>
 8007fc8:	e013      	b.n	8007ff2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fca:	f7ff fab1 	bl	8007530 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fce:	f7fd f8d9 	bl	8005184 <HAL_GetTick>
 8007fd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fd6:	f7fd f8d5 	bl	8005184 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e0ee      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007fe8:	f7ff fab3 	bl	8007552 <LL_RCC_HSI48_IsReady>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f1      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80e4 	beq.w	80081c4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ffc:	f7ff fc11 	bl	8007822 <LL_RCC_GetSysClkSource>
 8008000:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	2b02      	cmp	r3, #2
 8008010:	f040 80b4 	bne.w	800817c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 0203 	and.w	r2, r3, #3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	429a      	cmp	r2, r3
 8008020:	d123      	bne.n	800806a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800802c:	429a      	cmp	r2, r3
 800802e:	d11c      	bne.n	800806a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800803c:	429a      	cmp	r2, r3
 800803e:	d114      	bne.n	800806a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800804a:	429a      	cmp	r2, r3
 800804c:	d10d      	bne.n	800806a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008058:	429a      	cmp	r2, r3
 800805a:	d106      	bne.n	800806a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008066:	429a      	cmp	r2, r3
 8008068:	d05d      	beq.n	8008126 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b0c      	cmp	r3, #12
 800806e:	d058      	beq.n	8008122 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e0a1      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008082:	f7ff fc84 	bl	800798e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008086:	f7fd f87d 	bl	8005184 <HAL_GetTick>
 800808a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800808e:	f7fd f879 	bl	8005184 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e092      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1ef      	bne.n	800808e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	4b30      	ldr	r3, [pc, #192]	; (8008178 <HAL_RCC_OscConfig+0x68c>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080c0:	4311      	orrs	r1, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080c6:	0212      	lsls	r2, r2, #8
 80080c8:	4311      	orrs	r1, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80080ce:	4311      	orrs	r1, r2
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80080d4:	4311      	orrs	r1, r2
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80080da:	430a      	orrs	r2, r1
 80080dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80080e4:	f7ff fc44 	bl	8007970 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80080f8:	f7fd f844 	bl	8005184 <HAL_GetTick>
 80080fc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080fe:	e008      	b.n	8008112 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008100:	f7fd f840 	bl	8005184 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e059      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0ef      	beq.n	8008100 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008120:	e050      	b.n	80081c4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e04f      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d147      	bne.n	80081c4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008134:	f7ff fc1c 	bl	8007970 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008148:	f7fd f81c 	bl	8005184 <HAL_GetTick>
 800814c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008150:	f7fd f818 	bl	8005184 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e031      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0ef      	beq.n	8008150 <HAL_RCC_OscConfig+0x664>
 8008170:	e028      	b.n	80081c4 <HAL_RCC_OscConfig+0x6d8>
 8008172:	bf00      	nop
 8008174:	58000400 	.word	0x58000400
 8008178:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b0c      	cmp	r3, #12
 8008180:	d01e      	beq.n	80081c0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008182:	f7ff fc04 	bl	800798e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008186:	f7fc fffd 	bl	8005184 <HAL_GetTick>
 800818a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800818c:	e008      	b.n	80081a0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800818e:	f7fc fff9 	bl	8005184 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d901      	bls.n	80081a0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e012      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1ef      	bne.n	800818e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80081ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <HAL_RCC_OscConfig+0x6e4>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	60cb      	str	r3, [r1, #12]
 80081be:	e001      	b.n	80081c4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3734      	adds	r7, #52	; 0x34
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd90      	pop	{r4, r7, pc}
 80081ce:	bf00      	nop
 80081d0:	eefefffc 	.word	0xeefefffc

080081d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e12d      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081e8:	4b98      	ldr	r3, [pc, #608]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d91b      	bls.n	800822e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081f6:	4b95      	ldr	r3, [pc, #596]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f023 0207 	bic.w	r2, r3, #7
 80081fe:	4993      	ldr	r1, [pc, #588]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	4313      	orrs	r3, r2
 8008204:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008206:	f7fc ffbd 	bl	8005184 <HAL_GetTick>
 800820a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800820c:	e008      	b.n	8008220 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800820e:	f7fc ffb9 	bl	8005184 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e111      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008220:	4b8a      	ldr	r3, [pc, #552]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d1ef      	bne.n	800820e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d016      	beq.n	8008268 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fafb 	bl	800783a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008244:	f7fc ff9e 	bl	8005184 <HAL_GetTick>
 8008248:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800824c:	f7fc ff9a 	bl	8005184 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e0f2      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800825e:	f7ff fbe8 	bl	8007a32 <LL_RCC_IsActiveFlag_HPRE>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0f1      	beq.n	800824c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d016      	beq.n	80082a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff faf2 	bl	8007862 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800827e:	f7fc ff81 	bl	8005184 <HAL_GetTick>
 8008282:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008286:	f7fc ff7d 	bl	8005184 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e0d5      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008298:	f7ff fbdd 	bl	8007a56 <LL_RCC_IsActiveFlag_C2HPRE>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f1      	beq.n	8008286 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d016      	beq.n	80082dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff faeb 	bl	800788e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80082b8:	f7fc ff64 	bl	8005184 <HAL_GetTick>
 80082bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80082c0:	f7fc ff60 	bl	8005184 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e0b8      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80082d2:	f7ff fbd3 	bl	8007a7c <LL_RCC_IsActiveFlag_SHDHPRE>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f1      	beq.n	80082c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d016      	beq.n	8008316 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fae5 	bl	80078bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80082f2:	f7fc ff47 	bl	8005184 <HAL_GetTick>
 80082f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80082f8:	e008      	b.n	800830c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80082fa:	f7fc ff43 	bl	8005184 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e09b      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800830c:	f7ff fbc9 	bl	8007aa2 <LL_RCC_IsActiveFlag_PPRE1>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0f1      	beq.n	80082fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d017      	beq.n	8008352 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff fadb 	bl	80078e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800832e:	f7fc ff29 	bl	8005184 <HAL_GetTick>
 8008332:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008334:	e008      	b.n	8008348 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008336:	f7fc ff25 	bl	8005184 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e07d      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008348:	f7ff fbbd 	bl	8007ac6 <LL_RCC_IsActiveFlag_PPRE2>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0f1      	beq.n	8008336 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d043      	beq.n	80083e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d106      	bne.n	8008374 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008366:	f7ff f87b 	bl	8007460 <LL_RCC_HSE_IsReady>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d11e      	bne.n	80083ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e067      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d106      	bne.n	800838a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800837c:	f7ff fb16 	bl	80079ac <LL_RCC_PLL_IsReady>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d113      	bne.n	80083ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e05c      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008392:	f7ff f9e3 	bl	800775c <LL_RCC_MSI_IsReady>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d108      	bne.n	80083ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e051      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80083a0:	f7ff f88e 	bl	80074c0 <LL_RCC_HSI_IsReady>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e04a      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff fa21 	bl	80077fa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b8:	f7fc fee4 	bl	8005184 <HAL_GetTick>
 80083bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083be:	e00a      	b.n	80083d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083c0:	f7fc fee0 	bl	8005184 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e036      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083d6:	f7ff fa24 	bl	8007822 <LL_RCC_GetSysClkSource>
 80083da:	4602      	mov	r2, r0
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d1ec      	bne.n	80083c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083e6:	4b19      	ldr	r3, [pc, #100]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d21b      	bcs.n	800842c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f4:	4b15      	ldr	r3, [pc, #84]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f023 0207 	bic.w	r2, r3, #7
 80083fc:	4913      	ldr	r1, [pc, #76]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	4313      	orrs	r3, r2
 8008402:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008404:	f7fc febe 	bl	8005184 <HAL_GetTick>
 8008408:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800840a:	e008      	b.n	800841e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800840c:	f7fc feba 	bl	8005184 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b02      	cmp	r3, #2
 8008418:	d901      	bls.n	800841e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e012      	b.n	8008444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800841e:	4b0b      	ldr	r3, [pc, #44]	; (800844c <HAL_RCC_ClockConfig+0x278>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d1ef      	bne.n	800840c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800842c:	f000 f87e 	bl	800852c <HAL_RCC_GetHCLKFreq>
 8008430:	4603      	mov	r3, r0
 8008432:	4a07      	ldr	r2, [pc, #28]	; (8008450 <HAL_RCC_ClockConfig+0x27c>)
 8008434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008436:	f7fc feb1 	bl	800519c <HAL_GetTickPrio>
 800843a:	4603      	mov	r3, r0
 800843c:	4618      	mov	r0, r3
 800843e:	f7fc fe53 	bl	80050e8 <HAL_InitTick>
 8008442:	4603      	mov	r3, r0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	58004000 	.word	0x58004000
 8008450:	20000018 	.word	0x20000018

08008454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008454:	b590      	push	{r4, r7, lr}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800845a:	f7ff f9e2 	bl	8007822 <LL_RCC_GetSysClkSource>
 800845e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008466:	f7ff f99e 	bl	80077a6 <LL_RCC_MSI_GetRange>
 800846a:	4603      	mov	r3, r0
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	4a2b      	ldr	r2, [pc, #172]	; (8008520 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e04b      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b04      	cmp	r3, #4
 8008480:	d102      	bne.n	8008488 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008482:	4b28      	ldr	r3, [pc, #160]	; (8008524 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	e045      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b08      	cmp	r3, #8
 800848c:	d10a      	bne.n	80084a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800848e:	f7fe ffb7 	bl	8007400 <LL_RCC_HSE_IsEnabledDiv2>
 8008492:	4603      	mov	r3, r0
 8008494:	2b01      	cmp	r3, #1
 8008496:	d102      	bne.n	800849e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008498:	4b22      	ldr	r3, [pc, #136]	; (8008524 <HAL_RCC_GetSysClockFreq+0xd0>)
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e03a      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800849e:	4b22      	ldr	r3, [pc, #136]	; (8008528 <HAL_RCC_GetSysClockFreq+0xd4>)
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	e037      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80084a4:	f7ff fab9 	bl	8007a1a <LL_RCC_PLL_GetMainSource>
 80084a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d003      	beq.n	80084b8 <HAL_RCC_GetSysClockFreq+0x64>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d003      	beq.n	80084be <HAL_RCC_GetSysClockFreq+0x6a>
 80084b6:	e00d      	b.n	80084d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80084ba:	60bb      	str	r3, [r7, #8]
        break;
 80084bc:	e015      	b.n	80084ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80084be:	f7fe ff9f 	bl	8007400 <LL_RCC_HSE_IsEnabledDiv2>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d102      	bne.n	80084ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80084c8:	4b16      	ldr	r3, [pc, #88]	; (8008524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80084ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80084cc:	e00d      	b.n	80084ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80084ce:	4b16      	ldr	r3, [pc, #88]	; (8008528 <HAL_RCC_GetSysClockFreq+0xd4>)
 80084d0:	60bb      	str	r3, [r7, #8]
        break;
 80084d2:	e00a      	b.n	80084ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80084d4:	f7ff f967 	bl	80077a6 <LL_RCC_MSI_GetRange>
 80084d8:	4603      	mov	r3, r0
 80084da:	091b      	lsrs	r3, r3, #4
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	4a0f      	ldr	r2, [pc, #60]	; (8008520 <HAL_RCC_GetSysClockFreq+0xcc>)
 80084e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e6:	60bb      	str	r3, [r7, #8]
        break;
 80084e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80084ea:	f7ff fa71 	bl	80079d0 <LL_RCC_PLL_GetN>
 80084ee:	4602      	mov	r2, r0
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	fb03 f402 	mul.w	r4, r3, r2
 80084f6:	f7ff fa84 	bl	8007a02 <LL_RCC_PLL_GetDivider>
 80084fa:	4603      	mov	r3, r0
 80084fc:	091b      	lsrs	r3, r3, #4
 80084fe:	3301      	adds	r3, #1
 8008500:	fbb4 f4f3 	udiv	r4, r4, r3
 8008504:	f7ff fa71 	bl	80079ea <LL_RCC_PLL_GetR>
 8008508:	4603      	mov	r3, r0
 800850a:	0f5b      	lsrs	r3, r3, #29
 800850c:	3301      	adds	r3, #1
 800850e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008512:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008514:	68fb      	ldr	r3, [r7, #12]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	bd90      	pop	{r4, r7, pc}
 800851e:	bf00      	nop
 8008520:	0800f5e8 	.word	0x0800f5e8
 8008524:	00f42400 	.word	0x00f42400
 8008528:	01e84800 	.word	0x01e84800

0800852c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800852c:	b598      	push	{r3, r4, r7, lr}
 800852e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008530:	f7ff ff90 	bl	8008454 <HAL_RCC_GetSysClockFreq>
 8008534:	4604      	mov	r4, r0
 8008536:	f7ff f9e9 	bl	800790c <LL_RCC_GetAHBPrescaler>
 800853a:	4603      	mov	r3, r0
 800853c:	091b      	lsrs	r3, r3, #4
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	4a03      	ldr	r2, [pc, #12]	; (8008550 <HAL_RCC_GetHCLKFreq+0x24>)
 8008544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008548:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800854c:	4618      	mov	r0, r3
 800854e:	bd98      	pop	{r3, r4, r7, pc}
 8008550:	0800f588 	.word	0x0800f588

08008554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008554:	b598      	push	{r3, r4, r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008558:	f7ff ffe8 	bl	800852c <HAL_RCC_GetHCLKFreq>
 800855c:	4604      	mov	r4, r0
 800855e:	f7ff f9ef 	bl	8007940 <LL_RCC_GetAPB1Prescaler>
 8008562:	4603      	mov	r3, r0
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	4a04      	ldr	r2, [pc, #16]	; (800857c <HAL_RCC_GetPCLK1Freq+0x28>)
 800856c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008570:	f003 031f 	and.w	r3, r3, #31
 8008574:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008578:	4618      	mov	r0, r3
 800857a:	bd98      	pop	{r3, r4, r7, pc}
 800857c:	0800f5c8 	.word	0x0800f5c8

08008580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008580:	b598      	push	{r3, r4, r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008584:	f7ff ffd2 	bl	800852c <HAL_RCC_GetHCLKFreq>
 8008588:	4604      	mov	r4, r0
 800858a:	f7ff f9e5 	bl	8007958 <LL_RCC_GetAPB2Prescaler>
 800858e:	4603      	mov	r3, r0
 8008590:	0adb      	lsrs	r3, r3, #11
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	4a04      	ldr	r2, [pc, #16]	; (80085a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	f003 031f 	and.w	r3, r3, #31
 80085a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	bd98      	pop	{r3, r4, r7, pc}
 80085a8:	0800f5c8 	.word	0x0800f5c8

080085ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2bb0      	cmp	r3, #176	; 0xb0
 80085b8:	d903      	bls.n	80085c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80085ba:	4b15      	ldr	r3, [pc, #84]	; (8008610 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e007      	b.n	80085d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	4a11      	ldr	r2, [pc, #68]	; (8008610 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80085cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80085d2:	f7ff f9a7 	bl	8007924 <LL_RCC_GetAHB4Prescaler>
 80085d6:	4603      	mov	r3, r0
 80085d8:	091b      	lsrs	r3, r3, #4
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	4a0d      	ldr	r2, [pc, #52]	; (8008614 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80085e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4a0a      	ldr	r2, [pc, #40]	; (8008618 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80085f0:	fba2 2303 	umull	r2, r3, r2, r3
 80085f4:	0c9c      	lsrs	r4, r3, #18
 80085f6:	f7fe fef5 	bl	80073e4 <HAL_PWREx_GetVoltageRange>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4619      	mov	r1, r3
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 f80c 	bl	800861c <RCC_SetFlashLatency>
 8008604:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	bd90      	pop	{r4, r7, pc}
 800860e:	bf00      	nop
 8008610:	0800f5e8 	.word	0x0800f5e8
 8008614:	0800f588 	.word	0x0800f588
 8008618:	431bde83 	.word	0x431bde83

0800861c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b093      	sub	sp, #76	; 0x4c
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008626:	4b37      	ldr	r3, [pc, #220]	; (8008704 <RCC_SetFlashLatency+0xe8>)
 8008628:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800862c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800862e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008632:	4a35      	ldr	r2, [pc, #212]	; (8008708 <RCC_SetFlashLatency+0xec>)
 8008634:	f107 031c 	add.w	r3, r7, #28
 8008638:	ca07      	ldmia	r2, {r0, r1, r2}
 800863a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800863e:	4b33      	ldr	r3, [pc, #204]	; (800870c <RCC_SetFlashLatency+0xf0>)
 8008640:	f107 040c 	add.w	r4, r7, #12
 8008644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800864a:	2300      	movs	r3, #0
 800864c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008654:	d11a      	bne.n	800868c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008656:	2300      	movs	r3, #0
 8008658:	643b      	str	r3, [r7, #64]	; 0x40
 800865a:	e013      	b.n	8008684 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800865c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	3348      	adds	r3, #72	; 0x48
 8008662:	443b      	add	r3, r7
 8008664:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	429a      	cmp	r2, r3
 800866c:	d807      	bhi.n	800867e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800866e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	3348      	adds	r3, #72	; 0x48
 8008674:	443b      	add	r3, r7
 8008676:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800867c:	e020      	b.n	80086c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800867e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008680:	3301      	adds	r3, #1
 8008682:	643b      	str	r3, [r7, #64]	; 0x40
 8008684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008686:	2b03      	cmp	r3, #3
 8008688:	d9e8      	bls.n	800865c <RCC_SetFlashLatency+0x40>
 800868a:	e019      	b.n	80086c0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008690:	e013      	b.n	80086ba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	3348      	adds	r3, #72	; 0x48
 8008698:	443b      	add	r3, r7
 800869a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d807      	bhi.n	80086b4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80086a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	3348      	adds	r3, #72	; 0x48
 80086aa:	443b      	add	r3, r7
 80086ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80086b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80086b2:	e005      	b.n	80086c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80086b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b6:	3301      	adds	r3, #1
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d9e8      	bls.n	8008692 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80086c0:	4b13      	ldr	r3, [pc, #76]	; (8008710 <RCC_SetFlashLatency+0xf4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f023 0207 	bic.w	r2, r3, #7
 80086c8:	4911      	ldr	r1, [pc, #68]	; (8008710 <RCC_SetFlashLatency+0xf4>)
 80086ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086cc:	4313      	orrs	r3, r2
 80086ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80086d0:	f7fc fd58 	bl	8005184 <HAL_GetTick>
 80086d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80086d6:	e008      	b.n	80086ea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80086d8:	f7fc fd54 	bl	8005184 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e007      	b.n	80086fa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80086ea:	4b09      	ldr	r3, [pc, #36]	; (8008710 <RCC_SetFlashLatency+0xf4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d1ef      	bne.n	80086d8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	374c      	adds	r7, #76	; 0x4c
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd90      	pop	{r4, r7, pc}
 8008702:	bf00      	nop
 8008704:	0800edcc 	.word	0x0800edcc
 8008708:	0800eddc 	.word	0x0800eddc
 800870c:	0800ede8 	.word	0x0800ede8
 8008710:	58004000 	.word	0x58004000

08008714 <LL_RCC_LSE_IsEnabled>:
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800871c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <LL_RCC_LSE_IsEnabled+0x18>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <LL_RCC_LSE_IsEnabled+0x1a>
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <LL_RCC_LSE_IsReady>:
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b02      	cmp	r3, #2
 800874a:	d101      	bne.n	8008750 <LL_RCC_LSE_IsReady+0x18>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <LL_RCC_LSE_IsReady+0x1a>
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_RCC_MSI_EnablePLLMode>:
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8008760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800876a:	f043 0304 	orr.w	r3, r3, #4
 800876e:	6013      	str	r3, [r2, #0]
}
 8008770:	bf00      	nop
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <LL_RCC_SetRFWKPClockSource>:
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800878a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800878e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4313      	orrs	r3, r2
 8008796:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <LL_RCC_SetSMPSClockSource>:
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80087ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	f023 0203 	bic.w	r2, r3, #3
 80087b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4313      	orrs	r3, r2
 80087c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <LL_RCC_SetSMPSPrescaler>:
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80087d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <LL_RCC_SetUSARTClockSource>:
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80087fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008806:	f023 0203 	bic.w	r2, r3, #3
 800880a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4313      	orrs	r3, r2
 8008812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <LL_RCC_SetLPUARTClockSource>:
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800882a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008832:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4313      	orrs	r3, r2
 800883e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <LL_RCC_SetI2CClockSource>:
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	091b      	lsrs	r3, r3, #4
 8008862:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008866:	43db      	mvns	r3, r3
 8008868:	401a      	ands	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008876:	4313      	orrs	r3, r2
 8008878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <LL_RCC_SetLPTIMClockSource>:
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008894:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	0c1b      	lsrs	r3, r3, #16
 800889c:	041b      	lsls	r3, r3, #16
 800889e:	43db      	mvns	r3, r3
 80088a0:	401a      	ands	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	041b      	lsls	r3, r3, #16
 80088a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <LL_RCC_SetSAIClockSource>:
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80088c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <LL_RCC_SetRNGClockSource>:
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80088f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80088fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4313      	orrs	r3, r2
 8008904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <LL_RCC_SetCLK48ClockSource>:
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800891c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008924:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4313      	orrs	r3, r2
 8008930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <LL_RCC_SetUSBClockSource>:
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff ffe3 	bl	8008914 <LL_RCC_SetCLK48ClockSource>
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <LL_RCC_SetADCClockSource>:
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800895e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008966:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800896a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4313      	orrs	r3, r2
 8008972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <LL_RCC_SetRTCClockSource>:
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800898a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800898e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008992:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4313      	orrs	r3, r2
 800899e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <LL_RCC_GetRTCClockSource>:
{
 80089ae:	b480      	push	{r7}
 80089b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80089b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80089be:	4618      	mov	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <LL_RCC_ForceBackupDomainReset>:
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80089cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80089e0:	bf00      	nop
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <LL_RCC_ReleaseBackupDomainReset>:
{
 80089ea:	b480      	push	{r7}
 80089ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80089ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008a02:	bf00      	nop
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <LL_RCC_PLLSAI1_Enable>:
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a1e:	6013      	str	r3, [r2, #0]
}
 8008a20:	bf00      	nop
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <LL_RCC_PLLSAI1_Disable>:
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a3c:	6013      	str	r3, [r2, #0]
}
 8008a3e:	bf00      	nop
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <LL_RCC_PLLSAI1_IsReady>:
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a5a:	d101      	bne.n	8008a60 <LL_RCC_PLLSAI1_IsReady+0x18>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e000      	b.n	8008a62 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008a74:	2300      	movs	r3, #0
 8008a76:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008a78:	2300      	movs	r3, #0
 8008a7a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d034      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a90:	d021      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008a92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a96:	d81b      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a9c:	d01d      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aa2:	d815      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aac:	d110      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008abc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008abe:	e00d      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f94d 	bl	8008d64 <RCCEx_PLLSAI1_ConfigNP>
 8008aca:	4603      	mov	r3, r0
 8008acc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008ace:	e005      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	77fb      	strb	r3, [r7, #31]
        break;
 8008ad4:	e002      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008ad6:	bf00      	nop
 8008ad8:	e000      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008adc:	7ffb      	ldrb	r3, [r7, #31]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fee8 	bl	80088bc <LL_RCC_SetSAIClockSource>
 8008aec:	e001      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aee:	7ffb      	ldrb	r3, [r7, #31]
 8008af0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d046      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008afe:	f7ff ff56 	bl	80089ae <LL_RCC_GetRTCClockSource>
 8008b02:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d03c      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008b0e:	f7fe fc59 	bl	80073c4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff ff30 	bl	8008982 <LL_RCC_SetRTCClockSource>
 8008b22:	e02e      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b2c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008b2e:	f7ff ff4b 	bl	80089c8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008b32:	f7ff ff5a 	bl	80089ea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	4313      	orrs	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008b4e:	f7ff fde1 	bl	8008714 <LL_RCC_LSE_IsEnabled>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d114      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b58:	f7fc fb14 	bl	8005184 <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008b5e:	e00b      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b60:	f7fc fb10 	bl	8005184 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d902      	bls.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	77fb      	strb	r3, [r7, #31]
              break;
 8008b76:	e004      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008b78:	f7ff fdde 	bl	8008738 <LL_RCC_LSE_IsReady>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d1ee      	bne.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008b82:	7ffb      	ldrb	r3, [r7, #31]
 8008b84:	77bb      	strb	r3, [r7, #30]
 8008b86:	e001      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b88:	7ffb      	ldrb	r3, [r7, #31]
 8008b8a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff fe2a 	bl	80087f6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d004      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff fe35 	bl	8008822 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0310 	and.w	r3, r3, #16
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fe5d 	bl	8008888 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fe52 	bl	8008888 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff fe2a 	bl	800884e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff fe1f 	bl	800884e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d022      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff fe8d 	bl	8008940 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c2e:	d107      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c3e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c48:	d10b      	bne.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f8e3 	bl	8008e1a <RCCEx_PLLSAI1_ConfigNQ>
 8008c54:	4603      	mov	r3, r0
 8008c56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c58:	7ffb      	ldrb	r3, [r7, #31]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008c5e:	7ffb      	ldrb	r3, [r7, #31]
 8008c60:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d02b      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c76:	d008      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c80:	d003      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7ff fe2a 	bl	80088e8 <LL_RCC_SetRNGClockSource>
 8008c94:	e00a      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	f7ff fe21 	bl	80088e8 <LL_RCC_SetRNGClockSource>
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff fe34 	bl	8008914 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cc4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d022      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff fe3d 	bl	8008956 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ce4:	d107      	bne.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cf4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cfe:	d10b      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f8e3 	bl	8008ed0 <RCCEx_PLLSAI1_ConfigNR>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008d0e:	7ffb      	ldrb	r3, [r7, #31]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008d14:	7ffb      	ldrb	r3, [r7, #31]
 8008d16:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff fd26 	bl	800877a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fd45 	bl	80087ce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fd2c 	bl	80087a6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008d4e:	7fbb      	ldrb	r3, [r7, #30]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3720      	adds	r7, #32
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8008d5c:	f7ff fcfe 	bl	800875c <LL_RCC_MSI_EnablePLLMode>
}
 8008d60:	bf00      	nop
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008d70:	f7ff fe5b 	bl	8008a2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d74:	f7fc fa06 	bl	8005184 <HAL_GetTick>
 8008d78:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d7a:	e009      	b.n	8008d90 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d7c:	f7fc fa02 	bl	8005184 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d902      	bls.n	8008d90 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8e:	e004      	b.n	8008d9a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d90:	f7ff fe5a 	bl	8008a48 <LL_RCC_PLLSAI1_IsReady>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f0      	bne.n	8008d7c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d137      	bne.n	8008e10 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008db4:	4313      	orrs	r3, r2
 8008db6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008dce:	f7ff fe1d 	bl	8008a0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dd2:	f7fc f9d7 	bl	8005184 <HAL_GetTick>
 8008dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008dd8:	e009      	b.n	8008dee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008dda:	f7fc f9d3 	bl	8005184 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d902      	bls.n	8008dee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	73fb      	strb	r3, [r7, #15]
        break;
 8008dec:	e004      	b.n	8008df8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008dee:	f7ff fe2b 	bl	8008a48 <LL_RCC_PLLSAI1_IsReady>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d1f0      	bne.n	8008dda <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d108      	bne.n	8008e10 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008e26:	f7ff fe00 	bl	8008a2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e2a:	f7fc f9ab 	bl	8005184 <HAL_GetTick>
 8008e2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e30:	e009      	b.n	8008e46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e32:	f7fc f9a7 	bl	8005184 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d902      	bls.n	8008e46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	73fb      	strb	r3, [r7, #15]
      break;
 8008e44:	e004      	b.n	8008e50 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e46:	f7ff fdff 	bl	8008a48 <LL_RCC_PLLSAI1_IsReady>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1f0      	bne.n	8008e32 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d137      	bne.n	8008ec6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e80:	4313      	orrs	r3, r2
 8008e82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008e84:	f7ff fdc2 	bl	8008a0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e88:	f7fc f97c 	bl	8005184 <HAL_GetTick>
 8008e8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e8e:	e009      	b.n	8008ea4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e90:	f7fc f978 	bl	8005184 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d902      	bls.n	8008ea4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8008ea2:	e004      	b.n	8008eae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ea4:	f7ff fdd0 	bl	8008a48 <LL_RCC_PLLSAI1_IsReady>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d1f0      	bne.n	8008e90 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d108      	bne.n	8008ec6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb8:	691a      	ldr	r2, [r3, #16]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008edc:	f7ff fda5 	bl	8008a2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ee0:	f7fc f950 	bl	8005184 <HAL_GetTick>
 8008ee4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ee6:	e009      	b.n	8008efc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ee8:	f7fc f94c 	bl	8005184 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d902      	bls.n	8008efc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8008efa:	e004      	b.n	8008f06 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008efc:	f7ff fda4 	bl	8008a48 <LL_RCC_PLLSAI1_IsReady>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1f0      	bne.n	8008ee8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d137      	bne.n	8008f7c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f20:	4313      	orrs	r3, r2
 8008f22:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f36:	4313      	orrs	r3, r2
 8008f38:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008f3a:	f7ff fd67 	bl	8008a0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f3e:	f7fc f921 	bl	8005184 <HAL_GetTick>
 8008f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008f44:	e009      	b.n	8008f5a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f46:	f7fc f91d 	bl	8005184 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d902      	bls.n	8008f5a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	73fb      	strb	r3, [r7, #15]
        break;
 8008f58:	e004      	b.n	8008f64 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008f5a:	f7ff fd75 	bl	8008a48 <LL_RCC_PLLSAI1_IsReady>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d1f0      	bne.n	8008f46 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d108      	bne.n	8008f7c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e049      	b.n	800902c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d106      	bne.n	8008fb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7fb fe65 	bl	8004c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	f000 f835 	bl	8009034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a2a      	ldr	r2, [pc, #168]	; (80090f0 <TIM_Base_SetConfig+0xbc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d003      	beq.n	8009054 <TIM_Base_SetConfig+0x20>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009052:	d108      	bne.n	8009066 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a21      	ldr	r2, [pc, #132]	; (80090f0 <TIM_Base_SetConfig+0xbc>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d00b      	beq.n	8009086 <TIM_Base_SetConfig+0x52>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009074:	d007      	beq.n	8009086 <TIM_Base_SetConfig+0x52>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a1e      	ldr	r2, [pc, #120]	; (80090f4 <TIM_Base_SetConfig+0xc0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d003      	beq.n	8009086 <TIM_Base_SetConfig+0x52>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a1d      	ldr	r2, [pc, #116]	; (80090f8 <TIM_Base_SetConfig+0xc4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d108      	bne.n	8009098 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a0c      	ldr	r2, [pc, #48]	; (80090f0 <TIM_Base_SetConfig+0xbc>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d007      	beq.n	80090d4 <TIM_Base_SetConfig+0xa0>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <TIM_Base_SetConfig+0xc0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d003      	beq.n	80090d4 <TIM_Base_SetConfig+0xa0>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a0a      	ldr	r2, [pc, #40]	; (80090f8 <TIM_Base_SetConfig+0xc4>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d103      	bne.n	80090dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	615a      	str	r2, [r3, #20]
}
 80090e2:	bf00      	nop
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	40012c00 	.word	0x40012c00
 80090f4:	40014400 	.word	0x40014400
 80090f8:	40014800 	.word	0x40014800

080090fc <LL_RCC_GetUSARTClockSource>:
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009108:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4013      	ands	r3, r2
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <LL_RCC_GetLPUARTClockSource>:
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009128:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4013      	ands	r3, r2
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e042      	b.n	80091d4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009154:	2b00      	cmp	r3, #0
 8009156:	d106      	bne.n	8009166 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7fb fce1 	bl	8004b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2224      	movs	r2, #36	; 0x24
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0201 	bic.w	r2, r2, #1
 800917c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fc54 	bl	8009a2c <UART_SetConfig>
 8009184:	4603      	mov	r3, r0
 8009186:	2b01      	cmp	r3, #1
 8009188:	d101      	bne.n	800918e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e022      	b.n	80091d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fe70 	bl	8009e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fef7 	bl	8009fc0 <UART_CheckIdleState>
 80091d2:	4603      	mov	r3, r0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4613      	mov	r3, r2
 80091ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d17b      	bne.n	80092ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <HAL_UART_Transmit+0x26>
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e074      	b.n	80092f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2221      	movs	r2, #33	; 0x21
 8009212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009216:	f7fb ffb5 	bl	8005184 <HAL_GetTick>
 800921a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	88fa      	ldrh	r2, [r7, #6]
 8009220:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	88fa      	ldrh	r2, [r7, #6]
 8009228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009234:	d108      	bne.n	8009248 <HAL_UART_Transmit+0x6c>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d104      	bne.n	8009248 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	61bb      	str	r3, [r7, #24]
 8009246:	e003      	b.n	8009250 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800924c:	2300      	movs	r3, #0
 800924e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009250:	e030      	b.n	80092b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2200      	movs	r2, #0
 800925a:	2180      	movs	r1, #128	; 0x80
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 ff59 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d005      	beq.n	8009274 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e03d      	b.n	80092f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009288:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	3302      	adds	r3, #2
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	e007      	b.n	80092a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	781a      	ldrb	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	3301      	adds	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1c8      	bne.n	8009252 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2200      	movs	r2, #0
 80092c8:	2140      	movs	r1, #64	; 0x40
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 ff22 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d005      	beq.n	80092e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2220      	movs	r2, #32
 80092da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e006      	b.n	80092f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	e000      	b.n	80092f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092ee:	2302      	movs	r3, #2
  }
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3720      	adds	r7, #32
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08a      	sub	sp, #40	; 0x28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800930c:	2b20      	cmp	r3, #32
 800930e:	d137      	bne.n	8009380 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <HAL_UART_Receive_DMA+0x24>
 8009316:	88fb      	ldrh	r3, [r7, #6]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e030      	b.n	8009382 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a18      	ldr	r2, [pc, #96]	; (800938c <HAL_UART_Receive_DMA+0x94>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d01f      	beq.n	8009370 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d018      	beq.n	8009370 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	613b      	str	r3, [r7, #16]
   return(result);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009352:	627b      	str	r3, [r7, #36]	; 0x24
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	623b      	str	r3, [r7, #32]
 800935e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	69f9      	ldr	r1, [r7, #28]
 8009362:	6a3a      	ldr	r2, [r7, #32]
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	61bb      	str	r3, [r7, #24]
   return(result);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e6      	bne.n	800933e <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009370:	88fb      	ldrh	r3, [r7, #6]
 8009372:	461a      	mov	r2, r3
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 ff34 	bl	800a1e4 <UART_Start_Receive_DMA>
 800937c:	4603      	mov	r3, r0
 800937e:	e000      	b.n	8009382 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009380:	2302      	movs	r3, #2
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	3728      	adds	r7, #40	; 0x28
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	40008000 	.word	0x40008000

08009390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b0ba      	sub	sp, #232	; 0xe8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80093ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80093be:	4013      	ands	r3, r2
 80093c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80093c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11b      	bne.n	8009404 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d015      	beq.n	8009404 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d105      	bne.n	80093f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 82e3 	beq.w	80099c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	4798      	blx	r3
      }
      return;
 8009402:	e2dd      	b.n	80099c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 8123 	beq.w	8009654 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800940e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009412:	4b8d      	ldr	r3, [pc, #564]	; (8009648 <HAL_UART_IRQHandler+0x2b8>)
 8009414:	4013      	ands	r3, r2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800941a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800941e:	4b8b      	ldr	r3, [pc, #556]	; (800964c <HAL_UART_IRQHandler+0x2bc>)
 8009420:	4013      	ands	r3, r2
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 8116 	beq.w	8009654 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d011      	beq.n	8009458 <HAL_UART_IRQHandler+0xc8>
 8009434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2201      	movs	r2, #1
 8009446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944e:	f043 0201 	orr.w	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d011      	beq.n	8009488 <HAL_UART_IRQHandler+0xf8>
 8009464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2202      	movs	r2, #2
 8009476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947e:	f043 0204 	orr.w	r2, r3, #4
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d011      	beq.n	80094b8 <HAL_UART_IRQHandler+0x128>
 8009494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2204      	movs	r2, #4
 80094a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ae:	f043 0202 	orr.w	r2, r3, #2
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094bc:	f003 0308 	and.w	r3, r3, #8
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d017      	beq.n	80094f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d105      	bne.n	80094dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80094d4:	4b5c      	ldr	r3, [pc, #368]	; (8009648 <HAL_UART_IRQHandler+0x2b8>)
 80094d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2208      	movs	r2, #8
 80094e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ea:	f043 0208 	orr.w	r2, r3, #8
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d012      	beq.n	8009526 <HAL_UART_IRQHandler+0x196>
 8009500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00c      	beq.n	8009526 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800951c:	f043 0220 	orr.w	r2, r3, #32
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8249 	beq.w	80099c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d013      	beq.n	8009566 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800953e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	d105      	bne.n	8009556 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800954a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800954e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d007      	beq.n	8009566 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800956c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957a:	2b40      	cmp	r3, #64	; 0x40
 800957c:	d005      	beq.n	800958a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800957e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009582:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009586:	2b00      	cmp	r3, #0
 8009588:	d054      	beq.n	8009634 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 ff11 	bl	800a3b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d146      	bne.n	800962c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1d9      	bne.n	800959e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d017      	beq.n	8009624 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095fa:	4a15      	ldr	r2, [pc, #84]	; (8009650 <HAL_UART_IRQHandler+0x2c0>)
 80095fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009604:	4618      	mov	r0, r3
 8009606:	f7fd fa57 	bl	8006ab8 <HAL_DMA_Abort_IT>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d019      	beq.n	8009644 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800961e:	4610      	mov	r0, r2
 8009620:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009622:	e00f      	b.n	8009644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f9eb 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800962a:	e00b      	b.n	8009644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9e7 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009632:	e007      	b.n	8009644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f9e3 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009642:	e1bf      	b.n	80099c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009644:	bf00      	nop
    return;
 8009646:	e1bd      	b.n	80099c4 <HAL_UART_IRQHandler+0x634>
 8009648:	10000001 	.word	0x10000001
 800964c:	04000120 	.word	0x04000120
 8009650:	0800a669 	.word	0x0800a669

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009658:	2b01      	cmp	r3, #1
 800965a:	f040 8153 	bne.w	8009904 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	f003 0310 	and.w	r3, r3, #16
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 814c 	beq.w	8009904 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800966c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 8145 	beq.w	8009904 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2210      	movs	r2, #16
 8009680:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968c:	2b40      	cmp	r3, #64	; 0x40
 800968e:	f040 80bb 	bne.w	8009808 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 818f 	beq.w	80099c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096b4:	429a      	cmp	r2, r3
 80096b6:	f080 8187 	bcs.w	80099c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f040 8087 	bne.w	80097e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009706:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800970e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800971a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1da      	bne.n	80096d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3308      	adds	r3, #8
 8009742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009746:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800974a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800974e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e1      	bne.n	8009722 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800976e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3308      	adds	r3, #8
 800977e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009784:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e3      	bne.n	800975e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2220      	movs	r2, #32
 800979a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b4:	f023 0310 	bic.w	r3, r3, #16
 80097b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80097c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e4      	bne.n	80097a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fd f90a 	bl	80069fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2202      	movs	r2, #2
 80097ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f907 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009806:	e0df      	b.n	80099c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009814:	b29b      	uxth	r3, r3
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009822:	b29b      	uxth	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80d1 	beq.w	80099cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800982a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 80cc 	beq.w	80099cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	461a      	mov	r2, r3
 8009852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009856:	647b      	str	r3, [r7, #68]	; 0x44
 8009858:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800985c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e4      	bne.n	8009834 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	623b      	str	r3, [r7, #32]
   return(result);
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009880:	f023 0301 	bic.w	r3, r3, #1
 8009884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3308      	adds	r3, #8
 800988e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009892:	633a      	str	r2, [r7, #48]	; 0x30
 8009894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e1      	bne.n	800986a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2220      	movs	r2, #32
 80098aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098dc:	61fb      	str	r3, [r7, #28]
 80098de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	69b9      	ldr	r1, [r7, #24]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	617b      	str	r3, [r7, #20]
   return(result);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e4      	bne.n	80098ba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f889 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009902:	e063      	b.n	80099cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00e      	beq.n	800992e <HAL_UART_IRQHandler+0x59e>
 8009910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d008      	beq.n	800992e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fedf 	bl	800a6ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800992c:	e051      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800992e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009936:	2b00      	cmp	r3, #0
 8009938:	d014      	beq.n	8009964 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800993a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800993e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009942:	2b00      	cmp	r3, #0
 8009944:	d105      	bne.n	8009952 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800994a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009956:	2b00      	cmp	r3, #0
 8009958:	d03a      	beq.n	80099d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
    }
    return;
 8009962:	e035      	b.n	80099d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d009      	beq.n	8009984 <HAL_UART_IRQHandler+0x5f4>
 8009970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fe89 	bl	800a694 <UART_EndTransmit_IT>
    return;
 8009982:	e026      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <HAL_UART_IRQHandler+0x614>
 8009990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 feb8 	bl	800a712 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099a2:	e016      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80099a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d010      	beq.n	80099d2 <HAL_UART_IRQHandler+0x642>
 80099b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	da0c      	bge.n	80099d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fea0 	bl	800a6fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099be:	e008      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
      return;
 80099c0:	bf00      	nop
 80099c2:	e006      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
    return;
 80099c4:	bf00      	nop
 80099c6:	e004      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
      return;
 80099c8:	bf00      	nop
 80099ca:	e002      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
      return;
 80099cc:	bf00      	nop
 80099ce:	e000      	b.n	80099d2 <HAL_UART_IRQHandler+0x642>
    return;
 80099d0:	bf00      	nop
  }
}
 80099d2:	37e8      	adds	r7, #232	; 0xe8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a30:	b08c      	sub	sp, #48	; 0x30
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	431a      	orrs	r2, r3
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	4baf      	ldr	r3, [pc, #700]	; (8009d18 <UART_SetConfig+0x2ec>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a64:	430b      	orrs	r3, r1
 8009a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4aa4      	ldr	r2, [pc, #656]	; (8009d1c <UART_SetConfig+0x2f0>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d004      	beq.n	8009a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a94:	4313      	orrs	r3, r2
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	f023 010f 	bic.w	r1, r3, #15
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a95      	ldr	r2, [pc, #596]	; (8009d20 <UART_SetConfig+0x2f4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d125      	bne.n	8009b1c <UART_SetConfig+0xf0>
 8009ad0:	2003      	movs	r0, #3
 8009ad2:	f7ff fb13 	bl	80090fc <LL_RCC_GetUSARTClockSource>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d81b      	bhi.n	8009b14 <UART_SetConfig+0xe8>
 8009adc:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <UART_SetConfig+0xb8>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009af5 	.word	0x08009af5
 8009ae8:	08009b05 	.word	0x08009b05
 8009aec:	08009afd 	.word	0x08009afd
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009afa:	e042      	b.n	8009b82 <UART_SetConfig+0x156>
 8009afc:	2302      	movs	r3, #2
 8009afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b02:	e03e      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b04:	2304      	movs	r3, #4
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b0a:	e03a      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b12:	e036      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b14:	2310      	movs	r3, #16
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b1a:	e032      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a7e      	ldr	r2, [pc, #504]	; (8009d1c <UART_SetConfig+0x2f0>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d12a      	bne.n	8009b7c <UART_SetConfig+0x150>
 8009b26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009b2a:	f7ff faf7 	bl	800911c <LL_RCC_GetLPUARTClockSource>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b34:	d01a      	beq.n	8009b6c <UART_SetConfig+0x140>
 8009b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b3a:	d81b      	bhi.n	8009b74 <UART_SetConfig+0x148>
 8009b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b40:	d00c      	beq.n	8009b5c <UART_SetConfig+0x130>
 8009b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b46:	d815      	bhi.n	8009b74 <UART_SetConfig+0x148>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <UART_SetConfig+0x128>
 8009b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b50:	d008      	beq.n	8009b64 <UART_SetConfig+0x138>
 8009b52:	e00f      	b.n	8009b74 <UART_SetConfig+0x148>
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b5a:	e012      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b62:	e00e      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b64:	2304      	movs	r3, #4
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b6a:	e00a      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b72:	e006      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b74:	2310      	movs	r3, #16
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b7a:	e002      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a65      	ldr	r2, [pc, #404]	; (8009d1c <UART_SetConfig+0x2f0>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	f040 8097 	bne.w	8009cbc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d823      	bhi.n	8009bde <UART_SetConfig+0x1b2>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <UART_SetConfig+0x170>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bdf 	.word	0x08009bdf
 8009ba4:	08009bc9 	.word	0x08009bc9
 8009ba8:	08009bdf 	.word	0x08009bdf
 8009bac:	08009bcf 	.word	0x08009bcf
 8009bb0:	08009bdf 	.word	0x08009bdf
 8009bb4:	08009bdf 	.word	0x08009bdf
 8009bb8:	08009bdf 	.word	0x08009bdf
 8009bbc:	08009bd7 	.word	0x08009bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bc0:	f7fe fcc8 	bl	8008554 <HAL_RCC_GetPCLK1Freq>
 8009bc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bc6:	e010      	b.n	8009bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc8:	4b56      	ldr	r3, [pc, #344]	; (8009d24 <UART_SetConfig+0x2f8>)
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bcc:	e00d      	b.n	8009bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bce:	f7fe fc41 	bl	8008454 <HAL_RCC_GetSysClockFreq>
 8009bd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bd4:	e009      	b.n	8009bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bdc:	e005      	b.n	8009bea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 812b 	beq.w	8009e48 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	4a4c      	ldr	r2, [pc, #304]	; (8009d28 <UART_SetConfig+0x2fc>)
 8009bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	4413      	add	r3, r2
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d305      	bcc.n	8009c22 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d903      	bls.n	8009c2a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c28:	e10e      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	60fa      	str	r2, [r7, #12]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	4a3c      	ldr	r2, [pc, #240]	; (8009d28 <UART_SetConfig+0x2fc>)
 8009c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	2200      	movs	r2, #0
 8009c40:	603b      	str	r3, [r7, #0]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c4c:	f7f6 ffa4 	bl	8000b98 <__aeabi_uldivmod>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4610      	mov	r0, r2
 8009c56:	4619      	mov	r1, r3
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	020b      	lsls	r3, r1, #8
 8009c62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c66:	0202      	lsls	r2, r0, #8
 8009c68:	6979      	ldr	r1, [r7, #20]
 8009c6a:	6849      	ldr	r1, [r1, #4]
 8009c6c:	0849      	lsrs	r1, r1, #1
 8009c6e:	2000      	movs	r0, #0
 8009c70:	460c      	mov	r4, r1
 8009c72:	4605      	mov	r5, r0
 8009c74:	eb12 0804 	adds.w	r8, r2, r4
 8009c78:	eb43 0905 	adc.w	r9, r3, r5
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	469a      	mov	sl, r3
 8009c84:	4693      	mov	fp, r2
 8009c86:	4652      	mov	r2, sl
 8009c88:	465b      	mov	r3, fp
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 ff83 	bl	8000b98 <__aeabi_uldivmod>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4613      	mov	r3, r2
 8009c98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ca0:	d308      	bcc.n	8009cb4 <UART_SetConfig+0x288>
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ca8:	d204      	bcs.n	8009cb4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6a3a      	ldr	r2, [r7, #32]
 8009cb0:	60da      	str	r2, [r3, #12]
 8009cb2:	e0c9      	b.n	8009e48 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009cba:	e0c5      	b.n	8009e48 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc4:	d16d      	bne.n	8009da2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	2b07      	cmp	r3, #7
 8009cce:	d82d      	bhi.n	8009d2c <UART_SetConfig+0x300>
 8009cd0:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <UART_SetConfig+0x2ac>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009cf9 	.word	0x08009cf9
 8009cdc:	08009d01 	.word	0x08009d01
 8009ce0:	08009d2d 	.word	0x08009d2d
 8009ce4:	08009d07 	.word	0x08009d07
 8009ce8:	08009d2d 	.word	0x08009d2d
 8009cec:	08009d2d 	.word	0x08009d2d
 8009cf0:	08009d2d 	.word	0x08009d2d
 8009cf4:	08009d0f 	.word	0x08009d0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf8:	f7fe fc42 	bl	8008580 <HAL_RCC_GetPCLK2Freq>
 8009cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cfe:	e01b      	b.n	8009d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d00:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <UART_SetConfig+0x2f8>)
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d04:	e018      	b.n	8009d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d06:	f7fe fba5 	bl	8008454 <HAL_RCC_GetSysClockFreq>
 8009d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d0c:	e014      	b.n	8009d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d14:	e010      	b.n	8009d38 <UART_SetConfig+0x30c>
 8009d16:	bf00      	nop
 8009d18:	cfff69f3 	.word	0xcfff69f3
 8009d1c:	40008000 	.word	0x40008000
 8009d20:	40013800 	.word	0x40013800
 8009d24:	00f42400 	.word	0x00f42400
 8009d28:	0800f628 	.word	0x0800f628
      default:
        pclk = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8084 	beq.w	8009e48 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	4a4b      	ldr	r2, [pc, #300]	; (8009e74 <UART_SetConfig+0x448>)
 8009d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d52:	005a      	lsls	r2, r3, #1
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	085b      	lsrs	r3, r3, #1
 8009d5a:	441a      	add	r2, r3
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d64:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	2b0f      	cmp	r3, #15
 8009d6a:	d916      	bls.n	8009d9a <UART_SetConfig+0x36e>
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d72:	d212      	bcs.n	8009d9a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	f023 030f 	bic.w	r3, r3, #15
 8009d7c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	085b      	lsrs	r3, r3, #1
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f003 0307 	and.w	r3, r3, #7
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	8bfb      	ldrh	r3, [r7, #30]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	8bfa      	ldrh	r2, [r7, #30]
 8009d96:	60da      	str	r2, [r3, #12]
 8009d98:	e056      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009da0:	e052      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009da6:	3b01      	subs	r3, #1
 8009da8:	2b07      	cmp	r3, #7
 8009daa:	d822      	bhi.n	8009df2 <UART_SetConfig+0x3c6>
 8009dac:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <UART_SetConfig+0x388>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009df3 	.word	0x08009df3
 8009dc0:	08009de3 	.word	0x08009de3
 8009dc4:	08009df3 	.word	0x08009df3
 8009dc8:	08009df3 	.word	0x08009df3
 8009dcc:	08009df3 	.word	0x08009df3
 8009dd0:	08009deb 	.word	0x08009deb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd4:	f7fe fbd4 	bl	8008580 <HAL_RCC_GetPCLK2Freq>
 8009dd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dda:	e010      	b.n	8009dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ddc:	4b26      	ldr	r3, [pc, #152]	; (8009e78 <UART_SetConfig+0x44c>)
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009de0:	e00d      	b.n	8009dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009de2:	f7fe fb37 	bl	8008454 <HAL_RCC_GetSysClockFreq>
 8009de6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009de8:	e009      	b.n	8009dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009df0:	e005      	b.n	8009dfe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d021      	beq.n	8009e48 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	4a1a      	ldr	r2, [pc, #104]	; (8009e74 <UART_SetConfig+0x448>)
 8009e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	085b      	lsrs	r3, r3, #1
 8009e1c:	441a      	add	r2, r3
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	2b0f      	cmp	r3, #15
 8009e2c:	d909      	bls.n	8009e42 <UART_SetConfig+0x416>
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e34:	d205      	bcs.n	8009e42 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60da      	str	r2, [r3, #12]
 8009e40:	e002      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2200      	movs	r2, #0
 8009e62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009e64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3730      	adds	r7, #48	; 0x30
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e72:	bf00      	nop
 8009e74:	0800f628 	.word	0x0800f628
 8009e78:	00f42400 	.word	0x00f42400

08009e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eaa:	f003 0302 	and.w	r3, r3, #2
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eee:	f003 0308 	and.w	r3, r3, #8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01a      	beq.n	8009f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f7a:	d10a      	bne.n	8009f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	605a      	str	r2, [r3, #4]
  }
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b098      	sub	sp, #96	; 0x60
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fd0:	f7fb f8d8 	bl	8005184 <HAL_GetTick>
 8009fd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0308 	and.w	r3, r3, #8
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d12f      	bne.n	800a044 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fec:	2200      	movs	r2, #0
 8009fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f88e 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d022      	beq.n	800a044 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a012:	653b      	str	r3, [r7, #80]	; 0x50
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a01c:	647b      	str	r3, [r7, #68]	; 0x44
 800a01e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e063      	b.n	800a10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d149      	bne.n	800a0e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a052:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a05a:	2200      	movs	r2, #0
 800a05c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f857 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d03c      	beq.n	800a0e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	623b      	str	r3, [r7, #32]
   return(result);
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a080:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08a:	633b      	str	r3, [r7, #48]	; 0x30
 800a08c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e6      	bne.n	800a06c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0be:	61fa      	str	r2, [r7, #28]
 800a0c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	69b9      	ldr	r1, [r7, #24]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e5      	bne.n	800a09e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e012      	b.n	800a10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3758      	adds	r7, #88	; 0x58
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	4613      	mov	r3, r2
 800a122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a124:	e049      	b.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d045      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a12e:	f7fb f829 	bl	8005184 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d302      	bcc.n	800a144 <UART_WaitOnFlagUntilTimeout+0x30>
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e048      	b.n	800a1da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d031      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	f003 0308 	and.w	r3, r3, #8
 800a160:	2b08      	cmp	r3, #8
 800a162:	d110      	bne.n	800a186 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2208      	movs	r2, #8
 800a16a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f920 	bl	800a3b2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2208      	movs	r2, #8
 800a176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e029      	b.n	800a1da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a194:	d111      	bne.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a19e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f906 	bl	800a3b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e00f      	b.n	800a1da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69da      	ldr	r2, [r3, #28]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	bf0c      	ite	eq
 800a1ca:	2301      	moveq	r3, #1
 800a1cc:	2300      	movne	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d0a6      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
	...

0800a1e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b096      	sub	sp, #88	; 0x58
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	88fa      	ldrh	r2, [r7, #6]
 800a1fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2222      	movs	r2, #34	; 0x22
 800a20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a216:	2b00      	cmp	r3, #0
 800a218:	d02d      	beq.n	800a276 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a220:	4a40      	ldr	r2, [pc, #256]	; (800a324 <UART_Start_Receive_DMA+0x140>)
 800a222:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a22a:	4a3f      	ldr	r2, [pc, #252]	; (800a328 <UART_Start_Receive_DMA+0x144>)
 800a22c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a234:	4a3d      	ldr	r2, [pc, #244]	; (800a32c <UART_Start_Receive_DMA+0x148>)
 800a236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a23e:	2200      	movs	r2, #0
 800a240:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3324      	adds	r3, #36	; 0x24
 800a24e:	4619      	mov	r1, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a254:	461a      	mov	r2, r3
 800a256:	88fb      	ldrh	r3, [r7, #6]
 800a258:	f7fc fb54 	bl	8006904 <HAL_DMA_Start_IT>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d009      	beq.n	800a276 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2210      	movs	r2, #16
 800a266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e051      	b.n	800a31a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d018      	beq.n	800a2b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a286:	e853 3f00 	ldrex	r3, [r3]
 800a28a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a292:	657b      	str	r3, [r7, #84]	; 0x54
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	461a      	mov	r2, r3
 800a29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a29c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a29e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2a4:	e841 2300 	strex	r3, r2, [r1]
 800a2a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e6      	bne.n	800a27e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	653b      	str	r3, [r7, #80]	; 0x50
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2d0:	637a      	str	r2, [r7, #52]	; 0x34
 800a2d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e5      	bne.n	800a2b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a304:	623a      	str	r2, [r7, #32]
 800a306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	69f9      	ldr	r1, [r7, #28]
 800a30a:	6a3a      	ldr	r2, [r7, #32]
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	61bb      	str	r3, [r7, #24]
   return(result);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e5      	bne.n	800a2e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3758      	adds	r7, #88	; 0x58
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	0800a47f 	.word	0x0800a47f
 800a328:	0800a5ab 	.word	0x0800a5ab
 800a32c:	0800a5e9 	.word	0x0800a5e9

0800a330 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a330:	b480      	push	{r7}
 800a332:	b08f      	sub	sp, #60	; 0x3c
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	61fb      	str	r3, [r7, #28]
   return(result);
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a34c:	637b      	str	r3, [r7, #52]	; 0x34
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a358:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a35c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35e:	e841 2300 	strex	r3, r2, [r1]
 800a362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1e6      	bne.n	800a338 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3308      	adds	r3, #8
 800a370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	e853 3f00 	ldrex	r3, [r3]
 800a378:	60bb      	str	r3, [r7, #8]
   return(result);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a380:	633b      	str	r3, [r7, #48]	; 0x30
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3308      	adds	r3, #8
 800a388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38a:	61ba      	str	r2, [r7, #24]
 800a38c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38e:	6979      	ldr	r1, [r7, #20]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	613b      	str	r3, [r7, #16]
   return(result);
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e5      	bne.n	800a36a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a3a6:	bf00      	nop
 800a3a8:	373c      	adds	r7, #60	; 0x3c
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b095      	sub	sp, #84	; 0x54
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e6      	bne.n	800a3ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a402:	f023 0301 	bic.w	r3, r3, #1
 800a406:	64bb      	str	r3, [r7, #72]	; 0x48
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3308      	adds	r3, #8
 800a40e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a410:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a418:	e841 2300 	strex	r3, r2, [r1]
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e3      	bne.n	800a3ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d118      	bne.n	800a45e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	e853 3f00 	ldrex	r3, [r3]
 800a438:	60bb      	str	r3, [r7, #8]
   return(result);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f023 0310 	bic.w	r3, r3, #16
 800a440:	647b      	str	r3, [r7, #68]	; 0x44
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a44a:	61bb      	str	r3, [r7, #24]
 800a44c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44e:	6979      	ldr	r1, [r7, #20]
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	e841 2300 	strex	r3, r2, [r1]
 800a456:	613b      	str	r3, [r7, #16]
   return(result);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1e6      	bne.n	800a42c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2220      	movs	r2, #32
 800a462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a472:	bf00      	nop
 800a474:	3754      	adds	r7, #84	; 0x54
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b09c      	sub	sp, #112	; 0x70
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b00      	cmp	r3, #0
 800a498:	d171      	bne.n	800a57e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e6      	bne.n	800a4a2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	667b      	str	r3, [r7, #100]	; 0x64
 800a4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4f4:	647a      	str	r2, [r7, #68]	; 0x44
 800a4f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e5      	bne.n	800a4d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3308      	adds	r3, #8
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	623b      	str	r3, [r7, #32]
   return(result);
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a51e:	663b      	str	r3, [r7, #96]	; 0x60
 800a520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3308      	adds	r3, #8
 800a526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a528:	633a      	str	r2, [r7, #48]	; 0x30
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e5      	bne.n	800a508 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a53c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53e:	2220      	movs	r2, #32
 800a540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d118      	bne.n	800a57e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	60fb      	str	r3, [r7, #12]
   return(result);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f023 0310 	bic.w	r3, r3, #16
 800a560:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a56a:	61fb      	str	r3, [r7, #28]
 800a56c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	69b9      	ldr	r1, [r7, #24]
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	617b      	str	r3, [r7, #20]
   return(result);
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e6      	bne.n	800a54c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a580:	2200      	movs	r2, #0
 800a582:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d107      	bne.n	800a59c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a592:	4619      	mov	r1, r3
 800a594:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a596:	f7ff fa3d 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a59a:	e002      	b.n	800a5a2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a59c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a59e:	f7f7 faa7 	bl	8001af0 <HAL_UART_RxCpltCallback>
}
 800a5a2:	bf00      	nop
 800a5a4:	3770      	adds	r7, #112	; 0x70
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d109      	bne.n	800a5da <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5cc:	085b      	lsrs	r3, r3, #1
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff fa1e 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5d8:	e002      	b.n	800a5e0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff fa06 	bl	80099ec <HAL_UART_RxHalfCpltCallback>
}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a604:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a610:	2b80      	cmp	r3, #128	; 0x80
 800a612:	d109      	bne.n	800a628 <UART_DMAError+0x40>
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2b21      	cmp	r3, #33	; 0x21
 800a618:	d106      	bne.n	800a628 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a622:	6978      	ldr	r0, [r7, #20]
 800a624:	f7ff fe84 	bl	800a330 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a632:	2b40      	cmp	r3, #64	; 0x40
 800a634:	d109      	bne.n	800a64a <UART_DMAError+0x62>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b22      	cmp	r3, #34	; 0x22
 800a63a:	d106      	bne.n	800a64a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a644:	6978      	ldr	r0, [r7, #20]
 800a646:	f7ff feb4 	bl	800a3b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a650:	f043 0210 	orr.w	r2, r3, #16
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a65a:	6978      	ldr	r0, [r7, #20]
 800a65c:	f7ff f9d0 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a660:	bf00      	nop
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7ff f9ba 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a68c:	bf00      	nop
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6b0:	61fb      	str	r3, [r7, #28]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	61bb      	str	r3, [r7, #24]
 800a6bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6be:	6979      	ldr	r1, [r7, #20]
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	e841 2300 	strex	r3, r2, [r1]
 800a6c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1e6      	bne.n	800a69c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff f97b 	bl	80099d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6e2:	bf00      	nop
 800a6e4:	3720      	adds	r7, #32
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a706:	bf00      	nop
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a712:	b480      	push	{r7}
 800a714:	b083      	sub	sp, #12
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a726:	b480      	push	{r7}
 800a728:	b085      	sub	sp, #20
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a734:	2b01      	cmp	r3, #1
 800a736:	d101      	bne.n	800a73c <HAL_UARTEx_DisableFifoMode+0x16>
 800a738:	2302      	movs	r3, #2
 800a73a:	e027      	b.n	800a78c <HAL_UARTEx_DisableFifoMode+0x66>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2224      	movs	r2, #36	; 0x24
 800a748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a76a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e02d      	b.n	800a80c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2224      	movs	r2, #36	; 0x24
 800a7bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 0201 	bic.w	r2, r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f84f 	bl	800a890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a824:	2b01      	cmp	r3, #1
 800a826:	d101      	bne.n	800a82c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a828:	2302      	movs	r3, #2
 800a82a:	e02d      	b.n	800a888 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2224      	movs	r2, #36	; 0x24
 800a838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f022 0201 	bic.w	r2, r2, #1
 800a852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f811 	bl	800a890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d108      	bne.n	800a8b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8b0:	e031      	b.n	800a916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8b2:	2308      	movs	r3, #8
 800a8b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	0e5b      	lsrs	r3, r3, #25
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0307 	and.w	r3, r3, #7
 800a8c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	0f5b      	lsrs	r3, r3, #29
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	7b3a      	ldrb	r2, [r7, #12]
 800a8de:	4911      	ldr	r1, [pc, #68]	; (800a924 <UARTEx_SetNbDataToProcess+0x94>)
 800a8e0:	5c8a      	ldrb	r2, [r1, r2]
 800a8e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8e6:	7b3a      	ldrb	r2, [r7, #12]
 800a8e8:	490f      	ldr	r1, [pc, #60]	; (800a928 <UARTEx_SetNbDataToProcess+0x98>)
 800a8ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	7b7a      	ldrb	r2, [r7, #13]
 800a8fc:	4909      	ldr	r1, [pc, #36]	; (800a924 <UARTEx_SetNbDataToProcess+0x94>)
 800a8fe:	5c8a      	ldrb	r2, [r1, r2]
 800a900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a904:	7b7a      	ldrb	r2, [r7, #13]
 800a906:	4908      	ldr	r1, [pc, #32]	; (800a928 <UARTEx_SetNbDataToProcess+0x98>)
 800a908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a90a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a916:	bf00      	nop
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	0800f640 	.word	0x0800f640
 800a928:	0800f648 	.word	0x0800f648

0800a92c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a934:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a938:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a940:	b29a      	uxth	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	b29b      	uxth	r3, r3
 800a946:	43db      	mvns	r3, r3
 800a948:	b29b      	uxth	r3, r3
 800a94a:	4013      	ands	r3, r2
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a962:	b084      	sub	sp, #16
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	f107 0014 	add.w	r0, r7, #20
 800a970:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	b004      	add	sp, #16
 800a9a2:	4770      	bx	lr

0800a9a4 <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 800a9a4:	b40f      	push	{r0, r1, r2, r3}
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 800a9ac:	f107 0314 	add.w	r3, r7, #20
 800a9b0:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	6939      	ldr	r1, [r7, #16]
 800a9b6:	4822      	ldr	r0, [pc, #136]	; (800aa40 <uart_esp32_transmit+0x9c>)
 800a9b8:	f002 f976 	bl	800cca8 <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 800a9bc:	2300      	movs	r3, #0
 800a9be:	80fb      	strh	r3, [r7, #6]
 800a9c0:	e019      	b.n	800a9f6 <uart_esp32_transmit+0x52>
		j = i + 1;
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	4a1d      	ldr	r2, [pc, #116]	; (800aa40 <uart_esp32_transmit+0x9c>)
 800a9cc:	5cd3      	ldrb	r3, [r2, r3]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10e      	bne.n	800a9f0 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 800a9d2:	e009      	b.n	800a9e8 <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 800a9d4:	88ba      	ldrh	r2, [r7, #4]
 800a9d6:	88bb      	ldrh	r3, [r7, #4]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	4919      	ldr	r1, [pc, #100]	; (800aa40 <uart_esp32_transmit+0x9c>)
 800a9dc:	5c89      	ldrb	r1, [r1, r2]
 800a9de:	4a18      	ldr	r2, [pc, #96]	; (800aa40 <uart_esp32_transmit+0x9c>)
 800a9e0:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 800a9e2:	88bb      	ldrh	r3, [r7, #4]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	80bb      	strh	r3, [r7, #4]
 800a9e8:	88bb      	ldrh	r3, [r7, #4]
 800a9ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ee:	d3f1      	bcc.n	800a9d4 <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	80fb      	strh	r3, [r7, #6]
 800a9f6:	88fb      	ldrh	r3, [r7, #6]
 800a9f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9fc:	d3e1      	bcc.n	800a9c2 <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 800a9fe:	4810      	ldr	r0, [pc, #64]	; (800aa40 <uart_esp32_transmit+0x9c>)
 800aa00:	f7f5 fbbe 	bl	8000180 <strlen>
 800aa04:	4603      	mov	r3, r0
 800aa06:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 800aa08:	88fa      	ldrh	r2, [r7, #6]
 800aa0a:	2364      	movs	r3, #100	; 0x64
 800aa0c:	490c      	ldr	r1, [pc, #48]	; (800aa40 <uart_esp32_transmit+0x9c>)
 800aa0e:	480d      	ldr	r0, [pc, #52]	; (800aa44 <uart_esp32_transmit+0xa0>)
 800aa10:	f7fe fbe4 	bl	80091dc <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 800aa14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4809      	ldr	r0, [pc, #36]	; (800aa40 <uart_esp32_transmit+0x9c>)
 800aa1c:	f001 f852 	bl	800bac4 <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800aa20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa24:	2100      	movs	r1, #0
 800aa26:	4808      	ldr	r0, [pc, #32]	; (800aa48 <uart_esp32_transmit+0xa4>)
 800aa28:	f001 f84c 	bl	800bac4 <memset>
	UART_ESP32_RecvEndFlag = 0;
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <uart_esp32_transmit+0xa8>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	701a      	strb	r2, [r3, #0]
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa3c:	b004      	add	sp, #16
 800aa3e:	4770      	bx	lr
 800aa40:	20000754 	.word	0x20000754
 800aa44:	20000278 	.word	0x20000278
 800aa48:	20000f54 	.word	0x20000f54
 800aa4c:	20001755 	.word	0x20001755

0800aa50 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 800aa58:	4910      	ldr	r1, [pc, #64]	; (800aa9c <esp8266_CheckRespond+0x4c>)
 800aa5a:	4811      	ldr	r0, [pc, #68]	; (800aaa0 <esp8266_CheckRespond+0x50>)
 800aa5c:	f001 f91a 	bl	800bc94 <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	480e      	ldr	r0, [pc, #56]	; (800aa9c <esp8266_CheckRespond+0x4c>)
 800aa64:	f001 fa38 	bl	800bed8 <strstr>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 800aa6e:	480d      	ldr	r0, [pc, #52]	; (800aaa4 <esp8266_CheckRespond+0x54>)
 800aa70:	f001 f996 	bl	800bda0 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800aa74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa78:	2100      	movs	r1, #0
 800aa7a:	4808      	ldr	r0, [pc, #32]	; (800aa9c <esp8266_CheckRespond+0x4c>)
 800aa7c:	f001 f822 	bl	800bac4 <memset>
		return _MATCHOK;
 800aa80:	2304      	movs	r3, #4
 800aa82:	e006      	b.n	800aa92 <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800aa84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4804      	ldr	r0, [pc, #16]	; (800aa9c <esp8266_CheckRespond+0x4c>)
 800aa8c:	f001 f81a 	bl	800bac4 <memset>
	return _MATCHERROR;
 800aa90:	2303      	movs	r3, #3
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000f54 	.word	0x20000f54
 800aaa0:	0800edf8 	.word	0x0800edf8
 800aaa4:	0800ee0c 	.word	0x0800ee0c

0800aaa8 <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800aabe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aac2:	2100      	movs	r1, #0
 800aac4:	4826      	ldr	r0, [pc, #152]	; (800ab60 <esp8266_TransmitCmd+0xb8>)
 800aac6:	f000 fffd 	bl	800bac4 <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 800aaca:	68f9      	ldr	r1, [r7, #12]
 800aacc:	4825      	ldr	r0, [pc, #148]	; (800ab64 <esp8266_TransmitCmd+0xbc>)
 800aace:	f001 f8e1 	bl	800bc94 <iprintf>
	if (newline == 0)
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d104      	bne.n	800aae2 <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 800aad8:	68f9      	ldr	r1, [r7, #12]
 800aada:	4823      	ldr	r0, [pc, #140]	; (800ab68 <esp8266_TransmitCmd+0xc0>)
 800aadc:	f7ff ff62 	bl	800a9a4 <uart_esp32_transmit>
 800aae0:	e01e      	b.n	800ab20 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 800aae2:	68f9      	ldr	r1, [r7, #12]
 800aae4:	4821      	ldr	r0, [pc, #132]	; (800ab6c <esp8266_TransmitCmd+0xc4>)
 800aae6:	f7ff ff5d 	bl	800a9a4 <uart_esp32_transmit>

	//printf("(DBG:) Waiting reply\r\n");
	while (timeout--) {
 800aaea:	e019      	b.n	800ab20 <esp8266_TransmitCmd+0x78>
		// //printf("%d ", timeout);
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 800aaec:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <esp8266_TransmitCmd+0xc8>)
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d111      	bne.n	800ab1a <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 800aaf6:	68b8      	ldr	r0, [r7, #8]
 800aaf8:	f7ff ffaa 	bl	800aa50 <esp8266_CheckRespond>
 800aafc:	4603      	mov	r3, r0
 800aafe:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
				//printf("(DBG:) Command closed loop completed\r\n");
			}

			UART_ESP32_RxLen = 0;
 800ab00:	4b1c      	ldr	r3, [pc, #112]	; (800ab74 <esp8266_TransmitCmd+0xcc>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 800ab06:	4b1a      	ldr	r3, [pc, #104]	; (800ab70 <esp8266_TransmitCmd+0xc8>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 800ab0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab10:	4913      	ldr	r1, [pc, #76]	; (800ab60 <esp8266_TransmitCmd+0xb8>)
 800ab12:	4819      	ldr	r0, [pc, #100]	; (800ab78 <esp8266_TransmitCmd+0xd0>)
 800ab14:	f7fe fbf0 	bl	80092f8 <HAL_UART_Receive_DMA>

			break;
 800ab18:	e007      	b.n	800ab2a <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	f7fa fb4a 	bl	80051b4 <HAL_Delay>
	while (timeout--) {
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	1e5a      	subs	r2, r3, #1
 800ab24:	617a      	str	r2, [r7, #20]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e0      	bne.n	800aaec <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 800ab2a:	7cfb      	ldrb	r3, [r7, #19]
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d104      	bne.n	800ab3a <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 800ab30:	4812      	ldr	r0, [pc, #72]	; (800ab7c <esp8266_TransmitCmd+0xd4>)
 800ab32:	f001 f935 	bl	800bda0 <puts>
		return check;
 800ab36:	7cfb      	ldrb	r3, [r7, #19]
 800ab38:	e00e      	b.n	800ab58 <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dc07      	bgt.n	800ab50 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 800ab40:	480f      	ldr	r0, [pc, #60]	; (800ab80 <esp8266_TransmitCmd+0xd8>)
 800ab42:	f001 f92d 	bl	800bda0 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 800ab46:	480f      	ldr	r0, [pc, #60]	; (800ab84 <esp8266_TransmitCmd+0xdc>)
 800ab48:	f001 f92a 	bl	800bda0 <puts>
		return _TIMEOUT;
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	e003      	b.n	800ab58 <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 800ab50:	480d      	ldr	r0, [pc, #52]	; (800ab88 <esp8266_TransmitCmd+0xe0>)
 800ab52:	f001 f925 	bl	800bda0 <puts>
	return _SUCCEED;
 800ab56:	2301      	movs	r3, #1
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000f54 	.word	0x20000f54
 800ab64:	0800ee24 	.word	0x0800ee24
 800ab68:	0800ee44 	.word	0x0800ee44
 800ab6c:	0800ee48 	.word	0x0800ee48
 800ab70:	20001755 	.word	0x20001755
 800ab74:	20001754 	.word	0x20001754
 800ab78:	20000278 	.word	0x20000278
 800ab7c:	0800ee50 	.word	0x0800ee50
 800ab80:	0800ee6c 	.word	0x0800ee6c
 800ab84:	0800ee84 	.word	0x0800ee84
 800ab88:	0800ee98 	.word	0x0800ee98

0800ab8c <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2108      	movs	r1, #8
 800ab9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aba0:	f7fc fac2 	bl	8007128 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800aba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aba8:	f7fa fb04 	bl	80051b4 <HAL_Delay>
	WIFI_RST_Disable();
 800abac:	2201      	movs	r2, #1
 800abae:	2108      	movs	r1, #8
 800abb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800abb4:	f7fc fab8 	bl	8007128 <HAL_GPIO_WritePin>
	while (timeout--) {
 800abb8:	e01b      	b.n	800abf2 <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 800abba:	4b18      	ldr	r3, [pc, #96]	; (800ac1c <esp8266_HardwareReset+0x90>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d113      	bne.n	800abec <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 800abc4:	4816      	ldr	r0, [pc, #88]	; (800ac20 <esp8266_HardwareReset+0x94>)
 800abc6:	f001 f8eb 	bl	800bda0 <puts>
			HAL_Delay(100);
 800abca:	2064      	movs	r0, #100	; 0x64
 800abcc:	f7fa faf2 	bl	80051b4 <HAL_Delay>

			UART_ESP32_RxLen = 0;
 800abd0:	4b14      	ldr	r3, [pc, #80]	; (800ac24 <esp8266_HardwareReset+0x98>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 800abd6:	4b11      	ldr	r3, [pc, #68]	; (800ac1c <esp8266_HardwareReset+0x90>)
 800abd8:	2200      	movs	r2, #0
 800abda:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 800abdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abe0:	4911      	ldr	r1, [pc, #68]	; (800ac28 <esp8266_HardwareReset+0x9c>)
 800abe2:	4812      	ldr	r0, [pc, #72]	; (800ac2c <esp8266_HardwareReset+0xa0>)
 800abe4:	f7fe fb88 	bl	80092f8 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 800abe8:	2301      	movs	r3, #1
 800abea:	e013      	b.n	800ac14 <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 800abec:	2001      	movs	r0, #1
 800abee:	f7fa fae1 	bl	80051b4 <HAL_Delay>
	while (timeout--) {
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	1e5a      	subs	r2, r3, #1
 800abf6:	60fa      	str	r2, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1de      	bne.n	800abba <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dc07      	bgt.n	800ac12 <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 800ac02:	480b      	ldr	r0, [pc, #44]	; (800ac30 <esp8266_HardwareReset+0xa4>)
 800ac04:	f001 f8cc 	bl	800bda0 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 800ac08:	480a      	ldr	r0, [pc, #40]	; (800ac34 <esp8266_HardwareReset+0xa8>)
 800ac0a:	f001 f8c9 	bl	800bda0 <puts>
		return _TIMEOUT;
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e000      	b.n	800ac14 <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 800ac12:	23ff      	movs	r3, #255	; 0xff
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	20001755 	.word	0x20001755
 800ac20:	0800eea8 	.word	0x0800eea8
 800ac24:	20001754 	.word	0x20001754
 800ac28:	20000f54 	.word	0x20000f54
 800ac2c:	20000278 	.word	0x20000278
 800ac30:	0800ee6c 	.word	0x0800ee6c
 800ac34:	0800ee84 	.word	0x0800ee84

0800ac38 <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 800ac3e:	2333      	movs	r3, #51	; 0x33
 800ac40:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800ac42:	88fb      	ldrh	r3, [r7, #6]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 ff05 	bl	800ba54 <malloc>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 800ac4e:	88fb      	ldrh	r3, [r7, #6]
 800ac50:	461a      	mov	r2, r3
 800ac52:	2100      	movs	r1, #0
 800ac54:	6838      	ldr	r0, [r7, #0]
 800ac56:	f000 ff35 	bl	800bac4 <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 800ac5a:	4b0e      	ldr	r3, [pc, #56]	; (800ac94 <esp8266_ConnectAP+0x5c>)
 800ac5c:	4a0e      	ldr	r2, [pc, #56]	; (800ac98 <esp8266_ConnectAP+0x60>)
 800ac5e:	490f      	ldr	r1, [pc, #60]	; (800ac9c <esp8266_ConnectAP+0x64>)
 800ac60:	6838      	ldr	r0, [r7, #0]
 800ac62:	f001 f8b5 	bl	800bdd0 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 800ac66:	2301      	movs	r3, #1
 800ac68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6c:	490c      	ldr	r1, [pc, #48]	; (800aca0 <esp8266_ConnectAP+0x68>)
 800ac6e:	6838      	ldr	r0, [r7, #0]
 800ac70:	f7ff ff1a 	bl	800aaa8 <esp8266_TransmitCmd>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d103      	bne.n	800ac82 <esp8266_ConnectAP+0x4a>
		wifi_state = _ONLINE;
 800ac7a:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <esp8266_ConnectAP+0x6c>)
 800ac7c:	2205      	movs	r2, #5
 800ac7e:	701a      	strb	r2, [r3, #0]
 800ac80:	e002      	b.n	800ac88 <esp8266_ConnectAP+0x50>
	else
		wifi_state = _OFFLINE;
 800ac82:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <esp8266_ConnectAP+0x6c>)
 800ac84:	2206      	movs	r2, #6
 800ac86:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 800ac88:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <esp8266_ConnectAP+0x6c>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	0800eec4 	.word	0x0800eec4
 800ac98:	0800eed0 	.word	0x0800eed0
 800ac9c:	0800eee0 	.word	0x0800eee0
 800aca0:	0800eef4 	.word	0x0800eef4
 800aca4:	20000021 	.word	0x20000021

0800aca8 <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 800acb2:	48a8      	ldr	r0, [pc, #672]	; (800af54 <esp8266_SetupIP+0x2ac>)
 800acb4:	f001 f874 	bl	800bda0 <puts>
	wifi_config_step++;
 800acb8:	4ba7      	ldr	r3, [pc, #668]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	4ba5      	ldr	r3, [pc, #660]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800acc2:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 800acc4:	e019      	b.n	800acfa <esp8266_SetupIP+0x52>
		retry_count++;
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	3301      	adds	r3, #1
 800acca:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800accc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800acd0:	f7fa fa70 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800acd4:	79fb      	ldrb	r3, [r7, #7]
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d90f      	bls.n	800acfa <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 800acda:	48a0      	ldr	r0, [pc, #640]	; (800af5c <esp8266_SetupIP+0x2b4>)
 800acdc:	f001 f860 	bl	800bda0 <puts>
			retry_count = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 800ace4:	4b9e      	ldr	r3, [pc, #632]	; (800af60 <esp8266_SetupIP+0x2b8>)
 800ace6:	22ee      	movs	r2, #238	; 0xee
 800ace8:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 800acea:	4b9b      	ldr	r3, [pc, #620]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	3b01      	subs	r3, #1
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	4b99      	ldr	r3, [pc, #612]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800acf4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800acf6:	2300      	movs	r3, #0
 800acf8:	e1e1      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 800acfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800acfe:	f7ff ff45 	bl	800ab8c <esp8266_HardwareReset>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d1de      	bne.n	800acc6 <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 800ad08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad0c:	f7fa fa52 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ad10:	2300      	movs	r3, #0
 800ad12:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 800ad14:	4893      	ldr	r0, [pc, #588]	; (800af64 <esp8266_SetupIP+0x2bc>)
 800ad16:	f001 f843 	bl	800bda0 <puts>
	wifi_config_step++;
 800ad1a:	4b8f      	ldr	r3, [pc, #572]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	4b8d      	ldr	r3, [pc, #564]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ad24:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 800ad26:	e016      	b.n	800ad56 <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 800ad28:	79fb      	ldrb	r3, [r7, #7]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800ad2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad32:	f7fa fa3f 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800ad36:	79fb      	ldrb	r3, [r7, #7]
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d90c      	bls.n	800ad56 <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 800ad3c:	488a      	ldr	r0, [pc, #552]	; (800af68 <esp8266_SetupIP+0x2c0>)
 800ad3e:	f001 f82f 	bl	800bda0 <puts>
			retry_count = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800ad46:	4b84      	ldr	r3, [pc, #528]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	4b82      	ldr	r3, [pc, #520]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ad50:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e1b3      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 800ad56:	2301      	movs	r3, #1
 800ad58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ad5c:	4983      	ldr	r1, [pc, #524]	; (800af6c <esp8266_SetupIP+0x2c4>)
 800ad5e:	4884      	ldr	r0, [pc, #528]	; (800af70 <esp8266_SetupIP+0x2c8>)
 800ad60:	f7ff fea2 	bl	800aaa8 <esp8266_TransmitCmd>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d1de      	bne.n	800ad28 <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 800ad6a:	2064      	movs	r0, #100	; 0x64
 800ad6c:	f7fa fa22 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ad70:	2300      	movs	r3, #0
 800ad72:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 800ad74:	487f      	ldr	r0, [pc, #508]	; (800af74 <esp8266_SetupIP+0x2cc>)
 800ad76:	f001 f813 	bl	800bda0 <puts>
	wifi_config_step++;
 800ad7a:	4b77      	ldr	r3, [pc, #476]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	4b75      	ldr	r3, [pc, #468]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ad84:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800ad86:	e016      	b.n	800adb6 <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800ad8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad92:	f7fa fa0f 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	d90c      	bls.n	800adb6 <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 800ad9c:	4876      	ldr	r0, [pc, #472]	; (800af78 <esp8266_SetupIP+0x2d0>)
 800ad9e:	f000 ffff 	bl	800bda0 <puts>
			retry_count = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800ada6:	4b6c      	ldr	r3, [pc, #432]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	3b01      	subs	r3, #1
 800adac:	b2da      	uxtb	r2, r3
 800adae:	4b6a      	ldr	r3, [pc, #424]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800adb0:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800adb2:	2300      	movs	r3, #0
 800adb4:	e183      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800adb6:	2301      	movs	r3, #1
 800adb8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800adbc:	496b      	ldr	r1, [pc, #428]	; (800af6c <esp8266_SetupIP+0x2c4>)
 800adbe:	486f      	ldr	r0, [pc, #444]	; (800af7c <esp8266_SetupIP+0x2d4>)
 800adc0:	f7ff fe72 	bl	800aaa8 <esp8266_TransmitCmd>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d1de      	bne.n	800ad88 <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 800adca:	2064      	movs	r0, #100	; 0x64
 800adcc:	f7fa f9f2 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800add0:	2300      	movs	r3, #0
 800add2:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 800add4:	486a      	ldr	r0, [pc, #424]	; (800af80 <esp8266_SetupIP+0x2d8>)
 800add6:	f000 ffe3 	bl	800bda0 <puts>
	wifi_config_step++;
 800adda:	4b5f      	ldr	r3, [pc, #380]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	3301      	adds	r3, #1
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	4b5d      	ldr	r3, [pc, #372]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ade4:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 800ade6:	e016      	b.n	800ae16 <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	3301      	adds	r3, #1
 800adec:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800adee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800adf2:	f7fa f9df 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d90c      	bls.n	800ae16 <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 800adfc:	4861      	ldr	r0, [pc, #388]	; (800af84 <esp8266_SetupIP+0x2dc>)
 800adfe:	f000 ffcf 	bl	800bda0 <puts>
			retry_count = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800ae06:	4b54      	ldr	r3, [pc, #336]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	4b52      	ldr	r3, [pc, #328]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ae10:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800ae12:	2300      	movs	r3, #0
 800ae14:	e153      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 800ae16:	2301      	movs	r3, #1
 800ae18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ae1c:	4953      	ldr	r1, [pc, #332]	; (800af6c <esp8266_SetupIP+0x2c4>)
 800ae1e:	485a      	ldr	r0, [pc, #360]	; (800af88 <esp8266_SetupIP+0x2e0>)
 800ae20:	f7ff fe42 	bl	800aaa8 <esp8266_TransmitCmd>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d1de      	bne.n	800ade8 <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 800ae2a:	2064      	movs	r0, #100	; 0x64
 800ae2c:	f7fa f9c2 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ae30:	2300      	movs	r3, #0
 800ae32:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 800ae34:	4855      	ldr	r0, [pc, #340]	; (800af8c <esp8266_SetupIP+0x2e4>)
 800ae36:	f000 ffb3 	bl	800bda0 <puts>
	wifi_config_step++;
 800ae3a:	4b47      	ldr	r3, [pc, #284]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	4b45      	ldr	r3, [pc, #276]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ae44:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 800ae46:	e016      	b.n	800ae76 <esp8266_SetupIP+0x1ce>
		retry_count++;
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800ae4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae52:	f7fa f9af 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800ae56:	79fb      	ldrb	r3, [r7, #7]
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d90c      	bls.n	800ae76 <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 800ae5c:	484c      	ldr	r0, [pc, #304]	; (800af90 <esp8266_SetupIP+0x2e8>)
 800ae5e:	f000 ff9f 	bl	800bda0 <puts>
			retry_count = 0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800ae66:	4b3c      	ldr	r3, [pc, #240]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	4b3a      	ldr	r3, [pc, #232]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800ae70:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e123      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 800ae76:	f7ff fedf 	bl	800ac38 <esp8266_ConnectAP>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b05      	cmp	r3, #5
 800ae7e:	d1e3      	bne.n	800ae48 <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 800ae80:	2064      	movs	r0, #100	; 0x64
 800ae82:	f7fa f997 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ae86:	2300      	movs	r3, #0
 800ae88:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 800ae8a:	4b42      	ldr	r3, [pc, #264]	; (800af94 <esp8266_SetupIP+0x2ec>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d123      	bne.n	800aeda <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 800ae92:	e018      	b.n	800aec6 <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	3301      	adds	r3, #1
 800ae98:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800ae9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae9e:	f7fa f989 	bl	80051b4 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d90e      	bls.n	800aec6 <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 800aea8:	483b      	ldr	r0, [pc, #236]	; (800af98 <esp8266_SetupIP+0x2f0>)
 800aeaa:	f000 ff79 	bl	800bda0 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 800aeae:	483b      	ldr	r0, [pc, #236]	; (800af9c <esp8266_SetupIP+0x2f4>)
 800aeb0:	f000 fef0 	bl	800bc94 <iprintf>
				retry_count = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800aeb8:	4b27      	ldr	r3, [pc, #156]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800aec2:	701a      	strb	r2, [r3, #0]
				break;
 800aec4:	e009      	b.n	800aeda <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 800aec6:	2301      	movs	r3, #1
 800aec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aecc:	4927      	ldr	r1, [pc, #156]	; (800af6c <esp8266_SetupIP+0x2c4>)
 800aece:	4834      	ldr	r0, [pc, #208]	; (800afa0 <esp8266_SetupIP+0x2f8>)
 800aed0:	f7ff fdea 	bl	800aaa8 <esp8266_TransmitCmd>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d1dc      	bne.n	800ae94 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 800aeda:	2064      	movs	r0, #100	; 0x64
 800aedc:	f7fa f96a 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800aee0:	2300      	movs	r3, #0
 800aee2:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 800aee4:	4b2b      	ldr	r3, [pc, #172]	; (800af94 <esp8266_SetupIP+0x2ec>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b05      	cmp	r3, #5
 800aeea:	d123      	bne.n	800af34 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 800aeec:	e018      	b.n	800af20 <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	3301      	adds	r3, #1
 800aef2:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800aef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aef8:	f7fa f95c 	bl	80051b4 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d90e      	bls.n	800af20 <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 800af02:	4828      	ldr	r0, [pc, #160]	; (800afa4 <esp8266_SetupIP+0x2fc>)
 800af04:	f000 ff4c 	bl	800bda0 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 800af08:	4824      	ldr	r0, [pc, #144]	; (800af9c <esp8266_SetupIP+0x2f4>)
 800af0a:	f000 fec3 	bl	800bc94 <iprintf>
				retry_count = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800af12:	4b11      	ldr	r3, [pc, #68]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	3b01      	subs	r3, #1
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	4b0f      	ldr	r3, [pc, #60]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800af1c:	701a      	strb	r2, [r3, #0]
				break;
 800af1e:	e009      	b.n	800af34 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 800af20:	2301      	movs	r3, #1
 800af22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af26:	4911      	ldr	r1, [pc, #68]	; (800af6c <esp8266_SetupIP+0x2c4>)
 800af28:	481f      	ldr	r0, [pc, #124]	; (800afa8 <esp8266_SetupIP+0x300>)
 800af2a:	f7ff fdbd 	bl	800aaa8 <esp8266_TransmitCmd>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b01      	cmp	r3, #1
 800af32:	d1dc      	bne.n	800aeee <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 800af34:	2064      	movs	r0, #100	; 0x64
 800af36:	f7fa f93d 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800af3a:	2300      	movs	r3, #0
 800af3c:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 800af3e:	481b      	ldr	r0, [pc, #108]	; (800afac <esp8266_SetupIP+0x304>)
 800af40:	f000 ff2e 	bl	800bda0 <puts>
	wifi_config_step++;
 800af44:	4b04      	ldr	r3, [pc, #16]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	3301      	adds	r3, #1
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	4b02      	ldr	r3, [pc, #8]	; (800af58 <esp8266_SetupIP+0x2b0>)
 800af4e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 800af50:	e045      	b.n	800afde <esp8266_SetupIP+0x336>
 800af52:	bf00      	nop
 800af54:	0800ef44 	.word	0x0800ef44
 800af58:	20000750 	.word	0x20000750
 800af5c:	0800ef64 	.word	0x0800ef64
 800af60:	20000022 	.word	0x20000022
 800af64:	0800efb0 	.word	0x0800efb0
 800af68:	0800efd0 	.word	0x0800efd0
 800af6c:	0800efec 	.word	0x0800efec
 800af70:	0800eff0 	.word	0x0800eff0
 800af74:	0800eff8 	.word	0x0800eff8
 800af78:	0800f018 	.word	0x0800f018
 800af7c:	0800f038 	.word	0x0800f038
 800af80:	0800f044 	.word	0x0800f044
 800af84:	0800f06c 	.word	0x0800f06c
 800af88:	0800f090 	.word	0x0800f090
 800af8c:	0800f0a0 	.word	0x0800f0a0
 800af90:	0800f0c0 	.word	0x0800f0c0
 800af94:	20000021 	.word	0x20000021
 800af98:	0800f0e0 	.word	0x0800f0e0
 800af9c:	0800f0fc 	.word	0x0800f0fc
 800afa0:	0800f134 	.word	0x0800f134
 800afa4:	0800f140 	.word	0x0800f140
 800afa8:	0800f15c 	.word	0x0800f15c
 800afac:	0800f168 	.word	0x0800f168
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	3301      	adds	r3, #1
 800afb4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800afb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800afba:	f7fa f8fb 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d90c      	bls.n	800afde <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 800afc4:	4840      	ldr	r0, [pc, #256]	; (800b0c8 <esp8266_SetupIP+0x420>)
 800afc6:	f000 feeb 	bl	800bda0 <puts>
			retry_count = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800afce:	4b3f      	ldr	r3, [pc, #252]	; (800b0cc <esp8266_SetupIP+0x424>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	4b3d      	ldr	r3, [pc, #244]	; (800b0cc <esp8266_SetupIP+0x424>)
 800afd8:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800afda:	2300      	movs	r3, #0
 800afdc:	e06f      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 800afde:	2301      	movs	r3, #1
 800afe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afe4:	493a      	ldr	r1, [pc, #232]	; (800b0d0 <esp8266_SetupIP+0x428>)
 800afe6:	483b      	ldr	r0, [pc, #236]	; (800b0d4 <esp8266_SetupIP+0x42c>)
 800afe8:	f7ff fd5e 	bl	800aaa8 <esp8266_TransmitCmd>
 800afec:	4603      	mov	r3, r0
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d1de      	bne.n	800afb0 <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 800aff2:	2064      	movs	r0, #100	; 0x64
 800aff4:	f7fa f8de 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 800affc:	4836      	ldr	r0, [pc, #216]	; (800b0d8 <esp8266_SetupIP+0x430>)
 800affe:	f000 fecf 	bl	800bda0 <puts>
	wifi_config_step++;
 800b002:	4b32      	ldr	r3, [pc, #200]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	3301      	adds	r3, #1
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	4b30      	ldr	r3, [pc, #192]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b00c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 800b00e:	e016      	b.n	800b03e <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	3301      	adds	r3, #1
 800b014:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800b016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b01a:	f7fa f8cb 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	2b03      	cmp	r3, #3
 800b022:	d90c      	bls.n	800b03e <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 800b024:	482d      	ldr	r0, [pc, #180]	; (800b0dc <esp8266_SetupIP+0x434>)
 800b026:	f000 febb 	bl	800bda0 <puts>
			retry_count = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800b02e:	4b27      	ldr	r3, [pc, #156]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	3b01      	subs	r3, #1
 800b034:	b2da      	uxtb	r2, r3
 800b036:	4b25      	ldr	r3, [pc, #148]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b038:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800b03a:	2300      	movs	r3, #0
 800b03c:	e03f      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 800b03e:	2301      	movs	r3, #1
 800b040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b044:	4922      	ldr	r1, [pc, #136]	; (800b0d0 <esp8266_SetupIP+0x428>)
 800b046:	4826      	ldr	r0, [pc, #152]	; (800b0e0 <esp8266_SetupIP+0x438>)
 800b048:	f7ff fd2e 	bl	800aaa8 <esp8266_TransmitCmd>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d1de      	bne.n	800b010 <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 800b052:	2064      	movs	r0, #100	; 0x64
 800b054:	f7fa f8ae 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 800b05c:	4821      	ldr	r0, [pc, #132]	; (800b0e4 <esp8266_SetupIP+0x43c>)
 800b05e:	f000 fe9f 	bl	800bda0 <puts>
	wifi_config_step++;
 800b062:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	4b18      	ldr	r3, [pc, #96]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b06c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 800b06e:	e016      	b.n	800b09e <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	3301      	adds	r3, #1
 800b074:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800b076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b07a:	f7fa f89b 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	2b03      	cmp	r3, #3
 800b082:	d90c      	bls.n	800b09e <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 800b084:	4818      	ldr	r0, [pc, #96]	; (800b0e8 <esp8266_SetupIP+0x440>)
 800b086:	f000 fe8b 	bl	800bda0 <puts>
			retry_count = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800b08e:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	3b01      	subs	r3, #1
 800b094:	b2da      	uxtb	r2, r3
 800b096:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <esp8266_SetupIP+0x424>)
 800b098:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800b09a:	2300      	movs	r3, #0
 800b09c:	e00f      	b.n	800b0be <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 800b09e:	2301      	movs	r3, #1
 800b0a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0a4:	490a      	ldr	r1, [pc, #40]	; (800b0d0 <esp8266_SetupIP+0x428>)
 800b0a6:	4811      	ldr	r0, [pc, #68]	; (800b0ec <esp8266_SetupIP+0x444>)
 800b0a8:	f7ff fcfe 	bl	800aaa8 <esp8266_TransmitCmd>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d1de      	bne.n	800b070 <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 800b0b2:	2064      	movs	r0, #100	; 0x64
 800b0b4:	f7fa f87e 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 800b0bc:	2301      	movs	r3, #1

}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800f188 	.word	0x0800f188
 800b0cc:	20000750 	.word	0x20000750
 800b0d0:	0800efec 	.word	0x0800efec
 800b0d4:	0800f1a8 	.word	0x0800f1a8
 800b0d8:	0800f1b8 	.word	0x0800f1b8
 800b0dc:	0800f1e0 	.word	0x0800f1e0
 800b0e0:	0800f20c 	.word	0x0800f20c
 800b0e4:	0800f218 	.word	0x0800f218
 800b0e8:	0800f24c 	.word	0x0800f24c
 800b0ec:	0800f280 	.word	0x0800f280

0800b0f0 <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af02      	add	r7, sp, #8
	int retry_count = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 800b0fa:	232c      	movs	r3, #44	; 0x2c
 800b0fc:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b0fe:	897b      	ldrh	r3, [r7, #10]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fca7 	bl	800ba54 <malloc>
 800b106:	4603      	mov	r3, r0
 800b108:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b10a:	897b      	ldrh	r3, [r7, #10]
 800b10c:	461a      	mov	r2, r3
 800b10e:	2100      	movs	r1, #0
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fcd7 	bl	800bac4 <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 800b116:	4b19      	ldr	r3, [pc, #100]	; (800b17c <esp8266_ConfigAccessBroker+0x8c>)
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	4b18      	ldr	r3, [pc, #96]	; (800b17c <esp8266_ConfigAccessBroker+0x8c>)
 800b11c:	4a18      	ldr	r2, [pc, #96]	; (800b180 <esp8266_ConfigAccessBroker+0x90>)
 800b11e:	4919      	ldr	r1, [pc, #100]	; (800b184 <esp8266_ConfigAccessBroker+0x94>)
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fe55 	bl	800bdd0 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b126:	e011      	b.n	800b14c <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b12e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b132:	f7fa f83f 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b03      	cmp	r3, #3
 800b13a:	dd07      	ble.n	800b14c <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 800b13c:	4812      	ldr	r0, [pc, #72]	; (800b188 <esp8266_ConfigAccessBroker+0x98>)
 800b13e:	f000 fe2f 	bl	800bda0 <puts>
			retry_count = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 800b146:	4b11      	ldr	r3, [pc, #68]	; (800b18c <esp8266_ConfigAccessBroker+0x9c>)
 800b148:	2204      	movs	r2, #4
 800b14a:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b14c:	2301      	movs	r3, #1
 800b14e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b152:	490f      	ldr	r1, [pc, #60]	; (800b190 <esp8266_ConfigAccessBroker+0xa0>)
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff fca7 	bl	800aaa8 <esp8266_TransmitCmd>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d1e3      	bne.n	800b128 <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 800b160:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <esp8266_ConfigAccessBroker+0x9c>)
 800b162:	2205      	movs	r2, #5
 800b164:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800b166:	2064      	movs	r0, #100	; 0x64
 800b168:	f7fa f824 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 800b170:	4b06      	ldr	r3, [pc, #24]	; (800b18c <esp8266_ConfigAccessBroker+0x9c>)
 800b172:	781b      	ldrb	r3, [r3, #0]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	0800f30c 	.word	0x0800f30c
 800b180:	0800f310 	.word	0x0800f310
 800b184:	0800f318 	.word	0x0800f318
 800b188:	0800f344 	.word	0x0800f344
 800b18c:	20000023 	.word	0x20000023
 800b190:	0800efec 	.word	0x0800efec

0800b194 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 800b19e:	232e      	movs	r3, #46	; 0x2e
 800b1a0:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b1a2:	897b      	ldrh	r3, [r7, #10]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 fc55 	bl	800ba54 <malloc>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b1ae:	897b      	ldrh	r3, [r7, #10]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fc85 	bl	800bac4 <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 800b1ba:	4b16      	ldr	r3, [pc, #88]	; (800b214 <esp8266_ConnectBroker+0x80>)
 800b1bc:	4a16      	ldr	r2, [pc, #88]	; (800b218 <esp8266_ConnectBroker+0x84>)
 800b1be:	4917      	ldr	r1, [pc, #92]	; (800b21c <esp8266_ConnectBroker+0x88>)
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fe05 	bl	800bdd0 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b1c6:	e011      	b.n	800b1ec <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b1ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b1d2:	f7f9 ffef 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	dd07      	ble.n	800b1ec <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 800b1dc:	4810      	ldr	r0, [pc, #64]	; (800b220 <esp8266_ConnectBroker+0x8c>)
 800b1de:	f000 fddf 	bl	800bda0 <puts>
			retry_count = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <esp8266_ConnectBroker+0x90>)
 800b1e8:	2206      	movs	r2, #6
 800b1ea:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1f2:	490d      	ldr	r1, [pc, #52]	; (800b228 <esp8266_ConnectBroker+0x94>)
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff fc57 	bl	800aaa8 <esp8266_TransmitCmd>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d1e3      	bne.n	800b1c8 <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 800b200:	4b08      	ldr	r3, [pc, #32]	; (800b224 <esp8266_ConnectBroker+0x90>)
 800b202:	2207      	movs	r2, #7
 800b204:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 800b206:	4b07      	ldr	r3, [pc, #28]	; (800b224 <esp8266_ConnectBroker+0x90>)
 800b208:	781b      	ldrb	r3, [r3, #0]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	0800ef04 	.word	0x0800ef04
 800b218:	0800ef0c 	.word	0x0800ef0c
 800b21c:	0800f398 	.word	0x0800f398
 800b220:	0800f3b0 	.word	0x0800f3b0
 800b224:	20000023 	.word	0x20000023
 800b228:	0800efec 	.word	0x0800efec

0800b22c <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	71fb      	strb	r3, [r7, #7]
//
//	HAL_Delay(100);
//	retry_count = 0;		// reset retry count

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 800b236:	482d      	ldr	r0, [pc, #180]	; (800b2ec <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 800b238:	f000 fdb2 	bl	800bda0 <puts>
	mqtt_config_step++;
 800b23c:	4b2c      	ldr	r3, [pc, #176]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	4b2a      	ldr	r3, [pc, #168]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b246:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 800b248:	e016      	b.n	800b278 <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	3301      	adds	r3, #1
 800b24e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 800b250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b254:	f7f9 ffae 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d90c      	bls.n	800b278 <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 800b25e:	4825      	ldr	r0, [pc, #148]	; (800b2f4 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 800b260:	f000 fd9e 	bl	800bda0 <puts>
			retry_count = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 800b268:	4b21      	ldr	r3, [pc, #132]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	4b1f      	ldr	r3, [pc, #124]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b272:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 800b274:	2300      	movs	r3, #0
 800b276:	e035      	b.n	800b2e4 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 800b278:	f7ff ff3a 	bl	800b0f0 <esp8266_ConfigAccessBroker>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b05      	cmp	r3, #5
 800b280:	d1e3      	bne.n	800b24a <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 800b282:	2064      	movs	r0, #100	; 0x64
 800b284:	f7f9 ff96 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800b288:	2300      	movs	r3, #0
 800b28a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
	retry_count = 0;		// reset retry count
	*/

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 800b28c:	481a      	ldr	r0, [pc, #104]	; (800b2f8 <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 800b28e:	f000 fd87 	bl	800bda0 <puts>
	mqtt_config_step++;
 800b292:	4b17      	ldr	r3, [pc, #92]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	3301      	adds	r3, #1
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	4b15      	ldr	r3, [pc, #84]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b29c:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 800b29e:	e016      	b.n	800b2ce <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 800b2a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b2aa:	f7f9 ff83 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d90c      	bls.n	800b2ce <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 800b2b4:	4811      	ldr	r0, [pc, #68]	; (800b2fc <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 800b2b6:	f000 fd73 	bl	800bda0 <puts>
			retry_count = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 800b2be:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b2c8:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e00a      	b.n	800b2e4 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 800b2ce:	f7ff ff61 	bl	800b194 <esp8266_ConnectBroker>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b06      	cmp	r3, #6
 800b2d6:	d9e3      	bls.n	800b2a0 <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 800b2d8:	2064      	movs	r0, #100	; 0x64
 800b2da:	f7f9 ff6b 	bl	80051b4 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800b2de:	2300      	movs	r3, #0
 800b2e0:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 800b2e2:	2301      	movs	r3, #1
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	0800f3d8 	.word	0x0800f3d8
 800b2f0:	20000751 	.word	0x20000751
 800b2f4:	0800f410 	.word	0x0800f410
 800b2f8:	0800f43c 	.word	0x0800f43c
 800b2fc:	0800f470 	.word	0x0800f470

0800b300 <esp8266_Subscribe_Led_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Led_BrokerMQTT()
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 800b30a:	4b21      	ldr	r3, [pc, #132]	; (800b390 <esp8266_Subscribe_Led_BrokerMQTT+0x90>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b06      	cmp	r3, #6
 800b310:	d801      	bhi.n	800b316 <esp8266_Subscribe_Led_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 800b312:	2300      	movs	r3, #0
 800b314:	e038      	b.n	800b388 <esp8266_Subscribe_Led_BrokerMQTT+0x88>

	uint16_t cmd_len = 40;
 800b316:	2328      	movs	r3, #40	; 0x28
 800b318:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b31a:	897b      	ldrh	r3, [r7, #10]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fb99 	bl	800ba54 <malloc>
 800b322:	4603      	mov	r3, r0
 800b324:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b326:	897b      	ldrh	r3, [r7, #10]
 800b328:	461a      	mov	r2, r3
 800b32a:	2100      	movs	r1, #0
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fbc9 	bl	800bac4 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"Ewine/led\",1");
 800b332:	4918      	ldr	r1, [pc, #96]	; (800b394 <esp8266_Subscribe_Led_BrokerMQTT+0x94>)
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fd4b 	bl	800bdd0 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b33a:	e011      	b.n	800b360 <esp8266_Subscribe_Led_BrokerMQTT+0x60>
	{
		retry_count++;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	3301      	adds	r3, #1
 800b340:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b346:	f7f9 ff35 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2b03      	cmp	r3, #3
 800b34e:	dd07      	ble.n	800b360 <esp8266_Subscribe_Led_BrokerMQTT+0x60>
			printf("(DBG:) esp8266_Subscribe_Led_BrokerMQTT() failed\r\n");
 800b350:	4811      	ldr	r0, [pc, #68]	; (800b398 <esp8266_Subscribe_Led_BrokerMQTT+0x98>)
 800b352:	f000 fd25 	bl	800bda0 <puts>
			retry_count = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 800b35a:	4b0d      	ldr	r3, [pc, #52]	; (800b390 <esp8266_Subscribe_Led_BrokerMQTT+0x90>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b360:	2301      	movs	r3, #1
 800b362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b366:	490d      	ldr	r1, [pc, #52]	; (800b39c <esp8266_Subscribe_Led_BrokerMQTT+0x9c>)
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff fb9d 	bl	800aaa8 <esp8266_TransmitCmd>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b01      	cmp	r3, #1
 800b372:	d1e3      	bne.n	800b33c <esp8266_Subscribe_Led_BrokerMQTT+0x3c>
		}
	}

	HAL_Delay(100);
 800b374:	2064      	movs	r0, #100	; 0x64
 800b376:	f7f9 ff1d 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_LED_MQTT;
 800b37e:	4b04      	ldr	r3, [pc, #16]	; (800b390 <esp8266_Subscribe_Led_BrokerMQTT+0x90>)
 800b380:	2208      	movs	r2, #8
 800b382:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b384:	4b02      	ldr	r3, [pc, #8]	; (800b390 <esp8266_Subscribe_Led_BrokerMQTT+0x90>)
 800b386:	781b      	ldrb	r3, [r3, #0]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20000023 	.word	0x20000023
 800b394:	0800f498 	.word	0x0800f498
 800b398:	0800f4b4 	.word	0x0800f4b4
 800b39c:	0800efec 	.word	0x0800efec

0800b3a0 <esp8266_Subscribe_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Temp_BrokerMQTT()
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 800b3aa:	4b21      	ldr	r3, [pc, #132]	; (800b430 <esp8266_Subscribe_Temp_BrokerMQTT+0x90>)
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b06      	cmp	r3, #6
 800b3b0:	d801      	bhi.n	800b3b6 <esp8266_Subscribe_Temp_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e038      	b.n	800b428 <esp8266_Subscribe_Temp_BrokerMQTT+0x88>

	uint16_t cmd_len = 40;
 800b3b6:	2328      	movs	r3, #40	; 0x28
 800b3b8:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b3ba:	897b      	ldrh	r3, [r7, #10]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 fb49 	bl	800ba54 <malloc>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b3c6:	897b      	ldrh	r3, [r7, #10]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fb79 	bl	800bac4 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"Ewine/getTemp\",1");
 800b3d2:	4918      	ldr	r1, [pc, #96]	; (800b434 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fcfb 	bl	800bdd0 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b3da:	e011      	b.n	800b400 <esp8266_Subscribe_Temp_BrokerMQTT+0x60>
	{
		retry_count++;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b3e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b3e6:	f7f9 fee5 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	dd07      	ble.n	800b400 <esp8266_Subscribe_Temp_BrokerMQTT+0x60>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 800b3f0:	4811      	ldr	r0, [pc, #68]	; (800b438 <esp8266_Subscribe_Temp_BrokerMQTT+0x98>)
 800b3f2:	f000 fcd5 	bl	800bda0 <puts>
			retry_count = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <esp8266_Subscribe_Temp_BrokerMQTT+0x90>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b400:	2301      	movs	r3, #1
 800b402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b406:	490d      	ldr	r1, [pc, #52]	; (800b43c <esp8266_Subscribe_Temp_BrokerMQTT+0x9c>)
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff fb4d 	bl	800aaa8 <esp8266_TransmitCmd>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b01      	cmp	r3, #1
 800b412:	d1e3      	bne.n	800b3dc <esp8266_Subscribe_Temp_BrokerMQTT+0x3c>
		}
	}
	HAL_Delay(100);
 800b414:	2064      	movs	r0, #100	; 0x64
 800b416:	f7f9 fecd 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TEMP_MQTT;
 800b41e:	4b04      	ldr	r3, [pc, #16]	; (800b430 <esp8266_Subscribe_Temp_BrokerMQTT+0x90>)
 800b420:	2209      	movs	r2, #9
 800b422:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <esp8266_Subscribe_Temp_BrokerMQTT+0x90>)
 800b426:	781b      	ldrb	r3, [r3, #0]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20000023 	.word	0x20000023
 800b434:	0800f4e8 	.word	0x0800f4e8
 800b438:	0800f508 	.word	0x0800f508
 800b43c:	0800efec 	.word	0x0800efec

0800b440 <esp8266_Publish_Button_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Publish_Button_BrokerMQTT(uint8_t *data, uint16_t size)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 800b450:	4b23      	ldr	r3, [pc, #140]	; (800b4e0 <esp8266_Publish_Button_BrokerMQTT+0xa0>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b06      	cmp	r3, #6
 800b456:	d902      	bls.n	800b45e <esp8266_Publish_Button_BrokerMQTT+0x1e>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <esp8266_Publish_Button_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 800b45e:	2300      	movs	r3, #0
 800b460:	e03a      	b.n	800b4d8 <esp8266_Publish_Button_BrokerMQTT+0x98>

	uint16_t cmd_len = size + 40;
 800b462:	887b      	ldrh	r3, [r7, #2]
 800b464:	3328      	adds	r3, #40	; 0x28
 800b466:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b468:	8a7b      	ldrh	r3, [r7, #18]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 faf2 	bl	800ba54 <malloc>
 800b470:	4603      	mov	r3, r0
 800b472:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 800b474:	8a7b      	ldrh	r3, [r7, #18]
 800b476:	461a      	mov	r2, r3
 800b478:	2100      	movs	r1, #0
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f000 fb22 	bl	800bac4 <memset>
	//sprintf((char*) cmd, "AT+MQTTPUB=0,\"home/temp\",\"%s\",1,0", data);
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"Ewine/button\",\"%s\",1,0", data);
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	4918      	ldr	r1, [pc, #96]	; (800b4e4 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 fca3 	bl	800bdd0 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b48a:	e011      	b.n	800b4b0 <esp8266_Publish_Button_BrokerMQTT+0x70>
	{
		retry_count++;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	3301      	adds	r3, #1
 800b490:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 800b492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b496:	f7f9 fe8d 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b03      	cmp	r3, #3
 800b49e:	dd07      	ble.n	800b4b0 <esp8266_Publish_Button_BrokerMQTT+0x70>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 800b4a0:	4811      	ldr	r0, [pc, #68]	; (800b4e8 <esp8266_Publish_Button_BrokerMQTT+0xa8>)
 800b4a2:	f000 fc7d 	bl	800bda0 <puts>
			retry_count = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 800b4aa:	4b0d      	ldr	r3, [pc, #52]	; (800b4e0 <esp8266_Publish_Button_BrokerMQTT+0xa0>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4b6:	490d      	ldr	r1, [pc, #52]	; (800b4ec <esp8266_Publish_Button_BrokerMQTT+0xac>)
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff faf5 	bl	800aaa8 <esp8266_TransmitCmd>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d1e3      	bne.n	800b48c <esp8266_Publish_Button_BrokerMQTT+0x4c>
		}
	}
	HAL_Delay(100);
 800b4c4:	2064      	movs	r0, #100	; 0x64
 800b4c6:	f7f9 fe75 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_BUTTON_MQTT;
 800b4ce:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <esp8266_Publish_Button_BrokerMQTT+0xa0>)
 800b4d0:	220a      	movs	r2, #10
 800b4d2:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b4d4:	4b02      	ldr	r3, [pc, #8]	; (800b4e0 <esp8266_Publish_Button_BrokerMQTT+0xa0>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20000023 	.word	0x20000023
 800b4e4:	0800f53c 	.word	0x0800f53c
 800b4e8:	0800f508 	.word	0x0800f508
 800b4ec:	0800efec 	.word	0x0800efec

0800b4f0 <esp8266_Publish_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Publish_Temp_BrokerMQTT(uint8_t *data, uint16_t size)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 800b500:	4b23      	ldr	r3, [pc, #140]	; (800b590 <esp8266_Publish_Temp_BrokerMQTT+0xa0>)
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b06      	cmp	r3, #6
 800b506:	d902      	bls.n	800b50e <esp8266_Publish_Temp_BrokerMQTT+0x1e>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <esp8266_Publish_Temp_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 800b50e:	2300      	movs	r3, #0
 800b510:	e03a      	b.n	800b588 <esp8266_Publish_Temp_BrokerMQTT+0x98>

	uint16_t cmd_len = size + 40;
 800b512:	887b      	ldrh	r3, [r7, #2]
 800b514:	3328      	adds	r3, #40	; 0x28
 800b516:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b518:	8a7b      	ldrh	r3, [r7, #18]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 fa9a 	bl	800ba54 <malloc>
 800b520:	4603      	mov	r3, r0
 800b522:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 800b524:	8a7b      	ldrh	r3, [r7, #18]
 800b526:	461a      	mov	r2, r3
 800b528:	2100      	movs	r1, #0
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 faca 	bl	800bac4 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"Ewine/temp\",\"%s\",1,0", data);
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	4918      	ldr	r1, [pc, #96]	; (800b594 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 fc4b 	bl	800bdd0 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b53a:	e011      	b.n	800b560 <esp8266_Publish_Temp_BrokerMQTT+0x70>
	{
		retry_count++;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	3301      	adds	r3, #1
 800b540:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 800b542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b546:	f7f9 fe35 	bl	80051b4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b03      	cmp	r3, #3
 800b54e:	dd07      	ble.n	800b560 <esp8266_Publish_Temp_BrokerMQTT+0x70>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 800b550:	4811      	ldr	r0, [pc, #68]	; (800b598 <esp8266_Publish_Temp_BrokerMQTT+0xa8>)
 800b552:	f000 fc25 	bl	800bda0 <puts>
			retry_count = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 800b55a:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <esp8266_Publish_Temp_BrokerMQTT+0xa0>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b560:	2301      	movs	r3, #1
 800b562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b566:	490d      	ldr	r1, [pc, #52]	; (800b59c <esp8266_Publish_Temp_BrokerMQTT+0xac>)
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f7ff fa9d 	bl	800aaa8 <esp8266_TransmitCmd>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b01      	cmp	r3, #1
 800b572:	d1e3      	bne.n	800b53c <esp8266_Publish_Temp_BrokerMQTT+0x4c>
		}
	}
	HAL_Delay(100);
 800b574:	2064      	movs	r0, #100	; 0x64
 800b576:	f7f9 fe1d 	bl	80051b4 <HAL_Delay>
	retry_count = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TEMP_MQTT;
 800b57e:	4b04      	ldr	r3, [pc, #16]	; (800b590 <esp8266_Publish_Temp_BrokerMQTT+0xa0>)
 800b580:	220b      	movs	r2, #11
 800b582:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <esp8266_Publish_Temp_BrokerMQTT+0xa0>)
 800b586:	781b      	ldrb	r3, [r3, #0]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000023 	.word	0x20000023
 800b594:	0800f564 	.word	0x0800f564
 800b598:	0800f508 	.word	0x0800f508
 800b59c:	0800efec 	.word	0x0800efec

0800b5a0 <get_mqtt_state>:

uint8_t get_mqtt_state()
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	af00      	add	r7, sp, #0
	return mqtt_state;
 800b5a4:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <get_mqtt_state+0x14>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20000023 	.word	0x20000023

0800b5b8 <atoi>:
 800b5b8:	220a      	movs	r2, #10
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	f001 bb54 	b.w	800cc68 <strtol>

0800b5c0 <__errno>:
 800b5c0:	4b01      	ldr	r3, [pc, #4]	; (800b5c8 <__errno+0x8>)
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	20000024 	.word	0x20000024

0800b5cc <__sflush_r>:
 800b5cc:	898a      	ldrh	r2, [r1, #12]
 800b5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	0710      	lsls	r0, r2, #28
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	d458      	bmi.n	800b68c <__sflush_r+0xc0>
 800b5da:	684b      	ldr	r3, [r1, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dc05      	bgt.n	800b5ec <__sflush_r+0x20>
 800b5e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	dc02      	bgt.n	800b5ec <__sflush_r+0x20>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ee:	2e00      	cmp	r6, #0
 800b5f0:	d0f9      	beq.n	800b5e6 <__sflush_r+0x1a>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5f8:	682f      	ldr	r7, [r5, #0]
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	d032      	beq.n	800b664 <__sflush_r+0x98>
 800b5fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	075a      	lsls	r2, r3, #29
 800b604:	d505      	bpl.n	800b612 <__sflush_r+0x46>
 800b606:	6863      	ldr	r3, [r4, #4]
 800b608:	1ac0      	subs	r0, r0, r3
 800b60a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b60c:	b10b      	cbz	r3, 800b612 <__sflush_r+0x46>
 800b60e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b610:	1ac0      	subs	r0, r0, r3
 800b612:	2300      	movs	r3, #0
 800b614:	4602      	mov	r2, r0
 800b616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b618:	6a21      	ldr	r1, [r4, #32]
 800b61a:	4628      	mov	r0, r5
 800b61c:	47b0      	blx	r6
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	d106      	bne.n	800b632 <__sflush_r+0x66>
 800b624:	6829      	ldr	r1, [r5, #0]
 800b626:	291d      	cmp	r1, #29
 800b628:	d82c      	bhi.n	800b684 <__sflush_r+0xb8>
 800b62a:	4a2a      	ldr	r2, [pc, #168]	; (800b6d4 <__sflush_r+0x108>)
 800b62c:	40ca      	lsrs	r2, r1
 800b62e:	07d6      	lsls	r6, r2, #31
 800b630:	d528      	bpl.n	800b684 <__sflush_r+0xb8>
 800b632:	2200      	movs	r2, #0
 800b634:	6062      	str	r2, [r4, #4]
 800b636:	04d9      	lsls	r1, r3, #19
 800b638:	6922      	ldr	r2, [r4, #16]
 800b63a:	6022      	str	r2, [r4, #0]
 800b63c:	d504      	bpl.n	800b648 <__sflush_r+0x7c>
 800b63e:	1c42      	adds	r2, r0, #1
 800b640:	d101      	bne.n	800b646 <__sflush_r+0x7a>
 800b642:	682b      	ldr	r3, [r5, #0]
 800b644:	b903      	cbnz	r3, 800b648 <__sflush_r+0x7c>
 800b646:	6560      	str	r0, [r4, #84]	; 0x54
 800b648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b64a:	602f      	str	r7, [r5, #0]
 800b64c:	2900      	cmp	r1, #0
 800b64e:	d0ca      	beq.n	800b5e6 <__sflush_r+0x1a>
 800b650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b654:	4299      	cmp	r1, r3
 800b656:	d002      	beq.n	800b65e <__sflush_r+0x92>
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 fa3b 	bl	800bad4 <_free_r>
 800b65e:	2000      	movs	r0, #0
 800b660:	6360      	str	r0, [r4, #52]	; 0x34
 800b662:	e7c1      	b.n	800b5e8 <__sflush_r+0x1c>
 800b664:	6a21      	ldr	r1, [r4, #32]
 800b666:	2301      	movs	r3, #1
 800b668:	4628      	mov	r0, r5
 800b66a:	47b0      	blx	r6
 800b66c:	1c41      	adds	r1, r0, #1
 800b66e:	d1c7      	bne.n	800b600 <__sflush_r+0x34>
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0c4      	beq.n	800b600 <__sflush_r+0x34>
 800b676:	2b1d      	cmp	r3, #29
 800b678:	d001      	beq.n	800b67e <__sflush_r+0xb2>
 800b67a:	2b16      	cmp	r3, #22
 800b67c:	d101      	bne.n	800b682 <__sflush_r+0xb6>
 800b67e:	602f      	str	r7, [r5, #0]
 800b680:	e7b1      	b.n	800b5e6 <__sflush_r+0x1a>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	e7ad      	b.n	800b5e8 <__sflush_r+0x1c>
 800b68c:	690f      	ldr	r7, [r1, #16]
 800b68e:	2f00      	cmp	r7, #0
 800b690:	d0a9      	beq.n	800b5e6 <__sflush_r+0x1a>
 800b692:	0793      	lsls	r3, r2, #30
 800b694:	680e      	ldr	r6, [r1, #0]
 800b696:	bf08      	it	eq
 800b698:	694b      	ldreq	r3, [r1, #20]
 800b69a:	600f      	str	r7, [r1, #0]
 800b69c:	bf18      	it	ne
 800b69e:	2300      	movne	r3, #0
 800b6a0:	eba6 0807 	sub.w	r8, r6, r7
 800b6a4:	608b      	str	r3, [r1, #8]
 800b6a6:	f1b8 0f00 	cmp.w	r8, #0
 800b6aa:	dd9c      	ble.n	800b5e6 <__sflush_r+0x1a>
 800b6ac:	6a21      	ldr	r1, [r4, #32]
 800b6ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6b0:	4643      	mov	r3, r8
 800b6b2:	463a      	mov	r2, r7
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	47b0      	blx	r6
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	dc06      	bgt.n	800b6ca <__sflush_r+0xfe>
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c2:	81a3      	strh	r3, [r4, #12]
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	e78e      	b.n	800b5e8 <__sflush_r+0x1c>
 800b6ca:	4407      	add	r7, r0
 800b6cc:	eba8 0800 	sub.w	r8, r8, r0
 800b6d0:	e7e9      	b.n	800b6a6 <__sflush_r+0xda>
 800b6d2:	bf00      	nop
 800b6d4:	20400001 	.word	0x20400001

0800b6d8 <_fflush_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	690b      	ldr	r3, [r1, #16]
 800b6dc:	4605      	mov	r5, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	b913      	cbnz	r3, 800b6e8 <_fflush_r+0x10>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	b118      	cbz	r0, 800b6f2 <_fflush_r+0x1a>
 800b6ea:	6983      	ldr	r3, [r0, #24]
 800b6ec:	b90b      	cbnz	r3, 800b6f2 <_fflush_r+0x1a>
 800b6ee:	f000 f887 	bl	800b800 <__sinit>
 800b6f2:	4b14      	ldr	r3, [pc, #80]	; (800b744 <_fflush_r+0x6c>)
 800b6f4:	429c      	cmp	r4, r3
 800b6f6:	d11b      	bne.n	800b730 <_fflush_r+0x58>
 800b6f8:	686c      	ldr	r4, [r5, #4]
 800b6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0ef      	beq.n	800b6e2 <_fflush_r+0xa>
 800b702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b704:	07d0      	lsls	r0, r2, #31
 800b706:	d404      	bmi.n	800b712 <_fflush_r+0x3a>
 800b708:	0599      	lsls	r1, r3, #22
 800b70a:	d402      	bmi.n	800b712 <_fflush_r+0x3a>
 800b70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70e:	f000 f93a 	bl	800b986 <__retarget_lock_acquire_recursive>
 800b712:	4628      	mov	r0, r5
 800b714:	4621      	mov	r1, r4
 800b716:	f7ff ff59 	bl	800b5cc <__sflush_r>
 800b71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b71c:	07da      	lsls	r2, r3, #31
 800b71e:	4605      	mov	r5, r0
 800b720:	d4e0      	bmi.n	800b6e4 <_fflush_r+0xc>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	059b      	lsls	r3, r3, #22
 800b726:	d4dd      	bmi.n	800b6e4 <_fflush_r+0xc>
 800b728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72a:	f000 f92d 	bl	800b988 <__retarget_lock_release_recursive>
 800b72e:	e7d9      	b.n	800b6e4 <_fflush_r+0xc>
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <_fflush_r+0x70>)
 800b732:	429c      	cmp	r4, r3
 800b734:	d101      	bne.n	800b73a <_fflush_r+0x62>
 800b736:	68ac      	ldr	r4, [r5, #8]
 800b738:	e7df      	b.n	800b6fa <_fflush_r+0x22>
 800b73a:	4b04      	ldr	r3, [pc, #16]	; (800b74c <_fflush_r+0x74>)
 800b73c:	429c      	cmp	r4, r3
 800b73e:	bf08      	it	eq
 800b740:	68ec      	ldreq	r4, [r5, #12]
 800b742:	e7da      	b.n	800b6fa <_fflush_r+0x22>
 800b744:	0800f774 	.word	0x0800f774
 800b748:	0800f794 	.word	0x0800f794
 800b74c:	0800f754 	.word	0x0800f754

0800b750 <std>:
 800b750:	2300      	movs	r3, #0
 800b752:	b510      	push	{r4, lr}
 800b754:	4604      	mov	r4, r0
 800b756:	e9c0 3300 	strd	r3, r3, [r0]
 800b75a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b75e:	6083      	str	r3, [r0, #8]
 800b760:	8181      	strh	r1, [r0, #12]
 800b762:	6643      	str	r3, [r0, #100]	; 0x64
 800b764:	81c2      	strh	r2, [r0, #14]
 800b766:	6183      	str	r3, [r0, #24]
 800b768:	4619      	mov	r1, r3
 800b76a:	2208      	movs	r2, #8
 800b76c:	305c      	adds	r0, #92	; 0x5c
 800b76e:	f000 f9a9 	bl	800bac4 <memset>
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <std+0x38>)
 800b774:	6263      	str	r3, [r4, #36]	; 0x24
 800b776:	4b05      	ldr	r3, [pc, #20]	; (800b78c <std+0x3c>)
 800b778:	62a3      	str	r3, [r4, #40]	; 0x28
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <std+0x40>)
 800b77c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b77e:	4b05      	ldr	r3, [pc, #20]	; (800b794 <std+0x44>)
 800b780:	6224      	str	r4, [r4, #32]
 800b782:	6323      	str	r3, [r4, #48]	; 0x30
 800b784:	bd10      	pop	{r4, pc}
 800b786:	bf00      	nop
 800b788:	0800be11 	.word	0x0800be11
 800b78c:	0800be33 	.word	0x0800be33
 800b790:	0800be6b 	.word	0x0800be6b
 800b794:	0800be8f 	.word	0x0800be8f

0800b798 <_cleanup_r>:
 800b798:	4901      	ldr	r1, [pc, #4]	; (800b7a0 <_cleanup_r+0x8>)
 800b79a:	f000 b8af 	b.w	800b8fc <_fwalk_reent>
 800b79e:	bf00      	nop
 800b7a0:	0800b6d9 	.word	0x0800b6d9

0800b7a4 <__sfmoreglue>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	2268      	movs	r2, #104	; 0x68
 800b7a8:	1e4d      	subs	r5, r1, #1
 800b7aa:	4355      	muls	r5, r2
 800b7ac:	460e      	mov	r6, r1
 800b7ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7b2:	f000 f9fb 	bl	800bbac <_malloc_r>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	b140      	cbz	r0, 800b7cc <__sfmoreglue+0x28>
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b7c0:	300c      	adds	r0, #12
 800b7c2:	60a0      	str	r0, [r4, #8]
 800b7c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7c8:	f000 f97c 	bl	800bac4 <memset>
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}

0800b7d0 <__sfp_lock_acquire>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <__sfp_lock_acquire+0x8>)
 800b7d2:	f000 b8d8 	b.w	800b986 <__retarget_lock_acquire_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	20001757 	.word	0x20001757

0800b7dc <__sfp_lock_release>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__sfp_lock_release+0x8>)
 800b7de:	f000 b8d3 	b.w	800b988 <__retarget_lock_release_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	20001757 	.word	0x20001757

0800b7e8 <__sinit_lock_acquire>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__sinit_lock_acquire+0x8>)
 800b7ea:	f000 b8cc 	b.w	800b986 <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	20001758 	.word	0x20001758

0800b7f4 <__sinit_lock_release>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__sinit_lock_release+0x8>)
 800b7f6:	f000 b8c7 	b.w	800b988 <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20001758 	.word	0x20001758

0800b800 <__sinit>:
 800b800:	b510      	push	{r4, lr}
 800b802:	4604      	mov	r4, r0
 800b804:	f7ff fff0 	bl	800b7e8 <__sinit_lock_acquire>
 800b808:	69a3      	ldr	r3, [r4, #24]
 800b80a:	b11b      	cbz	r3, 800b814 <__sinit+0x14>
 800b80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b810:	f7ff bff0 	b.w	800b7f4 <__sinit_lock_release>
 800b814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b818:	6523      	str	r3, [r4, #80]	; 0x50
 800b81a:	4b13      	ldr	r3, [pc, #76]	; (800b868 <__sinit+0x68>)
 800b81c:	4a13      	ldr	r2, [pc, #76]	; (800b86c <__sinit+0x6c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	62a2      	str	r2, [r4, #40]	; 0x28
 800b822:	42a3      	cmp	r3, r4
 800b824:	bf04      	itt	eq
 800b826:	2301      	moveq	r3, #1
 800b828:	61a3      	streq	r3, [r4, #24]
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 f820 	bl	800b870 <__sfp>
 800b830:	6060      	str	r0, [r4, #4]
 800b832:	4620      	mov	r0, r4
 800b834:	f000 f81c 	bl	800b870 <__sfp>
 800b838:	60a0      	str	r0, [r4, #8]
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 f818 	bl	800b870 <__sfp>
 800b840:	2200      	movs	r2, #0
 800b842:	60e0      	str	r0, [r4, #12]
 800b844:	2104      	movs	r1, #4
 800b846:	6860      	ldr	r0, [r4, #4]
 800b848:	f7ff ff82 	bl	800b750 <std>
 800b84c:	68a0      	ldr	r0, [r4, #8]
 800b84e:	2201      	movs	r2, #1
 800b850:	2109      	movs	r1, #9
 800b852:	f7ff ff7d 	bl	800b750 <std>
 800b856:	68e0      	ldr	r0, [r4, #12]
 800b858:	2202      	movs	r2, #2
 800b85a:	2112      	movs	r1, #18
 800b85c:	f7ff ff78 	bl	800b750 <std>
 800b860:	2301      	movs	r3, #1
 800b862:	61a3      	str	r3, [r4, #24]
 800b864:	e7d2      	b.n	800b80c <__sinit+0xc>
 800b866:	bf00      	nop
 800b868:	0800f7b4 	.word	0x0800f7b4
 800b86c:	0800b799 	.word	0x0800b799

0800b870 <__sfp>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	4607      	mov	r7, r0
 800b874:	f7ff ffac 	bl	800b7d0 <__sfp_lock_acquire>
 800b878:	4b1e      	ldr	r3, [pc, #120]	; (800b8f4 <__sfp+0x84>)
 800b87a:	681e      	ldr	r6, [r3, #0]
 800b87c:	69b3      	ldr	r3, [r6, #24]
 800b87e:	b913      	cbnz	r3, 800b886 <__sfp+0x16>
 800b880:	4630      	mov	r0, r6
 800b882:	f7ff ffbd 	bl	800b800 <__sinit>
 800b886:	3648      	adds	r6, #72	; 0x48
 800b888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	d503      	bpl.n	800b898 <__sfp+0x28>
 800b890:	6833      	ldr	r3, [r6, #0]
 800b892:	b30b      	cbz	r3, 800b8d8 <__sfp+0x68>
 800b894:	6836      	ldr	r6, [r6, #0]
 800b896:	e7f7      	b.n	800b888 <__sfp+0x18>
 800b898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b89c:	b9d5      	cbnz	r5, 800b8d4 <__sfp+0x64>
 800b89e:	4b16      	ldr	r3, [pc, #88]	; (800b8f8 <__sfp+0x88>)
 800b8a0:	60e3      	str	r3, [r4, #12]
 800b8a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8a6:	6665      	str	r5, [r4, #100]	; 0x64
 800b8a8:	f000 f86c 	bl	800b984 <__retarget_lock_init_recursive>
 800b8ac:	f7ff ff96 	bl	800b7dc <__sfp_lock_release>
 800b8b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8b8:	6025      	str	r5, [r4, #0]
 800b8ba:	61a5      	str	r5, [r4, #24]
 800b8bc:	2208      	movs	r2, #8
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8c4:	f000 f8fe 	bl	800bac4 <memset>
 800b8c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d4:	3468      	adds	r4, #104	; 0x68
 800b8d6:	e7d9      	b.n	800b88c <__sfp+0x1c>
 800b8d8:	2104      	movs	r1, #4
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f7ff ff62 	bl	800b7a4 <__sfmoreglue>
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	6030      	str	r0, [r6, #0]
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d1d5      	bne.n	800b894 <__sfp+0x24>
 800b8e8:	f7ff ff78 	bl	800b7dc <__sfp_lock_release>
 800b8ec:	230c      	movs	r3, #12
 800b8ee:	603b      	str	r3, [r7, #0]
 800b8f0:	e7ee      	b.n	800b8d0 <__sfp+0x60>
 800b8f2:	bf00      	nop
 800b8f4:	0800f7b4 	.word	0x0800f7b4
 800b8f8:	ffff0001 	.word	0xffff0001

0800b8fc <_fwalk_reent>:
 800b8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b900:	4606      	mov	r6, r0
 800b902:	4688      	mov	r8, r1
 800b904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b908:	2700      	movs	r7, #0
 800b90a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b90e:	f1b9 0901 	subs.w	r9, r9, #1
 800b912:	d505      	bpl.n	800b920 <_fwalk_reent+0x24>
 800b914:	6824      	ldr	r4, [r4, #0]
 800b916:	2c00      	cmp	r4, #0
 800b918:	d1f7      	bne.n	800b90a <_fwalk_reent+0xe>
 800b91a:	4638      	mov	r0, r7
 800b91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b920:	89ab      	ldrh	r3, [r5, #12]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d907      	bls.n	800b936 <_fwalk_reent+0x3a>
 800b926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b92a:	3301      	adds	r3, #1
 800b92c:	d003      	beq.n	800b936 <_fwalk_reent+0x3a>
 800b92e:	4629      	mov	r1, r5
 800b930:	4630      	mov	r0, r6
 800b932:	47c0      	blx	r8
 800b934:	4307      	orrs	r7, r0
 800b936:	3568      	adds	r5, #104	; 0x68
 800b938:	e7e9      	b.n	800b90e <_fwalk_reent+0x12>
	...

0800b93c <__libc_init_array>:
 800b93c:	b570      	push	{r4, r5, r6, lr}
 800b93e:	4d0d      	ldr	r5, [pc, #52]	; (800b974 <__libc_init_array+0x38>)
 800b940:	4c0d      	ldr	r4, [pc, #52]	; (800b978 <__libc_init_array+0x3c>)
 800b942:	1b64      	subs	r4, r4, r5
 800b944:	10a4      	asrs	r4, r4, #2
 800b946:	2600      	movs	r6, #0
 800b948:	42a6      	cmp	r6, r4
 800b94a:	d109      	bne.n	800b960 <__libc_init_array+0x24>
 800b94c:	4d0b      	ldr	r5, [pc, #44]	; (800b97c <__libc_init_array+0x40>)
 800b94e:	4c0c      	ldr	r4, [pc, #48]	; (800b980 <__libc_init_array+0x44>)
 800b950:	f003 f854 	bl	800e9fc <_init>
 800b954:	1b64      	subs	r4, r4, r5
 800b956:	10a4      	asrs	r4, r4, #2
 800b958:	2600      	movs	r6, #0
 800b95a:	42a6      	cmp	r6, r4
 800b95c:	d105      	bne.n	800b96a <__libc_init_array+0x2e>
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	f855 3b04 	ldr.w	r3, [r5], #4
 800b964:	4798      	blx	r3
 800b966:	3601      	adds	r6, #1
 800b968:	e7ee      	b.n	800b948 <__libc_init_array+0xc>
 800b96a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b96e:	4798      	blx	r3
 800b970:	3601      	adds	r6, #1
 800b972:	e7f2      	b.n	800b95a <__libc_init_array+0x1e>
 800b974:	0800fa8c 	.word	0x0800fa8c
 800b978:	0800fa8c 	.word	0x0800fa8c
 800b97c:	0800fa8c 	.word	0x0800fa8c
 800b980:	0800fa90 	.word	0x0800fa90

0800b984 <__retarget_lock_init_recursive>:
 800b984:	4770      	bx	lr

0800b986 <__retarget_lock_acquire_recursive>:
 800b986:	4770      	bx	lr

0800b988 <__retarget_lock_release_recursive>:
 800b988:	4770      	bx	lr

0800b98a <__swhatbuf_r>:
 800b98a:	b570      	push	{r4, r5, r6, lr}
 800b98c:	460e      	mov	r6, r1
 800b98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b992:	2900      	cmp	r1, #0
 800b994:	b096      	sub	sp, #88	; 0x58
 800b996:	4614      	mov	r4, r2
 800b998:	461d      	mov	r5, r3
 800b99a:	da08      	bge.n	800b9ae <__swhatbuf_r+0x24>
 800b99c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	602a      	str	r2, [r5, #0]
 800b9a4:	061a      	lsls	r2, r3, #24
 800b9a6:	d410      	bmi.n	800b9ca <__swhatbuf_r+0x40>
 800b9a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ac:	e00e      	b.n	800b9cc <__swhatbuf_r+0x42>
 800b9ae:	466a      	mov	r2, sp
 800b9b0:	f001 fa66 	bl	800ce80 <_fstat_r>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	dbf1      	blt.n	800b99c <__swhatbuf_r+0x12>
 800b9b8:	9a01      	ldr	r2, [sp, #4]
 800b9ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9c2:	425a      	negs	r2, r3
 800b9c4:	415a      	adcs	r2, r3
 800b9c6:	602a      	str	r2, [r5, #0]
 800b9c8:	e7ee      	b.n	800b9a8 <__swhatbuf_r+0x1e>
 800b9ca:	2340      	movs	r3, #64	; 0x40
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	b016      	add	sp, #88	; 0x58
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}

0800b9d4 <__smakebuf_r>:
 800b9d4:	898b      	ldrh	r3, [r1, #12]
 800b9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9d8:	079d      	lsls	r5, r3, #30
 800b9da:	4606      	mov	r6, r0
 800b9dc:	460c      	mov	r4, r1
 800b9de:	d507      	bpl.n	800b9f0 <__smakebuf_r+0x1c>
 800b9e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	6123      	str	r3, [r4, #16]
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	6163      	str	r3, [r4, #20]
 800b9ec:	b002      	add	sp, #8
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	ab01      	add	r3, sp, #4
 800b9f2:	466a      	mov	r2, sp
 800b9f4:	f7ff ffc9 	bl	800b98a <__swhatbuf_r>
 800b9f8:	9900      	ldr	r1, [sp, #0]
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f000 f8d5 	bl	800bbac <_malloc_r>
 800ba02:	b948      	cbnz	r0, 800ba18 <__smakebuf_r+0x44>
 800ba04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba08:	059a      	lsls	r2, r3, #22
 800ba0a:	d4ef      	bmi.n	800b9ec <__smakebuf_r+0x18>
 800ba0c:	f023 0303 	bic.w	r3, r3, #3
 800ba10:	f043 0302 	orr.w	r3, r3, #2
 800ba14:	81a3      	strh	r3, [r4, #12]
 800ba16:	e7e3      	b.n	800b9e0 <__smakebuf_r+0xc>
 800ba18:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <__smakebuf_r+0x7c>)
 800ba1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	6020      	str	r0, [r4, #0]
 800ba20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba24:	81a3      	strh	r3, [r4, #12]
 800ba26:	9b00      	ldr	r3, [sp, #0]
 800ba28:	6163      	str	r3, [r4, #20]
 800ba2a:	9b01      	ldr	r3, [sp, #4]
 800ba2c:	6120      	str	r0, [r4, #16]
 800ba2e:	b15b      	cbz	r3, 800ba48 <__smakebuf_r+0x74>
 800ba30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba34:	4630      	mov	r0, r6
 800ba36:	f001 fda5 	bl	800d584 <_isatty_r>
 800ba3a:	b128      	cbz	r0, 800ba48 <__smakebuf_r+0x74>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	f023 0303 	bic.w	r3, r3, #3
 800ba42:	f043 0301 	orr.w	r3, r3, #1
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	89a0      	ldrh	r0, [r4, #12]
 800ba4a:	4305      	orrs	r5, r0
 800ba4c:	81a5      	strh	r5, [r4, #12]
 800ba4e:	e7cd      	b.n	800b9ec <__smakebuf_r+0x18>
 800ba50:	0800b799 	.word	0x0800b799

0800ba54 <malloc>:
 800ba54:	4b02      	ldr	r3, [pc, #8]	; (800ba60 <malloc+0xc>)
 800ba56:	4601      	mov	r1, r0
 800ba58:	6818      	ldr	r0, [r3, #0]
 800ba5a:	f000 b8a7 	b.w	800bbac <_malloc_r>
 800ba5e:	bf00      	nop
 800ba60:	20000024 	.word	0x20000024

0800ba64 <free>:
 800ba64:	4b02      	ldr	r3, [pc, #8]	; (800ba70 <free+0xc>)
 800ba66:	4601      	mov	r1, r0
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	f000 b833 	b.w	800bad4 <_free_r>
 800ba6e:	bf00      	nop
 800ba70:	20000024 	.word	0x20000024

0800ba74 <memcpy>:
 800ba74:	440a      	add	r2, r1
 800ba76:	4291      	cmp	r1, r2
 800ba78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba7c:	d100      	bne.n	800ba80 <memcpy+0xc>
 800ba7e:	4770      	bx	lr
 800ba80:	b510      	push	{r4, lr}
 800ba82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba8a:	4291      	cmp	r1, r2
 800ba8c:	d1f9      	bne.n	800ba82 <memcpy+0xe>
 800ba8e:	bd10      	pop	{r4, pc}

0800ba90 <memmove>:
 800ba90:	4288      	cmp	r0, r1
 800ba92:	b510      	push	{r4, lr}
 800ba94:	eb01 0402 	add.w	r4, r1, r2
 800ba98:	d902      	bls.n	800baa0 <memmove+0x10>
 800ba9a:	4284      	cmp	r4, r0
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	d807      	bhi.n	800bab0 <memmove+0x20>
 800baa0:	1e43      	subs	r3, r0, #1
 800baa2:	42a1      	cmp	r1, r4
 800baa4:	d008      	beq.n	800bab8 <memmove+0x28>
 800baa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baae:	e7f8      	b.n	800baa2 <memmove+0x12>
 800bab0:	4402      	add	r2, r0
 800bab2:	4601      	mov	r1, r0
 800bab4:	428a      	cmp	r2, r1
 800bab6:	d100      	bne.n	800baba <memmove+0x2a>
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800babe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bac2:	e7f7      	b.n	800bab4 <memmove+0x24>

0800bac4 <memset>:
 800bac4:	4402      	add	r2, r0
 800bac6:	4603      	mov	r3, r0
 800bac8:	4293      	cmp	r3, r2
 800baca:	d100      	bne.n	800bace <memset+0xa>
 800bacc:	4770      	bx	lr
 800bace:	f803 1b01 	strb.w	r1, [r3], #1
 800bad2:	e7f9      	b.n	800bac8 <memset+0x4>

0800bad4 <_free_r>:
 800bad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d044      	beq.n	800bb64 <_free_r+0x90>
 800bada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bade:	9001      	str	r0, [sp, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f1a1 0404 	sub.w	r4, r1, #4
 800bae6:	bfb8      	it	lt
 800bae8:	18e4      	addlt	r4, r4, r3
 800baea:	f001 fd7f 	bl	800d5ec <__malloc_lock>
 800baee:	4a1e      	ldr	r2, [pc, #120]	; (800bb68 <_free_r+0x94>)
 800baf0:	9801      	ldr	r0, [sp, #4]
 800baf2:	6813      	ldr	r3, [r2, #0]
 800baf4:	b933      	cbnz	r3, 800bb04 <_free_r+0x30>
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	6014      	str	r4, [r2, #0]
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb00:	f001 bd7a 	b.w	800d5f8 <__malloc_unlock>
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	d908      	bls.n	800bb1a <_free_r+0x46>
 800bb08:	6825      	ldr	r5, [r4, #0]
 800bb0a:	1961      	adds	r1, r4, r5
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	bf01      	itttt	eq
 800bb10:	6819      	ldreq	r1, [r3, #0]
 800bb12:	685b      	ldreq	r3, [r3, #4]
 800bb14:	1949      	addeq	r1, r1, r5
 800bb16:	6021      	streq	r1, [r4, #0]
 800bb18:	e7ed      	b.n	800baf6 <_free_r+0x22>
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	b10b      	cbz	r3, 800bb24 <_free_r+0x50>
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d9fa      	bls.n	800bb1a <_free_r+0x46>
 800bb24:	6811      	ldr	r1, [r2, #0]
 800bb26:	1855      	adds	r5, r2, r1
 800bb28:	42a5      	cmp	r5, r4
 800bb2a:	d10b      	bne.n	800bb44 <_free_r+0x70>
 800bb2c:	6824      	ldr	r4, [r4, #0]
 800bb2e:	4421      	add	r1, r4
 800bb30:	1854      	adds	r4, r2, r1
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	6011      	str	r1, [r2, #0]
 800bb36:	d1e0      	bne.n	800bafa <_free_r+0x26>
 800bb38:	681c      	ldr	r4, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	6053      	str	r3, [r2, #4]
 800bb3e:	4421      	add	r1, r4
 800bb40:	6011      	str	r1, [r2, #0]
 800bb42:	e7da      	b.n	800bafa <_free_r+0x26>
 800bb44:	d902      	bls.n	800bb4c <_free_r+0x78>
 800bb46:	230c      	movs	r3, #12
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	e7d6      	b.n	800bafa <_free_r+0x26>
 800bb4c:	6825      	ldr	r5, [r4, #0]
 800bb4e:	1961      	adds	r1, r4, r5
 800bb50:	428b      	cmp	r3, r1
 800bb52:	bf04      	itt	eq
 800bb54:	6819      	ldreq	r1, [r3, #0]
 800bb56:	685b      	ldreq	r3, [r3, #4]
 800bb58:	6063      	str	r3, [r4, #4]
 800bb5a:	bf04      	itt	eq
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	6054      	str	r4, [r2, #4]
 800bb62:	e7ca      	b.n	800bafa <_free_r+0x26>
 800bb64:	b003      	add	sp, #12
 800bb66:	bd30      	pop	{r4, r5, pc}
 800bb68:	2000175c 	.word	0x2000175c

0800bb6c <sbrk_aligned>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	4e0e      	ldr	r6, [pc, #56]	; (800bba8 <sbrk_aligned+0x3c>)
 800bb70:	460c      	mov	r4, r1
 800bb72:	6831      	ldr	r1, [r6, #0]
 800bb74:	4605      	mov	r5, r0
 800bb76:	b911      	cbnz	r1, 800bb7e <sbrk_aligned+0x12>
 800bb78:	f000 f91a 	bl	800bdb0 <_sbrk_r>
 800bb7c:	6030      	str	r0, [r6, #0]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4628      	mov	r0, r5
 800bb82:	f000 f915 	bl	800bdb0 <_sbrk_r>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	d00a      	beq.n	800bba0 <sbrk_aligned+0x34>
 800bb8a:	1cc4      	adds	r4, r0, #3
 800bb8c:	f024 0403 	bic.w	r4, r4, #3
 800bb90:	42a0      	cmp	r0, r4
 800bb92:	d007      	beq.n	800bba4 <sbrk_aligned+0x38>
 800bb94:	1a21      	subs	r1, r4, r0
 800bb96:	4628      	mov	r0, r5
 800bb98:	f000 f90a 	bl	800bdb0 <_sbrk_r>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d101      	bne.n	800bba4 <sbrk_aligned+0x38>
 800bba0:	f04f 34ff 	mov.w	r4, #4294967295
 800bba4:	4620      	mov	r0, r4
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	20001760 	.word	0x20001760

0800bbac <_malloc_r>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	1ccd      	adds	r5, r1, #3
 800bbb2:	f025 0503 	bic.w	r5, r5, #3
 800bbb6:	3508      	adds	r5, #8
 800bbb8:	2d0c      	cmp	r5, #12
 800bbba:	bf38      	it	cc
 800bbbc:	250c      	movcc	r5, #12
 800bbbe:	2d00      	cmp	r5, #0
 800bbc0:	4607      	mov	r7, r0
 800bbc2:	db01      	blt.n	800bbc8 <_malloc_r+0x1c>
 800bbc4:	42a9      	cmp	r1, r5
 800bbc6:	d905      	bls.n	800bbd4 <_malloc_r+0x28>
 800bbc8:	230c      	movs	r3, #12
 800bbca:	603b      	str	r3, [r7, #0]
 800bbcc:	2600      	movs	r6, #0
 800bbce:	4630      	mov	r0, r6
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	4e2e      	ldr	r6, [pc, #184]	; (800bc90 <_malloc_r+0xe4>)
 800bbd6:	f001 fd09 	bl	800d5ec <__malloc_lock>
 800bbda:	6833      	ldr	r3, [r6, #0]
 800bbdc:	461c      	mov	r4, r3
 800bbde:	bb34      	cbnz	r4, 800bc2e <_malloc_r+0x82>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f7ff ffc2 	bl	800bb6c <sbrk_aligned>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	4604      	mov	r4, r0
 800bbec:	d14d      	bne.n	800bc8a <_malloc_r+0xde>
 800bbee:	6834      	ldr	r4, [r6, #0]
 800bbf0:	4626      	mov	r6, r4
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	d140      	bne.n	800bc78 <_malloc_r+0xcc>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	eb04 0803 	add.w	r8, r4, r3
 800bc00:	f000 f8d6 	bl	800bdb0 <_sbrk_r>
 800bc04:	4580      	cmp	r8, r0
 800bc06:	d13a      	bne.n	800bc7e <_malloc_r+0xd2>
 800bc08:	6821      	ldr	r1, [r4, #0]
 800bc0a:	3503      	adds	r5, #3
 800bc0c:	1a6d      	subs	r5, r5, r1
 800bc0e:	f025 0503 	bic.w	r5, r5, #3
 800bc12:	3508      	adds	r5, #8
 800bc14:	2d0c      	cmp	r5, #12
 800bc16:	bf38      	it	cc
 800bc18:	250c      	movcc	r5, #12
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	f7ff ffa5 	bl	800bb6c <sbrk_aligned>
 800bc22:	3001      	adds	r0, #1
 800bc24:	d02b      	beq.n	800bc7e <_malloc_r+0xd2>
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	442b      	add	r3, r5
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	e00e      	b.n	800bc4c <_malloc_r+0xa0>
 800bc2e:	6822      	ldr	r2, [r4, #0]
 800bc30:	1b52      	subs	r2, r2, r5
 800bc32:	d41e      	bmi.n	800bc72 <_malloc_r+0xc6>
 800bc34:	2a0b      	cmp	r2, #11
 800bc36:	d916      	bls.n	800bc66 <_malloc_r+0xba>
 800bc38:	1961      	adds	r1, r4, r5
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	6025      	str	r5, [r4, #0]
 800bc3e:	bf18      	it	ne
 800bc40:	6059      	strne	r1, [r3, #4]
 800bc42:	6863      	ldr	r3, [r4, #4]
 800bc44:	bf08      	it	eq
 800bc46:	6031      	streq	r1, [r6, #0]
 800bc48:	5162      	str	r2, [r4, r5]
 800bc4a:	604b      	str	r3, [r1, #4]
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f104 060b 	add.w	r6, r4, #11
 800bc52:	f001 fcd1 	bl	800d5f8 <__malloc_unlock>
 800bc56:	f026 0607 	bic.w	r6, r6, #7
 800bc5a:	1d23      	adds	r3, r4, #4
 800bc5c:	1af2      	subs	r2, r6, r3
 800bc5e:	d0b6      	beq.n	800bbce <_malloc_r+0x22>
 800bc60:	1b9b      	subs	r3, r3, r6
 800bc62:	50a3      	str	r3, [r4, r2]
 800bc64:	e7b3      	b.n	800bbce <_malloc_r+0x22>
 800bc66:	6862      	ldr	r2, [r4, #4]
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	bf0c      	ite	eq
 800bc6c:	6032      	streq	r2, [r6, #0]
 800bc6e:	605a      	strne	r2, [r3, #4]
 800bc70:	e7ec      	b.n	800bc4c <_malloc_r+0xa0>
 800bc72:	4623      	mov	r3, r4
 800bc74:	6864      	ldr	r4, [r4, #4]
 800bc76:	e7b2      	b.n	800bbde <_malloc_r+0x32>
 800bc78:	4634      	mov	r4, r6
 800bc7a:	6876      	ldr	r6, [r6, #4]
 800bc7c:	e7b9      	b.n	800bbf2 <_malloc_r+0x46>
 800bc7e:	230c      	movs	r3, #12
 800bc80:	603b      	str	r3, [r7, #0]
 800bc82:	4638      	mov	r0, r7
 800bc84:	f001 fcb8 	bl	800d5f8 <__malloc_unlock>
 800bc88:	e7a1      	b.n	800bbce <_malloc_r+0x22>
 800bc8a:	6025      	str	r5, [r4, #0]
 800bc8c:	e7de      	b.n	800bc4c <_malloc_r+0xa0>
 800bc8e:	bf00      	nop
 800bc90:	2000175c 	.word	0x2000175c

0800bc94 <iprintf>:
 800bc94:	b40f      	push	{r0, r1, r2, r3}
 800bc96:	4b0a      	ldr	r3, [pc, #40]	; (800bcc0 <iprintf+0x2c>)
 800bc98:	b513      	push	{r0, r1, r4, lr}
 800bc9a:	681c      	ldr	r4, [r3, #0]
 800bc9c:	b124      	cbz	r4, 800bca8 <iprintf+0x14>
 800bc9e:	69a3      	ldr	r3, [r4, #24]
 800bca0:	b913      	cbnz	r3, 800bca8 <iprintf+0x14>
 800bca2:	4620      	mov	r0, r4
 800bca4:	f7ff fdac 	bl	800b800 <__sinit>
 800bca8:	ab05      	add	r3, sp, #20
 800bcaa:	9a04      	ldr	r2, [sp, #16]
 800bcac:	68a1      	ldr	r1, [r4, #8]
 800bcae:	9301      	str	r3, [sp, #4]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f002 fb33 	bl	800e31c <_vfiprintf_r>
 800bcb6:	b002      	add	sp, #8
 800bcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcbc:	b004      	add	sp, #16
 800bcbe:	4770      	bx	lr
 800bcc0:	20000024 	.word	0x20000024

0800bcc4 <_puts_r>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	4605      	mov	r5, r0
 800bcca:	b118      	cbz	r0, 800bcd4 <_puts_r+0x10>
 800bccc:	6983      	ldr	r3, [r0, #24]
 800bcce:	b90b      	cbnz	r3, 800bcd4 <_puts_r+0x10>
 800bcd0:	f7ff fd96 	bl	800b800 <__sinit>
 800bcd4:	69ab      	ldr	r3, [r5, #24]
 800bcd6:	68ac      	ldr	r4, [r5, #8]
 800bcd8:	b913      	cbnz	r3, 800bce0 <_puts_r+0x1c>
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7ff fd90 	bl	800b800 <__sinit>
 800bce0:	4b2c      	ldr	r3, [pc, #176]	; (800bd94 <_puts_r+0xd0>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d120      	bne.n	800bd28 <_puts_r+0x64>
 800bce6:	686c      	ldr	r4, [r5, #4]
 800bce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcea:	07db      	lsls	r3, r3, #31
 800bcec:	d405      	bmi.n	800bcfa <_puts_r+0x36>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	0598      	lsls	r0, r3, #22
 800bcf2:	d402      	bmi.n	800bcfa <_puts_r+0x36>
 800bcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcf6:	f7ff fe46 	bl	800b986 <__retarget_lock_acquire_recursive>
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	0719      	lsls	r1, r3, #28
 800bcfe:	d51d      	bpl.n	800bd3c <_puts_r+0x78>
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	b1db      	cbz	r3, 800bd3c <_puts_r+0x78>
 800bd04:	3e01      	subs	r6, #1
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	60a3      	str	r3, [r4, #8]
 800bd10:	bb39      	cbnz	r1, 800bd62 <_puts_r+0x9e>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	da38      	bge.n	800bd88 <_puts_r+0xc4>
 800bd16:	4622      	mov	r2, r4
 800bd18:	210a      	movs	r1, #10
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f000 ffce 	bl	800ccbc <__swbuf_r>
 800bd20:	3001      	adds	r0, #1
 800bd22:	d011      	beq.n	800bd48 <_puts_r+0x84>
 800bd24:	250a      	movs	r5, #10
 800bd26:	e011      	b.n	800bd4c <_puts_r+0x88>
 800bd28:	4b1b      	ldr	r3, [pc, #108]	; (800bd98 <_puts_r+0xd4>)
 800bd2a:	429c      	cmp	r4, r3
 800bd2c:	d101      	bne.n	800bd32 <_puts_r+0x6e>
 800bd2e:	68ac      	ldr	r4, [r5, #8]
 800bd30:	e7da      	b.n	800bce8 <_puts_r+0x24>
 800bd32:	4b1a      	ldr	r3, [pc, #104]	; (800bd9c <_puts_r+0xd8>)
 800bd34:	429c      	cmp	r4, r3
 800bd36:	bf08      	it	eq
 800bd38:	68ec      	ldreq	r4, [r5, #12]
 800bd3a:	e7d5      	b.n	800bce8 <_puts_r+0x24>
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f001 f820 	bl	800cd84 <__swsetup_r>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d0dd      	beq.n	800bd04 <_puts_r+0x40>
 800bd48:	f04f 35ff 	mov.w	r5, #4294967295
 800bd4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd4e:	07da      	lsls	r2, r3, #31
 800bd50:	d405      	bmi.n	800bd5e <_puts_r+0x9a>
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	059b      	lsls	r3, r3, #22
 800bd56:	d402      	bmi.n	800bd5e <_puts_r+0x9a>
 800bd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd5a:	f7ff fe15 	bl	800b988 <__retarget_lock_release_recursive>
 800bd5e:	4628      	mov	r0, r5
 800bd60:	bd70      	pop	{r4, r5, r6, pc}
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	da04      	bge.n	800bd70 <_puts_r+0xac>
 800bd66:	69a2      	ldr	r2, [r4, #24]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	dc06      	bgt.n	800bd7a <_puts_r+0xb6>
 800bd6c:	290a      	cmp	r1, #10
 800bd6e:	d004      	beq.n	800bd7a <_puts_r+0xb6>
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	6022      	str	r2, [r4, #0]
 800bd76:	7019      	strb	r1, [r3, #0]
 800bd78:	e7c5      	b.n	800bd06 <_puts_r+0x42>
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f000 ff9d 	bl	800ccbc <__swbuf_r>
 800bd82:	3001      	adds	r0, #1
 800bd84:	d1bf      	bne.n	800bd06 <_puts_r+0x42>
 800bd86:	e7df      	b.n	800bd48 <_puts_r+0x84>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	250a      	movs	r5, #10
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	6022      	str	r2, [r4, #0]
 800bd90:	701d      	strb	r5, [r3, #0]
 800bd92:	e7db      	b.n	800bd4c <_puts_r+0x88>
 800bd94:	0800f774 	.word	0x0800f774
 800bd98:	0800f794 	.word	0x0800f794
 800bd9c:	0800f754 	.word	0x0800f754

0800bda0 <puts>:
 800bda0:	4b02      	ldr	r3, [pc, #8]	; (800bdac <puts+0xc>)
 800bda2:	4601      	mov	r1, r0
 800bda4:	6818      	ldr	r0, [r3, #0]
 800bda6:	f7ff bf8d 	b.w	800bcc4 <_puts_r>
 800bdaa:	bf00      	nop
 800bdac:	20000024 	.word	0x20000024

0800bdb0 <_sbrk_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d06      	ldr	r5, [pc, #24]	; (800bdcc <_sbrk_r+0x1c>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f9 f8b2 	bl	8004f24 <_sbrk>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_sbrk_r+0x1a>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_sbrk_r+0x1a>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20001764 	.word	0x20001764

0800bdd0 <siprintf>:
 800bdd0:	b40e      	push	{r1, r2, r3}
 800bdd2:	b500      	push	{lr}
 800bdd4:	b09c      	sub	sp, #112	; 0x70
 800bdd6:	ab1d      	add	r3, sp, #116	; 0x74
 800bdd8:	9002      	str	r0, [sp, #8]
 800bdda:	9006      	str	r0, [sp, #24]
 800bddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bde0:	4809      	ldr	r0, [pc, #36]	; (800be08 <siprintf+0x38>)
 800bde2:	9107      	str	r1, [sp, #28]
 800bde4:	9104      	str	r1, [sp, #16]
 800bde6:	4909      	ldr	r1, [pc, #36]	; (800be0c <siprintf+0x3c>)
 800bde8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdec:	9105      	str	r1, [sp, #20]
 800bdee:	6800      	ldr	r0, [r0, #0]
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	a902      	add	r1, sp, #8
 800bdf4:	f002 f968 	bl	800e0c8 <_svfiprintf_r>
 800bdf8:	9b02      	ldr	r3, [sp, #8]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	b01c      	add	sp, #112	; 0x70
 800be00:	f85d eb04 	ldr.w	lr, [sp], #4
 800be04:	b003      	add	sp, #12
 800be06:	4770      	bx	lr
 800be08:	20000024 	.word	0x20000024
 800be0c:	ffff0208 	.word	0xffff0208

0800be10 <__sread>:
 800be10:	b510      	push	{r4, lr}
 800be12:	460c      	mov	r4, r1
 800be14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be18:	f002 fd44 	bl	800e8a4 <_read_r>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	bfab      	itete	ge
 800be20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be22:	89a3      	ldrhlt	r3, [r4, #12]
 800be24:	181b      	addge	r3, r3, r0
 800be26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be2a:	bfac      	ite	ge
 800be2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be2e:	81a3      	strhlt	r3, [r4, #12]
 800be30:	bd10      	pop	{r4, pc}

0800be32 <__swrite>:
 800be32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be36:	461f      	mov	r7, r3
 800be38:	898b      	ldrh	r3, [r1, #12]
 800be3a:	05db      	lsls	r3, r3, #23
 800be3c:	4605      	mov	r5, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	4616      	mov	r6, r2
 800be42:	d505      	bpl.n	800be50 <__swrite+0x1e>
 800be44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be48:	2302      	movs	r3, #2
 800be4a:	2200      	movs	r2, #0
 800be4c:	f001 fbaa 	bl	800d5a4 <_lseek_r>
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be5a:	81a3      	strh	r3, [r4, #12]
 800be5c:	4632      	mov	r2, r6
 800be5e:	463b      	mov	r3, r7
 800be60:	4628      	mov	r0, r5
 800be62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be66:	f000 bf7b 	b.w	800cd60 <_write_r>

0800be6a <__sseek>:
 800be6a:	b510      	push	{r4, lr}
 800be6c:	460c      	mov	r4, r1
 800be6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be72:	f001 fb97 	bl	800d5a4 <_lseek_r>
 800be76:	1c43      	adds	r3, r0, #1
 800be78:	89a3      	ldrh	r3, [r4, #12]
 800be7a:	bf15      	itete	ne
 800be7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be86:	81a3      	strheq	r3, [r4, #12]
 800be88:	bf18      	it	ne
 800be8a:	81a3      	strhne	r3, [r4, #12]
 800be8c:	bd10      	pop	{r4, pc}

0800be8e <__sclose>:
 800be8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be92:	f000 bfe5 	b.w	800ce60 <_close_r>

0800be96 <strchr>:
 800be96:	b2c9      	uxtb	r1, r1
 800be98:	4603      	mov	r3, r0
 800be9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be9e:	b11a      	cbz	r2, 800bea8 <strchr+0x12>
 800bea0:	428a      	cmp	r2, r1
 800bea2:	d1f9      	bne.n	800be98 <strchr+0x2>
 800bea4:	4618      	mov	r0, r3
 800bea6:	4770      	bx	lr
 800bea8:	2900      	cmp	r1, #0
 800beaa:	bf18      	it	ne
 800beac:	2300      	movne	r3, #0
 800beae:	e7f9      	b.n	800bea4 <strchr+0xe>

0800beb0 <strncmp>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	b17a      	cbz	r2, 800bed4 <strncmp+0x24>
 800beb4:	4603      	mov	r3, r0
 800beb6:	3901      	subs	r1, #1
 800beb8:	1884      	adds	r4, r0, r2
 800beba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bebe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bec2:	4290      	cmp	r0, r2
 800bec4:	d101      	bne.n	800beca <strncmp+0x1a>
 800bec6:	42a3      	cmp	r3, r4
 800bec8:	d101      	bne.n	800bece <strncmp+0x1e>
 800beca:	1a80      	subs	r0, r0, r2
 800becc:	bd10      	pop	{r4, pc}
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1f3      	bne.n	800beba <strncmp+0xa>
 800bed2:	e7fa      	b.n	800beca <strncmp+0x1a>
 800bed4:	4610      	mov	r0, r2
 800bed6:	e7f9      	b.n	800becc <strncmp+0x1c>

0800bed8 <strstr>:
 800bed8:	780a      	ldrb	r2, [r1, #0]
 800beda:	b570      	push	{r4, r5, r6, lr}
 800bedc:	b96a      	cbnz	r2, 800befa <strstr+0x22>
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d109      	bne.n	800bef8 <strstr+0x20>
 800bee4:	460c      	mov	r4, r1
 800bee6:	4605      	mov	r5, r0
 800bee8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800beec:	2b00      	cmp	r3, #0
 800beee:	d0f6      	beq.n	800bede <strstr+0x6>
 800bef0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bef4:	429e      	cmp	r6, r3
 800bef6:	d0f7      	beq.n	800bee8 <strstr+0x10>
 800bef8:	3001      	adds	r0, #1
 800befa:	7803      	ldrb	r3, [r0, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1ef      	bne.n	800bee0 <strstr+0x8>
 800bf00:	4618      	mov	r0, r3
 800bf02:	e7ec      	b.n	800bede <strstr+0x6>

0800bf04 <sulp>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	4604      	mov	r4, r0
 800bf08:	460d      	mov	r5, r1
 800bf0a:	ec45 4b10 	vmov	d0, r4, r5
 800bf0e:	4616      	mov	r6, r2
 800bf10:	f001 feea 	bl	800dce8 <__ulp>
 800bf14:	ec51 0b10 	vmov	r0, r1, d0
 800bf18:	b17e      	cbz	r6, 800bf3a <sulp+0x36>
 800bf1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dd09      	ble.n	800bf3a <sulp+0x36>
 800bf26:	051b      	lsls	r3, r3, #20
 800bf28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf2c:	2400      	movs	r4, #0
 800bf2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf32:	4622      	mov	r2, r4
 800bf34:	462b      	mov	r3, r5
 800bf36:	f7f4 fb37 	bl	80005a8 <__aeabi_dmul>
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
 800bf3c:	0000      	movs	r0, r0
	...

0800bf40 <_strtod_l>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	ed2d 8b02 	vpush	{d8}
 800bf48:	b09d      	sub	sp, #116	; 0x74
 800bf4a:	461f      	mov	r7, r3
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9318      	str	r3, [sp, #96]	; 0x60
 800bf50:	4ba2      	ldr	r3, [pc, #648]	; (800c1dc <_strtod_l+0x29c>)
 800bf52:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	9305      	str	r3, [sp, #20]
 800bf58:	4604      	mov	r4, r0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	4688      	mov	r8, r1
 800bf5e:	f7f4 f90f 	bl	8000180 <strlen>
 800bf62:	f04f 0a00 	mov.w	sl, #0
 800bf66:	4605      	mov	r5, r0
 800bf68:	f04f 0b00 	mov.w	fp, #0
 800bf6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf72:	781a      	ldrb	r2, [r3, #0]
 800bf74:	2a2b      	cmp	r2, #43	; 0x2b
 800bf76:	d04e      	beq.n	800c016 <_strtod_l+0xd6>
 800bf78:	d83b      	bhi.n	800bff2 <_strtod_l+0xb2>
 800bf7a:	2a0d      	cmp	r2, #13
 800bf7c:	d834      	bhi.n	800bfe8 <_strtod_l+0xa8>
 800bf7e:	2a08      	cmp	r2, #8
 800bf80:	d834      	bhi.n	800bfec <_strtod_l+0xac>
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d03e      	beq.n	800c004 <_strtod_l+0xc4>
 800bf86:	2300      	movs	r3, #0
 800bf88:	930a      	str	r3, [sp, #40]	; 0x28
 800bf8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bf8c:	7833      	ldrb	r3, [r6, #0]
 800bf8e:	2b30      	cmp	r3, #48	; 0x30
 800bf90:	f040 80b0 	bne.w	800c0f4 <_strtod_l+0x1b4>
 800bf94:	7873      	ldrb	r3, [r6, #1]
 800bf96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf9a:	2b58      	cmp	r3, #88	; 0x58
 800bf9c:	d168      	bne.n	800c070 <_strtod_l+0x130>
 800bf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	ab18      	add	r3, sp, #96	; 0x60
 800bfa4:	9702      	str	r7, [sp, #8]
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	4a8d      	ldr	r2, [pc, #564]	; (800c1e0 <_strtod_l+0x2a0>)
 800bfaa:	ab19      	add	r3, sp, #100	; 0x64
 800bfac:	a917      	add	r1, sp, #92	; 0x5c
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 ffe0 	bl	800cf74 <__gethex>
 800bfb4:	f010 0707 	ands.w	r7, r0, #7
 800bfb8:	4605      	mov	r5, r0
 800bfba:	d005      	beq.n	800bfc8 <_strtod_l+0x88>
 800bfbc:	2f06      	cmp	r7, #6
 800bfbe:	d12c      	bne.n	800c01a <_strtod_l+0xda>
 800bfc0:	3601      	adds	r6, #1
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bfc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f040 8590 	bne.w	800caf0 <_strtod_l+0xbb0>
 800bfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd2:	b1eb      	cbz	r3, 800c010 <_strtod_l+0xd0>
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bfda:	ec43 2b10 	vmov	d0, r2, r3
 800bfde:	b01d      	add	sp, #116	; 0x74
 800bfe0:	ecbd 8b02 	vpop	{d8}
 800bfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe8:	2a20      	cmp	r2, #32
 800bfea:	d1cc      	bne.n	800bf86 <_strtod_l+0x46>
 800bfec:	3301      	adds	r3, #1
 800bfee:	9317      	str	r3, [sp, #92]	; 0x5c
 800bff0:	e7be      	b.n	800bf70 <_strtod_l+0x30>
 800bff2:	2a2d      	cmp	r2, #45	; 0x2d
 800bff4:	d1c7      	bne.n	800bf86 <_strtod_l+0x46>
 800bff6:	2201      	movs	r2, #1
 800bff8:	920a      	str	r2, [sp, #40]	; 0x28
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bffe:	785b      	ldrb	r3, [r3, #1]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1c2      	bne.n	800bf8a <_strtod_l+0x4a>
 800c004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c006:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f040 856e 	bne.w	800caec <_strtod_l+0xbac>
 800c010:	4652      	mov	r2, sl
 800c012:	465b      	mov	r3, fp
 800c014:	e7e1      	b.n	800bfda <_strtod_l+0x9a>
 800c016:	2200      	movs	r2, #0
 800c018:	e7ee      	b.n	800bff8 <_strtod_l+0xb8>
 800c01a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c01c:	b13a      	cbz	r2, 800c02e <_strtod_l+0xee>
 800c01e:	2135      	movs	r1, #53	; 0x35
 800c020:	a81a      	add	r0, sp, #104	; 0x68
 800c022:	f001 ff6c 	bl	800defe <__copybits>
 800c026:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c028:	4620      	mov	r0, r4
 800c02a:	f001 fb2b 	bl	800d684 <_Bfree>
 800c02e:	3f01      	subs	r7, #1
 800c030:	2f04      	cmp	r7, #4
 800c032:	d806      	bhi.n	800c042 <_strtod_l+0x102>
 800c034:	e8df f007 	tbb	[pc, r7]
 800c038:	1714030a 	.word	0x1714030a
 800c03c:	0a          	.byte	0x0a
 800c03d:	00          	.byte	0x00
 800c03e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c042:	0728      	lsls	r0, r5, #28
 800c044:	d5c0      	bpl.n	800bfc8 <_strtod_l+0x88>
 800c046:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c04a:	e7bd      	b.n	800bfc8 <_strtod_l+0x88>
 800c04c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c050:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c052:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c056:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c05a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c05e:	e7f0      	b.n	800c042 <_strtod_l+0x102>
 800c060:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c1e4 <_strtod_l+0x2a4>
 800c064:	e7ed      	b.n	800c042 <_strtod_l+0x102>
 800c066:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c06a:	f04f 3aff 	mov.w	sl, #4294967295
 800c06e:	e7e8      	b.n	800c042 <_strtod_l+0x102>
 800c070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	9217      	str	r2, [sp, #92]	; 0x5c
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	2b30      	cmp	r3, #48	; 0x30
 800c07a:	d0f9      	beq.n	800c070 <_strtod_l+0x130>
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0a3      	beq.n	800bfc8 <_strtod_l+0x88>
 800c080:	2301      	movs	r3, #1
 800c082:	f04f 0900 	mov.w	r9, #0
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c08a:	9308      	str	r3, [sp, #32]
 800c08c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c090:	464f      	mov	r7, r9
 800c092:	220a      	movs	r2, #10
 800c094:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c096:	7806      	ldrb	r6, [r0, #0]
 800c098:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c09c:	b2d9      	uxtb	r1, r3
 800c09e:	2909      	cmp	r1, #9
 800c0a0:	d92a      	bls.n	800c0f8 <_strtod_l+0x1b8>
 800c0a2:	9905      	ldr	r1, [sp, #20]
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	f7ff ff03 	bl	800beb0 <strncmp>
 800c0aa:	b398      	cbz	r0, 800c114 <_strtod_l+0x1d4>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	4632      	mov	r2, r6
 800c0b0:	463d      	mov	r5, r7
 800c0b2:	9005      	str	r0, [sp, #20]
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2a65      	cmp	r2, #101	; 0x65
 800c0b8:	d001      	beq.n	800c0be <_strtod_l+0x17e>
 800c0ba:	2a45      	cmp	r2, #69	; 0x45
 800c0bc:	d118      	bne.n	800c0f0 <_strtod_l+0x1b0>
 800c0be:	b91d      	cbnz	r5, 800c0c8 <_strtod_l+0x188>
 800c0c0:	9a04      	ldr	r2, [sp, #16]
 800c0c2:	4302      	orrs	r2, r0
 800c0c4:	d09e      	beq.n	800c004 <_strtod_l+0xc4>
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c0cc:	f108 0201 	add.w	r2, r8, #1
 800c0d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c0d6:	2a2b      	cmp	r2, #43	; 0x2b
 800c0d8:	d075      	beq.n	800c1c6 <_strtod_l+0x286>
 800c0da:	2a2d      	cmp	r2, #45	; 0x2d
 800c0dc:	d07b      	beq.n	800c1d6 <_strtod_l+0x296>
 800c0de:	f04f 0c00 	mov.w	ip, #0
 800c0e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c0e6:	2909      	cmp	r1, #9
 800c0e8:	f240 8082 	bls.w	800c1f0 <_strtod_l+0x2b0>
 800c0ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c0f0:	2600      	movs	r6, #0
 800c0f2:	e09d      	b.n	800c230 <_strtod_l+0x2f0>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e7c4      	b.n	800c082 <_strtod_l+0x142>
 800c0f8:	2f08      	cmp	r7, #8
 800c0fa:	bfd8      	it	le
 800c0fc:	9907      	ldrle	r1, [sp, #28]
 800c0fe:	f100 0001 	add.w	r0, r0, #1
 800c102:	bfda      	itte	le
 800c104:	fb02 3301 	mlale	r3, r2, r1, r3
 800c108:	9307      	strle	r3, [sp, #28]
 800c10a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c10e:	3701      	adds	r7, #1
 800c110:	9017      	str	r0, [sp, #92]	; 0x5c
 800c112:	e7bf      	b.n	800c094 <_strtod_l+0x154>
 800c114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c116:	195a      	adds	r2, r3, r5
 800c118:	9217      	str	r2, [sp, #92]	; 0x5c
 800c11a:	5d5a      	ldrb	r2, [r3, r5]
 800c11c:	2f00      	cmp	r7, #0
 800c11e:	d037      	beq.n	800c190 <_strtod_l+0x250>
 800c120:	9005      	str	r0, [sp, #20]
 800c122:	463d      	mov	r5, r7
 800c124:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c128:	2b09      	cmp	r3, #9
 800c12a:	d912      	bls.n	800c152 <_strtod_l+0x212>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e7c2      	b.n	800c0b6 <_strtod_l+0x176>
 800c130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	9217      	str	r2, [sp, #92]	; 0x5c
 800c136:	785a      	ldrb	r2, [r3, #1]
 800c138:	3001      	adds	r0, #1
 800c13a:	2a30      	cmp	r2, #48	; 0x30
 800c13c:	d0f8      	beq.n	800c130 <_strtod_l+0x1f0>
 800c13e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c142:	2b08      	cmp	r3, #8
 800c144:	f200 84d9 	bhi.w	800cafa <_strtod_l+0xbba>
 800c148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c14a:	9005      	str	r0, [sp, #20]
 800c14c:	2000      	movs	r0, #0
 800c14e:	9308      	str	r3, [sp, #32]
 800c150:	4605      	mov	r5, r0
 800c152:	3a30      	subs	r2, #48	; 0x30
 800c154:	f100 0301 	add.w	r3, r0, #1
 800c158:	d014      	beq.n	800c184 <_strtod_l+0x244>
 800c15a:	9905      	ldr	r1, [sp, #20]
 800c15c:	4419      	add	r1, r3
 800c15e:	9105      	str	r1, [sp, #20]
 800c160:	462b      	mov	r3, r5
 800c162:	eb00 0e05 	add.w	lr, r0, r5
 800c166:	210a      	movs	r1, #10
 800c168:	4573      	cmp	r3, lr
 800c16a:	d113      	bne.n	800c194 <_strtod_l+0x254>
 800c16c:	182b      	adds	r3, r5, r0
 800c16e:	2b08      	cmp	r3, #8
 800c170:	f105 0501 	add.w	r5, r5, #1
 800c174:	4405      	add	r5, r0
 800c176:	dc1c      	bgt.n	800c1b2 <_strtod_l+0x272>
 800c178:	9907      	ldr	r1, [sp, #28]
 800c17a:	230a      	movs	r3, #10
 800c17c:	fb03 2301 	mla	r3, r3, r1, r2
 800c180:	9307      	str	r3, [sp, #28]
 800c182:	2300      	movs	r3, #0
 800c184:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c186:	1c51      	adds	r1, r2, #1
 800c188:	9117      	str	r1, [sp, #92]	; 0x5c
 800c18a:	7852      	ldrb	r2, [r2, #1]
 800c18c:	4618      	mov	r0, r3
 800c18e:	e7c9      	b.n	800c124 <_strtod_l+0x1e4>
 800c190:	4638      	mov	r0, r7
 800c192:	e7d2      	b.n	800c13a <_strtod_l+0x1fa>
 800c194:	2b08      	cmp	r3, #8
 800c196:	dc04      	bgt.n	800c1a2 <_strtod_l+0x262>
 800c198:	9e07      	ldr	r6, [sp, #28]
 800c19a:	434e      	muls	r6, r1
 800c19c:	9607      	str	r6, [sp, #28]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	e7e2      	b.n	800c168 <_strtod_l+0x228>
 800c1a2:	f103 0c01 	add.w	ip, r3, #1
 800c1a6:	f1bc 0f10 	cmp.w	ip, #16
 800c1aa:	bfd8      	it	le
 800c1ac:	fb01 f909 	mulle.w	r9, r1, r9
 800c1b0:	e7f5      	b.n	800c19e <_strtod_l+0x25e>
 800c1b2:	2d10      	cmp	r5, #16
 800c1b4:	bfdc      	itt	le
 800c1b6:	230a      	movle	r3, #10
 800c1b8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c1bc:	e7e1      	b.n	800c182 <_strtod_l+0x242>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	9305      	str	r3, [sp, #20]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e77c      	b.n	800c0c0 <_strtod_l+0x180>
 800c1c6:	f04f 0c00 	mov.w	ip, #0
 800c1ca:	f108 0202 	add.w	r2, r8, #2
 800c1ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c1d4:	e785      	b.n	800c0e2 <_strtod_l+0x1a2>
 800c1d6:	f04f 0c01 	mov.w	ip, #1
 800c1da:	e7f6      	b.n	800c1ca <_strtod_l+0x28a>
 800c1dc:	0800f890 	.word	0x0800f890
 800c1e0:	0800f7c4 	.word	0x0800f7c4
 800c1e4:	7ff00000 	.word	0x7ff00000
 800c1e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1ea:	1c51      	adds	r1, r2, #1
 800c1ec:	9117      	str	r1, [sp, #92]	; 0x5c
 800c1ee:	7852      	ldrb	r2, [r2, #1]
 800c1f0:	2a30      	cmp	r2, #48	; 0x30
 800c1f2:	d0f9      	beq.n	800c1e8 <_strtod_l+0x2a8>
 800c1f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c1f8:	2908      	cmp	r1, #8
 800c1fa:	f63f af79 	bhi.w	800c0f0 <_strtod_l+0x1b0>
 800c1fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c204:	9206      	str	r2, [sp, #24]
 800c206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c208:	1c51      	adds	r1, r2, #1
 800c20a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c20c:	7852      	ldrb	r2, [r2, #1]
 800c20e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c212:	2e09      	cmp	r6, #9
 800c214:	d937      	bls.n	800c286 <_strtod_l+0x346>
 800c216:	9e06      	ldr	r6, [sp, #24]
 800c218:	1b89      	subs	r1, r1, r6
 800c21a:	2908      	cmp	r1, #8
 800c21c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c220:	dc02      	bgt.n	800c228 <_strtod_l+0x2e8>
 800c222:	4576      	cmp	r6, lr
 800c224:	bfa8      	it	ge
 800c226:	4676      	movge	r6, lr
 800c228:	f1bc 0f00 	cmp.w	ip, #0
 800c22c:	d000      	beq.n	800c230 <_strtod_l+0x2f0>
 800c22e:	4276      	negs	r6, r6
 800c230:	2d00      	cmp	r5, #0
 800c232:	d14d      	bne.n	800c2d0 <_strtod_l+0x390>
 800c234:	9904      	ldr	r1, [sp, #16]
 800c236:	4301      	orrs	r1, r0
 800c238:	f47f aec6 	bne.w	800bfc8 <_strtod_l+0x88>
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f aee1 	bne.w	800c004 <_strtod_l+0xc4>
 800c242:	2a69      	cmp	r2, #105	; 0x69
 800c244:	d027      	beq.n	800c296 <_strtod_l+0x356>
 800c246:	dc24      	bgt.n	800c292 <_strtod_l+0x352>
 800c248:	2a49      	cmp	r2, #73	; 0x49
 800c24a:	d024      	beq.n	800c296 <_strtod_l+0x356>
 800c24c:	2a4e      	cmp	r2, #78	; 0x4e
 800c24e:	f47f aed9 	bne.w	800c004 <_strtod_l+0xc4>
 800c252:	499f      	ldr	r1, [pc, #636]	; (800c4d0 <_strtod_l+0x590>)
 800c254:	a817      	add	r0, sp, #92	; 0x5c
 800c256:	f001 f8e5 	bl	800d424 <__match>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f aed2 	beq.w	800c004 <_strtod_l+0xc4>
 800c260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b28      	cmp	r3, #40	; 0x28
 800c266:	d12d      	bne.n	800c2c4 <_strtod_l+0x384>
 800c268:	499a      	ldr	r1, [pc, #616]	; (800c4d4 <_strtod_l+0x594>)
 800c26a:	aa1a      	add	r2, sp, #104	; 0x68
 800c26c:	a817      	add	r0, sp, #92	; 0x5c
 800c26e:	f001 f8ed 	bl	800d44c <__hexnan>
 800c272:	2805      	cmp	r0, #5
 800c274:	d126      	bne.n	800c2c4 <_strtod_l+0x384>
 800c276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c278:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c27c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c280:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c284:	e6a0      	b.n	800bfc8 <_strtod_l+0x88>
 800c286:	210a      	movs	r1, #10
 800c288:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c28c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c290:	e7b9      	b.n	800c206 <_strtod_l+0x2c6>
 800c292:	2a6e      	cmp	r2, #110	; 0x6e
 800c294:	e7db      	b.n	800c24e <_strtod_l+0x30e>
 800c296:	4990      	ldr	r1, [pc, #576]	; (800c4d8 <_strtod_l+0x598>)
 800c298:	a817      	add	r0, sp, #92	; 0x5c
 800c29a:	f001 f8c3 	bl	800d424 <__match>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f43f aeb0 	beq.w	800c004 <_strtod_l+0xc4>
 800c2a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2a6:	498d      	ldr	r1, [pc, #564]	; (800c4dc <_strtod_l+0x59c>)
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	a817      	add	r0, sp, #92	; 0x5c
 800c2ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2ae:	f001 f8b9 	bl	800d424 <__match>
 800c2b2:	b910      	cbnz	r0, 800c2ba <_strtod_l+0x37a>
 800c2b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c4ec <_strtod_l+0x5ac>
 800c2be:	f04f 0a00 	mov.w	sl, #0
 800c2c2:	e681      	b.n	800bfc8 <_strtod_l+0x88>
 800c2c4:	4886      	ldr	r0, [pc, #536]	; (800c4e0 <_strtod_l+0x5a0>)
 800c2c6:	f002 faff 	bl	800e8c8 <nan>
 800c2ca:	ec5b ab10 	vmov	sl, fp, d0
 800c2ce:	e67b      	b.n	800bfc8 <_strtod_l+0x88>
 800c2d0:	9b05      	ldr	r3, [sp, #20]
 800c2d2:	9807      	ldr	r0, [sp, #28]
 800c2d4:	1af3      	subs	r3, r6, r3
 800c2d6:	2f00      	cmp	r7, #0
 800c2d8:	bf08      	it	eq
 800c2da:	462f      	moveq	r7, r5
 800c2dc:	2d10      	cmp	r5, #16
 800c2de:	9306      	str	r3, [sp, #24]
 800c2e0:	46a8      	mov	r8, r5
 800c2e2:	bfa8      	it	ge
 800c2e4:	f04f 0810 	movge.w	r8, #16
 800c2e8:	f7f4 f8e4 	bl	80004b4 <__aeabi_ui2d>
 800c2ec:	2d09      	cmp	r5, #9
 800c2ee:	4682      	mov	sl, r0
 800c2f0:	468b      	mov	fp, r1
 800c2f2:	dd13      	ble.n	800c31c <_strtod_l+0x3dc>
 800c2f4:	4b7b      	ldr	r3, [pc, #492]	; (800c4e4 <_strtod_l+0x5a4>)
 800c2f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c2fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c2fe:	f7f4 f953 	bl	80005a8 <__aeabi_dmul>
 800c302:	4682      	mov	sl, r0
 800c304:	4648      	mov	r0, r9
 800c306:	468b      	mov	fp, r1
 800c308:	f7f4 f8d4 	bl	80004b4 <__aeabi_ui2d>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4650      	mov	r0, sl
 800c312:	4659      	mov	r1, fp
 800c314:	f7f3 ff92 	bl	800023c <__adddf3>
 800c318:	4682      	mov	sl, r0
 800c31a:	468b      	mov	fp, r1
 800c31c:	2d0f      	cmp	r5, #15
 800c31e:	dc38      	bgt.n	800c392 <_strtod_l+0x452>
 800c320:	9b06      	ldr	r3, [sp, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f43f ae50 	beq.w	800bfc8 <_strtod_l+0x88>
 800c328:	dd24      	ble.n	800c374 <_strtod_l+0x434>
 800c32a:	2b16      	cmp	r3, #22
 800c32c:	dc0b      	bgt.n	800c346 <_strtod_l+0x406>
 800c32e:	496d      	ldr	r1, [pc, #436]	; (800c4e4 <_strtod_l+0x5a4>)
 800c330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c338:	4652      	mov	r2, sl
 800c33a:	465b      	mov	r3, fp
 800c33c:	f7f4 f934 	bl	80005a8 <__aeabi_dmul>
 800c340:	4682      	mov	sl, r0
 800c342:	468b      	mov	fp, r1
 800c344:	e640      	b.n	800bfc8 <_strtod_l+0x88>
 800c346:	9a06      	ldr	r2, [sp, #24]
 800c348:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c34c:	4293      	cmp	r3, r2
 800c34e:	db20      	blt.n	800c392 <_strtod_l+0x452>
 800c350:	4c64      	ldr	r4, [pc, #400]	; (800c4e4 <_strtod_l+0x5a4>)
 800c352:	f1c5 050f 	rsb	r5, r5, #15
 800c356:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c35a:	4652      	mov	r2, sl
 800c35c:	465b      	mov	r3, fp
 800c35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c362:	f7f4 f921 	bl	80005a8 <__aeabi_dmul>
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	1b5d      	subs	r5, r3, r5
 800c36a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c36e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c372:	e7e3      	b.n	800c33c <_strtod_l+0x3fc>
 800c374:	9b06      	ldr	r3, [sp, #24]
 800c376:	3316      	adds	r3, #22
 800c378:	db0b      	blt.n	800c392 <_strtod_l+0x452>
 800c37a:	9b05      	ldr	r3, [sp, #20]
 800c37c:	1b9e      	subs	r6, r3, r6
 800c37e:	4b59      	ldr	r3, [pc, #356]	; (800c4e4 <_strtod_l+0x5a4>)
 800c380:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c384:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c388:	4650      	mov	r0, sl
 800c38a:	4659      	mov	r1, fp
 800c38c:	f7f4 fa36 	bl	80007fc <__aeabi_ddiv>
 800c390:	e7d6      	b.n	800c340 <_strtod_l+0x400>
 800c392:	9b06      	ldr	r3, [sp, #24]
 800c394:	eba5 0808 	sub.w	r8, r5, r8
 800c398:	4498      	add	r8, r3
 800c39a:	f1b8 0f00 	cmp.w	r8, #0
 800c39e:	dd74      	ble.n	800c48a <_strtod_l+0x54a>
 800c3a0:	f018 030f 	ands.w	r3, r8, #15
 800c3a4:	d00a      	beq.n	800c3bc <_strtod_l+0x47c>
 800c3a6:	494f      	ldr	r1, [pc, #316]	; (800c4e4 <_strtod_l+0x5a4>)
 800c3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3ac:	4652      	mov	r2, sl
 800c3ae:	465b      	mov	r3, fp
 800c3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b4:	f7f4 f8f8 	bl	80005a8 <__aeabi_dmul>
 800c3b8:	4682      	mov	sl, r0
 800c3ba:	468b      	mov	fp, r1
 800c3bc:	f038 080f 	bics.w	r8, r8, #15
 800c3c0:	d04f      	beq.n	800c462 <_strtod_l+0x522>
 800c3c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c3c6:	dd22      	ble.n	800c40e <_strtod_l+0x4ce>
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	462e      	mov	r6, r5
 800c3cc:	9507      	str	r5, [sp, #28]
 800c3ce:	9505      	str	r5, [sp, #20]
 800c3d0:	2322      	movs	r3, #34	; 0x22
 800c3d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c4ec <_strtod_l+0x5ac>
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	f04f 0a00 	mov.w	sl, #0
 800c3dc:	9b07      	ldr	r3, [sp, #28]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f43f adf2 	beq.w	800bfc8 <_strtod_l+0x88>
 800c3e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f001 f94c 	bl	800d684 <_Bfree>
 800c3ec:	9905      	ldr	r1, [sp, #20]
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f001 f948 	bl	800d684 <_Bfree>
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f001 f944 	bl	800d684 <_Bfree>
 800c3fc:	9907      	ldr	r1, [sp, #28]
 800c3fe:	4620      	mov	r0, r4
 800c400:	f001 f940 	bl	800d684 <_Bfree>
 800c404:	4629      	mov	r1, r5
 800c406:	4620      	mov	r0, r4
 800c408:	f001 f93c 	bl	800d684 <_Bfree>
 800c40c:	e5dc      	b.n	800bfc8 <_strtod_l+0x88>
 800c40e:	4b36      	ldr	r3, [pc, #216]	; (800c4e8 <_strtod_l+0x5a8>)
 800c410:	9304      	str	r3, [sp, #16]
 800c412:	2300      	movs	r3, #0
 800c414:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c418:	4650      	mov	r0, sl
 800c41a:	4659      	mov	r1, fp
 800c41c:	4699      	mov	r9, r3
 800c41e:	f1b8 0f01 	cmp.w	r8, #1
 800c422:	dc21      	bgt.n	800c468 <_strtod_l+0x528>
 800c424:	b10b      	cbz	r3, 800c42a <_strtod_l+0x4ea>
 800c426:	4682      	mov	sl, r0
 800c428:	468b      	mov	fp, r1
 800c42a:	4b2f      	ldr	r3, [pc, #188]	; (800c4e8 <_strtod_l+0x5a8>)
 800c42c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c430:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c434:	4652      	mov	r2, sl
 800c436:	465b      	mov	r3, fp
 800c438:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c43c:	f7f4 f8b4 	bl	80005a8 <__aeabi_dmul>
 800c440:	4b2a      	ldr	r3, [pc, #168]	; (800c4ec <_strtod_l+0x5ac>)
 800c442:	460a      	mov	r2, r1
 800c444:	400b      	ands	r3, r1
 800c446:	492a      	ldr	r1, [pc, #168]	; (800c4f0 <_strtod_l+0x5b0>)
 800c448:	428b      	cmp	r3, r1
 800c44a:	4682      	mov	sl, r0
 800c44c:	d8bc      	bhi.n	800c3c8 <_strtod_l+0x488>
 800c44e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c452:	428b      	cmp	r3, r1
 800c454:	bf86      	itte	hi
 800c456:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c4f4 <_strtod_l+0x5b4>
 800c45a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c45e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c462:	2300      	movs	r3, #0
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	e084      	b.n	800c572 <_strtod_l+0x632>
 800c468:	f018 0f01 	tst.w	r8, #1
 800c46c:	d005      	beq.n	800c47a <_strtod_l+0x53a>
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	f7f4 f898 	bl	80005a8 <__aeabi_dmul>
 800c478:	2301      	movs	r3, #1
 800c47a:	9a04      	ldr	r2, [sp, #16]
 800c47c:	3208      	adds	r2, #8
 800c47e:	f109 0901 	add.w	r9, r9, #1
 800c482:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c486:	9204      	str	r2, [sp, #16]
 800c488:	e7c9      	b.n	800c41e <_strtod_l+0x4de>
 800c48a:	d0ea      	beq.n	800c462 <_strtod_l+0x522>
 800c48c:	f1c8 0800 	rsb	r8, r8, #0
 800c490:	f018 020f 	ands.w	r2, r8, #15
 800c494:	d00a      	beq.n	800c4ac <_strtod_l+0x56c>
 800c496:	4b13      	ldr	r3, [pc, #76]	; (800c4e4 <_strtod_l+0x5a4>)
 800c498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c49c:	4650      	mov	r0, sl
 800c49e:	4659      	mov	r1, fp
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f4 f9aa 	bl	80007fc <__aeabi_ddiv>
 800c4a8:	4682      	mov	sl, r0
 800c4aa:	468b      	mov	fp, r1
 800c4ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c4b0:	d0d7      	beq.n	800c462 <_strtod_l+0x522>
 800c4b2:	f1b8 0f1f 	cmp.w	r8, #31
 800c4b6:	dd1f      	ble.n	800c4f8 <_strtod_l+0x5b8>
 800c4b8:	2500      	movs	r5, #0
 800c4ba:	462e      	mov	r6, r5
 800c4bc:	9507      	str	r5, [sp, #28]
 800c4be:	9505      	str	r5, [sp, #20]
 800c4c0:	2322      	movs	r3, #34	; 0x22
 800c4c2:	f04f 0a00 	mov.w	sl, #0
 800c4c6:	f04f 0b00 	mov.w	fp, #0
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	e786      	b.n	800c3dc <_strtod_l+0x49c>
 800c4ce:	bf00      	nop
 800c4d0:	0800f7c1 	.word	0x0800f7c1
 800c4d4:	0800f7d8 	.word	0x0800f7d8
 800c4d8:	0800f7b8 	.word	0x0800f7b8
 800c4dc:	0800f7bb 	.word	0x0800f7bb
 800c4e0:	0800fa82 	.word	0x0800fa82
 800c4e4:	0800f940 	.word	0x0800f940
 800c4e8:	0800f918 	.word	0x0800f918
 800c4ec:	7ff00000 	.word	0x7ff00000
 800c4f0:	7ca00000 	.word	0x7ca00000
 800c4f4:	7fefffff 	.word	0x7fefffff
 800c4f8:	f018 0310 	ands.w	r3, r8, #16
 800c4fc:	bf18      	it	ne
 800c4fe:	236a      	movne	r3, #106	; 0x6a
 800c500:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c8b0 <_strtod_l+0x970>
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	4650      	mov	r0, sl
 800c508:	4659      	mov	r1, fp
 800c50a:	2300      	movs	r3, #0
 800c50c:	f018 0f01 	tst.w	r8, #1
 800c510:	d004      	beq.n	800c51c <_strtod_l+0x5dc>
 800c512:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c516:	f7f4 f847 	bl	80005a8 <__aeabi_dmul>
 800c51a:	2301      	movs	r3, #1
 800c51c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c520:	f109 0908 	add.w	r9, r9, #8
 800c524:	d1f2      	bne.n	800c50c <_strtod_l+0x5cc>
 800c526:	b10b      	cbz	r3, 800c52c <_strtod_l+0x5ec>
 800c528:	4682      	mov	sl, r0
 800c52a:	468b      	mov	fp, r1
 800c52c:	9b04      	ldr	r3, [sp, #16]
 800c52e:	b1c3      	cbz	r3, 800c562 <_strtod_l+0x622>
 800c530:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c534:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c538:	2b00      	cmp	r3, #0
 800c53a:	4659      	mov	r1, fp
 800c53c:	dd11      	ble.n	800c562 <_strtod_l+0x622>
 800c53e:	2b1f      	cmp	r3, #31
 800c540:	f340 8124 	ble.w	800c78c <_strtod_l+0x84c>
 800c544:	2b34      	cmp	r3, #52	; 0x34
 800c546:	bfde      	ittt	le
 800c548:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c54c:	f04f 33ff 	movle.w	r3, #4294967295
 800c550:	fa03 f202 	lslle.w	r2, r3, r2
 800c554:	f04f 0a00 	mov.w	sl, #0
 800c558:	bfcc      	ite	gt
 800c55a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c55e:	ea02 0b01 	andle.w	fp, r2, r1
 800c562:	2200      	movs	r2, #0
 800c564:	2300      	movs	r3, #0
 800c566:	4650      	mov	r0, sl
 800c568:	4659      	mov	r1, fp
 800c56a:	f7f4 fa85 	bl	8000a78 <__aeabi_dcmpeq>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d1a2      	bne.n	800c4b8 <_strtod_l+0x578>
 800c572:	9b07      	ldr	r3, [sp, #28]
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	9908      	ldr	r1, [sp, #32]
 800c578:	462b      	mov	r3, r5
 800c57a:	463a      	mov	r2, r7
 800c57c:	4620      	mov	r0, r4
 800c57e:	f001 f8e9 	bl	800d754 <__s2b>
 800c582:	9007      	str	r0, [sp, #28]
 800c584:	2800      	cmp	r0, #0
 800c586:	f43f af1f 	beq.w	800c3c8 <_strtod_l+0x488>
 800c58a:	9b05      	ldr	r3, [sp, #20]
 800c58c:	1b9e      	subs	r6, r3, r6
 800c58e:	9b06      	ldr	r3, [sp, #24]
 800c590:	2b00      	cmp	r3, #0
 800c592:	bfb4      	ite	lt
 800c594:	4633      	movlt	r3, r6
 800c596:	2300      	movge	r3, #0
 800c598:	930c      	str	r3, [sp, #48]	; 0x30
 800c59a:	9b06      	ldr	r3, [sp, #24]
 800c59c:	2500      	movs	r5, #0
 800c59e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c5a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c5a4:	462e      	mov	r6, r5
 800c5a6:	9b07      	ldr	r3, [sp, #28]
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	6859      	ldr	r1, [r3, #4]
 800c5ac:	f001 f82a 	bl	800d604 <_Balloc>
 800c5b0:	9005      	str	r0, [sp, #20]
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	f43f af0c 	beq.w	800c3d0 <_strtod_l+0x490>
 800c5b8:	9b07      	ldr	r3, [sp, #28]
 800c5ba:	691a      	ldr	r2, [r3, #16]
 800c5bc:	3202      	adds	r2, #2
 800c5be:	f103 010c 	add.w	r1, r3, #12
 800c5c2:	0092      	lsls	r2, r2, #2
 800c5c4:	300c      	adds	r0, #12
 800c5c6:	f7ff fa55 	bl	800ba74 <memcpy>
 800c5ca:	ec4b ab10 	vmov	d0, sl, fp
 800c5ce:	aa1a      	add	r2, sp, #104	; 0x68
 800c5d0:	a919      	add	r1, sp, #100	; 0x64
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f001 fc04 	bl	800dde0 <__d2b>
 800c5d8:	ec4b ab18 	vmov	d8, sl, fp
 800c5dc:	9018      	str	r0, [sp, #96]	; 0x60
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f aef6 	beq.w	800c3d0 <_strtod_l+0x490>
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f001 f94e 	bl	800d888 <__i2b>
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f43f aeee 	beq.w	800c3d0 <_strtod_l+0x490>
 800c5f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5f6:	9904      	ldr	r1, [sp, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	bfab      	itete	ge
 800c5fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c5fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c600:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c602:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c606:	bfac      	ite	ge
 800c608:	eb03 0902 	addge.w	r9, r3, r2
 800c60c:	1ad7      	sublt	r7, r2, r3
 800c60e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c610:	eba3 0801 	sub.w	r8, r3, r1
 800c614:	4490      	add	r8, r2
 800c616:	4ba1      	ldr	r3, [pc, #644]	; (800c89c <_strtod_l+0x95c>)
 800c618:	f108 38ff 	add.w	r8, r8, #4294967295
 800c61c:	4598      	cmp	r8, r3
 800c61e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c622:	f280 80c7 	bge.w	800c7b4 <_strtod_l+0x874>
 800c626:	eba3 0308 	sub.w	r3, r3, r8
 800c62a:	2b1f      	cmp	r3, #31
 800c62c:	eba2 0203 	sub.w	r2, r2, r3
 800c630:	f04f 0101 	mov.w	r1, #1
 800c634:	f300 80b1 	bgt.w	800c79a <_strtod_l+0x85a>
 800c638:	fa01 f303 	lsl.w	r3, r1, r3
 800c63c:	930d      	str	r3, [sp, #52]	; 0x34
 800c63e:	2300      	movs	r3, #0
 800c640:	9308      	str	r3, [sp, #32]
 800c642:	eb09 0802 	add.w	r8, r9, r2
 800c646:	9b04      	ldr	r3, [sp, #16]
 800c648:	45c1      	cmp	r9, r8
 800c64a:	4417      	add	r7, r2
 800c64c:	441f      	add	r7, r3
 800c64e:	464b      	mov	r3, r9
 800c650:	bfa8      	it	ge
 800c652:	4643      	movge	r3, r8
 800c654:	42bb      	cmp	r3, r7
 800c656:	bfa8      	it	ge
 800c658:	463b      	movge	r3, r7
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	bfc2      	ittt	gt
 800c65e:	eba8 0803 	subgt.w	r8, r8, r3
 800c662:	1aff      	subgt	r7, r7, r3
 800c664:	eba9 0903 	subgt.w	r9, r9, r3
 800c668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	dd17      	ble.n	800c69e <_strtod_l+0x75e>
 800c66e:	4631      	mov	r1, r6
 800c670:	461a      	mov	r2, r3
 800c672:	4620      	mov	r0, r4
 800c674:	f001 f9c8 	bl	800da08 <__pow5mult>
 800c678:	4606      	mov	r6, r0
 800c67a:	2800      	cmp	r0, #0
 800c67c:	f43f aea8 	beq.w	800c3d0 <_strtod_l+0x490>
 800c680:	4601      	mov	r1, r0
 800c682:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c684:	4620      	mov	r0, r4
 800c686:	f001 f915 	bl	800d8b4 <__multiply>
 800c68a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f43f ae9f 	beq.w	800c3d0 <_strtod_l+0x490>
 800c692:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c694:	4620      	mov	r0, r4
 800c696:	f000 fff5 	bl	800d684 <_Bfree>
 800c69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c69c:	9318      	str	r3, [sp, #96]	; 0x60
 800c69e:	f1b8 0f00 	cmp.w	r8, #0
 800c6a2:	f300 808c 	bgt.w	800c7be <_strtod_l+0x87e>
 800c6a6:	9b06      	ldr	r3, [sp, #24]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dd08      	ble.n	800c6be <_strtod_l+0x77e>
 800c6ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6ae:	9905      	ldr	r1, [sp, #20]
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f001 f9a9 	bl	800da08 <__pow5mult>
 800c6b6:	9005      	str	r0, [sp, #20]
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	f43f ae89 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6be:	2f00      	cmp	r7, #0
 800c6c0:	dd08      	ble.n	800c6d4 <_strtod_l+0x794>
 800c6c2:	9905      	ldr	r1, [sp, #20]
 800c6c4:	463a      	mov	r2, r7
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f001 f9f8 	bl	800dabc <__lshift>
 800c6cc:	9005      	str	r0, [sp, #20]
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f43f ae7e 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6d4:	f1b9 0f00 	cmp.w	r9, #0
 800c6d8:	dd08      	ble.n	800c6ec <_strtod_l+0x7ac>
 800c6da:	4631      	mov	r1, r6
 800c6dc:	464a      	mov	r2, r9
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f001 f9ec 	bl	800dabc <__lshift>
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f43f ae72 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6ec:	9a05      	ldr	r2, [sp, #20]
 800c6ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 fa6f 	bl	800dbd4 <__mdiff>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f43f ae69 	beq.w	800c3d0 <_strtod_l+0x490>
 800c6fe:	68c3      	ldr	r3, [r0, #12]
 800c700:	930b      	str	r3, [sp, #44]	; 0x2c
 800c702:	2300      	movs	r3, #0
 800c704:	60c3      	str	r3, [r0, #12]
 800c706:	4631      	mov	r1, r6
 800c708:	f001 fa48 	bl	800db9c <__mcmp>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	da60      	bge.n	800c7d2 <_strtod_l+0x892>
 800c710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c712:	ea53 030a 	orrs.w	r3, r3, sl
 800c716:	f040 8082 	bne.w	800c81e <_strtod_l+0x8de>
 800c71a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d17d      	bne.n	800c81e <_strtod_l+0x8de>
 800c722:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c726:	0d1b      	lsrs	r3, r3, #20
 800c728:	051b      	lsls	r3, r3, #20
 800c72a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c72e:	d976      	bls.n	800c81e <_strtod_l+0x8de>
 800c730:	696b      	ldr	r3, [r5, #20]
 800c732:	b913      	cbnz	r3, 800c73a <_strtod_l+0x7fa>
 800c734:	692b      	ldr	r3, [r5, #16]
 800c736:	2b01      	cmp	r3, #1
 800c738:	dd71      	ble.n	800c81e <_strtod_l+0x8de>
 800c73a:	4629      	mov	r1, r5
 800c73c:	2201      	movs	r2, #1
 800c73e:	4620      	mov	r0, r4
 800c740:	f001 f9bc 	bl	800dabc <__lshift>
 800c744:	4631      	mov	r1, r6
 800c746:	4605      	mov	r5, r0
 800c748:	f001 fa28 	bl	800db9c <__mcmp>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	dd66      	ble.n	800c81e <_strtod_l+0x8de>
 800c750:	9904      	ldr	r1, [sp, #16]
 800c752:	4a53      	ldr	r2, [pc, #332]	; (800c8a0 <_strtod_l+0x960>)
 800c754:	465b      	mov	r3, fp
 800c756:	2900      	cmp	r1, #0
 800c758:	f000 8081 	beq.w	800c85e <_strtod_l+0x91e>
 800c75c:	ea02 010b 	and.w	r1, r2, fp
 800c760:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c764:	dc7b      	bgt.n	800c85e <_strtod_l+0x91e>
 800c766:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c76a:	f77f aea9 	ble.w	800c4c0 <_strtod_l+0x580>
 800c76e:	4b4d      	ldr	r3, [pc, #308]	; (800c8a4 <_strtod_l+0x964>)
 800c770:	4650      	mov	r0, sl
 800c772:	4659      	mov	r1, fp
 800c774:	2200      	movs	r2, #0
 800c776:	f7f3 ff17 	bl	80005a8 <__aeabi_dmul>
 800c77a:	460b      	mov	r3, r1
 800c77c:	4303      	orrs	r3, r0
 800c77e:	bf08      	it	eq
 800c780:	2322      	moveq	r3, #34	; 0x22
 800c782:	4682      	mov	sl, r0
 800c784:	468b      	mov	fp, r1
 800c786:	bf08      	it	eq
 800c788:	6023      	streq	r3, [r4, #0]
 800c78a:	e62b      	b.n	800c3e4 <_strtod_l+0x4a4>
 800c78c:	f04f 32ff 	mov.w	r2, #4294967295
 800c790:	fa02 f303 	lsl.w	r3, r2, r3
 800c794:	ea03 0a0a 	and.w	sl, r3, sl
 800c798:	e6e3      	b.n	800c562 <_strtod_l+0x622>
 800c79a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c79e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c7a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c7a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c7aa:	fa01 f308 	lsl.w	r3, r1, r8
 800c7ae:	9308      	str	r3, [sp, #32]
 800c7b0:	910d      	str	r1, [sp, #52]	; 0x34
 800c7b2:	e746      	b.n	800c642 <_strtod_l+0x702>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	9308      	str	r3, [sp, #32]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c7bc:	e741      	b.n	800c642 <_strtod_l+0x702>
 800c7be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7c0:	4642      	mov	r2, r8
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f001 f97a 	bl	800dabc <__lshift>
 800c7c8:	9018      	str	r0, [sp, #96]	; 0x60
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f47f af6b 	bne.w	800c6a6 <_strtod_l+0x766>
 800c7d0:	e5fe      	b.n	800c3d0 <_strtod_l+0x490>
 800c7d2:	465f      	mov	r7, fp
 800c7d4:	d16e      	bne.n	800c8b4 <_strtod_l+0x974>
 800c7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7dc:	b342      	cbz	r2, 800c830 <_strtod_l+0x8f0>
 800c7de:	4a32      	ldr	r2, [pc, #200]	; (800c8a8 <_strtod_l+0x968>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d128      	bne.n	800c836 <_strtod_l+0x8f6>
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	4651      	mov	r1, sl
 800c7e8:	b1eb      	cbz	r3, 800c826 <_strtod_l+0x8e6>
 800c7ea:	4b2d      	ldr	r3, [pc, #180]	; (800c8a0 <_strtod_l+0x960>)
 800c7ec:	403b      	ands	r3, r7
 800c7ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f6:	d819      	bhi.n	800c82c <_strtod_l+0x8ec>
 800c7f8:	0d1b      	lsrs	r3, r3, #20
 800c7fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c802:	4299      	cmp	r1, r3
 800c804:	d117      	bne.n	800c836 <_strtod_l+0x8f6>
 800c806:	4b29      	ldr	r3, [pc, #164]	; (800c8ac <_strtod_l+0x96c>)
 800c808:	429f      	cmp	r7, r3
 800c80a:	d102      	bne.n	800c812 <_strtod_l+0x8d2>
 800c80c:	3101      	adds	r1, #1
 800c80e:	f43f addf 	beq.w	800c3d0 <_strtod_l+0x490>
 800c812:	4b23      	ldr	r3, [pc, #140]	; (800c8a0 <_strtod_l+0x960>)
 800c814:	403b      	ands	r3, r7
 800c816:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c81a:	f04f 0a00 	mov.w	sl, #0
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1a4      	bne.n	800c76e <_strtod_l+0x82e>
 800c824:	e5de      	b.n	800c3e4 <_strtod_l+0x4a4>
 800c826:	f04f 33ff 	mov.w	r3, #4294967295
 800c82a:	e7ea      	b.n	800c802 <_strtod_l+0x8c2>
 800c82c:	4613      	mov	r3, r2
 800c82e:	e7e8      	b.n	800c802 <_strtod_l+0x8c2>
 800c830:	ea53 030a 	orrs.w	r3, r3, sl
 800c834:	d08c      	beq.n	800c750 <_strtod_l+0x810>
 800c836:	9b08      	ldr	r3, [sp, #32]
 800c838:	b1db      	cbz	r3, 800c872 <_strtod_l+0x932>
 800c83a:	423b      	tst	r3, r7
 800c83c:	d0ef      	beq.n	800c81e <_strtod_l+0x8de>
 800c83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c840:	9a04      	ldr	r2, [sp, #16]
 800c842:	4650      	mov	r0, sl
 800c844:	4659      	mov	r1, fp
 800c846:	b1c3      	cbz	r3, 800c87a <_strtod_l+0x93a>
 800c848:	f7ff fb5c 	bl	800bf04 <sulp>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	ec51 0b18 	vmov	r0, r1, d8
 800c854:	f7f3 fcf2 	bl	800023c <__adddf3>
 800c858:	4682      	mov	sl, r0
 800c85a:	468b      	mov	fp, r1
 800c85c:	e7df      	b.n	800c81e <_strtod_l+0x8de>
 800c85e:	4013      	ands	r3, r2
 800c860:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c864:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c868:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c86c:	f04f 3aff 	mov.w	sl, #4294967295
 800c870:	e7d5      	b.n	800c81e <_strtod_l+0x8de>
 800c872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c874:	ea13 0f0a 	tst.w	r3, sl
 800c878:	e7e0      	b.n	800c83c <_strtod_l+0x8fc>
 800c87a:	f7ff fb43 	bl	800bf04 <sulp>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	ec51 0b18 	vmov	r0, r1, d8
 800c886:	f7f3 fcd7 	bl	8000238 <__aeabi_dsub>
 800c88a:	2200      	movs	r2, #0
 800c88c:	2300      	movs	r3, #0
 800c88e:	4682      	mov	sl, r0
 800c890:	468b      	mov	fp, r1
 800c892:	f7f4 f8f1 	bl	8000a78 <__aeabi_dcmpeq>
 800c896:	2800      	cmp	r0, #0
 800c898:	d0c1      	beq.n	800c81e <_strtod_l+0x8de>
 800c89a:	e611      	b.n	800c4c0 <_strtod_l+0x580>
 800c89c:	fffffc02 	.word	0xfffffc02
 800c8a0:	7ff00000 	.word	0x7ff00000
 800c8a4:	39500000 	.word	0x39500000
 800c8a8:	000fffff 	.word	0x000fffff
 800c8ac:	7fefffff 	.word	0x7fefffff
 800c8b0:	0800f7f0 	.word	0x0800f7f0
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f001 faee 	bl	800de98 <__ratio>
 800c8bc:	ec59 8b10 	vmov	r8, r9, d0
 800c8c0:	ee10 0a10 	vmov	r0, s0
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	f7f4 f8e8 	bl	8000aa0 <__aeabi_dcmple>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d07a      	beq.n	800c9ca <_strtod_l+0xa8a>
 800c8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d04a      	beq.n	800c970 <_strtod_l+0xa30>
 800c8da:	4b95      	ldr	r3, [pc, #596]	; (800cb30 <_strtod_l+0xbf0>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cb30 <_strtod_l+0xbf0>
 800c8e6:	f04f 0800 	mov.w	r8, #0
 800c8ea:	4b92      	ldr	r3, [pc, #584]	; (800cb34 <_strtod_l+0xbf4>)
 800c8ec:	403b      	ands	r3, r7
 800c8ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c8f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8f2:	4b91      	ldr	r3, [pc, #580]	; (800cb38 <_strtod_l+0xbf8>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	f040 80b0 	bne.w	800ca5a <_strtod_l+0xb1a>
 800c8fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c902:	ec4b ab10 	vmov	d0, sl, fp
 800c906:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c90a:	f001 f9ed 	bl	800dce8 <__ulp>
 800c90e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c912:	ec53 2b10 	vmov	r2, r3, d0
 800c916:	f7f3 fe47 	bl	80005a8 <__aeabi_dmul>
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	f7f3 fc8d 	bl	800023c <__adddf3>
 800c922:	460b      	mov	r3, r1
 800c924:	4983      	ldr	r1, [pc, #524]	; (800cb34 <_strtod_l+0xbf4>)
 800c926:	4a85      	ldr	r2, [pc, #532]	; (800cb3c <_strtod_l+0xbfc>)
 800c928:	4019      	ands	r1, r3
 800c92a:	4291      	cmp	r1, r2
 800c92c:	4682      	mov	sl, r0
 800c92e:	d960      	bls.n	800c9f2 <_strtod_l+0xab2>
 800c930:	ee18 3a90 	vmov	r3, s17
 800c934:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c938:	4293      	cmp	r3, r2
 800c93a:	d104      	bne.n	800c946 <_strtod_l+0xa06>
 800c93c:	ee18 3a10 	vmov	r3, s16
 800c940:	3301      	adds	r3, #1
 800c942:	f43f ad45 	beq.w	800c3d0 <_strtod_l+0x490>
 800c946:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cb48 <_strtod_l+0xc08>
 800c94a:	f04f 3aff 	mov.w	sl, #4294967295
 800c94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c950:	4620      	mov	r0, r4
 800c952:	f000 fe97 	bl	800d684 <_Bfree>
 800c956:	9905      	ldr	r1, [sp, #20]
 800c958:	4620      	mov	r0, r4
 800c95a:	f000 fe93 	bl	800d684 <_Bfree>
 800c95e:	4631      	mov	r1, r6
 800c960:	4620      	mov	r0, r4
 800c962:	f000 fe8f 	bl	800d684 <_Bfree>
 800c966:	4629      	mov	r1, r5
 800c968:	4620      	mov	r0, r4
 800c96a:	f000 fe8b 	bl	800d684 <_Bfree>
 800c96e:	e61a      	b.n	800c5a6 <_strtod_l+0x666>
 800c970:	f1ba 0f00 	cmp.w	sl, #0
 800c974:	d11b      	bne.n	800c9ae <_strtod_l+0xa6e>
 800c976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c97a:	b9f3      	cbnz	r3, 800c9ba <_strtod_l+0xa7a>
 800c97c:	4b6c      	ldr	r3, [pc, #432]	; (800cb30 <_strtod_l+0xbf0>)
 800c97e:	2200      	movs	r2, #0
 800c980:	4640      	mov	r0, r8
 800c982:	4649      	mov	r1, r9
 800c984:	f7f4 f882 	bl	8000a8c <__aeabi_dcmplt>
 800c988:	b9d0      	cbnz	r0, 800c9c0 <_strtod_l+0xa80>
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	4b6c      	ldr	r3, [pc, #432]	; (800cb40 <_strtod_l+0xc00>)
 800c990:	2200      	movs	r2, #0
 800c992:	f7f3 fe09 	bl	80005a8 <__aeabi_dmul>
 800c996:	4680      	mov	r8, r0
 800c998:	4689      	mov	r9, r1
 800c99a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c99e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c9a2:	9315      	str	r3, [sp, #84]	; 0x54
 800c9a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c9a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c9ac:	e79d      	b.n	800c8ea <_strtod_l+0x9aa>
 800c9ae:	f1ba 0f01 	cmp.w	sl, #1
 800c9b2:	d102      	bne.n	800c9ba <_strtod_l+0xa7a>
 800c9b4:	2f00      	cmp	r7, #0
 800c9b6:	f43f ad83 	beq.w	800c4c0 <_strtod_l+0x580>
 800c9ba:	4b62      	ldr	r3, [pc, #392]	; (800cb44 <_strtod_l+0xc04>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	e78e      	b.n	800c8de <_strtod_l+0x99e>
 800c9c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cb40 <_strtod_l+0xc00>
 800c9c4:	f04f 0800 	mov.w	r8, #0
 800c9c8:	e7e7      	b.n	800c99a <_strtod_l+0xa5a>
 800c9ca:	4b5d      	ldr	r3, [pc, #372]	; (800cb40 <_strtod_l+0xc00>)
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f7f3 fde9 	bl	80005a8 <__aeabi_dmul>
 800c9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9d8:	4680      	mov	r8, r0
 800c9da:	4689      	mov	r9, r1
 800c9dc:	b933      	cbnz	r3, 800c9ec <_strtod_l+0xaac>
 800c9de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9e2:	900e      	str	r0, [sp, #56]	; 0x38
 800c9e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c9ea:	e7dd      	b.n	800c9a8 <_strtod_l+0xa68>
 800c9ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c9f0:	e7f9      	b.n	800c9e6 <_strtod_l+0xaa6>
 800c9f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c9f6:	9b04      	ldr	r3, [sp, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1a8      	bne.n	800c94e <_strtod_l+0xa0e>
 800c9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca02:	0d1b      	lsrs	r3, r3, #20
 800ca04:	051b      	lsls	r3, r3, #20
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d1a1      	bne.n	800c94e <_strtod_l+0xa0e>
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	f7f4 f8db 	bl	8000bc8 <__aeabi_d2lz>
 800ca12:	f7f3 fd9b 	bl	800054c <__aeabi_l2d>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	f7f3 fc0b 	bl	8000238 <__aeabi_dsub>
 800ca22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca28:	ea43 030a 	orr.w	r3, r3, sl
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4689      	mov	r9, r1
 800ca32:	d055      	beq.n	800cae0 <_strtod_l+0xba0>
 800ca34:	a336      	add	r3, pc, #216	; (adr r3, 800cb10 <_strtod_l+0xbd0>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7f4 f827 	bl	8000a8c <__aeabi_dcmplt>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f47f acd0 	bne.w	800c3e4 <_strtod_l+0x4a4>
 800ca44:	a334      	add	r3, pc, #208	; (adr r3, 800cb18 <_strtod_l+0xbd8>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	f7f4 f83b 	bl	8000ac8 <__aeabi_dcmpgt>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f43f af7b 	beq.w	800c94e <_strtod_l+0xa0e>
 800ca58:	e4c4      	b.n	800c3e4 <_strtod_l+0x4a4>
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	b333      	cbz	r3, 800caac <_strtod_l+0xb6c>
 800ca5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca64:	d822      	bhi.n	800caac <_strtod_l+0xb6c>
 800ca66:	a32e      	add	r3, pc, #184	; (adr r3, 800cb20 <_strtod_l+0xbe0>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f4 f816 	bl	8000aa0 <__aeabi_dcmple>
 800ca74:	b1a0      	cbz	r0, 800caa0 <_strtod_l+0xb60>
 800ca76:	4649      	mov	r1, r9
 800ca78:	4640      	mov	r0, r8
 800ca7a:	f7f4 f86d 	bl	8000b58 <__aeabi_d2uiz>
 800ca7e:	2801      	cmp	r0, #1
 800ca80:	bf38      	it	cc
 800ca82:	2001      	movcc	r0, #1
 800ca84:	f7f3 fd16 	bl	80004b4 <__aeabi_ui2d>
 800ca88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca8a:	4680      	mov	r8, r0
 800ca8c:	4689      	mov	r9, r1
 800ca8e:	bb23      	cbnz	r3, 800cada <_strtod_l+0xb9a>
 800ca90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca94:	9010      	str	r0, [sp, #64]	; 0x40
 800ca96:	9311      	str	r3, [sp, #68]	; 0x44
 800ca98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800caa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800caa8:	1a9b      	subs	r3, r3, r2
 800caaa:	9309      	str	r3, [sp, #36]	; 0x24
 800caac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cab0:	eeb0 0a48 	vmov.f32	s0, s16
 800cab4:	eef0 0a68 	vmov.f32	s1, s17
 800cab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cabc:	f001 f914 	bl	800dce8 <__ulp>
 800cac0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cac4:	ec53 2b10 	vmov	r2, r3, d0
 800cac8:	f7f3 fd6e 	bl	80005a8 <__aeabi_dmul>
 800cacc:	ec53 2b18 	vmov	r2, r3, d8
 800cad0:	f7f3 fbb4 	bl	800023c <__adddf3>
 800cad4:	4682      	mov	sl, r0
 800cad6:	468b      	mov	fp, r1
 800cad8:	e78d      	b.n	800c9f6 <_strtod_l+0xab6>
 800cada:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cade:	e7db      	b.n	800ca98 <_strtod_l+0xb58>
 800cae0:	a311      	add	r3, pc, #68	; (adr r3, 800cb28 <_strtod_l+0xbe8>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	f7f3 ffd1 	bl	8000a8c <__aeabi_dcmplt>
 800caea:	e7b2      	b.n	800ca52 <_strtod_l+0xb12>
 800caec:	2300      	movs	r3, #0
 800caee:	930a      	str	r3, [sp, #40]	; 0x28
 800caf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800caf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caf4:	6013      	str	r3, [r2, #0]
 800caf6:	f7ff ba6b 	b.w	800bfd0 <_strtod_l+0x90>
 800cafa:	2a65      	cmp	r2, #101	; 0x65
 800cafc:	f43f ab5f 	beq.w	800c1be <_strtod_l+0x27e>
 800cb00:	2a45      	cmp	r2, #69	; 0x45
 800cb02:	f43f ab5c 	beq.w	800c1be <_strtod_l+0x27e>
 800cb06:	2301      	movs	r3, #1
 800cb08:	f7ff bb94 	b.w	800c234 <_strtod_l+0x2f4>
 800cb0c:	f3af 8000 	nop.w
 800cb10:	94a03595 	.word	0x94a03595
 800cb14:	3fdfffff 	.word	0x3fdfffff
 800cb18:	35afe535 	.word	0x35afe535
 800cb1c:	3fe00000 	.word	0x3fe00000
 800cb20:	ffc00000 	.word	0xffc00000
 800cb24:	41dfffff 	.word	0x41dfffff
 800cb28:	94a03595 	.word	0x94a03595
 800cb2c:	3fcfffff 	.word	0x3fcfffff
 800cb30:	3ff00000 	.word	0x3ff00000
 800cb34:	7ff00000 	.word	0x7ff00000
 800cb38:	7fe00000 	.word	0x7fe00000
 800cb3c:	7c9fffff 	.word	0x7c9fffff
 800cb40:	3fe00000 	.word	0x3fe00000
 800cb44:	bff00000 	.word	0xbff00000
 800cb48:	7fefffff 	.word	0x7fefffff

0800cb4c <strtod>:
 800cb4c:	460a      	mov	r2, r1
 800cb4e:	4601      	mov	r1, r0
 800cb50:	4802      	ldr	r0, [pc, #8]	; (800cb5c <strtod+0x10>)
 800cb52:	4b03      	ldr	r3, [pc, #12]	; (800cb60 <strtod+0x14>)
 800cb54:	6800      	ldr	r0, [r0, #0]
 800cb56:	f7ff b9f3 	b.w	800bf40 <_strtod_l>
 800cb5a:	bf00      	nop
 800cb5c:	20000024 	.word	0x20000024
 800cb60:	2000008c 	.word	0x2000008c

0800cb64 <_strtol_l.constprop.0>:
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb6a:	d001      	beq.n	800cb70 <_strtol_l.constprop.0+0xc>
 800cb6c:	2b24      	cmp	r3, #36	; 0x24
 800cb6e:	d906      	bls.n	800cb7e <_strtol_l.constprop.0+0x1a>
 800cb70:	f7fe fd26 	bl	800b5c0 <__errno>
 800cb74:	2316      	movs	r3, #22
 800cb76:	6003      	str	r3, [r0, #0]
 800cb78:	2000      	movs	r0, #0
 800cb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cc64 <_strtol_l.constprop.0+0x100>
 800cb82:	460d      	mov	r5, r1
 800cb84:	462e      	mov	r6, r5
 800cb86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb8a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cb8e:	f017 0708 	ands.w	r7, r7, #8
 800cb92:	d1f7      	bne.n	800cb84 <_strtol_l.constprop.0+0x20>
 800cb94:	2c2d      	cmp	r4, #45	; 0x2d
 800cb96:	d132      	bne.n	800cbfe <_strtol_l.constprop.0+0x9a>
 800cb98:	782c      	ldrb	r4, [r5, #0]
 800cb9a:	2701      	movs	r7, #1
 800cb9c:	1cb5      	adds	r5, r6, #2
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d05b      	beq.n	800cc5a <_strtol_l.constprop.0+0xf6>
 800cba2:	2b10      	cmp	r3, #16
 800cba4:	d109      	bne.n	800cbba <_strtol_l.constprop.0+0x56>
 800cba6:	2c30      	cmp	r4, #48	; 0x30
 800cba8:	d107      	bne.n	800cbba <_strtol_l.constprop.0+0x56>
 800cbaa:	782c      	ldrb	r4, [r5, #0]
 800cbac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cbb0:	2c58      	cmp	r4, #88	; 0x58
 800cbb2:	d14d      	bne.n	800cc50 <_strtol_l.constprop.0+0xec>
 800cbb4:	786c      	ldrb	r4, [r5, #1]
 800cbb6:	2310      	movs	r3, #16
 800cbb8:	3502      	adds	r5, #2
 800cbba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cbbe:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbc2:	f04f 0c00 	mov.w	ip, #0
 800cbc6:	fbb8 f9f3 	udiv	r9, r8, r3
 800cbca:	4666      	mov	r6, ip
 800cbcc:	fb03 8a19 	mls	sl, r3, r9, r8
 800cbd0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cbd4:	f1be 0f09 	cmp.w	lr, #9
 800cbd8:	d816      	bhi.n	800cc08 <_strtol_l.constprop.0+0xa4>
 800cbda:	4674      	mov	r4, lr
 800cbdc:	42a3      	cmp	r3, r4
 800cbde:	dd24      	ble.n	800cc2a <_strtol_l.constprop.0+0xc6>
 800cbe0:	f1bc 0f00 	cmp.w	ip, #0
 800cbe4:	db1e      	blt.n	800cc24 <_strtol_l.constprop.0+0xc0>
 800cbe6:	45b1      	cmp	r9, r6
 800cbe8:	d31c      	bcc.n	800cc24 <_strtol_l.constprop.0+0xc0>
 800cbea:	d101      	bne.n	800cbf0 <_strtol_l.constprop.0+0x8c>
 800cbec:	45a2      	cmp	sl, r4
 800cbee:	db19      	blt.n	800cc24 <_strtol_l.constprop.0+0xc0>
 800cbf0:	fb06 4603 	mla	r6, r6, r3, r4
 800cbf4:	f04f 0c01 	mov.w	ip, #1
 800cbf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbfc:	e7e8      	b.n	800cbd0 <_strtol_l.constprop.0+0x6c>
 800cbfe:	2c2b      	cmp	r4, #43	; 0x2b
 800cc00:	bf04      	itt	eq
 800cc02:	782c      	ldrbeq	r4, [r5, #0]
 800cc04:	1cb5      	addeq	r5, r6, #2
 800cc06:	e7ca      	b.n	800cb9e <_strtol_l.constprop.0+0x3a>
 800cc08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cc0c:	f1be 0f19 	cmp.w	lr, #25
 800cc10:	d801      	bhi.n	800cc16 <_strtol_l.constprop.0+0xb2>
 800cc12:	3c37      	subs	r4, #55	; 0x37
 800cc14:	e7e2      	b.n	800cbdc <_strtol_l.constprop.0+0x78>
 800cc16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cc1a:	f1be 0f19 	cmp.w	lr, #25
 800cc1e:	d804      	bhi.n	800cc2a <_strtol_l.constprop.0+0xc6>
 800cc20:	3c57      	subs	r4, #87	; 0x57
 800cc22:	e7db      	b.n	800cbdc <_strtol_l.constprop.0+0x78>
 800cc24:	f04f 3cff 	mov.w	ip, #4294967295
 800cc28:	e7e6      	b.n	800cbf8 <_strtol_l.constprop.0+0x94>
 800cc2a:	f1bc 0f00 	cmp.w	ip, #0
 800cc2e:	da05      	bge.n	800cc3c <_strtol_l.constprop.0+0xd8>
 800cc30:	2322      	movs	r3, #34	; 0x22
 800cc32:	6003      	str	r3, [r0, #0]
 800cc34:	4646      	mov	r6, r8
 800cc36:	b942      	cbnz	r2, 800cc4a <_strtol_l.constprop.0+0xe6>
 800cc38:	4630      	mov	r0, r6
 800cc3a:	e79e      	b.n	800cb7a <_strtol_l.constprop.0+0x16>
 800cc3c:	b107      	cbz	r7, 800cc40 <_strtol_l.constprop.0+0xdc>
 800cc3e:	4276      	negs	r6, r6
 800cc40:	2a00      	cmp	r2, #0
 800cc42:	d0f9      	beq.n	800cc38 <_strtol_l.constprop.0+0xd4>
 800cc44:	f1bc 0f00 	cmp.w	ip, #0
 800cc48:	d000      	beq.n	800cc4c <_strtol_l.constprop.0+0xe8>
 800cc4a:	1e69      	subs	r1, r5, #1
 800cc4c:	6011      	str	r1, [r2, #0]
 800cc4e:	e7f3      	b.n	800cc38 <_strtol_l.constprop.0+0xd4>
 800cc50:	2430      	movs	r4, #48	; 0x30
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1b1      	bne.n	800cbba <_strtol_l.constprop.0+0x56>
 800cc56:	2308      	movs	r3, #8
 800cc58:	e7af      	b.n	800cbba <_strtol_l.constprop.0+0x56>
 800cc5a:	2c30      	cmp	r4, #48	; 0x30
 800cc5c:	d0a5      	beq.n	800cbaa <_strtol_l.constprop.0+0x46>
 800cc5e:	230a      	movs	r3, #10
 800cc60:	e7ab      	b.n	800cbba <_strtol_l.constprop.0+0x56>
 800cc62:	bf00      	nop
 800cc64:	0800f651 	.word	0x0800f651

0800cc68 <strtol>:
 800cc68:	4613      	mov	r3, r2
 800cc6a:	460a      	mov	r2, r1
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	4802      	ldr	r0, [pc, #8]	; (800cc78 <strtol+0x10>)
 800cc70:	6800      	ldr	r0, [r0, #0]
 800cc72:	f7ff bf77 	b.w	800cb64 <_strtol_l.constprop.0>
 800cc76:	bf00      	nop
 800cc78:	20000024 	.word	0x20000024

0800cc7c <_vsiprintf_r>:
 800cc7c:	b500      	push	{lr}
 800cc7e:	b09b      	sub	sp, #108	; 0x6c
 800cc80:	9100      	str	r1, [sp, #0]
 800cc82:	9104      	str	r1, [sp, #16]
 800cc84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc88:	9105      	str	r1, [sp, #20]
 800cc8a:	9102      	str	r1, [sp, #8]
 800cc8c:	4905      	ldr	r1, [pc, #20]	; (800cca4 <_vsiprintf_r+0x28>)
 800cc8e:	9103      	str	r1, [sp, #12]
 800cc90:	4669      	mov	r1, sp
 800cc92:	f001 fa19 	bl	800e0c8 <_svfiprintf_r>
 800cc96:	9b00      	ldr	r3, [sp, #0]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	b01b      	add	sp, #108	; 0x6c
 800cc9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cca2:	bf00      	nop
 800cca4:	ffff0208 	.word	0xffff0208

0800cca8 <vsiprintf>:
 800cca8:	4613      	mov	r3, r2
 800ccaa:	460a      	mov	r2, r1
 800ccac:	4601      	mov	r1, r0
 800ccae:	4802      	ldr	r0, [pc, #8]	; (800ccb8 <vsiprintf+0x10>)
 800ccb0:	6800      	ldr	r0, [r0, #0]
 800ccb2:	f7ff bfe3 	b.w	800cc7c <_vsiprintf_r>
 800ccb6:	bf00      	nop
 800ccb8:	20000024 	.word	0x20000024

0800ccbc <__swbuf_r>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	460e      	mov	r6, r1
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	b118      	cbz	r0, 800ccce <__swbuf_r+0x12>
 800ccc6:	6983      	ldr	r3, [r0, #24]
 800ccc8:	b90b      	cbnz	r3, 800ccce <__swbuf_r+0x12>
 800ccca:	f7fe fd99 	bl	800b800 <__sinit>
 800ccce:	4b21      	ldr	r3, [pc, #132]	; (800cd54 <__swbuf_r+0x98>)
 800ccd0:	429c      	cmp	r4, r3
 800ccd2:	d12b      	bne.n	800cd2c <__swbuf_r+0x70>
 800ccd4:	686c      	ldr	r4, [r5, #4]
 800ccd6:	69a3      	ldr	r3, [r4, #24]
 800ccd8:	60a3      	str	r3, [r4, #8]
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	071a      	lsls	r2, r3, #28
 800ccde:	d52f      	bpl.n	800cd40 <__swbuf_r+0x84>
 800cce0:	6923      	ldr	r3, [r4, #16]
 800cce2:	b36b      	cbz	r3, 800cd40 <__swbuf_r+0x84>
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	6820      	ldr	r0, [r4, #0]
 800cce8:	1ac0      	subs	r0, r0, r3
 800ccea:	6963      	ldr	r3, [r4, #20]
 800ccec:	b2f6      	uxtb	r6, r6
 800ccee:	4283      	cmp	r3, r0
 800ccf0:	4637      	mov	r7, r6
 800ccf2:	dc04      	bgt.n	800ccfe <__swbuf_r+0x42>
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f7fe fcee 	bl	800b6d8 <_fflush_r>
 800ccfc:	bb30      	cbnz	r0, 800cd4c <__swbuf_r+0x90>
 800ccfe:	68a3      	ldr	r3, [r4, #8]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	60a3      	str	r3, [r4, #8]
 800cd04:	6823      	ldr	r3, [r4, #0]
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	6022      	str	r2, [r4, #0]
 800cd0a:	701e      	strb	r6, [r3, #0]
 800cd0c:	6963      	ldr	r3, [r4, #20]
 800cd0e:	3001      	adds	r0, #1
 800cd10:	4283      	cmp	r3, r0
 800cd12:	d004      	beq.n	800cd1e <__swbuf_r+0x62>
 800cd14:	89a3      	ldrh	r3, [r4, #12]
 800cd16:	07db      	lsls	r3, r3, #31
 800cd18:	d506      	bpl.n	800cd28 <__swbuf_r+0x6c>
 800cd1a:	2e0a      	cmp	r6, #10
 800cd1c:	d104      	bne.n	800cd28 <__swbuf_r+0x6c>
 800cd1e:	4621      	mov	r1, r4
 800cd20:	4628      	mov	r0, r5
 800cd22:	f7fe fcd9 	bl	800b6d8 <_fflush_r>
 800cd26:	b988      	cbnz	r0, 800cd4c <__swbuf_r+0x90>
 800cd28:	4638      	mov	r0, r7
 800cd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	; (800cd58 <__swbuf_r+0x9c>)
 800cd2e:	429c      	cmp	r4, r3
 800cd30:	d101      	bne.n	800cd36 <__swbuf_r+0x7a>
 800cd32:	68ac      	ldr	r4, [r5, #8]
 800cd34:	e7cf      	b.n	800ccd6 <__swbuf_r+0x1a>
 800cd36:	4b09      	ldr	r3, [pc, #36]	; (800cd5c <__swbuf_r+0xa0>)
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	bf08      	it	eq
 800cd3c:	68ec      	ldreq	r4, [r5, #12]
 800cd3e:	e7ca      	b.n	800ccd6 <__swbuf_r+0x1a>
 800cd40:	4621      	mov	r1, r4
 800cd42:	4628      	mov	r0, r5
 800cd44:	f000 f81e 	bl	800cd84 <__swsetup_r>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d0cb      	beq.n	800cce4 <__swbuf_r+0x28>
 800cd4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd50:	e7ea      	b.n	800cd28 <__swbuf_r+0x6c>
 800cd52:	bf00      	nop
 800cd54:	0800f774 	.word	0x0800f774
 800cd58:	0800f794 	.word	0x0800f794
 800cd5c:	0800f754 	.word	0x0800f754

0800cd60 <_write_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d07      	ldr	r5, [pc, #28]	; (800cd80 <_write_r+0x20>)
 800cd64:	4604      	mov	r4, r0
 800cd66:	4608      	mov	r0, r1
 800cd68:	4611      	mov	r1, r2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	602a      	str	r2, [r5, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	f7f4 fecc 	bl	8001b0c <_write>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_write_r+0x1e>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_write_r+0x1e>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	20001764 	.word	0x20001764

0800cd84 <__swsetup_r>:
 800cd84:	4b32      	ldr	r3, [pc, #200]	; (800ce50 <__swsetup_r+0xcc>)
 800cd86:	b570      	push	{r4, r5, r6, lr}
 800cd88:	681d      	ldr	r5, [r3, #0]
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	b125      	cbz	r5, 800cd9a <__swsetup_r+0x16>
 800cd90:	69ab      	ldr	r3, [r5, #24]
 800cd92:	b913      	cbnz	r3, 800cd9a <__swsetup_r+0x16>
 800cd94:	4628      	mov	r0, r5
 800cd96:	f7fe fd33 	bl	800b800 <__sinit>
 800cd9a:	4b2e      	ldr	r3, [pc, #184]	; (800ce54 <__swsetup_r+0xd0>)
 800cd9c:	429c      	cmp	r4, r3
 800cd9e:	d10f      	bne.n	800cdc0 <__swsetup_r+0x3c>
 800cda0:	686c      	ldr	r4, [r5, #4]
 800cda2:	89a3      	ldrh	r3, [r4, #12]
 800cda4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cda8:	0719      	lsls	r1, r3, #28
 800cdaa:	d42c      	bmi.n	800ce06 <__swsetup_r+0x82>
 800cdac:	06dd      	lsls	r5, r3, #27
 800cdae:	d411      	bmi.n	800cdd4 <__swsetup_r+0x50>
 800cdb0:	2309      	movs	r3, #9
 800cdb2:	6033      	str	r3, [r6, #0]
 800cdb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cdb8:	81a3      	strh	r3, [r4, #12]
 800cdba:	f04f 30ff 	mov.w	r0, #4294967295
 800cdbe:	e03e      	b.n	800ce3e <__swsetup_r+0xba>
 800cdc0:	4b25      	ldr	r3, [pc, #148]	; (800ce58 <__swsetup_r+0xd4>)
 800cdc2:	429c      	cmp	r4, r3
 800cdc4:	d101      	bne.n	800cdca <__swsetup_r+0x46>
 800cdc6:	68ac      	ldr	r4, [r5, #8]
 800cdc8:	e7eb      	b.n	800cda2 <__swsetup_r+0x1e>
 800cdca:	4b24      	ldr	r3, [pc, #144]	; (800ce5c <__swsetup_r+0xd8>)
 800cdcc:	429c      	cmp	r4, r3
 800cdce:	bf08      	it	eq
 800cdd0:	68ec      	ldreq	r4, [r5, #12]
 800cdd2:	e7e6      	b.n	800cda2 <__swsetup_r+0x1e>
 800cdd4:	0758      	lsls	r0, r3, #29
 800cdd6:	d512      	bpl.n	800cdfe <__swsetup_r+0x7a>
 800cdd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdda:	b141      	cbz	r1, 800cdee <__swsetup_r+0x6a>
 800cddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cde0:	4299      	cmp	r1, r3
 800cde2:	d002      	beq.n	800cdea <__swsetup_r+0x66>
 800cde4:	4630      	mov	r0, r6
 800cde6:	f7fe fe75 	bl	800bad4 <_free_r>
 800cdea:	2300      	movs	r3, #0
 800cdec:	6363      	str	r3, [r4, #52]	; 0x34
 800cdee:	89a3      	ldrh	r3, [r4, #12]
 800cdf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cdf4:	81a3      	strh	r3, [r4, #12]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	6063      	str	r3, [r4, #4]
 800cdfa:	6923      	ldr	r3, [r4, #16]
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	f043 0308 	orr.w	r3, r3, #8
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	b94b      	cbnz	r3, 800ce1e <__swsetup_r+0x9a>
 800ce0a:	89a3      	ldrh	r3, [r4, #12]
 800ce0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce14:	d003      	beq.n	800ce1e <__swsetup_r+0x9a>
 800ce16:	4621      	mov	r1, r4
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7fe fddb 	bl	800b9d4 <__smakebuf_r>
 800ce1e:	89a0      	ldrh	r0, [r4, #12]
 800ce20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce24:	f010 0301 	ands.w	r3, r0, #1
 800ce28:	d00a      	beq.n	800ce40 <__swsetup_r+0xbc>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60a3      	str	r3, [r4, #8]
 800ce2e:	6963      	ldr	r3, [r4, #20]
 800ce30:	425b      	negs	r3, r3
 800ce32:	61a3      	str	r3, [r4, #24]
 800ce34:	6923      	ldr	r3, [r4, #16]
 800ce36:	b943      	cbnz	r3, 800ce4a <__swsetup_r+0xc6>
 800ce38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce3c:	d1ba      	bne.n	800cdb4 <__swsetup_r+0x30>
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	0781      	lsls	r1, r0, #30
 800ce42:	bf58      	it	pl
 800ce44:	6963      	ldrpl	r3, [r4, #20]
 800ce46:	60a3      	str	r3, [r4, #8]
 800ce48:	e7f4      	b.n	800ce34 <__swsetup_r+0xb0>
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	e7f7      	b.n	800ce3e <__swsetup_r+0xba>
 800ce4e:	bf00      	nop
 800ce50:	20000024 	.word	0x20000024
 800ce54:	0800f774 	.word	0x0800f774
 800ce58:	0800f794 	.word	0x0800f794
 800ce5c:	0800f754 	.word	0x0800f754

0800ce60 <_close_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d06      	ldr	r5, [pc, #24]	; (800ce7c <_close_r+0x1c>)
 800ce64:	2300      	movs	r3, #0
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	602b      	str	r3, [r5, #0]
 800ce6c:	f7f8 f825 	bl	8004eba <_close>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_close_r+0x1a>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_close_r+0x1a>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	20001764 	.word	0x20001764

0800ce80 <_fstat_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d07      	ldr	r5, [pc, #28]	; (800cea0 <_fstat_r+0x20>)
 800ce84:	2300      	movs	r3, #0
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	f7f8 f820 	bl	8004ed2 <_fstat>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	d102      	bne.n	800ce9c <_fstat_r+0x1c>
 800ce96:	682b      	ldr	r3, [r5, #0]
 800ce98:	b103      	cbz	r3, 800ce9c <_fstat_r+0x1c>
 800ce9a:	6023      	str	r3, [r4, #0]
 800ce9c:	bd38      	pop	{r3, r4, r5, pc}
 800ce9e:	bf00      	nop
 800cea0:	20001764 	.word	0x20001764

0800cea4 <rshift>:
 800cea4:	6903      	ldr	r3, [r0, #16]
 800cea6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ceaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ceb2:	f100 0414 	add.w	r4, r0, #20
 800ceb6:	dd45      	ble.n	800cf44 <rshift+0xa0>
 800ceb8:	f011 011f 	ands.w	r1, r1, #31
 800cebc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cec0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cec4:	d10c      	bne.n	800cee0 <rshift+0x3c>
 800cec6:	f100 0710 	add.w	r7, r0, #16
 800ceca:	4629      	mov	r1, r5
 800cecc:	42b1      	cmp	r1, r6
 800cece:	d334      	bcc.n	800cf3a <rshift+0x96>
 800ced0:	1a9b      	subs	r3, r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	1eea      	subs	r2, r5, #3
 800ced6:	4296      	cmp	r6, r2
 800ced8:	bf38      	it	cc
 800ceda:	2300      	movcc	r3, #0
 800cedc:	4423      	add	r3, r4
 800cede:	e015      	b.n	800cf0c <rshift+0x68>
 800cee0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cee4:	f1c1 0820 	rsb	r8, r1, #32
 800cee8:	40cf      	lsrs	r7, r1
 800ceea:	f105 0e04 	add.w	lr, r5, #4
 800ceee:	46a1      	mov	r9, r4
 800cef0:	4576      	cmp	r6, lr
 800cef2:	46f4      	mov	ip, lr
 800cef4:	d815      	bhi.n	800cf22 <rshift+0x7e>
 800cef6:	1a9a      	subs	r2, r3, r2
 800cef8:	0092      	lsls	r2, r2, #2
 800cefa:	3a04      	subs	r2, #4
 800cefc:	3501      	adds	r5, #1
 800cefe:	42ae      	cmp	r6, r5
 800cf00:	bf38      	it	cc
 800cf02:	2200      	movcc	r2, #0
 800cf04:	18a3      	adds	r3, r4, r2
 800cf06:	50a7      	str	r7, [r4, r2]
 800cf08:	b107      	cbz	r7, 800cf0c <rshift+0x68>
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	1b1a      	subs	r2, r3, r4
 800cf0e:	42a3      	cmp	r3, r4
 800cf10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf14:	bf08      	it	eq
 800cf16:	2300      	moveq	r3, #0
 800cf18:	6102      	str	r2, [r0, #16]
 800cf1a:	bf08      	it	eq
 800cf1c:	6143      	streq	r3, [r0, #20]
 800cf1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf22:	f8dc c000 	ldr.w	ip, [ip]
 800cf26:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf2a:	ea4c 0707 	orr.w	r7, ip, r7
 800cf2e:	f849 7b04 	str.w	r7, [r9], #4
 800cf32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf36:	40cf      	lsrs	r7, r1
 800cf38:	e7da      	b.n	800cef0 <rshift+0x4c>
 800cf3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf42:	e7c3      	b.n	800cecc <rshift+0x28>
 800cf44:	4623      	mov	r3, r4
 800cf46:	e7e1      	b.n	800cf0c <rshift+0x68>

0800cf48 <__hexdig_fun>:
 800cf48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cf4c:	2b09      	cmp	r3, #9
 800cf4e:	d802      	bhi.n	800cf56 <__hexdig_fun+0xe>
 800cf50:	3820      	subs	r0, #32
 800cf52:	b2c0      	uxtb	r0, r0
 800cf54:	4770      	bx	lr
 800cf56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf5a:	2b05      	cmp	r3, #5
 800cf5c:	d801      	bhi.n	800cf62 <__hexdig_fun+0x1a>
 800cf5e:	3847      	subs	r0, #71	; 0x47
 800cf60:	e7f7      	b.n	800cf52 <__hexdig_fun+0xa>
 800cf62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf66:	2b05      	cmp	r3, #5
 800cf68:	d801      	bhi.n	800cf6e <__hexdig_fun+0x26>
 800cf6a:	3827      	subs	r0, #39	; 0x27
 800cf6c:	e7f1      	b.n	800cf52 <__hexdig_fun+0xa>
 800cf6e:	2000      	movs	r0, #0
 800cf70:	4770      	bx	lr
	...

0800cf74 <__gethex>:
 800cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf78:	ed2d 8b02 	vpush	{d8}
 800cf7c:	b089      	sub	sp, #36	; 0x24
 800cf7e:	ee08 0a10 	vmov	s16, r0
 800cf82:	9304      	str	r3, [sp, #16]
 800cf84:	4bb4      	ldr	r3, [pc, #720]	; (800d258 <__gethex+0x2e4>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	9301      	str	r3, [sp, #4]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	468b      	mov	fp, r1
 800cf8e:	4690      	mov	r8, r2
 800cf90:	f7f3 f8f6 	bl	8000180 <strlen>
 800cf94:	9b01      	ldr	r3, [sp, #4]
 800cf96:	f8db 2000 	ldr.w	r2, [fp]
 800cf9a:	4403      	add	r3, r0
 800cf9c:	4682      	mov	sl, r0
 800cf9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cfa2:	9305      	str	r3, [sp, #20]
 800cfa4:	1c93      	adds	r3, r2, #2
 800cfa6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cfaa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cfae:	32fe      	adds	r2, #254	; 0xfe
 800cfb0:	18d1      	adds	r1, r2, r3
 800cfb2:	461f      	mov	r7, r3
 800cfb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cfb8:	9100      	str	r1, [sp, #0]
 800cfba:	2830      	cmp	r0, #48	; 0x30
 800cfbc:	d0f8      	beq.n	800cfb0 <__gethex+0x3c>
 800cfbe:	f7ff ffc3 	bl	800cf48 <__hexdig_fun>
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d13a      	bne.n	800d03e <__gethex+0xca>
 800cfc8:	9901      	ldr	r1, [sp, #4]
 800cfca:	4652      	mov	r2, sl
 800cfcc:	4638      	mov	r0, r7
 800cfce:	f7fe ff6f 	bl	800beb0 <strncmp>
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d168      	bne.n	800d0aa <__gethex+0x136>
 800cfd8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cfdc:	eb07 060a 	add.w	r6, r7, sl
 800cfe0:	f7ff ffb2 	bl	800cf48 <__hexdig_fun>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d062      	beq.n	800d0ae <__gethex+0x13a>
 800cfe8:	4633      	mov	r3, r6
 800cfea:	7818      	ldrb	r0, [r3, #0]
 800cfec:	2830      	cmp	r0, #48	; 0x30
 800cfee:	461f      	mov	r7, r3
 800cff0:	f103 0301 	add.w	r3, r3, #1
 800cff4:	d0f9      	beq.n	800cfea <__gethex+0x76>
 800cff6:	f7ff ffa7 	bl	800cf48 <__hexdig_fun>
 800cffa:	2301      	movs	r3, #1
 800cffc:	fab0 f480 	clz	r4, r0
 800d000:	0964      	lsrs	r4, r4, #5
 800d002:	4635      	mov	r5, r6
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	463a      	mov	r2, r7
 800d008:	4616      	mov	r6, r2
 800d00a:	3201      	adds	r2, #1
 800d00c:	7830      	ldrb	r0, [r6, #0]
 800d00e:	f7ff ff9b 	bl	800cf48 <__hexdig_fun>
 800d012:	2800      	cmp	r0, #0
 800d014:	d1f8      	bne.n	800d008 <__gethex+0x94>
 800d016:	9901      	ldr	r1, [sp, #4]
 800d018:	4652      	mov	r2, sl
 800d01a:	4630      	mov	r0, r6
 800d01c:	f7fe ff48 	bl	800beb0 <strncmp>
 800d020:	b980      	cbnz	r0, 800d044 <__gethex+0xd0>
 800d022:	b94d      	cbnz	r5, 800d038 <__gethex+0xc4>
 800d024:	eb06 050a 	add.w	r5, r6, sl
 800d028:	462a      	mov	r2, r5
 800d02a:	4616      	mov	r6, r2
 800d02c:	3201      	adds	r2, #1
 800d02e:	7830      	ldrb	r0, [r6, #0]
 800d030:	f7ff ff8a 	bl	800cf48 <__hexdig_fun>
 800d034:	2800      	cmp	r0, #0
 800d036:	d1f8      	bne.n	800d02a <__gethex+0xb6>
 800d038:	1bad      	subs	r5, r5, r6
 800d03a:	00ad      	lsls	r5, r5, #2
 800d03c:	e004      	b.n	800d048 <__gethex+0xd4>
 800d03e:	2400      	movs	r4, #0
 800d040:	4625      	mov	r5, r4
 800d042:	e7e0      	b.n	800d006 <__gethex+0x92>
 800d044:	2d00      	cmp	r5, #0
 800d046:	d1f7      	bne.n	800d038 <__gethex+0xc4>
 800d048:	7833      	ldrb	r3, [r6, #0]
 800d04a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d04e:	2b50      	cmp	r3, #80	; 0x50
 800d050:	d13b      	bne.n	800d0ca <__gethex+0x156>
 800d052:	7873      	ldrb	r3, [r6, #1]
 800d054:	2b2b      	cmp	r3, #43	; 0x2b
 800d056:	d02c      	beq.n	800d0b2 <__gethex+0x13e>
 800d058:	2b2d      	cmp	r3, #45	; 0x2d
 800d05a:	d02e      	beq.n	800d0ba <__gethex+0x146>
 800d05c:	1c71      	adds	r1, r6, #1
 800d05e:	f04f 0900 	mov.w	r9, #0
 800d062:	7808      	ldrb	r0, [r1, #0]
 800d064:	f7ff ff70 	bl	800cf48 <__hexdig_fun>
 800d068:	1e43      	subs	r3, r0, #1
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b18      	cmp	r3, #24
 800d06e:	d82c      	bhi.n	800d0ca <__gethex+0x156>
 800d070:	f1a0 0210 	sub.w	r2, r0, #16
 800d074:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d078:	f7ff ff66 	bl	800cf48 <__hexdig_fun>
 800d07c:	1e43      	subs	r3, r0, #1
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b18      	cmp	r3, #24
 800d082:	d91d      	bls.n	800d0c0 <__gethex+0x14c>
 800d084:	f1b9 0f00 	cmp.w	r9, #0
 800d088:	d000      	beq.n	800d08c <__gethex+0x118>
 800d08a:	4252      	negs	r2, r2
 800d08c:	4415      	add	r5, r2
 800d08e:	f8cb 1000 	str.w	r1, [fp]
 800d092:	b1e4      	cbz	r4, 800d0ce <__gethex+0x15a>
 800d094:	9b00      	ldr	r3, [sp, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	bf14      	ite	ne
 800d09a:	2700      	movne	r7, #0
 800d09c:	2706      	moveq	r7, #6
 800d09e:	4638      	mov	r0, r7
 800d0a0:	b009      	add	sp, #36	; 0x24
 800d0a2:	ecbd 8b02 	vpop	{d8}
 800d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0aa:	463e      	mov	r6, r7
 800d0ac:	4625      	mov	r5, r4
 800d0ae:	2401      	movs	r4, #1
 800d0b0:	e7ca      	b.n	800d048 <__gethex+0xd4>
 800d0b2:	f04f 0900 	mov.w	r9, #0
 800d0b6:	1cb1      	adds	r1, r6, #2
 800d0b8:	e7d3      	b.n	800d062 <__gethex+0xee>
 800d0ba:	f04f 0901 	mov.w	r9, #1
 800d0be:	e7fa      	b.n	800d0b6 <__gethex+0x142>
 800d0c0:	230a      	movs	r3, #10
 800d0c2:	fb03 0202 	mla	r2, r3, r2, r0
 800d0c6:	3a10      	subs	r2, #16
 800d0c8:	e7d4      	b.n	800d074 <__gethex+0x100>
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	e7df      	b.n	800d08e <__gethex+0x11a>
 800d0ce:	1bf3      	subs	r3, r6, r7
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	2b07      	cmp	r3, #7
 800d0d6:	dc0b      	bgt.n	800d0f0 <__gethex+0x17c>
 800d0d8:	ee18 0a10 	vmov	r0, s16
 800d0dc:	f000 fa92 	bl	800d604 <_Balloc>
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	b940      	cbnz	r0, 800d0f6 <__gethex+0x182>
 800d0e4:	4b5d      	ldr	r3, [pc, #372]	; (800d25c <__gethex+0x2e8>)
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	21de      	movs	r1, #222	; 0xde
 800d0ea:	485d      	ldr	r0, [pc, #372]	; (800d260 <__gethex+0x2ec>)
 800d0ec:	f001 fc02 	bl	800e8f4 <__assert_func>
 800d0f0:	3101      	adds	r1, #1
 800d0f2:	105b      	asrs	r3, r3, #1
 800d0f4:	e7ee      	b.n	800d0d4 <__gethex+0x160>
 800d0f6:	f100 0914 	add.w	r9, r0, #20
 800d0fa:	f04f 0b00 	mov.w	fp, #0
 800d0fe:	f1ca 0301 	rsb	r3, sl, #1
 800d102:	f8cd 9008 	str.w	r9, [sp, #8]
 800d106:	f8cd b000 	str.w	fp, [sp]
 800d10a:	9306      	str	r3, [sp, #24]
 800d10c:	42b7      	cmp	r7, r6
 800d10e:	d340      	bcc.n	800d192 <__gethex+0x21e>
 800d110:	9802      	ldr	r0, [sp, #8]
 800d112:	9b00      	ldr	r3, [sp, #0]
 800d114:	f840 3b04 	str.w	r3, [r0], #4
 800d118:	eba0 0009 	sub.w	r0, r0, r9
 800d11c:	1080      	asrs	r0, r0, #2
 800d11e:	0146      	lsls	r6, r0, #5
 800d120:	6120      	str	r0, [r4, #16]
 800d122:	4618      	mov	r0, r3
 800d124:	f000 fb60 	bl	800d7e8 <__hi0bits>
 800d128:	1a30      	subs	r0, r6, r0
 800d12a:	f8d8 6000 	ldr.w	r6, [r8]
 800d12e:	42b0      	cmp	r0, r6
 800d130:	dd63      	ble.n	800d1fa <__gethex+0x286>
 800d132:	1b87      	subs	r7, r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	4620      	mov	r0, r4
 800d138:	f000 ff04 	bl	800df44 <__any_on>
 800d13c:	4682      	mov	sl, r0
 800d13e:	b1a8      	cbz	r0, 800d16c <__gethex+0x1f8>
 800d140:	1e7b      	subs	r3, r7, #1
 800d142:	1159      	asrs	r1, r3, #5
 800d144:	f003 021f 	and.w	r2, r3, #31
 800d148:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d14c:	f04f 0a01 	mov.w	sl, #1
 800d150:	fa0a f202 	lsl.w	r2, sl, r2
 800d154:	420a      	tst	r2, r1
 800d156:	d009      	beq.n	800d16c <__gethex+0x1f8>
 800d158:	4553      	cmp	r3, sl
 800d15a:	dd05      	ble.n	800d168 <__gethex+0x1f4>
 800d15c:	1eb9      	subs	r1, r7, #2
 800d15e:	4620      	mov	r0, r4
 800d160:	f000 fef0 	bl	800df44 <__any_on>
 800d164:	2800      	cmp	r0, #0
 800d166:	d145      	bne.n	800d1f4 <__gethex+0x280>
 800d168:	f04f 0a02 	mov.w	sl, #2
 800d16c:	4639      	mov	r1, r7
 800d16e:	4620      	mov	r0, r4
 800d170:	f7ff fe98 	bl	800cea4 <rshift>
 800d174:	443d      	add	r5, r7
 800d176:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d17a:	42ab      	cmp	r3, r5
 800d17c:	da4c      	bge.n	800d218 <__gethex+0x2a4>
 800d17e:	ee18 0a10 	vmov	r0, s16
 800d182:	4621      	mov	r1, r4
 800d184:	f000 fa7e 	bl	800d684 <_Bfree>
 800d188:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d18a:	2300      	movs	r3, #0
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	27a3      	movs	r7, #163	; 0xa3
 800d190:	e785      	b.n	800d09e <__gethex+0x12a>
 800d192:	1e73      	subs	r3, r6, #1
 800d194:	9a05      	ldr	r2, [sp, #20]
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d019      	beq.n	800d1d4 <__gethex+0x260>
 800d1a0:	f1bb 0f20 	cmp.w	fp, #32
 800d1a4:	d107      	bne.n	800d1b6 <__gethex+0x242>
 800d1a6:	9b02      	ldr	r3, [sp, #8]
 800d1a8:	9a00      	ldr	r2, [sp, #0]
 800d1aa:	f843 2b04 	str.w	r2, [r3], #4
 800d1ae:	9302      	str	r3, [sp, #8]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	469b      	mov	fp, r3
 800d1b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d1ba:	f7ff fec5 	bl	800cf48 <__hexdig_fun>
 800d1be:	9b00      	ldr	r3, [sp, #0]
 800d1c0:	f000 000f 	and.w	r0, r0, #15
 800d1c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800d1c8:	4303      	orrs	r3, r0
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	f10b 0b04 	add.w	fp, fp, #4
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	e00d      	b.n	800d1f0 <__gethex+0x27c>
 800d1d4:	9b03      	ldr	r3, [sp, #12]
 800d1d6:	9a06      	ldr	r2, [sp, #24]
 800d1d8:	4413      	add	r3, r2
 800d1da:	42bb      	cmp	r3, r7
 800d1dc:	d3e0      	bcc.n	800d1a0 <__gethex+0x22c>
 800d1de:	4618      	mov	r0, r3
 800d1e0:	9901      	ldr	r1, [sp, #4]
 800d1e2:	9307      	str	r3, [sp, #28]
 800d1e4:	4652      	mov	r2, sl
 800d1e6:	f7fe fe63 	bl	800beb0 <strncmp>
 800d1ea:	9b07      	ldr	r3, [sp, #28]
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d1d7      	bne.n	800d1a0 <__gethex+0x22c>
 800d1f0:	461e      	mov	r6, r3
 800d1f2:	e78b      	b.n	800d10c <__gethex+0x198>
 800d1f4:	f04f 0a03 	mov.w	sl, #3
 800d1f8:	e7b8      	b.n	800d16c <__gethex+0x1f8>
 800d1fa:	da0a      	bge.n	800d212 <__gethex+0x29e>
 800d1fc:	1a37      	subs	r7, r6, r0
 800d1fe:	4621      	mov	r1, r4
 800d200:	ee18 0a10 	vmov	r0, s16
 800d204:	463a      	mov	r2, r7
 800d206:	f000 fc59 	bl	800dabc <__lshift>
 800d20a:	1bed      	subs	r5, r5, r7
 800d20c:	4604      	mov	r4, r0
 800d20e:	f100 0914 	add.w	r9, r0, #20
 800d212:	f04f 0a00 	mov.w	sl, #0
 800d216:	e7ae      	b.n	800d176 <__gethex+0x202>
 800d218:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d21c:	42a8      	cmp	r0, r5
 800d21e:	dd72      	ble.n	800d306 <__gethex+0x392>
 800d220:	1b45      	subs	r5, r0, r5
 800d222:	42ae      	cmp	r6, r5
 800d224:	dc36      	bgt.n	800d294 <__gethex+0x320>
 800d226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d22a:	2b02      	cmp	r3, #2
 800d22c:	d02a      	beq.n	800d284 <__gethex+0x310>
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d02c      	beq.n	800d28c <__gethex+0x318>
 800d232:	2b01      	cmp	r3, #1
 800d234:	d11c      	bne.n	800d270 <__gethex+0x2fc>
 800d236:	42ae      	cmp	r6, r5
 800d238:	d11a      	bne.n	800d270 <__gethex+0x2fc>
 800d23a:	2e01      	cmp	r6, #1
 800d23c:	d112      	bne.n	800d264 <__gethex+0x2f0>
 800d23e:	9a04      	ldr	r2, [sp, #16]
 800d240:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	2301      	movs	r3, #1
 800d248:	6123      	str	r3, [r4, #16]
 800d24a:	f8c9 3000 	str.w	r3, [r9]
 800d24e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d250:	2762      	movs	r7, #98	; 0x62
 800d252:	601c      	str	r4, [r3, #0]
 800d254:	e723      	b.n	800d09e <__gethex+0x12a>
 800d256:	bf00      	nop
 800d258:	0800f890 	.word	0x0800f890
 800d25c:	0800f818 	.word	0x0800f818
 800d260:	0800f829 	.word	0x0800f829
 800d264:	1e71      	subs	r1, r6, #1
 800d266:	4620      	mov	r0, r4
 800d268:	f000 fe6c 	bl	800df44 <__any_on>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d1e6      	bne.n	800d23e <__gethex+0x2ca>
 800d270:	ee18 0a10 	vmov	r0, s16
 800d274:	4621      	mov	r1, r4
 800d276:	f000 fa05 	bl	800d684 <_Bfree>
 800d27a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d27c:	2300      	movs	r3, #0
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	2750      	movs	r7, #80	; 0x50
 800d282:	e70c      	b.n	800d09e <__gethex+0x12a>
 800d284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1f2      	bne.n	800d270 <__gethex+0x2fc>
 800d28a:	e7d8      	b.n	800d23e <__gethex+0x2ca>
 800d28c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1d5      	bne.n	800d23e <__gethex+0x2ca>
 800d292:	e7ed      	b.n	800d270 <__gethex+0x2fc>
 800d294:	1e6f      	subs	r7, r5, #1
 800d296:	f1ba 0f00 	cmp.w	sl, #0
 800d29a:	d131      	bne.n	800d300 <__gethex+0x38c>
 800d29c:	b127      	cbz	r7, 800d2a8 <__gethex+0x334>
 800d29e:	4639      	mov	r1, r7
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f000 fe4f 	bl	800df44 <__any_on>
 800d2a6:	4682      	mov	sl, r0
 800d2a8:	117b      	asrs	r3, r7, #5
 800d2aa:	2101      	movs	r1, #1
 800d2ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d2b0:	f007 071f 	and.w	r7, r7, #31
 800d2b4:	fa01 f707 	lsl.w	r7, r1, r7
 800d2b8:	421f      	tst	r7, r3
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	4620      	mov	r0, r4
 800d2be:	bf18      	it	ne
 800d2c0:	f04a 0a02 	orrne.w	sl, sl, #2
 800d2c4:	1b76      	subs	r6, r6, r5
 800d2c6:	f7ff fded 	bl	800cea4 <rshift>
 800d2ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d2ce:	2702      	movs	r7, #2
 800d2d0:	f1ba 0f00 	cmp.w	sl, #0
 800d2d4:	d048      	beq.n	800d368 <__gethex+0x3f4>
 800d2d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d015      	beq.n	800d30a <__gethex+0x396>
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	d017      	beq.n	800d312 <__gethex+0x39e>
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d109      	bne.n	800d2fa <__gethex+0x386>
 800d2e6:	f01a 0f02 	tst.w	sl, #2
 800d2ea:	d006      	beq.n	800d2fa <__gethex+0x386>
 800d2ec:	f8d9 0000 	ldr.w	r0, [r9]
 800d2f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800d2f4:	f01a 0f01 	tst.w	sl, #1
 800d2f8:	d10e      	bne.n	800d318 <__gethex+0x3a4>
 800d2fa:	f047 0710 	orr.w	r7, r7, #16
 800d2fe:	e033      	b.n	800d368 <__gethex+0x3f4>
 800d300:	f04f 0a01 	mov.w	sl, #1
 800d304:	e7d0      	b.n	800d2a8 <__gethex+0x334>
 800d306:	2701      	movs	r7, #1
 800d308:	e7e2      	b.n	800d2d0 <__gethex+0x35c>
 800d30a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d30c:	f1c3 0301 	rsb	r3, r3, #1
 800d310:	9315      	str	r3, [sp, #84]	; 0x54
 800d312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d314:	2b00      	cmp	r3, #0
 800d316:	d0f0      	beq.n	800d2fa <__gethex+0x386>
 800d318:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d31c:	f104 0314 	add.w	r3, r4, #20
 800d320:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d324:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d328:	f04f 0c00 	mov.w	ip, #0
 800d32c:	4618      	mov	r0, r3
 800d32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d332:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d336:	d01c      	beq.n	800d372 <__gethex+0x3fe>
 800d338:	3201      	adds	r2, #1
 800d33a:	6002      	str	r2, [r0, #0]
 800d33c:	2f02      	cmp	r7, #2
 800d33e:	f104 0314 	add.w	r3, r4, #20
 800d342:	d13f      	bne.n	800d3c4 <__gethex+0x450>
 800d344:	f8d8 2000 	ldr.w	r2, [r8]
 800d348:	3a01      	subs	r2, #1
 800d34a:	42b2      	cmp	r2, r6
 800d34c:	d10a      	bne.n	800d364 <__gethex+0x3f0>
 800d34e:	1171      	asrs	r1, r6, #5
 800d350:	2201      	movs	r2, #1
 800d352:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d356:	f006 061f 	and.w	r6, r6, #31
 800d35a:	fa02 f606 	lsl.w	r6, r2, r6
 800d35e:	421e      	tst	r6, r3
 800d360:	bf18      	it	ne
 800d362:	4617      	movne	r7, r2
 800d364:	f047 0720 	orr.w	r7, r7, #32
 800d368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d36a:	601c      	str	r4, [r3, #0]
 800d36c:	9b04      	ldr	r3, [sp, #16]
 800d36e:	601d      	str	r5, [r3, #0]
 800d370:	e695      	b.n	800d09e <__gethex+0x12a>
 800d372:	4299      	cmp	r1, r3
 800d374:	f843 cc04 	str.w	ip, [r3, #-4]
 800d378:	d8d8      	bhi.n	800d32c <__gethex+0x3b8>
 800d37a:	68a3      	ldr	r3, [r4, #8]
 800d37c:	459b      	cmp	fp, r3
 800d37e:	db19      	blt.n	800d3b4 <__gethex+0x440>
 800d380:	6861      	ldr	r1, [r4, #4]
 800d382:	ee18 0a10 	vmov	r0, s16
 800d386:	3101      	adds	r1, #1
 800d388:	f000 f93c 	bl	800d604 <_Balloc>
 800d38c:	4681      	mov	r9, r0
 800d38e:	b918      	cbnz	r0, 800d398 <__gethex+0x424>
 800d390:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <__gethex+0x488>)
 800d392:	4602      	mov	r2, r0
 800d394:	2184      	movs	r1, #132	; 0x84
 800d396:	e6a8      	b.n	800d0ea <__gethex+0x176>
 800d398:	6922      	ldr	r2, [r4, #16]
 800d39a:	3202      	adds	r2, #2
 800d39c:	f104 010c 	add.w	r1, r4, #12
 800d3a0:	0092      	lsls	r2, r2, #2
 800d3a2:	300c      	adds	r0, #12
 800d3a4:	f7fe fb66 	bl	800ba74 <memcpy>
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	ee18 0a10 	vmov	r0, s16
 800d3ae:	f000 f969 	bl	800d684 <_Bfree>
 800d3b2:	464c      	mov	r4, r9
 800d3b4:	6923      	ldr	r3, [r4, #16]
 800d3b6:	1c5a      	adds	r2, r3, #1
 800d3b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d3bc:	6122      	str	r2, [r4, #16]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	615a      	str	r2, [r3, #20]
 800d3c2:	e7bb      	b.n	800d33c <__gethex+0x3c8>
 800d3c4:	6922      	ldr	r2, [r4, #16]
 800d3c6:	455a      	cmp	r2, fp
 800d3c8:	dd0b      	ble.n	800d3e2 <__gethex+0x46e>
 800d3ca:	2101      	movs	r1, #1
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f7ff fd69 	bl	800cea4 <rshift>
 800d3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3d6:	3501      	adds	r5, #1
 800d3d8:	42ab      	cmp	r3, r5
 800d3da:	f6ff aed0 	blt.w	800d17e <__gethex+0x20a>
 800d3de:	2701      	movs	r7, #1
 800d3e0:	e7c0      	b.n	800d364 <__gethex+0x3f0>
 800d3e2:	f016 061f 	ands.w	r6, r6, #31
 800d3e6:	d0fa      	beq.n	800d3de <__gethex+0x46a>
 800d3e8:	4453      	add	r3, sl
 800d3ea:	f1c6 0620 	rsb	r6, r6, #32
 800d3ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3f2:	f000 f9f9 	bl	800d7e8 <__hi0bits>
 800d3f6:	42b0      	cmp	r0, r6
 800d3f8:	dbe7      	blt.n	800d3ca <__gethex+0x456>
 800d3fa:	e7f0      	b.n	800d3de <__gethex+0x46a>
 800d3fc:	0800f818 	.word	0x0800f818

0800d400 <L_shift>:
 800d400:	f1c2 0208 	rsb	r2, r2, #8
 800d404:	0092      	lsls	r2, r2, #2
 800d406:	b570      	push	{r4, r5, r6, lr}
 800d408:	f1c2 0620 	rsb	r6, r2, #32
 800d40c:	6843      	ldr	r3, [r0, #4]
 800d40e:	6804      	ldr	r4, [r0, #0]
 800d410:	fa03 f506 	lsl.w	r5, r3, r6
 800d414:	432c      	orrs	r4, r5
 800d416:	40d3      	lsrs	r3, r2
 800d418:	6004      	str	r4, [r0, #0]
 800d41a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d41e:	4288      	cmp	r0, r1
 800d420:	d3f4      	bcc.n	800d40c <L_shift+0xc>
 800d422:	bd70      	pop	{r4, r5, r6, pc}

0800d424 <__match>:
 800d424:	b530      	push	{r4, r5, lr}
 800d426:	6803      	ldr	r3, [r0, #0]
 800d428:	3301      	adds	r3, #1
 800d42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d42e:	b914      	cbnz	r4, 800d436 <__match+0x12>
 800d430:	6003      	str	r3, [r0, #0]
 800d432:	2001      	movs	r0, #1
 800d434:	bd30      	pop	{r4, r5, pc}
 800d436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d43a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d43e:	2d19      	cmp	r5, #25
 800d440:	bf98      	it	ls
 800d442:	3220      	addls	r2, #32
 800d444:	42a2      	cmp	r2, r4
 800d446:	d0f0      	beq.n	800d42a <__match+0x6>
 800d448:	2000      	movs	r0, #0
 800d44a:	e7f3      	b.n	800d434 <__match+0x10>

0800d44c <__hexnan>:
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	680b      	ldr	r3, [r1, #0]
 800d452:	115e      	asrs	r6, r3, #5
 800d454:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d458:	f013 031f 	ands.w	r3, r3, #31
 800d45c:	b087      	sub	sp, #28
 800d45e:	bf18      	it	ne
 800d460:	3604      	addne	r6, #4
 800d462:	2500      	movs	r5, #0
 800d464:	1f37      	subs	r7, r6, #4
 800d466:	4690      	mov	r8, r2
 800d468:	6802      	ldr	r2, [r0, #0]
 800d46a:	9301      	str	r3, [sp, #4]
 800d46c:	4682      	mov	sl, r0
 800d46e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d472:	46b9      	mov	r9, r7
 800d474:	463c      	mov	r4, r7
 800d476:	9502      	str	r5, [sp, #8]
 800d478:	46ab      	mov	fp, r5
 800d47a:	7851      	ldrb	r1, [r2, #1]
 800d47c:	1c53      	adds	r3, r2, #1
 800d47e:	9303      	str	r3, [sp, #12]
 800d480:	b341      	cbz	r1, 800d4d4 <__hexnan+0x88>
 800d482:	4608      	mov	r0, r1
 800d484:	9205      	str	r2, [sp, #20]
 800d486:	9104      	str	r1, [sp, #16]
 800d488:	f7ff fd5e 	bl	800cf48 <__hexdig_fun>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d14f      	bne.n	800d530 <__hexnan+0xe4>
 800d490:	9904      	ldr	r1, [sp, #16]
 800d492:	9a05      	ldr	r2, [sp, #20]
 800d494:	2920      	cmp	r1, #32
 800d496:	d818      	bhi.n	800d4ca <__hexnan+0x7e>
 800d498:	9b02      	ldr	r3, [sp, #8]
 800d49a:	459b      	cmp	fp, r3
 800d49c:	dd13      	ble.n	800d4c6 <__hexnan+0x7a>
 800d49e:	454c      	cmp	r4, r9
 800d4a0:	d206      	bcs.n	800d4b0 <__hexnan+0x64>
 800d4a2:	2d07      	cmp	r5, #7
 800d4a4:	dc04      	bgt.n	800d4b0 <__hexnan+0x64>
 800d4a6:	462a      	mov	r2, r5
 800d4a8:	4649      	mov	r1, r9
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f7ff ffa8 	bl	800d400 <L_shift>
 800d4b0:	4544      	cmp	r4, r8
 800d4b2:	d950      	bls.n	800d556 <__hexnan+0x10a>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	f1a4 0904 	sub.w	r9, r4, #4
 800d4ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4be:	f8cd b008 	str.w	fp, [sp, #8]
 800d4c2:	464c      	mov	r4, r9
 800d4c4:	461d      	mov	r5, r3
 800d4c6:	9a03      	ldr	r2, [sp, #12]
 800d4c8:	e7d7      	b.n	800d47a <__hexnan+0x2e>
 800d4ca:	2929      	cmp	r1, #41	; 0x29
 800d4cc:	d156      	bne.n	800d57c <__hexnan+0x130>
 800d4ce:	3202      	adds	r2, #2
 800d4d0:	f8ca 2000 	str.w	r2, [sl]
 800d4d4:	f1bb 0f00 	cmp.w	fp, #0
 800d4d8:	d050      	beq.n	800d57c <__hexnan+0x130>
 800d4da:	454c      	cmp	r4, r9
 800d4dc:	d206      	bcs.n	800d4ec <__hexnan+0xa0>
 800d4de:	2d07      	cmp	r5, #7
 800d4e0:	dc04      	bgt.n	800d4ec <__hexnan+0xa0>
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	4649      	mov	r1, r9
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f7ff ff8a 	bl	800d400 <L_shift>
 800d4ec:	4544      	cmp	r4, r8
 800d4ee:	d934      	bls.n	800d55a <__hexnan+0x10e>
 800d4f0:	f1a8 0204 	sub.w	r2, r8, #4
 800d4f4:	4623      	mov	r3, r4
 800d4f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4fa:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4fe:	429f      	cmp	r7, r3
 800d500:	d2f9      	bcs.n	800d4f6 <__hexnan+0xaa>
 800d502:	1b3b      	subs	r3, r7, r4
 800d504:	f023 0303 	bic.w	r3, r3, #3
 800d508:	3304      	adds	r3, #4
 800d50a:	3401      	adds	r4, #1
 800d50c:	3e03      	subs	r6, #3
 800d50e:	42b4      	cmp	r4, r6
 800d510:	bf88      	it	hi
 800d512:	2304      	movhi	r3, #4
 800d514:	4443      	add	r3, r8
 800d516:	2200      	movs	r2, #0
 800d518:	f843 2b04 	str.w	r2, [r3], #4
 800d51c:	429f      	cmp	r7, r3
 800d51e:	d2fb      	bcs.n	800d518 <__hexnan+0xcc>
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	b91b      	cbnz	r3, 800d52c <__hexnan+0xe0>
 800d524:	4547      	cmp	r7, r8
 800d526:	d127      	bne.n	800d578 <__hexnan+0x12c>
 800d528:	2301      	movs	r3, #1
 800d52a:	603b      	str	r3, [r7, #0]
 800d52c:	2005      	movs	r0, #5
 800d52e:	e026      	b.n	800d57e <__hexnan+0x132>
 800d530:	3501      	adds	r5, #1
 800d532:	2d08      	cmp	r5, #8
 800d534:	f10b 0b01 	add.w	fp, fp, #1
 800d538:	dd06      	ble.n	800d548 <__hexnan+0xfc>
 800d53a:	4544      	cmp	r4, r8
 800d53c:	d9c3      	bls.n	800d4c6 <__hexnan+0x7a>
 800d53e:	2300      	movs	r3, #0
 800d540:	f844 3c04 	str.w	r3, [r4, #-4]
 800d544:	2501      	movs	r5, #1
 800d546:	3c04      	subs	r4, #4
 800d548:	6822      	ldr	r2, [r4, #0]
 800d54a:	f000 000f 	and.w	r0, r0, #15
 800d54e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d552:	6022      	str	r2, [r4, #0]
 800d554:	e7b7      	b.n	800d4c6 <__hexnan+0x7a>
 800d556:	2508      	movs	r5, #8
 800d558:	e7b5      	b.n	800d4c6 <__hexnan+0x7a>
 800d55a:	9b01      	ldr	r3, [sp, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0df      	beq.n	800d520 <__hexnan+0xd4>
 800d560:	f04f 32ff 	mov.w	r2, #4294967295
 800d564:	f1c3 0320 	rsb	r3, r3, #32
 800d568:	fa22 f303 	lsr.w	r3, r2, r3
 800d56c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d570:	401a      	ands	r2, r3
 800d572:	f846 2c04 	str.w	r2, [r6, #-4]
 800d576:	e7d3      	b.n	800d520 <__hexnan+0xd4>
 800d578:	3f04      	subs	r7, #4
 800d57a:	e7d1      	b.n	800d520 <__hexnan+0xd4>
 800d57c:	2004      	movs	r0, #4
 800d57e:	b007      	add	sp, #28
 800d580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d584 <_isatty_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d06      	ldr	r5, [pc, #24]	; (800d5a0 <_isatty_r+0x1c>)
 800d588:	2300      	movs	r3, #0
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	602b      	str	r3, [r5, #0]
 800d590:	f7f7 fcaf 	bl	8004ef2 <_isatty>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_isatty_r+0x1a>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_isatty_r+0x1a>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	20001764 	.word	0x20001764

0800d5a4 <_lseek_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4d07      	ldr	r5, [pc, #28]	; (800d5c4 <_lseek_r+0x20>)
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	602a      	str	r2, [r5, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f7f7 fca8 	bl	8004f08 <_lseek>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_lseek_r+0x1e>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_lseek_r+0x1e>
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	20001764 	.word	0x20001764

0800d5c8 <__ascii_mbtowc>:
 800d5c8:	b082      	sub	sp, #8
 800d5ca:	b901      	cbnz	r1, 800d5ce <__ascii_mbtowc+0x6>
 800d5cc:	a901      	add	r1, sp, #4
 800d5ce:	b142      	cbz	r2, 800d5e2 <__ascii_mbtowc+0x1a>
 800d5d0:	b14b      	cbz	r3, 800d5e6 <__ascii_mbtowc+0x1e>
 800d5d2:	7813      	ldrb	r3, [r2, #0]
 800d5d4:	600b      	str	r3, [r1, #0]
 800d5d6:	7812      	ldrb	r2, [r2, #0]
 800d5d8:	1e10      	subs	r0, r2, #0
 800d5da:	bf18      	it	ne
 800d5dc:	2001      	movne	r0, #1
 800d5de:	b002      	add	sp, #8
 800d5e0:	4770      	bx	lr
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	e7fb      	b.n	800d5de <__ascii_mbtowc+0x16>
 800d5e6:	f06f 0001 	mvn.w	r0, #1
 800d5ea:	e7f8      	b.n	800d5de <__ascii_mbtowc+0x16>

0800d5ec <__malloc_lock>:
 800d5ec:	4801      	ldr	r0, [pc, #4]	; (800d5f4 <__malloc_lock+0x8>)
 800d5ee:	f7fe b9ca 	b.w	800b986 <__retarget_lock_acquire_recursive>
 800d5f2:	bf00      	nop
 800d5f4:	20001756 	.word	0x20001756

0800d5f8 <__malloc_unlock>:
 800d5f8:	4801      	ldr	r0, [pc, #4]	; (800d600 <__malloc_unlock+0x8>)
 800d5fa:	f7fe b9c5 	b.w	800b988 <__retarget_lock_release_recursive>
 800d5fe:	bf00      	nop
 800d600:	20001756 	.word	0x20001756

0800d604 <_Balloc>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d608:	4604      	mov	r4, r0
 800d60a:	460d      	mov	r5, r1
 800d60c:	b976      	cbnz	r6, 800d62c <_Balloc+0x28>
 800d60e:	2010      	movs	r0, #16
 800d610:	f7fe fa20 	bl	800ba54 <malloc>
 800d614:	4602      	mov	r2, r0
 800d616:	6260      	str	r0, [r4, #36]	; 0x24
 800d618:	b920      	cbnz	r0, 800d624 <_Balloc+0x20>
 800d61a:	4b18      	ldr	r3, [pc, #96]	; (800d67c <_Balloc+0x78>)
 800d61c:	4818      	ldr	r0, [pc, #96]	; (800d680 <_Balloc+0x7c>)
 800d61e:	2166      	movs	r1, #102	; 0x66
 800d620:	f001 f968 	bl	800e8f4 <__assert_func>
 800d624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d628:	6006      	str	r6, [r0, #0]
 800d62a:	60c6      	str	r6, [r0, #12]
 800d62c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d62e:	68f3      	ldr	r3, [r6, #12]
 800d630:	b183      	cbz	r3, 800d654 <_Balloc+0x50>
 800d632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d63a:	b9b8      	cbnz	r0, 800d66c <_Balloc+0x68>
 800d63c:	2101      	movs	r1, #1
 800d63e:	fa01 f605 	lsl.w	r6, r1, r5
 800d642:	1d72      	adds	r2, r6, #5
 800d644:	0092      	lsls	r2, r2, #2
 800d646:	4620      	mov	r0, r4
 800d648:	f000 fc9d 	bl	800df86 <_calloc_r>
 800d64c:	b160      	cbz	r0, 800d668 <_Balloc+0x64>
 800d64e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d652:	e00e      	b.n	800d672 <_Balloc+0x6e>
 800d654:	2221      	movs	r2, #33	; 0x21
 800d656:	2104      	movs	r1, #4
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 fc94 	bl	800df86 <_calloc_r>
 800d65e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d660:	60f0      	str	r0, [r6, #12]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1e4      	bne.n	800d632 <_Balloc+0x2e>
 800d668:	2000      	movs	r0, #0
 800d66a:	bd70      	pop	{r4, r5, r6, pc}
 800d66c:	6802      	ldr	r2, [r0, #0]
 800d66e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d672:	2300      	movs	r3, #0
 800d674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d678:	e7f7      	b.n	800d66a <_Balloc+0x66>
 800d67a:	bf00      	nop
 800d67c:	0800f8a4 	.word	0x0800f8a4
 800d680:	0800f8bb 	.word	0x0800f8bb

0800d684 <_Bfree>:
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d688:	4605      	mov	r5, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	b976      	cbnz	r6, 800d6ac <_Bfree+0x28>
 800d68e:	2010      	movs	r0, #16
 800d690:	f7fe f9e0 	bl	800ba54 <malloc>
 800d694:	4602      	mov	r2, r0
 800d696:	6268      	str	r0, [r5, #36]	; 0x24
 800d698:	b920      	cbnz	r0, 800d6a4 <_Bfree+0x20>
 800d69a:	4b09      	ldr	r3, [pc, #36]	; (800d6c0 <_Bfree+0x3c>)
 800d69c:	4809      	ldr	r0, [pc, #36]	; (800d6c4 <_Bfree+0x40>)
 800d69e:	218a      	movs	r1, #138	; 0x8a
 800d6a0:	f001 f928 	bl	800e8f4 <__assert_func>
 800d6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6a8:	6006      	str	r6, [r0, #0]
 800d6aa:	60c6      	str	r6, [r0, #12]
 800d6ac:	b13c      	cbz	r4, 800d6be <_Bfree+0x3a>
 800d6ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6b0:	6862      	ldr	r2, [r4, #4]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6b8:	6021      	str	r1, [r4, #0]
 800d6ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6be:	bd70      	pop	{r4, r5, r6, pc}
 800d6c0:	0800f8a4 	.word	0x0800f8a4
 800d6c4:	0800f8bb 	.word	0x0800f8bb

0800d6c8 <__multadd>:
 800d6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6cc:	690d      	ldr	r5, [r1, #16]
 800d6ce:	4607      	mov	r7, r0
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	461e      	mov	r6, r3
 800d6d4:	f101 0c14 	add.w	ip, r1, #20
 800d6d8:	2000      	movs	r0, #0
 800d6da:	f8dc 3000 	ldr.w	r3, [ip]
 800d6de:	b299      	uxth	r1, r3
 800d6e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d6e4:	0c1e      	lsrs	r6, r3, #16
 800d6e6:	0c0b      	lsrs	r3, r1, #16
 800d6e8:	fb02 3306 	mla	r3, r2, r6, r3
 800d6ec:	b289      	uxth	r1, r1
 800d6ee:	3001      	adds	r0, #1
 800d6f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6f4:	4285      	cmp	r5, r0
 800d6f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d6fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6fe:	dcec      	bgt.n	800d6da <__multadd+0x12>
 800d700:	b30e      	cbz	r6, 800d746 <__multadd+0x7e>
 800d702:	68a3      	ldr	r3, [r4, #8]
 800d704:	42ab      	cmp	r3, r5
 800d706:	dc19      	bgt.n	800d73c <__multadd+0x74>
 800d708:	6861      	ldr	r1, [r4, #4]
 800d70a:	4638      	mov	r0, r7
 800d70c:	3101      	adds	r1, #1
 800d70e:	f7ff ff79 	bl	800d604 <_Balloc>
 800d712:	4680      	mov	r8, r0
 800d714:	b928      	cbnz	r0, 800d722 <__multadd+0x5a>
 800d716:	4602      	mov	r2, r0
 800d718:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <__multadd+0x84>)
 800d71a:	480d      	ldr	r0, [pc, #52]	; (800d750 <__multadd+0x88>)
 800d71c:	21b5      	movs	r1, #181	; 0xb5
 800d71e:	f001 f8e9 	bl	800e8f4 <__assert_func>
 800d722:	6922      	ldr	r2, [r4, #16]
 800d724:	3202      	adds	r2, #2
 800d726:	f104 010c 	add.w	r1, r4, #12
 800d72a:	0092      	lsls	r2, r2, #2
 800d72c:	300c      	adds	r0, #12
 800d72e:	f7fe f9a1 	bl	800ba74 <memcpy>
 800d732:	4621      	mov	r1, r4
 800d734:	4638      	mov	r0, r7
 800d736:	f7ff ffa5 	bl	800d684 <_Bfree>
 800d73a:	4644      	mov	r4, r8
 800d73c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d740:	3501      	adds	r5, #1
 800d742:	615e      	str	r6, [r3, #20]
 800d744:	6125      	str	r5, [r4, #16]
 800d746:	4620      	mov	r0, r4
 800d748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d74c:	0800f818 	.word	0x0800f818
 800d750:	0800f8bb 	.word	0x0800f8bb

0800d754 <__s2b>:
 800d754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d758:	460c      	mov	r4, r1
 800d75a:	4615      	mov	r5, r2
 800d75c:	461f      	mov	r7, r3
 800d75e:	2209      	movs	r2, #9
 800d760:	3308      	adds	r3, #8
 800d762:	4606      	mov	r6, r0
 800d764:	fb93 f3f2 	sdiv	r3, r3, r2
 800d768:	2100      	movs	r1, #0
 800d76a:	2201      	movs	r2, #1
 800d76c:	429a      	cmp	r2, r3
 800d76e:	db09      	blt.n	800d784 <__s2b+0x30>
 800d770:	4630      	mov	r0, r6
 800d772:	f7ff ff47 	bl	800d604 <_Balloc>
 800d776:	b940      	cbnz	r0, 800d78a <__s2b+0x36>
 800d778:	4602      	mov	r2, r0
 800d77a:	4b19      	ldr	r3, [pc, #100]	; (800d7e0 <__s2b+0x8c>)
 800d77c:	4819      	ldr	r0, [pc, #100]	; (800d7e4 <__s2b+0x90>)
 800d77e:	21ce      	movs	r1, #206	; 0xce
 800d780:	f001 f8b8 	bl	800e8f4 <__assert_func>
 800d784:	0052      	lsls	r2, r2, #1
 800d786:	3101      	adds	r1, #1
 800d788:	e7f0      	b.n	800d76c <__s2b+0x18>
 800d78a:	9b08      	ldr	r3, [sp, #32]
 800d78c:	6143      	str	r3, [r0, #20]
 800d78e:	2d09      	cmp	r5, #9
 800d790:	f04f 0301 	mov.w	r3, #1
 800d794:	6103      	str	r3, [r0, #16]
 800d796:	dd16      	ble.n	800d7c6 <__s2b+0x72>
 800d798:	f104 0909 	add.w	r9, r4, #9
 800d79c:	46c8      	mov	r8, r9
 800d79e:	442c      	add	r4, r5
 800d7a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d7a4:	4601      	mov	r1, r0
 800d7a6:	3b30      	subs	r3, #48	; 0x30
 800d7a8:	220a      	movs	r2, #10
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7ff ff8c 	bl	800d6c8 <__multadd>
 800d7b0:	45a0      	cmp	r8, r4
 800d7b2:	d1f5      	bne.n	800d7a0 <__s2b+0x4c>
 800d7b4:	f1a5 0408 	sub.w	r4, r5, #8
 800d7b8:	444c      	add	r4, r9
 800d7ba:	1b2d      	subs	r5, r5, r4
 800d7bc:	1963      	adds	r3, r4, r5
 800d7be:	42bb      	cmp	r3, r7
 800d7c0:	db04      	blt.n	800d7cc <__s2b+0x78>
 800d7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7c6:	340a      	adds	r4, #10
 800d7c8:	2509      	movs	r5, #9
 800d7ca:	e7f6      	b.n	800d7ba <__s2b+0x66>
 800d7cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d7d0:	4601      	mov	r1, r0
 800d7d2:	3b30      	subs	r3, #48	; 0x30
 800d7d4:	220a      	movs	r2, #10
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7ff ff76 	bl	800d6c8 <__multadd>
 800d7dc:	e7ee      	b.n	800d7bc <__s2b+0x68>
 800d7de:	bf00      	nop
 800d7e0:	0800f818 	.word	0x0800f818
 800d7e4:	0800f8bb 	.word	0x0800f8bb

0800d7e8 <__hi0bits>:
 800d7e8:	0c03      	lsrs	r3, r0, #16
 800d7ea:	041b      	lsls	r3, r3, #16
 800d7ec:	b9d3      	cbnz	r3, 800d824 <__hi0bits+0x3c>
 800d7ee:	0400      	lsls	r0, r0, #16
 800d7f0:	2310      	movs	r3, #16
 800d7f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7f6:	bf04      	itt	eq
 800d7f8:	0200      	lsleq	r0, r0, #8
 800d7fa:	3308      	addeq	r3, #8
 800d7fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d800:	bf04      	itt	eq
 800d802:	0100      	lsleq	r0, r0, #4
 800d804:	3304      	addeq	r3, #4
 800d806:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d80a:	bf04      	itt	eq
 800d80c:	0080      	lsleq	r0, r0, #2
 800d80e:	3302      	addeq	r3, #2
 800d810:	2800      	cmp	r0, #0
 800d812:	db05      	blt.n	800d820 <__hi0bits+0x38>
 800d814:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d818:	f103 0301 	add.w	r3, r3, #1
 800d81c:	bf08      	it	eq
 800d81e:	2320      	moveq	r3, #32
 800d820:	4618      	mov	r0, r3
 800d822:	4770      	bx	lr
 800d824:	2300      	movs	r3, #0
 800d826:	e7e4      	b.n	800d7f2 <__hi0bits+0xa>

0800d828 <__lo0bits>:
 800d828:	6803      	ldr	r3, [r0, #0]
 800d82a:	f013 0207 	ands.w	r2, r3, #7
 800d82e:	4601      	mov	r1, r0
 800d830:	d00b      	beq.n	800d84a <__lo0bits+0x22>
 800d832:	07da      	lsls	r2, r3, #31
 800d834:	d423      	bmi.n	800d87e <__lo0bits+0x56>
 800d836:	0798      	lsls	r0, r3, #30
 800d838:	bf49      	itett	mi
 800d83a:	085b      	lsrmi	r3, r3, #1
 800d83c:	089b      	lsrpl	r3, r3, #2
 800d83e:	2001      	movmi	r0, #1
 800d840:	600b      	strmi	r3, [r1, #0]
 800d842:	bf5c      	itt	pl
 800d844:	600b      	strpl	r3, [r1, #0]
 800d846:	2002      	movpl	r0, #2
 800d848:	4770      	bx	lr
 800d84a:	b298      	uxth	r0, r3
 800d84c:	b9a8      	cbnz	r0, 800d87a <__lo0bits+0x52>
 800d84e:	0c1b      	lsrs	r3, r3, #16
 800d850:	2010      	movs	r0, #16
 800d852:	b2da      	uxtb	r2, r3
 800d854:	b90a      	cbnz	r2, 800d85a <__lo0bits+0x32>
 800d856:	3008      	adds	r0, #8
 800d858:	0a1b      	lsrs	r3, r3, #8
 800d85a:	071a      	lsls	r2, r3, #28
 800d85c:	bf04      	itt	eq
 800d85e:	091b      	lsreq	r3, r3, #4
 800d860:	3004      	addeq	r0, #4
 800d862:	079a      	lsls	r2, r3, #30
 800d864:	bf04      	itt	eq
 800d866:	089b      	lsreq	r3, r3, #2
 800d868:	3002      	addeq	r0, #2
 800d86a:	07da      	lsls	r2, r3, #31
 800d86c:	d403      	bmi.n	800d876 <__lo0bits+0x4e>
 800d86e:	085b      	lsrs	r3, r3, #1
 800d870:	f100 0001 	add.w	r0, r0, #1
 800d874:	d005      	beq.n	800d882 <__lo0bits+0x5a>
 800d876:	600b      	str	r3, [r1, #0]
 800d878:	4770      	bx	lr
 800d87a:	4610      	mov	r0, r2
 800d87c:	e7e9      	b.n	800d852 <__lo0bits+0x2a>
 800d87e:	2000      	movs	r0, #0
 800d880:	4770      	bx	lr
 800d882:	2020      	movs	r0, #32
 800d884:	4770      	bx	lr
	...

0800d888 <__i2b>:
 800d888:	b510      	push	{r4, lr}
 800d88a:	460c      	mov	r4, r1
 800d88c:	2101      	movs	r1, #1
 800d88e:	f7ff feb9 	bl	800d604 <_Balloc>
 800d892:	4602      	mov	r2, r0
 800d894:	b928      	cbnz	r0, 800d8a2 <__i2b+0x1a>
 800d896:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <__i2b+0x24>)
 800d898:	4805      	ldr	r0, [pc, #20]	; (800d8b0 <__i2b+0x28>)
 800d89a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d89e:	f001 f829 	bl	800e8f4 <__assert_func>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	6144      	str	r4, [r0, #20]
 800d8a6:	6103      	str	r3, [r0, #16]
 800d8a8:	bd10      	pop	{r4, pc}
 800d8aa:	bf00      	nop
 800d8ac:	0800f818 	.word	0x0800f818
 800d8b0:	0800f8bb 	.word	0x0800f8bb

0800d8b4 <__multiply>:
 800d8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b8:	4691      	mov	r9, r2
 800d8ba:	690a      	ldr	r2, [r1, #16]
 800d8bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	bfb8      	it	lt
 800d8c4:	460b      	movlt	r3, r1
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	bfbc      	itt	lt
 800d8ca:	464c      	movlt	r4, r9
 800d8cc:	4699      	movlt	r9, r3
 800d8ce:	6927      	ldr	r7, [r4, #16]
 800d8d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d8d4:	68a3      	ldr	r3, [r4, #8]
 800d8d6:	6861      	ldr	r1, [r4, #4]
 800d8d8:	eb07 060a 	add.w	r6, r7, sl
 800d8dc:	42b3      	cmp	r3, r6
 800d8de:	b085      	sub	sp, #20
 800d8e0:	bfb8      	it	lt
 800d8e2:	3101      	addlt	r1, #1
 800d8e4:	f7ff fe8e 	bl	800d604 <_Balloc>
 800d8e8:	b930      	cbnz	r0, 800d8f8 <__multiply+0x44>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	4b44      	ldr	r3, [pc, #272]	; (800da00 <__multiply+0x14c>)
 800d8ee:	4845      	ldr	r0, [pc, #276]	; (800da04 <__multiply+0x150>)
 800d8f0:	f240 115d 	movw	r1, #349	; 0x15d
 800d8f4:	f000 fffe 	bl	800e8f4 <__assert_func>
 800d8f8:	f100 0514 	add.w	r5, r0, #20
 800d8fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d900:	462b      	mov	r3, r5
 800d902:	2200      	movs	r2, #0
 800d904:	4543      	cmp	r3, r8
 800d906:	d321      	bcc.n	800d94c <__multiply+0x98>
 800d908:	f104 0314 	add.w	r3, r4, #20
 800d90c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d910:	f109 0314 	add.w	r3, r9, #20
 800d914:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d918:	9202      	str	r2, [sp, #8]
 800d91a:	1b3a      	subs	r2, r7, r4
 800d91c:	3a15      	subs	r2, #21
 800d91e:	f022 0203 	bic.w	r2, r2, #3
 800d922:	3204      	adds	r2, #4
 800d924:	f104 0115 	add.w	r1, r4, #21
 800d928:	428f      	cmp	r7, r1
 800d92a:	bf38      	it	cc
 800d92c:	2204      	movcc	r2, #4
 800d92e:	9201      	str	r2, [sp, #4]
 800d930:	9a02      	ldr	r2, [sp, #8]
 800d932:	9303      	str	r3, [sp, #12]
 800d934:	429a      	cmp	r2, r3
 800d936:	d80c      	bhi.n	800d952 <__multiply+0x9e>
 800d938:	2e00      	cmp	r6, #0
 800d93a:	dd03      	ble.n	800d944 <__multiply+0x90>
 800d93c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d940:	2b00      	cmp	r3, #0
 800d942:	d05a      	beq.n	800d9fa <__multiply+0x146>
 800d944:	6106      	str	r6, [r0, #16]
 800d946:	b005      	add	sp, #20
 800d948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94c:	f843 2b04 	str.w	r2, [r3], #4
 800d950:	e7d8      	b.n	800d904 <__multiply+0x50>
 800d952:	f8b3 a000 	ldrh.w	sl, [r3]
 800d956:	f1ba 0f00 	cmp.w	sl, #0
 800d95a:	d024      	beq.n	800d9a6 <__multiply+0xf2>
 800d95c:	f104 0e14 	add.w	lr, r4, #20
 800d960:	46a9      	mov	r9, r5
 800d962:	f04f 0c00 	mov.w	ip, #0
 800d966:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d96a:	f8d9 1000 	ldr.w	r1, [r9]
 800d96e:	fa1f fb82 	uxth.w	fp, r2
 800d972:	b289      	uxth	r1, r1
 800d974:	fb0a 110b 	mla	r1, sl, fp, r1
 800d978:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d97c:	f8d9 2000 	ldr.w	r2, [r9]
 800d980:	4461      	add	r1, ip
 800d982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d986:	fb0a c20b 	mla	r2, sl, fp, ip
 800d98a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d98e:	b289      	uxth	r1, r1
 800d990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d994:	4577      	cmp	r7, lr
 800d996:	f849 1b04 	str.w	r1, [r9], #4
 800d99a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d99e:	d8e2      	bhi.n	800d966 <__multiply+0xb2>
 800d9a0:	9a01      	ldr	r2, [sp, #4]
 800d9a2:	f845 c002 	str.w	ip, [r5, r2]
 800d9a6:	9a03      	ldr	r2, [sp, #12]
 800d9a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9ac:	3304      	adds	r3, #4
 800d9ae:	f1b9 0f00 	cmp.w	r9, #0
 800d9b2:	d020      	beq.n	800d9f6 <__multiply+0x142>
 800d9b4:	6829      	ldr	r1, [r5, #0]
 800d9b6:	f104 0c14 	add.w	ip, r4, #20
 800d9ba:	46ae      	mov	lr, r5
 800d9bc:	f04f 0a00 	mov.w	sl, #0
 800d9c0:	f8bc b000 	ldrh.w	fp, [ip]
 800d9c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d9c8:	fb09 220b 	mla	r2, r9, fp, r2
 800d9cc:	4492      	add	sl, r2
 800d9ce:	b289      	uxth	r1, r1
 800d9d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d9d4:	f84e 1b04 	str.w	r1, [lr], #4
 800d9d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d9dc:	f8be 1000 	ldrh.w	r1, [lr]
 800d9e0:	0c12      	lsrs	r2, r2, #16
 800d9e2:	fb09 1102 	mla	r1, r9, r2, r1
 800d9e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d9ea:	4567      	cmp	r7, ip
 800d9ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9f0:	d8e6      	bhi.n	800d9c0 <__multiply+0x10c>
 800d9f2:	9a01      	ldr	r2, [sp, #4]
 800d9f4:	50a9      	str	r1, [r5, r2]
 800d9f6:	3504      	adds	r5, #4
 800d9f8:	e79a      	b.n	800d930 <__multiply+0x7c>
 800d9fa:	3e01      	subs	r6, #1
 800d9fc:	e79c      	b.n	800d938 <__multiply+0x84>
 800d9fe:	bf00      	nop
 800da00:	0800f818 	.word	0x0800f818
 800da04:	0800f8bb 	.word	0x0800f8bb

0800da08 <__pow5mult>:
 800da08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da0c:	4615      	mov	r5, r2
 800da0e:	f012 0203 	ands.w	r2, r2, #3
 800da12:	4606      	mov	r6, r0
 800da14:	460f      	mov	r7, r1
 800da16:	d007      	beq.n	800da28 <__pow5mult+0x20>
 800da18:	4c25      	ldr	r4, [pc, #148]	; (800dab0 <__pow5mult+0xa8>)
 800da1a:	3a01      	subs	r2, #1
 800da1c:	2300      	movs	r3, #0
 800da1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da22:	f7ff fe51 	bl	800d6c8 <__multadd>
 800da26:	4607      	mov	r7, r0
 800da28:	10ad      	asrs	r5, r5, #2
 800da2a:	d03d      	beq.n	800daa8 <__pow5mult+0xa0>
 800da2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da2e:	b97c      	cbnz	r4, 800da50 <__pow5mult+0x48>
 800da30:	2010      	movs	r0, #16
 800da32:	f7fe f80f 	bl	800ba54 <malloc>
 800da36:	4602      	mov	r2, r0
 800da38:	6270      	str	r0, [r6, #36]	; 0x24
 800da3a:	b928      	cbnz	r0, 800da48 <__pow5mult+0x40>
 800da3c:	4b1d      	ldr	r3, [pc, #116]	; (800dab4 <__pow5mult+0xac>)
 800da3e:	481e      	ldr	r0, [pc, #120]	; (800dab8 <__pow5mult+0xb0>)
 800da40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da44:	f000 ff56 	bl	800e8f4 <__assert_func>
 800da48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da4c:	6004      	str	r4, [r0, #0]
 800da4e:	60c4      	str	r4, [r0, #12]
 800da50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da58:	b94c      	cbnz	r4, 800da6e <__pow5mult+0x66>
 800da5a:	f240 2171 	movw	r1, #625	; 0x271
 800da5e:	4630      	mov	r0, r6
 800da60:	f7ff ff12 	bl	800d888 <__i2b>
 800da64:	2300      	movs	r3, #0
 800da66:	f8c8 0008 	str.w	r0, [r8, #8]
 800da6a:	4604      	mov	r4, r0
 800da6c:	6003      	str	r3, [r0, #0]
 800da6e:	f04f 0900 	mov.w	r9, #0
 800da72:	07eb      	lsls	r3, r5, #31
 800da74:	d50a      	bpl.n	800da8c <__pow5mult+0x84>
 800da76:	4639      	mov	r1, r7
 800da78:	4622      	mov	r2, r4
 800da7a:	4630      	mov	r0, r6
 800da7c:	f7ff ff1a 	bl	800d8b4 <__multiply>
 800da80:	4639      	mov	r1, r7
 800da82:	4680      	mov	r8, r0
 800da84:	4630      	mov	r0, r6
 800da86:	f7ff fdfd 	bl	800d684 <_Bfree>
 800da8a:	4647      	mov	r7, r8
 800da8c:	106d      	asrs	r5, r5, #1
 800da8e:	d00b      	beq.n	800daa8 <__pow5mult+0xa0>
 800da90:	6820      	ldr	r0, [r4, #0]
 800da92:	b938      	cbnz	r0, 800daa4 <__pow5mult+0x9c>
 800da94:	4622      	mov	r2, r4
 800da96:	4621      	mov	r1, r4
 800da98:	4630      	mov	r0, r6
 800da9a:	f7ff ff0b 	bl	800d8b4 <__multiply>
 800da9e:	6020      	str	r0, [r4, #0]
 800daa0:	f8c0 9000 	str.w	r9, [r0]
 800daa4:	4604      	mov	r4, r0
 800daa6:	e7e4      	b.n	800da72 <__pow5mult+0x6a>
 800daa8:	4638      	mov	r0, r7
 800daaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daae:	bf00      	nop
 800dab0:	0800fa08 	.word	0x0800fa08
 800dab4:	0800f8a4 	.word	0x0800f8a4
 800dab8:	0800f8bb 	.word	0x0800f8bb

0800dabc <__lshift>:
 800dabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac0:	460c      	mov	r4, r1
 800dac2:	6849      	ldr	r1, [r1, #4]
 800dac4:	6923      	ldr	r3, [r4, #16]
 800dac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800daca:	68a3      	ldr	r3, [r4, #8]
 800dacc:	4607      	mov	r7, r0
 800dace:	4691      	mov	r9, r2
 800dad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dad4:	f108 0601 	add.w	r6, r8, #1
 800dad8:	42b3      	cmp	r3, r6
 800dada:	db0b      	blt.n	800daf4 <__lshift+0x38>
 800dadc:	4638      	mov	r0, r7
 800dade:	f7ff fd91 	bl	800d604 <_Balloc>
 800dae2:	4605      	mov	r5, r0
 800dae4:	b948      	cbnz	r0, 800dafa <__lshift+0x3e>
 800dae6:	4602      	mov	r2, r0
 800dae8:	4b2a      	ldr	r3, [pc, #168]	; (800db94 <__lshift+0xd8>)
 800daea:	482b      	ldr	r0, [pc, #172]	; (800db98 <__lshift+0xdc>)
 800daec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800daf0:	f000 ff00 	bl	800e8f4 <__assert_func>
 800daf4:	3101      	adds	r1, #1
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	e7ee      	b.n	800dad8 <__lshift+0x1c>
 800dafa:	2300      	movs	r3, #0
 800dafc:	f100 0114 	add.w	r1, r0, #20
 800db00:	f100 0210 	add.w	r2, r0, #16
 800db04:	4618      	mov	r0, r3
 800db06:	4553      	cmp	r3, sl
 800db08:	db37      	blt.n	800db7a <__lshift+0xbe>
 800db0a:	6920      	ldr	r0, [r4, #16]
 800db0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db10:	f104 0314 	add.w	r3, r4, #20
 800db14:	f019 091f 	ands.w	r9, r9, #31
 800db18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db20:	d02f      	beq.n	800db82 <__lshift+0xc6>
 800db22:	f1c9 0e20 	rsb	lr, r9, #32
 800db26:	468a      	mov	sl, r1
 800db28:	f04f 0c00 	mov.w	ip, #0
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	fa02 f209 	lsl.w	r2, r2, r9
 800db32:	ea42 020c 	orr.w	r2, r2, ip
 800db36:	f84a 2b04 	str.w	r2, [sl], #4
 800db3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db3e:	4298      	cmp	r0, r3
 800db40:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db44:	d8f2      	bhi.n	800db2c <__lshift+0x70>
 800db46:	1b03      	subs	r3, r0, r4
 800db48:	3b15      	subs	r3, #21
 800db4a:	f023 0303 	bic.w	r3, r3, #3
 800db4e:	3304      	adds	r3, #4
 800db50:	f104 0215 	add.w	r2, r4, #21
 800db54:	4290      	cmp	r0, r2
 800db56:	bf38      	it	cc
 800db58:	2304      	movcc	r3, #4
 800db5a:	f841 c003 	str.w	ip, [r1, r3]
 800db5e:	f1bc 0f00 	cmp.w	ip, #0
 800db62:	d001      	beq.n	800db68 <__lshift+0xac>
 800db64:	f108 0602 	add.w	r6, r8, #2
 800db68:	3e01      	subs	r6, #1
 800db6a:	4638      	mov	r0, r7
 800db6c:	612e      	str	r6, [r5, #16]
 800db6e:	4621      	mov	r1, r4
 800db70:	f7ff fd88 	bl	800d684 <_Bfree>
 800db74:	4628      	mov	r0, r5
 800db76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db7e:	3301      	adds	r3, #1
 800db80:	e7c1      	b.n	800db06 <__lshift+0x4a>
 800db82:	3904      	subs	r1, #4
 800db84:	f853 2b04 	ldr.w	r2, [r3], #4
 800db88:	f841 2f04 	str.w	r2, [r1, #4]!
 800db8c:	4298      	cmp	r0, r3
 800db8e:	d8f9      	bhi.n	800db84 <__lshift+0xc8>
 800db90:	e7ea      	b.n	800db68 <__lshift+0xac>
 800db92:	bf00      	nop
 800db94:	0800f818 	.word	0x0800f818
 800db98:	0800f8bb 	.word	0x0800f8bb

0800db9c <__mcmp>:
 800db9c:	b530      	push	{r4, r5, lr}
 800db9e:	6902      	ldr	r2, [r0, #16]
 800dba0:	690c      	ldr	r4, [r1, #16]
 800dba2:	1b12      	subs	r2, r2, r4
 800dba4:	d10e      	bne.n	800dbc4 <__mcmp+0x28>
 800dba6:	f100 0314 	add.w	r3, r0, #20
 800dbaa:	3114      	adds	r1, #20
 800dbac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbbc:	42a5      	cmp	r5, r4
 800dbbe:	d003      	beq.n	800dbc8 <__mcmp+0x2c>
 800dbc0:	d305      	bcc.n	800dbce <__mcmp+0x32>
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	bd30      	pop	{r4, r5, pc}
 800dbc8:	4283      	cmp	r3, r0
 800dbca:	d3f3      	bcc.n	800dbb4 <__mcmp+0x18>
 800dbcc:	e7fa      	b.n	800dbc4 <__mcmp+0x28>
 800dbce:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd2:	e7f7      	b.n	800dbc4 <__mcmp+0x28>

0800dbd4 <__mdiff>:
 800dbd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	460c      	mov	r4, r1
 800dbda:	4606      	mov	r6, r0
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4620      	mov	r0, r4
 800dbe0:	4690      	mov	r8, r2
 800dbe2:	f7ff ffdb 	bl	800db9c <__mcmp>
 800dbe6:	1e05      	subs	r5, r0, #0
 800dbe8:	d110      	bne.n	800dc0c <__mdiff+0x38>
 800dbea:	4629      	mov	r1, r5
 800dbec:	4630      	mov	r0, r6
 800dbee:	f7ff fd09 	bl	800d604 <_Balloc>
 800dbf2:	b930      	cbnz	r0, 800dc02 <__mdiff+0x2e>
 800dbf4:	4b3a      	ldr	r3, [pc, #232]	; (800dce0 <__mdiff+0x10c>)
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	f240 2132 	movw	r1, #562	; 0x232
 800dbfc:	4839      	ldr	r0, [pc, #228]	; (800dce4 <__mdiff+0x110>)
 800dbfe:	f000 fe79 	bl	800e8f4 <__assert_func>
 800dc02:	2301      	movs	r3, #1
 800dc04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0c:	bfa4      	itt	ge
 800dc0e:	4643      	movge	r3, r8
 800dc10:	46a0      	movge	r8, r4
 800dc12:	4630      	mov	r0, r6
 800dc14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc18:	bfa6      	itte	ge
 800dc1a:	461c      	movge	r4, r3
 800dc1c:	2500      	movge	r5, #0
 800dc1e:	2501      	movlt	r5, #1
 800dc20:	f7ff fcf0 	bl	800d604 <_Balloc>
 800dc24:	b920      	cbnz	r0, 800dc30 <__mdiff+0x5c>
 800dc26:	4b2e      	ldr	r3, [pc, #184]	; (800dce0 <__mdiff+0x10c>)
 800dc28:	4602      	mov	r2, r0
 800dc2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc2e:	e7e5      	b.n	800dbfc <__mdiff+0x28>
 800dc30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc34:	6926      	ldr	r6, [r4, #16]
 800dc36:	60c5      	str	r5, [r0, #12]
 800dc38:	f104 0914 	add.w	r9, r4, #20
 800dc3c:	f108 0514 	add.w	r5, r8, #20
 800dc40:	f100 0e14 	add.w	lr, r0, #20
 800dc44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc4c:	f108 0210 	add.w	r2, r8, #16
 800dc50:	46f2      	mov	sl, lr
 800dc52:	2100      	movs	r1, #0
 800dc54:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc5c:	fa1f f883 	uxth.w	r8, r3
 800dc60:	fa11 f18b 	uxtah	r1, r1, fp
 800dc64:	0c1b      	lsrs	r3, r3, #16
 800dc66:	eba1 0808 	sub.w	r8, r1, r8
 800dc6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc72:	fa1f f888 	uxth.w	r8, r8
 800dc76:	1419      	asrs	r1, r3, #16
 800dc78:	454e      	cmp	r6, r9
 800dc7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc7e:	f84a 3b04 	str.w	r3, [sl], #4
 800dc82:	d8e7      	bhi.n	800dc54 <__mdiff+0x80>
 800dc84:	1b33      	subs	r3, r6, r4
 800dc86:	3b15      	subs	r3, #21
 800dc88:	f023 0303 	bic.w	r3, r3, #3
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	3415      	adds	r4, #21
 800dc90:	42a6      	cmp	r6, r4
 800dc92:	bf38      	it	cc
 800dc94:	2304      	movcc	r3, #4
 800dc96:	441d      	add	r5, r3
 800dc98:	4473      	add	r3, lr
 800dc9a:	469e      	mov	lr, r3
 800dc9c:	462e      	mov	r6, r5
 800dc9e:	4566      	cmp	r6, ip
 800dca0:	d30e      	bcc.n	800dcc0 <__mdiff+0xec>
 800dca2:	f10c 0203 	add.w	r2, ip, #3
 800dca6:	1b52      	subs	r2, r2, r5
 800dca8:	f022 0203 	bic.w	r2, r2, #3
 800dcac:	3d03      	subs	r5, #3
 800dcae:	45ac      	cmp	ip, r5
 800dcb0:	bf38      	it	cc
 800dcb2:	2200      	movcc	r2, #0
 800dcb4:	441a      	add	r2, r3
 800dcb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcba:	b17b      	cbz	r3, 800dcdc <__mdiff+0x108>
 800dcbc:	6107      	str	r7, [r0, #16]
 800dcbe:	e7a3      	b.n	800dc08 <__mdiff+0x34>
 800dcc0:	f856 8b04 	ldr.w	r8, [r6], #4
 800dcc4:	fa11 f288 	uxtah	r2, r1, r8
 800dcc8:	1414      	asrs	r4, r2, #16
 800dcca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dcce:	b292      	uxth	r2, r2
 800dcd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dcd4:	f84e 2b04 	str.w	r2, [lr], #4
 800dcd8:	1421      	asrs	r1, r4, #16
 800dcda:	e7e0      	b.n	800dc9e <__mdiff+0xca>
 800dcdc:	3f01      	subs	r7, #1
 800dcde:	e7ea      	b.n	800dcb6 <__mdiff+0xe2>
 800dce0:	0800f818 	.word	0x0800f818
 800dce4:	0800f8bb 	.word	0x0800f8bb

0800dce8 <__ulp>:
 800dce8:	b082      	sub	sp, #8
 800dcea:	ed8d 0b00 	vstr	d0, [sp]
 800dcee:	9b01      	ldr	r3, [sp, #4]
 800dcf0:	4912      	ldr	r1, [pc, #72]	; (800dd3c <__ulp+0x54>)
 800dcf2:	4019      	ands	r1, r3
 800dcf4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dcf8:	2900      	cmp	r1, #0
 800dcfa:	dd05      	ble.n	800dd08 <__ulp+0x20>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	ec43 2b10 	vmov	d0, r2, r3
 800dd04:	b002      	add	sp, #8
 800dd06:	4770      	bx	lr
 800dd08:	4249      	negs	r1, r1
 800dd0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dd0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dd12:	f04f 0200 	mov.w	r2, #0
 800dd16:	f04f 0300 	mov.w	r3, #0
 800dd1a:	da04      	bge.n	800dd26 <__ulp+0x3e>
 800dd1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dd20:	fa41 f300 	asr.w	r3, r1, r0
 800dd24:	e7ec      	b.n	800dd00 <__ulp+0x18>
 800dd26:	f1a0 0114 	sub.w	r1, r0, #20
 800dd2a:	291e      	cmp	r1, #30
 800dd2c:	bfda      	itte	le
 800dd2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dd32:	fa20 f101 	lsrle.w	r1, r0, r1
 800dd36:	2101      	movgt	r1, #1
 800dd38:	460a      	mov	r2, r1
 800dd3a:	e7e1      	b.n	800dd00 <__ulp+0x18>
 800dd3c:	7ff00000 	.word	0x7ff00000

0800dd40 <__b2d>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	6905      	ldr	r5, [r0, #16]
 800dd44:	f100 0714 	add.w	r7, r0, #20
 800dd48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dd4c:	1f2e      	subs	r6, r5, #4
 800dd4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7ff fd48 	bl	800d7e8 <__hi0bits>
 800dd58:	f1c0 0320 	rsb	r3, r0, #32
 800dd5c:	280a      	cmp	r0, #10
 800dd5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dddc <__b2d+0x9c>
 800dd62:	600b      	str	r3, [r1, #0]
 800dd64:	dc14      	bgt.n	800dd90 <__b2d+0x50>
 800dd66:	f1c0 0e0b 	rsb	lr, r0, #11
 800dd6a:	fa24 f10e 	lsr.w	r1, r4, lr
 800dd6e:	42b7      	cmp	r7, r6
 800dd70:	ea41 030c 	orr.w	r3, r1, ip
 800dd74:	bf34      	ite	cc
 800dd76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd7a:	2100      	movcs	r1, #0
 800dd7c:	3015      	adds	r0, #21
 800dd7e:	fa04 f000 	lsl.w	r0, r4, r0
 800dd82:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd86:	ea40 0201 	orr.w	r2, r0, r1
 800dd8a:	ec43 2b10 	vmov	d0, r2, r3
 800dd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd90:	42b7      	cmp	r7, r6
 800dd92:	bf3a      	itte	cc
 800dd94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd98:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd9c:	2100      	movcs	r1, #0
 800dd9e:	380b      	subs	r0, #11
 800dda0:	d017      	beq.n	800ddd2 <__b2d+0x92>
 800dda2:	f1c0 0c20 	rsb	ip, r0, #32
 800dda6:	fa04 f500 	lsl.w	r5, r4, r0
 800ddaa:	42be      	cmp	r6, r7
 800ddac:	fa21 f40c 	lsr.w	r4, r1, ip
 800ddb0:	ea45 0504 	orr.w	r5, r5, r4
 800ddb4:	bf8c      	ite	hi
 800ddb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ddba:	2400      	movls	r4, #0
 800ddbc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ddc0:	fa01 f000 	lsl.w	r0, r1, r0
 800ddc4:	fa24 f40c 	lsr.w	r4, r4, ip
 800ddc8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ddcc:	ea40 0204 	orr.w	r2, r0, r4
 800ddd0:	e7db      	b.n	800dd8a <__b2d+0x4a>
 800ddd2:	ea44 030c 	orr.w	r3, r4, ip
 800ddd6:	460a      	mov	r2, r1
 800ddd8:	e7d7      	b.n	800dd8a <__b2d+0x4a>
 800ddda:	bf00      	nop
 800dddc:	3ff00000 	.word	0x3ff00000

0800dde0 <__d2b>:
 800dde0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dde4:	4689      	mov	r9, r1
 800dde6:	2101      	movs	r1, #1
 800dde8:	ec57 6b10 	vmov	r6, r7, d0
 800ddec:	4690      	mov	r8, r2
 800ddee:	f7ff fc09 	bl	800d604 <_Balloc>
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	b930      	cbnz	r0, 800de04 <__d2b+0x24>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	4b25      	ldr	r3, [pc, #148]	; (800de90 <__d2b+0xb0>)
 800ddfa:	4826      	ldr	r0, [pc, #152]	; (800de94 <__d2b+0xb4>)
 800ddfc:	f240 310a 	movw	r1, #778	; 0x30a
 800de00:	f000 fd78 	bl	800e8f4 <__assert_func>
 800de04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de0c:	bb35      	cbnz	r5, 800de5c <__d2b+0x7c>
 800de0e:	2e00      	cmp	r6, #0
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	d028      	beq.n	800de66 <__d2b+0x86>
 800de14:	4668      	mov	r0, sp
 800de16:	9600      	str	r6, [sp, #0]
 800de18:	f7ff fd06 	bl	800d828 <__lo0bits>
 800de1c:	9900      	ldr	r1, [sp, #0]
 800de1e:	b300      	cbz	r0, 800de62 <__d2b+0x82>
 800de20:	9a01      	ldr	r2, [sp, #4]
 800de22:	f1c0 0320 	rsb	r3, r0, #32
 800de26:	fa02 f303 	lsl.w	r3, r2, r3
 800de2a:	430b      	orrs	r3, r1
 800de2c:	40c2      	lsrs	r2, r0
 800de2e:	6163      	str	r3, [r4, #20]
 800de30:	9201      	str	r2, [sp, #4]
 800de32:	9b01      	ldr	r3, [sp, #4]
 800de34:	61a3      	str	r3, [r4, #24]
 800de36:	2b00      	cmp	r3, #0
 800de38:	bf14      	ite	ne
 800de3a:	2202      	movne	r2, #2
 800de3c:	2201      	moveq	r2, #1
 800de3e:	6122      	str	r2, [r4, #16]
 800de40:	b1d5      	cbz	r5, 800de78 <__d2b+0x98>
 800de42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de46:	4405      	add	r5, r0
 800de48:	f8c9 5000 	str.w	r5, [r9]
 800de4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de50:	f8c8 0000 	str.w	r0, [r8]
 800de54:	4620      	mov	r0, r4
 800de56:	b003      	add	sp, #12
 800de58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de60:	e7d5      	b.n	800de0e <__d2b+0x2e>
 800de62:	6161      	str	r1, [r4, #20]
 800de64:	e7e5      	b.n	800de32 <__d2b+0x52>
 800de66:	a801      	add	r0, sp, #4
 800de68:	f7ff fcde 	bl	800d828 <__lo0bits>
 800de6c:	9b01      	ldr	r3, [sp, #4]
 800de6e:	6163      	str	r3, [r4, #20]
 800de70:	2201      	movs	r2, #1
 800de72:	6122      	str	r2, [r4, #16]
 800de74:	3020      	adds	r0, #32
 800de76:	e7e3      	b.n	800de40 <__d2b+0x60>
 800de78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de80:	f8c9 0000 	str.w	r0, [r9]
 800de84:	6918      	ldr	r0, [r3, #16]
 800de86:	f7ff fcaf 	bl	800d7e8 <__hi0bits>
 800de8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de8e:	e7df      	b.n	800de50 <__d2b+0x70>
 800de90:	0800f818 	.word	0x0800f818
 800de94:	0800f8bb 	.word	0x0800f8bb

0800de98 <__ratio>:
 800de98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	4688      	mov	r8, r1
 800de9e:	4669      	mov	r1, sp
 800dea0:	4681      	mov	r9, r0
 800dea2:	f7ff ff4d 	bl	800dd40 <__b2d>
 800dea6:	a901      	add	r1, sp, #4
 800dea8:	4640      	mov	r0, r8
 800deaa:	ec55 4b10 	vmov	r4, r5, d0
 800deae:	f7ff ff47 	bl	800dd40 <__b2d>
 800deb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800deb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800deba:	eba3 0c02 	sub.w	ip, r3, r2
 800debe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dec2:	1a9b      	subs	r3, r3, r2
 800dec4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dec8:	ec51 0b10 	vmov	r0, r1, d0
 800decc:	2b00      	cmp	r3, #0
 800dece:	bfd6      	itet	le
 800ded0:	460a      	movle	r2, r1
 800ded2:	462a      	movgt	r2, r5
 800ded4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ded8:	468b      	mov	fp, r1
 800deda:	462f      	mov	r7, r5
 800dedc:	bfd4      	ite	le
 800dede:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dee2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dee6:	4620      	mov	r0, r4
 800dee8:	ee10 2a10 	vmov	r2, s0
 800deec:	465b      	mov	r3, fp
 800deee:	4639      	mov	r1, r7
 800def0:	f7f2 fc84 	bl	80007fc <__aeabi_ddiv>
 800def4:	ec41 0b10 	vmov	d0, r0, r1
 800def8:	b003      	add	sp, #12
 800defa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800defe <__copybits>:
 800defe:	3901      	subs	r1, #1
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	1149      	asrs	r1, r1, #5
 800df04:	6914      	ldr	r4, [r2, #16]
 800df06:	3101      	adds	r1, #1
 800df08:	f102 0314 	add.w	r3, r2, #20
 800df0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df14:	1f05      	subs	r5, r0, #4
 800df16:	42a3      	cmp	r3, r4
 800df18:	d30c      	bcc.n	800df34 <__copybits+0x36>
 800df1a:	1aa3      	subs	r3, r4, r2
 800df1c:	3b11      	subs	r3, #17
 800df1e:	f023 0303 	bic.w	r3, r3, #3
 800df22:	3211      	adds	r2, #17
 800df24:	42a2      	cmp	r2, r4
 800df26:	bf88      	it	hi
 800df28:	2300      	movhi	r3, #0
 800df2a:	4418      	add	r0, r3
 800df2c:	2300      	movs	r3, #0
 800df2e:	4288      	cmp	r0, r1
 800df30:	d305      	bcc.n	800df3e <__copybits+0x40>
 800df32:	bd70      	pop	{r4, r5, r6, pc}
 800df34:	f853 6b04 	ldr.w	r6, [r3], #4
 800df38:	f845 6f04 	str.w	r6, [r5, #4]!
 800df3c:	e7eb      	b.n	800df16 <__copybits+0x18>
 800df3e:	f840 3b04 	str.w	r3, [r0], #4
 800df42:	e7f4      	b.n	800df2e <__copybits+0x30>

0800df44 <__any_on>:
 800df44:	f100 0214 	add.w	r2, r0, #20
 800df48:	6900      	ldr	r0, [r0, #16]
 800df4a:	114b      	asrs	r3, r1, #5
 800df4c:	4298      	cmp	r0, r3
 800df4e:	b510      	push	{r4, lr}
 800df50:	db11      	blt.n	800df76 <__any_on+0x32>
 800df52:	dd0a      	ble.n	800df6a <__any_on+0x26>
 800df54:	f011 011f 	ands.w	r1, r1, #31
 800df58:	d007      	beq.n	800df6a <__any_on+0x26>
 800df5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df5e:	fa24 f001 	lsr.w	r0, r4, r1
 800df62:	fa00 f101 	lsl.w	r1, r0, r1
 800df66:	428c      	cmp	r4, r1
 800df68:	d10b      	bne.n	800df82 <__any_on+0x3e>
 800df6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df6e:	4293      	cmp	r3, r2
 800df70:	d803      	bhi.n	800df7a <__any_on+0x36>
 800df72:	2000      	movs	r0, #0
 800df74:	bd10      	pop	{r4, pc}
 800df76:	4603      	mov	r3, r0
 800df78:	e7f7      	b.n	800df6a <__any_on+0x26>
 800df7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df7e:	2900      	cmp	r1, #0
 800df80:	d0f5      	beq.n	800df6e <__any_on+0x2a>
 800df82:	2001      	movs	r0, #1
 800df84:	e7f6      	b.n	800df74 <__any_on+0x30>

0800df86 <_calloc_r>:
 800df86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df88:	fba1 2402 	umull	r2, r4, r1, r2
 800df8c:	b94c      	cbnz	r4, 800dfa2 <_calloc_r+0x1c>
 800df8e:	4611      	mov	r1, r2
 800df90:	9201      	str	r2, [sp, #4]
 800df92:	f7fd fe0b 	bl	800bbac <_malloc_r>
 800df96:	9a01      	ldr	r2, [sp, #4]
 800df98:	4605      	mov	r5, r0
 800df9a:	b930      	cbnz	r0, 800dfaa <_calloc_r+0x24>
 800df9c:	4628      	mov	r0, r5
 800df9e:	b003      	add	sp, #12
 800dfa0:	bd30      	pop	{r4, r5, pc}
 800dfa2:	220c      	movs	r2, #12
 800dfa4:	6002      	str	r2, [r0, #0]
 800dfa6:	2500      	movs	r5, #0
 800dfa8:	e7f8      	b.n	800df9c <_calloc_r+0x16>
 800dfaa:	4621      	mov	r1, r4
 800dfac:	f7fd fd8a 	bl	800bac4 <memset>
 800dfb0:	e7f4      	b.n	800df9c <_calloc_r+0x16>

0800dfb2 <_realloc_r>:
 800dfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb6:	4680      	mov	r8, r0
 800dfb8:	4614      	mov	r4, r2
 800dfba:	460e      	mov	r6, r1
 800dfbc:	b921      	cbnz	r1, 800dfc8 <_realloc_r+0x16>
 800dfbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	f7fd bdf2 	b.w	800bbac <_malloc_r>
 800dfc8:	b92a      	cbnz	r2, 800dfd6 <_realloc_r+0x24>
 800dfca:	f7fd fd83 	bl	800bad4 <_free_r>
 800dfce:	4625      	mov	r5, r4
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd6:	f000 fcbd 	bl	800e954 <_malloc_usable_size_r>
 800dfda:	4284      	cmp	r4, r0
 800dfdc:	4607      	mov	r7, r0
 800dfde:	d802      	bhi.n	800dfe6 <_realloc_r+0x34>
 800dfe0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfe4:	d812      	bhi.n	800e00c <_realloc_r+0x5a>
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4640      	mov	r0, r8
 800dfea:	f7fd fddf 	bl	800bbac <_malloc_r>
 800dfee:	4605      	mov	r5, r0
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d0ed      	beq.n	800dfd0 <_realloc_r+0x1e>
 800dff4:	42bc      	cmp	r4, r7
 800dff6:	4622      	mov	r2, r4
 800dff8:	4631      	mov	r1, r6
 800dffa:	bf28      	it	cs
 800dffc:	463a      	movcs	r2, r7
 800dffe:	f7fd fd39 	bl	800ba74 <memcpy>
 800e002:	4631      	mov	r1, r6
 800e004:	4640      	mov	r0, r8
 800e006:	f7fd fd65 	bl	800bad4 <_free_r>
 800e00a:	e7e1      	b.n	800dfd0 <_realloc_r+0x1e>
 800e00c:	4635      	mov	r5, r6
 800e00e:	e7df      	b.n	800dfd0 <_realloc_r+0x1e>

0800e010 <__ssputs_r>:
 800e010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	688e      	ldr	r6, [r1, #8]
 800e016:	429e      	cmp	r6, r3
 800e018:	4682      	mov	sl, r0
 800e01a:	460c      	mov	r4, r1
 800e01c:	4690      	mov	r8, r2
 800e01e:	461f      	mov	r7, r3
 800e020:	d838      	bhi.n	800e094 <__ssputs_r+0x84>
 800e022:	898a      	ldrh	r2, [r1, #12]
 800e024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e028:	d032      	beq.n	800e090 <__ssputs_r+0x80>
 800e02a:	6825      	ldr	r5, [r4, #0]
 800e02c:	6909      	ldr	r1, [r1, #16]
 800e02e:	eba5 0901 	sub.w	r9, r5, r1
 800e032:	6965      	ldr	r5, [r4, #20]
 800e034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e03c:	3301      	adds	r3, #1
 800e03e:	444b      	add	r3, r9
 800e040:	106d      	asrs	r5, r5, #1
 800e042:	429d      	cmp	r5, r3
 800e044:	bf38      	it	cc
 800e046:	461d      	movcc	r5, r3
 800e048:	0553      	lsls	r3, r2, #21
 800e04a:	d531      	bpl.n	800e0b0 <__ssputs_r+0xa0>
 800e04c:	4629      	mov	r1, r5
 800e04e:	f7fd fdad 	bl	800bbac <_malloc_r>
 800e052:	4606      	mov	r6, r0
 800e054:	b950      	cbnz	r0, 800e06c <__ssputs_r+0x5c>
 800e056:	230c      	movs	r3, #12
 800e058:	f8ca 3000 	str.w	r3, [sl]
 800e05c:	89a3      	ldrh	r3, [r4, #12]
 800e05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e062:	81a3      	strh	r3, [r4, #12]
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
 800e068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e06c:	6921      	ldr	r1, [r4, #16]
 800e06e:	464a      	mov	r2, r9
 800e070:	f7fd fd00 	bl	800ba74 <memcpy>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	6126      	str	r6, [r4, #16]
 800e082:	6165      	str	r5, [r4, #20]
 800e084:	444e      	add	r6, r9
 800e086:	eba5 0509 	sub.w	r5, r5, r9
 800e08a:	6026      	str	r6, [r4, #0]
 800e08c:	60a5      	str	r5, [r4, #8]
 800e08e:	463e      	mov	r6, r7
 800e090:	42be      	cmp	r6, r7
 800e092:	d900      	bls.n	800e096 <__ssputs_r+0x86>
 800e094:	463e      	mov	r6, r7
 800e096:	6820      	ldr	r0, [r4, #0]
 800e098:	4632      	mov	r2, r6
 800e09a:	4641      	mov	r1, r8
 800e09c:	f7fd fcf8 	bl	800ba90 <memmove>
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	1b9b      	subs	r3, r3, r6
 800e0a4:	60a3      	str	r3, [r4, #8]
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	4433      	add	r3, r6
 800e0aa:	6023      	str	r3, [r4, #0]
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e7db      	b.n	800e068 <__ssputs_r+0x58>
 800e0b0:	462a      	mov	r2, r5
 800e0b2:	f7ff ff7e 	bl	800dfb2 <_realloc_r>
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d1e1      	bne.n	800e080 <__ssputs_r+0x70>
 800e0bc:	6921      	ldr	r1, [r4, #16]
 800e0be:	4650      	mov	r0, sl
 800e0c0:	f7fd fd08 	bl	800bad4 <_free_r>
 800e0c4:	e7c7      	b.n	800e056 <__ssputs_r+0x46>
	...

0800e0c8 <_svfiprintf_r>:
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	4698      	mov	r8, r3
 800e0ce:	898b      	ldrh	r3, [r1, #12]
 800e0d0:	061b      	lsls	r3, r3, #24
 800e0d2:	b09d      	sub	sp, #116	; 0x74
 800e0d4:	4607      	mov	r7, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	4614      	mov	r4, r2
 800e0da:	d50e      	bpl.n	800e0fa <_svfiprintf_r+0x32>
 800e0dc:	690b      	ldr	r3, [r1, #16]
 800e0de:	b963      	cbnz	r3, 800e0fa <_svfiprintf_r+0x32>
 800e0e0:	2140      	movs	r1, #64	; 0x40
 800e0e2:	f7fd fd63 	bl	800bbac <_malloc_r>
 800e0e6:	6028      	str	r0, [r5, #0]
 800e0e8:	6128      	str	r0, [r5, #16]
 800e0ea:	b920      	cbnz	r0, 800e0f6 <_svfiprintf_r+0x2e>
 800e0ec:	230c      	movs	r3, #12
 800e0ee:	603b      	str	r3, [r7, #0]
 800e0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f4:	e0d1      	b.n	800e29a <_svfiprintf_r+0x1d2>
 800e0f6:	2340      	movs	r3, #64	; 0x40
 800e0f8:	616b      	str	r3, [r5, #20]
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0fe:	2320      	movs	r3, #32
 800e100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e104:	f8cd 800c 	str.w	r8, [sp, #12]
 800e108:	2330      	movs	r3, #48	; 0x30
 800e10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2b4 <_svfiprintf_r+0x1ec>
 800e10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e112:	f04f 0901 	mov.w	r9, #1
 800e116:	4623      	mov	r3, r4
 800e118:	469a      	mov	sl, r3
 800e11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e11e:	b10a      	cbz	r2, 800e124 <_svfiprintf_r+0x5c>
 800e120:	2a25      	cmp	r2, #37	; 0x25
 800e122:	d1f9      	bne.n	800e118 <_svfiprintf_r+0x50>
 800e124:	ebba 0b04 	subs.w	fp, sl, r4
 800e128:	d00b      	beq.n	800e142 <_svfiprintf_r+0x7a>
 800e12a:	465b      	mov	r3, fp
 800e12c:	4622      	mov	r2, r4
 800e12e:	4629      	mov	r1, r5
 800e130:	4638      	mov	r0, r7
 800e132:	f7ff ff6d 	bl	800e010 <__ssputs_r>
 800e136:	3001      	adds	r0, #1
 800e138:	f000 80aa 	beq.w	800e290 <_svfiprintf_r+0x1c8>
 800e13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e13e:	445a      	add	r2, fp
 800e140:	9209      	str	r2, [sp, #36]	; 0x24
 800e142:	f89a 3000 	ldrb.w	r3, [sl]
 800e146:	2b00      	cmp	r3, #0
 800e148:	f000 80a2 	beq.w	800e290 <_svfiprintf_r+0x1c8>
 800e14c:	2300      	movs	r3, #0
 800e14e:	f04f 32ff 	mov.w	r2, #4294967295
 800e152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e156:	f10a 0a01 	add.w	sl, sl, #1
 800e15a:	9304      	str	r3, [sp, #16]
 800e15c:	9307      	str	r3, [sp, #28]
 800e15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e162:	931a      	str	r3, [sp, #104]	; 0x68
 800e164:	4654      	mov	r4, sl
 800e166:	2205      	movs	r2, #5
 800e168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e16c:	4851      	ldr	r0, [pc, #324]	; (800e2b4 <_svfiprintf_r+0x1ec>)
 800e16e:	f7f2 f80f 	bl	8000190 <memchr>
 800e172:	9a04      	ldr	r2, [sp, #16]
 800e174:	b9d8      	cbnz	r0, 800e1ae <_svfiprintf_r+0xe6>
 800e176:	06d0      	lsls	r0, r2, #27
 800e178:	bf44      	itt	mi
 800e17a:	2320      	movmi	r3, #32
 800e17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e180:	0711      	lsls	r1, r2, #28
 800e182:	bf44      	itt	mi
 800e184:	232b      	movmi	r3, #43	; 0x2b
 800e186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e18a:	f89a 3000 	ldrb.w	r3, [sl]
 800e18e:	2b2a      	cmp	r3, #42	; 0x2a
 800e190:	d015      	beq.n	800e1be <_svfiprintf_r+0xf6>
 800e192:	9a07      	ldr	r2, [sp, #28]
 800e194:	4654      	mov	r4, sl
 800e196:	2000      	movs	r0, #0
 800e198:	f04f 0c0a 	mov.w	ip, #10
 800e19c:	4621      	mov	r1, r4
 800e19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1a2:	3b30      	subs	r3, #48	; 0x30
 800e1a4:	2b09      	cmp	r3, #9
 800e1a6:	d94e      	bls.n	800e246 <_svfiprintf_r+0x17e>
 800e1a8:	b1b0      	cbz	r0, 800e1d8 <_svfiprintf_r+0x110>
 800e1aa:	9207      	str	r2, [sp, #28]
 800e1ac:	e014      	b.n	800e1d8 <_svfiprintf_r+0x110>
 800e1ae:	eba0 0308 	sub.w	r3, r0, r8
 800e1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	9304      	str	r3, [sp, #16]
 800e1ba:	46a2      	mov	sl, r4
 800e1bc:	e7d2      	b.n	800e164 <_svfiprintf_r+0x9c>
 800e1be:	9b03      	ldr	r3, [sp, #12]
 800e1c0:	1d19      	adds	r1, r3, #4
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	9103      	str	r1, [sp, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	bfbb      	ittet	lt
 800e1ca:	425b      	neglt	r3, r3
 800e1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e1d0:	9307      	strge	r3, [sp, #28]
 800e1d2:	9307      	strlt	r3, [sp, #28]
 800e1d4:	bfb8      	it	lt
 800e1d6:	9204      	strlt	r2, [sp, #16]
 800e1d8:	7823      	ldrb	r3, [r4, #0]
 800e1da:	2b2e      	cmp	r3, #46	; 0x2e
 800e1dc:	d10c      	bne.n	800e1f8 <_svfiprintf_r+0x130>
 800e1de:	7863      	ldrb	r3, [r4, #1]
 800e1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1e2:	d135      	bne.n	800e250 <_svfiprintf_r+0x188>
 800e1e4:	9b03      	ldr	r3, [sp, #12]
 800e1e6:	1d1a      	adds	r2, r3, #4
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	9203      	str	r2, [sp, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	bfb8      	it	lt
 800e1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1f4:	3402      	adds	r4, #2
 800e1f6:	9305      	str	r3, [sp, #20]
 800e1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2c4 <_svfiprintf_r+0x1fc>
 800e1fc:	7821      	ldrb	r1, [r4, #0]
 800e1fe:	2203      	movs	r2, #3
 800e200:	4650      	mov	r0, sl
 800e202:	f7f1 ffc5 	bl	8000190 <memchr>
 800e206:	b140      	cbz	r0, 800e21a <_svfiprintf_r+0x152>
 800e208:	2340      	movs	r3, #64	; 0x40
 800e20a:	eba0 000a 	sub.w	r0, r0, sl
 800e20e:	fa03 f000 	lsl.w	r0, r3, r0
 800e212:	9b04      	ldr	r3, [sp, #16]
 800e214:	4303      	orrs	r3, r0
 800e216:	3401      	adds	r4, #1
 800e218:	9304      	str	r3, [sp, #16]
 800e21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e21e:	4826      	ldr	r0, [pc, #152]	; (800e2b8 <_svfiprintf_r+0x1f0>)
 800e220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e224:	2206      	movs	r2, #6
 800e226:	f7f1 ffb3 	bl	8000190 <memchr>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d038      	beq.n	800e2a0 <_svfiprintf_r+0x1d8>
 800e22e:	4b23      	ldr	r3, [pc, #140]	; (800e2bc <_svfiprintf_r+0x1f4>)
 800e230:	bb1b      	cbnz	r3, 800e27a <_svfiprintf_r+0x1b2>
 800e232:	9b03      	ldr	r3, [sp, #12]
 800e234:	3307      	adds	r3, #7
 800e236:	f023 0307 	bic.w	r3, r3, #7
 800e23a:	3308      	adds	r3, #8
 800e23c:	9303      	str	r3, [sp, #12]
 800e23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e240:	4433      	add	r3, r6
 800e242:	9309      	str	r3, [sp, #36]	; 0x24
 800e244:	e767      	b.n	800e116 <_svfiprintf_r+0x4e>
 800e246:	fb0c 3202 	mla	r2, ip, r2, r3
 800e24a:	460c      	mov	r4, r1
 800e24c:	2001      	movs	r0, #1
 800e24e:	e7a5      	b.n	800e19c <_svfiprintf_r+0xd4>
 800e250:	2300      	movs	r3, #0
 800e252:	3401      	adds	r4, #1
 800e254:	9305      	str	r3, [sp, #20]
 800e256:	4619      	mov	r1, r3
 800e258:	f04f 0c0a 	mov.w	ip, #10
 800e25c:	4620      	mov	r0, r4
 800e25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e262:	3a30      	subs	r2, #48	; 0x30
 800e264:	2a09      	cmp	r2, #9
 800e266:	d903      	bls.n	800e270 <_svfiprintf_r+0x1a8>
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d0c5      	beq.n	800e1f8 <_svfiprintf_r+0x130>
 800e26c:	9105      	str	r1, [sp, #20]
 800e26e:	e7c3      	b.n	800e1f8 <_svfiprintf_r+0x130>
 800e270:	fb0c 2101 	mla	r1, ip, r1, r2
 800e274:	4604      	mov	r4, r0
 800e276:	2301      	movs	r3, #1
 800e278:	e7f0      	b.n	800e25c <_svfiprintf_r+0x194>
 800e27a:	ab03      	add	r3, sp, #12
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	462a      	mov	r2, r5
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <_svfiprintf_r+0x1f8>)
 800e282:	a904      	add	r1, sp, #16
 800e284:	4638      	mov	r0, r7
 800e286:	f3af 8000 	nop.w
 800e28a:	1c42      	adds	r2, r0, #1
 800e28c:	4606      	mov	r6, r0
 800e28e:	d1d6      	bne.n	800e23e <_svfiprintf_r+0x176>
 800e290:	89ab      	ldrh	r3, [r5, #12]
 800e292:	065b      	lsls	r3, r3, #25
 800e294:	f53f af2c 	bmi.w	800e0f0 <_svfiprintf_r+0x28>
 800e298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e29a:	b01d      	add	sp, #116	; 0x74
 800e29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a0:	ab03      	add	r3, sp, #12
 800e2a2:	9300      	str	r3, [sp, #0]
 800e2a4:	462a      	mov	r2, r5
 800e2a6:	4b06      	ldr	r3, [pc, #24]	; (800e2c0 <_svfiprintf_r+0x1f8>)
 800e2a8:	a904      	add	r1, sp, #16
 800e2aa:	4638      	mov	r0, r7
 800e2ac:	f000 f9d4 	bl	800e658 <_printf_i>
 800e2b0:	e7eb      	b.n	800e28a <_svfiprintf_r+0x1c2>
 800e2b2:	bf00      	nop
 800e2b4:	0800fa14 	.word	0x0800fa14
 800e2b8:	0800fa1e 	.word	0x0800fa1e
 800e2bc:	00000000 	.word	0x00000000
 800e2c0:	0800e011 	.word	0x0800e011
 800e2c4:	0800fa1a 	.word	0x0800fa1a

0800e2c8 <__sfputc_r>:
 800e2c8:	6893      	ldr	r3, [r2, #8]
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	b410      	push	{r4}
 800e2d0:	6093      	str	r3, [r2, #8]
 800e2d2:	da08      	bge.n	800e2e6 <__sfputc_r+0x1e>
 800e2d4:	6994      	ldr	r4, [r2, #24]
 800e2d6:	42a3      	cmp	r3, r4
 800e2d8:	db01      	blt.n	800e2de <__sfputc_r+0x16>
 800e2da:	290a      	cmp	r1, #10
 800e2dc:	d103      	bne.n	800e2e6 <__sfputc_r+0x1e>
 800e2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2e2:	f7fe bceb 	b.w	800ccbc <__swbuf_r>
 800e2e6:	6813      	ldr	r3, [r2, #0]
 800e2e8:	1c58      	adds	r0, r3, #1
 800e2ea:	6010      	str	r0, [r2, #0]
 800e2ec:	7019      	strb	r1, [r3, #0]
 800e2ee:	4608      	mov	r0, r1
 800e2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <__sfputs_r>:
 800e2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f8:	4606      	mov	r6, r0
 800e2fa:	460f      	mov	r7, r1
 800e2fc:	4614      	mov	r4, r2
 800e2fe:	18d5      	adds	r5, r2, r3
 800e300:	42ac      	cmp	r4, r5
 800e302:	d101      	bne.n	800e308 <__sfputs_r+0x12>
 800e304:	2000      	movs	r0, #0
 800e306:	e007      	b.n	800e318 <__sfputs_r+0x22>
 800e308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e30c:	463a      	mov	r2, r7
 800e30e:	4630      	mov	r0, r6
 800e310:	f7ff ffda 	bl	800e2c8 <__sfputc_r>
 800e314:	1c43      	adds	r3, r0, #1
 800e316:	d1f3      	bne.n	800e300 <__sfputs_r+0xa>
 800e318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e31c <_vfiprintf_r>:
 800e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e320:	460d      	mov	r5, r1
 800e322:	b09d      	sub	sp, #116	; 0x74
 800e324:	4614      	mov	r4, r2
 800e326:	4698      	mov	r8, r3
 800e328:	4606      	mov	r6, r0
 800e32a:	b118      	cbz	r0, 800e334 <_vfiprintf_r+0x18>
 800e32c:	6983      	ldr	r3, [r0, #24]
 800e32e:	b90b      	cbnz	r3, 800e334 <_vfiprintf_r+0x18>
 800e330:	f7fd fa66 	bl	800b800 <__sinit>
 800e334:	4b89      	ldr	r3, [pc, #548]	; (800e55c <_vfiprintf_r+0x240>)
 800e336:	429d      	cmp	r5, r3
 800e338:	d11b      	bne.n	800e372 <_vfiprintf_r+0x56>
 800e33a:	6875      	ldr	r5, [r6, #4]
 800e33c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e33e:	07d9      	lsls	r1, r3, #31
 800e340:	d405      	bmi.n	800e34e <_vfiprintf_r+0x32>
 800e342:	89ab      	ldrh	r3, [r5, #12]
 800e344:	059a      	lsls	r2, r3, #22
 800e346:	d402      	bmi.n	800e34e <_vfiprintf_r+0x32>
 800e348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e34a:	f7fd fb1c 	bl	800b986 <__retarget_lock_acquire_recursive>
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	071b      	lsls	r3, r3, #28
 800e352:	d501      	bpl.n	800e358 <_vfiprintf_r+0x3c>
 800e354:	692b      	ldr	r3, [r5, #16]
 800e356:	b9eb      	cbnz	r3, 800e394 <_vfiprintf_r+0x78>
 800e358:	4629      	mov	r1, r5
 800e35a:	4630      	mov	r0, r6
 800e35c:	f7fe fd12 	bl	800cd84 <__swsetup_r>
 800e360:	b1c0      	cbz	r0, 800e394 <_vfiprintf_r+0x78>
 800e362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e364:	07dc      	lsls	r4, r3, #31
 800e366:	d50e      	bpl.n	800e386 <_vfiprintf_r+0x6a>
 800e368:	f04f 30ff 	mov.w	r0, #4294967295
 800e36c:	b01d      	add	sp, #116	; 0x74
 800e36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e372:	4b7b      	ldr	r3, [pc, #492]	; (800e560 <_vfiprintf_r+0x244>)
 800e374:	429d      	cmp	r5, r3
 800e376:	d101      	bne.n	800e37c <_vfiprintf_r+0x60>
 800e378:	68b5      	ldr	r5, [r6, #8]
 800e37a:	e7df      	b.n	800e33c <_vfiprintf_r+0x20>
 800e37c:	4b79      	ldr	r3, [pc, #484]	; (800e564 <_vfiprintf_r+0x248>)
 800e37e:	429d      	cmp	r5, r3
 800e380:	bf08      	it	eq
 800e382:	68f5      	ldreq	r5, [r6, #12]
 800e384:	e7da      	b.n	800e33c <_vfiprintf_r+0x20>
 800e386:	89ab      	ldrh	r3, [r5, #12]
 800e388:	0598      	lsls	r0, r3, #22
 800e38a:	d4ed      	bmi.n	800e368 <_vfiprintf_r+0x4c>
 800e38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e38e:	f7fd fafb 	bl	800b988 <__retarget_lock_release_recursive>
 800e392:	e7e9      	b.n	800e368 <_vfiprintf_r+0x4c>
 800e394:	2300      	movs	r3, #0
 800e396:	9309      	str	r3, [sp, #36]	; 0x24
 800e398:	2320      	movs	r3, #32
 800e39a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3a2:	2330      	movs	r3, #48	; 0x30
 800e3a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e568 <_vfiprintf_r+0x24c>
 800e3a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3ac:	f04f 0901 	mov.w	r9, #1
 800e3b0:	4623      	mov	r3, r4
 800e3b2:	469a      	mov	sl, r3
 800e3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3b8:	b10a      	cbz	r2, 800e3be <_vfiprintf_r+0xa2>
 800e3ba:	2a25      	cmp	r2, #37	; 0x25
 800e3bc:	d1f9      	bne.n	800e3b2 <_vfiprintf_r+0x96>
 800e3be:	ebba 0b04 	subs.w	fp, sl, r4
 800e3c2:	d00b      	beq.n	800e3dc <_vfiprintf_r+0xc0>
 800e3c4:	465b      	mov	r3, fp
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f7ff ff93 	bl	800e2f6 <__sfputs_r>
 800e3d0:	3001      	adds	r0, #1
 800e3d2:	f000 80aa 	beq.w	800e52a <_vfiprintf_r+0x20e>
 800e3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3d8:	445a      	add	r2, fp
 800e3da:	9209      	str	r2, [sp, #36]	; 0x24
 800e3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 80a2 	beq.w	800e52a <_vfiprintf_r+0x20e>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3f0:	f10a 0a01 	add.w	sl, sl, #1
 800e3f4:	9304      	str	r3, [sp, #16]
 800e3f6:	9307      	str	r3, [sp, #28]
 800e3f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3fc:	931a      	str	r3, [sp, #104]	; 0x68
 800e3fe:	4654      	mov	r4, sl
 800e400:	2205      	movs	r2, #5
 800e402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e406:	4858      	ldr	r0, [pc, #352]	; (800e568 <_vfiprintf_r+0x24c>)
 800e408:	f7f1 fec2 	bl	8000190 <memchr>
 800e40c:	9a04      	ldr	r2, [sp, #16]
 800e40e:	b9d8      	cbnz	r0, 800e448 <_vfiprintf_r+0x12c>
 800e410:	06d1      	lsls	r1, r2, #27
 800e412:	bf44      	itt	mi
 800e414:	2320      	movmi	r3, #32
 800e416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e41a:	0713      	lsls	r3, r2, #28
 800e41c:	bf44      	itt	mi
 800e41e:	232b      	movmi	r3, #43	; 0x2b
 800e420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e424:	f89a 3000 	ldrb.w	r3, [sl]
 800e428:	2b2a      	cmp	r3, #42	; 0x2a
 800e42a:	d015      	beq.n	800e458 <_vfiprintf_r+0x13c>
 800e42c:	9a07      	ldr	r2, [sp, #28]
 800e42e:	4654      	mov	r4, sl
 800e430:	2000      	movs	r0, #0
 800e432:	f04f 0c0a 	mov.w	ip, #10
 800e436:	4621      	mov	r1, r4
 800e438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e43c:	3b30      	subs	r3, #48	; 0x30
 800e43e:	2b09      	cmp	r3, #9
 800e440:	d94e      	bls.n	800e4e0 <_vfiprintf_r+0x1c4>
 800e442:	b1b0      	cbz	r0, 800e472 <_vfiprintf_r+0x156>
 800e444:	9207      	str	r2, [sp, #28]
 800e446:	e014      	b.n	800e472 <_vfiprintf_r+0x156>
 800e448:	eba0 0308 	sub.w	r3, r0, r8
 800e44c:	fa09 f303 	lsl.w	r3, r9, r3
 800e450:	4313      	orrs	r3, r2
 800e452:	9304      	str	r3, [sp, #16]
 800e454:	46a2      	mov	sl, r4
 800e456:	e7d2      	b.n	800e3fe <_vfiprintf_r+0xe2>
 800e458:	9b03      	ldr	r3, [sp, #12]
 800e45a:	1d19      	adds	r1, r3, #4
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	9103      	str	r1, [sp, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	bfbb      	ittet	lt
 800e464:	425b      	neglt	r3, r3
 800e466:	f042 0202 	orrlt.w	r2, r2, #2
 800e46a:	9307      	strge	r3, [sp, #28]
 800e46c:	9307      	strlt	r3, [sp, #28]
 800e46e:	bfb8      	it	lt
 800e470:	9204      	strlt	r2, [sp, #16]
 800e472:	7823      	ldrb	r3, [r4, #0]
 800e474:	2b2e      	cmp	r3, #46	; 0x2e
 800e476:	d10c      	bne.n	800e492 <_vfiprintf_r+0x176>
 800e478:	7863      	ldrb	r3, [r4, #1]
 800e47a:	2b2a      	cmp	r3, #42	; 0x2a
 800e47c:	d135      	bne.n	800e4ea <_vfiprintf_r+0x1ce>
 800e47e:	9b03      	ldr	r3, [sp, #12]
 800e480:	1d1a      	adds	r2, r3, #4
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	9203      	str	r2, [sp, #12]
 800e486:	2b00      	cmp	r3, #0
 800e488:	bfb8      	it	lt
 800e48a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e48e:	3402      	adds	r4, #2
 800e490:	9305      	str	r3, [sp, #20]
 800e492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e578 <_vfiprintf_r+0x25c>
 800e496:	7821      	ldrb	r1, [r4, #0]
 800e498:	2203      	movs	r2, #3
 800e49a:	4650      	mov	r0, sl
 800e49c:	f7f1 fe78 	bl	8000190 <memchr>
 800e4a0:	b140      	cbz	r0, 800e4b4 <_vfiprintf_r+0x198>
 800e4a2:	2340      	movs	r3, #64	; 0x40
 800e4a4:	eba0 000a 	sub.w	r0, r0, sl
 800e4a8:	fa03 f000 	lsl.w	r0, r3, r0
 800e4ac:	9b04      	ldr	r3, [sp, #16]
 800e4ae:	4303      	orrs	r3, r0
 800e4b0:	3401      	adds	r4, #1
 800e4b2:	9304      	str	r3, [sp, #16]
 800e4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4b8:	482c      	ldr	r0, [pc, #176]	; (800e56c <_vfiprintf_r+0x250>)
 800e4ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4be:	2206      	movs	r2, #6
 800e4c0:	f7f1 fe66 	bl	8000190 <memchr>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d03f      	beq.n	800e548 <_vfiprintf_r+0x22c>
 800e4c8:	4b29      	ldr	r3, [pc, #164]	; (800e570 <_vfiprintf_r+0x254>)
 800e4ca:	bb1b      	cbnz	r3, 800e514 <_vfiprintf_r+0x1f8>
 800e4cc:	9b03      	ldr	r3, [sp, #12]
 800e4ce:	3307      	adds	r3, #7
 800e4d0:	f023 0307 	bic.w	r3, r3, #7
 800e4d4:	3308      	adds	r3, #8
 800e4d6:	9303      	str	r3, [sp, #12]
 800e4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4da:	443b      	add	r3, r7
 800e4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4de:	e767      	b.n	800e3b0 <_vfiprintf_r+0x94>
 800e4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	e7a5      	b.n	800e436 <_vfiprintf_r+0x11a>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	3401      	adds	r4, #1
 800e4ee:	9305      	str	r3, [sp, #20]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	f04f 0c0a 	mov.w	ip, #10
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4fc:	3a30      	subs	r2, #48	; 0x30
 800e4fe:	2a09      	cmp	r2, #9
 800e500:	d903      	bls.n	800e50a <_vfiprintf_r+0x1ee>
 800e502:	2b00      	cmp	r3, #0
 800e504:	d0c5      	beq.n	800e492 <_vfiprintf_r+0x176>
 800e506:	9105      	str	r1, [sp, #20]
 800e508:	e7c3      	b.n	800e492 <_vfiprintf_r+0x176>
 800e50a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e50e:	4604      	mov	r4, r0
 800e510:	2301      	movs	r3, #1
 800e512:	e7f0      	b.n	800e4f6 <_vfiprintf_r+0x1da>
 800e514:	ab03      	add	r3, sp, #12
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	462a      	mov	r2, r5
 800e51a:	4b16      	ldr	r3, [pc, #88]	; (800e574 <_vfiprintf_r+0x258>)
 800e51c:	a904      	add	r1, sp, #16
 800e51e:	4630      	mov	r0, r6
 800e520:	f3af 8000 	nop.w
 800e524:	4607      	mov	r7, r0
 800e526:	1c78      	adds	r0, r7, #1
 800e528:	d1d6      	bne.n	800e4d8 <_vfiprintf_r+0x1bc>
 800e52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e52c:	07d9      	lsls	r1, r3, #31
 800e52e:	d405      	bmi.n	800e53c <_vfiprintf_r+0x220>
 800e530:	89ab      	ldrh	r3, [r5, #12]
 800e532:	059a      	lsls	r2, r3, #22
 800e534:	d402      	bmi.n	800e53c <_vfiprintf_r+0x220>
 800e536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e538:	f7fd fa26 	bl	800b988 <__retarget_lock_release_recursive>
 800e53c:	89ab      	ldrh	r3, [r5, #12]
 800e53e:	065b      	lsls	r3, r3, #25
 800e540:	f53f af12 	bmi.w	800e368 <_vfiprintf_r+0x4c>
 800e544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e546:	e711      	b.n	800e36c <_vfiprintf_r+0x50>
 800e548:	ab03      	add	r3, sp, #12
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	462a      	mov	r2, r5
 800e54e:	4b09      	ldr	r3, [pc, #36]	; (800e574 <_vfiprintf_r+0x258>)
 800e550:	a904      	add	r1, sp, #16
 800e552:	4630      	mov	r0, r6
 800e554:	f000 f880 	bl	800e658 <_printf_i>
 800e558:	e7e4      	b.n	800e524 <_vfiprintf_r+0x208>
 800e55a:	bf00      	nop
 800e55c:	0800f774 	.word	0x0800f774
 800e560:	0800f794 	.word	0x0800f794
 800e564:	0800f754 	.word	0x0800f754
 800e568:	0800fa14 	.word	0x0800fa14
 800e56c:	0800fa1e 	.word	0x0800fa1e
 800e570:	00000000 	.word	0x00000000
 800e574:	0800e2f7 	.word	0x0800e2f7
 800e578:	0800fa1a 	.word	0x0800fa1a

0800e57c <_printf_common>:
 800e57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e580:	4616      	mov	r6, r2
 800e582:	4699      	mov	r9, r3
 800e584:	688a      	ldr	r2, [r1, #8]
 800e586:	690b      	ldr	r3, [r1, #16]
 800e588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e58c:	4293      	cmp	r3, r2
 800e58e:	bfb8      	it	lt
 800e590:	4613      	movlt	r3, r2
 800e592:	6033      	str	r3, [r6, #0]
 800e594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e598:	4607      	mov	r7, r0
 800e59a:	460c      	mov	r4, r1
 800e59c:	b10a      	cbz	r2, 800e5a2 <_printf_common+0x26>
 800e59e:	3301      	adds	r3, #1
 800e5a0:	6033      	str	r3, [r6, #0]
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	0699      	lsls	r1, r3, #26
 800e5a6:	bf42      	ittt	mi
 800e5a8:	6833      	ldrmi	r3, [r6, #0]
 800e5aa:	3302      	addmi	r3, #2
 800e5ac:	6033      	strmi	r3, [r6, #0]
 800e5ae:	6825      	ldr	r5, [r4, #0]
 800e5b0:	f015 0506 	ands.w	r5, r5, #6
 800e5b4:	d106      	bne.n	800e5c4 <_printf_common+0x48>
 800e5b6:	f104 0a19 	add.w	sl, r4, #25
 800e5ba:	68e3      	ldr	r3, [r4, #12]
 800e5bc:	6832      	ldr	r2, [r6, #0]
 800e5be:	1a9b      	subs	r3, r3, r2
 800e5c0:	42ab      	cmp	r3, r5
 800e5c2:	dc26      	bgt.n	800e612 <_printf_common+0x96>
 800e5c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5c8:	1e13      	subs	r3, r2, #0
 800e5ca:	6822      	ldr	r2, [r4, #0]
 800e5cc:	bf18      	it	ne
 800e5ce:	2301      	movne	r3, #1
 800e5d0:	0692      	lsls	r2, r2, #26
 800e5d2:	d42b      	bmi.n	800e62c <_printf_common+0xb0>
 800e5d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5d8:	4649      	mov	r1, r9
 800e5da:	4638      	mov	r0, r7
 800e5dc:	47c0      	blx	r8
 800e5de:	3001      	adds	r0, #1
 800e5e0:	d01e      	beq.n	800e620 <_printf_common+0xa4>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	68e5      	ldr	r5, [r4, #12]
 800e5e6:	6832      	ldr	r2, [r6, #0]
 800e5e8:	f003 0306 	and.w	r3, r3, #6
 800e5ec:	2b04      	cmp	r3, #4
 800e5ee:	bf08      	it	eq
 800e5f0:	1aad      	subeq	r5, r5, r2
 800e5f2:	68a3      	ldr	r3, [r4, #8]
 800e5f4:	6922      	ldr	r2, [r4, #16]
 800e5f6:	bf0c      	ite	eq
 800e5f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5fc:	2500      	movne	r5, #0
 800e5fe:	4293      	cmp	r3, r2
 800e600:	bfc4      	itt	gt
 800e602:	1a9b      	subgt	r3, r3, r2
 800e604:	18ed      	addgt	r5, r5, r3
 800e606:	2600      	movs	r6, #0
 800e608:	341a      	adds	r4, #26
 800e60a:	42b5      	cmp	r5, r6
 800e60c:	d11a      	bne.n	800e644 <_printf_common+0xc8>
 800e60e:	2000      	movs	r0, #0
 800e610:	e008      	b.n	800e624 <_printf_common+0xa8>
 800e612:	2301      	movs	r3, #1
 800e614:	4652      	mov	r2, sl
 800e616:	4649      	mov	r1, r9
 800e618:	4638      	mov	r0, r7
 800e61a:	47c0      	blx	r8
 800e61c:	3001      	adds	r0, #1
 800e61e:	d103      	bne.n	800e628 <_printf_common+0xac>
 800e620:	f04f 30ff 	mov.w	r0, #4294967295
 800e624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e628:	3501      	adds	r5, #1
 800e62a:	e7c6      	b.n	800e5ba <_printf_common+0x3e>
 800e62c:	18e1      	adds	r1, r4, r3
 800e62e:	1c5a      	adds	r2, r3, #1
 800e630:	2030      	movs	r0, #48	; 0x30
 800e632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e636:	4422      	add	r2, r4
 800e638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e63c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e640:	3302      	adds	r3, #2
 800e642:	e7c7      	b.n	800e5d4 <_printf_common+0x58>
 800e644:	2301      	movs	r3, #1
 800e646:	4622      	mov	r2, r4
 800e648:	4649      	mov	r1, r9
 800e64a:	4638      	mov	r0, r7
 800e64c:	47c0      	blx	r8
 800e64e:	3001      	adds	r0, #1
 800e650:	d0e6      	beq.n	800e620 <_printf_common+0xa4>
 800e652:	3601      	adds	r6, #1
 800e654:	e7d9      	b.n	800e60a <_printf_common+0x8e>
	...

0800e658 <_printf_i>:
 800e658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e65c:	7e0f      	ldrb	r7, [r1, #24]
 800e65e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e660:	2f78      	cmp	r7, #120	; 0x78
 800e662:	4691      	mov	r9, r2
 800e664:	4680      	mov	r8, r0
 800e666:	460c      	mov	r4, r1
 800e668:	469a      	mov	sl, r3
 800e66a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e66e:	d807      	bhi.n	800e680 <_printf_i+0x28>
 800e670:	2f62      	cmp	r7, #98	; 0x62
 800e672:	d80a      	bhi.n	800e68a <_printf_i+0x32>
 800e674:	2f00      	cmp	r7, #0
 800e676:	f000 80d8 	beq.w	800e82a <_printf_i+0x1d2>
 800e67a:	2f58      	cmp	r7, #88	; 0x58
 800e67c:	f000 80a3 	beq.w	800e7c6 <_printf_i+0x16e>
 800e680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e688:	e03a      	b.n	800e700 <_printf_i+0xa8>
 800e68a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e68e:	2b15      	cmp	r3, #21
 800e690:	d8f6      	bhi.n	800e680 <_printf_i+0x28>
 800e692:	a101      	add	r1, pc, #4	; (adr r1, 800e698 <_printf_i+0x40>)
 800e694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e698:	0800e6f1 	.word	0x0800e6f1
 800e69c:	0800e705 	.word	0x0800e705
 800e6a0:	0800e681 	.word	0x0800e681
 800e6a4:	0800e681 	.word	0x0800e681
 800e6a8:	0800e681 	.word	0x0800e681
 800e6ac:	0800e681 	.word	0x0800e681
 800e6b0:	0800e705 	.word	0x0800e705
 800e6b4:	0800e681 	.word	0x0800e681
 800e6b8:	0800e681 	.word	0x0800e681
 800e6bc:	0800e681 	.word	0x0800e681
 800e6c0:	0800e681 	.word	0x0800e681
 800e6c4:	0800e811 	.word	0x0800e811
 800e6c8:	0800e735 	.word	0x0800e735
 800e6cc:	0800e7f3 	.word	0x0800e7f3
 800e6d0:	0800e681 	.word	0x0800e681
 800e6d4:	0800e681 	.word	0x0800e681
 800e6d8:	0800e833 	.word	0x0800e833
 800e6dc:	0800e681 	.word	0x0800e681
 800e6e0:	0800e735 	.word	0x0800e735
 800e6e4:	0800e681 	.word	0x0800e681
 800e6e8:	0800e681 	.word	0x0800e681
 800e6ec:	0800e7fb 	.word	0x0800e7fb
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	1d1a      	adds	r2, r3, #4
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	602a      	str	r2, [r5, #0]
 800e6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e700:	2301      	movs	r3, #1
 800e702:	e0a3      	b.n	800e84c <_printf_i+0x1f4>
 800e704:	6820      	ldr	r0, [r4, #0]
 800e706:	6829      	ldr	r1, [r5, #0]
 800e708:	0606      	lsls	r6, r0, #24
 800e70a:	f101 0304 	add.w	r3, r1, #4
 800e70e:	d50a      	bpl.n	800e726 <_printf_i+0xce>
 800e710:	680e      	ldr	r6, [r1, #0]
 800e712:	602b      	str	r3, [r5, #0]
 800e714:	2e00      	cmp	r6, #0
 800e716:	da03      	bge.n	800e720 <_printf_i+0xc8>
 800e718:	232d      	movs	r3, #45	; 0x2d
 800e71a:	4276      	negs	r6, r6
 800e71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e720:	485e      	ldr	r0, [pc, #376]	; (800e89c <_printf_i+0x244>)
 800e722:	230a      	movs	r3, #10
 800e724:	e019      	b.n	800e75a <_printf_i+0x102>
 800e726:	680e      	ldr	r6, [r1, #0]
 800e728:	602b      	str	r3, [r5, #0]
 800e72a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e72e:	bf18      	it	ne
 800e730:	b236      	sxthne	r6, r6
 800e732:	e7ef      	b.n	800e714 <_printf_i+0xbc>
 800e734:	682b      	ldr	r3, [r5, #0]
 800e736:	6820      	ldr	r0, [r4, #0]
 800e738:	1d19      	adds	r1, r3, #4
 800e73a:	6029      	str	r1, [r5, #0]
 800e73c:	0601      	lsls	r1, r0, #24
 800e73e:	d501      	bpl.n	800e744 <_printf_i+0xec>
 800e740:	681e      	ldr	r6, [r3, #0]
 800e742:	e002      	b.n	800e74a <_printf_i+0xf2>
 800e744:	0646      	lsls	r6, r0, #25
 800e746:	d5fb      	bpl.n	800e740 <_printf_i+0xe8>
 800e748:	881e      	ldrh	r6, [r3, #0]
 800e74a:	4854      	ldr	r0, [pc, #336]	; (800e89c <_printf_i+0x244>)
 800e74c:	2f6f      	cmp	r7, #111	; 0x6f
 800e74e:	bf0c      	ite	eq
 800e750:	2308      	moveq	r3, #8
 800e752:	230a      	movne	r3, #10
 800e754:	2100      	movs	r1, #0
 800e756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e75a:	6865      	ldr	r5, [r4, #4]
 800e75c:	60a5      	str	r5, [r4, #8]
 800e75e:	2d00      	cmp	r5, #0
 800e760:	bfa2      	ittt	ge
 800e762:	6821      	ldrge	r1, [r4, #0]
 800e764:	f021 0104 	bicge.w	r1, r1, #4
 800e768:	6021      	strge	r1, [r4, #0]
 800e76a:	b90e      	cbnz	r6, 800e770 <_printf_i+0x118>
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	d04d      	beq.n	800e80c <_printf_i+0x1b4>
 800e770:	4615      	mov	r5, r2
 800e772:	fbb6 f1f3 	udiv	r1, r6, r3
 800e776:	fb03 6711 	mls	r7, r3, r1, r6
 800e77a:	5dc7      	ldrb	r7, [r0, r7]
 800e77c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e780:	4637      	mov	r7, r6
 800e782:	42bb      	cmp	r3, r7
 800e784:	460e      	mov	r6, r1
 800e786:	d9f4      	bls.n	800e772 <_printf_i+0x11a>
 800e788:	2b08      	cmp	r3, #8
 800e78a:	d10b      	bne.n	800e7a4 <_printf_i+0x14c>
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	07de      	lsls	r6, r3, #31
 800e790:	d508      	bpl.n	800e7a4 <_printf_i+0x14c>
 800e792:	6923      	ldr	r3, [r4, #16]
 800e794:	6861      	ldr	r1, [r4, #4]
 800e796:	4299      	cmp	r1, r3
 800e798:	bfde      	ittt	le
 800e79a:	2330      	movle	r3, #48	; 0x30
 800e79c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e7a4:	1b52      	subs	r2, r2, r5
 800e7a6:	6122      	str	r2, [r4, #16]
 800e7a8:	f8cd a000 	str.w	sl, [sp]
 800e7ac:	464b      	mov	r3, r9
 800e7ae:	aa03      	add	r2, sp, #12
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	4640      	mov	r0, r8
 800e7b4:	f7ff fee2 	bl	800e57c <_printf_common>
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d14c      	bne.n	800e856 <_printf_i+0x1fe>
 800e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c0:	b004      	add	sp, #16
 800e7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c6:	4835      	ldr	r0, [pc, #212]	; (800e89c <_printf_i+0x244>)
 800e7c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e7cc:	6829      	ldr	r1, [r5, #0]
 800e7ce:	6823      	ldr	r3, [r4, #0]
 800e7d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e7d4:	6029      	str	r1, [r5, #0]
 800e7d6:	061d      	lsls	r5, r3, #24
 800e7d8:	d514      	bpl.n	800e804 <_printf_i+0x1ac>
 800e7da:	07df      	lsls	r7, r3, #31
 800e7dc:	bf44      	itt	mi
 800e7de:	f043 0320 	orrmi.w	r3, r3, #32
 800e7e2:	6023      	strmi	r3, [r4, #0]
 800e7e4:	b91e      	cbnz	r6, 800e7ee <_printf_i+0x196>
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	f023 0320 	bic.w	r3, r3, #32
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	2310      	movs	r3, #16
 800e7f0:	e7b0      	b.n	800e754 <_printf_i+0xfc>
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	f043 0320 	orr.w	r3, r3, #32
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	2378      	movs	r3, #120	; 0x78
 800e7fc:	4828      	ldr	r0, [pc, #160]	; (800e8a0 <_printf_i+0x248>)
 800e7fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e802:	e7e3      	b.n	800e7cc <_printf_i+0x174>
 800e804:	0659      	lsls	r1, r3, #25
 800e806:	bf48      	it	mi
 800e808:	b2b6      	uxthmi	r6, r6
 800e80a:	e7e6      	b.n	800e7da <_printf_i+0x182>
 800e80c:	4615      	mov	r5, r2
 800e80e:	e7bb      	b.n	800e788 <_printf_i+0x130>
 800e810:	682b      	ldr	r3, [r5, #0]
 800e812:	6826      	ldr	r6, [r4, #0]
 800e814:	6961      	ldr	r1, [r4, #20]
 800e816:	1d18      	adds	r0, r3, #4
 800e818:	6028      	str	r0, [r5, #0]
 800e81a:	0635      	lsls	r5, r6, #24
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	d501      	bpl.n	800e824 <_printf_i+0x1cc>
 800e820:	6019      	str	r1, [r3, #0]
 800e822:	e002      	b.n	800e82a <_printf_i+0x1d2>
 800e824:	0670      	lsls	r0, r6, #25
 800e826:	d5fb      	bpl.n	800e820 <_printf_i+0x1c8>
 800e828:	8019      	strh	r1, [r3, #0]
 800e82a:	2300      	movs	r3, #0
 800e82c:	6123      	str	r3, [r4, #16]
 800e82e:	4615      	mov	r5, r2
 800e830:	e7ba      	b.n	800e7a8 <_printf_i+0x150>
 800e832:	682b      	ldr	r3, [r5, #0]
 800e834:	1d1a      	adds	r2, r3, #4
 800e836:	602a      	str	r2, [r5, #0]
 800e838:	681d      	ldr	r5, [r3, #0]
 800e83a:	6862      	ldr	r2, [r4, #4]
 800e83c:	2100      	movs	r1, #0
 800e83e:	4628      	mov	r0, r5
 800e840:	f7f1 fca6 	bl	8000190 <memchr>
 800e844:	b108      	cbz	r0, 800e84a <_printf_i+0x1f2>
 800e846:	1b40      	subs	r0, r0, r5
 800e848:	6060      	str	r0, [r4, #4]
 800e84a:	6863      	ldr	r3, [r4, #4]
 800e84c:	6123      	str	r3, [r4, #16]
 800e84e:	2300      	movs	r3, #0
 800e850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e854:	e7a8      	b.n	800e7a8 <_printf_i+0x150>
 800e856:	6923      	ldr	r3, [r4, #16]
 800e858:	462a      	mov	r2, r5
 800e85a:	4649      	mov	r1, r9
 800e85c:	4640      	mov	r0, r8
 800e85e:	47d0      	blx	sl
 800e860:	3001      	adds	r0, #1
 800e862:	d0ab      	beq.n	800e7bc <_printf_i+0x164>
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	079b      	lsls	r3, r3, #30
 800e868:	d413      	bmi.n	800e892 <_printf_i+0x23a>
 800e86a:	68e0      	ldr	r0, [r4, #12]
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	4298      	cmp	r0, r3
 800e870:	bfb8      	it	lt
 800e872:	4618      	movlt	r0, r3
 800e874:	e7a4      	b.n	800e7c0 <_printf_i+0x168>
 800e876:	2301      	movs	r3, #1
 800e878:	4632      	mov	r2, r6
 800e87a:	4649      	mov	r1, r9
 800e87c:	4640      	mov	r0, r8
 800e87e:	47d0      	blx	sl
 800e880:	3001      	adds	r0, #1
 800e882:	d09b      	beq.n	800e7bc <_printf_i+0x164>
 800e884:	3501      	adds	r5, #1
 800e886:	68e3      	ldr	r3, [r4, #12]
 800e888:	9903      	ldr	r1, [sp, #12]
 800e88a:	1a5b      	subs	r3, r3, r1
 800e88c:	42ab      	cmp	r3, r5
 800e88e:	dcf2      	bgt.n	800e876 <_printf_i+0x21e>
 800e890:	e7eb      	b.n	800e86a <_printf_i+0x212>
 800e892:	2500      	movs	r5, #0
 800e894:	f104 0619 	add.w	r6, r4, #25
 800e898:	e7f5      	b.n	800e886 <_printf_i+0x22e>
 800e89a:	bf00      	nop
 800e89c:	0800fa25 	.word	0x0800fa25
 800e8a0:	0800fa36 	.word	0x0800fa36

0800e8a4 <_read_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4d07      	ldr	r5, [pc, #28]	; (800e8c4 <_read_r+0x20>)
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	4608      	mov	r0, r1
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	602a      	str	r2, [r5, #0]
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	f7f6 fae4 	bl	8004e80 <_read>
 800e8b8:	1c43      	adds	r3, r0, #1
 800e8ba:	d102      	bne.n	800e8c2 <_read_r+0x1e>
 800e8bc:	682b      	ldr	r3, [r5, #0]
 800e8be:	b103      	cbz	r3, 800e8c2 <_read_r+0x1e>
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	bd38      	pop	{r3, r4, r5, pc}
 800e8c4:	20001764 	.word	0x20001764

0800e8c8 <nan>:
 800e8c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e8d0 <nan+0x8>
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	00000000 	.word	0x00000000
 800e8d4:	7ff80000 	.word	0x7ff80000

0800e8d8 <__ascii_wctomb>:
 800e8d8:	b149      	cbz	r1, 800e8ee <__ascii_wctomb+0x16>
 800e8da:	2aff      	cmp	r2, #255	; 0xff
 800e8dc:	bf85      	ittet	hi
 800e8de:	238a      	movhi	r3, #138	; 0x8a
 800e8e0:	6003      	strhi	r3, [r0, #0]
 800e8e2:	700a      	strbls	r2, [r1, #0]
 800e8e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e8e8:	bf98      	it	ls
 800e8ea:	2001      	movls	r0, #1
 800e8ec:	4770      	bx	lr
 800e8ee:	4608      	mov	r0, r1
 800e8f0:	4770      	bx	lr
	...

0800e8f4 <__assert_func>:
 800e8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8f6:	4614      	mov	r4, r2
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	4b09      	ldr	r3, [pc, #36]	; (800e920 <__assert_func+0x2c>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4605      	mov	r5, r0
 800e900:	68d8      	ldr	r0, [r3, #12]
 800e902:	b14c      	cbz	r4, 800e918 <__assert_func+0x24>
 800e904:	4b07      	ldr	r3, [pc, #28]	; (800e924 <__assert_func+0x30>)
 800e906:	9100      	str	r1, [sp, #0]
 800e908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e90c:	4906      	ldr	r1, [pc, #24]	; (800e928 <__assert_func+0x34>)
 800e90e:	462b      	mov	r3, r5
 800e910:	f000 f80e 	bl	800e930 <fiprintf>
 800e914:	f000 f826 	bl	800e964 <abort>
 800e918:	4b04      	ldr	r3, [pc, #16]	; (800e92c <__assert_func+0x38>)
 800e91a:	461c      	mov	r4, r3
 800e91c:	e7f3      	b.n	800e906 <__assert_func+0x12>
 800e91e:	bf00      	nop
 800e920:	20000024 	.word	0x20000024
 800e924:	0800fa47 	.word	0x0800fa47
 800e928:	0800fa54 	.word	0x0800fa54
 800e92c:	0800fa82 	.word	0x0800fa82

0800e930 <fiprintf>:
 800e930:	b40e      	push	{r1, r2, r3}
 800e932:	b503      	push	{r0, r1, lr}
 800e934:	4601      	mov	r1, r0
 800e936:	ab03      	add	r3, sp, #12
 800e938:	4805      	ldr	r0, [pc, #20]	; (800e950 <fiprintf+0x20>)
 800e93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e93e:	6800      	ldr	r0, [r0, #0]
 800e940:	9301      	str	r3, [sp, #4]
 800e942:	f7ff fceb 	bl	800e31c <_vfiprintf_r>
 800e946:	b002      	add	sp, #8
 800e948:	f85d eb04 	ldr.w	lr, [sp], #4
 800e94c:	b003      	add	sp, #12
 800e94e:	4770      	bx	lr
 800e950:	20000024 	.word	0x20000024

0800e954 <_malloc_usable_size_r>:
 800e954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e958:	1f18      	subs	r0, r3, #4
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	bfbc      	itt	lt
 800e95e:	580b      	ldrlt	r3, [r1, r0]
 800e960:	18c0      	addlt	r0, r0, r3
 800e962:	4770      	bx	lr

0800e964 <abort>:
 800e964:	b508      	push	{r3, lr}
 800e966:	2006      	movs	r0, #6
 800e968:	f000 f82c 	bl	800e9c4 <raise>
 800e96c:	2001      	movs	r0, #1
 800e96e:	f7f6 fa7d 	bl	8004e6c <_exit>

0800e972 <_raise_r>:
 800e972:	291f      	cmp	r1, #31
 800e974:	b538      	push	{r3, r4, r5, lr}
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	d904      	bls.n	800e986 <_raise_r+0x14>
 800e97c:	2316      	movs	r3, #22
 800e97e:	6003      	str	r3, [r0, #0]
 800e980:	f04f 30ff 	mov.w	r0, #4294967295
 800e984:	bd38      	pop	{r3, r4, r5, pc}
 800e986:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e988:	b112      	cbz	r2, 800e990 <_raise_r+0x1e>
 800e98a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e98e:	b94b      	cbnz	r3, 800e9a4 <_raise_r+0x32>
 800e990:	4620      	mov	r0, r4
 800e992:	f000 f831 	bl	800e9f8 <_getpid_r>
 800e996:	462a      	mov	r2, r5
 800e998:	4601      	mov	r1, r0
 800e99a:	4620      	mov	r0, r4
 800e99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9a0:	f000 b818 	b.w	800e9d4 <_kill_r>
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d00a      	beq.n	800e9be <_raise_r+0x4c>
 800e9a8:	1c59      	adds	r1, r3, #1
 800e9aa:	d103      	bne.n	800e9b4 <_raise_r+0x42>
 800e9ac:	2316      	movs	r3, #22
 800e9ae:	6003      	str	r3, [r0, #0]
 800e9b0:	2001      	movs	r0, #1
 800e9b2:	e7e7      	b.n	800e984 <_raise_r+0x12>
 800e9b4:	2400      	movs	r4, #0
 800e9b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	4798      	blx	r3
 800e9be:	2000      	movs	r0, #0
 800e9c0:	e7e0      	b.n	800e984 <_raise_r+0x12>
	...

0800e9c4 <raise>:
 800e9c4:	4b02      	ldr	r3, [pc, #8]	; (800e9d0 <raise+0xc>)
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	6818      	ldr	r0, [r3, #0]
 800e9ca:	f7ff bfd2 	b.w	800e972 <_raise_r>
 800e9ce:	bf00      	nop
 800e9d0:	20000024 	.word	0x20000024

0800e9d4 <_kill_r>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	4d07      	ldr	r5, [pc, #28]	; (800e9f4 <_kill_r+0x20>)
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4604      	mov	r4, r0
 800e9dc:	4608      	mov	r0, r1
 800e9de:	4611      	mov	r1, r2
 800e9e0:	602b      	str	r3, [r5, #0]
 800e9e2:	f7f6 fa33 	bl	8004e4c <_kill>
 800e9e6:	1c43      	adds	r3, r0, #1
 800e9e8:	d102      	bne.n	800e9f0 <_kill_r+0x1c>
 800e9ea:	682b      	ldr	r3, [r5, #0]
 800e9ec:	b103      	cbz	r3, 800e9f0 <_kill_r+0x1c>
 800e9ee:	6023      	str	r3, [r4, #0]
 800e9f0:	bd38      	pop	{r3, r4, r5, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20001764 	.word	0x20001764

0800e9f8 <_getpid_r>:
 800e9f8:	f7f6 ba20 	b.w	8004e3c <_getpid>

0800e9fc <_init>:
 800e9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fe:	bf00      	nop
 800ea00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea02:	bc08      	pop	{r3}
 800ea04:	469e      	mov	lr, r3
 800ea06:	4770      	bx	lr

0800ea08 <_fini>:
 800ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0a:	bf00      	nop
 800ea0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea0e:	bc08      	pop	{r3}
 800ea10:	469e      	mov	lr, r3
 800ea12:	4770      	bx	lr
