
Test_Wifi_07_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e854  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000105c  0800e998  0800e998  0001e998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f9f4  0800f9f4  0001f9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f9fc  0800f9fc  0001f9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fa00  0800fa00  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000008  0800fa04  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001570  200001f8  0800fbf4  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001768  0800fbf4  00021768  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022ce9  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d06  00000000  00000000  00042f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022c8  00000000  00000000  00046c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002188  00000000  00000000  00048ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026465  00000000  00000000  0004b068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f532  00000000  00000000  000714cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f6a21  00000000  00000000  000909ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00187420  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ab98  00000000  00000000  00187470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e97c 	.word	0x0800e97c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	0800e97c 	.word	0x0800e97c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9aa 	b.w	8000f04 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83c 	bl	8000c34 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff5b 	bl	8000a8c <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fcd1 	bl	80005a8 <__aeabi_dmul>
 8000c06:	f7ff ffa7 	bl	8000b58 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc52 	bl	80004b4 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fcc8 	bl	80005a8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb0a 	bl	8000238 <__aeabi_dsub>
 8000c24:	f7ff ff98 	bl	8000b58 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9d08      	ldr	r5, [sp, #32]
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	468e      	mov	lr, r1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d14d      	bne.n	8000cde <__udivmoddi4+0xaa>
 8000c42:	428a      	cmp	r2, r1
 8000c44:	4694      	mov	ip, r2
 8000c46:	d969      	bls.n	8000d1c <__udivmoddi4+0xe8>
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	b152      	cbz	r2, 8000c64 <__udivmoddi4+0x30>
 8000c4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c52:	f1c2 0120 	rsb	r1, r2, #32
 8000c56:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c62:	4094      	lsls	r4, r2
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	0c21      	lsrs	r1, r4, #16
 8000c6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c6e:	fa1f f78c 	uxth.w	r7, ip
 8000c72:	fb08 e316 	mls	r3, r8, r6, lr
 8000c76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7a:	fb06 f107 	mul.w	r1, r6, r7
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x64>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 811f 	bcs.w	8000ecc <__udivmoddi4+0x298>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 811c 	bls.w	8000ecc <__udivmoddi4+0x298>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 f707 	mul.w	r7, r0, r7
 8000cac:	42a7      	cmp	r7, r4
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x92>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb8:	f080 810a 	bcs.w	8000ed0 <__udivmoddi4+0x29c>
 8000cbc:	42a7      	cmp	r7, r4
 8000cbe:	f240 8107 	bls.w	8000ed0 <__udivmoddi4+0x29c>
 8000cc2:	4464      	add	r4, ip
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	1be4      	subs	r4, r4, r7
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa4>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xc2>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80ef 	beq.w	8000ec6 <__udivmoddi4+0x292>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x160>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd4>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80f9 	bhi.w	8000efa <__udivmoddi4+0x2c6>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	469e      	mov	lr, r3
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa4>
 8000d16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xec>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 8092 	bne.w	8000e4e <__udivmoddi4+0x21a>
 8000d2a:	eba1 010c 	sub.w	r1, r1, ip
 8000d2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d32:	fa1f fe8c 	uxth.w	lr, ip
 8000d36:	2601      	movs	r6, #1
 8000d38:	0c20      	lsrs	r0, r4, #16
 8000d3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d46:	fb0e f003 	mul.w	r0, lr, r3
 8000d4a:	4288      	cmp	r0, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x12c>
 8000d4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x12a>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f200 80cb 	bhi.w	8000ef4 <__udivmoddi4+0x2c0>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d68:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d70:	fb0e fe00 	mul.w	lr, lr, r0
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x156>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x154>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f200 80bb 	bhi.w	8000efe <__udivmoddi4+0x2ca>
 8000d88:	4608      	mov	r0, r1
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x9a>
 8000d94:	f1c6 0720 	rsb	r7, r6, #32
 8000d98:	40b3      	lsls	r3, r6
 8000d9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da2:	fa20 f407 	lsr.w	r4, r0, r7
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	431c      	orrs	r4, r3
 8000dac:	40f9      	lsrs	r1, r7
 8000dae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db2:	fa00 f306 	lsl.w	r3, r0, r6
 8000db6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dba:	0c20      	lsrs	r0, r4, #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b8>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ddc:	f080 8088 	bcs.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de0:	4288      	cmp	r0, r1
 8000de2:	f240 8085 	bls.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1a09      	subs	r1, r1, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df4:	fb09 1110 	mls	r1, r9, r0, r1
 8000df8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e00:	458e      	cmp	lr, r1
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1e2>
 8000e04:	eb1c 0101 	adds.w	r1, ip, r1
 8000e08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e0c:	d26c      	bcs.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e0e:	458e      	cmp	lr, r1
 8000e10:	d96a      	bls.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4461      	add	r1, ip
 8000e16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e1e:	eba1 010e 	sub.w	r1, r1, lr
 8000e22:	42a1      	cmp	r1, r4
 8000e24:	46c8      	mov	r8, r9
 8000e26:	46a6      	mov	lr, r4
 8000e28:	d356      	bcc.n	8000ed8 <__udivmoddi4+0x2a4>
 8000e2a:	d053      	beq.n	8000ed4 <__udivmoddi4+0x2a0>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x212>
 8000e2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e32:	eb61 010e 	sbc.w	r1, r1, lr
 8000e36:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e3e:	40f1      	lsrs	r1, r6
 8000e40:	431f      	orrs	r7, r3
 8000e42:	e9c5 7100 	strd	r7, r1, [r5]
 8000e46:	2600      	movs	r6, #0
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1c2 0320 	rsb	r3, r2, #32
 8000e52:	40d8      	lsrs	r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5c:	4091      	lsls	r1, r2
 8000e5e:	4301      	orrs	r1, r0
 8000e60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e70:	0c0b      	lsrs	r3, r1, #16
 8000e72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e76:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7a:	429e      	cmp	r6, r3
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x260>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8a:	d22f      	bcs.n	8000eec <__udivmoddi4+0x2b8>
 8000e8c:	429e      	cmp	r6, r3
 8000e8e:	d92d      	bls.n	8000eec <__udivmoddi4+0x2b8>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1b9b      	subs	r3, r3, r6
 8000e96:	b289      	uxth	r1, r1
 8000e98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x28a>
 8000eac:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb4:	d216      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d914      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eba:	3e02      	subs	r6, #2
 8000ebc:	4461      	add	r1, ip
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec4:	e738      	b.n	8000d38 <__udivmoddi4+0x104>
 8000ec6:	462e      	mov	r6, r5
 8000ec8:	4628      	mov	r0, r5
 8000eca:	e705      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	e6e3      	b.n	8000c98 <__udivmoddi4+0x64>
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	e6f8      	b.n	8000cc6 <__udivmoddi4+0x92>
 8000ed4:	454b      	cmp	r3, r9
 8000ed6:	d2a9      	bcs.n	8000e2c <__udivmoddi4+0x1f8>
 8000ed8:	ebb9 0802 	subs.w	r8, r9, r2
 8000edc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	e7a3      	b.n	8000e2c <__udivmoddi4+0x1f8>
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	e7ea      	b.n	8000ebe <__udivmoddi4+0x28a>
 8000ee8:	4620      	mov	r0, r4
 8000eea:	e794      	b.n	8000e16 <__udivmoddi4+0x1e2>
 8000eec:	4640      	mov	r0, r8
 8000eee:	e7d1      	b.n	8000e94 <__udivmoddi4+0x260>
 8000ef0:	46d0      	mov	r8, sl
 8000ef2:	e77b      	b.n	8000dec <__udivmoddi4+0x1b8>
 8000ef4:	3b02      	subs	r3, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	e732      	b.n	8000d60 <__udivmoddi4+0x12c>
 8000efa:	4630      	mov	r0, r6
 8000efc:	e709      	b.n	8000d12 <__udivmoddi4+0xde>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e742      	b.n	8000d8a <__udivmoddi4+0x156>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f14:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f24:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f28:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00b      	beq.n	8000f48 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f30:	e000      	b.n	8000f34 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f32:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f3e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f66:	f023 0218 	bic.w	r2, r3, #24
 8000f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <init_done>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_done()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	e017      	b.n	8001024 <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4816      	ldr	r0, [pc, #88]	; (8001050 <init_done+0x68>)
 8000ff8:	f006 f860 	bl	80070bc <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000ffc:	20c8      	movs	r0, #200	; 0xc8
 8000ffe:	f004 f88b 	bl	8005118 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001002:	2101      	movs	r1, #1
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <init_done+0x68>)
 8001006:	f006 f859 	bl	80070bc <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800100a:	20c8      	movs	r0, #200	; 0xc8
 800100c:	f004 f884 	bl	8005118 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001010:	2102      	movs	r1, #2
 8001012:	480f      	ldr	r0, [pc, #60]	; (8001050 <init_done+0x68>)
 8001014:	f006 f852 	bl	80070bc <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001018:	20c8      	movs	r0, #200	; 0xc8
 800101a:	f004 f87d 	bl	8005118 <HAL_Delay>
	for(int i=0; i<3; i++)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	dde4      	ble.n	8000ff4 <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2120      	movs	r1, #32
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <init_done+0x68>)
 8001030:	f006 f82c 	bl	800708c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2101      	movs	r1, #1
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <init_done+0x68>)
 800103a:	f006 f827 	bl	800708c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <init_done+0x68>)
 8001044:	f006 f822 	bl	800708c <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	48000400 	.word	0x48000400

08001054 <acq_internal_temp>:

static HAL_StatusTypeDef acq_internal_temp(uint16_t *temperature)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001060:	217f      	movs	r1, #127	; 0x7f
 8001062:	481f      	ldr	r0, [pc, #124]	; (80010e0 <acq_internal_temp+0x8c>)
 8001064:	f005 f9e6 	bl	8006434 <HAL_ADCEx_Calibration_Start>
	if((ret = HAL_ADC_Start(&hadc1)) != HAL_OK)
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <acq_internal_temp+0x8c>)
 800106a:	f004 fbc7 	bl	80057fc <HAL_ADC_Start>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <acq_internal_temp+0x28>
		return ret;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	e02d      	b.n	80010d8 <acq_internal_temp+0x84>
	HAL_Delay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f004 f84b 	bl	8005118 <HAL_Delay>
	*temperature = __LL_ADC_CALC_TEMPERATURE(3300, HAL_ADC_GetValue(&hadc1), LL_ADC_RESOLUTION_12B);
 8001082:	4817      	ldr	r0, [pc, #92]	; (80010e0 <acq_internal_temp+0x8c>)
 8001084:	f004 fc41 	bl	800590a <HAL_ADC_GetValue>
 8001088:	4603      	mov	r3, r0
 800108a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <acq_internal_temp+0x90>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	099b      	lsrs	r3, r3, #6
 800109a:	461a      	mov	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <acq_internal_temp+0x94>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2264      	movs	r2, #100	; 0x64
 80010a4:	fb03 f202 	mul.w	r2, r3, r2
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <acq_internal_temp+0x98>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <acq_internal_temp+0x94>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	1acb      	subs	r3, r1, r3
 80010b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	331e      	adds	r3, #30
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	801a      	strh	r2, [r3, #0]
	if((ret = HAL_ADC_Stop(&hadc1)) != HAL_OK)
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <acq_internal_temp+0x8c>)
 80010c4:	f004 fbee 	bl	80058a4 <HAL_ADC_Stop>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <acq_internal_temp+0x82>
		return ret;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	e000      	b.n	80010d8 <acq_internal_temp+0x84>
	return ret;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000214 	.word	0x20000214
 80010e4:	057619f1 	.word	0x057619f1
 80010e8:	1fff75a8 	.word	0x1fff75a8
 80010ec:	1fff75ca 	.word	0x1fff75ca

080010f0 <formate_json_button>:

static char* formate_json_button(int value)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 80010f8:	f003 fa54 	bl	80045a4 <json_value_init_object>
 80010fc:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <formate_json_button+0x18>
		return NULL;
 8001104:	2300      	movs	r3, #0
 8001106:	e020      	b.n	800114a <formate_json_button+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f003 f993 	bl	8004434 <json_value_get_object>
 800110e:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <formate_json_button+0x2a>
		return NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	e017      	b.n	800114a <formate_json_button+0x5a>

	if(json_object_set_number(obj, "id", value) != JSONSuccess)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f9da 	bl	80004d4 <__aeabi_i2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	490a      	ldr	r1, [pc, #40]	; (8001154 <formate_json_button+0x64>)
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f003 fc62 	bl	80049f4 <json_object_set_number>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <formate_json_button+0x4a>
		return NULL;
 8001136:	2300      	movs	r3, #0
 8001138:	e007      	b.n	800114a <formate_json_button+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f003 fb5e 	bl	80047fc <json_serialize_to_string>
 8001140:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f003 fa00 	bl	8004548 <json_value_free>

	return serialized_string;
 8001148:	68fb      	ldr	r3, [r7, #12]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	0800e998 	.word	0x0800e998

08001158 <formate_json_temp>:

static char* formate_json_temp(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 8001160:	f003 fa20 	bl	80045a4 <json_value_init_object>
 8001164:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <formate_json_temp+0x18>
		return NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	e020      	b.n	80011b2 <formate_json_temp+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f003 f95f 	bl	8004434 <json_value_get_object>
 8001176:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <formate_json_temp+0x2a>
		return NULL;
 800117e:	2300      	movs	r3, #0
 8001180:	e017      	b.n	80011b2 <formate_json_temp+0x5a>

	if(json_object_set_number(obj, "value", value) != JSONSuccess)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff f9a6 	bl	80004d4 <__aeabi_i2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	ec43 2b10 	vmov	d0, r2, r3
 8001190:	490a      	ldr	r1, [pc, #40]	; (80011bc <formate_json_temp+0x64>)
 8001192:	6938      	ldr	r0, [r7, #16]
 8001194:	f003 fc2e 	bl	80049f4 <json_object_set_number>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <formate_json_temp+0x4a>
		return NULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	e007      	b.n	80011b2 <formate_json_temp+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f003 fb2a 	bl	80047fc <json_serialize_to_string>
 80011a8:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f003 f9cc 	bl	8004548 <json_value_free>

	return serialized_string;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0800e99c 	.word	0x0800e99c

080011c0 <check_subscription>:

static int check_subscription()
{
 80011c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c4:	b091      	sub	sp, #68	; 0x44
 80011c6:	af00      	add	r7, sp, #0
	if (UART_ESP32_RecvEndFlag == 1) {
 80011c8:	4b91      	ldr	r3, [pc, #580]	; (8001410 <check_subscription+0x250>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	f040 8118 	bne.w	8001404 <check_subscription+0x244>
		char pattern[24];
		memset(pattern, 0, sizeof(pattern));
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2218      	movs	r2, #24
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a fc34 	bl	800ba48 <memset>
		//sprintf((char*) pattern, "+MQTTSUBRECV:0,\"isen%s/led\",", CARD_NUMBER);
		sprintf((char*) pattern, "+MQTTSUBRECV:0,\"%s/", MQTT_CLIENTID);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4a8c      	ldr	r2, [pc, #560]	; (8001414 <check_subscription+0x254>)
 80011e4:	498c      	ldr	r1, [pc, #560]	; (8001418 <check_subscription+0x258>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00a fdb4 	bl	800bd54 <siprintf>
		uint16_t data_size = 0, off = sizeof(pattern)-1; // \0 not needed
 80011ec:	2300      	movs	r3, #0
 80011ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80011f0:	2317      	movs	r3, #23
 80011f2:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (strstr((const char*) UART_ESP32_RxBUF, pattern) != NULL) {
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4888      	ldr	r0, [pc, #544]	; (800141c <check_subscription+0x25c>)
 80011fa:	f00a fe2f 	bl	800be5c <strstr>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80f9 	beq.w	80013f8 <check_subscription+0x238>
			printf("APP: Match succeed\r\n");
 8001206:	4886      	ldr	r0, [pc, #536]	; (8001420 <check_subscription+0x260>)
 8001208:	f00a fd8c 	bl	800bd24 <puts>
			int topic_id = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
			// nul mais ok
			if(UART_ESP32_RxBUF[off] == 'l')
 8001210:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001212:	4a82      	ldr	r2, [pc, #520]	; (800141c <check_subscription+0x25c>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	2b6c      	cmp	r3, #108	; 0x6c
 8001218:	d105      	bne.n	8001226 <check_subscription+0x66>
			{
				topic_id = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
				off+= 5;
 800121e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001220:	3305      	adds	r3, #5
 8001222:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001224:	e004      	b.n	8001230 <check_subscription+0x70>
			}
			else
			{
				topic_id = 2;
 8001226:	2302      	movs	r3, #2
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
				off+= 9;
 800122a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800122c:	3309      	adds	r3, #9
 800122e:	877b      	strh	r3, [r7, #58]	; 0x3a
			}

			if(topic_id == 1)
 8001230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001232:	2b01      	cmp	r3, #1
 8001234:	f040 80b9 	bne.w	80013aa <check_subscription+0x1ea>
			{
 8001238:	466b      	mov	r3, sp
 800123a:	461e      	mov	r6, r3
				data_size = atoi(&UART_ESP32_RxBUF[off]);
 800123c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800123e:	4a77      	ldr	r2, [pc, #476]	; (800141c <check_subscription+0x25c>)
 8001240:	4413      	add	r3, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f00a f97a 	bl	800b53c <atoi>
 8001248:	4603      	mov	r3, r0
 800124a:	873b      	strh	r3, [r7, #56]	; 0x38
				if(data_size < 10)
 800124c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800124e:	2b09      	cmp	r3, #9
 8001250:	d803      	bhi.n	800125a <check_subscription+0x9a>
					off+=2;
 8001252:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001254:	3302      	adds	r3, #2
 8001256:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001258:	e002      	b.n	8001260 <check_subscription+0xa0>
				else
					off+=3;
 800125a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800125c:	3303      	adds	r3, #3
 800125e:	877b      	strh	r3, [r7, #58]	; 0x3a
				uint8_t data[data_size];
 8001260:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001262:	460b      	mov	r3, r1
 8001264:	3b01      	subs	r3, #1
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
 8001268:	b28b      	uxth	r3, r1
 800126a:	2200      	movs	r2, #0
 800126c:	4698      	mov	r8, r3
 800126e:	4691      	mov	r9, r2
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800127c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001280:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001284:	b28b      	uxth	r3, r1
 8001286:	2200      	movs	r2, #0
 8001288:	461c      	mov	r4, r3
 800128a:	4615      	mov	r5, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	00eb      	lsls	r3, r5, #3
 8001296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800129a:	00e2      	lsls	r2, r4, #3
 800129c:	460b      	mov	r3, r1
 800129e:	3307      	adds	r3, #7
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	ebad 0d03 	sub.w	sp, sp, r3
 80012a8:	466b      	mov	r3, sp
 80012aa:	3300      	adds	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
				memcpy(data,&UART_ESP32_RxBUF[off],data_size);
 80012ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80012b0:	4a5a      	ldr	r2, [pc, #360]	; (800141c <check_subscription+0x25c>)
 80012b2:	4413      	add	r3, r2
 80012b4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80012b6:	4619      	mov	r1, r3
 80012b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012ba:	f00a fb9d 	bl	800b9f8 <memcpy>
				memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 80012be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c2:	2100      	movs	r1, #0
 80012c4:	4855      	ldr	r0, [pc, #340]	; (800141c <check_subscription+0x25c>)
 80012c6:	f00a fbbf 	bl	800ba48 <memset>

				UART_ESP32_RxLen = 0;
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <check_subscription+0x264>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
				UART_ESP32_RecvEndFlag = 0;
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <check_subscription+0x250>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 80012d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012da:	4950      	ldr	r1, [pc, #320]	; (800141c <check_subscription+0x25c>)
 80012dc:	4852      	ldr	r0, [pc, #328]	; (8001428 <check_subscription+0x268>)
 80012de:	f007 ffbd 	bl	800925c <HAL_UART_Receive_DMA>

				JSON_Value *val = json_parse_string(data);
 80012e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012e4:	f002 ffa8 	bl	8004238 <json_parse_string>
 80012e8:	62b8      	str	r0, [r7, #40]	; 0x28
				JSON_Object *obj = json_value_get_object(val);
 80012ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ec:	f003 f8a2 	bl	8004434 <json_value_get_object>
 80012f0:	6278      	str	r0, [r7, #36]	; 0x24
				int led_id = json_object_get_number (obj, "id");
 80012f2:	494e      	ldr	r1, [pc, #312]	; (800142c <check_subscription+0x26c>)
 80012f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f6:	f002 ffde 	bl	80042b6 <json_object_get_number>
 80012fa:	ec53 2b10 	vmov	r2, r3, d0
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fc01 	bl	8000b08 <__aeabi_d2iz>
 8001306:	4603      	mov	r3, r0
 8001308:	623b      	str	r3, [r7, #32]
				int led_state = json_object_get_number (obj, "state");
 800130a:	4949      	ldr	r1, [pc, #292]	; (8001430 <check_subscription+0x270>)
 800130c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800130e:	f002 ffd2 	bl	80042b6 <json_object_get_number>
 8001312:	ec53 2b10 	vmov	r2, r3, d0
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fbf5 	bl	8000b08 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	61fb      	str	r3, [r7, #28]
				json_value_free(val);
 8001322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001324:	f003 f910 	bl	8004548 <json_value_free>
				switch(led_id)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d027      	beq.n	800137e <check_subscription+0x1be>
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	2b03      	cmp	r3, #3
 8001332:	dc33      	bgt.n	800139c <check_subscription+0x1dc>
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d003      	beq.n	8001342 <check_subscription+0x182>
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d00f      	beq.n	8001360 <check_subscription+0x1a0>
 8001340:	e02c      	b.n	800139c <check_subscription+0x1dc>
				{
				case 1:
					if(led_state)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <check_subscription+0x194>
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2120      	movs	r1, #32
 800134c:	4839      	ldr	r0, [pc, #228]	; (8001434 <check_subscription+0x274>)
 800134e:	f005 fe9d 	bl	800708c <HAL_GPIO_WritePin>
					else
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
					break;
 8001352:	e028      	b.n	80013a6 <check_subscription+0x1e6>
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2120      	movs	r1, #32
 8001358:	4836      	ldr	r0, [pc, #216]	; (8001434 <check_subscription+0x274>)
 800135a:	f005 fe97 	bl	800708c <HAL_GPIO_WritePin>
					break;
 800135e:	e022      	b.n	80013a6 <check_subscription+0x1e6>
				case 2:
					if(led_state)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <check_subscription+0x1b2>
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	4832      	ldr	r0, [pc, #200]	; (8001434 <check_subscription+0x274>)
 800136c:	f005 fe8e 	bl	800708c <HAL_GPIO_WritePin>
					else
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
					break;
 8001370:	e019      	b.n	80013a6 <check_subscription+0x1e6>
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2101      	movs	r1, #1
 8001376:	482f      	ldr	r0, [pc, #188]	; (8001434 <check_subscription+0x274>)
 8001378:	f005 fe88 	bl	800708c <HAL_GPIO_WritePin>
					break;
 800137c:	e013      	b.n	80013a6 <check_subscription+0x1e6>
				case 3:
					if(led_state)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <check_subscription+0x1d0>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2102      	movs	r1, #2
 8001388:	482a      	ldr	r0, [pc, #168]	; (8001434 <check_subscription+0x274>)
 800138a:	f005 fe7f 	bl	800708c <HAL_GPIO_WritePin>
					else
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
					break;
 800138e:	e00a      	b.n	80013a6 <check_subscription+0x1e6>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2102      	movs	r1, #2
 8001394:	4827      	ldr	r0, [pc, #156]	; (8001434 <check_subscription+0x274>)
 8001396:	f005 fe79 	bl	800708c <HAL_GPIO_WritePin>
					break;
 800139a:	e004      	b.n	80013a6 <check_subscription+0x1e6>
				default:
					printf("Bad led_id %d\n",led_id);
 800139c:	6a39      	ldr	r1, [r7, #32]
 800139e:	4826      	ldr	r0, [pc, #152]	; (8001438 <check_subscription+0x278>)
 80013a0:	f00a fc3a 	bl	800bc18 <iprintf>
					break;
 80013a4:	bf00      	nop
 80013a6:	46b5      	mov	sp, r6
 80013a8:	e024      	b.n	80013f4 <check_subscription+0x234>
				}
			}
			else if(topic_id == 2)
 80013aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d11d      	bne.n	80013ec <check_subscription+0x22c>
			{
				// PUB ADC temperature
				uint16_t temp = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	807b      	strh	r3, [r7, #2]
				acq_internal_temp(&temp);
 80013b4:	1cbb      	adds	r3, r7, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe4c 	bl	8001054 <acq_internal_temp>
				char *data = formate_json_temp((int)temp);
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff feca 	bl	8001158 <formate_json_temp>
 80013c4:	6378      	str	r0, [r7, #52]	; 0x34
				if(esp8266_Publish_Temp_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TEMP_MQTT)
 80013c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013c8:	f7fe feda 	bl	8000180 <strlen>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4619      	mov	r1, r3
 80013d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013d4:	f00a f84a 	bl	800b46c <esp8266_Publish_Temp_BrokerMQTT>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b0b      	cmp	r3, #11
 80013dc:	d002      	beq.n	80013e4 <check_subscription+0x224>
					printf("APP: TEMP esp8266_Publish_BrokerMQTT() failed\n");
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <check_subscription+0x27c>)
 80013e0:	f00a fca0 	bl	800bd24 <puts>
				json_free_serialized_string(data);
 80013e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013e6:	f003 fa3b 	bl	8004860 <json_free_serialized_string>
 80013ea:	e003      	b.n	80013f4 <check_subscription+0x234>
			}
			else
				printf("topic_id unknown %d\n",topic_id);
 80013ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <check_subscription+0x280>)
 80013f0:	f00a fc12 	bl	800bc18 <iprintf>

			return 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e006      	b.n	8001406 <check_subscription+0x246>
		}
		else
		{
			printf("APP: Match failed\r\n");
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <check_subscription+0x284>)
 80013fa:	f00a fc93 	bl	800bd24 <puts>
			return -1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e000      	b.n	8001406 <check_subscription+0x246>
		}
	}
	else
	{
		return 1;
 8001404:	2301      	movs	r3, #1
	}
}
 8001406:	4618      	mov	r0, r3
 8001408:	3744      	adds	r7, #68	; 0x44
 800140a:	46bd      	mov	sp, r7
 800140c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001410:	20001755 	.word	0x20001755
 8001414:	0800e9a4 	.word	0x0800e9a4
 8001418:	0800e9ac 	.word	0x0800e9ac
 800141c:	20000f54 	.word	0x20000f54
 8001420:	0800e9c0 	.word	0x0800e9c0
 8001424:	20001754 	.word	0x20001754
 8001428:	20000278 	.word	0x20000278
 800142c:	0800e998 	.word	0x0800e998
 8001430:	0800e9d4 	.word	0x0800e9d4
 8001434:	48000400 	.word	0x48000400
 8001438:	0800e9dc 	.word	0x0800e9dc
 800143c:	0800e9ec 	.word	0x0800e9ec
 8001440:	0800ea1c 	.word	0x0800ea1c
 8001444:	0800ea34 	.word	0x0800ea34

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f003 fddd 	bl	800500c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001452:	f000 f8bd 	bl	80015d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001456:	f000 f931 	bl	80016bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145a:	f000 fad1 	bl	8001a00 <MX_GPIO_Init>
  MX_DMA_Init();
 800145e:	f000 fabd 	bl	80019dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001462:	f000 fa1d 	bl	80018a0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001466:	f000 fa91 	bl	800198c <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 800146a:	f000 f9bd 	bl	80017e8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800146e:	f000 f957 	bl	8001720 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001472:	f000 fa63 	bl	800193c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  if (esp8266_SetupIP() != _SUCCEED) {
 8001476:	f009 fbc9 	bl	800ac0c <esp8266_SetupIP>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d00a      	beq.n	8001496 <main+0x4e>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 8001480:	4847      	ldr	r0, [pc, #284]	; (80015a0 <main+0x158>)
 8001482:	f00a fc4f 	bl	800bd24 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001486:	2102      	movs	r1, #2
 8001488:	4846      	ldr	r0, [pc, #280]	; (80015a4 <main+0x15c>)
 800148a:	f005 fe17 	bl	80070bc <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800148e:	20c8      	movs	r0, #200	; 0xc8
 8001490:	f003 fe42 	bl	8005118 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001494:	e7f7      	b.n	8001486 <main+0x3e>
	  }
  }

  if(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 8001496:	f009 fe7b 	bl	800b190 <esp8266_SetupConnect_BrokerMQTT>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d00a      	beq.n	80014b6 <main+0x6e>
  {
	  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 80014a0:	4841      	ldr	r0, [pc, #260]	; (80015a8 <main+0x160>)
 80014a2:	f00a fc3f 	bl	800bd24 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014a6:	2102      	movs	r1, #2
 80014a8:	483e      	ldr	r0, [pc, #248]	; (80015a4 <main+0x15c>)
 80014aa:	f005 fe07 	bl	80070bc <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 80014ae:	20c8      	movs	r0, #200	; 0xc8
 80014b0:	f003 fe32 	bl	8005118 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014b4:	e7f7      	b.n	80014a6 <main+0x5e>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  init_done();
 80014b6:	f7ff fd97 	bl	8000fe8 <init_done>
	  //click button to start
	  printf("Waiting to start...\n");
 80014ba:	483c      	ldr	r0, [pc, #240]	; (80015ac <main+0x164>)
 80014bc:	f00a fc32 	bl	800bd24 <puts>
	  while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) != GPIO_PIN_RESET)
 80014c0:	e006      	b.n	80014d0 <main+0x88>
	  {
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80014c2:	2120      	movs	r1, #32
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <main+0x15c>)
 80014c6:	f005 fdf9 	bl	80070bc <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80014ca:	2064      	movs	r0, #100	; 0x64
 80014cc:	f003 fe24 	bl	8005118 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) != GPIO_PIN_RESET)
 80014d0:	2102      	movs	r1, #2
 80014d2:	4837      	ldr	r0, [pc, #220]	; (80015b0 <main+0x168>)
 80014d4:	f005 fdc2 	bl	800705c <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f1      	bne.n	80014c2 <main+0x7a>
	  }
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2120      	movs	r1, #32
 80014e2:	4830      	ldr	r0, [pc, #192]	; (80015a4 <main+0x15c>)
 80014e4:	f005 fdd2 	bl	800708c <HAL_GPIO_WritePin>

	  printf("App started...\n");
 80014e8:	4832      	ldr	r0, [pc, #200]	; (80015b4 <main+0x16c>)
 80014ea:	f00a fc1b 	bl	800bd24 <puts>

	  // app part
	  while(1)
	  {
		  if(get_mqtt_state() < _SUBSCRIBED_LED_MQTT)
 80014ee:	f00a f819 	bl	800b524 <get_mqtt_state>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	d807      	bhi.n	8001508 <main+0xc0>
		  {
			  if(esp8266_Subscribe_Led_BrokerMQTT() != _SUBSCRIBED_LED_MQTT)
 80014f8:	f009 feb4 	bl	800b264 <esp8266_Subscribe_Led_BrokerMQTT>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d002      	beq.n	8001508 <main+0xc0>
				printf("APP: esp8266_Subscribe_Led_BrokerMQTT() failed\n");
 8001502:	482d      	ldr	r0, [pc, #180]	; (80015b8 <main+0x170>)
 8001504:	f00a fc0e 	bl	800bd24 <puts>
		  }
		  if(get_mqtt_state() < _SUBSCRIBED_TEMP_MQTT)
 8001508:	f00a f80c 	bl	800b524 <get_mqtt_state>
 800150c:	4603      	mov	r3, r0
 800150e:	2b08      	cmp	r3, #8
 8001510:	d807      	bhi.n	8001522 <main+0xda>
		  {
			  if(esp8266_Subscribe_Temp_BrokerMQTT() != _SUBSCRIBED_TEMP_MQTT)
 8001512:	f009 fefb 	bl	800b30c <esp8266_Subscribe_Temp_BrokerMQTT>
 8001516:	4603      	mov	r3, r0
 8001518:	2b09      	cmp	r3, #9
 800151a:	d002      	beq.n	8001522 <main+0xda>
		  		printf("APP: esp8266_Subscribe_Temp_BrokerMQTT() failed\n");
 800151c:	4827      	ldr	r0, [pc, #156]	; (80015bc <main+0x174>)
 800151e:	f00a fc01 	bl	800bd24 <puts>
		  }

		  //
		  switch(button_pushed)
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <main+0x178>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <main+0xe8>
 800152a:	2b02      	cmp	r3, #2
 800152c:	d017      	beq.n	800155e <main+0x116>
 800152e:	e02a      	b.n	8001586 <main+0x13e>
		  {
		  case B1:
		  {
			  char *data = formate_json_button(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fddd 	bl	80010f0 <formate_json_button>
 8001536:	60b8      	str	r0, [r7, #8]
			  if(esp8266_Publish_Button_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_BUTTON_MQTT)
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7fe fe21 	bl	8000180 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29b      	uxth	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	68b8      	ldr	r0, [r7, #8]
 8001546:	f009 ff35 	bl	800b3b4 <esp8266_Publish_Button_BrokerMQTT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b0a      	cmp	r3, #10
 800154e:	d002      	beq.n	8001556 <main+0x10e>
				printf("APP: B1 esp8266_Publish_Button_BrokerMQTT() failed\n");
 8001550:	481c      	ldr	r0, [pc, #112]	; (80015c4 <main+0x17c>)
 8001552:	f00a fbe7 	bl	800bd24 <puts>
			  json_free_serialized_string(data);
 8001556:	68b8      	ldr	r0, [r7, #8]
 8001558:	f003 f982 	bl	8004860 <json_free_serialized_string>
		  }
			  break;
 800155c:	e013      	b.n	8001586 <main+0x13e>
		  case B2:
		  {
			  char *data = formate_json_button(2);
 800155e:	2002      	movs	r0, #2
 8001560:	f7ff fdc6 	bl	80010f0 <formate_json_button>
 8001564:	60f8      	str	r0, [r7, #12]
			  if(esp8266_Publish_Button_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_BUTTON_MQTT)
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7fe fe0a 	bl	8000180 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29b      	uxth	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f009 ff1e 	bl	800b3b4 <esp8266_Publish_Button_BrokerMQTT>
 8001578:	4603      	mov	r3, r0
 800157a:	2b0a      	cmp	r3, #10
 800157c:	d002      	beq.n	8001584 <main+0x13c>
				printf("APP: B2 esp8266_Publish_Button_BrokerMQTT() failed\n");
 800157e:	4812      	ldr	r0, [pc, #72]	; (80015c8 <main+0x180>)
 8001580:	f00a fbd0 	bl	800bd24 <puts>
		  }
			  break;
 8001584:	bf00      	nop
		  }
		  button_pushed = NONE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <main+0x178>)
 8001588:	2200      	movs	r2, #0
 800158a:	801a      	strh	r2, [r3, #0]

		  int sub_status = check_subscription();
 800158c:	f7ff fe18 	bl	80011c0 <check_subscription>
 8001590:	6078      	str	r0, [r7, #4]
		  if(sub_status == 0)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1aa      	bne.n	80014ee <main+0xa6>
			  printf("APP: check_subscription() SUB MQTT RCV\n");
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <main+0x184>)
 800159a:	f00a fbc3 	bl	800bd24 <puts>
	  {
 800159e:	e7a6      	b.n	80014ee <main+0xa6>
 80015a0:	0800ea48 	.word	0x0800ea48
 80015a4:	48000400 	.word	0x48000400
 80015a8:	0800ea84 	.word	0x0800ea84
 80015ac:	0800eac8 	.word	0x0800eac8
 80015b0:	48000c00 	.word	0x48000c00
 80015b4:	0800eadc 	.word	0x0800eadc
 80015b8:	0800eaec 	.word	0x0800eaec
 80015bc:	0800eb1c 	.word	0x0800eb1c
 80015c0:	20000740 	.word	0x20000740
 80015c4:	0800eb4c 	.word	0x0800eb4c
 80015c8:	0800eb80 	.word	0x0800eb80
 80015cc:	0800ebb4 	.word	0x0800ebb4

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09a      	sub	sp, #104	; 0x68
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2248      	movs	r2, #72	; 0x48
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f00a fa32 	bl	800ba48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001604:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f023 0303 	bic.w	r3, r3, #3
 8001610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800161a:	f005 fe85 	bl	8007328 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fc99 	bl	8000f56 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <SystemClock_Config+0xe8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <SystemClock_Config+0xe8>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <SystemClock_Config+0xe8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001640:	2327      	movs	r3, #39	; 0x27
 8001642:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001658:	2340      	movs	r3, #64	; 0x40
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800165c:	2300      	movs	r3, #0
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001660:	2360      	movs	r3, #96	; 0x60
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001664:	2300      	movs	r3, #0
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	4618      	mov	r0, r3
 800166e:	f006 f9ef 	bl	8007a50 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001678:	f000 fa80 	bl	8001b7c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800167c:	236f      	movs	r3, #111	; 0x6f
 800167e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001680:	2302      	movs	r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2101      	movs	r1, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f006 fd4b 	bl	8008138 <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80016a8:	f000 fa68 	bl	8001b7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016ac:	f007 fb06 	bl	8008cbc <HAL_RCCEx_EnableMSIPLLMode>
}
 80016b0:	bf00      	nop
 80016b2:	3768      	adds	r7, #104	; 0x68
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58000400 	.word	0x58000400

080016bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2250      	movs	r2, #80	; 0x50
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a f9bd 	bl	800ba48 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80016ce:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 80016d2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80016d4:	2318      	movs	r3, #24
 80016d6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80016d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80016de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80016e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80016ea:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80016ee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016fc:	2300      	movs	r3, #0
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001700:	2300      	movs	r3, #0
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4618      	mov	r0, r3
 8001708:	f007 f962 	bl	80089d0 <HAL_RCCEx_PeriphCLKConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001712:	f000 fa33 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001716:	bf00      	nop
 8001718:	3750      	adds	r7, #80	; 0x50
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001738:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <MX_ADC1_Init+0xc0>)
 800173a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <MX_ADC1_Init+0xbc>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <MX_ADC1_Init+0xbc>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001756:	2204      	movs	r2, #4
 8001758:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_ADC1_Init+0xbc>)
 800175c:	2200      	movs	r2, #0
 800175e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001762:	2200      	movs	r2, #0
 8001764:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001768:	2201      	movs	r2, #1
 800176a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_ADC1_Init+0xbc>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_ADC1_Init+0xbc>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_ADC1_Init+0xbc>)
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_ADC1_Init+0xbc>)
 8001798:	f003 fee4 	bl	8005564 <HAL_ADC_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80017a2:	f000 f9eb 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_ADC1_Init+0xc4>)
 80017a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017aa:	2306      	movs	r3, #6
 80017ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017ae:	2307      	movs	r3, #7
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017b2:	237f      	movs	r3, #127	; 0x7f
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017b6:	2304      	movs	r3, #4
 80017b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_ADC1_Init+0xbc>)
 80017c4:	f004 f8ae 	bl	8005924 <HAL_ADC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017ce:	f000 f9d5 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000214 	.word	0x20000214
 80017e0:	50040000 	.word	0x50040000
 80017e4:	c7520000 	.word	0xc7520000

080017e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 80017ee:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <MX_LPUART1_UART_Init+0xb0>)
 80017f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 80017f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 800182c:	2200      	movs	r2, #0
 800182e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001830:	4818      	ldr	r0, [pc, #96]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001832:	f007 fc35 	bl	80090a0 <HAL_UART_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800183c:	f000 f99e 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4814      	ldr	r0, [pc, #80]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001844:	f008 ff5a 	bl	800a6fc <HAL_UARTEx_SetTxFifoThreshold>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800184e:	f000 f995 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	480f      	ldr	r0, [pc, #60]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001856:	f008 ff8f 	bl	800a778 <HAL_UARTEx_SetRxFifoThreshold>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001860:	f000 f98c 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001866:	f008 ff10 	bl	800a68a <HAL_UARTEx_DisableFifoMode>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001870:	f000 f984 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0210 	orr.w	r2, r2, #16
 8001882:	601a      	str	r2, [r3, #0]
  	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8001884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <MX_LPUART1_UART_Init+0xb4>)
 800188a:	4802      	ldr	r0, [pc, #8]	; (8001894 <MX_LPUART1_UART_Init+0xac>)
 800188c:	f007 fce6 	bl	800925c <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000278 	.word	0x20000278
 8001898:	40008000 	.word	0x40008000
 800189c:	20000f54 	.word	0x20000f54

080018a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018a6:	4a24      	ldr	r2, [pc, #144]	; (8001938 <MX_USART1_UART_Init+0x98>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018c8:	220c      	movs	r2, #12
 80018ca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ea:	4812      	ldr	r0, [pc, #72]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018ec:	f007 fbd8 	bl	80090a0 <HAL_UART_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80018f6:	f000 f941 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fa:	2100      	movs	r1, #0
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_USART1_UART_Init+0x94>)
 80018fe:	f008 fefd 	bl	800a6fc <HAL_UARTEx_SetTxFifoThreshold>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001908:	f000 f938 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190c:	2100      	movs	r1, #0
 800190e:	4809      	ldr	r0, [pc, #36]	; (8001934 <MX_USART1_UART_Init+0x94>)
 8001910:	f008 ff32 	bl	800a778 <HAL_UARTEx_SetRxFifoThreshold>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800191a:	f000 f92f 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_USART1_UART_Init+0x94>)
 8001920:	f008 feb3 	bl	800a68a <HAL_UARTEx_DisableFifoMode>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800192a:	f000 f927 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000030c 	.word	0x2000030c
 8001938:	40013800 	.word	0x40013800

0800193c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_TIM17_Init+0x48>)
 8001942:	4a11      	ldr	r2, [pc, #68]	; (8001988 <MX_TIM17_Init+0x4c>)
 8001944:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_TIM17_Init+0x48>)
 8001948:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800194c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <MX_TIM17_Init+0x48>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 30000;
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_TIM17_Init+0x48>)
 8001956:	f247 5230 	movw	r2, #30000	; 0x7530
 800195a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_TIM17_Init+0x48>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_TIM17_Init+0x48>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_TIM17_Init+0x48>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_TIM17_Init+0x48>)
 8001970:	f007 fabb 	bl	8008eea <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800197a:	f000 f8ff 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000400 	.word	0x20000400
 8001988:	40014800 	.word	0x40014800

0800198c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <MX_USB_PCD_Init+0x4c>)
 8001994:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 8001998:	2208      	movs	r2, #8
 800199a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 800199e:	2202      	movs	r2, #2
 80019a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_USB_PCD_Init+0x48>)
 80019c2:	f005 fbad 	bl	8007120 <HAL_PCD_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80019cc:	f000 f8d6 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000044c 	.word	0x2000044c
 80019d8:	40006800 	.word	0x40006800

080019dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff face 	bl	8000f82 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff facb 	bl	8000f82 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	200b      	movs	r0, #11
 80019f2:	f004 fe5c 	bl	80066ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f6:	200b      	movs	r0, #11
 80019f8:	f004 fe73 	bl	80066e2 <HAL_NVIC_EnableIRQ>

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a14:	2004      	movs	r0, #4
 8001a16:	f7ff facd 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff faca 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7ff fac7 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2008      	movs	r0, #8
 8001a28:	f7ff fac4 	bl	8000fb4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2108      	movs	r1, #8
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f005 fb2a 	bl	800708c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2123      	movs	r1, #35	; 0x23
 8001a3c:	482a      	ldr	r0, [pc, #168]	; (8001ae8 <MX_GPIO_Init+0xe8>)
 8001a3e:	f005 fb25 	bl	800708c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP32_RST_Pin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8001a42:	2308      	movs	r3, #8
 8001a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f005 f98f 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481e      	ldr	r0, [pc, #120]	; (8001aec <MX_GPIO_Init+0xec>)
 8001a72:	f005 f983 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001a76:	2323      	movs	r3, #35	; 0x23
 8001a78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <MX_GPIO_Init+0xe8>)
 8001a8c:	f005 f976 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001a90:	2301      	movs	r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_GPIO_Init+0xf0>)
 8001aa4:	f005 f96a 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <MX_GPIO_Init+0xf0>)
 8001aba:	f005 f95f 	bl	8006d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2006      	movs	r0, #6
 8001ac4:	f004 fdf3 	bl	80066ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ac8:	2006      	movs	r0, #6
 8001aca:	f004 fe0a 	bl	80066e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	200a      	movs	r0, #10
 8001ad4:	f004 fdeb 	bl	80066ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ad8:	200a      	movs	r0, #10
 8001ada:	f004 fe02 	bl	80066e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	48000800 	.word	0x48000800
 8001af0:	48000c00 	.word	0x48000c00

08001af4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	printf("CALLBACK LPUART\n");
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <HAL_UART_RxCpltCallback+0x18>)
 8001afe:	f00a f911 	bl	800bd24 <puts>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	0800ebdc 	.word	0x0800ebdc

08001b10 <_write>:

int _write(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e009      	b.n	8001b36 <_write+0x26>
	{
	//__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	60ba      	str	r2, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f9ec 	bl	8000f08 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf1      	blt.n	8001b22 <_write+0x12>
	}
	return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_GPIO_EXTI_Callback+0x1c>
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d107      	bne.n	8001b6c <HAL_GPIO_EXTI_Callback+0x24>
	{
	case B1_Pin:
		button_pushed = B1;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	801a      	strh	r2, [r3, #0]
		break;
 8001b62:	e003      	b.n	8001b6c <HAL_GPIO_EXTI_Callback+0x24>
	case B2_Pin:
		button_pushed = B2;
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	801a      	strh	r2, [r3, #0]
		break;
 8001b6a:	bf00      	nop
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	20000740 	.word	0x20000740

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <serialize_int>:

static char *parson_float_format = NULL;

// +BCH
int serialize_int(double num, char *buf)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b92:	6078      	str	r0, [r7, #4]
	if(buf == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <serialize_int+0x18>
		return -1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e00a      	b.n	8001bb6 <serialize_int+0x2e>

	return sprintf(buf,"%d",(int)num);
 8001ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ba4:	f7fe ffb0 	bl	8000b08 <__aeabi_d2iz>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <serialize_int+0x38>)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f00a f8d0 	bl	800bd54 <siprintf>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	0800ebec 	.word	0x0800ebec

08001bc4 <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <parson_strndup+0x40>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	3201      	adds	r2, #1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4798      	blx	r3
 8001bda:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <parson_strndup+0x22>
        return NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e00a      	b.n	8001bfc <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f009 feff 	bl	800b9f8 <memcpy>
    return output_string;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000008 	.word	0x20000008

08001c08 <parson_strdup>:

static char * parson_strdup(const char *string) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7fe fab5 	bl	8000180 <strlen>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffd2 	bl	8001bc4 <parson_strndup>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <hex_char_to_int>:

static int hex_char_to_int(char c) {
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2b2f      	cmp	r3, #47	; 0x2f
 8001c38:	d905      	bls.n	8001c46 <hex_char_to_int+0x1c>
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b39      	cmp	r3, #57	; 0x39
 8001c3e:	d802      	bhi.n	8001c46 <hex_char_to_int+0x1c>
        return c - '0';
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	3b30      	subs	r3, #48	; 0x30
 8001c44:	e013      	b.n	8001c6e <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b60      	cmp	r3, #96	; 0x60
 8001c4a:	d905      	bls.n	8001c58 <hex_char_to_int+0x2e>
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	2b66      	cmp	r3, #102	; 0x66
 8001c50:	d802      	bhi.n	8001c58 <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	3b57      	subs	r3, #87	; 0x57
 8001c56:	e00a      	b.n	8001c6e <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	d905      	bls.n	8001c6a <hex_char_to_int+0x40>
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b46      	cmp	r3, #70	; 0x46
 8001c62:	d802      	bhi.n	8001c6a <hex_char_to_int+0x40>
        return c - 'A' + 10;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	3b37      	subs	r3, #55	; 0x37
 8001c68:	e001      	b.n	8001c6e <hex_char_to_int+0x44>
    }
    return -1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <parse_utf16_hex>:

static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00e      	beq.n	8001caa <parse_utf16_hex+0x30>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <parse_utf16_hex+0x30>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <parse_utf16_hex+0x30>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3303      	adds	r3, #3
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <parse_utf16_hex+0x36>
        return JSONFailure;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e03b      	b.n	8001d28 <parse_utf16_hex+0xae>
    }
    x1 = hex_char_to_int(s[0]);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffb8 	bl	8001c2a <hex_char_to_int>
 8001cba:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffb1 	bl	8001c2a <hex_char_to_int>
 8001cc8:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3302      	adds	r3, #2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ffaa 	bl	8001c2a <hex_char_to_int>
 8001cd6:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3303      	adds	r3, #3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ffa3 	bl	8001c2a <hex_char_to_int>
 8001ce4:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d00b      	beq.n	8001d06 <parse_utf16_hex+0x8c>
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d007      	beq.n	8001d06 <parse_utf16_hex+0x8c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d003      	beq.n	8001d06 <parse_utf16_hex+0x8c>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d102      	bne.n	8001d0c <parse_utf16_hex+0x92>
        return JSONFailure;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e00d      	b.n	8001d28 <parse_utf16_hex+0xae>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	031a      	lsls	r2, r3, #12
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <is_decimal>:
        string += len;
    }
    return PARSON_TRUE;
}

static parson_bool_t is_decimal(const char *string, size_t length) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d90a      	bls.n	8001d56 <is_decimal+0x26>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b30      	cmp	r3, #48	; 0x30
 8001d46:	d106      	bne.n	8001d56 <is_decimal+0x26>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d50:	d001      	beq.n	8001d56 <is_decimal+0x26>
        return PARSON_FALSE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e024      	b.n	8001da0 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d91b      	bls.n	8001d94 <is_decimal+0x64>
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4912      	ldr	r1, [pc, #72]	; (8001da8 <is_decimal+0x78>)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f00a f867 	bl	800be34 <strncmp>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d113      	bne.n	8001d94 <is_decimal+0x64>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b2e      	cmp	r3, #46	; 0x2e
 8001d74:	d00e      	beq.n	8001d94 <is_decimal+0x64>
        return PARSON_FALSE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e012      	b.n	8001da0 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <is_decimal+0x7c>)
 8001d86:	f00a f848 	bl	800be1a <strchr>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <is_decimal+0x64>
            return PARSON_FALSE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e005      	b.n	8001da0 <is_decimal+0x70>
    while (length--) {
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	1e5a      	subs	r2, r3, #1
 8001d98:	603a      	str	r2, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ed      	bne.n	8001d7a <is_decimal+0x4a>
        }
    }
    return PARSON_TRUE;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	0800ebf4 	.word	0x0800ebf4
 8001dac:	0800ebf8 	.word	0x0800ebf8

08001db0 <hash_string>:

static unsigned long hash_string(const char *string, size_t n) {
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 8001dba:	f241 5305 	movw	r3, #5381	; 0x1505
 8001dbe:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e011      	b.n	8001dee <hash_string+0x3e>
        c = string[i];
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00e      	beq.n	8001df8 <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	441a      	add	r2, r3
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	3301      	adds	r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3e9      	bcc.n	8001dca <hash_string+0x1a>
 8001df6:	e000      	b.n	8001dfa <hash_string+0x4a>
            break;
 8001df8:	bf00      	nop
    }
    return hash;
 8001dfa:	697b      	ldr	r3, [r7, #20]
#endif
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <json_object_make+0x50>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2024      	movs	r0, #36	; 0x24
 8001e1c:	4798      	blx	r3
 8001e1e:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <json_object_make+0x22>
        return NULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e011      	b.n	8001e4e <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8001e30:	2100      	movs	r1, #0
 8001e32:	68b8      	ldr	r0, [r7, #8]
 8001e34:	f000 f814 	bl	8001e60 <json_object_init>
 8001e38:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <json_object_make+0x44>
        parson_free(new_obj);
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <json_object_make+0x54>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	4798      	blx	r3
        return NULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <json_object_make+0x46>
    }
    return new_obj;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	2000000c 	.word	0x2000000c

08001e60 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001fc0 <json_object_init+0x160>
 8001ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eae:	ee17 2a90 	vmov	r2, s15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <json_object_init+0x60>
        return JSONSuccess;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e07b      	b.n	8001fb8 <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <json_object_init+0x164>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6a12      	ldr	r2, [r2, #32]
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4798      	blx	r3
 8001ece:	4602      	mov	r2, r0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <json_object_init+0x164>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	69d2      	ldr	r2, [r2, #28]
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4798      	blx	r3
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <json_object_init+0x164>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	69d2      	ldr	r2, [r2, #28]
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4798      	blx	r3
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <json_object_init+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	69d2      	ldr	r2, [r2, #28]
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4610      	mov	r0, r2
 8001f08:	4798      	blx	r3
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 8001f10:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <json_object_init+0x164>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	69d2      	ldr	r2, [r2, #28]
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4798      	blx	r3
 8001f1e:	4602      	mov	r2, r0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d024      	beq.n	8001f76 <json_object_init+0x116>
        || object->names == NULL
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <json_object_init+0x116>
        || object->values == NULL
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01c      	beq.n	8001f76 <json_object_init+0x116>
        || object->cell_ixs == NULL
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d018      	beq.n	8001f76 <json_object_init+0x116>
        || object->hashes == NULL) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d014      	beq.n	8001f76 <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e00a      	b.n	8001f68 <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3ef      	bcc.n	8001f52 <json_object_init+0xf2>
    }
    return JSONSuccess;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e020      	b.n	8001fb8 <json_object_init+0x158>
        goto error;
 8001f76:	bf00      	nop
error:
    parson_free(object->cells);
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <json_object_init+0x168>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6852      	ldr	r2, [r2, #4]
 8001f80:	4610      	mov	r0, r2
 8001f82:	4798      	blx	r3
    parson_free(object->names);
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <json_object_init+0x168>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68d2      	ldr	r2, [r2, #12]
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4798      	blx	r3
    parson_free(object->values);
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <json_object_init+0x168>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6912      	ldr	r2, [r2, #16]
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <json_object_init+0x168>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6952      	ldr	r2, [r2, #20]
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4798      	blx	r3
    parson_free(object->hashes);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <json_object_init+0x168>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6892      	ldr	r2, [r2, #8]
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4798      	blx	r3
    return JSONFailure;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	3f333333 	.word	0x3f333333
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	2000000c 	.word	0x2000000c

08001fcc <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e01b      	b.n	800201a <json_object_deinit+0x4e>
        if (free_keys) {
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <json_object_deinit+0x30>
            parson_free(object->names[i]);
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <json_object_deinit+0xcc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	68d1      	ldr	r1, [r2, #12]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	440a      	add	r2, r1
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4798      	blx	r3
        }
        if (free_values) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fa9a 	bl	8004548 <json_value_free>
    for (i = 0; i < object->count; i++) {
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3de      	bcc.n	8001fe2 <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <json_object_deinit+0xcc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6852      	ldr	r2, [r2, #4]
 800203e:	4610      	mov	r0, r2
 8002040:	4798      	blx	r3
    parson_free(object->names);
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <json_object_deinit+0xcc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	68d2      	ldr	r2, [r2, #12]
 800204a:	4610      	mov	r0, r2
 800204c:	4798      	blx	r3
    parson_free(object->values);
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <json_object_deinit+0xcc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6912      	ldr	r2, [r2, #16]
 8002056:	4610      	mov	r0, r2
 8002058:	4798      	blx	r3
    parson_free(object->cell_ixs);
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <json_object_deinit+0xcc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6952      	ldr	r2, [r2, #20]
 8002062:	4610      	mov	r0, r2
 8002064:	4798      	blx	r3
    parson_free(object->hashes);
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <json_object_deinit+0xcc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6892      	ldr	r2, [r2, #8]
 800206e:	4610      	mov	r0, r2
 8002070:	4798      	blx	r3

    object->cells = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
}
 8002090:	bf00      	nop
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000000c 	.word	0x2000000c

0800209c <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	b092      	sub	sp, #72	; 0x48
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	bf38      	it	cc
 80020be:	2310      	movcc	r3, #16
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fec9 	bl	8001e60 <json_object_init>
 80020ce:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e046      	b.n	800216a <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f002 f949 	bl	8004374 <json_object_get_wrapping_value>
 80020e2:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 80020e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e6:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
 80020ec:	e028      	b.n	8002140 <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f897 	bl	8002246 <json_object_add>
 8002118:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	2b00      	cmp	r3, #0
 800211e:	d009      	beq.n	8002134 <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff4f 	bl	8001fcc <json_object_deinit>
            return JSONFailure;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e01a      	b.n	800216a <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002138:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 800213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213c:	3301      	adds	r3, #1
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002146:	429a      	cmp	r2, r3
 8002148:	d3d1      	bcc.n	80020ee <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ff3c 	bl	8001fcc <json_object_deinit>
    *object = new_object;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	461d      	mov	r5, r3
 8002158:	f107 040c 	add.w	r4, r7, #12
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3748      	adds	r7, #72	; 0x48
 800216e:	46bd      	mov	sp, r7
 8002170:	bdb0      	pop	{r4, r5, r7, pc}

08002172 <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 8002172:	b580      	push	{r7, lr}
 8002174:	b08c      	sub	sp, #48	; 0x30
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	3b01      	subs	r3, #1
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	4013      	ands	r3, r2
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ae:	e03f      	b.n	8002230 <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 80021b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	441a      	add	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d101      	bne.n	80021da <json_object_get_cell_ix+0x68>
            return ix;
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	e031      	b.n	800223e <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d11b      	bne.n	8002228 <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 80021fe:	69b8      	ldr	r0, [r7, #24]
 8002200:	f7fd ffbe 	bl	8000180 <strlen>
 8002204:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d10d      	bne.n	800222a <json_object_get_cell_ix+0xb8>
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	69b9      	ldr	r1, [r7, #24]
 8002212:	68b8      	ldr	r0, [r7, #8]
 8002214:	f009 fe0e 	bl	800be34 <strncmp>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
            return ix;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	e00a      	b.n	800223e <json_object_get_cell_ix+0xcc>
            continue;
 8002228:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	3301      	adds	r3, #1
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002236:	429a      	cmp	r2, r3
 8002238:	d3ba      	bcc.n	80021b0 <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223e:	4618      	mov	r0, r3
 8002240:	3730      	adds	r7, #48	; 0x30
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 8002246:	b580      	push	{r7, lr}
 8002248:	b08a      	sub	sp, #40	; 0x28
 800224a:	af02      	add	r7, sp, #8
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <json_object_add+0x30>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <json_object_add+0x30>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <json_object_add+0x36>
        return JSONFailure;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e06e      	b.n	800235a <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 800227c:	68b8      	ldr	r0, [r7, #8]
 800227e:	f7fd ff7f 	bl	8000180 <strlen>
 8002282:	4603      	mov	r3, r0
 8002284:	4619      	mov	r1, r3
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	f7ff fd92 	bl	8001db0 <hash_string>
 800228c:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f7fd ff74 	bl	8000180 <strlen>
 8002298:	4602      	mov	r2, r0
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff ff64 	bl	8002172 <json_object_get_cell_ix>
 80022aa:	61f8      	str	r0, [r7, #28]
    if (found) {
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <json_object_add+0x72>
        return JSONFailure;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e050      	b.n	800235a <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d316      	bcc.n	80022f2 <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fee9 	bl	800209c <json_object_grow_and_rehash>
 80022ca:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <json_object_add+0x92>
            return JSONFailure;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e040      	b.n	800235a <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80022d8:	68b8      	ldr	r0, [r7, #8]
 80022da:	f7fd ff51 	bl	8000180 <strlen>
 80022de:	4602      	mov	r2, r0
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff ff41 	bl	8002172 <json_object_get_cell_ix>
 80022f0:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	6992      	ldr	r2, [r2, #24]
 8002310:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	601a      	str	r2, [r3, #0]
    object->count++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f002 f811 	bl	8004374 <json_object_get_wrapping_value>
 8002352:	4602      	mov	r2, r0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 8002362:	b580      	push	{r7, lr}
 8002364:	b08a      	sub	sp, #40	; 0x28
 8002366:	af02      	add	r7, sp, #8
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    parson_bool_t found = PARSON_FALSE;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
    size_t item_ix = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
    if (!object || !name) {
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <json_object_getn_value+0x28>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <json_object_getn_value+0x2c>
        return NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	e022      	b.n	80023d4 <json_object_getn_value+0x72>
    }
    hash = hash_string(name, name_len);
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	68b8      	ldr	r0, [r7, #8]
 8002392:	f7ff fd0d 	bl	8001db0 <hash_string>
 8002396:	61f8      	str	r0, [r7, #28]
    found = PARSON_FALSE;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, name_len, hash, &found);
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fee2 	bl	8002172 <json_object_get_cell_ix>
 80023ae:	61b8      	str	r0, [r7, #24]
    if (!found) {
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <json_object_getn_value+0x58>
        return NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e00c      	b.n	80023d4 <json_object_getn_value+0x72>
    }
    item_ix = object->cells[cell_ix];
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
    return object->values[item_ix];
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2101      	movs	r1, #1
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fdef 	bl	8001fcc <json_object_deinit>
    parson_free(object);
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <json_object_free+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000000c 	.word	0x2000000c

08002404 <json_array_make>:

/* JSON Array */
static JSON_Array * json_array_make(JSON_Value *wrapping_value) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <json_array_make+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2010      	movs	r0, #16
 8002412:	4798      	blx	r3
 8002414:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <json_array_make+0x1c>
        return NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	e00c      	b.n	800243a <json_array_make+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
    return new_array;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000008 	.word	0x20000008

08002448 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	429a      	cmp	r2, r3
 800245c:	d310      	bcc.n	8002480 <json_array_add+0x38>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2b10      	cmp	r3, #16
 8002466:	bf38      	it	cc
 8002468:	2310      	movcc	r3, #16
 800246a:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) != JSONSuccess) {
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f81e 	bl	80024b0 <json_array_resize>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <json_array_add+0x38>
            return JSONFailure;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	e013      	b.n	80024a8 <json_array_add+0x60>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f001 ffb4 	bl	80043ee <json_array_get_wrapping_value>
 8002486:	4602      	mov	r2, r0
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	601a      	str	r2, [r3, #0]
    array->count++;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <json_array_resize+0x1a>
        return JSONFailure;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	e02a      	b.n	8002520 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <json_array_resize+0x78>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	4610      	mov	r0, r2
 80024d4:	4798      	blx	r3
 80024d6:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <json_array_resize+0x34>
        return JSONFailure;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e01d      	b.n	8002520 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <json_array_resize+0x56>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	461a      	mov	r2, r3
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f009 fa79 	bl	800b9f8 <memcpy>
    }
    parson_free(array->items);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <json_array_resize+0x7c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6852      	ldr	r2, [r2, #4]
 800250e:	4610      	mov	r0, r2
 8002510:	4798      	blx	r3
    array->items = new_items;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000008 	.word	0x20000008
 800252c:	2000000c 	.word	0x2000000c

08002530 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e00b      	b.n	8002556 <json_array_free+0x26>
        json_value_free(array->items[i]);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f001 fffc 	bl	8004548 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3301      	adds	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d3ee      	bcc.n	800253e <json_array_free+0xe>
    }
    parson_free(array->items);
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <json_array_free+0x4c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6852      	ldr	r2, [r2, #4]
 8002568:	4610      	mov	r0, r2
 800256a:	4798      	blx	r3
    parson_free(array);
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <json_array_free+0x4c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000000c 	.word	0x2000000c

08002580 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <json_value_init_string_no_copy+0x40>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2010      	movs	r0, #16
 8002590:	4798      	blx	r3
 8002592:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <json_value_init_string_no_copy+0x1e>
        return NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	e00c      	b.n	80025b8 <json_value_init_string_no_copy+0x38>
    }
    new_value->parent = NULL;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2202      	movs	r2, #2
 80025a8:	605a      	str	r2, [r3, #4]
    new_value->value.string.chars = string;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	609a      	str	r2, [r3, #8]
    new_value->value.string.length = length;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	60da      	str	r2, [r3, #12]
    return new_value;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000008 	.word	0x20000008

080025c4 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b22      	cmp	r3, #34	; 0x22
 80025d4:	d002      	beq.n	80025dc <skip_quotes+0x18>
        return JSONFailure;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e02f      	b.n	800263c <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 80025e6:	e01e      	b.n	8002626 <skip_quotes+0x62>
        if (**string == '\0') {
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <skip_quotes+0x34>
            return JSONFailure;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	e021      	b.n	800263c <skip_quotes+0x78>
        } else if (**string == '\\') {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b5c      	cmp	r3, #92	; 0x5c
 8002600:	d10c      	bne.n	800261c <skip_quotes+0x58>
            SKIP_CHAR(string);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <skip_quotes+0x58>
                return JSONFailure;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e00f      	b.n	800263c <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b22      	cmp	r3, #34	; 0x22
 800262e:	d1db      	bne.n	80025e8 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <parse_utf16>:

static JSON_Status parse_utf16(const char **unprocessed, char **processed) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
    JSON_Status status = JSONFailure;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	617b      	str	r3, [r7, #20]
    unprocessed_ptr++; /* skips u */
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	3301      	adds	r3, #1
 8002668:	61bb      	str	r3, [r7, #24]
    status = parse_utf16_hex(unprocessed_ptr, &cp);
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	4619      	mov	r1, r3
 8002670:	69b8      	ldr	r0, [r7, #24]
 8002672:	f7ff fb02 	bl	8001c7a <parse_utf16_hex>
 8002676:	6178      	str	r0, [r7, #20]
    if (status != JSONSuccess) {
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <parse_utf16+0x3c>
        return JSONFailure;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	e0ce      	b.n	8002822 <parse_utf16+0x1da>
    }
    if (cp < 0x80) {
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b7f      	cmp	r3, #127	; 0x7f
 8002688:	d804      	bhi.n	8002694 <parse_utf16+0x4c>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e0bc      	b.n	800280e <parse_utf16+0x1c6>
    } else if (cp < 0x800) {
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800269a:	d219      	bcs.n	80026d0 <parse_utf16+0x88>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e09e      	b.n	800280e <parse_utf16+0x1c6>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80026d6:	d303      	bcc.n	80026e0 <parse_utf16+0x98>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80026de:	d325      	bcc.n	800272c <parse_utf16+0xe4>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	0b1b      	lsrs	r3, r3, #12
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f063 031f 	orn	r3, r3, #31
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002700:	b2da      	uxtb	r2, r3
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3301      	adds	r3, #1
 8002706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002716:	b2da      	uxtb	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3302      	adds	r3, #2
 800271c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3302      	adds	r3, #2
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e070      	b.n	800280e <parse_utf16+0x1c6>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8002732:	d369      	bcc.n	8002808 <parse_utf16+0x1c0>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800273a:	d265      	bcs.n	8002808 <parse_utf16+0x1c0>
        lead = cp;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	3304      	adds	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	61ba      	str	r2, [r7, #24]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b5c      	cmp	r3, #92	; 0x5c
 8002750:	d105      	bne.n	800275e <parse_utf16+0x116>
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	61ba      	str	r2, [r7, #24]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b75      	cmp	r3, #117	; 0x75
 800275c:	d002      	beq.n	8002764 <parse_utf16+0x11c>
            return JSONFailure;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e05e      	b.n	8002822 <parse_utf16+0x1da>
        }
        status = parse_utf16_hex(unprocessed_ptr, &trail);
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	4619      	mov	r1, r3
 800276a:	69b8      	ldr	r0, [r7, #24]
 800276c:	f7ff fa85 	bl	8001c7a <parse_utf16_hex>
 8002770:	6178      	str	r0, [r7, #20]
        if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <parse_utf16+0x140>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800277e:	d303      	bcc.n	8002788 <parse_utf16+0x140>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002786:	d302      	bcc.n	800278e <parse_utf16+0x146>
            return JSONFailure;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	e049      	b.n	8002822 <parse_utf16+0x1da>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	029a      	lsls	r2, r3, #10
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <parse_utf16+0x1e4>)
 8002794:	4013      	ands	r3, r2
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800279c:	4313      	orrs	r3, r2
 800279e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80027a2:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0c9b      	lsrs	r3, r3, #18
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f063 030f 	orn	r3, r3, #15
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0b1b      	lsrs	r3, r3, #12
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3301      	adds	r3, #1
 80027ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3302      	adds	r3, #2
 80027e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3303      	adds	r3, #3
 80027f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	3303      	adds	r3, #3
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e002      	b.n	800280e <parse_utf16+0x1c6>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	e009      	b.n	8002822 <parse_utf16+0x1da>
    }
    unprocessed_ptr += 3;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3303      	adds	r3, #3
 8002812:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	000ffc00 	.word	0x000ffc00

08002830 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len, size_t *output_len) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
    const char *input_ptr = input;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	617b      	str	r3, [r7, #20]
    size_t initial_size = (input_len + 1) * sizeof(char);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3301      	adds	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    size_t final_size = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
    output = (char*)parson_malloc(initial_size);
 8002856:	4b69      	ldr	r3, [pc, #420]	; (80029fc <process_string+0x1cc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285c:	4798      	blx	r3
 800285e:	61f8      	str	r0, [r7, #28]
    if (output == NULL) {
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80b9 	beq.w	80029da <process_string+0x1aa>
        goto error;
    }
    output_ptr = output;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 800286c:	e08a      	b.n	8002984 <process_string+0x154>
        if (*input_ptr == '\\') {
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b5c      	cmp	r3, #92	; 0x5c
 8002874:	d176      	bne.n	8002964 <process_string+0x134>
            input_ptr++;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
            switch (*input_ptr) {
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b75      	cmp	r3, #117	; 0x75
 8002882:	f300 80ac 	bgt.w	80029de <process_string+0x1ae>
 8002886:	2b5c      	cmp	r3, #92	; 0x5c
 8002888:	da04      	bge.n	8002894 <process_string+0x64>
 800288a:	2b22      	cmp	r3, #34	; 0x22
 800288c:	d03e      	beq.n	800290c <process_string+0xdc>
 800288e:	2b2f      	cmp	r3, #47	; 0x2f
 8002890:	d044      	beq.n	800291c <process_string+0xec>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 8002892:	e0a4      	b.n	80029de <process_string+0x1ae>
            switch (*input_ptr) {
 8002894:	3b5c      	subs	r3, #92	; 0x5c
 8002896:	2b19      	cmp	r3, #25
 8002898:	f200 80a1 	bhi.w	80029de <process_string+0x1ae>
 800289c:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <process_string+0x74>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	08002915 	.word	0x08002915
 80028a8:	080029df 	.word	0x080029df
 80028ac:	080029df 	.word	0x080029df
 80028b0:	080029df 	.word	0x080029df
 80028b4:	080029df 	.word	0x080029df
 80028b8:	080029df 	.word	0x080029df
 80028bc:	08002925 	.word	0x08002925
 80028c0:	080029df 	.word	0x080029df
 80028c4:	080029df 	.word	0x080029df
 80028c8:	080029df 	.word	0x080029df
 80028cc:	0800292d 	.word	0x0800292d
 80028d0:	080029df 	.word	0x080029df
 80028d4:	080029df 	.word	0x080029df
 80028d8:	080029df 	.word	0x080029df
 80028dc:	080029df 	.word	0x080029df
 80028e0:	080029df 	.word	0x080029df
 80028e4:	080029df 	.word	0x080029df
 80028e8:	080029df 	.word	0x080029df
 80028ec:	08002935 	.word	0x08002935
 80028f0:	080029df 	.word	0x080029df
 80028f4:	080029df 	.word	0x080029df
 80028f8:	080029df 	.word	0x080029df
 80028fc:	0800293d 	.word	0x0800293d
 8002900:	080029df 	.word	0x080029df
 8002904:	08002945 	.word	0x08002945
 8002908:	0800294d 	.word	0x0800294d
                case '\"': *output_ptr = '\"'; break;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	2222      	movs	r2, #34	; 0x22
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e031      	b.n	8002978 <process_string+0x148>
                case '\\': *output_ptr = '\\'; break;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	225c      	movs	r2, #92	; 0x5c
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e02d      	b.n	8002978 <process_string+0x148>
                case '/':  *output_ptr = '/';  break;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	222f      	movs	r2, #47	; 0x2f
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e029      	b.n	8002978 <process_string+0x148>
                case 'b':  *output_ptr = '\b'; break;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2208      	movs	r2, #8
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e025      	b.n	8002978 <process_string+0x148>
                case 'f':  *output_ptr = '\f'; break;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	220c      	movs	r2, #12
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e021      	b.n	8002978 <process_string+0x148>
                case 'n':  *output_ptr = '\n'; break;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	220a      	movs	r2, #10
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e01d      	b.n	8002978 <process_string+0x148>
                case 'r':  *output_ptr = '\r'; break;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	220d      	movs	r2, #13
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e019      	b.n	8002978 <process_string+0x148>
                case 't':  *output_ptr = '\t'; break;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2209      	movs	r2, #9
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e015      	b.n	8002978 <process_string+0x148>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
 800294c:	f107 0210 	add.w	r2, r7, #16
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fe76 	bl	8002648 <parse_utf16>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <process_string+0x146>
                        goto error;
 8002962:	e041      	b.n	80029e8 <process_string+0x1b8>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b1f      	cmp	r3, #31
 800296a:	d93a      	bls.n	80029e2 <process_string+0x1b2>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e000      	b.n	8002978 <process_string+0x148>
                    break;
 8002976:	bf00      	nop
        }
        output_ptr++;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	3301      	adds	r3, #1
 800297c:	613b      	str	r3, [r7, #16]
        input_ptr++;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <process_string+0x16c>
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4293      	cmp	r3, r2
 8002998:	f63f af69 	bhi.w	800286e <process_string+0x3e>
    }
    *output_ptr = '\0';
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <process_string+0x1cc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a38      	ldr	r0, [r7, #32]
 80029b2:	4798      	blx	r3
 80029b4:	61b8      	str	r0, [r7, #24]
    if (resized_output == NULL) {
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d014      	beq.n	80029e6 <process_string+0x1b6>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	69f9      	ldr	r1, [r7, #28]
 80029c0:	69b8      	ldr	r0, [r7, #24]
 80029c2:	f009 f819 	bl	800b9f8 <memcpy>
    *output_len = final_size - 1;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
    parson_free(output);
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <process_string+0x1d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69f8      	ldr	r0, [r7, #28]
 80029d4:	4798      	blx	r3
    return resized_output;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	e00b      	b.n	80029f2 <process_string+0x1c2>
        goto error;
 80029da:	bf00      	nop
 80029dc:	e004      	b.n	80029e8 <process_string+0x1b8>
                    goto error;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <process_string+0x1b8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <process_string+0x1b8>
        goto error;
 80029e6:	bf00      	nop
error:
    parson_free(output);
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <process_string+0x1d0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69f8      	ldr	r0, [r7, #28]
 80029ee:	4798      	blx	r3
    return NULL;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000008 	.word	0x20000008
 8002a00:	2000000c 	.word	0x2000000c

08002a04 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
    const char *string_start = *string;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]
    size_t input_string_len = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fdd3 	bl	80025c4 <skip_quotes>
 8002a1e:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <get_quoted_string+0x26>
        return NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e00d      	b.n	8002a46 <get_quoted_string+0x42>
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	3b02      	subs	r3, #2
 8002a34:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, input_string_len, output_string_len);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	6939      	ldr	r1, [r7, #16]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fef6 	bl	8002830 <process_string>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a60:	d906      	bls.n	8002a70 <parse_value+0x20>
        return NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e08d      	b.n	8002b82 <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a44      	ldr	r2, [pc, #272]	; (8002b8c <parse_value+0x13c>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ef      	bne.n	8002a66 <parse_value+0x16>
    switch (**string) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b7b      	cmp	r3, #123	; 0x7b
 8002a8e:	dc77      	bgt.n	8002b80 <parse_value+0x130>
 8002a90:	2b5b      	cmp	r3, #91	; 0x5b
 8002a92:	da08      	bge.n	8002aa6 <parse_value+0x56>
 8002a94:	2b39      	cmp	r3, #57	; 0x39
 8002a96:	dc73      	bgt.n	8002b80 <parse_value+0x130>
 8002a98:	2b30      	cmp	r3, #48	; 0x30
 8002a9a:	da67      	bge.n	8002b6c <parse_value+0x11c>
 8002a9c:	2b22      	cmp	r3, #34	; 0x22
 8002a9e:	d05b      	beq.n	8002b58 <parse_value+0x108>
 8002aa0:	2b2d      	cmp	r3, #45	; 0x2d
 8002aa2:	d063      	beq.n	8002b6c <parse_value+0x11c>
 8002aa4:	e06c      	b.n	8002b80 <parse_value+0x130>
 8002aa6:	3b5b      	subs	r3, #91	; 0x5b
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d869      	bhi.n	8002b80 <parse_value+0x130>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <parse_value+0x64>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002b49 	.word	0x08002b49
 8002ab8:	08002b81 	.word	0x08002b81
 8002abc:	08002b81 	.word	0x08002b81
 8002ac0:	08002b81 	.word	0x08002b81
 8002ac4:	08002b81 	.word	0x08002b81
 8002ac8:	08002b81 	.word	0x08002b81
 8002acc:	08002b81 	.word	0x08002b81
 8002ad0:	08002b81 	.word	0x08002b81
 8002ad4:	08002b81 	.word	0x08002b81
 8002ad8:	08002b81 	.word	0x08002b81
 8002adc:	08002b81 	.word	0x08002b81
 8002ae0:	08002b63 	.word	0x08002b63
 8002ae4:	08002b81 	.word	0x08002b81
 8002ae8:	08002b81 	.word	0x08002b81
 8002aec:	08002b81 	.word	0x08002b81
 8002af0:	08002b81 	.word	0x08002b81
 8002af4:	08002b81 	.word	0x08002b81
 8002af8:	08002b81 	.word	0x08002b81
 8002afc:	08002b81 	.word	0x08002b81
 8002b00:	08002b77 	.word	0x08002b77
 8002b04:	08002b81 	.word	0x08002b81
 8002b08:	08002b81 	.word	0x08002b81
 8002b0c:	08002b81 	.word	0x08002b81
 8002b10:	08002b81 	.word	0x08002b81
 8002b14:	08002b81 	.word	0x08002b81
 8002b18:	08002b63 	.word	0x08002b63
 8002b1c:	08002b81 	.word	0x08002b81
 8002b20:	08002b81 	.word	0x08002b81
 8002b24:	08002b81 	.word	0x08002b81
 8002b28:	08002b81 	.word	0x08002b81
 8002b2c:	08002b81 	.word	0x08002b81
 8002b30:	08002b81 	.word	0x08002b81
 8002b34:	08002b39 	.word	0x08002b39
        case '{':
            return parse_object_value(string, nesting + 1);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f826 	bl	8002b90 <parse_object_value>
 8002b44:	4603      	mov	r3, r0
 8002b46:	e01c      	b.n	8002b82 <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f934 	bl	8002dbc <parse_array_value>
 8002b54:	4603      	mov	r3, r0
 8002b56:	e014      	b.n	8002b82 <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f9f9 	bl	8002f50 <parse_string_value>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	e00f      	b.n	8002b82 <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fa1e 	bl	8002fa4 <parse_boolean_value>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	e00a      	b.n	8002b82 <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fa55 	bl	800301c <parse_number_value>
 8002b72:	4603      	mov	r3, r0
 8002b74:	e005      	b.n	8002b82 <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 faae 	bl	80030d8 <parse_null_value>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	e000      	b.n	8002b82 <parse_value+0x132>
        default:
            return NULL;
 8002b80:	2300      	movs	r3, #0
    }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	0800f5c4 	.word	0x0800f5c4

08002b90 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    JSON_Status status = JSONFailure;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	61fb      	str	r3, [r7, #28]
    JSON_Value *output_value = NULL, *new_value = NULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
    JSON_Object *output_object = NULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
    char *new_key = NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]

    output_value = json_value_init_object();
 8002bb0:	f001 fcf8 	bl	80045a4 <json_value_init_object>
 8002bb4:	61b8      	str	r0, [r7, #24]
    if (output_value == NULL) {
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <parse_object_value+0x30>
        return NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e0f5      	b.n	8002dac <parse_object_value+0x21c>
    }
    if (**string != '{') {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b7b      	cmp	r3, #123	; 0x7b
 8002bc8:	d004      	beq.n	8002bd4 <parse_object_value+0x44>
        json_value_free(output_value);
 8002bca:	69b8      	ldr	r0, [r7, #24]
 8002bcc:	f001 fcbc 	bl	8004548 <json_value_free>
        return NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e0eb      	b.n	8002dac <parse_object_value+0x21c>
    }
    output_object = json_value_get_object(output_value);
 8002bd4:	69b8      	ldr	r0, [r7, #24]
 8002bd6:	f001 fc2d 	bl	8004434 <json_value_get_object>
 8002bda:	6138      	str	r0, [r7, #16]
    SKIP_CHAR(string);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 8002be6:	e004      	b.n	8002bf2 <parse_object_value+0x62>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a6e      	ldr	r2, [pc, #440]	; (8002db4 <parse_object_value+0x224>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ef      	bne.n	8002be8 <parse_object_value+0x58>
    if (**string == '}') { /* empty object */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b7d      	cmp	r3, #125	; 0x7d
 8002c10:	f040 80a1 	bne.w	8002d56 <parse_object_value+0x1c6>
        SKIP_CHAR(string);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
        return output_value;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	e0c4      	b.n	8002dac <parse_object_value+0x21c>
    }
    while (**string != '\0') {
        size_t key_len = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
        new_key = get_quoted_string(string, &key_len);
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fee9 	bl	8002a04 <get_quoted_string>
 8002c32:	60f8      	str	r0, [r7, #12]
        /* We do not support key names with embedded \0 chars */
        if (!new_key) {
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d104      	bne.n	8002c44 <parse_object_value+0xb4>
            json_value_free(output_value);
 8002c3a:	69b8      	ldr	r0, [r7, #24]
 8002c3c:	f001 fc84 	bl	8004548 <json_value_free>
            return NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e0b3      	b.n	8002dac <parse_object_value+0x21c>
        }
        if (key_len != strlen(new_key)) {
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7fd fa9b 	bl	8000180 <strlen>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d00d      	beq.n	8002c6e <parse_object_value+0xde>
            parson_free(new_key);
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <parse_object_value+0x228>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	4798      	blx	r3
            json_value_free(output_value);
 8002c5a:	69b8      	ldr	r0, [r7, #24]
 8002c5c:	f001 fc74 	bl	8004548 <json_value_free>
            return NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e0a3      	b.n	8002dac <parse_object_value+0x21c>
        }
        SKIP_WHITESPACES(string);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	4a4f      	ldr	r2, [pc, #316]	; (8002db4 <parse_object_value+0x224>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ef      	bne.n	8002c64 <parse_object_value+0xd4>
        if (**string != ':') {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b3a      	cmp	r3, #58	; 0x3a
 8002c8c:	d008      	beq.n	8002ca0 <parse_object_value+0x110>
            parson_free(new_key);
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	; (8002db8 <parse_object_value+0x228>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	4798      	blx	r3
            json_value_free(output_value);
 8002c96:	69b8      	ldr	r0, [r7, #24]
 8002c98:	f001 fc56 	bl	8004548 <json_value_free>
            return NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e085      	b.n	8002dac <parse_object_value+0x21c>
        }
        SKIP_CHAR(string);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fecf 	bl	8002a50 <parse_value>
 8002cb2:	6178      	str	r0, [r7, #20]
        if (new_value == NULL) {
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <parse_object_value+0x13c>
            parson_free(new_key);
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <parse_object_value+0x228>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	4798      	blx	r3
            json_value_free(output_value);
 8002cc2:	69b8      	ldr	r0, [r7, #24]
 8002cc4:	f001 fc40 	bl	8004548 <json_value_free>
            return NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e06f      	b.n	8002dac <parse_object_value+0x21c>
        }
        status = json_object_add(output_object, new_key, new_value);
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	6938      	ldr	r0, [r7, #16]
 8002cd2:	f7ff fab8 	bl	8002246 <json_object_add>
 8002cd6:	61f8      	str	r0, [r7, #28]
        if (status != JSONSuccess) {
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d010      	beq.n	8002d00 <parse_object_value+0x170>
            parson_free(new_key);
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <parse_object_value+0x228>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	4798      	blx	r3
            json_value_free(new_value);
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f001 fc2e 	bl	8004548 <json_value_free>
            json_value_free(output_value);
 8002cec:	69b8      	ldr	r0, [r7, #24]
 8002cee:	f001 fc2b 	bl	8004548 <json_value_free>
            return NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e05a      	b.n	8002dac <parse_object_value+0x21c>
        }
        SKIP_WHITESPACES(string);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <parse_object_value+0x224>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ef      	bne.n	8002cf6 <parse_object_value+0x166>
        if (**string != ',') {
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b2c      	cmp	r3, #44	; 0x2c
 8002d1e:	d121      	bne.n	8002d64 <parse_object_value+0x1d4>
            break;
        }
        SKIP_CHAR(string);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8002d2a:	e004      	b.n	8002d36 <parse_object_value+0x1a6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <parse_object_value+0x224>)
 8002d40:	4413      	add	r3, r2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ef      	bne.n	8002d2c <parse_object_value+0x19c>
        if (**string == '}') {
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b7d      	cmp	r3, #125	; 0x7d
 8002d54:	d008      	beq.n	8002d68 <parse_object_value+0x1d8>
    while (**string != '\0') {
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f af60 	bne.w	8002c22 <parse_object_value+0x92>
 8002d62:	e008      	b.n	8002d76 <parse_object_value+0x1e6>
            break;
 8002d64:	bf00      	nop
 8002d66:	e006      	b.n	8002d76 <parse_object_value+0x1e6>
            break;
 8002d68:	bf00      	nop
        }
    }
    SKIP_WHITESPACES(string);
 8002d6a:	e004      	b.n	8002d76 <parse_object_value+0x1e6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <parse_object_value+0x224>)
 8002d80:	4413      	add	r3, r2
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ef      	bne.n	8002d6c <parse_object_value+0x1dc>
    if (**string != '}') {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b7d      	cmp	r3, #125	; 0x7d
 8002d94:	d004      	beq.n	8002da0 <parse_object_value+0x210>
        json_value_free(output_value);
 8002d96:	69b8      	ldr	r0, [r7, #24]
 8002d98:	f001 fbd6 	bl	8004548 <json_value_free>
        return NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e005      	b.n	8002dac <parse_object_value+0x21c>
    }
    SKIP_CHAR(string);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
    return output_value;
 8002daa:	69bb      	ldr	r3, [r7, #24]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	0800f5c4 	.word	0x0800f5c4
 8002db8:	2000000c 	.word	0x2000000c

08002dbc <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 8002dd2:	f001 fc13 	bl	80045fc <json_value_init_array>
 8002dd6:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <parse_array_value+0x26>
        return NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e0b0      	b.n	8002f44 <parse_array_value+0x188>
    }
    if (**string != '[') {
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b5b      	cmp	r3, #91	; 0x5b
 8002dea:	d004      	beq.n	8002df6 <parse_array_value+0x3a>
        json_value_free(output_value);
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f001 fbab 	bl	8004548 <json_value_free>
        return NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e0a6      	b.n	8002f44 <parse_array_value+0x188>
    }
    output_array = json_value_get_array(output_value);
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f001 fb2e 	bl	8004458 <json_value_get_array>
 8002dfc:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 8002e08:	e004      	b.n	8002e14 <parse_array_value+0x58>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <parse_array_value+0x190>)
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ef      	bne.n	8002e0a <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b5d      	cmp	r3, #93	; 0x5d
 8002e32:	d152      	bne.n	8002eda <parse_array_value+0x11e>
        SKIP_CHAR(string);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
        return output_value;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	e080      	b.n	8002f44 <parse_array_value+0x188>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fe03 	bl	8002a50 <parse_value>
 8002e4a:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <parse_array_value+0xa0>
            json_value_free(output_value);
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f001 fb78 	bl	8004548 <json_value_free>
            return NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e073      	b.n	8002f44 <parse_array_value+0x188>
        }
        if (json_array_add(output_array, new_array_value) != JSONSuccess) {
 8002e5c:	6939      	ldr	r1, [r7, #16]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff faf2 	bl	8002448 <json_array_add>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <parse_array_value+0xc8>
            json_value_free(new_array_value);
 8002e6a:	6938      	ldr	r0, [r7, #16]
 8002e6c:	f001 fb6c 	bl	8004548 <json_value_free>
            json_value_free(output_value);
 8002e70:	6978      	ldr	r0, [r7, #20]
 8002e72:	f001 fb69 	bl	8004548 <json_value_free>
            return NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e064      	b.n	8002f44 <parse_array_value+0x188>
        }
        SKIP_WHITESPACES(string);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <parse_array_value+0x190>)
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ef      	bne.n	8002e7a <parse_array_value+0xbe>
        if (**string != ',') {
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b2c      	cmp	r3, #44	; 0x2c
 8002ea2:	d120      	bne.n	8002ee6 <parse_array_value+0x12a>
            break;
        }
        SKIP_CHAR(string);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8002eae:	e004      	b.n	8002eba <parse_array_value+0xfe>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <parse_array_value+0x190>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ef      	bne.n	8002eb0 <parse_array_value+0xf4>
        if (**string == ']') {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b5d      	cmp	r3, #93	; 0x5d
 8002ed8:	d007      	beq.n	8002eea <parse_array_value+0x12e>
    while (**string != '\0') {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ae      	bne.n	8002e42 <parse_array_value+0x86>
 8002ee4:	e008      	b.n	8002ef8 <parse_array_value+0x13c>
            break;
 8002ee6:	bf00      	nop
 8002ee8:	e006      	b.n	8002ef8 <parse_array_value+0x13c>
            break;
 8002eea:	bf00      	nop
        }
    }
    SKIP_WHITESPACES(string);
 8002eec:	e004      	b.n	8002ef8 <parse_array_value+0x13c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <parse_array_value+0x190>)
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ef      	bne.n	8002eee <parse_array_value+0x132>
    if (**string != ']' || /* Trim array after parsing is over */
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b5d      	cmp	r3, #93	; 0x5d
 8002f16:	d10a      	bne.n	8002f2e <parse_array_value+0x172>
        json_array_resize(output_array, json_array_get_count(output_array)) != JSONSuccess) {
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f001 fa57 	bl	80043cc <json_array_get_count>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4619      	mov	r1, r3
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff fac4 	bl	80024b0 <json_array_resize>
 8002f28:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <parse_array_value+0x17c>
            json_value_free(output_value);
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f001 fb0a 	bl	8004548 <json_value_free>
            return NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e005      	b.n	8002f44 <parse_array_value+0x188>
    }
    SKIP_CHAR(string);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
    return output_value;
 8002f42:	697b      	ldr	r3, [r7, #20]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	0800f5c4 	.word	0x0800f5c4

08002f50 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
    size_t new_string_len = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fd4c 	bl	8002a04 <get_quoted_string>
 8002f6c:	6138      	str	r0, [r7, #16]
    if (new_string == NULL) {
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <parse_string_value+0x28>
        return NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e00f      	b.n	8002f98 <parse_string_value+0x48>
    }
    value = json_value_init_string_no_copy(new_string, new_string_len);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6938      	ldr	r0, [r7, #16]
 8002f7e:	f7ff faff 	bl	8002580 <json_value_init_string_no_copy>
 8002f82:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <parse_string_value+0x46>
        parson_free(new_string);
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <parse_string_value+0x50>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6938      	ldr	r0, [r7, #16]
 8002f90:	4798      	blx	r3
        return NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <parse_string_value+0x48>
    }
    return value;
 8002f96:	697b      	ldr	r3, [r7, #20]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	2000000c 	.word	0x2000000c

08002fa4 <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 8002fac:	2304      	movs	r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 8002fb0:	2305      	movs	r3, #5
 8002fb2:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4815      	ldr	r0, [pc, #84]	; (8003014 <parse_boolean_value+0x70>)
 8002fbe:	f008 ff39 	bl	800be34 <strncmp>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <parse_boolean_value+0x3a>
        *string += true_token_size;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	441a      	add	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f001 fb8f 	bl	80046f8 <json_value_init_boolean>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	e015      	b.n	800300a <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480c      	ldr	r0, [pc, #48]	; (8003018 <parse_boolean_value+0x74>)
 8002fe8:	f008 ff24 	bl	800be34 <strncmp>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <parse_boolean_value+0x64>
        *string += false_token_size;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f001 fb7a 	bl	80046f8 <json_value_init_boolean>
 8003004:	4603      	mov	r3, r0
 8003006:	e000      	b.n	800300a <parse_boolean_value+0x66>
    }
    return NULL;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	0800ebfc 	.word	0x0800ebfc
 8003018:	0800ec04 	.word	0x0800ec04

0800301c <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 8003030:	f008 fa88 	bl	800b544 <__errno>
 8003034:	4603      	mov	r3, r0
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f107 020c 	add.w	r2, r7, #12
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f009 fd41 	bl	800cacc <strtod>
 800304a:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 800304e:	f008 fa79 	bl	800b544 <__errno>
 8003052:	4603      	mov	r3, r0
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b22      	cmp	r3, #34	; 0x22
 8003058:	d116      	bne.n	8003088 <parse_number_value+0x6c>
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003062:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003066:	f7fd fd11 	bl	8000a8c <__aeabi_dcmplt>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <parse_number_value+0x68>
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <parse_number_value+0xb8>)
 8003076:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800307a:	f7fd fd25 	bl	8000ac8 <__aeabi_dcmpgt>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <parse_number_value+0x6c>
        return NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	e021      	b.n	80030cc <parse_number_value+0xb0>
    }
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 8003088:	f008 fa5c 	bl	800b544 <__errno>
 800308c:	4603      	mov	r3, r0
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <parse_number_value+0x84>
 8003094:	f008 fa56 	bl	800b544 <__errno>
 8003098:	4603      	mov	r3, r0
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b22      	cmp	r3, #34	; 0x22
 800309e:	d10b      	bne.n	80030b8 <parse_number_value+0x9c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fe fe3f 	bl	8001d30 <is_decimal>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <parse_number_value+0xa0>
        return NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e007      	b.n	80030cc <parse_number_value+0xb0>
    }
    *string = end;
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 80030c2:	ed97 0b04 	vldr	d0, [r7, #16]
 80030c6:	f001 fac5 	bl	8004654 <json_value_init_number>
 80030ca:	4603      	mov	r3, r0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	7fefffff 	.word	0x7fefffff

080030d8 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 80030e0:	2304      	movs	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4619      	mov	r1, r3
 80030ec:	480a      	ldr	r0, [pc, #40]	; (8003118 <parse_null_value+0x40>)
 80030ee:	f008 fea1 	bl	800be34 <strncmp>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <parse_null_value+0x34>
        *string += token_size;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	441a      	add	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 8003104:	f001 fb1c 	bl	8004740 <json_value_init_null>
 8003108:	4603      	mov	r3, r0
 800310a:	e000      	b.n	800310e <parse_null_value+0x36>
    }
    return NULL;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	0800ec0c 	.word	0x0800ec0c

0800311c <json_serialize_to_buffer_r>:
                                    APPEND_STRING(PARSON_INDENT_STR);\
                                }\
                            } while (0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b098      	sub	sp, #96	; 0x60
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 800312a:	2300      	movs	r3, #0
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
 800312e:	2300      	movs	r3, #0
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Value *temp_value = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Array *array = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Object *object = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t i = 0, count = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	657b      	str	r3, [r7, #84]	; 0x54
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
    double num = 0.0;
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	653b      	str	r3, [r7, #80]	; 0x50
 8003158:	2300      	movs	r3, #0
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t len = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f001 f955 	bl	8004410 <json_value_get_type>
 8003166:	4603      	mov	r3, r0
 8003168:	3301      	adds	r3, #1
 800316a:	2b07      	cmp	r3, #7
 800316c:	f200 8355 	bhi.w	800381a <json_serialize_to_buffer_r+0x6fe>
 8003170:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <json_serialize_to_buffer_r+0x5c>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	08003815 	.word	0x08003815
 800317c:	0800381b 	.word	0x0800381b
 8003180:	080037e1 	.word	0x080037e1
 8003184:	080036a7 	.word	0x080036a7
 8003188:	08003767 	.word	0x08003767
 800318c:	080033c5 	.word	0x080033c5
 8003190:	08003199 	.word	0x08003199
 8003194:	080036f5 	.word	0x080036f5
        case JSONArray:
            array = json_value_get_array(value);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f001 f95d 	bl	8004458 <json_value_get_array>
 800319e:	62f8      	str	r0, [r7, #44]	; 0x2c
            count = json_array_get_count(array);
 80031a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a2:	f001 f913 	bl	80043cc <json_array_get_count>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("[");
 80031a8:	2301      	movs	r3, #1
 80031aa:	653b      	str	r3, [r7, #80]	; 0x50
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <json_serialize_to_buffer_r+0xb4>
 80031b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b4:	461a      	mov	r2, r3
 80031b6:	497e      	ldr	r1, [pc, #504]	; (80033b0 <json_serialize_to_buffer_r+0x294>)
 80031b8:	68b8      	ldr	r0, [r7, #8]
 80031ba:	f008 fc1d 	bl	800b9f8 <memcpy>
 80031be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4413      	add	r3, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4413      	add	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d4:	4413      	add	r3, r2
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01a      	beq.n	8003214 <json_serialize_to_buffer_r+0xf8>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d017      	beq.n	8003214 <json_serialize_to_buffer_r+0xf8>
                APPEND_STRING("\n");
 80031e4:	2301      	movs	r3, #1
 80031e6:	653b      	str	r3, [r7, #80]	; 0x50
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00e      	beq.n	800320c <json_serialize_to_buffer_r+0xf0>
 80031ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f0:	461a      	mov	r2, r3
 80031f2:	4970      	ldr	r1, [pc, #448]	; (80033b4 <json_serialize_to_buffer_r+0x298>)
 80031f4:	68b8      	ldr	r0, [r7, #8]
 80031f6:	f008 fbff 	bl	800b9f8 <memcpy>
 80031fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	4413      	add	r3, r2
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4413      	add	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003210:	4413      	add	r3, r2
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8003214:	2300      	movs	r3, #0
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
 8003218:	e081      	b.n	800331e <json_serialize_to_buffer_r+0x202>
                if (is_pretty) {
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <json_serialize_to_buffer_r+0x14c>
                    APPEND_INDENT(level+1);
 8003220:	2300      	movs	r3, #0
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
 8003224:	2300      	movs	r3, #0
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48
 8003228:	e01a      	b.n	8003260 <json_serialize_to_buffer_r+0x144>
 800322a:	2304      	movs	r3, #4
 800322c:	653b      	str	r3, [r7, #80]	; 0x50
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <json_serialize_to_buffer_r+0x136>
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	461a      	mov	r2, r3
 8003238:	495f      	ldr	r1, [pc, #380]	; (80033b8 <json_serialize_to_buffer_r+0x29c>)
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	f008 fbdc 	bl	800b9f8 <memcpy>
 8003240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	4413      	add	r3, r2
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003256:	4413      	add	r3, r2
 8003258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800325a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325c:	3301      	adds	r3, #1
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003264:	429a      	cmp	r2, r3
 8003266:	dae0      	bge.n	800322a <json_serialize_to_buffer_r+0x10e>
                }
                temp_value = json_array_get_value(array, i);
 8003268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800326a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800326c:	f001 f893 	bl	8004396 <json_array_get_value>
 8003270:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003280:	f7ff ff4c 	bl	800311c <json_serialize_to_buffer_r>
 8003284:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8003286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003288:	2b00      	cmp	r3, #0
 800328a:	da02      	bge.n	8003292 <json_serialize_to_buffer_r+0x176>
                    return -1;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	e2c5      	b.n	800381e <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <json_serialize_to_buffer_r+0x184>
                    buf += written;
 8003298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 80032a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a4:	4413      	add	r3, r2
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d217      	bcs.n	80032e2 <json_serialize_to_buffer_r+0x1c6>
                    APPEND_STRING(",");
 80032b2:	2301      	movs	r3, #1
 80032b4:	653b      	str	r3, [r7, #80]	; 0x50
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00e      	beq.n	80032da <json_serialize_to_buffer_r+0x1be>
 80032bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032be:	461a      	mov	r2, r3
 80032c0:	493e      	ldr	r1, [pc, #248]	; (80033bc <json_serialize_to_buffer_r+0x2a0>)
 80032c2:	68b8      	ldr	r0, [r7, #8]
 80032c4:	f008 fb98 	bl	800b9f8 <memcpy>
 80032c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	4413      	add	r3, r2
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	4413      	add	r3, r2
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032de:	4413      	add	r3, r2
 80032e0:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <json_serialize_to_buffer_r+0x1fc>
                    APPEND_STRING("\n");
 80032e8:	2301      	movs	r3, #1
 80032ea:	653b      	str	r3, [r7, #80]	; 0x50
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00e      	beq.n	8003310 <json_serialize_to_buffer_r+0x1f4>
 80032f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f4:	461a      	mov	r2, r3
 80032f6:	492f      	ldr	r1, [pc, #188]	; (80033b4 <json_serialize_to_buffer_r+0x298>)
 80032f8:	68b8      	ldr	r0, [r7, #8]
 80032fa:	f008 fb7d 	bl	800b9f8 <memcpy>
 80032fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	4413      	add	r3, r2
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003314:	4413      	add	r3, r2
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8003318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331a:	3301      	adds	r3, #1
 800331c:	657b      	str	r3, [r7, #84]	; 0x54
 800331e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	429a      	cmp	r2, r3
 8003324:	f4ff af79 	bcc.w	800321a <json_serialize_to_buffer_r+0xfe>
                }
            }
            if (count > 0 && is_pretty) {
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d026      	beq.n	800337c <json_serialize_to_buffer_r+0x260>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d023      	beq.n	800337c <json_serialize_to_buffer_r+0x260>
                APPEND_INDENT(level);
 8003334:	2300      	movs	r3, #0
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
 8003338:	2300      	movs	r3, #0
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
 800333c:	e01a      	b.n	8003374 <json_serialize_to_buffer_r+0x258>
 800333e:	2304      	movs	r3, #4
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <json_serialize_to_buffer_r+0x24a>
 8003348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334a:	461a      	mov	r2, r3
 800334c:	491a      	ldr	r1, [pc, #104]	; (80033b8 <json_serialize_to_buffer_r+0x29c>)
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f008 fb52 	bl	800b9f8 <memcpy>
 8003354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4413      	add	r3, r2
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	4413      	add	r3, r2
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	4413      	add	r3, r2
 800336c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003370:	3301      	adds	r3, #1
 8003372:	647b      	str	r3, [r7, #68]	; 0x44
 8003374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	dbe0      	blt.n	800333e <json_serialize_to_buffer_r+0x222>
            }
            APPEND_STRING("]");
 800337c:	2301      	movs	r3, #1
 800337e:	653b      	str	r3, [r7, #80]	; 0x50
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <json_serialize_to_buffer_r+0x288>
 8003386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003388:	461a      	mov	r2, r3
 800338a:	490d      	ldr	r1, [pc, #52]	; (80033c0 <json_serialize_to_buffer_r+0x2a4>)
 800338c:	68b8      	ldr	r0, [r7, #8]
 800338e:	f008 fb33 	bl	800b9f8 <memcpy>
 8003392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	4413      	add	r3, r2
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a8:	4413      	add	r3, r2
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80033ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ae:	e236      	b.n	800381e <json_serialize_to_buffer_r+0x702>
 80033b0:	0800ec14 	.word	0x0800ec14
 80033b4:	0800ec18 	.word	0x0800ec18
 80033b8:	0800ec1c 	.word	0x0800ec1c
 80033bc:	0800ec24 	.word	0x0800ec24
 80033c0:	0800ec28 	.word	0x0800ec28
        case JSONObject:
            object = json_value_get_object(value);
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f001 f835 	bl	8004434 <json_value_get_object>
 80033ca:	62b8      	str	r0, [r7, #40]	; 0x28
            count  = json_object_get_count(object);
 80033cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ce:	f000 ff8a 	bl	80042e6 <json_object_get_count>
 80033d2:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("{");
 80033d4:	2301      	movs	r3, #1
 80033d6:	653b      	str	r3, [r7, #80]	; 0x50
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <json_serialize_to_buffer_r+0x2e0>
 80033de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e0:	461a      	mov	r2, r3
 80033e2:	498e      	ldr	r1, [pc, #568]	; (800361c <json_serialize_to_buffer_r+0x500>)
 80033e4:	68b8      	ldr	r0, [r7, #8]
 80033e6:	f008 fb07 	bl	800b9f8 <memcpy>
 80033ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	4413      	add	r3, r2
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	4413      	add	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003400:	4413      	add	r3, r2
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01a      	beq.n	8003440 <json_serialize_to_buffer_r+0x324>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d017      	beq.n	8003440 <json_serialize_to_buffer_r+0x324>
                APPEND_STRING("\n");
 8003410:	2301      	movs	r3, #1
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <json_serialize_to_buffer_r+0x31c>
 800341a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341c:	461a      	mov	r2, r3
 800341e:	4980      	ldr	r1, [pc, #512]	; (8003620 <json_serialize_to_buffer_r+0x504>)
 8003420:	68b8      	ldr	r0, [r7, #8]
 8003422:	f008 fae9 	bl	800b9f8 <memcpy>
 8003426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	4413      	add	r3, r2
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	4413      	add	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343c:	4413      	add	r3, r2
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8003440:	2300      	movs	r3, #0
 8003442:	657b      	str	r3, [r7, #84]	; 0x54
 8003444:	e0da      	b.n	80035fc <json_serialize_to_buffer_r+0x4e0>
                key = json_object_get_name(object, i);
 8003446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344a:	f000 ff5d 	bl	8004308 <json_object_get_name>
 800344e:	63b8      	str	r0, [r7, #56]	; 0x38
                if (key == NULL) {
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <json_serialize_to_buffer_r+0x340>
                    return -1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e1e0      	b.n	800381e <json_serialize_to_buffer_r+0x702>
                }
                if (is_pretty) {
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d023      	beq.n	80034aa <json_serialize_to_buffer_r+0x38e>
                    APPEND_INDENT(level+1);
 8003462:	2300      	movs	r3, #0
 8003464:	643b      	str	r3, [r7, #64]	; 0x40
 8003466:	2300      	movs	r3, #0
 8003468:	643b      	str	r3, [r7, #64]	; 0x40
 800346a:	e01a      	b.n	80034a2 <json_serialize_to_buffer_r+0x386>
 800346c:	2304      	movs	r3, #4
 800346e:	653b      	str	r3, [r7, #80]	; 0x50
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <json_serialize_to_buffer_r+0x378>
 8003476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003478:	461a      	mov	r2, r3
 800347a:	496a      	ldr	r1, [pc, #424]	; (8003624 <json_serialize_to_buffer_r+0x508>)
 800347c:	68b8      	ldr	r0, [r7, #8]
 800347e:	f008 fabb 	bl	800b9f8 <memcpy>
 8003482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	4413      	add	r3, r2
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003498:	4413      	add	r3, r2
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349e:	3301      	adds	r3, #1
 80034a0:	643b      	str	r3, [r7, #64]	; 0x40
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dae0      	bge.n	800346c <json_serialize_to_buffer_r+0x350>
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 80034aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034ac:	f7fc fe68 	bl	8000180 <strlen>
 80034b0:	4603      	mov	r3, r0
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4619      	mov	r1, r3
 80034b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034b8:	f000 f9c6 	bl	8003848 <json_serialize_string>
 80034bc:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 80034be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	da02      	bge.n	80034ca <json_serialize_to_buffer_r+0x3ae>
                    return -1;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
 80034c8:	e1a9      	b.n	800381e <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <json_serialize_to_buffer_r+0x3bc>
                    buf += written;
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	4413      	add	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 80034d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	4413      	add	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
                APPEND_STRING(":");
 80034e0:	2301      	movs	r3, #1
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00e      	beq.n	8003508 <json_serialize_to_buffer_r+0x3ec>
 80034ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ec:	461a      	mov	r2, r3
 80034ee:	494e      	ldr	r1, [pc, #312]	; (8003628 <json_serialize_to_buffer_r+0x50c>)
 80034f0:	68b8      	ldr	r0, [r7, #8]
 80034f2:	f008 fa81 	bl	800b9f8 <memcpy>
 80034f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	4413      	add	r3, r2
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4413      	add	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350c:	4413      	add	r3, r2
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (is_pretty) {
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d017      	beq.n	8003546 <json_serialize_to_buffer_r+0x42a>
                    APPEND_STRING(" ");
 8003516:	2301      	movs	r3, #1
 8003518:	653b      	str	r3, [r7, #80]	; 0x50
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <json_serialize_to_buffer_r+0x422>
 8003520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003522:	461a      	mov	r2, r3
 8003524:	4941      	ldr	r1, [pc, #260]	; (800362c <json_serialize_to_buffer_r+0x510>)
 8003526:	68b8      	ldr	r0, [r7, #8]
 8003528:	f008 fa66 	bl	800b9f8 <memcpy>
 800352c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4413      	add	r3, r2
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003542:	4413      	add	r3, r2
 8003544:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                temp_value = json_object_get_value_at(object, i);
 8003546:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800354a:	f000 fef8 	bl	800433e <json_object_get_value_at>
 800354e:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355e:	f7ff fddd 	bl	800311c <json_serialize_to_buffer_r>
 8003562:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8003564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003566:	2b00      	cmp	r3, #0
 8003568:	da02      	bge.n	8003570 <json_serialize_to_buffer_r+0x454>
                    return -1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e156      	b.n	800381e <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <json_serialize_to_buffer_r+0x462>
                    buf += written;
 8003576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4413      	add	r3, r2
 800357c:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 800357e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003582:	4413      	add	r3, r2
 8003584:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	3b01      	subs	r3, #1
 800358a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800358c:	429a      	cmp	r2, r3
 800358e:	d217      	bcs.n	80035c0 <json_serialize_to_buffer_r+0x4a4>
                    APPEND_STRING(",");
 8003590:	2301      	movs	r3, #1
 8003592:	653b      	str	r3, [r7, #80]	; 0x50
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00e      	beq.n	80035b8 <json_serialize_to_buffer_r+0x49c>
 800359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359c:	461a      	mov	r2, r3
 800359e:	4924      	ldr	r1, [pc, #144]	; (8003630 <json_serialize_to_buffer_r+0x514>)
 80035a0:	68b8      	ldr	r0, [r7, #8]
 80035a2:	f008 fa29 	bl	800b9f8 <memcpy>
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4413      	add	r3, r2
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4413      	add	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035bc:	4413      	add	r3, r2
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d017      	beq.n	80035f6 <json_serialize_to_buffer_r+0x4da>
                    APPEND_STRING("\n");
 80035c6:	2301      	movs	r3, #1
 80035c8:	653b      	str	r3, [r7, #80]	; 0x50
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <json_serialize_to_buffer_r+0x4d2>
 80035d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d2:	461a      	mov	r2, r3
 80035d4:	4912      	ldr	r1, [pc, #72]	; (8003620 <json_serialize_to_buffer_r+0x504>)
 80035d6:	68b8      	ldr	r0, [r7, #8]
 80035d8:	f008 fa0e 	bl	800b9f8 <memcpy>
 80035dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	4413      	add	r3, r2
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f2:	4413      	add	r3, r2
 80035f4:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 80035f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f8:	3301      	adds	r3, #1
 80035fa:	657b      	str	r3, [r7, #84]	; 0x54
 80035fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	429a      	cmp	r2, r3
 8003602:	f4ff af20 	bcc.w	8003446 <json_serialize_to_buffer_r+0x32a>
                }
            }
            if (count > 0 && is_pretty) {
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d032      	beq.n	8003672 <json_serialize_to_buffer_r+0x556>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02f      	beq.n	8003672 <json_serialize_to_buffer_r+0x556>
                APPEND_INDENT(level);
 8003612:	2300      	movs	r3, #0
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003616:	2300      	movs	r3, #0
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361a:	e026      	b.n	800366a <json_serialize_to_buffer_r+0x54e>
 800361c:	0800ec2c 	.word	0x0800ec2c
 8003620:	0800ec18 	.word	0x0800ec18
 8003624:	0800ec1c 	.word	0x0800ec1c
 8003628:	0800ec30 	.word	0x0800ec30
 800362c:	0800ec34 	.word	0x0800ec34
 8003630:	0800ec24 	.word	0x0800ec24
 8003634:	2304      	movs	r3, #4
 8003636:	653b      	str	r3, [r7, #80]	; 0x50
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <json_serialize_to_buffer_r+0x540>
 800363e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003640:	461a      	mov	r2, r3
 8003642:	4979      	ldr	r1, [pc, #484]	; (8003828 <json_serialize_to_buffer_r+0x70c>)
 8003644:	68b8      	ldr	r0, [r7, #8]
 8003646:	f008 f9d7 	bl	800b9f8 <memcpy>
 800364a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	4413      	add	r3, r2
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4413      	add	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	4413      	add	r3, r2
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003666:	3301      	adds	r3, #1
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	dbe0      	blt.n	8003634 <json_serialize_to_buffer_r+0x518>
            }
            APPEND_STRING("}");
 8003672:	2301      	movs	r3, #1
 8003674:	653b      	str	r3, [r7, #80]	; 0x50
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <json_serialize_to_buffer_r+0x57e>
 800367c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367e:	461a      	mov	r2, r3
 8003680:	496a      	ldr	r1, [pc, #424]	; (800382c <json_serialize_to_buffer_r+0x710>)
 8003682:	68b8      	ldr	r0, [r7, #8]
 8003684:	f008 f9b8 	bl	800b9f8 <memcpy>
 8003688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	4413      	add	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800369c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369e:	4413      	add	r3, r2
 80036a0:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	e0bb      	b.n	800381e <json_serialize_to_buffer_r+0x702>
        case JSONString:
            string = json_value_get_string(value);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fefa 	bl	80044a0 <json_value_get_string>
 80036ac:	6378      	str	r0, [r7, #52]	; 0x34
            if (string == NULL) {
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <json_serialize_to_buffer_r+0x59e>
                return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	e0b1      	b.n	800381e <json_serialize_to_buffer_r+0x702>
            }
            len = json_value_get_string_len(value);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 ff03 	bl	80044c6 <json_value_get_string_len>
 80036c0:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036c8:	f000 f8be 	bl	8003848 <json_serialize_string>
 80036cc:	6538      	str	r0, [r7, #80]	; 0x50
            if (written < 0) {
 80036ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da02      	bge.n	80036da <json_serialize_to_buffer_r+0x5be>
                return -1;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
 80036d8:	e0a1      	b.n	800381e <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <json_serialize_to_buffer_r+0x5cc>
                buf += written;
 80036e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4413      	add	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 80036e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ec:	4413      	add	r3, r2
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80036f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f2:	e094      	b.n	800381e <json_serialize_to_buffer_r+0x702>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 ff14 	bl	8004522 <json_value_get_boolean>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d018      	beq.n	8003732 <json_serialize_to_buffer_r+0x616>
                APPEND_STRING("true");
 8003700:	2304      	movs	r3, #4
 8003702:	653b      	str	r3, [r7, #80]	; 0x50
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00e      	beq.n	8003728 <json_serialize_to_buffer_r+0x60c>
 800370a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370c:	461a      	mov	r2, r3
 800370e:	4948      	ldr	r1, [pc, #288]	; (8003830 <json_serialize_to_buffer_r+0x714>)
 8003710:	68b8      	ldr	r0, [r7, #8]
 8003712:	f008 f971 	bl	800b9f8 <memcpy>
 8003716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4413      	add	r3, r2
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4413      	add	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	4413      	add	r3, r2
 800372e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003730:	e017      	b.n	8003762 <json_serialize_to_buffer_r+0x646>
            } else {
                APPEND_STRING("false");
 8003732:	2305      	movs	r3, #5
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <json_serialize_to_buffer_r+0x63e>
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	461a      	mov	r2, r3
 8003740:	493c      	ldr	r1, [pc, #240]	; (8003834 <json_serialize_to_buffer_r+0x718>)
 8003742:	68b8      	ldr	r0, [r7, #8]
 8003744:	f008 f958 	bl	800b9f8 <memcpy>
 8003748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4413      	add	r3, r2
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4413      	add	r3, r2
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800375c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375e:	4413      	add	r3, r2
 8003760:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            return written_total;
 8003762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003764:	e05b      	b.n	800381e <json_serialize_to_buffer_r+0x702>
        case JSONNumber:
            num = json_value_get_number(value);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fec0 	bl	80044ec <json_value_get_number>
 800376c:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <json_serialize_to_buffer_r+0x65e>
                num_buf = buf;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	663b      	str	r3, [r7, #96]	; 0x60
            }
            if (parson_number_serialization_function) {
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <json_serialize_to_buffer_r+0x71c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <json_serialize_to_buffer_r+0x676>
                written = parson_number_serialization_function(num, num_buf);
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <json_serialize_to_buffer_r+0x71c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003788:	ed97 0b06 	vldr	d0, [r7, #24]
 800378c:	4798      	blx	r3
 800378e:	6538      	str	r0, [r7, #80]	; 0x50
 8003790:	e013      	b.n	80037ba <json_serialize_to_buffer_r+0x69e>
            } else if (parson_float_format) {
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <json_serialize_to_buffer_r+0x720>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <json_serialize_to_buffer_r+0x690>
                written = sprintf(num_buf, parson_float_format, num);
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <json_serialize_to_buffer_r+0x720>)
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80037a4:	f008 fad6 	bl	800bd54 <siprintf>
 80037a8:	6538      	str	r0, [r7, #80]	; 0x50
 80037aa:	e006      	b.n	80037ba <json_serialize_to_buffer_r+0x69e>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 80037ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b0:	4923      	ldr	r1, [pc, #140]	; (8003840 <json_serialize_to_buffer_r+0x724>)
 80037b2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80037b4:	f008 face 	bl	800bd54 <siprintf>
 80037b8:	6538      	str	r0, [r7, #80]	; 0x50
            }
            if (written < 0) {
 80037ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da02      	bge.n	80037c6 <json_serialize_to_buffer_r+0x6aa>
                return -1;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	e02b      	b.n	800381e <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <json_serialize_to_buffer_r+0x6b8>
                buf += written;
 80037cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4413      	add	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 80037d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d8:	4413      	add	r3, r2
 80037da:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80037dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037de:	e01e      	b.n	800381e <json_serialize_to_buffer_r+0x702>
        case JSONNull:
            APPEND_STRING("null");
 80037e0:	2304      	movs	r3, #4
 80037e2:	653b      	str	r3, [r7, #80]	; 0x50
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00e      	beq.n	8003808 <json_serialize_to_buffer_r+0x6ec>
 80037ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ec:	461a      	mov	r2, r3
 80037ee:	4915      	ldr	r1, [pc, #84]	; (8003844 <json_serialize_to_buffer_r+0x728>)
 80037f0:	68b8      	ldr	r0, [r7, #8]
 80037f2:	f008 f901 	bl	800b9f8 <memcpy>
 80037f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	4413      	add	r3, r2
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4413      	add	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800380a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380c:	4413      	add	r3, r2
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8003810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003812:	e004      	b.n	800381e <json_serialize_to_buffer_r+0x702>
        case JSONError:
            return -1;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	e001      	b.n	800381e <json_serialize_to_buffer_r+0x702>
        default:
            return -1;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3758      	adds	r7, #88	; 0x58
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	0800ec1c 	.word	0x0800ec1c
 800382c:	0800ec38 	.word	0x0800ec38
 8003830:	0800ebfc 	.word	0x0800ebfc
 8003834:	0800ec04 	.word	0x0800ec04
 8003838:	20000014 	.word	0x20000014
 800383c:	20000744 	.word	0x20000744
 8003840:	0800ec3c 	.word	0x0800ec3c
 8003844:	0800ec0c 	.word	0x0800ec0c

08003848 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 800385c:	f04f 33ff 	mov.w	r3, #4294967295
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
    // +BCH
    //APPEND_STRING("\"");
    APPEND_STRING("\\\"");
 8003866:	2302      	movs	r3, #2
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00e      	beq.n	800388e <json_serialize_string+0x46>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	461a      	mov	r2, r3
 8003874:	49b8      	ldr	r1, [pc, #736]	; (8003b58 <json_serialize_string+0x310>)
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f008 f8be 	bl	800b9f8 <memcpy>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	f000 bc9b 	b.w	80041d4 <json_serialize_string+0x98c>
        c = string[i];
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b5c      	cmp	r3, #92	; 0x5c
 80038ac:	f200 8482 	bhi.w	80041b4 <json_serialize_string+0x96c>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <json_serialize_string+0x70>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	08003ba3 	.word	0x08003ba3
 80038bc:	08003bd5 	.word	0x08003bd5
 80038c0:	08003c07 	.word	0x08003c07
 80038c4:	08003c39 	.word	0x08003c39
 80038c8:	08003c6b 	.word	0x08003c6b
 80038cc:	08003c9d 	.word	0x08003c9d
 80038d0:	08003ccf 	.word	0x08003ccf
 80038d4:	08003d01 	.word	0x08003d01
 80038d8:	08003a91 	.word	0x08003a91
 80038dc:	08003b71 	.word	0x08003b71
 80038e0:	08003af5 	.word	0x08003af5
 80038e4:	08003d33 	.word	0x08003d33
 80038e8:	08003ac3 	.word	0x08003ac3
 80038ec:	08003b27 	.word	0x08003b27
 80038f0:	08003d65 	.word	0x08003d65
 80038f4:	08003d97 	.word	0x08003d97
 80038f8:	08003df9 	.word	0x08003df9
 80038fc:	08003e2b 	.word	0x08003e2b
 8003900:	08003e5d 	.word	0x08003e5d
 8003904:	08003e8f 	.word	0x08003e8f
 8003908:	08003ec1 	.word	0x08003ec1
 800390c:	08003ef3 	.word	0x08003ef3
 8003910:	08003f25 	.word	0x08003f25
 8003914:	08003f57 	.word	0x08003f57
 8003918:	08003f89 	.word	0x08003f89
 800391c:	08003fbb 	.word	0x08003fbb
 8003920:	08003fed 	.word	0x08003fed
 8003924:	0800401f 	.word	0x0800401f
 8003928:	08004081 	.word	0x08004081
 800392c:	080040b3 	.word	0x080040b3
 8003930:	080040e5 	.word	0x080040e5
 8003934:	08004117 	.word	0x08004117
 8003938:	080041b5 	.word	0x080041b5
 800393c:	080041b5 	.word	0x080041b5
 8003940:	08003a2d 	.word	0x08003a2d
 8003944:	080041b5 	.word	0x080041b5
 8003948:	080041b5 	.word	0x080041b5
 800394c:	080041b5 	.word	0x080041b5
 8003950:	080041b5 	.word	0x080041b5
 8003954:	080041b5 	.word	0x080041b5
 8003958:	080041b5 	.word	0x080041b5
 800395c:	080041b5 	.word	0x080041b5
 8003960:	080041b5 	.word	0x080041b5
 8003964:	080041b5 	.word	0x080041b5
 8003968:	080041b5 	.word	0x080041b5
 800396c:	080041b5 	.word	0x080041b5
 8003970:	080041b5 	.word	0x080041b5
 8003974:	08004149 	.word	0x08004149
 8003978:	080041b5 	.word	0x080041b5
 800397c:	080041b5 	.word	0x080041b5
 8003980:	080041b5 	.word	0x080041b5
 8003984:	080041b5 	.word	0x080041b5
 8003988:	080041b5 	.word	0x080041b5
 800398c:	080041b5 	.word	0x080041b5
 8003990:	080041b5 	.word	0x080041b5
 8003994:	080041b5 	.word	0x080041b5
 8003998:	080041b5 	.word	0x080041b5
 800399c:	080041b5 	.word	0x080041b5
 80039a0:	080041b5 	.word	0x080041b5
 80039a4:	080041b5 	.word	0x080041b5
 80039a8:	080041b5 	.word	0x080041b5
 80039ac:	080041b5 	.word	0x080041b5
 80039b0:	080041b5 	.word	0x080041b5
 80039b4:	080041b5 	.word	0x080041b5
 80039b8:	080041b5 	.word	0x080041b5
 80039bc:	080041b5 	.word	0x080041b5
 80039c0:	080041b5 	.word	0x080041b5
 80039c4:	080041b5 	.word	0x080041b5
 80039c8:	080041b5 	.word	0x080041b5
 80039cc:	080041b5 	.word	0x080041b5
 80039d0:	080041b5 	.word	0x080041b5
 80039d4:	080041b5 	.word	0x080041b5
 80039d8:	080041b5 	.word	0x080041b5
 80039dc:	080041b5 	.word	0x080041b5
 80039e0:	080041b5 	.word	0x080041b5
 80039e4:	080041b5 	.word	0x080041b5
 80039e8:	080041b5 	.word	0x080041b5
 80039ec:	080041b5 	.word	0x080041b5
 80039f0:	080041b5 	.word	0x080041b5
 80039f4:	080041b5 	.word	0x080041b5
 80039f8:	080041b5 	.word	0x080041b5
 80039fc:	080041b5 	.word	0x080041b5
 8003a00:	080041b5 	.word	0x080041b5
 8003a04:	080041b5 	.word	0x080041b5
 8003a08:	080041b5 	.word	0x080041b5
 8003a0c:	080041b5 	.word	0x080041b5
 8003a10:	080041b5 	.word	0x080041b5
 8003a14:	080041b5 	.word	0x080041b5
 8003a18:	080041b5 	.word	0x080041b5
 8003a1c:	080041b5 	.word	0x080041b5
 8003a20:	080041b5 	.word	0x080041b5
 8003a24:	080041b5 	.word	0x080041b5
 8003a28:	08003a5f 	.word	0x08003a5f
        	case '\"': APPEND_STRING("\\\""); break;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <json_serialize_string+0x20c>
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4947      	ldr	r1, [pc, #284]	; (8003b58 <json_serialize_string+0x310>)
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f007 ffdb 	bl	800b9f8 <memcpy>
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	e3b7      	b.n	80041ce <json_serialize_string+0x986>
            case '\\': APPEND_STRING("\\\\"); break;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <json_serialize_string+0x23e>
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	493b      	ldr	r1, [pc, #236]	; (8003b5c <json_serialize_string+0x314>)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f007 ffc2 	bl	800b9f8 <memcpy>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e39e      	b.n	80041ce <json_serialize_string+0x986>
            case '\b': APPEND_STRING("\\b"); break;
 8003a90:	2302      	movs	r3, #2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <json_serialize_string+0x270>
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4930      	ldr	r1, [pc, #192]	; (8003b60 <json_serialize_string+0x318>)
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f007 ffa9 	bl	800b9f8 <memcpy>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4413      	add	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e385      	b.n	80041ce <json_serialize_string+0x986>
            case '\f': APPEND_STRING("\\f"); break;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <json_serialize_string+0x2a2>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4924      	ldr	r1, [pc, #144]	; (8003b64 <json_serialize_string+0x31c>)
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f007 ff90 	bl	800b9f8 <memcpy>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e36c      	b.n	80041ce <json_serialize_string+0x986>
            case '\n': APPEND_STRING("\\n"); break;
 8003af4:	2302      	movs	r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <json_serialize_string+0x2d4>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4919      	ldr	r1, [pc, #100]	; (8003b68 <json_serialize_string+0x320>)
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f007 ff77 	bl	800b9f8 <memcpy>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e353      	b.n	80041ce <json_serialize_string+0x986>
            case '\r': APPEND_STRING("\\r"); break;
 8003b26:	2302      	movs	r3, #2
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00e      	beq.n	8003b4e <json_serialize_string+0x306>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	461a      	mov	r2, r3
 8003b34:	490d      	ldr	r1, [pc, #52]	; (8003b6c <json_serialize_string+0x324>)
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f007 ff5e 	bl	800b9f8 <memcpy>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e33a      	b.n	80041ce <json_serialize_string+0x986>
 8003b58:	0800ec44 	.word	0x0800ec44
 8003b5c:	0800ec48 	.word	0x0800ec48
 8003b60:	0800ec4c 	.word	0x0800ec4c
 8003b64:	0800ec50 	.word	0x0800ec50
 8003b68:	0800ec54 	.word	0x0800ec54
 8003b6c:	0800ec58 	.word	0x0800ec58
            case '\t': APPEND_STRING("\\t"); break;
 8003b70:	2302      	movs	r3, #2
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <json_serialize_string+0x350>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4992      	ldr	r1, [pc, #584]	; (8003dc8 <json_serialize_string+0x580>)
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f007 ff39 	bl	800b9f8 <memcpy>
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e315      	b.n	80041ce <json_serialize_string+0x986>
            case '\x00': APPEND_STRING("\\u0000"); break;
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <json_serialize_string+0x382>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4986      	ldr	r1, [pc, #536]	; (8003dcc <json_serialize_string+0x584>)
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f007 ff20 	bl	800b9f8 <memcpy>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e2fc      	b.n	80041ce <json_serialize_string+0x986>
            case '\x01': APPEND_STRING("\\u0001"); break;
 8003bd4:	2306      	movs	r3, #6
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <json_serialize_string+0x3b4>
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	461a      	mov	r2, r3
 8003be2:	497b      	ldr	r1, [pc, #492]	; (8003dd0 <json_serialize_string+0x588>)
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f007 ff07 	bl	800b9f8 <memcpy>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	e2e3      	b.n	80041ce <json_serialize_string+0x986>
            case '\x02': APPEND_STRING("\\u0002"); break;
 8003c06:	2306      	movs	r3, #6
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <json_serialize_string+0x3e6>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	461a      	mov	r2, r3
 8003c14:	496f      	ldr	r1, [pc, #444]	; (8003dd4 <json_serialize_string+0x58c>)
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f007 feee 	bl	800b9f8 <memcpy>
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e2ca      	b.n	80041ce <json_serialize_string+0x986>
            case '\x03': APPEND_STRING("\\u0003"); break;
 8003c38:	2306      	movs	r3, #6
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <json_serialize_string+0x418>
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4964      	ldr	r1, [pc, #400]	; (8003dd8 <json_serialize_string+0x590>)
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f007 fed5 	bl	800b9f8 <memcpy>
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e2b1      	b.n	80041ce <json_serialize_string+0x986>
            case '\x04': APPEND_STRING("\\u0004"); break;
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <json_serialize_string+0x44a>
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	461a      	mov	r2, r3
 8003c78:	4958      	ldr	r1, [pc, #352]	; (8003ddc <json_serialize_string+0x594>)
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f007 febc 	bl	800b9f8 <memcpy>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e298      	b.n	80041ce <json_serialize_string+0x986>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8003c9c:	2306      	movs	r3, #6
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00e      	beq.n	8003cc4 <json_serialize_string+0x47c>
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	494d      	ldr	r1, [pc, #308]	; (8003de0 <json_serialize_string+0x598>)
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f007 fea3 	bl	800b9f8 <memcpy>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	e27f      	b.n	80041ce <json_serialize_string+0x986>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8003cce:	2306      	movs	r3, #6
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00e      	beq.n	8003cf6 <json_serialize_string+0x4ae>
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4941      	ldr	r1, [pc, #260]	; (8003de4 <json_serialize_string+0x59c>)
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f007 fe8a 	bl	800b9f8 <memcpy>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e266      	b.n	80041ce <json_serialize_string+0x986>
            case '\x07': APPEND_STRING("\\u0007"); break;
 8003d00:	2306      	movs	r3, #6
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00e      	beq.n	8003d28 <json_serialize_string+0x4e0>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4936      	ldr	r1, [pc, #216]	; (8003de8 <json_serialize_string+0x5a0>)
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f007 fe71 	bl	800b9f8 <memcpy>
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e24d      	b.n	80041ce <json_serialize_string+0x986>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 8003d32:	2306      	movs	r3, #6
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <json_serialize_string+0x512>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	492a      	ldr	r1, [pc, #168]	; (8003dec <json_serialize_string+0x5a4>)
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f007 fe58 	bl	800b9f8 <memcpy>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4413      	add	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e234      	b.n	80041ce <json_serialize_string+0x986>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 8003d64:	2306      	movs	r3, #6
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <json_serialize_string+0x544>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	461a      	mov	r2, r3
 8003d72:	491f      	ldr	r1, [pc, #124]	; (8003df0 <json_serialize_string+0x5a8>)
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f007 fe3f 	bl	800b9f8 <memcpy>
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e21b      	b.n	80041ce <json_serialize_string+0x986>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 8003d96:	2306      	movs	r3, #6
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <json_serialize_string+0x576>
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4913      	ldr	r1, [pc, #76]	; (8003df4 <json_serialize_string+0x5ac>)
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f007 fe26 	bl	800b9f8 <memcpy>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e202      	b.n	80041ce <json_serialize_string+0x986>
 8003dc8:	0800ec5c 	.word	0x0800ec5c
 8003dcc:	0800ec60 	.word	0x0800ec60
 8003dd0:	0800ec68 	.word	0x0800ec68
 8003dd4:	0800ec70 	.word	0x0800ec70
 8003dd8:	0800ec78 	.word	0x0800ec78
 8003ddc:	0800ec80 	.word	0x0800ec80
 8003de0:	0800ec88 	.word	0x0800ec88
 8003de4:	0800ec90 	.word	0x0800ec90
 8003de8:	0800ec98 	.word	0x0800ec98
 8003dec:	0800eca0 	.word	0x0800eca0
 8003df0:	0800eca8 	.word	0x0800eca8
 8003df4:	0800ecb0 	.word	0x0800ecb0
            case '\x10': APPEND_STRING("\\u0010"); break;
 8003df8:	2306      	movs	r3, #6
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <json_serialize_string+0x5d8>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4992      	ldr	r1, [pc, #584]	; (8004050 <json_serialize_string+0x808>)
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f007 fdf5 	bl	800b9f8 <memcpy>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e1d1      	b.n	80041ce <json_serialize_string+0x986>
            case '\x11': APPEND_STRING("\\u0011"); break;
 8003e2a:	2306      	movs	r3, #6
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <json_serialize_string+0x60a>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	461a      	mov	r2, r3
 8003e38:	4986      	ldr	r1, [pc, #536]	; (8004054 <json_serialize_string+0x80c>)
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f007 fddc 	bl	800b9f8 <memcpy>
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	e1b8      	b.n	80041ce <json_serialize_string+0x986>
            case '\x12': APPEND_STRING("\\u0012"); break;
 8003e5c:	2306      	movs	r3, #6
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00e      	beq.n	8003e84 <json_serialize_string+0x63c>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	497b      	ldr	r1, [pc, #492]	; (8004058 <json_serialize_string+0x810>)
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f007 fdc3 	bl	800b9f8 <memcpy>
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	4413      	add	r3, r2
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	e19f      	b.n	80041ce <json_serialize_string+0x986>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8003e8e:	2306      	movs	r3, #6
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <json_serialize_string+0x66e>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	496f      	ldr	r1, [pc, #444]	; (800405c <json_serialize_string+0x814>)
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f007 fdaa 	bl	800b9f8 <memcpy>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e186      	b.n	80041ce <json_serialize_string+0x986>
            case '\x14': APPEND_STRING("\\u0014"); break;
 8003ec0:	2306      	movs	r3, #6
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <json_serialize_string+0x6a0>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4964      	ldr	r1, [pc, #400]	; (8004060 <json_serialize_string+0x818>)
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f007 fd91 	bl	800b9f8 <memcpy>
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e16d      	b.n	80041ce <json_serialize_string+0x986>
            case '\x15': APPEND_STRING("\\u0015"); break;
 8003ef2:	2306      	movs	r3, #6
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00e      	beq.n	8003f1a <json_serialize_string+0x6d2>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4958      	ldr	r1, [pc, #352]	; (8004064 <json_serialize_string+0x81c>)
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f007 fd78 	bl	800b9f8 <memcpy>
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	e154      	b.n	80041ce <json_serialize_string+0x986>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8003f24:	2306      	movs	r3, #6
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00e      	beq.n	8003f4c <json_serialize_string+0x704>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	461a      	mov	r2, r3
 8003f32:	494d      	ldr	r1, [pc, #308]	; (8004068 <json_serialize_string+0x820>)
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f007 fd5f 	bl	800b9f8 <memcpy>
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	e13b      	b.n	80041ce <json_serialize_string+0x986>
            case '\x17': APPEND_STRING("\\u0017"); break;
 8003f56:	2306      	movs	r3, #6
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <json_serialize_string+0x736>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	461a      	mov	r2, r3
 8003f64:	4941      	ldr	r1, [pc, #260]	; (800406c <json_serialize_string+0x824>)
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f007 fd46 	bl	800b9f8 <memcpy>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e122      	b.n	80041ce <json_serialize_string+0x986>
            case '\x18': APPEND_STRING("\\u0018"); break;
 8003f88:	2306      	movs	r3, #6
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00e      	beq.n	8003fb0 <json_serialize_string+0x768>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	461a      	mov	r2, r3
 8003f96:	4936      	ldr	r1, [pc, #216]	; (8004070 <json_serialize_string+0x828>)
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f007 fd2d 	bl	800b9f8 <memcpy>
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e109      	b.n	80041ce <json_serialize_string+0x986>
            case '\x19': APPEND_STRING("\\u0019"); break;
 8003fba:	2306      	movs	r3, #6
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00e      	beq.n	8003fe2 <json_serialize_string+0x79a>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	492a      	ldr	r1, [pc, #168]	; (8004074 <json_serialize_string+0x82c>)
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f007 fd14 	bl	800b9f8 <memcpy>
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e0f0      	b.n	80041ce <json_serialize_string+0x986>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8003fec:	2306      	movs	r3, #6
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00e      	beq.n	8004014 <json_serialize_string+0x7cc>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	491f      	ldr	r1, [pc, #124]	; (8004078 <json_serialize_string+0x830>)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f007 fcfb 	bl	800b9f8 <memcpy>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e0d7      	b.n	80041ce <json_serialize_string+0x986>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 800401e:	2306      	movs	r3, #6
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <json_serialize_string+0x7fe>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	461a      	mov	r2, r3
 800402c:	4913      	ldr	r1, [pc, #76]	; (800407c <json_serialize_string+0x834>)
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f007 fce2 	bl	800b9f8 <memcpy>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e0be      	b.n	80041ce <json_serialize_string+0x986>
 8004050:	0800ecb8 	.word	0x0800ecb8
 8004054:	0800ecc0 	.word	0x0800ecc0
 8004058:	0800ecc8 	.word	0x0800ecc8
 800405c:	0800ecd0 	.word	0x0800ecd0
 8004060:	0800ecd8 	.word	0x0800ecd8
 8004064:	0800ece0 	.word	0x0800ece0
 8004068:	0800ece8 	.word	0x0800ece8
 800406c:	0800ecf0 	.word	0x0800ecf0
 8004070:	0800ecf8 	.word	0x0800ecf8
 8004074:	0800ed00 	.word	0x0800ed00
 8004078:	0800ed08 	.word	0x0800ed08
 800407c:	0800ed10 	.word	0x0800ed10
            case '\x1c': APPEND_STRING("\\u001c"); break;
 8004080:	2306      	movs	r3, #6
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00e      	beq.n	80040a8 <json_serialize_string+0x860>
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	461a      	mov	r2, r3
 800408e:	4962      	ldr	r1, [pc, #392]	; (8004218 <json_serialize_string+0x9d0>)
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f007 fcb1 	bl	800b9f8 <memcpy>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e08d      	b.n	80041ce <json_serialize_string+0x986>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 80040b2:	2306      	movs	r3, #6
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <json_serialize_string+0x892>
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	461a      	mov	r2, r3
 80040c0:	4956      	ldr	r1, [pc, #344]	; (800421c <json_serialize_string+0x9d4>)
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f007 fc98 	bl	800b9f8 <memcpy>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e074      	b.n	80041ce <json_serialize_string+0x986>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 80040e4:	2306      	movs	r3, #6
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00e      	beq.n	800410c <json_serialize_string+0x8c4>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	461a      	mov	r2, r3
 80040f2:	494b      	ldr	r1, [pc, #300]	; (8004220 <json_serialize_string+0x9d8>)
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f007 fc7f 	bl	800b9f8 <memcpy>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4413      	add	r3, r2
 800410a:	607b      	str	r3, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e05b      	b.n	80041ce <json_serialize_string+0x986>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8004116:	2306      	movs	r3, #6
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <json_serialize_string+0x8f6>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	461a      	mov	r2, r3
 8004124:	493f      	ldr	r1, [pc, #252]	; (8004224 <json_serialize_string+0x9dc>)
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f007 fc66 	bl	800b9f8 <memcpy>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e042      	b.n	80041ce <json_serialize_string+0x986>
            case '/':
                if (parson_escape_slashes) {
 8004148:	4b37      	ldr	r3, [pc, #220]	; (8004228 <json_serialize_string+0x9e0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d018      	beq.n	8004182 <json_serialize_string+0x93a>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8004150:	2302      	movs	r3, #2
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <json_serialize_string+0x930>
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	461a      	mov	r2, r3
 800415e:	4933      	ldr	r1, [pc, #204]	; (800422c <json_serialize_string+0x9e4>)
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f007 fc49 	bl	800b9f8 <memcpy>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 8004180:	e025      	b.n	80041ce <json_serialize_string+0x986>
                    APPEND_STRING("/");
 8004182:	2301      	movs	r3, #1
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <json_serialize_string+0x962>
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	461a      	mov	r2, r3
 8004190:	4927      	ldr	r1, [pc, #156]	; (8004230 <json_serialize_string+0x9e8>)
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f007 fc30 	bl	800b9f8 <memcpy>
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
                break;
 80041b2:	e00c      	b.n	80041ce <json_serialize_string+0x986>
            default:
                if (buf != NULL) {
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <json_serialize_string+0x97e>
                    buf[0] = c;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7dfa      	ldrb	r2, [r7, #23]
 80041be:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3301      	adds	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61bb      	str	r3, [r7, #24]
                break;
 80041cc:	bf00      	nop
    for (i = 0; i < len; i++) {
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f4ff ab60 	bcc.w	800389e <json_serialize_string+0x56>
        }
    }
    // +BCH
	//APPEND_STRING("\"");
	APPEND_STRING("\\\"");
 80041de:	2302      	movs	r3, #2
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <json_serialize_string+0x9be>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4911      	ldr	r1, [pc, #68]	; (8004234 <json_serialize_string+0x9ec>)
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f007 fc02 	bl	800b9f8 <memcpy>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4413      	add	r3, r2
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
    return written_total;
 800420e:	69bb      	ldr	r3, [r7, #24]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	0800ed18 	.word	0x0800ed18
 800421c:	0800ed20 	.word	0x0800ed20
 8004220:	0800ed28 	.word	0x0800ed28
 8004224:	0800ed30 	.word	0x0800ed30
 8004228:	20000010 	.word	0x20000010
 800422c:	0800ed38 	.word	0x0800ed38
 8004230:	0800ed3c 	.word	0x0800ed3c
 8004234:	0800ec44 	.word	0x0800ec44

08004238 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <json_parse_string+0x12>
        return NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	e016      	b.n	8004278 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2bef      	cmp	r3, #239	; 0xef
 8004250:	d10c      	bne.n	800426c <json_parse_string+0x34>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3301      	adds	r3, #1
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2bbb      	cmp	r3, #187	; 0xbb
 800425a:	d107      	bne.n	800426c <json_parse_string+0x34>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3302      	adds	r3, #2
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2bbf      	cmp	r3, #191	; 0xbf
 8004264:	d102      	bne.n	800426c <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3303      	adds	r3, #3
 800426a:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe fbed 	bl	8002a50 <parse_value>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <json_object_get_value+0x16>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <json_object_get_value+0x1a>
        return NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	e009      	b.n	80042ae <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 800429a:	6838      	ldr	r0, [r7, #0]
 800429c:	f7fb ff70 	bl	8000180 <strlen>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fe f85b 	bl	8002362 <json_object_getn_value>
 80042ac:	4603      	mov	r3, r0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <json_object_get_number>:

size_t json_object_get_string_len(const JSON_Object *object, const char *name) {
    return json_value_get_string_len(json_object_get_value(object, name));
}

double json_object_get_number(const JSON_Object *object, const char *name) {
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_get_value(object, name));
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ffdc 	bl	8004280 <json_object_get_value>
 80042c8:	4603      	mov	r3, r0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f90e 	bl	80044ec <json_value_get_number>
 80042d0:	eeb0 7a40 	vmov.f32	s14, s0
 80042d4:	eef0 7a60 	vmov.f32	s15, s1
}
 80042d8:	eeb0 0a47 	vmov.f32	s0, s14
 80042dc:	eef0 0a67 	vmov.f32	s1, s15
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <json_object_get_count+0x14>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	e000      	b.n	80042fc <json_object_get_count+0x16>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <json_object_get_name+0x1e>
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ffe4 	bl	80042e6 <json_object_get_count>
 800431e:	4602      	mov	r2, r0
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4293      	cmp	r3, r2
 8004324:	d301      	bcc.n	800432a <json_object_get_name+0x22>
        return NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	e005      	b.n	8004336 <json_object_get_name+0x2e>
    }
    return object->names[index];
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	681b      	ldr	r3, [r3, #0]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <json_object_get_value_at+0x1e>
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffc9 	bl	80042e6 <json_object_get_count>
 8004354:	4602      	mov	r2, r0
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	4293      	cmp	r3, r2
 800435a:	d301      	bcc.n	8004360 <json_object_get_value_at+0x22>
        return NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	e005      	b.n	800436c <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	681b      	ldr	r3, [r3, #0]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    if (!object) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <json_object_get_wrapping_value+0x12>
        return NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	e001      	b.n	800438a <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <json_array_get_value+0x1e>
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f810 	bl	80043cc <json_array_get_count>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d301      	bcc.n	80043b8 <json_array_get_value+0x22>
        return NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e005      	b.n	80043c4 <json_array_get_value+0x2e>
    }
    return array->items[index];
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <json_array_get_count+0x14>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	e000      	b.n	80043e2 <json_array_get_count+0x16>
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
    if (!array) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <json_array_get_wrapping_value+0x12>
        return NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e001      	b.n	8004404 <json_array_get_wrapping_value+0x16>
    }
    return array->wrapping_value;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <json_value_get_type+0x14>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	e001      	b.n	8004428 <json_value_get_type+0x18>
 8004424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff ffe7 	bl	8004410 <json_value_get_type>
 8004442:	4603      	mov	r3, r0
 8004444:	2b04      	cmp	r3, #4
 8004446:	d102      	bne.n	800444e <json_value_get_object+0x1a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	e000      	b.n	8004450 <json_value_get_object+0x1c>
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ffd5 	bl	8004410 <json_value_get_type>
 8004466:	4603      	mov	r3, r0
 8004468:	2b05      	cmp	r3, #5
 800446a:	d102      	bne.n	8004472 <json_value_get_array+0x1a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	e000      	b.n	8004474 <json_value_get_array+0x1c>
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ffc3 	bl	8004410 <json_value_get_type>
 800448a:	4603      	mov	r3, r0
 800448c:	2b02      	cmp	r3, #2
 800448e:	d102      	bne.n	8004496 <json_value_get_string_desc+0x1a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3308      	adds	r3, #8
 8004494:	e000      	b.n	8004498 <json_value_get_string_desc+0x1c>
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ffe7 	bl	800447c <json_value_get_string_desc>
 80044ae:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <json_value_get_string+0x1c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	e000      	b.n	80044be <json_value_get_string+0x1e>
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ffd4 	bl	800447c <json_value_get_string_desc>
 80044d4:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <json_value_get_string_len+0x1c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	e000      	b.n	80044e4 <json_value_get_string_len+0x1e>
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff ff8b 	bl	8004410 <json_value_get_type>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d103      	bne.n	8004508 <json_value_get_number+0x1c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004506:	e003      	b.n	8004510 <json_value_get_number+0x24>
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	ec43 2b17 	vmov	d7, r2, r3
}
 8004514:	eeb0 0a47 	vmov.f32	s0, s14
 8004518:	eef0 0a67 	vmov.f32	s1, s15
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff70 	bl	8004410 <json_value_get_type>
 8004530:	4603      	mov	r3, r0
 8004532:	2b06      	cmp	r3, #6
 8004534:	d102      	bne.n	800453c <json_value_get_boolean+0x1a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	e001      	b.n	8004540 <json_value_get_boolean+0x1e>
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff5d 	bl	8004410 <json_value_get_type>
 8004556:	4603      	mov	r3, r0
 8004558:	2b05      	cmp	r3, #5
 800455a:	d012      	beq.n	8004582 <json_value_free+0x3a>
 800455c:	2b05      	cmp	r3, #5
 800455e:	dc16      	bgt.n	800458e <json_value_free+0x46>
 8004560:	2b02      	cmp	r3, #2
 8004562:	d007      	beq.n	8004574 <json_value_free+0x2c>
 8004564:	2b04      	cmp	r3, #4
 8004566:	d112      	bne.n	800458e <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fd ff35 	bl	80023dc <json_object_free>
            break;
 8004572:	e00d      	b.n	8004590 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <json_value_free+0x58>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
            break;
 8004580:	e006      	b.n	8004590 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd ffd2 	bl	8002530 <json_array_free>
            break;
 800458c:	e000      	b.n	8004590 <json_value_free+0x48>
        default:
            break;
 800458e:	bf00      	nop
    }
    parson_free(value);
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <json_value_free+0x58>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <json_value_init_object+0x50>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2010      	movs	r0, #16
 80045b0:	4798      	blx	r3
 80045b2:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <json_value_init_object+0x1a>
        return NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e016      	b.n	80045ec <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2204      	movs	r2, #4
 80045c8:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd fc1c 	bl	8001e08 <json_object_make>
 80045d0:	4602      	mov	r2, r0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <json_value_init_object+0x46>
        parson_free(new_value);
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <json_value_init_object+0x54>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
        return NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <json_value_init_object+0x48>
    }
    return new_value;
 80045ea:	687b      	ldr	r3, [r7, #4]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000008 	.word	0x20000008
 80045f8:	2000000c 	.word	0x2000000c

080045fc <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <json_value_init_array+0x50>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2010      	movs	r0, #16
 8004608:	4798      	blx	r3
 800460a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <json_value_init_array+0x1a>
        return NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	e016      	b.n	8004644 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2205      	movs	r2, #5
 8004620:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_make(new_value);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd feee 	bl	8002404 <json_array_make>
 8004628:	4602      	mov	r2, r0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <json_value_init_array+0x46>
        parson_free(new_value);
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <json_value_init_array+0x54>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
        return NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <json_value_init_array+0x48>
    }
    return new_value;
 8004642:	687b      	ldr	r3, [r7, #4]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000008 	.word	0x20000008
 8004650:	2000000c 	.word	0x2000000c

08004654 <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 8004662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800466a:	f7fc fa37 	bl	8000adc <__aeabi_dcmpun>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d121      	bne.n	80046b8 <json_value_init_number+0x64>
 8004674:	683c      	ldr	r4, [r7, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800467c:	2301      	movs	r3, #1
 800467e:	461e      	mov	r6, r3
 8004680:	f04f 32ff 	mov.w	r2, #4294967295
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <json_value_init_number+0x9c>)
 8004686:	4620      	mov	r0, r4
 8004688:	4629      	mov	r1, r5
 800468a:	f7fc fa27 	bl	8000adc <__aeabi_dcmpun>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <json_value_init_number+0x58>
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <json_value_init_number+0x9c>)
 800469a:	4620      	mov	r0, r4
 800469c:	4629      	mov	r1, r5
 800469e:	f7fc f9ff 	bl	8000aa0 <__aeabi_dcmple>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <json_value_init_number+0x58>
 80046a8:	2300      	movs	r3, #0
 80046aa:	461e      	mov	r6, r3
 80046ac:	b2f3      	uxtb	r3, r6
 80046ae:	f083 0301 	eor.w	r3, r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <json_value_init_number+0x68>
        return NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e015      	b.n	80046e8 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <json_value_init_number+0xa0>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2010      	movs	r0, #16
 80046c2:	4798      	blx	r3
 80046c4:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <json_value_init_number+0x7c>
        return NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e00b      	b.n	80046e8 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2203      	movs	r2, #3
 80046da:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f0:	7fefffff 	.word	0x7fefffff
 80046f4:	20000008 	.word	0x20000008

080046f8 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <json_value_init_boolean+0x44>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2010      	movs	r0, #16
 8004706:	4798      	blx	r3
 8004708:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <json_value_init_boolean+0x1c>
        return NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	e00f      	b.n	8004734 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2206      	movs	r2, #6
 800471e:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	609a      	str	r2, [r3, #8]
    return new_value;
 8004732:	68fb      	ldr	r3, [r7, #12]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000008 	.word	0x20000008

08004740 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <json_value_init_null+0x30>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2010      	movs	r0, #16
 800474c:	4798      	blx	r3
 800474e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <json_value_init_null+0x1a>
        return NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	e006      	b.n	8004768 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	605a      	str	r2, [r3, #4]
    return new_value;
 8004766:	687b      	ldr	r3, [r7, #4]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000008 	.word	0x20000008

08004774 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8004774:	b580      	push	{r7, lr}
 8004776:	b096      	sub	sp, #88	; 0x58
 8004778:	af02      	add	r7, sp, #8
 800477a:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fe fcc7 	bl	800311c <json_serialize_to_buffer_r>
 800478e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8004790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004792:	2b00      	cmp	r3, #0
 8004794:	db02      	blt.n	800479c <json_serialization_size+0x28>
 8004796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004798:	3301      	adds	r3, #1
 800479a:	e000      	b.n	800479e <json_serialization_size+0x2a>
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3750      	adds	r7, #80	; 0x50
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b088      	sub	sp, #32
 80047aa:	af02      	add	r7, sp, #8
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
    int written = -1;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff ffdb 	bl	8004774 <json_serialization_size>
 80047be:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <json_serialize_to_buffer+0x28>
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d202      	bcs.n	80047d4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
 80047d2:	e00f      	b.n	80047f4 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 80047d4:	2300      	movs	r3, #0
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	2200      	movs	r2, #0
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7fe fc9c 	bl	800311c <json_serialize_to_buffer_r>
 80047e4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da02      	bge.n	80047f2 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295
 80047f0:	e000      	b.n	80047f4 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 8004804:	f04f 33ff 	mov.w	r3, #4294967295
 8004808:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff ffb2 	bl	8004774 <json_serialization_size>
 8004810:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <json_serialize_to_string+0x24>
        return NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	e018      	b.n	8004852 <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <json_serialize_to_string+0x60>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6938      	ldr	r0, [r7, #16]
 8004826:	4798      	blx	r3
 8004828:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <json_serialize_to_string+0x38>
        return NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	e00e      	b.n	8004852 <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ffb4 	bl	80047a6 <json_serialize_to_buffer>
 800483e:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f80a 	bl	8004860 <json_free_serialized_string>
        return NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <json_serialize_to_string+0x56>
    }
    return buf;
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000008 	.word	0x20000008

08004860 <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <json_free_serialized_string+0x18>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	2000000c 	.word	0x2000000c

0800487c <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	; 0x38
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <json_object_set_value+0x3e>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <json_object_set_value+0x3e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <json_object_set_value+0x3e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <json_object_set_value+0x44>
        return JSONFailure;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	e095      	b.n	80049ec <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 80048c0:	68b8      	ldr	r0, [r7, #8]
 80048c2:	f7fb fc5d 	bl	8000180 <strlen>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4619      	mov	r1, r3
 80048ca:	68b8      	ldr	r0, [r7, #8]
 80048cc:	f7fd fa70 	bl	8001db0 <hash_string>
 80048d0:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 80048d6:	68b8      	ldr	r0, [r7, #8]
 80048d8:	f7fb fc52 	bl	8000180 <strlen>
 80048dc:	4602      	mov	r2, r0
 80048de:	f107 0314 	add.w	r3, r7, #20
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7fd fc42 	bl	8002172 <json_object_get_cell_ix>
 80048ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01f      	beq.n	8004936 <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 8004912:	6a38      	ldr	r0, [r7, #32]
 8004914:	f7ff fe18 	bl	8004548 <json_value_free>
        object->values[item_ix] = value;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff fd24 	bl	8004374 <json_object_get_wrapping_value>
 800492c:	4602      	mov	r2, r0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 8004932:	2300      	movs	r3, #0
 8004934:	e05a      	b.n	80049ec <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	429a      	cmp	r2, r3
 8004940:	d316      	bcc.n	8004970 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7fd fbaa 	bl	800209c <json_object_grow_and_rehash>
 8004948:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <json_object_set_value+0xda>
            return JSONFailure;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	e04a      	b.n	80049ec <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8004956:	68b8      	ldr	r0, [r7, #8]
 8004958:	f7fb fc12 	bl	8000180 <strlen>
 800495c:	4602      	mov	r2, r0
 800495e:	f107 0314 	add.w	r3, r7, #20
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f7fd fc02 	bl	8002172 <json_object_get_cell_ix>
 800496e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 8004970:	68b8      	ldr	r0, [r7, #8]
 8004972:	f7fd f949 	bl	8001c08 <parson_strdup>
 8004976:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <json_object_set_value+0x108>
        return JSONFailure;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	e033      	b.n	80049ec <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	6992      	ldr	r2, [r2, #24]
 80049a2:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c2:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d2:	601a      	str	r2, [r3, #0]
    object->count++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fcc8 	bl	8004374 <json_object_get_wrapping_value>
 80049e4:	4602      	mov	r2, r0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3730      	adds	r7, #48	; 0x30
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 8004a02:	ed97 0b00 	vldr	d0, [r7]
 8004a06:	f7ff fe25 	bl	8004654 <json_value_init_number>
 8004a0a:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff33 	bl	800487c <json_object_set_value>
 8004a16:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <json_object_set_number+0x30>
        json_value_free(value);
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f7ff fd92 	bl	8004548 <json_value_free>
    }
    return status;
 8004a24:	693b      	ldr	r3, [r7, #16]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <LL_AHB2_GRP1_EnableClock>:
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4013      	ands	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a84:	68fb      	ldr	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af6:	b480      	push	{r7}
 8004af8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <HAL_ADC_MspInit+0x24>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d103      	bne.n	8004b1e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b1a:	f7ff ff88 	bl	8004a2e <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	50040000 	.word	0x50040000

08004b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b09c      	sub	sp, #112	; 0x70
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	2250      	movs	r2, #80	; 0x50
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f006 ff7b 	bl	800ba48 <memset>
  if(huart->Instance==LPUART1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a44      	ldr	r2, [pc, #272]	; (8004c68 <HAL_UART_MspInit+0x13c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d156      	bne.n	8004c0a <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f003 ff31 	bl	80089d0 <HAL_RCCEx_PeriphCLKConfig>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004b74:	f7fd f802 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f7ff ff8a 	bl	8004a92 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b7e:	2004      	movs	r0, #4
 8004b80:	f7ff ff55 	bl	8004a2e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8004b84:	2303      	movs	r3, #3
 8004b86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b90:	2300      	movs	r3, #0
 8004b92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004b94:	2308      	movs	r3, #8
 8004b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4833      	ldr	r0, [pc, #204]	; (8004c6c <HAL_UART_MspInit+0x140>)
 8004ba0:	f002 f8ec 	bl	8006d7c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004ba4:	4b32      	ldr	r3, [pc, #200]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004ba6:	4a33      	ldr	r2, [pc, #204]	; (8004c74 <HAL_UART_MspInit+0x148>)
 8004ba8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bac:	2210      	movs	r2, #16
 8004bae:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bb0:	4b2f      	ldr	r3, [pc, #188]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb6:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bbc:	4b2c      	ldr	r3, [pc, #176]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bbe:	2280      	movs	r2, #128	; 0x80
 8004bc0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bc8:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8004bce:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bd4:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004bda:	4825      	ldr	r0, [pc, #148]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bdc:	f001 fd9c 	bl	8006718 <HAL_DMA_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8004be6:	f7fc ffc9 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a20      	ldr	r2, [pc, #128]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004bf2:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <HAL_UART_MspInit+0x144>)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	2025      	movs	r0, #37	; 0x25
 8004bfe:	f001 fd56 	bl	80066ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004c02:	2025      	movs	r0, #37	; 0x25
 8004c04:	f001 fd6d 	bl	80066e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c08:	e029      	b.n	8004c5e <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <HAL_UART_MspInit+0x14c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d124      	bne.n	8004c5e <HAL_UART_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c14:	2301      	movs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4618      	mov	r0, r3
 8004c22:	f003 fed5 	bl	80089d0 <HAL_RCCEx_PeriphCLKConfig>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8004c2c:	f7fc ffa6 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c34:	f7ff ff46 	bl	8004ac4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c38:	2002      	movs	r0, #2
 8004c3a:	f7ff fef8 	bl	8004a2e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004c3e:	23c0      	movs	r3, #192	; 0xc0
 8004c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c46:	2301      	movs	r3, #1
 8004c48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c4e:	2307      	movs	r3, #7
 8004c50:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c56:	4619      	mov	r1, r3
 8004c58:	4808      	ldr	r0, [pc, #32]	; (8004c7c <HAL_UART_MspInit+0x150>)
 8004c5a:	f002 f88f 	bl	8006d7c <HAL_GPIO_Init>
}
 8004c5e:	bf00      	nop
 8004c60:	3770      	adds	r7, #112	; 0x70
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40008000 	.word	0x40008000
 8004c6c:	48000800 	.word	0x48000800
 8004c70:	200003a0 	.word	0x200003a0
 8004c74:	40020008 	.word	0x40020008
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	48000400 	.word	0x48000400

08004c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <HAL_TIM_Base_MspInit+0x24>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d103      	bne.n	8004c9a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004c92:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004c96:	f7ff ff15 	bl	8004ac4 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb0:	f107 030c 	add.w	r3, r7, #12
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <HAL_PCD_MspInit+0x5c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d118      	bne.n	8004cfc <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cca:	2001      	movs	r0, #1
 8004ccc:	f7ff feaf 	bl	8004a2e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004cd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004ce2:	230a      	movs	r3, #10
 8004ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce6:	f107 030c 	add.w	r3, r7, #12
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cf0:	f002 f844 	bl	8006d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004cf4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004cf8:	f7ff feb2 	bl	8004a60 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004cfc:	bf00      	nop
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40006800 	.word	0x40006800

08004d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d0c:	e7fe      	b.n	8004d0c <NMI_Handler+0x4>

08004d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d12:	e7fe      	b.n	8004d12 <HardFault_Handler+0x4>

08004d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d18:	e7fe      	b.n	8004d18 <MemManage_Handler+0x4>

08004d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d1e:	e7fe      	b.n	8004d1e <BusFault_Handler+0x4>

08004d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d24:	e7fe      	b.n	8004d24 <UsageFault_Handler+0x4>

08004d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d26:	b480      	push	{r7}
 8004d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d2a:	bf00      	nop
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d42:	b480      	push	{r7}
 8004d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d54:	f000 f9b4 	bl	80050c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d58:	bf00      	nop
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004d60:	2001      	movs	r0, #1
 8004d62:	f002 f9c5 	bl	80070f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004d6e:	2010      	movs	r0, #16
 8004d70:	f002 f9be 	bl	80070f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004d7c:	4802      	ldr	r0, [pc, #8]	; (8004d88 <DMA1_Channel1_IRQHandler+0x10>)
 8004d7e:	f001 feac 	bl	8006ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200003a0 	.word	0x200003a0

08004d8c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004d90:	4802      	ldr	r0, [pc, #8]	; (8004d9c <LPUART1_IRQHandler+0x10>)
 8004d92:	f004 faaf 	bl	80092f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004d96:	bf00      	nop
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000278 	.word	0x20000278

08004da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return 1;
 8004da4:	2301      	movs	r3, #1
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <_kill>:

int _kill(int pid, int sig)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004dba:	f006 fbc3 	bl	800b544 <__errno>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2216      	movs	r2, #22
 8004dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8004dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_exit>:

void _exit (int status)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ffe7 	bl	8004db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004de2:	e7fe      	b.n	8004de2 <_exit+0x12>

08004de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e00a      	b.n	8004e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004df6:	f3af 8000 	nop.w
 8004dfa:	4601      	mov	r1, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	60ba      	str	r2, [r7, #8]
 8004e02:	b2ca      	uxtb	r2, r1
 8004e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	dbf0      	blt.n	8004df6 <_read+0x12>
  }

  return len;
 8004e14:	687b      	ldr	r3, [r7, #4]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e46:	605a      	str	r2, [r3, #4]
  return 0;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <_isatty>:

int _isatty(int file)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e5e:	2301      	movs	r3, #1
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <_sbrk+0x5c>)
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <_sbrk+0x60>)
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e9c:	4b13      	ldr	r3, [pc, #76]	; (8004eec <_sbrk+0x64>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ea4:	4b11      	ldr	r3, [pc, #68]	; (8004eec <_sbrk+0x64>)
 8004ea6:	4a12      	ldr	r2, [pc, #72]	; (8004ef0 <_sbrk+0x68>)
 8004ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <_sbrk+0x64>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d207      	bcs.n	8004ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004eb8:	f006 fb44 	bl	800b544 <__errno>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	220c      	movs	r2, #12
 8004ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec6:	e009      	b.n	8004edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ec8:	4b08      	ldr	r3, [pc, #32]	; (8004eec <_sbrk+0x64>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <_sbrk+0x64>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	4a05      	ldr	r2, [pc, #20]	; (8004eec <_sbrk+0x64>)
 8004ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20030000 	.word	0x20030000
 8004ee8:	00000400 	.word	0x00000400
 8004eec:	20000748 	.word	0x20000748
 8004ef0:	20001768 	.word	0x20001768

08004ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004ef8:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <SystemInit+0x98>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	4a23      	ldr	r2, [pc, #140]	; (8004f8c <SystemInit+0x98>)
 8004f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004f20:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f2c:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <SystemInit+0x9c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3e:	f023 0305 	bic.w	r3, r3, #5
 8004f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5e:	4a0d      	ldr	r2, [pc, #52]	; (8004f94 <SystemInit+0xa0>)
 8004f60:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	4a0b      	ldr	r2, [pc, #44]	; (8004f94 <SystemInit+0xa0>)
 8004f68:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]
}
 8004f82:	bf00      	nop
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000ed00 	.word	0xe000ed00
 8004f90:	faf6fefb 	.word	0xfaf6fefb
 8004f94:	22041000 	.word	0x22041000

08004f98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004f98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f9c:	3304      	adds	r3, #4

08004f9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fa0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004fa2:	d3f9      	bcc.n	8004f98 <CopyDataInit>
  bx lr
 8004fa4:	4770      	bx	lr

08004fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004fa6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004fa8:	3004      	adds	r0, #4

08004faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004faa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004fac:	d3fb      	bcc.n	8004fa6 <FillZerobss>
  bx lr
 8004fae:	4770      	bx	lr

08004fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004fb0:	480c      	ldr	r0, [pc, #48]	; (8004fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004fb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004fb4:	f7ff ff9e 	bl	8004ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004fb8:	480b      	ldr	r0, [pc, #44]	; (8004fe8 <LoopForever+0x6>)
 8004fba:	490c      	ldr	r1, [pc, #48]	; (8004fec <LoopForever+0xa>)
 8004fbc:	4a0c      	ldr	r2, [pc, #48]	; (8004ff0 <LoopForever+0xe>)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f7ff ffed 	bl	8004f9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004fc4:	480b      	ldr	r0, [pc, #44]	; (8004ff4 <LoopForever+0x12>)
 8004fc6:	490c      	ldr	r1, [pc, #48]	; (8004ff8 <LoopForever+0x16>)
 8004fc8:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <LoopForever+0x1a>)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f7ff ffe7 	bl	8004f9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004fd0:	480b      	ldr	r0, [pc, #44]	; (8005000 <LoopForever+0x1e>)
 8004fd2:	490c      	ldr	r1, [pc, #48]	; (8005004 <LoopForever+0x22>)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f7ff ffe8 	bl	8004faa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004fda:	f006 fc71 	bl	800b8c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004fde:	f7fc fa33 	bl	8001448 <main>

08004fe2 <LoopForever>:

LoopForever:
  b LoopForever
 8004fe2:	e7fe      	b.n	8004fe2 <LoopForever>
  ldr   r0, =_estack
 8004fe4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004fe8:	20000008 	.word	0x20000008
 8004fec:	200001f8 	.word	0x200001f8
 8004ff0:	0800fa04 	.word	0x0800fa04
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004ff4:	20030000 	.word	0x20030000
 8004ff8:	20030000 	.word	0x20030000
 8004ffc:	0800fbf4 	.word	0x0800fbf4
  INIT_BSS _sbss, _ebss
 8005000:	200001f8 	.word	0x200001f8
 8005004:	20001768 	.word	0x20001768

08005008 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005008:	e7fe      	b.n	8005008 <ADC1_IRQHandler>
	...

0800500c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <HAL_Init+0x3c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a0b      	ldr	r2, [pc, #44]	; (8005048 <HAL_Init+0x3c>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005022:	2003      	movs	r0, #3
 8005024:	f001 fb38 	bl	8006698 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005028:	2000      	movs	r0, #0
 800502a:	f000 f80f 	bl	800504c <HAL_InitTick>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	71fb      	strb	r3, [r7, #7]
 8005038:	e001      	b.n	800503e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800503a:	f7ff fd5c 	bl	8004af6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800503e:	79fb      	ldrb	r3, [r7, #7]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	58004000 	.word	0x58004000

0800504c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8005058:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <HAL_InitTick+0x6c>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d024      	beq.n	80050aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005060:	f003 fa16 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <HAL_InitTick+0x6c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005070:	fbb3 f3f1 	udiv	r3, r3, r1
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	4618      	mov	r0, r3
 800507a:	f001 fb40 	bl	80066fe <HAL_SYSTICK_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10f      	bne.n	80050a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	d809      	bhi.n	800509e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800508a:	2200      	movs	r2, #0
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	f04f 30ff 	mov.w	r0, #4294967295
 8005092:	f001 fb0c 	bl	80066ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005096:	4a09      	ldr	r2, [pc, #36]	; (80050bc <HAL_InitTick+0x70>)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e007      	b.n	80050ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
 80050a2:	e004      	b.n	80050ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
 80050a8:	e001      	b.n	80050ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000020 	.word	0x20000020
 80050bc:	2000001c 	.word	0x2000001c

080050c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <HAL_IncTick+0x20>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_IncTick+0x24>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4413      	add	r3, r2
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <HAL_IncTick+0x24>)
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000020 	.word	0x20000020
 80050e4:	2000074c 	.word	0x2000074c

080050e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return uwTick;
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_GetTick+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2000074c 	.word	0x2000074c

08005100 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <HAL_GetTickPrio+0x14>)
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000001c 	.word	0x2000001c

08005118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005120:	f7ff ffe2 	bl	80050e8 <HAL_GetTick>
 8005124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d005      	beq.n	800513e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_Delay+0x44>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800513e:	bf00      	nop
 8005140:	f7ff ffd2 	bl	80050e8 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	429a      	cmp	r2, r3
 800514e:	d8f7      	bhi.n	8005140 <HAL_Delay+0x28>
  {
  }
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000020 	.word	0x20000020

08005160 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3360      	adds	r3, #96	; 0x60
 80051da:	461a      	mov	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b08      	ldr	r3, [pc, #32]	; (800520c <LL_ADC_SetOffset+0x44>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	03fff000 	.word	0x03fff000

08005210 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3360      	adds	r3, #96	; 0x60
 800521e:	461a      	mov	r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3360      	adds	r3, #96	; 0x60
 800524c:	461a      	mov	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	431a      	orrs	r2, r3
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005272:	b480      	push	{r7}
 8005274:	b087      	sub	sp, #28
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3330      	adds	r3, #48	; 0x30
 8005282:	461a      	mov	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	4413      	add	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	211f      	movs	r1, #31
 800529e:	fa01 f303 	lsl.w	r3, r1, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	401a      	ands	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	0e9b      	lsrs	r3, r3, #26
 80052aa:	f003 011f 	and.w	r1, r3, #31
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	431a      	orrs	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b087      	sub	sp, #28
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3314      	adds	r3, #20
 80052da:	461a      	mov	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	0e5b      	lsrs	r3, r3, #25
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	4413      	add	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	0d1b      	lsrs	r3, r3, #20
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	2107      	movs	r1, #7
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	401a      	ands	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	0d1b      	lsrs	r3, r3, #20
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	431a      	orrs	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0318 	and.w	r3, r3, #24
 8005342:	4908      	ldr	r1, [pc, #32]	; (8005364 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005344:	40d9      	lsrs	r1, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	400b      	ands	r3, r1
 800534a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534e:	431a      	orrs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	0007ffff 	.word	0x0007ffff

08005368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6093      	str	r3, [r2, #8]
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a0:	d101      	bne.n	80053a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80053c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f0:	d101      	bne.n	80053f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800543c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005440:	f043 0202 	orr.w	r2, r3, #2
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <LL_ADC_IsEnabled+0x18>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <LL_ADC_IsEnabled+0x1a>
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d101      	bne.n	8005492 <LL_ADC_IsDisableOngoing+0x18>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <LL_ADC_IsDisableOngoing+0x1a>
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d101      	bne.n	8005508 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b08      	cmp	r3, #8
 8005550:	d101      	bne.n	8005556 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005574:	2300      	movs	r3, #0
 8005576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e12e      	b.n	80057e0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	2b00      	cmp	r3, #0
 800558e:	d109      	bne.n	80055a4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fab7 	bl	8004b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff feef 	bl	800538c <LL_ADC_IsDeepPowerDownEnabled>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fed5 	bl	8005368 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ff0a 	bl	80053dc <LL_ADC_IsInternalRegulatorEnabled>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d115      	bne.n	80055fa <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff feee 	bl	80053b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055d8:	4b83      	ldr	r3, [pc, #524]	; (80057e8 <HAL_ADC_Init+0x284>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	4a83      	ldr	r2, [pc, #524]	; (80057ec <HAL_ADC_Init+0x288>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	099b      	lsrs	r3, r3, #6
 80055e6:	3301      	adds	r3, #1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80055ec:	e002      	b.n	80055f4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f9      	bne.n	80055ee <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff feec 	bl	80053dc <LL_ADC_IsInternalRegulatorEnabled>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10d      	bne.n	8005626 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	f043 0210 	orr.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff ff60 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 8005630:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	f040 80c7 	bne.w	80057ce <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f040 80c3 	bne.w	80057ce <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005650:	f043 0202 	orr.w	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fef9 	bl	8005454 <LL_ADC_IsEnabled>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005668:	4861      	ldr	r0, [pc, #388]	; (80057f0 <HAL_ADC_Init+0x28c>)
 800566a:	f7ff fef3 	bl	8005454 <LL_ADC_IsEnabled>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4619      	mov	r1, r3
 800567a:	485e      	ldr	r0, [pc, #376]	; (80057f4 <HAL_ADC_Init+0x290>)
 800567c:	f7ff fd70 	bl	8005160 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	7e5b      	ldrb	r3, [r3, #25]
 8005684:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800568a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005690:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005696:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800569e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80056a0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d106      	bne.n	80056c0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	3b01      	subs	r3, #1
 80056b8:	045b      	lsls	r3, r3, #17
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d009      	beq.n	80056dc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <HAL_ADC_Init+0x294>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	69b9      	ldr	r1, [r7, #24]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fefb 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 80056fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff1c 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 8005706:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d13d      	bne.n	800578a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d13a      	bne.n	800578a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005718:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005720:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005730:	f023 0302 	bic.w	r3, r3, #2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	430b      	orrs	r3, r1
 800573c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005744:	2b01      	cmp	r3, #1
 8005746:	d118      	bne.n	800577a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005752:	f023 0304 	bic.w	r3, r3, #4
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800575e:	4311      	orrs	r1, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005764:	4311      	orrs	r1, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800576a:	430a      	orrs	r2, r1
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	e007      	b.n	800578a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10c      	bne.n	80057ac <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	f023 010f 	bic.w	r1, r3, #15
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
 80057aa:	e007      	b.n	80057bc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 020f 	bic.w	r2, r2, #15
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f023 0303 	bic.w	r3, r3, #3
 80057c4:	f043 0201 	orr.w	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54
 80057cc:	e007      	b.n	80057de <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	f043 0210 	orr.w	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057de:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000018 	.word	0x20000018
 80057ec:	053e2d63 	.word	0x053e2d63
 80057f0:	50040000 	.word	0x50040000
 80057f4:	50040300 	.word	0x50040300
 80057f8:	fff0c007 	.word	0xfff0c007

080057fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fe71 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d140      	bne.n	8005896 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_ADC_Start+0x26>
 800581e:	2302      	movs	r3, #2
 8005820:	e03c      	b.n	800589c <HAL_ADC_Start+0xa0>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fcfc 	bl	8006228 <ADC_Enable>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d128      	bne.n	800588c <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585a:	d106      	bne.n	800586a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005860:	f023 0206 	bic.w	r2, r3, #6
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	659a      	str	r2, [r3, #88]	; 0x58
 8005868:	e002      	b.n	8005870 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	221c      	movs	r2, #28
 8005876:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fe0b 	bl	80054a0 <LL_ADC_REG_StartConversion>
 800588a:	e006      	b.n	800589a <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005894:	e001      	b.n	800589a <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005896:	2302      	movs	r3, #2
 8005898:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_ADC_Stop+0x16>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e023      	b.n	8005902 <HAL_ADC_Stop+0x5e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80058c2:	2103      	movs	r1, #3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fbf3 	bl	80060b0 <ADC_ConversionStop>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d111      	bne.n	80058f8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fd21 	bl	800631c <ADC_Disable>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	f043 0201 	orr.w	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b0b6      	sub	sp, #216	; 0xd8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x22>
 8005942:	2302      	movs	r3, #2
 8005944:	e39f      	b.n	8006086 <HAL_ADC_ConfigChannel+0x762>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fdcc 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8384 	bne.w	8006068 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	f7ff fc80 	bl	8005272 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fdba 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 800597c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fdda 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 800598a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800598e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 81a6 	bne.w	8005ce4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 81a1 	bne.w	8005ce4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f7ff fc8b 	bl	80052ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	08db      	lsrs	r3, r3, #3
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d00a      	beq.n	80059ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6919      	ldr	r1, [r3, #16]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059e6:	f7ff fbef 	bl	80051c8 <LL_ADC_SetOffset>
 80059ea:	e17b      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff fc0c 	bl	8005210 <LL_ADC_GetOffsetChannel>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0xf4>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff fc01 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	0e9b      	lsrs	r3, r3, #26
 8005a12:	f003 021f 	and.w	r2, r3, #31
 8005a16:	e01e      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x132>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fbf6 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a2e:	fa93 f3a3 	rbit	r3, r3
 8005a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8005a46:	2320      	movs	r3, #32
 8005a48:	e004      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8005a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a4e:	fab3 f383 	clz	r3, r3
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x14a>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	0e9b      	lsrs	r3, r3, #26
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	e018      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x17c>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a7a:	fa93 f3a3 	rbit	r3, r3
 8005a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8005a92:	2320      	movs	r3, #32
 8005a94:	e004      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8005a96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a9a:	fab3 f383 	clz	r3, r3
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d106      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fbc5 	bl	800523c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff fba9 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x1ba>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2101      	movs	r1, #1
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fb9e 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	0e9b      	lsrs	r3, r3, #26
 8005ad8:	f003 021f 	and.w	r2, r3, #31
 8005adc:	e01e      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x1f8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fb93 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005af4:	fa93 f3a3 	rbit	r3, r3
 8005af8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005afc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	e004      	b.n	8005b1a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b14:	fab3 f383 	clz	r3, r3
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x210>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	0e9b      	lsrs	r3, r3, #26
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	e018      	b.n	8005b66 <HAL_ADC_ConfigChannel+0x242>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005b48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8005b58:	2320      	movs	r3, #32
 8005b5a:	e004      	b.n	8005b66 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8005b5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b60:	fab3 f383 	clz	r3, r3
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d106      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2101      	movs	r1, #1
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fb62 	bl	800523c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fb46 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x280>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2102      	movs	r1, #2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fb3b 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	0e9b      	lsrs	r3, r3, #26
 8005b9e:	f003 021f 	and.w	r2, r3, #31
 8005ba2:	e01e      	b.n	8005be2 <HAL_ADC_ConfigChannel+0x2be>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2102      	movs	r1, #2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fb30 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	e004      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bda:	fab3 f383 	clz	r3, r3
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d105      	bne.n	8005bfa <HAL_ADC_ConfigChannel+0x2d6>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	0e9b      	lsrs	r3, r3, #26
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	e016      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x304>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c06:	fa93 f3a3 	rbit	r3, r3
 8005c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005c1a:	2320      	movs	r3, #32
 8005c1c:	e004      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c22:	fab3 f383 	clz	r3, r3
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d106      	bne.n	8005c3a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2102      	movs	r1, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff fb01 	bl	800523c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2103      	movs	r1, #3
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fae5 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_ADC_ConfigChannel+0x342>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2103      	movs	r1, #3
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fada 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	0e9b      	lsrs	r3, r3, #26
 8005c60:	f003 021f 	and.w	r2, r3, #31
 8005c64:	e017      	b.n	8005c96 <HAL_ADC_ConfigChannel+0x372>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2103      	movs	r1, #3
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff facf 	bl	8005210 <LL_ADC_GetOffsetChannel>
 8005c72:	4603      	mov	r3, r0
 8005c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	fa93 f3a3 	rbit	r3, r3
 8005c7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8005c88:	2320      	movs	r3, #32
 8005c8a:	e003      	b.n	8005c94 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8005c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8e:	fab3 f383 	clz	r3, r3
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d105      	bne.n	8005cae <HAL_ADC_ConfigChannel+0x38a>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	0e9b      	lsrs	r3, r3, #26
 8005ca8:	f003 031f 	and.w	r3, r3, #31
 8005cac:	e011      	b.n	8005cd2 <HAL_ADC_ConfigChannel+0x3ae>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cb6:	fa93 f3a3 	rbit	r3, r3
 8005cba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8005cc6:	2320      	movs	r3, #32
 8005cc8:	e003      	b.n	8005cd2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	fab3 f383 	clz	r3, r3
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d106      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2103      	movs	r1, #3
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff faac 	bl	800523c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fbb3 	bl	8005454 <LL_ADC_IsEnabled>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 81c2 	bne.w	800607a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f7ff fb0c 	bl	8005320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a8e      	ldr	r2, [pc, #568]	; (8005f48 <HAL_ADC_ConfigChannel+0x624>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	f040 8130 	bne.w	8005f74 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x418>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0e9b      	lsrs	r3, r3, #26
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	bf94      	ite	ls
 8005d34:	2301      	movls	r3, #1
 8005d36:	2300      	movhi	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	e019      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x44c>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d44:	fa93 f3a3 	rbit	r3, r3
 8005d48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8005d54:	2320      	movs	r3, #32
 8005d56:	e003      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5a:	fab3 f383 	clz	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	3301      	adds	r3, #1
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	bf94      	ite	ls
 8005d6a:	2301      	movls	r3, #1
 8005d6c:	2300      	movhi	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d079      	beq.n	8005e68 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x46c>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	0e9b      	lsrs	r3, r3, #26
 8005d86:	3301      	adds	r3, #1
 8005d88:	069b      	lsls	r3, r3, #26
 8005d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d8e:	e015      	b.n	8005dbc <HAL_ADC_ConfigChannel+0x498>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d98:	fa93 f3a3 	rbit	r3, r3
 8005d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005da8:	2320      	movs	r3, #32
 8005daa:	e003      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dae:	fab3 f383 	clz	r3, r3
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	3301      	adds	r3, #1
 8005db6:	069b      	lsls	r3, r3, #26
 8005db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_ADC_ConfigChannel+0x4b8>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	0e9b      	lsrs	r3, r3, #26
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dda:	e017      	b.n	8005e0c <HAL_ADC_ConfigChannel+0x4e8>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	fa93 f3a3 	rbit	r3, r3
 8005de8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005df4:	2320      	movs	r3, #32
 8005df6:	e003      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfa:	fab3 f383 	clz	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	3301      	adds	r3, #1
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2101      	movs	r1, #1
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	ea42 0103 	orr.w	r1, r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x50e>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	0e9b      	lsrs	r3, r3, #26
 8005e22:	3301      	adds	r3, #1
 8005e24:	f003 021f 	and.w	r2, r3, #31
 8005e28:	4613      	mov	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	051b      	lsls	r3, r3, #20
 8005e30:	e018      	b.n	8005e64 <HAL_ADC_ConfigChannel+0x540>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	fa93 f3a3 	rbit	r3, r3
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	e003      	b.n	8005e56 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e50:	fab3 f383 	clz	r3, r3
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	3301      	adds	r3, #1
 8005e58:	f003 021f 	and.w	r2, r3, #31
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	4413      	add	r3, r2
 8005e62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e64:	430b      	orrs	r3, r1
 8005e66:	e080      	b.n	8005f6a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d107      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x560>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	0e9b      	lsrs	r3, r3, #26
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	069b      	lsls	r3, r3, #26
 8005e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e82:	e015      	b.n	8005eb0 <HAL_ADC_ConfigChannel+0x58c>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	e003      	b.n	8005ea8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	fab3 f383 	clz	r3, r3
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	069b      	lsls	r3, r3, #26
 8005eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <HAL_ADC_ConfigChannel+0x5ac>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	0e9b      	lsrs	r3, r3, #26
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	e017      	b.n	8005f00 <HAL_ADC_ConfigChannel+0x5dc>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	61fb      	str	r3, [r7, #28]
  return result;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	e003      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	fab3 f383 	clz	r3, r3
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2101      	movs	r1, #1
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	ea42 0103 	orr.w	r1, r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10d      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x608>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0e9b      	lsrs	r3, r3, #26
 8005f16:	3301      	adds	r3, #1
 8005f18:	f003 021f 	and.w	r2, r3, #31
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	3b1e      	subs	r3, #30
 8005f24:	051b      	lsls	r3, r3, #20
 8005f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	e01d      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x644>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	fa93 f3a3 	rbit	r3, r3
 8005f38:	613b      	str	r3, [r7, #16]
  return result;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005f44:	2320      	movs	r3, #32
 8005f46:	e005      	b.n	8005f54 <HAL_ADC_ConfigChannel+0x630>
 8005f48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	fab3 f383 	clz	r3, r3
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	3301      	adds	r3, #1
 8005f56:	f003 021f 	and.w	r2, r3, #31
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	4413      	add	r3, r2
 8005f60:	3b1e      	subs	r3, #30
 8005f62:	051b      	lsls	r3, r3, #20
 8005f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	6892      	ldr	r2, [r2, #8]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f7ff f9ab 	bl	80052ca <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b45      	ldr	r3, [pc, #276]	; (8006090 <HAL_ADC_ConfigChannel+0x76c>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d07c      	beq.n	800607a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f80:	4844      	ldr	r0, [pc, #272]	; (8006094 <HAL_ADC_ConfigChannel+0x770>)
 8005f82:	f7ff f913 	bl	80051ac <LL_ADC_GetCommonPathInternalCh>
 8005f86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f8a:	4843      	ldr	r0, [pc, #268]	; (8006098 <HAL_ADC_ConfigChannel+0x774>)
 8005f8c:	f7ff fa62 	bl	8005454 <LL_ADC_IsEnabled>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d15e      	bne.n	8006054 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a40      	ldr	r2, [pc, #256]	; (800609c <HAL_ADC_ConfigChannel+0x778>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d127      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x6cc>
 8005fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d121      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a39      	ldr	r2, [pc, #228]	; (8006098 <HAL_ADC_ConfigChannel+0x774>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d161      	bne.n	800607a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4834      	ldr	r0, [pc, #208]	; (8006094 <HAL_ADC_ConfigChannel+0x770>)
 8005fc2:	f7ff f8e0 	bl	8005186 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fc6:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <HAL_ADC_ConfigChannel+0x77c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	099b      	lsrs	r3, r3, #6
 8005fcc:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <HAL_ADC_ConfigChannel+0x780>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	099b      	lsrs	r3, r3, #6
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005fe0:	e002      	b.n	8005fe8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f9      	bne.n	8005fe2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fee:	e044      	b.n	800607a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <HAL_ADC_ConfigChannel+0x784>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d113      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x6fe>
 8005ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10d      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a23      	ldr	r2, [pc, #140]	; (8006098 <HAL_ADC_ConfigChannel+0x774>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d134      	bne.n	800607a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006018:	4619      	mov	r1, r3
 800601a:	481e      	ldr	r0, [pc, #120]	; (8006094 <HAL_ADC_ConfigChannel+0x770>)
 800601c:	f7ff f8b3 	bl	8005186 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006020:	e02b      	b.n	800607a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a21      	ldr	r2, [pc, #132]	; (80060ac <HAL_ADC_ConfigChannel+0x788>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d126      	bne.n	800607a <HAL_ADC_ConfigChannel+0x756>
 800602c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d120      	bne.n	800607a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a16      	ldr	r2, [pc, #88]	; (8006098 <HAL_ADC_ConfigChannel+0x774>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d11b      	bne.n	800607a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800604a:	4619      	mov	r1, r3
 800604c:	4811      	ldr	r0, [pc, #68]	; (8006094 <HAL_ADC_ConfigChannel+0x770>)
 800604e:	f7ff f89a 	bl	8005186 <LL_ADC_SetCommonPathInternalCh>
 8006052:	e012      	b.n	800607a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006066:	e008      	b.n	800607a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8006082:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006086:	4618      	mov	r0, r3
 8006088:	37d8      	adds	r7, #216	; 0xd8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	80080000 	.word	0x80080000
 8006094:	50040300 	.word	0x50040300
 8006098:	50040000 	.word	0x50040000
 800609c:	c7520000 	.word	0xc7520000
 80060a0:	20000018 	.word	0x20000018
 80060a4:	053e2d63 	.word	0x053e2d63
 80060a8:	cb840000 	.word	0xcb840000
 80060ac:	80000001 	.word	0x80000001

080060b0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fa12 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 80060cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fa33 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 80060d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8098 	beq.w	8006218 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d02a      	beq.n	800614c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7e5b      	ldrb	r3, [r3, #25]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d126      	bne.n	800614c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	7e1b      	ldrb	r3, [r3, #24]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d122      	bne.n	800614c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006106:	2301      	movs	r3, #1
 8006108:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800610a:	e014      	b.n	8006136 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4a45      	ldr	r2, [pc, #276]	; (8006224 <ADC_ConversionStop+0x174>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d90d      	bls.n	8006130 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f043 0210 	orr.w	r2, r3, #16
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e074      	b.n	800621a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	3301      	adds	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d1e3      	bne.n	800610c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2240      	movs	r2, #64	; 0x40
 800614a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d014      	beq.n	800617c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff f9ca 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff f987 	bl	800547a <LL_ADC_IsDisableOngoing>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff f9a6 	bl	80054c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d014      	beq.n	80061ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff f9d9 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00c      	beq.n	80061ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff f96f 	bl	800547a <LL_ADC_IsDisableOngoing>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff f9b5 	bl	8005516 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d005      	beq.n	80061be <ADC_ConversionStop+0x10e>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d105      	bne.n	80061c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80061b8:	230c      	movs	r3, #12
 80061ba:	617b      	str	r3, [r7, #20]
        break;
 80061bc:	e005      	b.n	80061ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80061be:	2308      	movs	r3, #8
 80061c0:	617b      	str	r3, [r7, #20]
        break;
 80061c2:	e002      	b.n	80061ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80061c4:	2304      	movs	r3, #4
 80061c6:	617b      	str	r3, [r7, #20]
        break;
 80061c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80061ca:	f7fe ff8d 	bl	80050e8 <HAL_GetTick>
 80061ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80061d0:	e01b      	b.n	800620a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80061d2:	f7fe ff89 	bl	80050e8 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b05      	cmp	r3, #5
 80061de:	d914      	bls.n	800620a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	f043 0210 	orr.w	r2, r3, #16
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fe:	f043 0201 	orr.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e007      	b.n	800621a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1dc      	bne.n	80061d2 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	a33fffff 	.word	0xa33fffff

08006228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006230:	2300      	movs	r3, #0
 8006232:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff f90b 	bl	8005454 <LL_ADC_IsEnabled>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d15e      	bne.n	8006302 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	4b30      	ldr	r3, [pc, #192]	; (800630c <ADC_Enable+0xe4>)
 800624c:	4013      	ands	r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00d      	beq.n	800626e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006256:	f043 0210 	orr.w	r2, r3, #16
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006262:	f043 0201 	orr.w	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e04a      	b.n	8006304 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff f8c6 	bl	8005404 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006278:	4825      	ldr	r0, [pc, #148]	; (8006310 <ADC_Enable+0xe8>)
 800627a:	f7fe ff97 	bl	80051ac <LL_ADC_GetCommonPathInternalCh>
 800627e:	4603      	mov	r3, r0
 8006280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00f      	beq.n	80062a8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006288:	4b22      	ldr	r3, [pc, #136]	; (8006314 <ADC_Enable+0xec>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	099b      	lsrs	r3, r3, #6
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <ADC_Enable+0xf0>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	099b      	lsrs	r3, r3, #6
 8006296:	3301      	adds	r3, #1
 8006298:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800629a:	e002      	b.n	80062a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f9      	bne.n	800629c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80062a8:	f7fe ff1e 	bl	80050e8 <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062ae:	e021      	b.n	80062f4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff f8cd 	bl	8005454 <LL_ADC_IsEnabled>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff f89d 	bl	8005404 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062ca:	f7fe ff0d 	bl	80050e8 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d90d      	bls.n	80062f4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062dc:	f043 0210 	orr.w	r2, r3, #16
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e8:	f043 0201 	orr.w	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e007      	b.n	8006304 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d1d6      	bne.n	80062b0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	8000003f 	.word	0x8000003f
 8006310:	50040300 	.word	0x50040300
 8006314:	20000018 	.word	0x20000018
 8006318:	053e2d63 	.word	0x053e2d63

0800631c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff f8a6 	bl	800547a <LL_ADC_IsDisableOngoing>
 800632e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff f88d 	bl	8005454 <LL_ADC_IsEnabled>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d047      	beq.n	80063d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d144      	bne.n	80063d0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 030d 	and.w	r3, r3, #13
 8006350:	2b01      	cmp	r3, #1
 8006352:	d10c      	bne.n	800636e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff f867 	bl	800542c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2203      	movs	r2, #3
 8006364:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006366:	f7fe febf 	bl	80050e8 <HAL_GetTick>
 800636a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800636c:	e029      	b.n	80063c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006372:	f043 0210 	orr.w	r2, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	f043 0201 	orr.w	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e023      	b.n	80063d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800638a:	f7fe fead 	bl	80050e8 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d914      	bls.n	80063c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	f043 0210 	orr.w	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	f043 0201 	orr.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e007      	b.n	80063d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1dc      	bne.n	800638a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <LL_ADC_StartCalibration>:
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80063ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_ADC_IsCalibrationOnGoing>:
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800641c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006420:	d101      	bne.n	8006426 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800643e:	2300      	movs	r3, #0
 8006440:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_ADCEx_Calibration_Start+0x1c>
 800644c:	2302      	movs	r3, #2
 800644e:	e04d      	b.n	80064ec <HAL_ADCEx_Calibration_Start+0xb8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff ff5f 	bl	800631c <ADC_Disable>
 800645e:	4603      	mov	r3, r0
 8006460:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d136      	bne.n	80064d6 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006470:	f023 0302 	bic.w	r3, r3, #2
 8006474:	f043 0202 	orr.w	r2, r3, #2
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff ffa9 	bl	80063da <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006488:	e014      	b.n	80064b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	3301      	adds	r3, #1
 800648e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d90d      	bls.n	80064b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649c:	f023 0312 	bic.w	r3, r3, #18
 80064a0:	f043 0210 	orr.w	r2, r3, #16
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e01b      	b.n	80064ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff ffa7 	bl	800640c <LL_ADC_IsCalibrationOnGoing>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e2      	bne.n	800648a <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c8:	f023 0303 	bic.w	r3, r3, #3
 80064cc:	f043 0201 	orr.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
 80064d4:	e005      	b.n	80064e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f043 0210 	orr.w	r2, r3, #16
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	00026aaa 	.word	0x00026aaa

080064f8 <__NVIC_SetPriorityGrouping>:
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <__NVIC_SetPriorityGrouping+0x44>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006514:	4013      	ands	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800652a:	4a04      	ldr	r2, [pc, #16]	; (800653c <__NVIC_SetPriorityGrouping+0x44>)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	60d3      	str	r3, [r2, #12]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	e000ed00 	.word	0xe000ed00

08006540 <__NVIC_GetPriorityGrouping>:
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006544:	4b04      	ldr	r3, [pc, #16]	; (8006558 <__NVIC_GetPriorityGrouping+0x18>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	f003 0307 	and.w	r3, r3, #7
}
 800654e:	4618      	mov	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	e000ed00 	.word	0xe000ed00

0800655c <__NVIC_EnableIRQ>:
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800656a:	2b00      	cmp	r3, #0
 800656c:	db0b      	blt.n	8006586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	f003 021f 	and.w	r2, r3, #31
 8006574:	4907      	ldr	r1, [pc, #28]	; (8006594 <__NVIC_EnableIRQ+0x38>)
 8006576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	2001      	movs	r0, #1
 800657e:	fa00 f202 	lsl.w	r2, r0, r2
 8006582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	e000e100 	.word	0xe000e100

08006598 <__NVIC_SetPriority>:
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	db0a      	blt.n	80065c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	490c      	ldr	r1, [pc, #48]	; (80065e4 <__NVIC_SetPriority+0x4c>)
 80065b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b6:	0112      	lsls	r2, r2, #4
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	440b      	add	r3, r1
 80065bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065c0:	e00a      	b.n	80065d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	4908      	ldr	r1, [pc, #32]	; (80065e8 <__NVIC_SetPriority+0x50>)
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	3b04      	subs	r3, #4
 80065d0:	0112      	lsls	r2, r2, #4
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	440b      	add	r3, r1
 80065d6:	761a      	strb	r2, [r3, #24]
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	e000e100 	.word	0xe000e100
 80065e8:	e000ed00 	.word	0xe000ed00

080065ec <NVIC_EncodePriority>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	b089      	sub	sp, #36	; 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f1c3 0307 	rsb	r3, r3, #7
 8006606:	2b04      	cmp	r3, #4
 8006608:	bf28      	it	cs
 800660a:	2304      	movcs	r3, #4
 800660c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3304      	adds	r3, #4
 8006612:	2b06      	cmp	r3, #6
 8006614:	d902      	bls.n	800661c <NVIC_EncodePriority+0x30>
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	3b03      	subs	r3, #3
 800661a:	e000      	b.n	800661e <NVIC_EncodePriority+0x32>
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006620:	f04f 32ff 	mov.w	r2, #4294967295
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43da      	mvns	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	401a      	ands	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006634:	f04f 31ff 	mov.w	r1, #4294967295
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	43d9      	mvns	r1, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006644:	4313      	orrs	r3, r2
}
 8006646:	4618      	mov	r0, r3
 8006648:	3724      	adds	r7, #36	; 0x24
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <SysTick_Config>:
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3b01      	subs	r3, #1
 8006660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006664:	d301      	bcc.n	800666a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006666:	2301      	movs	r3, #1
 8006668:	e00f      	b.n	800668a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800666a:	4a0a      	ldr	r2, [pc, #40]	; (8006694 <SysTick_Config+0x40>)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3b01      	subs	r3, #1
 8006670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006672:	210f      	movs	r1, #15
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	f7ff ff8e 	bl	8006598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <SysTick_Config+0x40>)
 800667e:	2200      	movs	r2, #0
 8006680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006682:	4b04      	ldr	r3, [pc, #16]	; (8006694 <SysTick_Config+0x40>)
 8006684:	2207      	movs	r2, #7
 8006686:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	e000e010 	.word	0xe000e010

08006698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ff29 	bl	80064f8 <__NVIC_SetPriorityGrouping>
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	4603      	mov	r3, r0
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80066bc:	f7ff ff40 	bl	8006540 <__NVIC_GetPriorityGrouping>
 80066c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	6978      	ldr	r0, [r7, #20]
 80066c8:	f7ff ff90 	bl	80065ec <NVIC_EncodePriority>
 80066cc:	4602      	mov	r2, r0
 80066ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff ff5f 	bl	8006598 <__NVIC_SetPriority>
}
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	4603      	mov	r3, r0
 80066ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff ff33 	bl	800655c <__NVIC_EnableIRQ>
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff ffa4 	bl	8006654 <SysTick_Config>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e08e      	b.n	8006848 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	4b47      	ldr	r3, [pc, #284]	; (8006850 <HAL_DMA_Init+0x138>)
 8006732:	429a      	cmp	r2, r3
 8006734:	d80f      	bhi.n	8006756 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	4b45      	ldr	r3, [pc, #276]	; (8006854 <HAL_DMA_Init+0x13c>)
 800673e:	4413      	add	r3, r2
 8006740:	4a45      	ldr	r2, [pc, #276]	; (8006858 <HAL_DMA_Init+0x140>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	091b      	lsrs	r3, r3, #4
 8006748:	009a      	lsls	r2, r3, #2
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a42      	ldr	r2, [pc, #264]	; (800685c <HAL_DMA_Init+0x144>)
 8006752:	641a      	str	r2, [r3, #64]	; 0x40
 8006754:	e00e      	b.n	8006774 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	4b40      	ldr	r3, [pc, #256]	; (8006860 <HAL_DMA_Init+0x148>)
 800675e:	4413      	add	r3, r2
 8006760:	4a3d      	ldr	r2, [pc, #244]	; (8006858 <HAL_DMA_Init+0x140>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	091b      	lsrs	r3, r3, #4
 8006768:	009a      	lsls	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a3c      	ldr	r2, [pc, #240]	; (8006864 <HAL_DMA_Init+0x14c>)
 8006772:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa74 	bl	8006cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d4:	d102      	bne.n	80067dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80067e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d010      	beq.n	800681e <HAL_DMA_Init+0x106>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b04      	cmp	r3, #4
 8006802:	d80c      	bhi.n	800681e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa93 	bl	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800681a:	605a      	str	r2, [r3, #4]
 800681c:	e008      	b.n	8006830 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40020407 	.word	0x40020407
 8006854:	bffdfff8 	.word	0xbffdfff8
 8006858:	cccccccd 	.word	0xcccccccd
 800685c:	40020000 	.word	0x40020000
 8006860:	bffdfbf8 	.word	0xbffdfbf8
 8006864:	40020400 	.word	0x40020400

08006868 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_DMA_Start_IT+0x20>
 8006884:	2302      	movs	r3, #2
 8006886:	e066      	b.n	8006956 <HAL_DMA_Start_IT+0xee>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d155      	bne.n	8006948 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f9b9 	bl	8006c38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 020e 	orr.w	r2, r2, #14
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e00f      	b.n	8006900 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0204 	bic.w	r2, r2, #4
 80068ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 020a 	orr.w	r2, r2, #10
 80068fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006934:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0201 	orr.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	e005      	b.n	8006954 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006950:	2302      	movs	r3, #2
 8006952:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006954:	7dfb      	ldrb	r3, [r7, #23]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e04f      	b.n	8006a10 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d008      	beq.n	800698e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2204      	movs	r2, #4
 8006980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e040      	b.n	8006a10 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 020e 	bic.w	r2, r2, #14
 800699c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0201 	bic.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c2:	f003 021c 	and.w	r2, r3, #28
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2101      	movs	r1, #1
 80069cc:	fa01 f202 	lsl.w	r2, r1, r2
 80069d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80069fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d005      	beq.n	8006a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2204      	movs	r2, #4
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
 8006a3e:	e047      	b.n	8006ad0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 020e 	bic.w	r2, r2, #14
 8006a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	f003 021c 	and.w	r2, r3, #28
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00c      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006aae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
    }
  }
  return status;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af6:	f003 031c 	and.w	r3, r3, #28
 8006afa:	2204      	movs	r2, #4
 8006afc:	409a      	lsls	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d026      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x7a>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d021      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0204 	bic.w	r2, r2, #4
 8006b2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	f003 021c 	and.w	r2, r3, #28
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	2104      	movs	r1, #4
 8006b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d071      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006b52:	e06c      	b.n	8006c2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b58:	f003 031c 	and.w	r3, r3, #28
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	409a      	lsls	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4013      	ands	r3, r2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d02e      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xec>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d029      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10b      	bne.n	8006b98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 020a 	bic.w	r2, r2, #10
 8006b8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	f003 021c 	and.w	r2, r3, #28
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8006baa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d038      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006bc4:	e033      	b.n	8006c2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	f003 031c 	and.w	r3, r3, #28
 8006bce:	2208      	movs	r2, #8
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d02a      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x156>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d025      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 020e 	bic.w	r2, r2, #14
 8006bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf8:	f003 021c 	and.w	r2, r3, #28
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f202 	lsl.w	r2, r1, r2
 8006c06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c2e:	bf00      	nop
 8006c30:	bf00      	nop
}
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006c60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	f003 021c 	and.w	r2, r3, #28
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2101      	movs	r1, #1
 8006c70:	fa01 f202 	lsl.w	r2, r1, r2
 8006c74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d108      	bne.n	8006c98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c96:	e007      	b.n	8006ca8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	60da      	str	r2, [r3, #12]
}
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d80a      	bhi.n	8006cde <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ccc:	089b      	lsrs	r3, r3, #2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cd4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6493      	str	r3, [r2, #72]	; 0x48
 8006cdc:	e007      	b.n	8006cee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce2:	089b      	lsrs	r3, r3, #2
 8006ce4:	009a      	lsls	r2, r3, #2
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006ce8:	4413      	add	r3, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	3b08      	subs	r3, #8
 8006cf6:	4a0c      	ldr	r2, [pc, #48]	; (8006d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006d04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	40020407 	.word	0x40020407
 8006d24:	4002081c 	.word	0x4002081c
 8006d28:	cccccccd 	.word	0xcccccccd
 8006d2c:	40020880 	.word	0x40020880

08006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a09      	ldr	r2, [pc, #36]	; (8006d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006d54:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2201      	movs	r2, #1
 8006d60:	409a      	lsls	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	1000823f 	.word	0x1000823f
 8006d78:	40020940 	.word	0x40020940

08006d7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d8a:	e14c      	b.n	8007026 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	2101      	movs	r1, #1
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 813e 	beq.w	8007020 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d005      	beq.n	8006dbc <HAL_GPIO_Init+0x40>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d130      	bne.n	8006e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006df2:	2201      	movs	r2, #1
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	f003 0201 	and.w	r2, r3, #1
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d017      	beq.n	8006e5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	2203      	movs	r2, #3
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d123      	bne.n	8006eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	08da      	lsrs	r2, r3, #3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3208      	adds	r2, #8
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	220f      	movs	r2, #15
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	43db      	mvns	r3, r3
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4013      	ands	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	08da      	lsrs	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3208      	adds	r2, #8
 8006ea8:	6939      	ldr	r1, [r7, #16]
 8006eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	2203      	movs	r2, #3
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f003 0203 	and.w	r2, r3, #3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8098 	beq.w	8007020 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006ef0:	4a54      	ldr	r2, [pc, #336]	; (8007044 <HAL_GPIO_Init+0x2c8>)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	089b      	lsrs	r3, r3, #2
 8006ef6:	3302      	adds	r3, #2
 8006ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	220f      	movs	r2, #15
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4013      	ands	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f1a:	d019      	beq.n	8006f50 <HAL_GPIO_Init+0x1d4>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a4a      	ldr	r2, [pc, #296]	; (8007048 <HAL_GPIO_Init+0x2cc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d013      	beq.n	8006f4c <HAL_GPIO_Init+0x1d0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a49      	ldr	r2, [pc, #292]	; (800704c <HAL_GPIO_Init+0x2d0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00d      	beq.n	8006f48 <HAL_GPIO_Init+0x1cc>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a48      	ldr	r2, [pc, #288]	; (8007050 <HAL_GPIO_Init+0x2d4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d007      	beq.n	8006f44 <HAL_GPIO_Init+0x1c8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a47      	ldr	r2, [pc, #284]	; (8007054 <HAL_GPIO_Init+0x2d8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d101      	bne.n	8006f40 <HAL_GPIO_Init+0x1c4>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	e008      	b.n	8006f52 <HAL_GPIO_Init+0x1d6>
 8006f40:	2307      	movs	r3, #7
 8006f42:	e006      	b.n	8006f52 <HAL_GPIO_Init+0x1d6>
 8006f44:	2303      	movs	r3, #3
 8006f46:	e004      	b.n	8006f52 <HAL_GPIO_Init+0x1d6>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e002      	b.n	8006f52 <HAL_GPIO_Init+0x1d6>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <HAL_GPIO_Init+0x1d6>
 8006f50:	2300      	movs	r3, #0
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	f002 0203 	and.w	r2, r2, #3
 8006f58:	0092      	lsls	r2, r2, #2
 8006f5a:	4093      	lsls	r3, r2
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006f62:	4938      	ldr	r1, [pc, #224]	; (8007044 <HAL_GPIO_Init+0x2c8>)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	089b      	lsrs	r3, r3, #2
 8006f68:	3302      	adds	r3, #2
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f70:	4b39      	ldr	r3, [pc, #228]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f94:	4a30      	ldr	r2, [pc, #192]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f9a:	4b2f      	ldr	r3, [pc, #188]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	43db      	mvns	r3, r3
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fbe:	4a26      	ldr	r2, [pc, #152]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006fc4:	4b24      	ldr	r3, [pc, #144]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	43db      	mvns	r3, r3
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006fea:	4a1b      	ldr	r2, [pc, #108]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8006ff2:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4013      	ands	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007018:	4a0f      	ldr	r2, [pc, #60]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	3301      	adds	r3, #1
 8007024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	f47f aeab 	bne.w	8006d8c <HAL_GPIO_Init+0x10>
  }
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	40010000 	.word	0x40010000
 8007048:	48000400 	.word	0x48000400
 800704c:	48000800 	.word	0x48000800
 8007050:	48000c00 	.word	0x48000c00
 8007054:	48001000 	.word	0x48001000
 8007058:	58000800 	.word	0x58000800

0800705c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691a      	ldr	r2, [r3, #16]
 800706c:	887b      	ldrh	r3, [r7, #2]
 800706e:	4013      	ands	r3, r2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
 8007078:	e001      	b.n	800707e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	807b      	strh	r3, [r7, #2]
 8007098:	4613      	mov	r3, r2
 800709a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800709c:	787b      	ldrb	r3, [r7, #1]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070a2:	887a      	ldrh	r2, [r7, #2]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070a8:	e002      	b.n	80070b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070aa:	887a      	ldrh	r2, [r7, #2]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070ce:	887a      	ldrh	r2, [r7, #2]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4013      	ands	r3, r2
 80070d4:	041a      	lsls	r2, r3, #16
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	43d9      	mvns	r1, r3
 80070da:	887b      	ldrh	r3, [r7, #2]
 80070dc:	400b      	ands	r3, r1
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	619a      	str	r2, [r3, #24]
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007106:	4a05      	ldr	r2, [pc, #20]	; (800711c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	4618      	mov	r0, r3
 8007110:	f7fa fd1a 	bl	8001b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	58000800 	.word	0x58000800

08007120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007122:	b08b      	sub	sp, #44	; 0x2c
 8007124:	af06      	add	r7, sp, #24
 8007126:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e0cb      	b.n	80072ca <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fd fdae 	bl	8004ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2203      	movs	r2, #3
 8007150:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f003 fb99 	bl	800a890 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
 8007162:	e040      	b.n	80071e6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	440b      	add	r3, r1
 8007174:	3301      	adds	r3, #1
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	440b      	add	r3, r1
 800718a:	7bfa      	ldrb	r2, [r7, #15]
 800718c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	440b      	add	r3, r1
 800719e:	3303      	adds	r3, #3
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80071a4:	7bfa      	ldrb	r2, [r7, #15]
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	440b      	add	r3, r1
 80071b2:	3338      	adds	r3, #56	; 0x38
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071b8:	7bfa      	ldrb	r2, [r7, #15]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	440b      	add	r3, r1
 80071c6:	333c      	adds	r3, #60	; 0x3c
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071cc:	7bfa      	ldrb	r2, [r7, #15]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	440b      	add	r3, r1
 80071da:	3340      	adds	r3, #64	; 0x40
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	3301      	adds	r3, #1
 80071e4:	73fb      	strb	r3, [r7, #15]
 80071e6:	7bfa      	ldrb	r2, [r7, #15]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d3b9      	bcc.n	8007164 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]
 80071f4:	e044      	b.n	8007280 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	440b      	add	r3, r1
 8007204:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800720c:	7bfa      	ldrb	r2, [r7, #15]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	440b      	add	r3, r1
 800721a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800721e:	7bfa      	ldrb	r2, [r7, #15]
 8007220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	440b      	add	r3, r1
 8007230:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007238:	7bfa      	ldrb	r2, [r7, #15]
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	440b      	add	r3, r1
 8007246:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800724e:	7bfa      	ldrb	r2, [r7, #15]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	440b      	add	r3, r1
 800725c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007264:	7bfa      	ldrb	r2, [r7, #15]
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	440b      	add	r3, r1
 8007272:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	3301      	adds	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
 8007280:	7bfa      	ldrb	r2, [r7, #15]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d3b5      	bcc.n	80071f6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	687e      	ldr	r6, [r7, #4]
 8007292:	466d      	mov	r5, sp
 8007294:	f106 0410 	add.w	r4, r6, #16
 8007298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800729a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	1d33      	adds	r3, r6, #4
 80072a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072a4:	6838      	ldr	r0, [r7, #0]
 80072a6:	f003 fb0e 	bl	800a8c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d102      	bne.n	80072c8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f805 	bl	80072d2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800730a:	b29b      	uxth	r3, r3
 800730c:	f043 0302 	orr.w	r3, r3, #2
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
	...

08007328 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a04      	ldr	r2, [pc, #16]	; (8007344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	58000400 	.word	0x58000400

08007348 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800734c:	4b04      	ldr	r3, [pc, #16]	; (8007360 <HAL_PWREx_GetVoltageRange+0x18>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58000400 	.word	0x58000400

08007364 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007376:	d101      	bne.n	800737c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <LL_RCC_HSE_Enable>:
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800738c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <LL_RCC_HSE_Disable>:
{
 80073a6:	b480      	push	{r7}
 80073a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80073aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b8:	6013      	str	r3, [r2, #0]
}
 80073ba:	bf00      	nop
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <LL_RCC_HSE_IsReady>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80073c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d6:	d101      	bne.n	80073dc <LL_RCC_HSE_IsReady+0x18>
 80073d8:	2301      	movs	r3, #1
 80073da:	e000      	b.n	80073de <LL_RCC_HSE_IsReady+0x1a>
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <LL_RCC_HSI_Enable>:
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80073ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fa:	6013      	str	r3, [r2, #0]
}
 80073fc:	bf00      	nop
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <LL_RCC_HSI_Disable>:
{
 8007406:	b480      	push	{r7}
 8007408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800740a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007418:	6013      	str	r3, [r2, #0]
}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <LL_RCC_HSI_IsReady>:
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007436:	d101      	bne.n	800743c <LL_RCC_HSI_IsReady+0x18>
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <LL_RCC_HSI_IsReady+0x1a>
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007462:	4313      	orrs	r3, r2
 8007464:	604b      	str	r3, [r1, #4]
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <LL_RCC_HSI48_Enable>:
{
 8007472:	b480      	push	{r7}
 8007474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800747a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800747e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800748a:	bf00      	nop
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <LL_RCC_HSI48_Disable>:
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800749c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074a4:	f023 0301 	bic.w	r3, r3, #1
 80074a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80074ac:	bf00      	nop
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <LL_RCC_HSI48_IsReady>:
{
 80074b6:	b480      	push	{r7}
 80074b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80074ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d101      	bne.n	80074ce <LL_RCC_HSI48_IsReady+0x18>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e000      	b.n	80074d0 <LL_RCC_HSI48_IsReady+0x1a>
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <LL_RCC_LSE_Enable>:
{
 80074da:	b480      	push	{r7}
 80074dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074f2:	bf00      	nop
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <LL_RCC_LSE_Disable>:
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <LL_RCC_LSE_EnableBypass>:
{
 800751e:	b480      	push	{r7}
 8007520:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800752e:	f043 0304 	orr.w	r3, r3, #4
 8007532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007536:	bf00      	nop
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <LL_RCC_LSE_DisableBypass>:
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007550:	f023 0304 	bic.w	r3, r3, #4
 8007554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007558:	bf00      	nop
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8007562:	b480      	push	{r7}
 8007564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b02      	cmp	r3, #2
 8007574:	d101      	bne.n	800757a <LL_RCC_LSE_IsReady+0x18>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <LL_RCC_LSE_IsReady+0x1a>
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8007586:	b480      	push	{r7}
 8007588:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800758a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800758e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800759e:	bf00      	nop
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80075ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80075c0:	bf00      	nop
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80075ca:	b480      	push	{r7}
 80075cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80075ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d101      	bne.n	80075e2 <LL_RCC_LSI1_IsReady+0x18>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <LL_RCC_LSI1_IsReady+0x1a>
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80075ee:	b480      	push	{r7}
 80075f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80075f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075fe:	f043 0304 	orr.w	r3, r3, #4
 8007602:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007606:	bf00      	nop
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800761c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007620:	f023 0304 	bic.w	r3, r3, #4
 8007624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007628:	bf00      	nop
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8007632:	b480      	push	{r7}
 8007634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b08      	cmp	r3, #8
 8007644:	d101      	bne.n	800764a <LL_RCC_LSI2_IsReady+0x18>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <LL_RCC_LSI2_IsReady+0x1a>
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800765e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007666:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007692:	f043 0301 	orr.w	r3, r3, #1
 8007696:	6013      	str	r3, [r2, #0]
}
 8007698:	bf00      	nop
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80076a2:	b480      	push	{r7}
 80076a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80076a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076b0:	f023 0301 	bic.w	r3, r3, #1
 80076b4:	6013      	str	r3, [r2, #0]
}
 80076b6:	bf00      	nop
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80076c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d101      	bne.n	80076d6 <LL_RCC_MSI_IsReady+0x16>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <LL_RCC_MSI_IsReady+0x18>
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80076ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	600b      	str	r3, [r1, #0]
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800771a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2bb0      	cmp	r3, #176	; 0xb0
 8007720:	d901      	bls.n	8007726 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8007722:	23b0      	movs	r3, #176	; 0xb0
 8007724:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8007726:	687b      	ldr	r3, [r7, #4]
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800773c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800774e:	4313      	orrs	r3, r2
 8007750:	604b      	str	r3, [r1, #4]
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f023 0203 	bic.w	r2, r3, #3
 8007770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4313      	orrs	r3, r2
 8007778:	608b      	str	r3, [r1, #8]
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007786:	b480      	push	{r7}
 8007788:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800778a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 030c 	and.w	r3, r3, #12
}
 8007794:	4618      	mov	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80077a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80077ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80077d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80077fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007802:	f023 020f 	bic.w	r2, r3, #15
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	091b      	lsrs	r3, r3, #4
 800780a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800780e:	4313      	orrs	r3, r2
 8007810:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4313      	orrs	r3, r2
 800783a:	608b      	str	r3, [r1, #8]
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800785a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4313      	orrs	r3, r2
 8007862:	608b      	str	r3, [r1, #8]
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800787e:	4618      	mov	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800788c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007890:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800789a:	4618      	mov	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80078a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80078c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80078d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e6:	6013      	str	r3, [r2, #0]
}
 80078e8:	bf00      	nop
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80078f2:	b480      	push	{r7}
 80078f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80078f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007904:	6013      	str	r3, [r2, #0]
}
 8007906:	bf00      	nop
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007922:	d101      	bne.n	8007928 <LL_RCC_PLL_IsReady+0x18>
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <LL_RCC_PLL_IsReady+0x1a>
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007944:	4618      	mov	r0, r3
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800794e:	b480      	push	{r7}
 8007950:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800795c:	4618      	mov	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007966:	b480      	push	{r7}
 8007968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800796a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007974:	4618      	mov	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800797e:	b480      	push	{r7}
 8007980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0303 	and.w	r3, r3, #3
}
 800798c:	4618      	mov	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007996:	b480      	push	{r7}
 8007998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a8:	d101      	bne.n	80079ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80079ba:	b480      	push	{r7}
 80079bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80079be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80079c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ce:	d101      	bne.n	80079d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80079e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80079ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f4:	d101      	bne.n	80079fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007a06:	b480      	push	{r7}
 8007a08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a18:	d101      	bne.n	8007a1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a3c:	d101      	bne.n	8007a42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
	...

08007a50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a50:	b590      	push	{r4, r7, lr}
 8007a52:	b08d      	sub	sp, #52	; 0x34
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e363      	b.n	800812a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 808d 	beq.w	8007b8a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a70:	f7ff fe89 	bl	8007786 <LL_RCC_GetSysClkSource>
 8007a74:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a76:	f7ff ff82 	bl	800797e <LL_RCC_PLL_GetMainSource>
 8007a7a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_RCC_OscConfig+0x3e>
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	2b0c      	cmp	r3, #12
 8007a86:	d147      	bne.n	8007b18 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d144      	bne.n	8007b18 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e347      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007a9e:	f7ff fe34 	bl	800770a <LL_RCC_MSI_GetRange>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d914      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fd2f 	bl	8008510 <RCC_SetFlashLatencyFromMSIRange>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e336      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fe0e 	bl	80076e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fe32 	bl	8007734 <LL_RCC_MSI_SetCalibTrimming>
 8007ad0:	e013      	b.n	8007afa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fe03 	bl	80076e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fe27 	bl	8007734 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fd10 	bl	8008510 <RCC_SetFlashLatencyFromMSIRange>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e317      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007afa:	f000 fcc9 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 8007afe:	4603      	mov	r3, r0
 8007b00:	4aa4      	ldr	r2, [pc, #656]	; (8007d94 <HAL_RCC_OscConfig+0x344>)
 8007b02:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b04:	4ba4      	ldr	r3, [pc, #656]	; (8007d98 <HAL_RCC_OscConfig+0x348>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fd fa9f 	bl	800504c <HAL_InitTick>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d039      	beq.n	8007b88 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e308      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01e      	beq.n	8007b5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007b20:	f7ff fdb0 	bl	8007684 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b24:	f7fd fae0 	bl	80050e8 <HAL_GetTick>
 8007b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b2c:	f7fd fadc 	bl	80050e8 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e2f5      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007b3e:	f7ff fdbf 	bl	80076c0 <LL_RCC_MSI_IsReady>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0f1      	beq.n	8007b2c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7ff fdc8 	bl	80076e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fdec 	bl	8007734 <LL_RCC_MSI_SetCalibTrimming>
 8007b5c:	e015      	b.n	8007b8a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007b5e:	f7ff fda0 	bl	80076a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b62:	f7fd fac1 	bl	80050e8 <HAL_GetTick>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b6a:	f7fd fabd 	bl	80050e8 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e2d6      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007b7c:	f7ff fda0 	bl	80076c0 <LL_RCC_MSI_IsReady>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f1      	bne.n	8007b6a <HAL_RCC_OscConfig+0x11a>
 8007b86:	e000      	b.n	8007b8a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007b88:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d047      	beq.n	8007c26 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b96:	f7ff fdf6 	bl	8007786 <LL_RCC_GetSysClkSource>
 8007b9a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b9c:	f7ff feef 	bl	800797e <LL_RCC_PLL_GetMainSource>
 8007ba0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d005      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x164>
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	2b0c      	cmp	r3, #12
 8007bac:	d108      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d105      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d134      	bne.n	8007c26 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e2b4      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc8:	d102      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x180>
 8007bca:	f7ff fbdd 	bl	8007388 <LL_RCC_HSE_Enable>
 8007bce:	e001      	b.n	8007bd4 <HAL_RCC_OscConfig+0x184>
 8007bd0:	f7ff fbe9 	bl	80073a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bdc:	f7fd fa84 	bl	80050e8 <HAL_GetTick>
 8007be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007be4:	f7fd fa80 	bl	80050e8 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b64      	cmp	r3, #100	; 0x64
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e299      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007bf6:	f7ff fbe5 	bl	80073c4 <LL_RCC_HSE_IsReady>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f1      	beq.n	8007be4 <HAL_RCC_OscConfig+0x194>
 8007c00:	e011      	b.n	8007c26 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c02:	f7fd fa71 	bl	80050e8 <HAL_GetTick>
 8007c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007c08:	e008      	b.n	8007c1c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c0a:	f7fd fa6d 	bl	80050e8 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b64      	cmp	r3, #100	; 0x64
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e286      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007c1c:	f7ff fbd2 	bl	80073c4 <LL_RCC_HSE_IsReady>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f1      	bne.n	8007c0a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d04c      	beq.n	8007ccc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c32:	f7ff fda8 	bl	8007786 <LL_RCC_GetSysClkSource>
 8007c36:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c38:	f7ff fea1 	bl	800797e <LL_RCC_PLL_GetMainSource>
 8007c3c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d005      	beq.n	8007c50 <HAL_RCC_OscConfig+0x200>
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	2b0c      	cmp	r3, #12
 8007c48:	d10e      	bne.n	8007c68 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d10b      	bne.n	8007c68 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e266      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff fbf1 	bl	8007448 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007c66:	e031      	b.n	8007ccc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d019      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c70:	f7ff fbba 	bl	80073e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fd fa38 	bl	80050e8 <HAL_GetTick>
 8007c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c7c:	f7fd fa34 	bl	80050e8 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e24d      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007c8e:	f7ff fbc9 	bl	8007424 <LL_RCC_HSI_IsReady>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0f1      	beq.n	8007c7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fbd3 	bl	8007448 <LL_RCC_HSI_SetCalibTrimming>
 8007ca2:	e013      	b.n	8007ccc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ca4:	f7ff fbaf 	bl	8007406 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca8:	f7fd fa1e 	bl	80050e8 <HAL_GetTick>
 8007cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cb0:	f7fd fa1a 	bl	80050e8 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e233      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007cc2:	f7ff fbaf 	bl	8007424 <LL_RCC_HSI_IsReady>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1f1      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80a3 	beq.w	8007e2c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d076      	beq.n	8007ddc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d046      	beq.n	8007d88 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007cfa:	f7ff fc66 	bl	80075ca <LL_RCC_LSI1_IsReady>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d113      	bne.n	8007d2c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007d04:	f7ff fc3f 	bl	8007586 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d08:	f7fd f9ee 	bl	80050e8 <HAL_GetTick>
 8007d0c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007d0e:	e008      	b.n	8007d22 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007d10:	f7fd f9ea 	bl	80050e8 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e203      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007d22:	f7ff fc52 	bl	80075ca <LL_RCC_LSI1_IsReady>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0f1      	beq.n	8007d10 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007d2c:	f7ff fc5f 	bl	80075ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fd f9da 	bl	80050e8 <HAL_GetTick>
 8007d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007d38:	f7fd f9d6 	bl	80050e8 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e1ef      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007d4a:	f7ff fc72 	bl	8007632 <LL_RCC_LSI2_IsReady>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0f1      	beq.n	8007d38 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fc7c 	bl	8007656 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007d5e:	f7ff fc23 	bl	80075a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d62:	f7fd f9c1 	bl	80050e8 <HAL_GetTick>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007d68:	e008      	b.n	8007d7c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007d6a:	f7fd f9bd 	bl	80050e8 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d901      	bls.n	8007d7c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e1d6      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007d7c:	f7ff fc25 	bl	80075ca <LL_RCC_LSI1_IsReady>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f1      	bne.n	8007d6a <HAL_RCC_OscConfig+0x31a>
 8007d86:	e051      	b.n	8007e2c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007d88:	f7ff fbfd 	bl	8007586 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fd f9ac 	bl	80050e8 <HAL_GetTick>
 8007d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007d92:	e00c      	b.n	8007dae <HAL_RCC_OscConfig+0x35e>
 8007d94:	20000018 	.word	0x20000018
 8007d98:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007d9c:	f7fd f9a4 	bl	80050e8 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e1bd      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007dae:	f7ff fc0c 	bl	80075ca <LL_RCC_LSI1_IsReady>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0f1      	beq.n	8007d9c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007db8:	f7ff fc2a 	bl	8007610 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007dbc:	e008      	b.n	8007dd0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007dbe:	f7fd f993 	bl	80050e8 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d901      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e1ac      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007dd0:	f7ff fc2f 	bl	8007632 <LL_RCC_LSI2_IsReady>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f1      	bne.n	8007dbe <HAL_RCC_OscConfig+0x36e>
 8007dda:	e027      	b.n	8007e2c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007ddc:	f7ff fc18 	bl	8007610 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de0:	f7fd f982 	bl	80050e8 <HAL_GetTick>
 8007de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007de8:	f7fd f97e 	bl	80050e8 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e197      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007dfa:	f7ff fc1a 	bl	8007632 <LL_RCC_LSI2_IsReady>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f1      	bne.n	8007de8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007e04:	f7ff fbd0 	bl	80075a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e08:	f7fd f96e 	bl	80050e8 <HAL_GetTick>
 8007e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007e10:	f7fd f96a 	bl	80050e8 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e183      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007e22:	f7ff fbd2 	bl	80075ca <LL_RCC_LSI1_IsReady>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f1      	bne.n	8007e10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d05b      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e38:	4ba7      	ldr	r3, [pc, #668]	; (80080d8 <HAL_RCC_OscConfig+0x688>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d114      	bne.n	8007e6e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007e44:	f7ff fa70 	bl	8007328 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e48:	f7fd f94e 	bl	80050e8 <HAL_GetTick>
 8007e4c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e50:	f7fd f94a 	bl	80050e8 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e163      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e62:	4b9d      	ldr	r3, [pc, #628]	; (80080d8 <HAL_RCC_OscConfig+0x688>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0f0      	beq.n	8007e50 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d102      	bne.n	8007e7c <HAL_RCC_OscConfig+0x42c>
 8007e76:	f7ff fb30 	bl	80074da <LL_RCC_LSE_Enable>
 8007e7a:	e00c      	b.n	8007e96 <HAL_RCC_OscConfig+0x446>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b05      	cmp	r3, #5
 8007e82:	d104      	bne.n	8007e8e <HAL_RCC_OscConfig+0x43e>
 8007e84:	f7ff fb4b 	bl	800751e <LL_RCC_LSE_EnableBypass>
 8007e88:	f7ff fb27 	bl	80074da <LL_RCC_LSE_Enable>
 8007e8c:	e003      	b.n	8007e96 <HAL_RCC_OscConfig+0x446>
 8007e8e:	f7ff fb35 	bl	80074fc <LL_RCC_LSE_Disable>
 8007e92:	f7ff fb55 	bl	8007540 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d014      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9e:	f7fd f923 	bl	80050e8 <HAL_GetTick>
 8007ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007ea4:	e00a      	b.n	8007ebc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ea6:	f7fd f91f 	bl	80050e8 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e136      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007ebc:	f7ff fb51 	bl	8007562 <LL_RCC_LSE_IsReady>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0ef      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x456>
 8007ec6:	e013      	b.n	8007ef0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec8:	f7fd f90e 	bl	80050e8 <HAL_GetTick>
 8007ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007ece:	e00a      	b.n	8007ee6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ed0:	f7fd f90a 	bl	80050e8 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e121      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007ee6:	f7ff fb3c 	bl	8007562 <LL_RCC_LSE_IsReady>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1ef      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d02c      	beq.n	8007f56 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d014      	beq.n	8007f2e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f04:	f7ff fab5 	bl	8007472 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f08:	f7fd f8ee 	bl	80050e8 <HAL_GetTick>
 8007f0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f10:	f7fd f8ea 	bl	80050e8 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e103      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007f22:	f7ff fac8 	bl	80074b6 <LL_RCC_HSI48_IsReady>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d0f1      	beq.n	8007f10 <HAL_RCC_OscConfig+0x4c0>
 8007f2c:	e013      	b.n	8007f56 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f2e:	f7ff fab1 	bl	8007494 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f32:	f7fd f8d9 	bl	80050e8 <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f3a:	f7fd f8d5 	bl	80050e8 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e0ee      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007f4c:	f7ff fab3 	bl	80074b6 <LL_RCC_HSI48_IsReady>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1f1      	bne.n	8007f3a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80e4 	beq.w	8008128 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f60:	f7ff fc11 	bl	8007786 <LL_RCC_GetSysClkSource>
 8007f64:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	f040 80b4 	bne.w	80080e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f003 0203 	and.w	r2, r3, #3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d123      	bne.n	8007fce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d11c      	bne.n	8007fce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	0a1b      	lsrs	r3, r3, #8
 8007f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d114      	bne.n	8007fce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d10d      	bne.n	8007fce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d106      	bne.n	8007fce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d05d      	beq.n	800808a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b0c      	cmp	r3, #12
 8007fd2:	d058      	beq.n	8008086 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e0a1      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007fe6:	f7ff fc84 	bl	80078f2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007fea:	f7fd f87d 	bl	80050e8 <HAL_GetTick>
 8007fee:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff2:	f7fd f879 	bl	80050e8 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e092      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1ef      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	4b30      	ldr	r3, [pc, #192]	; (80080dc <HAL_RCC_OscConfig+0x68c>)
 800801a:	4013      	ands	r3, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008024:	4311      	orrs	r1, r2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800802a:	0212      	lsls	r2, r2, #8
 800802c:	4311      	orrs	r1, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008032:	4311      	orrs	r1, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008038:	4311      	orrs	r1, r2
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800803e:	430a      	orrs	r2, r1
 8008040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008044:	4313      	orrs	r3, r2
 8008046:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008048:	f7ff fc44 	bl	80078d4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800804c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800805a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800805c:	f7fd f844 	bl	80050e8 <HAL_GetTick>
 8008060:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008064:	f7fd f840 	bl	80050e8 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e059      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0ef      	beq.n	8008064 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008084:	e050      	b.n	8008128 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e04f      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800808a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d147      	bne.n	8008128 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008098:	f7ff fc1c 	bl	80078d4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800809c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080ac:	f7fd f81c 	bl	80050e8 <HAL_GetTick>
 80080b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080b4:	f7fd f818 	bl	80050e8 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e031      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0ef      	beq.n	80080b4 <HAL_RCC_OscConfig+0x664>
 80080d4:	e028      	b.n	8008128 <HAL_RCC_OscConfig+0x6d8>
 80080d6:	bf00      	nop
 80080d8:	58000400 	.word	0x58000400
 80080dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b0c      	cmp	r3, #12
 80080e4:	d01e      	beq.n	8008124 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e6:	f7ff fc04 	bl	80078f2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ea:	f7fc fffd 	bl	80050e8 <HAL_GetTick>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080f2:	f7fc fff9 	bl	80050e8 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e012      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1ef      	bne.n	80080f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <HAL_RCC_OscConfig+0x6e4>)
 800811e:	4013      	ands	r3, r2
 8008120:	60cb      	str	r3, [r1, #12]
 8008122:	e001      	b.n	8008128 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e000      	b.n	800812a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3734      	adds	r7, #52	; 0x34
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}
 8008132:	bf00      	nop
 8008134:	eefefffc 	.word	0xeefefffc

08008138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e12d      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800814c:	4b98      	ldr	r3, [pc, #608]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d91b      	bls.n	8008192 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815a:	4b95      	ldr	r3, [pc, #596]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f023 0207 	bic.w	r2, r3, #7
 8008162:	4993      	ldr	r1, [pc, #588]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	4313      	orrs	r3, r2
 8008168:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7fc ffbd 	bl	80050e8 <HAL_GetTick>
 800816e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008170:	e008      	b.n	8008184 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008172:	f7fc ffb9 	bl	80050e8 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e111      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008184:	4b8a      	ldr	r3, [pc, #552]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d1ef      	bne.n	8008172 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d016      	beq.n	80081cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fafb 	bl	800779e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80081a8:	f7fc ff9e 	bl	80050e8 <HAL_GetTick>
 80081ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80081b0:	f7fc ff9a 	bl	80050e8 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e0f2      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80081c2:	f7ff fbe8 	bl	8007996 <LL_RCC_IsActiveFlag_HPRE>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0f1      	beq.n	80081b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d016      	beq.n	8008206 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff faf2 	bl	80077c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80081e2:	f7fc ff81 	bl	80050e8 <HAL_GetTick>
 80081e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80081ea:	f7fc ff7d 	bl	80050e8 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e0d5      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80081fc:	f7ff fbdd 	bl	80079ba <LL_RCC_IsActiveFlag_C2HPRE>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f1      	beq.n	80081ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d016      	beq.n	8008240 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff faeb 	bl	80077f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800821c:	f7fc ff64 	bl	80050e8 <HAL_GetTick>
 8008220:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008222:	e008      	b.n	8008236 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008224:	f7fc ff60 	bl	80050e8 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e0b8      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008236:	f7ff fbd3 	bl	80079e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0f1      	beq.n	8008224 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d016      	beq.n	800827a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fae5 	bl	8007820 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008256:	f7fc ff47 	bl	80050e8 <HAL_GetTick>
 800825a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800825c:	e008      	b.n	8008270 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800825e:	f7fc ff43 	bl	80050e8 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e09b      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008270:	f7ff fbc9 	bl	8007a06 <LL_RCC_IsActiveFlag_PPRE1>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f1      	beq.n	800825e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d017      	beq.n	80082b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff fadb 	bl	8007848 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008292:	f7fc ff29 	bl	80050e8 <HAL_GetTick>
 8008296:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008298:	e008      	b.n	80082ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800829a:	f7fc ff25 	bl	80050e8 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d901      	bls.n	80082ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e07d      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80082ac:	f7ff fbbd 	bl	8007a2a <LL_RCC_IsActiveFlag_PPRE2>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0f1      	beq.n	800829a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d043      	beq.n	800834a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d106      	bne.n	80082d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80082ca:	f7ff f87b 	bl	80073c4 <LL_RCC_HSE_IsReady>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d11e      	bne.n	8008312 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e067      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d106      	bne.n	80082ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80082e0:	f7ff fb16 	bl	8007910 <LL_RCC_PLL_IsReady>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d113      	bne.n	8008312 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e05c      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80082f6:	f7ff f9e3 	bl	80076c0 <LL_RCC_MSI_IsReady>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d108      	bne.n	8008312 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e051      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008304:	f7ff f88e 	bl	8007424 <LL_RCC_HSI_IsReady>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e04a      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fa21 	bl	800775e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800831c:	f7fc fee4 	bl	80050e8 <HAL_GetTick>
 8008320:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008322:	e00a      	b.n	800833a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008324:	f7fc fee0 	bl	80050e8 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e036      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800833a:	f7ff fa24 	bl	8007786 <LL_RCC_GetSysClkSource>
 800833e:	4602      	mov	r2, r0
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	429a      	cmp	r2, r3
 8008348:	d1ec      	bne.n	8008324 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800834a:	4b19      	ldr	r3, [pc, #100]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d21b      	bcs.n	8008390 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008358:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f023 0207 	bic.w	r2, r3, #7
 8008360:	4913      	ldr	r1, [pc, #76]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	4313      	orrs	r3, r2
 8008366:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008368:	f7fc febe 	bl	80050e8 <HAL_GetTick>
 800836c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800836e:	e008      	b.n	8008382 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008370:	f7fc feba 	bl	80050e8 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e012      	b.n	80083a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008382:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <HAL_RCC_ClockConfig+0x278>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d1ef      	bne.n	8008370 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008390:	f000 f87e 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 8008394:	4603      	mov	r3, r0
 8008396:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <HAL_RCC_ClockConfig+0x27c>)
 8008398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800839a:	f7fc feb1 	bl	8005100 <HAL_GetTickPrio>
 800839e:	4603      	mov	r3, r0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fc fe53 	bl	800504c <HAL_InitTick>
 80083a6:	4603      	mov	r3, r0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	58004000 	.word	0x58004000
 80083b4:	20000018 	.word	0x20000018

080083b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083b8:	b590      	push	{r4, r7, lr}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083be:	f7ff f9e2 	bl	8007786 <LL_RCC_GetSysClkSource>
 80083c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80083ca:	f7ff f99e 	bl	800770a <LL_RCC_MSI_GetRange>
 80083ce:	4603      	mov	r3, r0
 80083d0:	091b      	lsrs	r3, r3, #4
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	4a2b      	ldr	r2, [pc, #172]	; (8008484 <HAL_RCC_GetSysClockFreq+0xcc>)
 80083d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	e04b      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d102      	bne.n	80083ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80083e6:	4b28      	ldr	r3, [pc, #160]	; (8008488 <HAL_RCC_GetSysClockFreq+0xd0>)
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	e045      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d10a      	bne.n	8008408 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80083f2:	f7fe ffb7 	bl	8007364 <LL_RCC_HSE_IsEnabledDiv2>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d102      	bne.n	8008402 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80083fc:	4b22      	ldr	r3, [pc, #136]	; (8008488 <HAL_RCC_GetSysClockFreq+0xd0>)
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e03a      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008402:	4b22      	ldr	r3, [pc, #136]	; (800848c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e037      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008408:	f7ff fab9 	bl	800797e <LL_RCC_PLL_GetMainSource>
 800840c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d003      	beq.n	800841c <HAL_RCC_GetSysClockFreq+0x64>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d003      	beq.n	8008422 <HAL_RCC_GetSysClockFreq+0x6a>
 800841a:	e00d      	b.n	8008438 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800841c:	4b1a      	ldr	r3, [pc, #104]	; (8008488 <HAL_RCC_GetSysClockFreq+0xd0>)
 800841e:	60bb      	str	r3, [r7, #8]
        break;
 8008420:	e015      	b.n	800844e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008422:	f7fe ff9f 	bl	8007364 <LL_RCC_HSE_IsEnabledDiv2>
 8008426:	4603      	mov	r3, r0
 8008428:	2b01      	cmp	r3, #1
 800842a:	d102      	bne.n	8008432 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800842c:	4b16      	ldr	r3, [pc, #88]	; (8008488 <HAL_RCC_GetSysClockFreq+0xd0>)
 800842e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008430:	e00d      	b.n	800844e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008432:	4b16      	ldr	r3, [pc, #88]	; (800848c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008434:	60bb      	str	r3, [r7, #8]
        break;
 8008436:	e00a      	b.n	800844e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008438:	f7ff f967 	bl	800770a <LL_RCC_MSI_GetRange>
 800843c:	4603      	mov	r3, r0
 800843e:	091b      	lsrs	r3, r3, #4
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	4a0f      	ldr	r2, [pc, #60]	; (8008484 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800844a:	60bb      	str	r3, [r7, #8]
        break;
 800844c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800844e:	f7ff fa71 	bl	8007934 <LL_RCC_PLL_GetN>
 8008452:	4602      	mov	r2, r0
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	fb03 f402 	mul.w	r4, r3, r2
 800845a:	f7ff fa84 	bl	8007966 <LL_RCC_PLL_GetDivider>
 800845e:	4603      	mov	r3, r0
 8008460:	091b      	lsrs	r3, r3, #4
 8008462:	3301      	adds	r3, #1
 8008464:	fbb4 f4f3 	udiv	r4, r4, r3
 8008468:	f7ff fa71 	bl	800794e <LL_RCC_PLL_GetR>
 800846c:	4603      	mov	r3, r0
 800846e:	0f5b      	lsrs	r3, r3, #29
 8008470:	3301      	adds	r3, #1
 8008472:	fbb4 f3f3 	udiv	r3, r4, r3
 8008476:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008478:	68fb      	ldr	r3, [r7, #12]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	bd90      	pop	{r4, r7, pc}
 8008482:	bf00      	nop
 8008484:	0800f55c 	.word	0x0800f55c
 8008488:	00f42400 	.word	0x00f42400
 800848c:	01e84800 	.word	0x01e84800

08008490 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008490:	b598      	push	{r3, r4, r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008494:	f7ff ff90 	bl	80083b8 <HAL_RCC_GetSysClockFreq>
 8008498:	4604      	mov	r4, r0
 800849a:	f7ff f9e9 	bl	8007870 <LL_RCC_GetAHBPrescaler>
 800849e:	4603      	mov	r3, r0
 80084a0:	091b      	lsrs	r3, r3, #4
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	4a03      	ldr	r2, [pc, #12]	; (80084b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80084a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	bd98      	pop	{r3, r4, r7, pc}
 80084b4:	0800f4fc 	.word	0x0800f4fc

080084b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084b8:	b598      	push	{r3, r4, r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80084bc:	f7ff ffe8 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 80084c0:	4604      	mov	r4, r0
 80084c2:	f7ff f9ef 	bl	80078a4 <LL_RCC_GetAPB1Prescaler>
 80084c6:	4603      	mov	r3, r0
 80084c8:	0a1b      	lsrs	r3, r3, #8
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80084d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d4:	f003 031f 	and.w	r3, r3, #31
 80084d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80084dc:	4618      	mov	r0, r3
 80084de:	bd98      	pop	{r3, r4, r7, pc}
 80084e0:	0800f53c 	.word	0x0800f53c

080084e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084e4:	b598      	push	{r3, r4, r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80084e8:	f7ff ffd2 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 80084ec:	4604      	mov	r4, r0
 80084ee:	f7ff f9e5 	bl	80078bc <LL_RCC_GetAPB2Prescaler>
 80084f2:	4603      	mov	r3, r0
 80084f4:	0adb      	lsrs	r3, r3, #11
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	4a04      	ldr	r2, [pc, #16]	; (800850c <HAL_RCC_GetPCLK2Freq+0x28>)
 80084fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008508:	4618      	mov	r0, r3
 800850a:	bd98      	pop	{r3, r4, r7, pc}
 800850c:	0800f53c 	.word	0x0800f53c

08008510 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008510:	b590      	push	{r4, r7, lr}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2bb0      	cmp	r3, #176	; 0xb0
 800851c:	d903      	bls.n	8008526 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800851e:	4b15      	ldr	r3, [pc, #84]	; (8008574 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e007      	b.n	8008536 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	091b      	lsrs	r3, r3, #4
 800852a:	f003 030f 	and.w	r3, r3, #15
 800852e:	4a11      	ldr	r2, [pc, #68]	; (8008574 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008534:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008536:	f7ff f9a7 	bl	8007888 <LL_RCC_GetAHB4Prescaler>
 800853a:	4603      	mov	r3, r0
 800853c:	091b      	lsrs	r3, r3, #4
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	4a0d      	ldr	r2, [pc, #52]	; (8008578 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	fbb2 f3f3 	udiv	r3, r2, r3
 800854e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4a0a      	ldr	r2, [pc, #40]	; (800857c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008554:	fba2 2303 	umull	r2, r3, r2, r3
 8008558:	0c9c      	lsrs	r4, r3, #18
 800855a:	f7fe fef5 	bl	8007348 <HAL_PWREx_GetVoltageRange>
 800855e:	4603      	mov	r3, r0
 8008560:	4619      	mov	r1, r3
 8008562:	4620      	mov	r0, r4
 8008564:	f000 f80c 	bl	8008580 <RCC_SetFlashLatency>
 8008568:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	bd90      	pop	{r4, r7, pc}
 8008572:	bf00      	nop
 8008574:	0800f55c 	.word	0x0800f55c
 8008578:	0800f4fc 	.word	0x0800f4fc
 800857c:	431bde83 	.word	0x431bde83

08008580 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008580:	b590      	push	{r4, r7, lr}
 8008582:	b093      	sub	sp, #76	; 0x4c
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800858a:	4b37      	ldr	r3, [pc, #220]	; (8008668 <RCC_SetFlashLatency+0xe8>)
 800858c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008590:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008596:	4a35      	ldr	r2, [pc, #212]	; (800866c <RCC_SetFlashLatency+0xec>)
 8008598:	f107 031c 	add.w	r3, r7, #28
 800859c:	ca07      	ldmia	r2, {r0, r1, r2}
 800859e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80085a2:	4b33      	ldr	r3, [pc, #204]	; (8008670 <RCC_SetFlashLatency+0xf0>)
 80085a4:	f107 040c 	add.w	r4, r7, #12
 80085a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80085ae:	2300      	movs	r3, #0
 80085b0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b8:	d11a      	bne.n	80085f0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80085ba:	2300      	movs	r3, #0
 80085bc:	643b      	str	r3, [r7, #64]	; 0x40
 80085be:	e013      	b.n	80085e8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80085c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	3348      	adds	r3, #72	; 0x48
 80085c6:	443b      	add	r3, r7
 80085c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d807      	bhi.n	80085e2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80085d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	3348      	adds	r3, #72	; 0x48
 80085d8:	443b      	add	r3, r7
 80085da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80085de:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80085e0:	e020      	b.n	8008624 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80085e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e4:	3301      	adds	r3, #1
 80085e6:	643b      	str	r3, [r7, #64]	; 0x40
 80085e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d9e8      	bls.n	80085c0 <RCC_SetFlashLatency+0x40>
 80085ee:	e019      	b.n	8008624 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f4:	e013      	b.n	800861e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80085f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	3348      	adds	r3, #72	; 0x48
 80085fc:	443b      	add	r3, r7
 80085fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	429a      	cmp	r2, r3
 8008606:	d807      	bhi.n	8008618 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	3348      	adds	r3, #72	; 0x48
 800860e:	443b      	add	r3, r7
 8008610:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008614:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008616:	e005      	b.n	8008624 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861a:	3301      	adds	r3, #1
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	2b02      	cmp	r3, #2
 8008622:	d9e8      	bls.n	80085f6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008624:	4b13      	ldr	r3, [pc, #76]	; (8008674 <RCC_SetFlashLatency+0xf4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f023 0207 	bic.w	r2, r3, #7
 800862c:	4911      	ldr	r1, [pc, #68]	; (8008674 <RCC_SetFlashLatency+0xf4>)
 800862e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008630:	4313      	orrs	r3, r2
 8008632:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008634:	f7fc fd58 	bl	80050e8 <HAL_GetTick>
 8008638:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800863a:	e008      	b.n	800864e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800863c:	f7fc fd54 	bl	80050e8 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d901      	bls.n	800864e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e007      	b.n	800865e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <RCC_SetFlashLatency+0xf4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008658:	429a      	cmp	r2, r3
 800865a:	d1ef      	bne.n	800863c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	374c      	adds	r7, #76	; 0x4c
 8008662:	46bd      	mov	sp, r7
 8008664:	bd90      	pop	{r4, r7, pc}
 8008666:	bf00      	nop
 8008668:	0800ed50 	.word	0x0800ed50
 800866c:	0800ed60 	.word	0x0800ed60
 8008670:	0800ed6c 	.word	0x0800ed6c
 8008674:	58004000 	.word	0x58004000

08008678 <LL_RCC_LSE_IsEnabled>:
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800867c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <LL_RCC_LSE_IsEnabled+0x18>
 800868c:	2301      	movs	r3, #1
 800868e:	e000      	b.n	8008692 <LL_RCC_LSE_IsEnabled+0x1a>
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <LL_RCC_LSE_IsReady>:
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80086a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d101      	bne.n	80086b4 <LL_RCC_LSE_IsReady+0x18>
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <LL_RCC_LSE_IsReady+0x1a>
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <LL_RCC_MSI_EnablePLLMode>:
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80086c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086ce:	f043 0304 	orr.w	r3, r3, #4
 80086d2:	6013      	str	r3, [r2, #0]
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <LL_RCC_SetRFWKPClockSource>:
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80086e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <LL_RCC_SetSMPSClockSource>:
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	f023 0203 	bic.w	r2, r3, #3
 800871c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4313      	orrs	r3, r2
 8008724:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <LL_RCC_SetSMPSPrescaler>:
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800873a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4313      	orrs	r3, r2
 800874c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <LL_RCC_SetUSARTClockSource>:
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876a:	f023 0203 	bic.w	r2, r3, #3
 800876e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4313      	orrs	r3, r2
 8008776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <LL_RCC_SetLPUARTClockSource>:
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800878e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800879a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <LL_RCC_SetI2CClockSource>:
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80087ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	091b      	lsrs	r3, r3, #4
 80087c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80087ca:	43db      	mvns	r3, r3
 80087cc:	401a      	ands	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80087d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087da:	4313      	orrs	r3, r2
 80087dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <LL_RCC_SetLPTIMClockSource>:
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80087f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	43db      	mvns	r3, r3
 8008804:	401a      	ands	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	041b      	lsls	r3, r3, #16
 800880a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800880e:	4313      	orrs	r3, r2
 8008810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <LL_RCC_SetSAIClockSource>:
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4313      	orrs	r3, r2
 800883c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <LL_RCC_SetRNGClockSource>:
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <LL_RCC_SetCLK48ClockSource>:
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008888:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800888c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4313      	orrs	r3, r2
 8008894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <LL_RCC_SetUSBClockSource>:
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff ffe3 	bl	8008878 <LL_RCC_SetCLK48ClockSource>
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <LL_RCC_SetADCClockSource>:
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80088c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <LL_RCC_SetRTCClockSource>:
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80088ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4313      	orrs	r3, r2
 8008902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <LL_RCC_GetRTCClockSource>:
{
 8008912:	b480      	push	{r7}
 8008914:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800891a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008922:	4618      	mov	r0, r3
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <LL_RCC_ForceBackupDomainReset>:
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800893c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <LL_RCC_ReleaseBackupDomainReset>:
{
 800894e:	b480      	push	{r7}
 8008950:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800895a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800895e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008966:	bf00      	nop
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <LL_RCC_PLLSAI1_Enable>:
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800897e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008982:	6013      	str	r3, [r2, #0]
}
 8008984:	bf00      	nop
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <LL_RCC_PLLSAI1_Disable>:
{
 800898e:	b480      	push	{r7}
 8008990:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800899c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089a0:	6013      	str	r3, [r2, #0]
}
 80089a2:	bf00      	nop
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <LL_RCC_PLLSAI1_IsReady>:
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80089b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089be:	d101      	bne.n	80089c4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80089c0:	2301      	movs	r3, #1
 80089c2:	e000      	b.n	80089c6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80089d8:	2300      	movs	r3, #0
 80089da:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80089dc:	2300      	movs	r3, #0
 80089de:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d034      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80089f4:	d021      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80089f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80089fa:	d81b      	bhi.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a00:	d01d      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008a02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a06:	d815      	bhi.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a10:	d110      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a20:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008a22:	e00d      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3304      	adds	r3, #4
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f94d 	bl	8008cc8 <RCCEx_PLLSAI1_ConfigNP>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008a32:	e005      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	77fb      	strb	r3, [r7, #31]
        break;
 8008a38:	e002      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a40:	7ffb      	ldrb	r3, [r7, #31]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff fee8 	bl	8008820 <LL_RCC_SetSAIClockSource>
 8008a50:	e001      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a52:	7ffb      	ldrb	r3, [r7, #31]
 8008a54:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d046      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008a62:	f7ff ff56 	bl	8008912 <LL_RCC_GetRTCClockSource>
 8008a66:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d03c      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008a72:	f7fe fc59 	bl	8007328 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d105      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff ff30 	bl	80088e6 <LL_RCC_SetRTCClockSource>
 8008a86:	e02e      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a90:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008a92:	f7ff ff4b 	bl	800892c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008a96:	f7ff ff5a 	bl	800894e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008ab2:	f7ff fde1 	bl	8008678 <LL_RCC_LSE_IsEnabled>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d114      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008abc:	f7fc fb14 	bl	80050e8 <HAL_GetTick>
 8008ac0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008ac2:	e00b      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ac4:	f7fc fb10 	bl	80050e8 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d902      	bls.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	77fb      	strb	r3, [r7, #31]
              break;
 8008ada:	e004      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008adc:	f7ff fdde 	bl	800869c <LL_RCC_LSE_IsReady>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d1ee      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008ae6:	7ffb      	ldrb	r3, [r7, #31]
 8008ae8:	77bb      	strb	r3, [r7, #30]
 8008aea:	e001      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aec:	7ffb      	ldrb	r3, [r7, #31]
 8008aee:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d004      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fe2a 	bl	800875a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d004      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff fe35 	bl	8008786 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff fe5d 	bl	80087ec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d004      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff fe52 	bl	80087ec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff fe2a 	bl	80087b2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0308 	and.w	r3, r3, #8
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff fe1f 	bl	80087b2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d022      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff fe8d 	bl	80088a4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b92:	d107      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ba2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bac:	d10b      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f8e3 	bl	8008d7e <RCCEx_PLLSAI1_ConfigNQ>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008bbc:	7ffb      	ldrb	r3, [r7, #31]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008bc2:	7ffb      	ldrb	r3, [r7, #31]
 8008bc4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d02b      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bda:	d008      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be4:	d003      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff fe2a 	bl	800884c <LL_RCC_SetRNGClockSource>
 8008bf8:	e00a      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7ff fe21 	bl	800884c <LL_RCC_SetRNGClockSource>
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff fe34 	bl	8008878 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008c18:	d107      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c28:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d022      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff fe3d 	bl	80088ba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c48:	d107      	bne.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c58:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c62:	d10b      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 f8e3 	bl	8008e34 <RCCEx_PLLSAI1_ConfigNR>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c72:	7ffb      	ldrb	r3, [r7, #31]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008c78:	7ffb      	ldrb	r3, [r7, #31]
 8008c7a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fd26 	bl	80086de <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d009      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff fd45 	bl	8008732 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7ff fd2c 	bl	800870a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008cb2:	7fbb      	ldrb	r3, [r7, #30]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3720      	adds	r7, #32
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8008cc0:	f7ff fcfe 	bl	80086c0 <LL_RCC_MSI_EnablePLLMode>
}
 8008cc4:	bf00      	nop
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008cd4:	f7ff fe5b 	bl	800898e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cd8:	f7fc fa06 	bl	80050e8 <HAL_GetTick>
 8008cdc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008cde:	e009      	b.n	8008cf4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ce0:	f7fc fa02 	bl	80050e8 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d902      	bls.n	8008cf4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf2:	e004      	b.n	8008cfe <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008cf4:	f7ff fe5a 	bl	80089ac <LL_RCC_PLLSAI1_IsReady>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1f0      	bne.n	8008ce0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d137      	bne.n	8008d74 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008d32:	f7ff fe1d 	bl	8008970 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d36:	f7fc f9d7 	bl	80050e8 <HAL_GetTick>
 8008d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d3c:	e009      	b.n	8008d52 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d3e:	f7fc f9d3 	bl	80050e8 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d902      	bls.n	8008d52 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	73fb      	strb	r3, [r7, #15]
        break;
 8008d50:	e004      	b.n	8008d5c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d52:	f7ff fe2b 	bl	80089ac <LL_RCC_PLLSAI1_IsReady>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d1f0      	bne.n	8008d3e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d108      	bne.n	8008d74 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d70:	4313      	orrs	r3, r2
 8008d72:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008d8a:	f7ff fe00 	bl	800898e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d8e:	f7fc f9ab 	bl	80050e8 <HAL_GetTick>
 8008d92:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d94:	e009      	b.n	8008daa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d96:	f7fc f9a7 	bl	80050e8 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d902      	bls.n	8008daa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	73fb      	strb	r3, [r7, #15]
      break;
 8008da8:	e004      	b.n	8008db4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008daa:	f7ff fdff 	bl	80089ac <LL_RCC_PLLSAI1_IsReady>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f0      	bne.n	8008d96 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d137      	bne.n	8008e2a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008de4:	4313      	orrs	r3, r2
 8008de6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008de8:	f7ff fdc2 	bl	8008970 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dec:	f7fc f97c 	bl	80050e8 <HAL_GetTick>
 8008df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008df2:	e009      	b.n	8008e08 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008df4:	f7fc f978 	bl	80050e8 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d902      	bls.n	8008e08 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	73fb      	strb	r3, [r7, #15]
        break;
 8008e06:	e004      	b.n	8008e12 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e08:	f7ff fdd0 	bl	80089ac <LL_RCC_PLLSAI1_IsReady>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d1f0      	bne.n	8008df4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d108      	bne.n	8008e2a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e26:	4313      	orrs	r3, r2
 8008e28:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008e40:	f7ff fda5 	bl	800898e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e44:	f7fc f950 	bl	80050e8 <HAL_GetTick>
 8008e48:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e4a:	e009      	b.n	8008e60 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e4c:	f7fc f94c 	bl	80050e8 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d902      	bls.n	8008e60 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e5e:	e004      	b.n	8008e6a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e60:	f7ff fda4 	bl	80089ac <LL_RCC_PLLSAI1_IsReady>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1f0      	bne.n	8008e4c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d137      	bne.n	8008ee0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e84:	4313      	orrs	r3, r2
 8008e86:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008e9e:	f7ff fd67 	bl	8008970 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea2:	f7fc f921 	bl	80050e8 <HAL_GetTick>
 8008ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ea8:	e009      	b.n	8008ebe <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008eaa:	f7fc f91d 	bl	80050e8 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d902      	bls.n	8008ebe <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]
        break;
 8008ebc:	e004      	b.n	8008ec8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ebe:	f7ff fd75 	bl	80089ac <LL_RCC_PLLSAI1_IsReady>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d1f0      	bne.n	8008eaa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d108      	bne.n	8008ee0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008edc:	4313      	orrs	r3, r2
 8008ede:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e049      	b.n	8008f90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d106      	bne.n	8008f16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7fb feb5 	bl	8004c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f000 f835 	bl	8008f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a2a      	ldr	r2, [pc, #168]	; (8009054 <TIM_Base_SetConfig+0xbc>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_Base_SetConfig+0x20>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb6:	d108      	bne.n	8008fca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a21      	ldr	r2, [pc, #132]	; (8009054 <TIM_Base_SetConfig+0xbc>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d00b      	beq.n	8008fea <TIM_Base_SetConfig+0x52>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd8:	d007      	beq.n	8008fea <TIM_Base_SetConfig+0x52>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <TIM_Base_SetConfig+0xc0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d003      	beq.n	8008fea <TIM_Base_SetConfig+0x52>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a1d      	ldr	r2, [pc, #116]	; (800905c <TIM_Base_SetConfig+0xc4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d108      	bne.n	8008ffc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a0c      	ldr	r2, [pc, #48]	; (8009054 <TIM_Base_SetConfig+0xbc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d007      	beq.n	8009038 <TIM_Base_SetConfig+0xa0>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a0b      	ldr	r2, [pc, #44]	; (8009058 <TIM_Base_SetConfig+0xc0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d003      	beq.n	8009038 <TIM_Base_SetConfig+0xa0>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a0a      	ldr	r2, [pc, #40]	; (800905c <TIM_Base_SetConfig+0xc4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d103      	bne.n	8009040 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	691a      	ldr	r2, [r3, #16]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	615a      	str	r2, [r3, #20]
}
 8009046:	bf00      	nop
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40012c00 	.word	0x40012c00
 8009058:	40014400 	.word	0x40014400
 800905c:	40014800 	.word	0x40014800

08009060 <LL_RCC_GetUSARTClockSource>:
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800906c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4013      	ands	r3, r2
}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <LL_RCC_GetLPUARTClockSource>:
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800908c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4013      	ands	r3, r2
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e042      	b.n	8009138 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d106      	bne.n	80090ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fb fd31 	bl	8004b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2224      	movs	r2, #36	; 0x24
 80090ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0201 	bic.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fc54 	bl	8009990 <UART_SetConfig>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e022      	b.n	8009138 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fe70 	bl	8009de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800910e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689a      	ldr	r2, [r3, #8]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800911e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fef7 	bl	8009f24 <UART_CheckIdleState>
 8009136:	4603      	mov	r3, r0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	; 0x28
 8009144:	af02      	add	r7, sp, #8
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	4613      	mov	r3, r2
 800914e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009156:	2b20      	cmp	r3, #32
 8009158:	d17b      	bne.n	8009252 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <HAL_UART_Transmit+0x26>
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e074      	b.n	8009254 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2221      	movs	r2, #33	; 0x21
 8009176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800917a:	f7fb ffb5 	bl	80050e8 <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	88fa      	ldrh	r2, [r7, #6]
 800918c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009198:	d108      	bne.n	80091ac <HAL_UART_Transmit+0x6c>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d104      	bne.n	80091ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	61bb      	str	r3, [r7, #24]
 80091aa:	e003      	b.n	80091b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091b4:	e030      	b.n	8009218 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2200      	movs	r2, #0
 80091be:	2180      	movs	r1, #128	; 0x80
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 ff59 	bl	800a078 <UART_WaitOnFlagUntilTimeout>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e03d      	b.n	8009254 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10b      	bne.n	80091f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	3302      	adds	r3, #2
 80091f2:	61bb      	str	r3, [r7, #24]
 80091f4:	e007      	b.n	8009206 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	781a      	ldrb	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	3301      	adds	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1c8      	bne.n	80091b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2200      	movs	r2, #0
 800922c:	2140      	movs	r1, #64	; 0x40
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 ff22 	bl	800a078 <UART_WaitOnFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d005      	beq.n	8009246 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e006      	b.n	8009254 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2220      	movs	r2, #32
 800924a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	e000      	b.n	8009254 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009252:	2302      	movs	r3, #2
  }
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08a      	sub	sp, #40	; 0x28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	4613      	mov	r3, r2
 8009268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009270:	2b20      	cmp	r3, #32
 8009272:	d137      	bne.n	80092e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <HAL_UART_Receive_DMA+0x24>
 800927a:	88fb      	ldrh	r3, [r7, #6]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e030      	b.n	80092e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a18      	ldr	r2, [pc, #96]	; (80092f0 <HAL_UART_Receive_DMA+0x94>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d01f      	beq.n	80092d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d018      	beq.n	80092d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	613b      	str	r3, [r7, #16]
   return(result);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	623b      	str	r3, [r7, #32]
 80092c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	69f9      	ldr	r1, [r7, #28]
 80092c6:	6a3a      	ldr	r2, [r7, #32]
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e6      	bne.n	80092a2 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092d4:	88fb      	ldrh	r3, [r7, #6]
 80092d6:	461a      	mov	r2, r3
 80092d8:	68b9      	ldr	r1, [r7, #8]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 ff34 	bl	800a148 <UART_Start_Receive_DMA>
 80092e0:	4603      	mov	r3, r0
 80092e2:	e000      	b.n	80092e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092e4:	2302      	movs	r3, #2
  }
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3728      	adds	r7, #40	; 0x28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40008000 	.word	0x40008000

080092f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b0ba      	sub	sp, #232	; 0xe8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800931a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800931e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009322:	4013      	ands	r3, r2
 8009324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11b      	bne.n	8009368 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009334:	f003 0320 	and.w	r3, r3, #32
 8009338:	2b00      	cmp	r3, #0
 800933a:	d015      	beq.n	8009368 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800933c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009340:	f003 0320 	and.w	r3, r3, #32
 8009344:	2b00      	cmp	r3, #0
 8009346:	d105      	bne.n	8009354 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800934c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 82e3 	beq.w	8009924 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
      }
      return;
 8009366:	e2dd      	b.n	8009924 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 8123 	beq.w	80095b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009372:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009376:	4b8d      	ldr	r3, [pc, #564]	; (80095ac <HAL_UART_IRQHandler+0x2b8>)
 8009378:	4013      	ands	r3, r2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800937e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009382:	4b8b      	ldr	r3, [pc, #556]	; (80095b0 <HAL_UART_IRQHandler+0x2bc>)
 8009384:	4013      	ands	r3, r2
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 8116 	beq.w	80095b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800938c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d011      	beq.n	80093bc <HAL_UART_IRQHandler+0xc8>
 8009398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800939c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00b      	beq.n	80093bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2201      	movs	r2, #1
 80093aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b2:	f043 0201 	orr.w	r2, r3, #1
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d011      	beq.n	80093ec <HAL_UART_IRQHandler+0xf8>
 80093c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2202      	movs	r2, #2
 80093da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e2:	f043 0204 	orr.w	r2, r3, #4
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d011      	beq.n	800941c <HAL_UART_IRQHandler+0x128>
 80093f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2204      	movs	r2, #4
 800940a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009412:	f043 0202 	orr.w	r2, r3, #2
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800941c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009420:	f003 0308 	and.w	r3, r3, #8
 8009424:	2b00      	cmp	r3, #0
 8009426:	d017      	beq.n	8009458 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800942c:	f003 0320 	and.w	r3, r3, #32
 8009430:	2b00      	cmp	r3, #0
 8009432:	d105      	bne.n	8009440 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009434:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009438:	4b5c      	ldr	r3, [pc, #368]	; (80095ac <HAL_UART_IRQHandler+0x2b8>)
 800943a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2208      	movs	r2, #8
 8009446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944e:	f043 0208 	orr.w	r2, r3, #8
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009460:	2b00      	cmp	r3, #0
 8009462:	d012      	beq.n	800948a <HAL_UART_IRQHandler+0x196>
 8009464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00c      	beq.n	800948a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009480:	f043 0220 	orr.w	r2, r3, #32
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 8249 	beq.w	8009928 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d013      	beq.n	80094ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d105      	bne.n	80094ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b40      	cmp	r3, #64	; 0x40
 80094e0:	d005      	beq.n	80094ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d054      	beq.n	8009598 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 ff11 	bl	800a316 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d146      	bne.n	8009590 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800951c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3308      	adds	r3, #8
 800952a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800952e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800953a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1d9      	bne.n	8009502 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009554:	2b00      	cmp	r3, #0
 8009556:	d017      	beq.n	8009588 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800955e:	4a15      	ldr	r2, [pc, #84]	; (80095b4 <HAL_UART_IRQHandler+0x2c0>)
 8009560:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009568:	4618      	mov	r0, r3
 800956a:	f7fd fa57 	bl	8006a1c <HAL_DMA_Abort_IT>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d019      	beq.n	80095a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800957a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009582:	4610      	mov	r0, r2
 8009584:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009586:	e00f      	b.n	80095a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f9eb 	bl	8009964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958e:	e00b      	b.n	80095a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f9e7 	bl	8009964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009596:	e007      	b.n	80095a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f9e3 	bl	8009964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80095a6:	e1bf      	b.n	8009928 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a8:	bf00      	nop
    return;
 80095aa:	e1bd      	b.n	8009928 <HAL_UART_IRQHandler+0x634>
 80095ac:	10000001 	.word	0x10000001
 80095b0:	04000120 	.word	0x04000120
 80095b4:	0800a5cd 	.word	0x0800a5cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	f040 8153 	bne.w	8009868 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c6:	f003 0310 	and.w	r3, r3, #16
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 814c 	beq.w	8009868 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095d4:	f003 0310 	and.w	r3, r3, #16
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f000 8145 	beq.w	8009868 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2210      	movs	r2, #16
 80095e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f0:	2b40      	cmp	r3, #64	; 0x40
 80095f2:	f040 80bb 	bne.w	800976c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 818f 	beq.w	800992c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009614:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009618:	429a      	cmp	r2, r3
 800961a:	f080 8187 	bcs.w	800992c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	f040 8087 	bne.w	800974a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800966a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800967e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1da      	bne.n	800963c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3308      	adds	r3, #8
 800968c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009698:	f023 0301 	bic.w	r3, r3, #1
 800969c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1e1      	bne.n	8009686 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3308      	adds	r3, #8
 80096e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e3      	bne.n	80096c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009718:	f023 0310 	bic.w	r3, r3, #16
 800971c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800972a:	65bb      	str	r3, [r7, #88]	; 0x58
 800972c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e4      	bne.n	8009708 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009744:	4618      	mov	r0, r3
 8009746:	f7fd f90a 	bl	800695e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2202      	movs	r2, #2
 800974e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800975c:	b29b      	uxth	r3, r3
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	b29b      	uxth	r3, r3
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f907 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800976a:	e0df      	b.n	800992c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009778:	b29b      	uxth	r3, r3
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009786:	b29b      	uxth	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80d1 	beq.w	8009930 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800978e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80cc 	beq.w	8009930 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097ba:	647b      	str	r3, [r7, #68]	; 0x44
 80097bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e4      	bne.n	8009798 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	623b      	str	r3, [r7, #32]
   return(result);
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097e4:	f023 0301 	bic.w	r3, r3, #1
 80097e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3308      	adds	r3, #8
 80097f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097f6:	633a      	str	r2, [r7, #48]	; 0x30
 80097f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e1      	bne.n	80097ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	60fb      	str	r3, [r7, #12]
   return(result);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0310 	bic.w	r3, r3, #16
 8009832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009840:	61fb      	str	r3, [r7, #28]
 8009842:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	69b9      	ldr	r1, [r7, #24]
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	617b      	str	r3, [r7, #20]
   return(result);
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e4      	bne.n	800981e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800985a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f889 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009866:	e063      	b.n	8009930 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00e      	beq.n	8009892 <HAL_UART_IRQHandler+0x59e>
 8009874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fedf 	bl	800a64e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009890:	e051      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989a:	2b00      	cmp	r3, #0
 800989c:	d014      	beq.n	80098c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800989e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d105      	bne.n	80098b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d008      	beq.n	80098c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d03a      	beq.n	8009934 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	4798      	blx	r3
    }
    return;
 80098c6:	e035      	b.n	8009934 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d009      	beq.n	80098e8 <HAL_UART_IRQHandler+0x5f4>
 80098d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fe89 	bl	800a5f8 <UART_EndTransmit_IT>
    return;
 80098e6:	e026      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_UART_IRQHandler+0x614>
 80098f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 feb8 	bl	800a676 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009906:	e016      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d010      	beq.n	8009936 <HAL_UART_IRQHandler+0x642>
 8009914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009918:	2b00      	cmp	r3, #0
 800991a:	da0c      	bge.n	8009936 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fea0 	bl	800a662 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009922:	e008      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
      return;
 8009924:	bf00      	nop
 8009926:	e006      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
    return;
 8009928:	bf00      	nop
 800992a:	e004      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
      return;
 800992c:	bf00      	nop
 800992e:	e002      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
      return;
 8009930:	bf00      	nop
 8009932:	e000      	b.n	8009936 <HAL_UART_IRQHandler+0x642>
    return;
 8009934:	bf00      	nop
  }
}
 8009936:	37e8      	adds	r7, #232	; 0xe8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009994:	b08c      	sub	sp, #48	; 0x30
 8009996:	af00      	add	r7, sp, #0
 8009998:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	689a      	ldr	r2, [r3, #8]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	431a      	orrs	r2, r3
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	431a      	orrs	r2, r3
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	4baf      	ldr	r3, [pc, #700]	; (8009c7c <UART_SetConfig+0x2ec>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	6812      	ldr	r2, [r2, #0]
 80099c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099c8:	430b      	orrs	r3, r1
 80099ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4aa4      	ldr	r2, [pc, #656]	; (8009c80 <UART_SetConfig+0x2f0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d004      	beq.n	80099fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099f8:	4313      	orrs	r3, r2
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009a06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	6812      	ldr	r2, [r2, #0]
 8009a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a10:	430b      	orrs	r3, r1
 8009a12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	f023 010f 	bic.w	r1, r3, #15
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a95      	ldr	r2, [pc, #596]	; (8009c84 <UART_SetConfig+0x2f4>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d125      	bne.n	8009a80 <UART_SetConfig+0xf0>
 8009a34:	2003      	movs	r0, #3
 8009a36:	f7ff fb13 	bl	8009060 <LL_RCC_GetUSARTClockSource>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d81b      	bhi.n	8009a78 <UART_SetConfig+0xe8>
 8009a40:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <UART_SetConfig+0xb8>)
 8009a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a46:	bf00      	nop
 8009a48:	08009a59 	.word	0x08009a59
 8009a4c:	08009a69 	.word	0x08009a69
 8009a50:	08009a61 	.word	0x08009a61
 8009a54:	08009a71 	.word	0x08009a71
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a5e:	e042      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009a60:	2302      	movs	r3, #2
 8009a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a66:	e03e      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a6e:	e03a      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009a70:	2308      	movs	r3, #8
 8009a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a76:	e036      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a7e:	e032      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a7e      	ldr	r2, [pc, #504]	; (8009c80 <UART_SetConfig+0x2f0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d12a      	bne.n	8009ae0 <UART_SetConfig+0x150>
 8009a8a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009a8e:	f7ff faf7 	bl	8009080 <LL_RCC_GetLPUARTClockSource>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a98:	d01a      	beq.n	8009ad0 <UART_SetConfig+0x140>
 8009a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a9e:	d81b      	bhi.n	8009ad8 <UART_SetConfig+0x148>
 8009aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aa4:	d00c      	beq.n	8009ac0 <UART_SetConfig+0x130>
 8009aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aaa:	d815      	bhi.n	8009ad8 <UART_SetConfig+0x148>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <UART_SetConfig+0x128>
 8009ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab4:	d008      	beq.n	8009ac8 <UART_SetConfig+0x138>
 8009ab6:	e00f      	b.n	8009ad8 <UART_SetConfig+0x148>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009abe:	e012      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ac6:	e00e      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009ac8:	2304      	movs	r3, #4
 8009aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ace:	e00a      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ad6:	e006      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009ad8:	2310      	movs	r3, #16
 8009ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ade:	e002      	b.n	8009ae6 <UART_SetConfig+0x156>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a65      	ldr	r2, [pc, #404]	; (8009c80 <UART_SetConfig+0x2f0>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	f040 8097 	bne.w	8009c20 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009af6:	2b08      	cmp	r3, #8
 8009af8:	d823      	bhi.n	8009b42 <UART_SetConfig+0x1b2>
 8009afa:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <UART_SetConfig+0x170>)
 8009afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b00:	08009b25 	.word	0x08009b25
 8009b04:	08009b43 	.word	0x08009b43
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b43 	.word	0x08009b43
 8009b10:	08009b33 	.word	0x08009b33
 8009b14:	08009b43 	.word	0x08009b43
 8009b18:	08009b43 	.word	0x08009b43
 8009b1c:	08009b43 	.word	0x08009b43
 8009b20:	08009b3b 	.word	0x08009b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b24:	f7fe fcc8 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 8009b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b2a:	e010      	b.n	8009b4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b2c:	4b56      	ldr	r3, [pc, #344]	; (8009c88 <UART_SetConfig+0x2f8>)
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b30:	e00d      	b.n	8009b4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b32:	f7fe fc41 	bl	80083b8 <HAL_RCC_GetSysClockFreq>
 8009b36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b38:	e009      	b.n	8009b4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b40:	e005      	b.n	8009b4e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 812b 	beq.w	8009dac <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	4a4c      	ldr	r2, [pc, #304]	; (8009c8c <UART_SetConfig+0x2fc>)
 8009b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	4413      	add	r3, r2
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d305      	bcc.n	8009b86 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b80:	69ba      	ldr	r2, [r7, #24]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d903      	bls.n	8009b8e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b8c:	e10e      	b.n	8009dac <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	2200      	movs	r2, #0
 8009b92:	60bb      	str	r3, [r7, #8]
 8009b94:	60fa      	str	r2, [r7, #12]
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	4a3c      	ldr	r2, [pc, #240]	; (8009c8c <UART_SetConfig+0x2fc>)
 8009b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	603b      	str	r3, [r7, #0]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bb0:	f7f6 fff2 	bl	8000b98 <__aeabi_uldivmod>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f04f 0200 	mov.w	r2, #0
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	020b      	lsls	r3, r1, #8
 8009bc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bca:	0202      	lsls	r2, r0, #8
 8009bcc:	6979      	ldr	r1, [r7, #20]
 8009bce:	6849      	ldr	r1, [r1, #4]
 8009bd0:	0849      	lsrs	r1, r1, #1
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	eb12 0804 	adds.w	r8, r2, r4
 8009bdc:	eb43 0905 	adc.w	r9, r3, r5
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	469a      	mov	sl, r3
 8009be8:	4693      	mov	fp, r2
 8009bea:	4652      	mov	r2, sl
 8009bec:	465b      	mov	r3, fp
 8009bee:	4640      	mov	r0, r8
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	f7f6 ffd1 	bl	8000b98 <__aeabi_uldivmod>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c04:	d308      	bcc.n	8009c18 <UART_SetConfig+0x288>
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c0c:	d204      	bcs.n	8009c18 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6a3a      	ldr	r2, [r7, #32]
 8009c14:	60da      	str	r2, [r3, #12]
 8009c16:	e0c9      	b.n	8009dac <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c1e:	e0c5      	b.n	8009dac <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c28:	d16d      	bne.n	8009d06 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	2b07      	cmp	r3, #7
 8009c32:	d82d      	bhi.n	8009c90 <UART_SetConfig+0x300>
 8009c34:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <UART_SetConfig+0x2ac>)
 8009c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3a:	bf00      	nop
 8009c3c:	08009c5d 	.word	0x08009c5d
 8009c40:	08009c65 	.word	0x08009c65
 8009c44:	08009c91 	.word	0x08009c91
 8009c48:	08009c6b 	.word	0x08009c6b
 8009c4c:	08009c91 	.word	0x08009c91
 8009c50:	08009c91 	.word	0x08009c91
 8009c54:	08009c91 	.word	0x08009c91
 8009c58:	08009c73 	.word	0x08009c73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c5c:	f7fe fc42 	bl	80084e4 <HAL_RCC_GetPCLK2Freq>
 8009c60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c62:	e01b      	b.n	8009c9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c64:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <UART_SetConfig+0x2f8>)
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c68:	e018      	b.n	8009c9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c6a:	f7fe fba5 	bl	80083b8 <HAL_RCC_GetSysClockFreq>
 8009c6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c70:	e014      	b.n	8009c9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c78:	e010      	b.n	8009c9c <UART_SetConfig+0x30c>
 8009c7a:	bf00      	nop
 8009c7c:	cfff69f3 	.word	0xcfff69f3
 8009c80:	40008000 	.word	0x40008000
 8009c84:	40013800 	.word	0x40013800
 8009c88:	00f42400 	.word	0x00f42400
 8009c8c:	0800f59c 	.word	0x0800f59c
      default:
        pclk = 0U;
 8009c90:	2300      	movs	r3, #0
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 8084 	beq.w	8009dac <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	4a4b      	ldr	r2, [pc, #300]	; (8009dd8 <UART_SetConfig+0x448>)
 8009caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cb6:	005a      	lsls	r2, r3, #1
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	085b      	lsrs	r3, r3, #1
 8009cbe:	441a      	add	r2, r3
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	2b0f      	cmp	r3, #15
 8009cce:	d916      	bls.n	8009cfe <UART_SetConfig+0x36e>
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd6:	d212      	bcs.n	8009cfe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	f023 030f 	bic.w	r3, r3, #15
 8009ce0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	085b      	lsrs	r3, r3, #1
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	f003 0307 	and.w	r3, r3, #7
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	8bfb      	ldrh	r3, [r7, #30]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	8bfa      	ldrh	r2, [r7, #30]
 8009cfa:	60da      	str	r2, [r3, #12]
 8009cfc:	e056      	b.n	8009dac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d04:	e052      	b.n	8009dac <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	2b07      	cmp	r3, #7
 8009d0e:	d822      	bhi.n	8009d56 <UART_SetConfig+0x3c6>
 8009d10:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <UART_SetConfig+0x388>)
 8009d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d16:	bf00      	nop
 8009d18:	08009d39 	.word	0x08009d39
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d57 	.word	0x08009d57
 8009d24:	08009d47 	.word	0x08009d47
 8009d28:	08009d57 	.word	0x08009d57
 8009d2c:	08009d57 	.word	0x08009d57
 8009d30:	08009d57 	.word	0x08009d57
 8009d34:	08009d4f 	.word	0x08009d4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d38:	f7fe fbd4 	bl	80084e4 <HAL_RCC_GetPCLK2Freq>
 8009d3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d3e:	e010      	b.n	8009d62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d40:	4b26      	ldr	r3, [pc, #152]	; (8009ddc <UART_SetConfig+0x44c>)
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d44:	e00d      	b.n	8009d62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d46:	f7fe fb37 	bl	80083b8 <HAL_RCC_GetSysClockFreq>
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d4c:	e009      	b.n	8009d62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d54:	e005      	b.n	8009d62 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d60:	bf00      	nop
    }

    if (pclk != 0U)
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d021      	beq.n	8009dac <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	4a1a      	ldr	r2, [pc, #104]	; (8009dd8 <UART_SetConfig+0x448>)
 8009d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d72:	461a      	mov	r2, r3
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	085b      	lsrs	r3, r3, #1
 8009d80:	441a      	add	r2, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d909      	bls.n	8009da6 <UART_SetConfig+0x416>
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d98:	d205      	bcs.n	8009da6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60da      	str	r2, [r3, #12]
 8009da4:	e002      	b.n	8009dac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009dc8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3730      	adds	r7, #48	; 0x30
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dd6:	bf00      	nop
 8009dd8:	0800f59c 	.word	0x0800f59c
 8009ddc:	00f42400 	.word	0x00f42400

08009de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00a      	beq.n	8009e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e52:	f003 0308 	and.w	r3, r3, #8
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	f003 0310 	and.w	r3, r3, #16
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00a      	beq.n	8009e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00a      	beq.n	8009eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01a      	beq.n	8009ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ede:	d10a      	bne.n	8009ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	605a      	str	r2, [r3, #4]
  }
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b098      	sub	sp, #96	; 0x60
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f34:	f7fb f8d8 	bl	80050e8 <HAL_GetTick>
 8009f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d12f      	bne.n	8009fa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f50:	2200      	movs	r2, #0
 8009f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f88e 	bl	800a078 <UART_WaitOnFlagUntilTimeout>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d022      	beq.n	8009fa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	e853 3f00 	ldrex	r3, [r3]
 8009f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f76:	653b      	str	r3, [r7, #80]	; 0x50
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f80:	647b      	str	r3, [r7, #68]	; 0x44
 8009f82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f88:	e841 2300 	strex	r3, r2, [r1]
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e6      	bne.n	8009f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e063      	b.n	800a070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d149      	bne.n	800a04a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f857 	bl	800a078 <UART_WaitOnFlagUntilTimeout>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d03c      	beq.n	800a04a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fee:	633b      	str	r3, [r7, #48]	; 0x30
 8009ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e6      	bne.n	8009fd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	60fb      	str	r3, [r7, #12]
   return(result);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	64bb      	str	r3, [r7, #72]	; 0x48
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3308      	adds	r3, #8
 800a020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a022:	61fa      	str	r2, [r7, #28]
 800a024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	69b9      	ldr	r1, [r7, #24]
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	617b      	str	r3, [r7, #20]
   return(result);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e5      	bne.n	800a002 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2220      	movs	r2, #32
 800a03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e012      	b.n	800a070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3758      	adds	r7, #88	; 0x58
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	4613      	mov	r3, r2
 800a086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a088:	e049      	b.n	800a11e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a090:	d045      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a092:	f7fb f829 	bl	80050e8 <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	69ba      	ldr	r2, [r7, #24]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d302      	bcc.n	800a0a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e048      	b.n	800a13e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d031      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b08      	cmp	r3, #8
 800a0c6:	d110      	bne.n	800a0ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f920 	bl	800a316 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2208      	movs	r2, #8
 800a0da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e029      	b.n	800a13e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0f8:	d111      	bne.n	800a11e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 f906 	bl	800a316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e00f      	b.n	800a13e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4013      	ands	r3, r2
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	bf0c      	ite	eq
 800a12e:	2301      	moveq	r3, #1
 800a130:	2300      	movne	r3, #0
 800a132:	b2db      	uxtb	r3, r3
 800a134:	461a      	mov	r2, r3
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d0a6      	beq.n	800a08a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b096      	sub	sp, #88	; 0x58
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	88fa      	ldrh	r2, [r7, #6]
 800a160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2222      	movs	r2, #34	; 0x22
 800a170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d02d      	beq.n	800a1da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a184:	4a40      	ldr	r2, [pc, #256]	; (800a288 <UART_Start_Receive_DMA+0x140>)
 800a186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18e:	4a3f      	ldr	r2, [pc, #252]	; (800a28c <UART_Start_Receive_DMA+0x144>)
 800a190:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a198:	4a3d      	ldr	r2, [pc, #244]	; (800a290 <UART_Start_Receive_DMA+0x148>)
 800a19a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3324      	adds	r3, #36	; 0x24
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	88fb      	ldrh	r3, [r7, #6]
 800a1bc:	f7fc fb54 	bl	8006868 <HAL_DMA_Start_IT>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d009      	beq.n	800a1da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2210      	movs	r2, #16
 800a1ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e051      	b.n	800a27e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d018      	beq.n	800a214 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a200:	64bb      	str	r3, [r7, #72]	; 0x48
 800a202:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e6      	bne.n	800a1e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3308      	adds	r3, #8
 800a21a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	653b      	str	r3, [r7, #80]	; 0x50
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3308      	adds	r3, #8
 800a232:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a234:	637a      	str	r2, [r7, #52]	; 0x34
 800a236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3308      	adds	r3, #8
 800a24e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	613b      	str	r3, [r7, #16]
   return(result);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3308      	adds	r3, #8
 800a266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a268:	623a      	str	r2, [r7, #32]
 800a26a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	69f9      	ldr	r1, [r7, #28]
 800a26e:	6a3a      	ldr	r2, [r7, #32]
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	61bb      	str	r3, [r7, #24]
   return(result);
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e5      	bne.n	800a248 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3758      	adds	r7, #88	; 0x58
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	0800a3e3 	.word	0x0800a3e3
 800a28c:	0800a50f 	.word	0x0800a50f
 800a290:	0800a54d 	.word	0x0800a54d

0800a294 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b08f      	sub	sp, #60	; 0x3c
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	e853 3f00 	ldrex	r3, [r3]
 800a2a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e6      	bne.n	800a29c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	e853 3f00 	ldrex	r3, [r3]
 800a2dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a2e4:	633b      	str	r3, [r7, #48]	; 0x30
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ee:	61ba      	str	r2, [r7, #24]
 800a2f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	6979      	ldr	r1, [r7, #20]
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	e841 2300 	strex	r3, r2, [r1]
 800a2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1e5      	bne.n	800a2ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a30a:	bf00      	nop
 800a30c:	373c      	adds	r7, #60	; 0x3c
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a316:	b480      	push	{r7}
 800a318:	b095      	sub	sp, #84	; 0x54
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a332:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33c:	643b      	str	r3, [r7, #64]	; 0x40
 800a33e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a366:	f023 0301 	bic.w	r3, r3, #1
 800a36a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3308      	adds	r3, #8
 800a372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a374:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a37a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a37c:	e841 2300 	strex	r3, r2, [r1]
 800a380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e3      	bne.n	800a350 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d118      	bne.n	800a3c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f023 0310 	bic.w	r3, r3, #16
 800a3a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6979      	ldr	r1, [r7, #20]
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e6      	bne.n	800a390 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a3d6:	bf00      	nop
 800a3d8:	3754      	adds	r7, #84	; 0x54
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b09c      	sub	sp, #112	; 0x70
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d171      	bne.n	800a4e2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a400:	2200      	movs	r2, #0
 800a402:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a41a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a424:	65bb      	str	r3, [r7, #88]	; 0x58
 800a426:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a42a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e6      	bne.n	800a406 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3308      	adds	r3, #8
 800a43e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	667b      	str	r3, [r7, #100]	; 0x64
 800a450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a458:	647a      	str	r2, [r7, #68]	; 0x44
 800a45a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a45e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e5      	bne.n	800a438 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	623b      	str	r3, [r7, #32]
   return(result);
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a482:	663b      	str	r3, [r7, #96]	; 0x60
 800a484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3308      	adds	r3, #8
 800a48a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a48c:	633a      	str	r2, [r7, #48]	; 0x30
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e5      	bne.n	800a46c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d118      	bne.n	800a4e2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f023 0310 	bic.w	r3, r3, #16
 800a4c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	69b9      	ldr	r1, [r7, #24]
 800a4d4:	69fa      	ldr	r2, [r7, #28]
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	617b      	str	r3, [r7, #20]
   return(result);
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e6      	bne.n	800a4b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d107      	bne.n	800a500 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4fa:	f7ff fa3d 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4fe:	e002      	b.n	800a506 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a500:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a502:	f7f7 faf7 	bl	8001af4 <HAL_UART_RxCpltCallback>
}
 800a506:	bf00      	nop
 800a508:	3770      	adds	r7, #112	; 0x70
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a526:	2b01      	cmp	r3, #1
 800a528:	d109      	bne.n	800a53e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a530:	085b      	lsrs	r3, r3, #1
 800a532:	b29b      	uxth	r3, r3
 800a534:	4619      	mov	r1, r3
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fa1e 	bl	8009978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a53c:	e002      	b.n	800a544 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7ff fa06 	bl	8009950 <HAL_UART_RxHalfCpltCallback>
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a560:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a568:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a574:	2b80      	cmp	r3, #128	; 0x80
 800a576:	d109      	bne.n	800a58c <UART_DMAError+0x40>
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b21      	cmp	r3, #33	; 0x21
 800a57c:	d106      	bne.n	800a58c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2200      	movs	r2, #0
 800a582:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a586:	6978      	ldr	r0, [r7, #20]
 800a588:	f7ff fe84 	bl	800a294 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a596:	2b40      	cmp	r3, #64	; 0x40
 800a598:	d109      	bne.n	800a5ae <UART_DMAError+0x62>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2b22      	cmp	r3, #34	; 0x22
 800a59e:	d106      	bne.n	800a5ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a5a8:	6978      	ldr	r0, [r7, #20]
 800a5aa:	f7ff feb4 	bl	800a316 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b4:	f043 0210 	orr.w	r2, r3, #16
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5be:	6978      	ldr	r0, [r7, #20]
 800a5c0:	f7ff f9d0 	bl	8009964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5c4:	bf00      	nop
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff f9ba 	bl	8009964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a614:	61fb      	str	r3, [r7, #28]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	6979      	ldr	r1, [r7, #20]
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	613b      	str	r3, [r7, #16]
   return(result);
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e6      	bne.n	800a600 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff f97b 	bl	800993c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a646:	bf00      	nop
 800a648:	3720      	adds	r7, #32
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b085      	sub	sp, #20
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d101      	bne.n	800a6a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a69c:	2302      	movs	r3, #2
 800a69e:	e027      	b.n	800a6f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2224      	movs	r2, #36	; 0x24
 800a6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0201 	bic.w	r2, r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d101      	bne.n	800a714 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a710:	2302      	movs	r3, #2
 800a712:	e02d      	b.n	800a770 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2224      	movs	r2, #36	; 0x24
 800a720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0201 	bic.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f84f 	bl	800a7f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2220      	movs	r2, #32
 800a762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d101      	bne.n	800a790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a78c:	2302      	movs	r3, #2
 800a78e:	e02d      	b.n	800a7ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2224      	movs	r2, #36	; 0x24
 800a79c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0201 	bic.w	r2, r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f811 	bl	800a7f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2220      	movs	r2, #32
 800a7de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a800:	2b00      	cmp	r3, #0
 800a802:	d108      	bne.n	800a816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a814:	e031      	b.n	800a87a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a816:	2308      	movs	r3, #8
 800a818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a81a:	2308      	movs	r3, #8
 800a81c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	0e5b      	lsrs	r3, r3, #25
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	0f5b      	lsrs	r3, r3, #29
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a83e:	7bbb      	ldrb	r3, [r7, #14]
 800a840:	7b3a      	ldrb	r2, [r7, #12]
 800a842:	4911      	ldr	r1, [pc, #68]	; (800a888 <UARTEx_SetNbDataToProcess+0x94>)
 800a844:	5c8a      	ldrb	r2, [r1, r2]
 800a846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a84a:	7b3a      	ldrb	r2, [r7, #12]
 800a84c:	490f      	ldr	r1, [pc, #60]	; (800a88c <UARTEx_SetNbDataToProcess+0x98>)
 800a84e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a850:	fb93 f3f2 	sdiv	r3, r3, r2
 800a854:	b29a      	uxth	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	7b7a      	ldrb	r2, [r7, #13]
 800a860:	4909      	ldr	r1, [pc, #36]	; (800a888 <UARTEx_SetNbDataToProcess+0x94>)
 800a862:	5c8a      	ldrb	r2, [r1, r2]
 800a864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a868:	7b7a      	ldrb	r2, [r7, #13]
 800a86a:	4908      	ldr	r1, [pc, #32]	; (800a88c <UARTEx_SetNbDataToProcess+0x98>)
 800a86c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a86e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a872:	b29a      	uxth	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a87a:	bf00      	nop
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	0800f5b4 	.word	0x0800f5b4
 800a88c:	0800f5bc 	.word	0x0800f5bc

0800a890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a898:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a89c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	f107 0014 	add.w	r0, r7, #20
 800a8d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	b004      	add	sp, #16
 800a906:	4770      	bx	lr

0800a908 <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 800a908:	b40f      	push	{r0, r1, r2, r3}
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b082      	sub	sp, #8
 800a90e:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 800a910:	f107 0314 	add.w	r3, r7, #20
 800a914:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	6939      	ldr	r1, [r7, #16]
 800a91a:	4822      	ldr	r0, [pc, #136]	; (800a9a4 <uart_esp32_transmit+0x9c>)
 800a91c:	f002 f984 	bl	800cc28 <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 800a920:	2300      	movs	r3, #0
 800a922:	80fb      	strh	r3, [r7, #6]
 800a924:	e019      	b.n	800a95a <uart_esp32_transmit+0x52>
		j = i + 1;
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	3301      	adds	r3, #1
 800a92a:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 800a92c:	88fb      	ldrh	r3, [r7, #6]
 800a92e:	4a1d      	ldr	r2, [pc, #116]	; (800a9a4 <uart_esp32_transmit+0x9c>)
 800a930:	5cd3      	ldrb	r3, [r2, r3]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10e      	bne.n	800a954 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 800a936:	e009      	b.n	800a94c <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 800a938:	88ba      	ldrh	r2, [r7, #4]
 800a93a:	88bb      	ldrh	r3, [r7, #4]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	4919      	ldr	r1, [pc, #100]	; (800a9a4 <uart_esp32_transmit+0x9c>)
 800a940:	5c89      	ldrb	r1, [r1, r2]
 800a942:	4a18      	ldr	r2, [pc, #96]	; (800a9a4 <uart_esp32_transmit+0x9c>)
 800a944:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 800a946:	88bb      	ldrh	r3, [r7, #4]
 800a948:	3301      	adds	r3, #1
 800a94a:	80bb      	strh	r3, [r7, #4]
 800a94c:	88bb      	ldrh	r3, [r7, #4]
 800a94e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a952:	d3f1      	bcc.n	800a938 <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	3301      	adds	r3, #1
 800a958:	80fb      	strh	r3, [r7, #6]
 800a95a:	88fb      	ldrh	r3, [r7, #6]
 800a95c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a960:	d3e1      	bcc.n	800a926 <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 800a962:	4810      	ldr	r0, [pc, #64]	; (800a9a4 <uart_esp32_transmit+0x9c>)
 800a964:	f7f5 fc0c 	bl	8000180 <strlen>
 800a968:	4603      	mov	r3, r0
 800a96a:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 800a96c:	88fa      	ldrh	r2, [r7, #6]
 800a96e:	2364      	movs	r3, #100	; 0x64
 800a970:	490c      	ldr	r1, [pc, #48]	; (800a9a4 <uart_esp32_transmit+0x9c>)
 800a972:	480d      	ldr	r0, [pc, #52]	; (800a9a8 <uart_esp32_transmit+0xa0>)
 800a974:	f7fe fbe4 	bl	8009140 <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 800a978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a97c:	2100      	movs	r1, #0
 800a97e:	4809      	ldr	r0, [pc, #36]	; (800a9a4 <uart_esp32_transmit+0x9c>)
 800a980:	f001 f862 	bl	800ba48 <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800a984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a988:	2100      	movs	r1, #0
 800a98a:	4808      	ldr	r0, [pc, #32]	; (800a9ac <uart_esp32_transmit+0xa4>)
 800a98c:	f001 f85c 	bl	800ba48 <memset>
	UART_ESP32_RecvEndFlag = 0;
 800a990:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <uart_esp32_transmit+0xa8>)
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9a0:	b004      	add	sp, #16
 800a9a2:	4770      	bx	lr
 800a9a4:	20000754 	.word	0x20000754
 800a9a8:	20000278 	.word	0x20000278
 800a9ac:	20000f54 	.word	0x20000f54
 800a9b0:	20001755 	.word	0x20001755

0800a9b4 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 800a9bc:	4910      	ldr	r1, [pc, #64]	; (800aa00 <esp8266_CheckRespond+0x4c>)
 800a9be:	4811      	ldr	r0, [pc, #68]	; (800aa04 <esp8266_CheckRespond+0x50>)
 800a9c0:	f001 f92a 	bl	800bc18 <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	480e      	ldr	r0, [pc, #56]	; (800aa00 <esp8266_CheckRespond+0x4c>)
 800a9c8:	f001 fa48 	bl	800be5c <strstr>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00a      	beq.n	800a9e8 <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 800a9d2:	480d      	ldr	r0, [pc, #52]	; (800aa08 <esp8266_CheckRespond+0x54>)
 800a9d4:	f001 f9a6 	bl	800bd24 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800a9d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4808      	ldr	r0, [pc, #32]	; (800aa00 <esp8266_CheckRespond+0x4c>)
 800a9e0:	f001 f832 	bl	800ba48 <memset>
		return _MATCHOK;
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	e006      	b.n	800a9f6 <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800a9e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4804      	ldr	r0, [pc, #16]	; (800aa00 <esp8266_CheckRespond+0x4c>)
 800a9f0:	f001 f82a 	bl	800ba48 <memset>
	return _MATCHERROR;
 800a9f4:	2303      	movs	r3, #3
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000f54 	.word	0x20000f54
 800aa04:	0800ed7c 	.word	0x0800ed7c
 800aa08:	0800ed90 	.word	0x0800ed90

0800aa0c <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800aa22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa26:	2100      	movs	r1, #0
 800aa28:	4826      	ldr	r0, [pc, #152]	; (800aac4 <esp8266_TransmitCmd+0xb8>)
 800aa2a:	f001 f80d 	bl	800ba48 <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	4825      	ldr	r0, [pc, #148]	; (800aac8 <esp8266_TransmitCmd+0xbc>)
 800aa32:	f001 f8f1 	bl	800bc18 <iprintf>
	if (newline == 0)
 800aa36:	78fb      	ldrb	r3, [r7, #3]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d104      	bne.n	800aa46 <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 800aa3c:	68f9      	ldr	r1, [r7, #12]
 800aa3e:	4823      	ldr	r0, [pc, #140]	; (800aacc <esp8266_TransmitCmd+0xc0>)
 800aa40:	f7ff ff62 	bl	800a908 <uart_esp32_transmit>
 800aa44:	e01e      	b.n	800aa84 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 800aa46:	68f9      	ldr	r1, [r7, #12]
 800aa48:	4821      	ldr	r0, [pc, #132]	; (800aad0 <esp8266_TransmitCmd+0xc4>)
 800aa4a:	f7ff ff5d 	bl	800a908 <uart_esp32_transmit>

	//printf("(DBG:) Waiting reply\r\n");
	while (timeout--) {
 800aa4e:	e019      	b.n	800aa84 <esp8266_TransmitCmd+0x78>
		// //printf("%d ", timeout);
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 800aa50:	4b20      	ldr	r3, [pc, #128]	; (800aad4 <esp8266_TransmitCmd+0xc8>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d111      	bne.n	800aa7e <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 800aa5a:	68b8      	ldr	r0, [r7, #8]
 800aa5c:	f7ff ffaa 	bl	800a9b4 <esp8266_CheckRespond>
 800aa60:	4603      	mov	r3, r0
 800aa62:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
				//printf("(DBG:) Command closed loop completed\r\n");
			}

			UART_ESP32_RxLen = 0;
 800aa64:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <esp8266_TransmitCmd+0xcc>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 800aa6a:	4b1a      	ldr	r3, [pc, #104]	; (800aad4 <esp8266_TransmitCmd+0xc8>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 800aa70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa74:	4913      	ldr	r1, [pc, #76]	; (800aac4 <esp8266_TransmitCmd+0xb8>)
 800aa76:	4819      	ldr	r0, [pc, #100]	; (800aadc <esp8266_TransmitCmd+0xd0>)
 800aa78:	f7fe fbf0 	bl	800925c <HAL_UART_Receive_DMA>

			break;
 800aa7c:	e007      	b.n	800aa8e <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 800aa7e:	2001      	movs	r0, #1
 800aa80:	f7fa fb4a 	bl	8005118 <HAL_Delay>
	while (timeout--) {
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	1e5a      	subs	r2, r3, #1
 800aa88:	617a      	str	r2, [r7, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e0      	bne.n	800aa50 <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 800aa8e:	7cfb      	ldrb	r3, [r7, #19]
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d104      	bne.n	800aa9e <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 800aa94:	4812      	ldr	r0, [pc, #72]	; (800aae0 <esp8266_TransmitCmd+0xd4>)
 800aa96:	f001 f945 	bl	800bd24 <puts>
		return check;
 800aa9a:	7cfb      	ldrb	r3, [r7, #19]
 800aa9c:	e00e      	b.n	800aabc <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	dc07      	bgt.n	800aab4 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 800aaa4:	480f      	ldr	r0, [pc, #60]	; (800aae4 <esp8266_TransmitCmd+0xd8>)
 800aaa6:	f001 f93d 	bl	800bd24 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 800aaaa:	480f      	ldr	r0, [pc, #60]	; (800aae8 <esp8266_TransmitCmd+0xdc>)
 800aaac:	f001 f93a 	bl	800bd24 <puts>
		return _TIMEOUT;
 800aab0:	2302      	movs	r3, #2
 800aab2:	e003      	b.n	800aabc <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 800aab4:	480d      	ldr	r0, [pc, #52]	; (800aaec <esp8266_TransmitCmd+0xe0>)
 800aab6:	f001 f935 	bl	800bd24 <puts>
	return _SUCCEED;
 800aaba:	2301      	movs	r3, #1
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	20000f54 	.word	0x20000f54
 800aac8:	0800eda8 	.word	0x0800eda8
 800aacc:	0800edc8 	.word	0x0800edc8
 800aad0:	0800edcc 	.word	0x0800edcc
 800aad4:	20001755 	.word	0x20001755
 800aad8:	20001754 	.word	0x20001754
 800aadc:	20000278 	.word	0x20000278
 800aae0:	0800edd4 	.word	0x0800edd4
 800aae4:	0800edf0 	.word	0x0800edf0
 800aae8:	0800ee08 	.word	0x0800ee08
 800aaec:	0800ee1c 	.word	0x0800ee1c

0800aaf0 <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 800aafc:	2200      	movs	r2, #0
 800aafe:	2108      	movs	r1, #8
 800ab00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab04:	f7fc fac2 	bl	800708c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800ab08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ab0c:	f7fa fb04 	bl	8005118 <HAL_Delay>
	WIFI_RST_Disable();
 800ab10:	2201      	movs	r2, #1
 800ab12:	2108      	movs	r1, #8
 800ab14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab18:	f7fc fab8 	bl	800708c <HAL_GPIO_WritePin>
	while (timeout--) {
 800ab1c:	e01b      	b.n	800ab56 <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 800ab1e:	4b18      	ldr	r3, [pc, #96]	; (800ab80 <esp8266_HardwareReset+0x90>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d113      	bne.n	800ab50 <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 800ab28:	4816      	ldr	r0, [pc, #88]	; (800ab84 <esp8266_HardwareReset+0x94>)
 800ab2a:	f001 f8fb 	bl	800bd24 <puts>
			HAL_Delay(100);
 800ab2e:	2064      	movs	r0, #100	; 0x64
 800ab30:	f7fa faf2 	bl	8005118 <HAL_Delay>

			UART_ESP32_RxLen = 0;
 800ab34:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <esp8266_HardwareReset+0x98>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 800ab3a:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <esp8266_HardwareReset+0x90>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 800ab40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab44:	4911      	ldr	r1, [pc, #68]	; (800ab8c <esp8266_HardwareReset+0x9c>)
 800ab46:	4812      	ldr	r0, [pc, #72]	; (800ab90 <esp8266_HardwareReset+0xa0>)
 800ab48:	f7fe fb88 	bl	800925c <HAL_UART_Receive_DMA>

			return _SUCCEED;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e013      	b.n	800ab78 <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 800ab50:	2001      	movs	r0, #1
 800ab52:	f7fa fae1 	bl	8005118 <HAL_Delay>
	while (timeout--) {
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	1e5a      	subs	r2, r3, #1
 800ab5a:	60fa      	str	r2, [r7, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1de      	bne.n	800ab1e <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dc07      	bgt.n	800ab76 <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 800ab66:	480b      	ldr	r0, [pc, #44]	; (800ab94 <esp8266_HardwareReset+0xa4>)
 800ab68:	f001 f8dc 	bl	800bd24 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 800ab6c:	480a      	ldr	r0, [pc, #40]	; (800ab98 <esp8266_HardwareReset+0xa8>)
 800ab6e:	f001 f8d9 	bl	800bd24 <puts>
		return _TIMEOUT;
 800ab72:	2302      	movs	r3, #2
 800ab74:	e000      	b.n	800ab78 <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 800ab76:	23ff      	movs	r3, #255	; 0xff
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20001755 	.word	0x20001755
 800ab84:	0800ee2c 	.word	0x0800ee2c
 800ab88:	20001754 	.word	0x20001754
 800ab8c:	20000f54 	.word	0x20000f54
 800ab90:	20000278 	.word	0x20000278
 800ab94:	0800edf0 	.word	0x0800edf0
 800ab98:	0800ee08 	.word	0x0800ee08

0800ab9c <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 800aba2:	2333      	movs	r3, #51	; 0x33
 800aba4:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800aba6:	88fb      	ldrh	r3, [r7, #6]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 ff15 	bl	800b9d8 <malloc>
 800abae:	4603      	mov	r3, r0
 800abb0:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	461a      	mov	r2, r3
 800abb6:	2100      	movs	r1, #0
 800abb8:	6838      	ldr	r0, [r7, #0]
 800abba:	f000 ff45 	bl	800ba48 <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 800abbe:	4b0e      	ldr	r3, [pc, #56]	; (800abf8 <esp8266_ConnectAP+0x5c>)
 800abc0:	4a0e      	ldr	r2, [pc, #56]	; (800abfc <esp8266_ConnectAP+0x60>)
 800abc2:	490f      	ldr	r1, [pc, #60]	; (800ac00 <esp8266_ConnectAP+0x64>)
 800abc4:	6838      	ldr	r0, [r7, #0]
 800abc6:	f001 f8c5 	bl	800bd54 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 800abca:	2301      	movs	r3, #1
 800abcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abd0:	490c      	ldr	r1, [pc, #48]	; (800ac04 <esp8266_ConnectAP+0x68>)
 800abd2:	6838      	ldr	r0, [r7, #0]
 800abd4:	f7ff ff1a 	bl	800aa0c <esp8266_TransmitCmd>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d103      	bne.n	800abe6 <esp8266_ConnectAP+0x4a>
		wifi_state = _ONLINE;
 800abde:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <esp8266_ConnectAP+0x6c>)
 800abe0:	2205      	movs	r2, #5
 800abe2:	701a      	strb	r2, [r3, #0]
 800abe4:	e002      	b.n	800abec <esp8266_ConnectAP+0x50>
	else
		wifi_state = _OFFLINE;
 800abe6:	4b08      	ldr	r3, [pc, #32]	; (800ac08 <esp8266_ConnectAP+0x6c>)
 800abe8:	2206      	movs	r2, #6
 800abea:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 800abec:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <esp8266_ConnectAP+0x6c>)
 800abee:	781b      	ldrb	r3, [r3, #0]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	0800ee48 	.word	0x0800ee48
 800abfc:	0800ee54 	.word	0x0800ee54
 800ac00:	0800ee64 	.word	0x0800ee64
 800ac04:	0800ee78 	.word	0x0800ee78
 800ac08:	20000021 	.word	0x20000021

0800ac0c <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 800ac16:	48a8      	ldr	r0, [pc, #672]	; (800aeb8 <esp8266_SetupIP+0x2ac>)
 800ac18:	f001 f884 	bl	800bd24 <puts>
	wifi_config_step++;
 800ac1c:	4ba7      	ldr	r3, [pc, #668]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	4ba5      	ldr	r3, [pc, #660]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ac26:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 800ac28:	e019      	b.n	800ac5e <esp8266_SetupIP+0x52>
		retry_count++;
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800ac30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac34:	f7fa fa70 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d90f      	bls.n	800ac5e <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 800ac3e:	48a0      	ldr	r0, [pc, #640]	; (800aec0 <esp8266_SetupIP+0x2b4>)
 800ac40:	f001 f870 	bl	800bd24 <puts>
			retry_count = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 800ac48:	4b9e      	ldr	r3, [pc, #632]	; (800aec4 <esp8266_SetupIP+0x2b8>)
 800ac4a:	22ee      	movs	r2, #238	; 0xee
 800ac4c:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 800ac4e:	4b9b      	ldr	r3, [pc, #620]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	4b99      	ldr	r3, [pc, #612]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ac58:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e1e1      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 800ac5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ac62:	f7ff ff45 	bl	800aaf0 <esp8266_HardwareReset>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d1de      	bne.n	800ac2a <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 800ac6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac70:	f7fa fa52 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ac74:	2300      	movs	r3, #0
 800ac76:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 800ac78:	4893      	ldr	r0, [pc, #588]	; (800aec8 <esp8266_SetupIP+0x2bc>)
 800ac7a:	f001 f853 	bl	800bd24 <puts>
	wifi_config_step++;
 800ac7e:	4b8f      	ldr	r3, [pc, #572]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	3301      	adds	r3, #1
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	4b8d      	ldr	r3, [pc, #564]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ac88:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 800ac8a:	e016      	b.n	800acba <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800ac92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac96:	f7fa fa3f 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	2b03      	cmp	r3, #3
 800ac9e:	d90c      	bls.n	800acba <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 800aca0:	488a      	ldr	r0, [pc, #552]	; (800aecc <esp8266_SetupIP+0x2c0>)
 800aca2:	f001 f83f 	bl	800bd24 <puts>
			retry_count = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800acaa:	4b84      	ldr	r3, [pc, #528]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	3b01      	subs	r3, #1
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	4b82      	ldr	r3, [pc, #520]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800acb4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800acb6:	2300      	movs	r3, #0
 800acb8:	e1b3      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 800acba:	2301      	movs	r3, #1
 800acbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800acc0:	4983      	ldr	r1, [pc, #524]	; (800aed0 <esp8266_SetupIP+0x2c4>)
 800acc2:	4884      	ldr	r0, [pc, #528]	; (800aed4 <esp8266_SetupIP+0x2c8>)
 800acc4:	f7ff fea2 	bl	800aa0c <esp8266_TransmitCmd>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b01      	cmp	r3, #1
 800accc:	d1de      	bne.n	800ac8c <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 800acce:	2064      	movs	r0, #100	; 0x64
 800acd0:	f7fa fa22 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800acd4:	2300      	movs	r3, #0
 800acd6:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 800acd8:	487f      	ldr	r0, [pc, #508]	; (800aed8 <esp8266_SetupIP+0x2cc>)
 800acda:	f001 f823 	bl	800bd24 <puts>
	wifi_config_step++;
 800acde:	4b77      	ldr	r3, [pc, #476]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	4b75      	ldr	r3, [pc, #468]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ace8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800acea:	e016      	b.n	800ad1a <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	3301      	adds	r3, #1
 800acf0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800acf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800acf6:	f7fa fa0f 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	d90c      	bls.n	800ad1a <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 800ad00:	4876      	ldr	r0, [pc, #472]	; (800aedc <esp8266_SetupIP+0x2d0>)
 800ad02:	f001 f80f 	bl	800bd24 <puts>
			retry_count = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800ad0a:	4b6c      	ldr	r3, [pc, #432]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	4b6a      	ldr	r3, [pc, #424]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ad14:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800ad16:	2300      	movs	r3, #0
 800ad18:	e183      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ad20:	496b      	ldr	r1, [pc, #428]	; (800aed0 <esp8266_SetupIP+0x2c4>)
 800ad22:	486f      	ldr	r0, [pc, #444]	; (800aee0 <esp8266_SetupIP+0x2d4>)
 800ad24:	f7ff fe72 	bl	800aa0c <esp8266_TransmitCmd>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d1de      	bne.n	800acec <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 800ad2e:	2064      	movs	r0, #100	; 0x64
 800ad30:	f7fa f9f2 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ad34:	2300      	movs	r3, #0
 800ad36:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 800ad38:	486a      	ldr	r0, [pc, #424]	; (800aee4 <esp8266_SetupIP+0x2d8>)
 800ad3a:	f000 fff3 	bl	800bd24 <puts>
	wifi_config_step++;
 800ad3e:	4b5f      	ldr	r3, [pc, #380]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	4b5d      	ldr	r3, [pc, #372]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ad48:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 800ad4a:	e016      	b.n	800ad7a <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800ad52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad56:	f7fa f9df 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	2b03      	cmp	r3, #3
 800ad5e:	d90c      	bls.n	800ad7a <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 800ad60:	4861      	ldr	r0, [pc, #388]	; (800aee8 <esp8266_SetupIP+0x2dc>)
 800ad62:	f000 ffdf 	bl	800bd24 <puts>
			retry_count = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800ad6a:	4b54      	ldr	r3, [pc, #336]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	4b52      	ldr	r3, [pc, #328]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ad74:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e153      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ad80:	4953      	ldr	r1, [pc, #332]	; (800aed0 <esp8266_SetupIP+0x2c4>)
 800ad82:	485a      	ldr	r0, [pc, #360]	; (800aeec <esp8266_SetupIP+0x2e0>)
 800ad84:	f7ff fe42 	bl	800aa0c <esp8266_TransmitCmd>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d1de      	bne.n	800ad4c <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 800ad8e:	2064      	movs	r0, #100	; 0x64
 800ad90:	f7fa f9c2 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ad94:	2300      	movs	r3, #0
 800ad96:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 800ad98:	4855      	ldr	r0, [pc, #340]	; (800aef0 <esp8266_SetupIP+0x2e4>)
 800ad9a:	f000 ffc3 	bl	800bd24 <puts>
	wifi_config_step++;
 800ad9e:	4b47      	ldr	r3, [pc, #284]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	3301      	adds	r3, #1
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	4b45      	ldr	r3, [pc, #276]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ada8:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 800adaa:	e016      	b.n	800adda <esp8266_SetupIP+0x1ce>
		retry_count++;
 800adac:	79fb      	ldrb	r3, [r7, #7]
 800adae:	3301      	adds	r3, #1
 800adb0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800adb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800adb6:	f7fa f9af 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	2b03      	cmp	r3, #3
 800adbe:	d90c      	bls.n	800adda <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 800adc0:	484c      	ldr	r0, [pc, #304]	; (800aef4 <esp8266_SetupIP+0x2e8>)
 800adc2:	f000 ffaf 	bl	800bd24 <puts>
			retry_count = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800adca:	4b3c      	ldr	r3, [pc, #240]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	3b01      	subs	r3, #1
 800add0:	b2da      	uxtb	r2, r3
 800add2:	4b3a      	ldr	r3, [pc, #232]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800add4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800add6:	2300      	movs	r3, #0
 800add8:	e123      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 800adda:	f7ff fedf 	bl	800ab9c <esp8266_ConnectAP>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b05      	cmp	r3, #5
 800ade2:	d1e3      	bne.n	800adac <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 800ade4:	2064      	movs	r0, #100	; 0x64
 800ade6:	f7fa f997 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800adea:	2300      	movs	r3, #0
 800adec:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 800adee:	4b42      	ldr	r3, [pc, #264]	; (800aef8 <esp8266_SetupIP+0x2ec>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b05      	cmp	r3, #5
 800adf4:	d123      	bne.n	800ae3e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 800adf6:	e018      	b.n	800ae2a <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	3301      	adds	r3, #1
 800adfc:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800adfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae02:	f7fa f989 	bl	8005118 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d90e      	bls.n	800ae2a <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 800ae0c:	483b      	ldr	r0, [pc, #236]	; (800aefc <esp8266_SetupIP+0x2f0>)
 800ae0e:	f000 ff89 	bl	800bd24 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 800ae12:	483b      	ldr	r0, [pc, #236]	; (800af00 <esp8266_SetupIP+0x2f4>)
 800ae14:	f000 ff00 	bl	800bc18 <iprintf>
				retry_count = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800ae1c:	4b27      	ldr	r3, [pc, #156]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	4b25      	ldr	r3, [pc, #148]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ae26:	701a      	strb	r2, [r3, #0]
				break;
 800ae28:	e009      	b.n	800ae3e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae30:	4927      	ldr	r1, [pc, #156]	; (800aed0 <esp8266_SetupIP+0x2c4>)
 800ae32:	4834      	ldr	r0, [pc, #208]	; (800af04 <esp8266_SetupIP+0x2f8>)
 800ae34:	f7ff fdea 	bl	800aa0c <esp8266_TransmitCmd>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d1dc      	bne.n	800adf8 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 800ae3e:	2064      	movs	r0, #100	; 0x64
 800ae40:	f7fa f96a 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ae44:	2300      	movs	r3, #0
 800ae46:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 800ae48:	4b2b      	ldr	r3, [pc, #172]	; (800aef8 <esp8266_SetupIP+0x2ec>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b05      	cmp	r3, #5
 800ae4e:	d123      	bne.n	800ae98 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 800ae50:	e018      	b.n	800ae84 <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	3301      	adds	r3, #1
 800ae56:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800ae58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae5c:	f7fa f95c 	bl	8005118 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d90e      	bls.n	800ae84 <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 800ae66:	4828      	ldr	r0, [pc, #160]	; (800af08 <esp8266_SetupIP+0x2fc>)
 800ae68:	f000 ff5c 	bl	800bd24 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 800ae6c:	4824      	ldr	r0, [pc, #144]	; (800af00 <esp8266_SetupIP+0x2f4>)
 800ae6e:	f000 fed3 	bl	800bc18 <iprintf>
				retry_count = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800ae76:	4b11      	ldr	r3, [pc, #68]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800ae80:	701a      	strb	r2, [r3, #0]
				break;
 800ae82:	e009      	b.n	800ae98 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 800ae84:	2301      	movs	r3, #1
 800ae86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae8a:	4911      	ldr	r1, [pc, #68]	; (800aed0 <esp8266_SetupIP+0x2c4>)
 800ae8c:	481f      	ldr	r0, [pc, #124]	; (800af0c <esp8266_SetupIP+0x300>)
 800ae8e:	f7ff fdbd 	bl	800aa0c <esp8266_TransmitCmd>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d1dc      	bne.n	800ae52 <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 800ae98:	2064      	movs	r0, #100	; 0x64
 800ae9a:	f7fa f93d 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800ae9e:	2300      	movs	r3, #0
 800aea0:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 800aea2:	481b      	ldr	r0, [pc, #108]	; (800af10 <esp8266_SetupIP+0x304>)
 800aea4:	f000 ff3e 	bl	800bd24 <puts>
	wifi_config_step++;
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	4b02      	ldr	r3, [pc, #8]	; (800aebc <esp8266_SetupIP+0x2b0>)
 800aeb2:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 800aeb4:	e045      	b.n	800af42 <esp8266_SetupIP+0x336>
 800aeb6:	bf00      	nop
 800aeb8:	0800eec8 	.word	0x0800eec8
 800aebc:	20000750 	.word	0x20000750
 800aec0:	0800eee8 	.word	0x0800eee8
 800aec4:	20000022 	.word	0x20000022
 800aec8:	0800ef34 	.word	0x0800ef34
 800aecc:	0800ef54 	.word	0x0800ef54
 800aed0:	0800ef70 	.word	0x0800ef70
 800aed4:	0800ef74 	.word	0x0800ef74
 800aed8:	0800ef7c 	.word	0x0800ef7c
 800aedc:	0800ef9c 	.word	0x0800ef9c
 800aee0:	0800efbc 	.word	0x0800efbc
 800aee4:	0800efc8 	.word	0x0800efc8
 800aee8:	0800eff0 	.word	0x0800eff0
 800aeec:	0800f014 	.word	0x0800f014
 800aef0:	0800f024 	.word	0x0800f024
 800aef4:	0800f044 	.word	0x0800f044
 800aef8:	20000021 	.word	0x20000021
 800aefc:	0800f064 	.word	0x0800f064
 800af00:	0800f080 	.word	0x0800f080
 800af04:	0800f0b8 	.word	0x0800f0b8
 800af08:	0800f0c4 	.word	0x0800f0c4
 800af0c:	0800f0e0 	.word	0x0800f0e0
 800af10:	0800f0ec 	.word	0x0800f0ec
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800af14:	79fb      	ldrb	r3, [r7, #7]
 800af16:	3301      	adds	r3, #1
 800af18:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800af1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af1e:	f7fa f8fb 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	2b03      	cmp	r3, #3
 800af26:	d90c      	bls.n	800af42 <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 800af28:	4840      	ldr	r0, [pc, #256]	; (800b02c <esp8266_SetupIP+0x420>)
 800af2a:	f000 fefb 	bl	800bd24 <puts>
			retry_count = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800af32:	4b3f      	ldr	r3, [pc, #252]	; (800b030 <esp8266_SetupIP+0x424>)
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	3b01      	subs	r3, #1
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	4b3d      	ldr	r3, [pc, #244]	; (800b030 <esp8266_SetupIP+0x424>)
 800af3c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800af3e:	2300      	movs	r3, #0
 800af40:	e06f      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 800af42:	2301      	movs	r3, #1
 800af44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af48:	493a      	ldr	r1, [pc, #232]	; (800b034 <esp8266_SetupIP+0x428>)
 800af4a:	483b      	ldr	r0, [pc, #236]	; (800b038 <esp8266_SetupIP+0x42c>)
 800af4c:	f7ff fd5e 	bl	800aa0c <esp8266_TransmitCmd>
 800af50:	4603      	mov	r3, r0
 800af52:	2b01      	cmp	r3, #1
 800af54:	d1de      	bne.n	800af14 <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 800af56:	2064      	movs	r0, #100	; 0x64
 800af58:	f7fa f8de 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 800af60:	4836      	ldr	r0, [pc, #216]	; (800b03c <esp8266_SetupIP+0x430>)
 800af62:	f000 fedf 	bl	800bd24 <puts>
	wifi_config_step++;
 800af66:	4b32      	ldr	r3, [pc, #200]	; (800b030 <esp8266_SetupIP+0x424>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	3301      	adds	r3, #1
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	4b30      	ldr	r3, [pc, #192]	; (800b030 <esp8266_SetupIP+0x424>)
 800af70:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 800af72:	e016      	b.n	800afa2 <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	3301      	adds	r3, #1
 800af78:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800af7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af7e:	f7fa f8cb 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800af82:	79fb      	ldrb	r3, [r7, #7]
 800af84:	2b03      	cmp	r3, #3
 800af86:	d90c      	bls.n	800afa2 <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 800af88:	482d      	ldr	r0, [pc, #180]	; (800b040 <esp8266_SetupIP+0x434>)
 800af8a:	f000 fecb 	bl	800bd24 <puts>
			retry_count = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800af92:	4b27      	ldr	r3, [pc, #156]	; (800b030 <esp8266_SetupIP+0x424>)
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	3b01      	subs	r3, #1
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	4b25      	ldr	r3, [pc, #148]	; (800b030 <esp8266_SetupIP+0x424>)
 800af9c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800af9e:	2300      	movs	r3, #0
 800afa0:	e03f      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 800afa2:	2301      	movs	r3, #1
 800afa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afa8:	4922      	ldr	r1, [pc, #136]	; (800b034 <esp8266_SetupIP+0x428>)
 800afaa:	4826      	ldr	r0, [pc, #152]	; (800b044 <esp8266_SetupIP+0x438>)
 800afac:	f7ff fd2e 	bl	800aa0c <esp8266_TransmitCmd>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d1de      	bne.n	800af74 <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 800afb6:	2064      	movs	r0, #100	; 0x64
 800afb8:	f7fa f8ae 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 800afc0:	4821      	ldr	r0, [pc, #132]	; (800b048 <esp8266_SetupIP+0x43c>)
 800afc2:	f000 feaf 	bl	800bd24 <puts>
	wifi_config_step++;
 800afc6:	4b1a      	ldr	r3, [pc, #104]	; (800b030 <esp8266_SetupIP+0x424>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	3301      	adds	r3, #1
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	4b18      	ldr	r3, [pc, #96]	; (800b030 <esp8266_SetupIP+0x424>)
 800afd0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 800afd2:	e016      	b.n	800b002 <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800afd4:	79fb      	ldrb	r3, [r7, #7]
 800afd6:	3301      	adds	r3, #1
 800afd8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800afda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800afde:	f7fa f89b 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d90c      	bls.n	800b002 <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 800afe8:	4818      	ldr	r0, [pc, #96]	; (800b04c <esp8266_SetupIP+0x440>)
 800afea:	f000 fe9b 	bl	800bd24 <puts>
			retry_count = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800aff2:	4b0f      	ldr	r3, [pc, #60]	; (800b030 <esp8266_SetupIP+0x424>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <esp8266_SetupIP+0x424>)
 800affc:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800affe:	2300      	movs	r3, #0
 800b000:	e00f      	b.n	800b022 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 800b002:	2301      	movs	r3, #1
 800b004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b008:	490a      	ldr	r1, [pc, #40]	; (800b034 <esp8266_SetupIP+0x428>)
 800b00a:	4811      	ldr	r0, [pc, #68]	; (800b050 <esp8266_SetupIP+0x444>)
 800b00c:	f7ff fcfe 	bl	800aa0c <esp8266_TransmitCmd>
 800b010:	4603      	mov	r3, r0
 800b012:	2b01      	cmp	r3, #1
 800b014:	d1de      	bne.n	800afd4 <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 800b016:	2064      	movs	r0, #100	; 0x64
 800b018:	f7fa f87e 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 800b020:	2301      	movs	r3, #1

}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	0800f10c 	.word	0x0800f10c
 800b030:	20000750 	.word	0x20000750
 800b034:	0800ef70 	.word	0x0800ef70
 800b038:	0800f12c 	.word	0x0800f12c
 800b03c:	0800f13c 	.word	0x0800f13c
 800b040:	0800f164 	.word	0x0800f164
 800b044:	0800f190 	.word	0x0800f190
 800b048:	0800f19c 	.word	0x0800f19c
 800b04c:	0800f1d0 	.word	0x0800f1d0
 800b050:	0800f204 	.word	0x0800f204

0800b054 <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af02      	add	r7, sp, #8
	int retry_count = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 800b05e:	232d      	movs	r3, #45	; 0x2d
 800b060:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b062:	897b      	ldrh	r3, [r7, #10]
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fcb7 	bl	800b9d8 <malloc>
 800b06a:	4603      	mov	r3, r0
 800b06c:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b06e:	897b      	ldrh	r3, [r7, #10]
 800b070:	461a      	mov	r2, r3
 800b072:	2100      	movs	r1, #0
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fce7 	bl	800ba48 <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 800b07a:	4b19      	ldr	r3, [pc, #100]	; (800b0e0 <esp8266_ConfigAccessBroker+0x8c>)
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	4b18      	ldr	r3, [pc, #96]	; (800b0e0 <esp8266_ConfigAccessBroker+0x8c>)
 800b080:	4a18      	ldr	r2, [pc, #96]	; (800b0e4 <esp8266_ConfigAccessBroker+0x90>)
 800b082:	4919      	ldr	r1, [pc, #100]	; (800b0e8 <esp8266_ConfigAccessBroker+0x94>)
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fe65 	bl	800bd54 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b08a:	e011      	b.n	800b0b0 <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b096:	f7fa f83f 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b03      	cmp	r3, #3
 800b09e:	dd07      	ble.n	800b0b0 <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 800b0a0:	4812      	ldr	r0, [pc, #72]	; (800b0ec <esp8266_ConfigAccessBroker+0x98>)
 800b0a2:	f000 fe3f 	bl	800bd24 <puts>
			retry_count = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 800b0aa:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <esp8266_ConfigAccessBroker+0x9c>)
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0b6:	490f      	ldr	r1, [pc, #60]	; (800b0f4 <esp8266_ConfigAccessBroker+0xa0>)
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff fca7 	bl	800aa0c <esp8266_TransmitCmd>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d1e3      	bne.n	800b08c <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 800b0c4:	4b0a      	ldr	r3, [pc, #40]	; (800b0f0 <esp8266_ConfigAccessBroker+0x9c>)
 800b0c6:	2205      	movs	r2, #5
 800b0c8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800b0ca:	2064      	movs	r0, #100	; 0x64
 800b0cc:	f7fa f824 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <esp8266_ConfigAccessBroker+0x9c>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	0800f290 	.word	0x0800f290
 800b0e4:	0800f294 	.word	0x0800f294
 800b0e8:	0800f29c 	.word	0x0800f29c
 800b0ec:	0800f2c8 	.word	0x0800f2c8
 800b0f0:	20000023 	.word	0x20000023
 800b0f4:	0800ef70 	.word	0x0800ef70

0800b0f8 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 800b102:	232e      	movs	r3, #46	; 0x2e
 800b104:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b106:	897b      	ldrh	r3, [r7, #10]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fc65 	bl	800b9d8 <malloc>
 800b10e:	4603      	mov	r3, r0
 800b110:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b112:	897b      	ldrh	r3, [r7, #10]
 800b114:	461a      	mov	r2, r3
 800b116:	2100      	movs	r1, #0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fc95 	bl	800ba48 <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 800b11e:	4b16      	ldr	r3, [pc, #88]	; (800b178 <esp8266_ConnectBroker+0x80>)
 800b120:	4a16      	ldr	r2, [pc, #88]	; (800b17c <esp8266_ConnectBroker+0x84>)
 800b122:	4917      	ldr	r1, [pc, #92]	; (800b180 <esp8266_ConnectBroker+0x88>)
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fe15 	bl	800bd54 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b12a:	e011      	b.n	800b150 <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	3301      	adds	r3, #1
 800b130:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b136:	f7f9 ffef 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	dd07      	ble.n	800b150 <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 800b140:	4810      	ldr	r0, [pc, #64]	; (800b184 <esp8266_ConnectBroker+0x8c>)
 800b142:	f000 fdef 	bl	800bd24 <puts>
			retry_count = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 800b14a:	4b0f      	ldr	r3, [pc, #60]	; (800b188 <esp8266_ConnectBroker+0x90>)
 800b14c:	2206      	movs	r2, #6
 800b14e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b150:	2301      	movs	r3, #1
 800b152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b156:	490d      	ldr	r1, [pc, #52]	; (800b18c <esp8266_ConnectBroker+0x94>)
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff fc57 	bl	800aa0c <esp8266_TransmitCmd>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b01      	cmp	r3, #1
 800b162:	d1e3      	bne.n	800b12c <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 800b164:	4b08      	ldr	r3, [pc, #32]	; (800b188 <esp8266_ConnectBroker+0x90>)
 800b166:	2207      	movs	r2, #7
 800b168:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 800b16a:	4b07      	ldr	r3, [pc, #28]	; (800b188 <esp8266_ConnectBroker+0x90>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	0800ee88 	.word	0x0800ee88
 800b17c:	0800ee90 	.word	0x0800ee90
 800b180:	0800f31c 	.word	0x0800f31c
 800b184:	0800f334 	.word	0x0800f334
 800b188:	20000023 	.word	0x20000023
 800b18c:	0800ef70 	.word	0x0800ef70

0800b190 <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	71fb      	strb	r3, [r7, #7]
//
//	HAL_Delay(100);
//	retry_count = 0;		// reset retry count

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 800b19a:	482d      	ldr	r0, [pc, #180]	; (800b250 <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 800b19c:	f000 fdc2 	bl	800bd24 <puts>
	mqtt_config_step++;
 800b1a0:	4b2c      	ldr	r3, [pc, #176]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	4b2a      	ldr	r3, [pc, #168]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b1aa:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 800b1ac:	e016      	b.n	800b1dc <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 800b1b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b1b8:	f7f9 ffae 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d90c      	bls.n	800b1dc <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 800b1c2:	4825      	ldr	r0, [pc, #148]	; (800b258 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 800b1c4:	f000 fdae 	bl	800bd24 <puts>
			retry_count = 0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 800b1cc:	4b21      	ldr	r3, [pc, #132]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	4b1f      	ldr	r3, [pc, #124]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b1d6:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e035      	b.n	800b248 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 800b1dc:	f7ff ff3a 	bl	800b054 <esp8266_ConfigAccessBroker>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b05      	cmp	r3, #5
 800b1e4:	d1e3      	bne.n	800b1ae <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 800b1e6:	2064      	movs	r0, #100	; 0x64
 800b1e8:	f7f9 ff96 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
	retry_count = 0;		// reset retry count
	*/

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 800b1f0:	481a      	ldr	r0, [pc, #104]	; (800b25c <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 800b1f2:	f000 fd97 	bl	800bd24 <puts>
	mqtt_config_step++;
 800b1f6:	4b17      	ldr	r3, [pc, #92]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	4b15      	ldr	r3, [pc, #84]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b200:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 800b202:	e016      	b.n	800b232 <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 800b204:	79fb      	ldrb	r3, [r7, #7]
 800b206:	3301      	adds	r3, #1
 800b208:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 800b20a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b20e:	f7f9 ff83 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	2b03      	cmp	r3, #3
 800b216:	d90c      	bls.n	800b232 <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 800b218:	4811      	ldr	r0, [pc, #68]	; (800b260 <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 800b21a:	f000 fd83 	bl	800bd24 <puts>
			retry_count = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 800b222:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	3b01      	subs	r3, #1
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800b22c:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 800b22e:	2300      	movs	r3, #0
 800b230:	e00a      	b.n	800b248 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 800b232:	f7ff ff61 	bl	800b0f8 <esp8266_ConnectBroker>
 800b236:	4603      	mov	r3, r0
 800b238:	2b06      	cmp	r3, #6
 800b23a:	d9e3      	bls.n	800b204 <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 800b23c:	2064      	movs	r0, #100	; 0x64
 800b23e:	f7f9 ff6b 	bl	8005118 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800b242:	2300      	movs	r3, #0
 800b244:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 800b246:	2301      	movs	r3, #1
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	0800f35c 	.word	0x0800f35c
 800b254:	20000751 	.word	0x20000751
 800b258:	0800f394 	.word	0x0800f394
 800b25c:	0800f3c0 	.word	0x0800f3c0
 800b260:	0800f3f4 	.word	0x0800f3f4

0800b264 <esp8266_Subscribe_Led_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Led_BrokerMQTT()
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 800b26e:	4b22      	ldr	r3, [pc, #136]	; (800b2f8 <esp8266_Subscribe_Led_BrokerMQTT+0x94>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b06      	cmp	r3, #6
 800b274:	d801      	bhi.n	800b27a <esp8266_Subscribe_Led_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 800b276:	2300      	movs	r3, #0
 800b278:	e039      	b.n	800b2ee <esp8266_Subscribe_Led_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 800b27a:	2328      	movs	r3, #40	; 0x28
 800b27c:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b27e:	897b      	ldrh	r3, [r7, #10]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fba9 	bl	800b9d8 <malloc>
 800b286:	4603      	mov	r3, r0
 800b288:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b28a:	897b      	ldrh	r3, [r7, #10]
 800b28c:	461a      	mov	r2, r3
 800b28e:	2100      	movs	r1, #0
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fbd9 	bl	800ba48 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/led\",1", MQTT_CLIENTID);
 800b296:	4a19      	ldr	r2, [pc, #100]	; (800b2fc <esp8266_Subscribe_Led_BrokerMQTT+0x98>)
 800b298:	4919      	ldr	r1, [pc, #100]	; (800b300 <esp8266_Subscribe_Led_BrokerMQTT+0x9c>)
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fd5a 	bl	800bd54 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b2a0:	e011      	b.n	800b2c6 <esp8266_Subscribe_Led_BrokerMQTT+0x62>
	{
		retry_count++;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b2a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b2ac:	f7f9 ff34 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	dd07      	ble.n	800b2c6 <esp8266_Subscribe_Led_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Led_BrokerMQTT() failed\r\n");
 800b2b6:	4813      	ldr	r0, [pc, #76]	; (800b304 <esp8266_Subscribe_Led_BrokerMQTT+0xa0>)
 800b2b8:	f000 fd34 	bl	800bd24 <puts>
			retry_count = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 800b2c0:	4b0d      	ldr	r3, [pc, #52]	; (800b2f8 <esp8266_Subscribe_Led_BrokerMQTT+0x94>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2cc:	490e      	ldr	r1, [pc, #56]	; (800b308 <esp8266_Subscribe_Led_BrokerMQTT+0xa4>)
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff fb9c 	bl	800aa0c <esp8266_TransmitCmd>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d1e3      	bne.n	800b2a2 <esp8266_Subscribe_Led_BrokerMQTT+0x3e>
		}
	}

	HAL_Delay(100);
 800b2da:	2064      	movs	r0, #100	; 0x64
 800b2dc:	f7f9 ff1c 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_LED_MQTT;
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <esp8266_Subscribe_Led_BrokerMQTT+0x94>)
 800b2e6:	2208      	movs	r2, #8
 800b2e8:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b2ea:	4b03      	ldr	r3, [pc, #12]	; (800b2f8 <esp8266_Subscribe_Led_BrokerMQTT+0x94>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20000023 	.word	0x20000023
 800b2fc:	0800f294 	.word	0x0800f294
 800b300:	0800f41c 	.word	0x0800f41c
 800b304:	0800f434 	.word	0x0800f434
 800b308:	0800ef70 	.word	0x0800ef70

0800b30c <esp8266_Subscribe_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Temp_BrokerMQTT()
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 800b316:	4b22      	ldr	r3, [pc, #136]	; (800b3a0 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b06      	cmp	r3, #6
 800b31c:	d801      	bhi.n	800b322 <esp8266_Subscribe_Temp_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 800b31e:	2300      	movs	r3, #0
 800b320:	e039      	b.n	800b396 <esp8266_Subscribe_Temp_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 800b322:	2328      	movs	r3, #40	; 0x28
 800b324:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b326:	897b      	ldrh	r3, [r7, #10]
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 fb55 	bl	800b9d8 <malloc>
 800b32e:	4603      	mov	r3, r0
 800b330:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800b332:	897b      	ldrh	r3, [r7, #10]
 800b334:	461a      	mov	r2, r3
 800b336:	2100      	movs	r1, #0
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fb85 	bl	800ba48 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTemp\",1", MQTT_CLIENTID);
 800b33e:	4a19      	ldr	r2, [pc, #100]	; (800b3a4 <esp8266_Subscribe_Temp_BrokerMQTT+0x98>)
 800b340:	4919      	ldr	r1, [pc, #100]	; (800b3a8 <esp8266_Subscribe_Temp_BrokerMQTT+0x9c>)
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fd06 	bl	800bd54 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b348:	e011      	b.n	800b36e <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
	{
		retry_count++;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3301      	adds	r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800b350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b354:	f7f9 fee0 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	dd07      	ble.n	800b36e <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 800b35e:	4813      	ldr	r0, [pc, #76]	; (800b3ac <esp8266_Subscribe_Temp_BrokerMQTT+0xa0>)
 800b360:	f000 fce0 	bl	800bd24 <puts>
			retry_count = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 800b368:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b36e:	2301      	movs	r3, #1
 800b370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b374:	490e      	ldr	r1, [pc, #56]	; (800b3b0 <esp8266_Subscribe_Temp_BrokerMQTT+0xa4>)
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff fb48 	bl	800aa0c <esp8266_TransmitCmd>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d1e3      	bne.n	800b34a <esp8266_Subscribe_Temp_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 800b382:	2064      	movs	r0, #100	; 0x64
 800b384:	f7f9 fec8 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TEMP_MQTT;
 800b38c:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 800b38e:	2209      	movs	r2, #9
 800b390:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b392:	4b03      	ldr	r3, [pc, #12]	; (800b3a0 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 800b394:	781b      	ldrb	r3, [r3, #0]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20000023 	.word	0x20000023
 800b3a4:	0800f294 	.word	0x0800f294
 800b3a8:	0800f468 	.word	0x0800f468
 800b3ac:	0800f484 	.word	0x0800f484
 800b3b0:	0800ef70 	.word	0x0800ef70

0800b3b4 <esp8266_Publish_Button_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Publish_Button_BrokerMQTT(uint8_t *data, uint16_t size)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 800b3c4:	4b24      	ldr	r3, [pc, #144]	; (800b458 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b06      	cmp	r3, #6
 800b3ca:	d902      	bls.n	800b3d2 <esp8266_Publish_Button_BrokerMQTT+0x1e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <esp8266_Publish_Button_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e03b      	b.n	800b44e <esp8266_Publish_Button_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 800b3d6:	887b      	ldrh	r3, [r7, #2]
 800b3d8:	3328      	adds	r3, #40	; 0x28
 800b3da:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b3dc:	8a7b      	ldrh	r3, [r7, #18]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 fafa 	bl	800b9d8 <malloc>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 800b3e8:	8a7b      	ldrh	r3, [r7, #18]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 fb2a 	bl	800ba48 <memset>
	//sprintf((char*) cmd, "AT+MQTTPUB=0,\"home/temp\",\"%s\",1,0", data);
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/button\",\"%s\",1,0", MQTT_CLIENTID, data);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a19      	ldr	r2, [pc, #100]	; (800b45c <esp8266_Publish_Button_BrokerMQTT+0xa8>)
 800b3f8:	4919      	ldr	r1, [pc, #100]	; (800b460 <esp8266_Publish_Button_BrokerMQTT+0xac>)
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 fcaa 	bl	800bd54 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b400:	e011      	b.n	800b426 <esp8266_Publish_Button_BrokerMQTT+0x72>
	{
		retry_count++;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3301      	adds	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 800b408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b40c:	f7f9 fe84 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2b03      	cmp	r3, #3
 800b414:	dd07      	ble.n	800b426 <esp8266_Publish_Button_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 800b416:	4813      	ldr	r0, [pc, #76]	; (800b464 <esp8266_Publish_Button_BrokerMQTT+0xb0>)
 800b418:	f000 fc84 	bl	800bd24 <puts>
			retry_count = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 800b420:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 800b422:	2200      	movs	r2, #0
 800b424:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b426:	2301      	movs	r3, #1
 800b428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b42c:	490e      	ldr	r1, [pc, #56]	; (800b468 <esp8266_Publish_Button_BrokerMQTT+0xb4>)
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7ff faec 	bl	800aa0c <esp8266_TransmitCmd>
 800b434:	4603      	mov	r3, r0
 800b436:	2b01      	cmp	r3, #1
 800b438:	d1e3      	bne.n	800b402 <esp8266_Publish_Button_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 800b43a:	2064      	movs	r0, #100	; 0x64
 800b43c:	f7f9 fe6c 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_BUTTON_MQTT;
 800b444:	4b04      	ldr	r3, [pc, #16]	; (800b458 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 800b446:	220a      	movs	r2, #10
 800b448:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b44a:	4b03      	ldr	r3, [pc, #12]	; (800b458 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 800b44c:	781b      	ldrb	r3, [r3, #0]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20000023 	.word	0x20000023
 800b45c:	0800f294 	.word	0x0800f294
 800b460:	0800f4b8 	.word	0x0800f4b8
 800b464:	0800f484 	.word	0x0800f484
 800b468:	0800ef70 	.word	0x0800ef70

0800b46c <esp8266_Publish_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Publish_Temp_BrokerMQTT(uint8_t *data, uint16_t size)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 800b47c:	4b24      	ldr	r3, [pc, #144]	; (800b510 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b06      	cmp	r3, #6
 800b482:	d902      	bls.n	800b48a <esp8266_Publish_Temp_BrokerMQTT+0x1e>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <esp8266_Publish_Temp_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 800b48a:	2300      	movs	r3, #0
 800b48c:	e03b      	b.n	800b506 <esp8266_Publish_Temp_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 800b48e:	887b      	ldrh	r3, [r7, #2]
 800b490:	3328      	adds	r3, #40	; 0x28
 800b492:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800b494:	8a7b      	ldrh	r3, [r7, #18]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 fa9e 	bl	800b9d8 <malloc>
 800b49c:	4603      	mov	r3, r0
 800b49e:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 800b4a0:	8a7b      	ldrh	r3, [r7, #18]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f000 face 	bl	800ba48 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/temp\",\"%s\",1,0", MQTT_CLIENTID, data);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a19      	ldr	r2, [pc, #100]	; (800b514 <esp8266_Publish_Temp_BrokerMQTT+0xa8>)
 800b4b0:	4919      	ldr	r1, [pc, #100]	; (800b518 <esp8266_Publish_Temp_BrokerMQTT+0xac>)
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f000 fc4e 	bl	800bd54 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b4b8:	e011      	b.n	800b4de <esp8266_Publish_Temp_BrokerMQTT+0x72>
	{
		retry_count++;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 800b4c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b4c4:	f7f9 fe28 	bl	8005118 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	dd07      	ble.n	800b4de <esp8266_Publish_Temp_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 800b4ce:	4813      	ldr	r0, [pc, #76]	; (800b51c <esp8266_Publish_Temp_BrokerMQTT+0xb0>)
 800b4d0:	f000 fc28 	bl	800bd24 <puts>
			retry_count = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 800b4d8:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4e4:	490e      	ldr	r1, [pc, #56]	; (800b520 <esp8266_Publish_Temp_BrokerMQTT+0xb4>)
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fa90 	bl	800aa0c <esp8266_TransmitCmd>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d1e3      	bne.n	800b4ba <esp8266_Publish_Temp_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 800b4f2:	2064      	movs	r0, #100	; 0x64
 800b4f4:	f7f9 fe10 	bl	8005118 <HAL_Delay>
	retry_count = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TEMP_MQTT;
 800b4fc:	4b04      	ldr	r3, [pc, #16]	; (800b510 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800b4fe:	220b      	movs	r2, #11
 800b500:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800b502:	4b03      	ldr	r3, [pc, #12]	; (800b510 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800b504:	781b      	ldrb	r3, [r3, #0]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20000023 	.word	0x20000023
 800b514:	0800f294 	.word	0x0800f294
 800b518:	0800f4dc 	.word	0x0800f4dc
 800b51c:	0800f484 	.word	0x0800f484
 800b520:	0800ef70 	.word	0x0800ef70

0800b524 <get_mqtt_state>:

uint8_t get_mqtt_state()
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0
	return mqtt_state;
 800b528:	4b03      	ldr	r3, [pc, #12]	; (800b538 <get_mqtt_state+0x14>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	20000023 	.word	0x20000023

0800b53c <atoi>:
 800b53c:	220a      	movs	r2, #10
 800b53e:	2100      	movs	r1, #0
 800b540:	f001 bb52 	b.w	800cbe8 <strtol>

0800b544 <__errno>:
 800b544:	4b01      	ldr	r3, [pc, #4]	; (800b54c <__errno+0x8>)
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	20000024 	.word	0x20000024

0800b550 <__sflush_r>:
 800b550:	898a      	ldrh	r2, [r1, #12]
 800b552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b556:	4605      	mov	r5, r0
 800b558:	0710      	lsls	r0, r2, #28
 800b55a:	460c      	mov	r4, r1
 800b55c:	d458      	bmi.n	800b610 <__sflush_r+0xc0>
 800b55e:	684b      	ldr	r3, [r1, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	dc05      	bgt.n	800b570 <__sflush_r+0x20>
 800b564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b566:	2b00      	cmp	r3, #0
 800b568:	dc02      	bgt.n	800b570 <__sflush_r+0x20>
 800b56a:	2000      	movs	r0, #0
 800b56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b572:	2e00      	cmp	r6, #0
 800b574:	d0f9      	beq.n	800b56a <__sflush_r+0x1a>
 800b576:	2300      	movs	r3, #0
 800b578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b57c:	682f      	ldr	r7, [r5, #0]
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	d032      	beq.n	800b5e8 <__sflush_r+0x98>
 800b582:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	075a      	lsls	r2, r3, #29
 800b588:	d505      	bpl.n	800b596 <__sflush_r+0x46>
 800b58a:	6863      	ldr	r3, [r4, #4]
 800b58c:	1ac0      	subs	r0, r0, r3
 800b58e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b590:	b10b      	cbz	r3, 800b596 <__sflush_r+0x46>
 800b592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b594:	1ac0      	subs	r0, r0, r3
 800b596:	2300      	movs	r3, #0
 800b598:	4602      	mov	r2, r0
 800b59a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b59c:	6a21      	ldr	r1, [r4, #32]
 800b59e:	4628      	mov	r0, r5
 800b5a0:	47b0      	blx	r6
 800b5a2:	1c43      	adds	r3, r0, #1
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	d106      	bne.n	800b5b6 <__sflush_r+0x66>
 800b5a8:	6829      	ldr	r1, [r5, #0]
 800b5aa:	291d      	cmp	r1, #29
 800b5ac:	d82c      	bhi.n	800b608 <__sflush_r+0xb8>
 800b5ae:	4a2a      	ldr	r2, [pc, #168]	; (800b658 <__sflush_r+0x108>)
 800b5b0:	40ca      	lsrs	r2, r1
 800b5b2:	07d6      	lsls	r6, r2, #31
 800b5b4:	d528      	bpl.n	800b608 <__sflush_r+0xb8>
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	6062      	str	r2, [r4, #4]
 800b5ba:	04d9      	lsls	r1, r3, #19
 800b5bc:	6922      	ldr	r2, [r4, #16]
 800b5be:	6022      	str	r2, [r4, #0]
 800b5c0:	d504      	bpl.n	800b5cc <__sflush_r+0x7c>
 800b5c2:	1c42      	adds	r2, r0, #1
 800b5c4:	d101      	bne.n	800b5ca <__sflush_r+0x7a>
 800b5c6:	682b      	ldr	r3, [r5, #0]
 800b5c8:	b903      	cbnz	r3, 800b5cc <__sflush_r+0x7c>
 800b5ca:	6560      	str	r0, [r4, #84]	; 0x54
 800b5cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ce:	602f      	str	r7, [r5, #0]
 800b5d0:	2900      	cmp	r1, #0
 800b5d2:	d0ca      	beq.n	800b56a <__sflush_r+0x1a>
 800b5d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5d8:	4299      	cmp	r1, r3
 800b5da:	d002      	beq.n	800b5e2 <__sflush_r+0x92>
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 fa3b 	bl	800ba58 <_free_r>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	6360      	str	r0, [r4, #52]	; 0x34
 800b5e6:	e7c1      	b.n	800b56c <__sflush_r+0x1c>
 800b5e8:	6a21      	ldr	r1, [r4, #32]
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b0      	blx	r6
 800b5f0:	1c41      	adds	r1, r0, #1
 800b5f2:	d1c7      	bne.n	800b584 <__sflush_r+0x34>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d0c4      	beq.n	800b584 <__sflush_r+0x34>
 800b5fa:	2b1d      	cmp	r3, #29
 800b5fc:	d001      	beq.n	800b602 <__sflush_r+0xb2>
 800b5fe:	2b16      	cmp	r3, #22
 800b600:	d101      	bne.n	800b606 <__sflush_r+0xb6>
 800b602:	602f      	str	r7, [r5, #0]
 800b604:	e7b1      	b.n	800b56a <__sflush_r+0x1a>
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	e7ad      	b.n	800b56c <__sflush_r+0x1c>
 800b610:	690f      	ldr	r7, [r1, #16]
 800b612:	2f00      	cmp	r7, #0
 800b614:	d0a9      	beq.n	800b56a <__sflush_r+0x1a>
 800b616:	0793      	lsls	r3, r2, #30
 800b618:	680e      	ldr	r6, [r1, #0]
 800b61a:	bf08      	it	eq
 800b61c:	694b      	ldreq	r3, [r1, #20]
 800b61e:	600f      	str	r7, [r1, #0]
 800b620:	bf18      	it	ne
 800b622:	2300      	movne	r3, #0
 800b624:	eba6 0807 	sub.w	r8, r6, r7
 800b628:	608b      	str	r3, [r1, #8]
 800b62a:	f1b8 0f00 	cmp.w	r8, #0
 800b62e:	dd9c      	ble.n	800b56a <__sflush_r+0x1a>
 800b630:	6a21      	ldr	r1, [r4, #32]
 800b632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b634:	4643      	mov	r3, r8
 800b636:	463a      	mov	r2, r7
 800b638:	4628      	mov	r0, r5
 800b63a:	47b0      	blx	r6
 800b63c:	2800      	cmp	r0, #0
 800b63e:	dc06      	bgt.n	800b64e <__sflush_r+0xfe>
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	e78e      	b.n	800b56c <__sflush_r+0x1c>
 800b64e:	4407      	add	r7, r0
 800b650:	eba8 0800 	sub.w	r8, r8, r0
 800b654:	e7e9      	b.n	800b62a <__sflush_r+0xda>
 800b656:	bf00      	nop
 800b658:	20400001 	.word	0x20400001

0800b65c <_fflush_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	690b      	ldr	r3, [r1, #16]
 800b660:	4605      	mov	r5, r0
 800b662:	460c      	mov	r4, r1
 800b664:	b913      	cbnz	r3, 800b66c <_fflush_r+0x10>
 800b666:	2500      	movs	r5, #0
 800b668:	4628      	mov	r0, r5
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	b118      	cbz	r0, 800b676 <_fflush_r+0x1a>
 800b66e:	6983      	ldr	r3, [r0, #24]
 800b670:	b90b      	cbnz	r3, 800b676 <_fflush_r+0x1a>
 800b672:	f000 f887 	bl	800b784 <__sinit>
 800b676:	4b14      	ldr	r3, [pc, #80]	; (800b6c8 <_fflush_r+0x6c>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	d11b      	bne.n	800b6b4 <_fflush_r+0x58>
 800b67c:	686c      	ldr	r4, [r5, #4]
 800b67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0ef      	beq.n	800b666 <_fflush_r+0xa>
 800b686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b688:	07d0      	lsls	r0, r2, #31
 800b68a:	d404      	bmi.n	800b696 <_fflush_r+0x3a>
 800b68c:	0599      	lsls	r1, r3, #22
 800b68e:	d402      	bmi.n	800b696 <_fflush_r+0x3a>
 800b690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b692:	f000 f93a 	bl	800b90a <__retarget_lock_acquire_recursive>
 800b696:	4628      	mov	r0, r5
 800b698:	4621      	mov	r1, r4
 800b69a:	f7ff ff59 	bl	800b550 <__sflush_r>
 800b69e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6a0:	07da      	lsls	r2, r3, #31
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	d4e0      	bmi.n	800b668 <_fflush_r+0xc>
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	059b      	lsls	r3, r3, #22
 800b6aa:	d4dd      	bmi.n	800b668 <_fflush_r+0xc>
 800b6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ae:	f000 f92d 	bl	800b90c <__retarget_lock_release_recursive>
 800b6b2:	e7d9      	b.n	800b668 <_fflush_r+0xc>
 800b6b4:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <_fflush_r+0x70>)
 800b6b6:	429c      	cmp	r4, r3
 800b6b8:	d101      	bne.n	800b6be <_fflush_r+0x62>
 800b6ba:	68ac      	ldr	r4, [r5, #8]
 800b6bc:	e7df      	b.n	800b67e <_fflush_r+0x22>
 800b6be:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <_fflush_r+0x74>)
 800b6c0:	429c      	cmp	r4, r3
 800b6c2:	bf08      	it	eq
 800b6c4:	68ec      	ldreq	r4, [r5, #12]
 800b6c6:	e7da      	b.n	800b67e <_fflush_r+0x22>
 800b6c8:	0800f6e8 	.word	0x0800f6e8
 800b6cc:	0800f708 	.word	0x0800f708
 800b6d0:	0800f6c8 	.word	0x0800f6c8

0800b6d4 <std>:
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	b510      	push	{r4, lr}
 800b6d8:	4604      	mov	r4, r0
 800b6da:	e9c0 3300 	strd	r3, r3, [r0]
 800b6de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6e2:	6083      	str	r3, [r0, #8]
 800b6e4:	8181      	strh	r1, [r0, #12]
 800b6e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b6e8:	81c2      	strh	r2, [r0, #14]
 800b6ea:	6183      	str	r3, [r0, #24]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	2208      	movs	r2, #8
 800b6f0:	305c      	adds	r0, #92	; 0x5c
 800b6f2:	f000 f9a9 	bl	800ba48 <memset>
 800b6f6:	4b05      	ldr	r3, [pc, #20]	; (800b70c <std+0x38>)
 800b6f8:	6263      	str	r3, [r4, #36]	; 0x24
 800b6fa:	4b05      	ldr	r3, [pc, #20]	; (800b710 <std+0x3c>)
 800b6fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6fe:	4b05      	ldr	r3, [pc, #20]	; (800b714 <std+0x40>)
 800b700:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <std+0x44>)
 800b704:	6224      	str	r4, [r4, #32]
 800b706:	6323      	str	r3, [r4, #48]	; 0x30
 800b708:	bd10      	pop	{r4, pc}
 800b70a:	bf00      	nop
 800b70c:	0800bd95 	.word	0x0800bd95
 800b710:	0800bdb7 	.word	0x0800bdb7
 800b714:	0800bdef 	.word	0x0800bdef
 800b718:	0800be13 	.word	0x0800be13

0800b71c <_cleanup_r>:
 800b71c:	4901      	ldr	r1, [pc, #4]	; (800b724 <_cleanup_r+0x8>)
 800b71e:	f000 b8af 	b.w	800b880 <_fwalk_reent>
 800b722:	bf00      	nop
 800b724:	0800b65d 	.word	0x0800b65d

0800b728 <__sfmoreglue>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	2268      	movs	r2, #104	; 0x68
 800b72c:	1e4d      	subs	r5, r1, #1
 800b72e:	4355      	muls	r5, r2
 800b730:	460e      	mov	r6, r1
 800b732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b736:	f000 f9fb 	bl	800bb30 <_malloc_r>
 800b73a:	4604      	mov	r4, r0
 800b73c:	b140      	cbz	r0, 800b750 <__sfmoreglue+0x28>
 800b73e:	2100      	movs	r1, #0
 800b740:	e9c0 1600 	strd	r1, r6, [r0]
 800b744:	300c      	adds	r0, #12
 800b746:	60a0      	str	r0, [r4, #8]
 800b748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b74c:	f000 f97c 	bl	800ba48 <memset>
 800b750:	4620      	mov	r0, r4
 800b752:	bd70      	pop	{r4, r5, r6, pc}

0800b754 <__sfp_lock_acquire>:
 800b754:	4801      	ldr	r0, [pc, #4]	; (800b75c <__sfp_lock_acquire+0x8>)
 800b756:	f000 b8d8 	b.w	800b90a <__retarget_lock_acquire_recursive>
 800b75a:	bf00      	nop
 800b75c:	20001757 	.word	0x20001757

0800b760 <__sfp_lock_release>:
 800b760:	4801      	ldr	r0, [pc, #4]	; (800b768 <__sfp_lock_release+0x8>)
 800b762:	f000 b8d3 	b.w	800b90c <__retarget_lock_release_recursive>
 800b766:	bf00      	nop
 800b768:	20001757 	.word	0x20001757

0800b76c <__sinit_lock_acquire>:
 800b76c:	4801      	ldr	r0, [pc, #4]	; (800b774 <__sinit_lock_acquire+0x8>)
 800b76e:	f000 b8cc 	b.w	800b90a <__retarget_lock_acquire_recursive>
 800b772:	bf00      	nop
 800b774:	20001758 	.word	0x20001758

0800b778 <__sinit_lock_release>:
 800b778:	4801      	ldr	r0, [pc, #4]	; (800b780 <__sinit_lock_release+0x8>)
 800b77a:	f000 b8c7 	b.w	800b90c <__retarget_lock_release_recursive>
 800b77e:	bf00      	nop
 800b780:	20001758 	.word	0x20001758

0800b784 <__sinit>:
 800b784:	b510      	push	{r4, lr}
 800b786:	4604      	mov	r4, r0
 800b788:	f7ff fff0 	bl	800b76c <__sinit_lock_acquire>
 800b78c:	69a3      	ldr	r3, [r4, #24]
 800b78e:	b11b      	cbz	r3, 800b798 <__sinit+0x14>
 800b790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b794:	f7ff bff0 	b.w	800b778 <__sinit_lock_release>
 800b798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b79c:	6523      	str	r3, [r4, #80]	; 0x50
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <__sinit+0x68>)
 800b7a0:	4a13      	ldr	r2, [pc, #76]	; (800b7f0 <__sinit+0x6c>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7a6:	42a3      	cmp	r3, r4
 800b7a8:	bf04      	itt	eq
 800b7aa:	2301      	moveq	r3, #1
 800b7ac:	61a3      	streq	r3, [r4, #24]
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f000 f820 	bl	800b7f4 <__sfp>
 800b7b4:	6060      	str	r0, [r4, #4]
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 f81c 	bl	800b7f4 <__sfp>
 800b7bc:	60a0      	str	r0, [r4, #8]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 f818 	bl	800b7f4 <__sfp>
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	60e0      	str	r0, [r4, #12]
 800b7c8:	2104      	movs	r1, #4
 800b7ca:	6860      	ldr	r0, [r4, #4]
 800b7cc:	f7ff ff82 	bl	800b6d4 <std>
 800b7d0:	68a0      	ldr	r0, [r4, #8]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	2109      	movs	r1, #9
 800b7d6:	f7ff ff7d 	bl	800b6d4 <std>
 800b7da:	68e0      	ldr	r0, [r4, #12]
 800b7dc:	2202      	movs	r2, #2
 800b7de:	2112      	movs	r1, #18
 800b7e0:	f7ff ff78 	bl	800b6d4 <std>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	61a3      	str	r3, [r4, #24]
 800b7e8:	e7d2      	b.n	800b790 <__sinit+0xc>
 800b7ea:	bf00      	nop
 800b7ec:	0800f728 	.word	0x0800f728
 800b7f0:	0800b71d 	.word	0x0800b71d

0800b7f4 <__sfp>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	f7ff ffac 	bl	800b754 <__sfp_lock_acquire>
 800b7fc:	4b1e      	ldr	r3, [pc, #120]	; (800b878 <__sfp+0x84>)
 800b7fe:	681e      	ldr	r6, [r3, #0]
 800b800:	69b3      	ldr	r3, [r6, #24]
 800b802:	b913      	cbnz	r3, 800b80a <__sfp+0x16>
 800b804:	4630      	mov	r0, r6
 800b806:	f7ff ffbd 	bl	800b784 <__sinit>
 800b80a:	3648      	adds	r6, #72	; 0x48
 800b80c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b810:	3b01      	subs	r3, #1
 800b812:	d503      	bpl.n	800b81c <__sfp+0x28>
 800b814:	6833      	ldr	r3, [r6, #0]
 800b816:	b30b      	cbz	r3, 800b85c <__sfp+0x68>
 800b818:	6836      	ldr	r6, [r6, #0]
 800b81a:	e7f7      	b.n	800b80c <__sfp+0x18>
 800b81c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b820:	b9d5      	cbnz	r5, 800b858 <__sfp+0x64>
 800b822:	4b16      	ldr	r3, [pc, #88]	; (800b87c <__sfp+0x88>)
 800b824:	60e3      	str	r3, [r4, #12]
 800b826:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b82a:	6665      	str	r5, [r4, #100]	; 0x64
 800b82c:	f000 f86c 	bl	800b908 <__retarget_lock_init_recursive>
 800b830:	f7ff ff96 	bl	800b760 <__sfp_lock_release>
 800b834:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b838:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b83c:	6025      	str	r5, [r4, #0]
 800b83e:	61a5      	str	r5, [r4, #24]
 800b840:	2208      	movs	r2, #8
 800b842:	4629      	mov	r1, r5
 800b844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b848:	f000 f8fe 	bl	800ba48 <memset>
 800b84c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b854:	4620      	mov	r0, r4
 800b856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b858:	3468      	adds	r4, #104	; 0x68
 800b85a:	e7d9      	b.n	800b810 <__sfp+0x1c>
 800b85c:	2104      	movs	r1, #4
 800b85e:	4638      	mov	r0, r7
 800b860:	f7ff ff62 	bl	800b728 <__sfmoreglue>
 800b864:	4604      	mov	r4, r0
 800b866:	6030      	str	r0, [r6, #0]
 800b868:	2800      	cmp	r0, #0
 800b86a:	d1d5      	bne.n	800b818 <__sfp+0x24>
 800b86c:	f7ff ff78 	bl	800b760 <__sfp_lock_release>
 800b870:	230c      	movs	r3, #12
 800b872:	603b      	str	r3, [r7, #0]
 800b874:	e7ee      	b.n	800b854 <__sfp+0x60>
 800b876:	bf00      	nop
 800b878:	0800f728 	.word	0x0800f728
 800b87c:	ffff0001 	.word	0xffff0001

0800b880 <_fwalk_reent>:
 800b880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b884:	4606      	mov	r6, r0
 800b886:	4688      	mov	r8, r1
 800b888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b88c:	2700      	movs	r7, #0
 800b88e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b892:	f1b9 0901 	subs.w	r9, r9, #1
 800b896:	d505      	bpl.n	800b8a4 <_fwalk_reent+0x24>
 800b898:	6824      	ldr	r4, [r4, #0]
 800b89a:	2c00      	cmp	r4, #0
 800b89c:	d1f7      	bne.n	800b88e <_fwalk_reent+0xe>
 800b89e:	4638      	mov	r0, r7
 800b8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a4:	89ab      	ldrh	r3, [r5, #12]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d907      	bls.n	800b8ba <_fwalk_reent+0x3a>
 800b8aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	d003      	beq.n	800b8ba <_fwalk_reent+0x3a>
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	47c0      	blx	r8
 800b8b8:	4307      	orrs	r7, r0
 800b8ba:	3568      	adds	r5, #104	; 0x68
 800b8bc:	e7e9      	b.n	800b892 <_fwalk_reent+0x12>
	...

0800b8c0 <__libc_init_array>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	4d0d      	ldr	r5, [pc, #52]	; (800b8f8 <__libc_init_array+0x38>)
 800b8c4:	4c0d      	ldr	r4, [pc, #52]	; (800b8fc <__libc_init_array+0x3c>)
 800b8c6:	1b64      	subs	r4, r4, r5
 800b8c8:	10a4      	asrs	r4, r4, #2
 800b8ca:	2600      	movs	r6, #0
 800b8cc:	42a6      	cmp	r6, r4
 800b8ce:	d109      	bne.n	800b8e4 <__libc_init_array+0x24>
 800b8d0:	4d0b      	ldr	r5, [pc, #44]	; (800b900 <__libc_init_array+0x40>)
 800b8d2:	4c0c      	ldr	r4, [pc, #48]	; (800b904 <__libc_init_array+0x44>)
 800b8d4:	f003 f852 	bl	800e97c <_init>
 800b8d8:	1b64      	subs	r4, r4, r5
 800b8da:	10a4      	asrs	r4, r4, #2
 800b8dc:	2600      	movs	r6, #0
 800b8de:	42a6      	cmp	r6, r4
 800b8e0:	d105      	bne.n	800b8ee <__libc_init_array+0x2e>
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}
 800b8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8e8:	4798      	blx	r3
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	e7ee      	b.n	800b8cc <__libc_init_array+0xc>
 800b8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f2:	4798      	blx	r3
 800b8f4:	3601      	adds	r6, #1
 800b8f6:	e7f2      	b.n	800b8de <__libc_init_array+0x1e>
 800b8f8:	0800f9fc 	.word	0x0800f9fc
 800b8fc:	0800f9fc 	.word	0x0800f9fc
 800b900:	0800f9fc 	.word	0x0800f9fc
 800b904:	0800fa00 	.word	0x0800fa00

0800b908 <__retarget_lock_init_recursive>:
 800b908:	4770      	bx	lr

0800b90a <__retarget_lock_acquire_recursive>:
 800b90a:	4770      	bx	lr

0800b90c <__retarget_lock_release_recursive>:
 800b90c:	4770      	bx	lr

0800b90e <__swhatbuf_r>:
 800b90e:	b570      	push	{r4, r5, r6, lr}
 800b910:	460e      	mov	r6, r1
 800b912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b916:	2900      	cmp	r1, #0
 800b918:	b096      	sub	sp, #88	; 0x58
 800b91a:	4614      	mov	r4, r2
 800b91c:	461d      	mov	r5, r3
 800b91e:	da08      	bge.n	800b932 <__swhatbuf_r+0x24>
 800b920:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	602a      	str	r2, [r5, #0]
 800b928:	061a      	lsls	r2, r3, #24
 800b92a:	d410      	bmi.n	800b94e <__swhatbuf_r+0x40>
 800b92c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b930:	e00e      	b.n	800b950 <__swhatbuf_r+0x42>
 800b932:	466a      	mov	r2, sp
 800b934:	f001 fa64 	bl	800ce00 <_fstat_r>
 800b938:	2800      	cmp	r0, #0
 800b93a:	dbf1      	blt.n	800b920 <__swhatbuf_r+0x12>
 800b93c:	9a01      	ldr	r2, [sp, #4]
 800b93e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b946:	425a      	negs	r2, r3
 800b948:	415a      	adcs	r2, r3
 800b94a:	602a      	str	r2, [r5, #0]
 800b94c:	e7ee      	b.n	800b92c <__swhatbuf_r+0x1e>
 800b94e:	2340      	movs	r3, #64	; 0x40
 800b950:	2000      	movs	r0, #0
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	b016      	add	sp, #88	; 0x58
 800b956:	bd70      	pop	{r4, r5, r6, pc}

0800b958 <__smakebuf_r>:
 800b958:	898b      	ldrh	r3, [r1, #12]
 800b95a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b95c:	079d      	lsls	r5, r3, #30
 800b95e:	4606      	mov	r6, r0
 800b960:	460c      	mov	r4, r1
 800b962:	d507      	bpl.n	800b974 <__smakebuf_r+0x1c>
 800b964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	2301      	movs	r3, #1
 800b96e:	6163      	str	r3, [r4, #20]
 800b970:	b002      	add	sp, #8
 800b972:	bd70      	pop	{r4, r5, r6, pc}
 800b974:	ab01      	add	r3, sp, #4
 800b976:	466a      	mov	r2, sp
 800b978:	f7ff ffc9 	bl	800b90e <__swhatbuf_r>
 800b97c:	9900      	ldr	r1, [sp, #0]
 800b97e:	4605      	mov	r5, r0
 800b980:	4630      	mov	r0, r6
 800b982:	f000 f8d5 	bl	800bb30 <_malloc_r>
 800b986:	b948      	cbnz	r0, 800b99c <__smakebuf_r+0x44>
 800b988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b98c:	059a      	lsls	r2, r3, #22
 800b98e:	d4ef      	bmi.n	800b970 <__smakebuf_r+0x18>
 800b990:	f023 0303 	bic.w	r3, r3, #3
 800b994:	f043 0302 	orr.w	r3, r3, #2
 800b998:	81a3      	strh	r3, [r4, #12]
 800b99a:	e7e3      	b.n	800b964 <__smakebuf_r+0xc>
 800b99c:	4b0d      	ldr	r3, [pc, #52]	; (800b9d4 <__smakebuf_r+0x7c>)
 800b99e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9a0:	89a3      	ldrh	r3, [r4, #12]
 800b9a2:	6020      	str	r0, [r4, #0]
 800b9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a8:	81a3      	strh	r3, [r4, #12]
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	6163      	str	r3, [r4, #20]
 800b9ae:	9b01      	ldr	r3, [sp, #4]
 800b9b0:	6120      	str	r0, [r4, #16]
 800b9b2:	b15b      	cbz	r3, 800b9cc <__smakebuf_r+0x74>
 800b9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f001 fda3 	bl	800d504 <_isatty_r>
 800b9be:	b128      	cbz	r0, 800b9cc <__smakebuf_r+0x74>
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	f023 0303 	bic.w	r3, r3, #3
 800b9c6:	f043 0301 	orr.w	r3, r3, #1
 800b9ca:	81a3      	strh	r3, [r4, #12]
 800b9cc:	89a0      	ldrh	r0, [r4, #12]
 800b9ce:	4305      	orrs	r5, r0
 800b9d0:	81a5      	strh	r5, [r4, #12]
 800b9d2:	e7cd      	b.n	800b970 <__smakebuf_r+0x18>
 800b9d4:	0800b71d 	.word	0x0800b71d

0800b9d8 <malloc>:
 800b9d8:	4b02      	ldr	r3, [pc, #8]	; (800b9e4 <malloc+0xc>)
 800b9da:	4601      	mov	r1, r0
 800b9dc:	6818      	ldr	r0, [r3, #0]
 800b9de:	f000 b8a7 	b.w	800bb30 <_malloc_r>
 800b9e2:	bf00      	nop
 800b9e4:	20000024 	.word	0x20000024

0800b9e8 <free>:
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <free+0xc>)
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	f000 b833 	b.w	800ba58 <_free_r>
 800b9f2:	bf00      	nop
 800b9f4:	20000024 	.word	0x20000024

0800b9f8 <memcpy>:
 800b9f8:	440a      	add	r2, r1
 800b9fa:	4291      	cmp	r1, r2
 800b9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba00:	d100      	bne.n	800ba04 <memcpy+0xc>
 800ba02:	4770      	bx	lr
 800ba04:	b510      	push	{r4, lr}
 800ba06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	d1f9      	bne.n	800ba06 <memcpy+0xe>
 800ba12:	bd10      	pop	{r4, pc}

0800ba14 <memmove>:
 800ba14:	4288      	cmp	r0, r1
 800ba16:	b510      	push	{r4, lr}
 800ba18:	eb01 0402 	add.w	r4, r1, r2
 800ba1c:	d902      	bls.n	800ba24 <memmove+0x10>
 800ba1e:	4284      	cmp	r4, r0
 800ba20:	4623      	mov	r3, r4
 800ba22:	d807      	bhi.n	800ba34 <memmove+0x20>
 800ba24:	1e43      	subs	r3, r0, #1
 800ba26:	42a1      	cmp	r1, r4
 800ba28:	d008      	beq.n	800ba3c <memmove+0x28>
 800ba2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba32:	e7f8      	b.n	800ba26 <memmove+0x12>
 800ba34:	4402      	add	r2, r0
 800ba36:	4601      	mov	r1, r0
 800ba38:	428a      	cmp	r2, r1
 800ba3a:	d100      	bne.n	800ba3e <memmove+0x2a>
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba46:	e7f7      	b.n	800ba38 <memmove+0x24>

0800ba48 <memset>:
 800ba48:	4402      	add	r2, r0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d100      	bne.n	800ba52 <memset+0xa>
 800ba50:	4770      	bx	lr
 800ba52:	f803 1b01 	strb.w	r1, [r3], #1
 800ba56:	e7f9      	b.n	800ba4c <memset+0x4>

0800ba58 <_free_r>:
 800ba58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba5a:	2900      	cmp	r1, #0
 800ba5c:	d044      	beq.n	800bae8 <_free_r+0x90>
 800ba5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba62:	9001      	str	r0, [sp, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f1a1 0404 	sub.w	r4, r1, #4
 800ba6a:	bfb8      	it	lt
 800ba6c:	18e4      	addlt	r4, r4, r3
 800ba6e:	f001 fd7d 	bl	800d56c <__malloc_lock>
 800ba72:	4a1e      	ldr	r2, [pc, #120]	; (800baec <_free_r+0x94>)
 800ba74:	9801      	ldr	r0, [sp, #4]
 800ba76:	6813      	ldr	r3, [r2, #0]
 800ba78:	b933      	cbnz	r3, 800ba88 <_free_r+0x30>
 800ba7a:	6063      	str	r3, [r4, #4]
 800ba7c:	6014      	str	r4, [r2, #0]
 800ba7e:	b003      	add	sp, #12
 800ba80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba84:	f001 bd78 	b.w	800d578 <__malloc_unlock>
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	d908      	bls.n	800ba9e <_free_r+0x46>
 800ba8c:	6825      	ldr	r5, [r4, #0]
 800ba8e:	1961      	adds	r1, r4, r5
 800ba90:	428b      	cmp	r3, r1
 800ba92:	bf01      	itttt	eq
 800ba94:	6819      	ldreq	r1, [r3, #0]
 800ba96:	685b      	ldreq	r3, [r3, #4]
 800ba98:	1949      	addeq	r1, r1, r5
 800ba9a:	6021      	streq	r1, [r4, #0]
 800ba9c:	e7ed      	b.n	800ba7a <_free_r+0x22>
 800ba9e:	461a      	mov	r2, r3
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	b10b      	cbz	r3, 800baa8 <_free_r+0x50>
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d9fa      	bls.n	800ba9e <_free_r+0x46>
 800baa8:	6811      	ldr	r1, [r2, #0]
 800baaa:	1855      	adds	r5, r2, r1
 800baac:	42a5      	cmp	r5, r4
 800baae:	d10b      	bne.n	800bac8 <_free_r+0x70>
 800bab0:	6824      	ldr	r4, [r4, #0]
 800bab2:	4421      	add	r1, r4
 800bab4:	1854      	adds	r4, r2, r1
 800bab6:	42a3      	cmp	r3, r4
 800bab8:	6011      	str	r1, [r2, #0]
 800baba:	d1e0      	bne.n	800ba7e <_free_r+0x26>
 800babc:	681c      	ldr	r4, [r3, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	6053      	str	r3, [r2, #4]
 800bac2:	4421      	add	r1, r4
 800bac4:	6011      	str	r1, [r2, #0]
 800bac6:	e7da      	b.n	800ba7e <_free_r+0x26>
 800bac8:	d902      	bls.n	800bad0 <_free_r+0x78>
 800baca:	230c      	movs	r3, #12
 800bacc:	6003      	str	r3, [r0, #0]
 800bace:	e7d6      	b.n	800ba7e <_free_r+0x26>
 800bad0:	6825      	ldr	r5, [r4, #0]
 800bad2:	1961      	adds	r1, r4, r5
 800bad4:	428b      	cmp	r3, r1
 800bad6:	bf04      	itt	eq
 800bad8:	6819      	ldreq	r1, [r3, #0]
 800bada:	685b      	ldreq	r3, [r3, #4]
 800badc:	6063      	str	r3, [r4, #4]
 800bade:	bf04      	itt	eq
 800bae0:	1949      	addeq	r1, r1, r5
 800bae2:	6021      	streq	r1, [r4, #0]
 800bae4:	6054      	str	r4, [r2, #4]
 800bae6:	e7ca      	b.n	800ba7e <_free_r+0x26>
 800bae8:	b003      	add	sp, #12
 800baea:	bd30      	pop	{r4, r5, pc}
 800baec:	2000175c 	.word	0x2000175c

0800baf0 <sbrk_aligned>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	4e0e      	ldr	r6, [pc, #56]	; (800bb2c <sbrk_aligned+0x3c>)
 800baf4:	460c      	mov	r4, r1
 800baf6:	6831      	ldr	r1, [r6, #0]
 800baf8:	4605      	mov	r5, r0
 800bafa:	b911      	cbnz	r1, 800bb02 <sbrk_aligned+0x12>
 800bafc:	f000 f91a 	bl	800bd34 <_sbrk_r>
 800bb00:	6030      	str	r0, [r6, #0]
 800bb02:	4621      	mov	r1, r4
 800bb04:	4628      	mov	r0, r5
 800bb06:	f000 f915 	bl	800bd34 <_sbrk_r>
 800bb0a:	1c43      	adds	r3, r0, #1
 800bb0c:	d00a      	beq.n	800bb24 <sbrk_aligned+0x34>
 800bb0e:	1cc4      	adds	r4, r0, #3
 800bb10:	f024 0403 	bic.w	r4, r4, #3
 800bb14:	42a0      	cmp	r0, r4
 800bb16:	d007      	beq.n	800bb28 <sbrk_aligned+0x38>
 800bb18:	1a21      	subs	r1, r4, r0
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f000 f90a 	bl	800bd34 <_sbrk_r>
 800bb20:	3001      	adds	r0, #1
 800bb22:	d101      	bne.n	800bb28 <sbrk_aligned+0x38>
 800bb24:	f04f 34ff 	mov.w	r4, #4294967295
 800bb28:	4620      	mov	r0, r4
 800bb2a:	bd70      	pop	{r4, r5, r6, pc}
 800bb2c:	20001760 	.word	0x20001760

0800bb30 <_malloc_r>:
 800bb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	1ccd      	adds	r5, r1, #3
 800bb36:	f025 0503 	bic.w	r5, r5, #3
 800bb3a:	3508      	adds	r5, #8
 800bb3c:	2d0c      	cmp	r5, #12
 800bb3e:	bf38      	it	cc
 800bb40:	250c      	movcc	r5, #12
 800bb42:	2d00      	cmp	r5, #0
 800bb44:	4607      	mov	r7, r0
 800bb46:	db01      	blt.n	800bb4c <_malloc_r+0x1c>
 800bb48:	42a9      	cmp	r1, r5
 800bb4a:	d905      	bls.n	800bb58 <_malloc_r+0x28>
 800bb4c:	230c      	movs	r3, #12
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	2600      	movs	r6, #0
 800bb52:	4630      	mov	r0, r6
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb58:	4e2e      	ldr	r6, [pc, #184]	; (800bc14 <_malloc_r+0xe4>)
 800bb5a:	f001 fd07 	bl	800d56c <__malloc_lock>
 800bb5e:	6833      	ldr	r3, [r6, #0]
 800bb60:	461c      	mov	r4, r3
 800bb62:	bb34      	cbnz	r4, 800bbb2 <_malloc_r+0x82>
 800bb64:	4629      	mov	r1, r5
 800bb66:	4638      	mov	r0, r7
 800bb68:	f7ff ffc2 	bl	800baf0 <sbrk_aligned>
 800bb6c:	1c43      	adds	r3, r0, #1
 800bb6e:	4604      	mov	r4, r0
 800bb70:	d14d      	bne.n	800bc0e <_malloc_r+0xde>
 800bb72:	6834      	ldr	r4, [r6, #0]
 800bb74:	4626      	mov	r6, r4
 800bb76:	2e00      	cmp	r6, #0
 800bb78:	d140      	bne.n	800bbfc <_malloc_r+0xcc>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	4631      	mov	r1, r6
 800bb7e:	4638      	mov	r0, r7
 800bb80:	eb04 0803 	add.w	r8, r4, r3
 800bb84:	f000 f8d6 	bl	800bd34 <_sbrk_r>
 800bb88:	4580      	cmp	r8, r0
 800bb8a:	d13a      	bne.n	800bc02 <_malloc_r+0xd2>
 800bb8c:	6821      	ldr	r1, [r4, #0]
 800bb8e:	3503      	adds	r5, #3
 800bb90:	1a6d      	subs	r5, r5, r1
 800bb92:	f025 0503 	bic.w	r5, r5, #3
 800bb96:	3508      	adds	r5, #8
 800bb98:	2d0c      	cmp	r5, #12
 800bb9a:	bf38      	it	cc
 800bb9c:	250c      	movcc	r5, #12
 800bb9e:	4629      	mov	r1, r5
 800bba0:	4638      	mov	r0, r7
 800bba2:	f7ff ffa5 	bl	800baf0 <sbrk_aligned>
 800bba6:	3001      	adds	r0, #1
 800bba8:	d02b      	beq.n	800bc02 <_malloc_r+0xd2>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	442b      	add	r3, r5
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	e00e      	b.n	800bbd0 <_malloc_r+0xa0>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	1b52      	subs	r2, r2, r5
 800bbb6:	d41e      	bmi.n	800bbf6 <_malloc_r+0xc6>
 800bbb8:	2a0b      	cmp	r2, #11
 800bbba:	d916      	bls.n	800bbea <_malloc_r+0xba>
 800bbbc:	1961      	adds	r1, r4, r5
 800bbbe:	42a3      	cmp	r3, r4
 800bbc0:	6025      	str	r5, [r4, #0]
 800bbc2:	bf18      	it	ne
 800bbc4:	6059      	strne	r1, [r3, #4]
 800bbc6:	6863      	ldr	r3, [r4, #4]
 800bbc8:	bf08      	it	eq
 800bbca:	6031      	streq	r1, [r6, #0]
 800bbcc:	5162      	str	r2, [r4, r5]
 800bbce:	604b      	str	r3, [r1, #4]
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	f104 060b 	add.w	r6, r4, #11
 800bbd6:	f001 fccf 	bl	800d578 <__malloc_unlock>
 800bbda:	f026 0607 	bic.w	r6, r6, #7
 800bbde:	1d23      	adds	r3, r4, #4
 800bbe0:	1af2      	subs	r2, r6, r3
 800bbe2:	d0b6      	beq.n	800bb52 <_malloc_r+0x22>
 800bbe4:	1b9b      	subs	r3, r3, r6
 800bbe6:	50a3      	str	r3, [r4, r2]
 800bbe8:	e7b3      	b.n	800bb52 <_malloc_r+0x22>
 800bbea:	6862      	ldr	r2, [r4, #4]
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	bf0c      	ite	eq
 800bbf0:	6032      	streq	r2, [r6, #0]
 800bbf2:	605a      	strne	r2, [r3, #4]
 800bbf4:	e7ec      	b.n	800bbd0 <_malloc_r+0xa0>
 800bbf6:	4623      	mov	r3, r4
 800bbf8:	6864      	ldr	r4, [r4, #4]
 800bbfa:	e7b2      	b.n	800bb62 <_malloc_r+0x32>
 800bbfc:	4634      	mov	r4, r6
 800bbfe:	6876      	ldr	r6, [r6, #4]
 800bc00:	e7b9      	b.n	800bb76 <_malloc_r+0x46>
 800bc02:	230c      	movs	r3, #12
 800bc04:	603b      	str	r3, [r7, #0]
 800bc06:	4638      	mov	r0, r7
 800bc08:	f001 fcb6 	bl	800d578 <__malloc_unlock>
 800bc0c:	e7a1      	b.n	800bb52 <_malloc_r+0x22>
 800bc0e:	6025      	str	r5, [r4, #0]
 800bc10:	e7de      	b.n	800bbd0 <_malloc_r+0xa0>
 800bc12:	bf00      	nop
 800bc14:	2000175c 	.word	0x2000175c

0800bc18 <iprintf>:
 800bc18:	b40f      	push	{r0, r1, r2, r3}
 800bc1a:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <iprintf+0x2c>)
 800bc1c:	b513      	push	{r0, r1, r4, lr}
 800bc1e:	681c      	ldr	r4, [r3, #0]
 800bc20:	b124      	cbz	r4, 800bc2c <iprintf+0x14>
 800bc22:	69a3      	ldr	r3, [r4, #24]
 800bc24:	b913      	cbnz	r3, 800bc2c <iprintf+0x14>
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7ff fdac 	bl	800b784 <__sinit>
 800bc2c:	ab05      	add	r3, sp, #20
 800bc2e:	9a04      	ldr	r2, [sp, #16]
 800bc30:	68a1      	ldr	r1, [r4, #8]
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	4620      	mov	r0, r4
 800bc36:	f002 fb31 	bl	800e29c <_vfiprintf_r>
 800bc3a:	b002      	add	sp, #8
 800bc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc40:	b004      	add	sp, #16
 800bc42:	4770      	bx	lr
 800bc44:	20000024 	.word	0x20000024

0800bc48 <_puts_r>:
 800bc48:	b570      	push	{r4, r5, r6, lr}
 800bc4a:	460e      	mov	r6, r1
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	b118      	cbz	r0, 800bc58 <_puts_r+0x10>
 800bc50:	6983      	ldr	r3, [r0, #24]
 800bc52:	b90b      	cbnz	r3, 800bc58 <_puts_r+0x10>
 800bc54:	f7ff fd96 	bl	800b784 <__sinit>
 800bc58:	69ab      	ldr	r3, [r5, #24]
 800bc5a:	68ac      	ldr	r4, [r5, #8]
 800bc5c:	b913      	cbnz	r3, 800bc64 <_puts_r+0x1c>
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f7ff fd90 	bl	800b784 <__sinit>
 800bc64:	4b2c      	ldr	r3, [pc, #176]	; (800bd18 <_puts_r+0xd0>)
 800bc66:	429c      	cmp	r4, r3
 800bc68:	d120      	bne.n	800bcac <_puts_r+0x64>
 800bc6a:	686c      	ldr	r4, [r5, #4]
 800bc6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc6e:	07db      	lsls	r3, r3, #31
 800bc70:	d405      	bmi.n	800bc7e <_puts_r+0x36>
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	0598      	lsls	r0, r3, #22
 800bc76:	d402      	bmi.n	800bc7e <_puts_r+0x36>
 800bc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc7a:	f7ff fe46 	bl	800b90a <__retarget_lock_acquire_recursive>
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	0719      	lsls	r1, r3, #28
 800bc82:	d51d      	bpl.n	800bcc0 <_puts_r+0x78>
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	b1db      	cbz	r3, 800bcc0 <_puts_r+0x78>
 800bc88:	3e01      	subs	r6, #1
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc90:	3b01      	subs	r3, #1
 800bc92:	60a3      	str	r3, [r4, #8]
 800bc94:	bb39      	cbnz	r1, 800bce6 <_puts_r+0x9e>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	da38      	bge.n	800bd0c <_puts_r+0xc4>
 800bc9a:	4622      	mov	r2, r4
 800bc9c:	210a      	movs	r1, #10
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f000 ffcc 	bl	800cc3c <__swbuf_r>
 800bca4:	3001      	adds	r0, #1
 800bca6:	d011      	beq.n	800bccc <_puts_r+0x84>
 800bca8:	250a      	movs	r5, #10
 800bcaa:	e011      	b.n	800bcd0 <_puts_r+0x88>
 800bcac:	4b1b      	ldr	r3, [pc, #108]	; (800bd1c <_puts_r+0xd4>)
 800bcae:	429c      	cmp	r4, r3
 800bcb0:	d101      	bne.n	800bcb6 <_puts_r+0x6e>
 800bcb2:	68ac      	ldr	r4, [r5, #8]
 800bcb4:	e7da      	b.n	800bc6c <_puts_r+0x24>
 800bcb6:	4b1a      	ldr	r3, [pc, #104]	; (800bd20 <_puts_r+0xd8>)
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	bf08      	it	eq
 800bcbc:	68ec      	ldreq	r4, [r5, #12]
 800bcbe:	e7d5      	b.n	800bc6c <_puts_r+0x24>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f001 f81e 	bl	800cd04 <__swsetup_r>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d0dd      	beq.n	800bc88 <_puts_r+0x40>
 800bccc:	f04f 35ff 	mov.w	r5, #4294967295
 800bcd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcd2:	07da      	lsls	r2, r3, #31
 800bcd4:	d405      	bmi.n	800bce2 <_puts_r+0x9a>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	059b      	lsls	r3, r3, #22
 800bcda:	d402      	bmi.n	800bce2 <_puts_r+0x9a>
 800bcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcde:	f7ff fe15 	bl	800b90c <__retarget_lock_release_recursive>
 800bce2:	4628      	mov	r0, r5
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da04      	bge.n	800bcf4 <_puts_r+0xac>
 800bcea:	69a2      	ldr	r2, [r4, #24]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	dc06      	bgt.n	800bcfe <_puts_r+0xb6>
 800bcf0:	290a      	cmp	r1, #10
 800bcf2:	d004      	beq.n	800bcfe <_puts_r+0xb6>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	6022      	str	r2, [r4, #0]
 800bcfa:	7019      	strb	r1, [r3, #0]
 800bcfc:	e7c5      	b.n	800bc8a <_puts_r+0x42>
 800bcfe:	4622      	mov	r2, r4
 800bd00:	4628      	mov	r0, r5
 800bd02:	f000 ff9b 	bl	800cc3c <__swbuf_r>
 800bd06:	3001      	adds	r0, #1
 800bd08:	d1bf      	bne.n	800bc8a <_puts_r+0x42>
 800bd0a:	e7df      	b.n	800bccc <_puts_r+0x84>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	250a      	movs	r5, #10
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	6022      	str	r2, [r4, #0]
 800bd14:	701d      	strb	r5, [r3, #0]
 800bd16:	e7db      	b.n	800bcd0 <_puts_r+0x88>
 800bd18:	0800f6e8 	.word	0x0800f6e8
 800bd1c:	0800f708 	.word	0x0800f708
 800bd20:	0800f6c8 	.word	0x0800f6c8

0800bd24 <puts>:
 800bd24:	4b02      	ldr	r3, [pc, #8]	; (800bd30 <puts+0xc>)
 800bd26:	4601      	mov	r1, r0
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	f7ff bf8d 	b.w	800bc48 <_puts_r>
 800bd2e:	bf00      	nop
 800bd30:	20000024 	.word	0x20000024

0800bd34 <_sbrk_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d06      	ldr	r5, [pc, #24]	; (800bd50 <_sbrk_r+0x1c>)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	602b      	str	r3, [r5, #0]
 800bd40:	f7f9 f8a2 	bl	8004e88 <_sbrk>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_sbrk_r+0x1a>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_sbrk_r+0x1a>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	20001764 	.word	0x20001764

0800bd54 <siprintf>:
 800bd54:	b40e      	push	{r1, r2, r3}
 800bd56:	b500      	push	{lr}
 800bd58:	b09c      	sub	sp, #112	; 0x70
 800bd5a:	ab1d      	add	r3, sp, #116	; 0x74
 800bd5c:	9002      	str	r0, [sp, #8]
 800bd5e:	9006      	str	r0, [sp, #24]
 800bd60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd64:	4809      	ldr	r0, [pc, #36]	; (800bd8c <siprintf+0x38>)
 800bd66:	9107      	str	r1, [sp, #28]
 800bd68:	9104      	str	r1, [sp, #16]
 800bd6a:	4909      	ldr	r1, [pc, #36]	; (800bd90 <siprintf+0x3c>)
 800bd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd70:	9105      	str	r1, [sp, #20]
 800bd72:	6800      	ldr	r0, [r0, #0]
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	a902      	add	r1, sp, #8
 800bd78:	f002 f966 	bl	800e048 <_svfiprintf_r>
 800bd7c:	9b02      	ldr	r3, [sp, #8]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	b01c      	add	sp, #112	; 0x70
 800bd84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd88:	b003      	add	sp, #12
 800bd8a:	4770      	bx	lr
 800bd8c:	20000024 	.word	0x20000024
 800bd90:	ffff0208 	.word	0xffff0208

0800bd94 <__sread>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	460c      	mov	r4, r1
 800bd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9c:	f002 fd42 	bl	800e824 <_read_r>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	bfab      	itete	ge
 800bda4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bda6:	89a3      	ldrhlt	r3, [r4, #12]
 800bda8:	181b      	addge	r3, r3, r0
 800bdaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdae:	bfac      	ite	ge
 800bdb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdb2:	81a3      	strhlt	r3, [r4, #12]
 800bdb4:	bd10      	pop	{r4, pc}

0800bdb6 <__swrite>:
 800bdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdba:	461f      	mov	r7, r3
 800bdbc:	898b      	ldrh	r3, [r1, #12]
 800bdbe:	05db      	lsls	r3, r3, #23
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	d505      	bpl.n	800bdd4 <__swrite+0x1e>
 800bdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdcc:	2302      	movs	r3, #2
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f001 fba8 	bl	800d524 <_lseek_r>
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	4632      	mov	r2, r6
 800bde2:	463b      	mov	r3, r7
 800bde4:	4628      	mov	r0, r5
 800bde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdea:	f000 bf79 	b.w	800cce0 <_write_r>

0800bdee <__sseek>:
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf6:	f001 fb95 	bl	800d524 <_lseek_r>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	bf15      	itete	ne
 800be00:	6560      	strne	r0, [r4, #84]	; 0x54
 800be02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be0a:	81a3      	strheq	r3, [r4, #12]
 800be0c:	bf18      	it	ne
 800be0e:	81a3      	strhne	r3, [r4, #12]
 800be10:	bd10      	pop	{r4, pc}

0800be12 <__sclose>:
 800be12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be16:	f000 bfe3 	b.w	800cde0 <_close_r>

0800be1a <strchr>:
 800be1a:	b2c9      	uxtb	r1, r1
 800be1c:	4603      	mov	r3, r0
 800be1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be22:	b11a      	cbz	r2, 800be2c <strchr+0x12>
 800be24:	428a      	cmp	r2, r1
 800be26:	d1f9      	bne.n	800be1c <strchr+0x2>
 800be28:	4618      	mov	r0, r3
 800be2a:	4770      	bx	lr
 800be2c:	2900      	cmp	r1, #0
 800be2e:	bf18      	it	ne
 800be30:	2300      	movne	r3, #0
 800be32:	e7f9      	b.n	800be28 <strchr+0xe>

0800be34 <strncmp>:
 800be34:	b510      	push	{r4, lr}
 800be36:	b17a      	cbz	r2, 800be58 <strncmp+0x24>
 800be38:	4603      	mov	r3, r0
 800be3a:	3901      	subs	r1, #1
 800be3c:	1884      	adds	r4, r0, r2
 800be3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be46:	4290      	cmp	r0, r2
 800be48:	d101      	bne.n	800be4e <strncmp+0x1a>
 800be4a:	42a3      	cmp	r3, r4
 800be4c:	d101      	bne.n	800be52 <strncmp+0x1e>
 800be4e:	1a80      	subs	r0, r0, r2
 800be50:	bd10      	pop	{r4, pc}
 800be52:	2800      	cmp	r0, #0
 800be54:	d1f3      	bne.n	800be3e <strncmp+0xa>
 800be56:	e7fa      	b.n	800be4e <strncmp+0x1a>
 800be58:	4610      	mov	r0, r2
 800be5a:	e7f9      	b.n	800be50 <strncmp+0x1c>

0800be5c <strstr>:
 800be5c:	780a      	ldrb	r2, [r1, #0]
 800be5e:	b570      	push	{r4, r5, r6, lr}
 800be60:	b96a      	cbnz	r2, 800be7e <strstr+0x22>
 800be62:	bd70      	pop	{r4, r5, r6, pc}
 800be64:	429a      	cmp	r2, r3
 800be66:	d109      	bne.n	800be7c <strstr+0x20>
 800be68:	460c      	mov	r4, r1
 800be6a:	4605      	mov	r5, r0
 800be6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0f6      	beq.n	800be62 <strstr+0x6>
 800be74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800be78:	429e      	cmp	r6, r3
 800be7a:	d0f7      	beq.n	800be6c <strstr+0x10>
 800be7c:	3001      	adds	r0, #1
 800be7e:	7803      	ldrb	r3, [r0, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1ef      	bne.n	800be64 <strstr+0x8>
 800be84:	4618      	mov	r0, r3
 800be86:	e7ec      	b.n	800be62 <strstr+0x6>

0800be88 <sulp>:
 800be88:	b570      	push	{r4, r5, r6, lr}
 800be8a:	4604      	mov	r4, r0
 800be8c:	460d      	mov	r5, r1
 800be8e:	ec45 4b10 	vmov	d0, r4, r5
 800be92:	4616      	mov	r6, r2
 800be94:	f001 fee8 	bl	800dc68 <__ulp>
 800be98:	ec51 0b10 	vmov	r0, r1, d0
 800be9c:	b17e      	cbz	r6, 800bebe <sulp+0x36>
 800be9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dd09      	ble.n	800bebe <sulp+0x36>
 800beaa:	051b      	lsls	r3, r3, #20
 800beac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800beb0:	2400      	movs	r4, #0
 800beb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800beb6:	4622      	mov	r2, r4
 800beb8:	462b      	mov	r3, r5
 800beba:	f7f4 fb75 	bl	80005a8 <__aeabi_dmul>
 800bebe:	bd70      	pop	{r4, r5, r6, pc}

0800bec0 <_strtod_l>:
 800bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	ed2d 8b02 	vpush	{d8}
 800bec8:	b09d      	sub	sp, #116	; 0x74
 800beca:	461f      	mov	r7, r3
 800becc:	2300      	movs	r3, #0
 800bece:	9318      	str	r3, [sp, #96]	; 0x60
 800bed0:	4ba2      	ldr	r3, [pc, #648]	; (800c15c <_strtod_l+0x29c>)
 800bed2:	9213      	str	r2, [sp, #76]	; 0x4c
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	9305      	str	r3, [sp, #20]
 800bed8:	4604      	mov	r4, r0
 800beda:	4618      	mov	r0, r3
 800bedc:	4688      	mov	r8, r1
 800bede:	f7f4 f94f 	bl	8000180 <strlen>
 800bee2:	f04f 0a00 	mov.w	sl, #0
 800bee6:	4605      	mov	r5, r0
 800bee8:	f04f 0b00 	mov.w	fp, #0
 800beec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bef2:	781a      	ldrb	r2, [r3, #0]
 800bef4:	2a2b      	cmp	r2, #43	; 0x2b
 800bef6:	d04e      	beq.n	800bf96 <_strtod_l+0xd6>
 800bef8:	d83b      	bhi.n	800bf72 <_strtod_l+0xb2>
 800befa:	2a0d      	cmp	r2, #13
 800befc:	d834      	bhi.n	800bf68 <_strtod_l+0xa8>
 800befe:	2a08      	cmp	r2, #8
 800bf00:	d834      	bhi.n	800bf6c <_strtod_l+0xac>
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d03e      	beq.n	800bf84 <_strtod_l+0xc4>
 800bf06:	2300      	movs	r3, #0
 800bf08:	930a      	str	r3, [sp, #40]	; 0x28
 800bf0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bf0c:	7833      	ldrb	r3, [r6, #0]
 800bf0e:	2b30      	cmp	r3, #48	; 0x30
 800bf10:	f040 80b0 	bne.w	800c074 <_strtod_l+0x1b4>
 800bf14:	7873      	ldrb	r3, [r6, #1]
 800bf16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf1a:	2b58      	cmp	r3, #88	; 0x58
 800bf1c:	d168      	bne.n	800bff0 <_strtod_l+0x130>
 800bf1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	ab18      	add	r3, sp, #96	; 0x60
 800bf24:	9702      	str	r7, [sp, #8]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4a8d      	ldr	r2, [pc, #564]	; (800c160 <_strtod_l+0x2a0>)
 800bf2a:	ab19      	add	r3, sp, #100	; 0x64
 800bf2c:	a917      	add	r1, sp, #92	; 0x5c
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 ffe0 	bl	800cef4 <__gethex>
 800bf34:	f010 0707 	ands.w	r7, r0, #7
 800bf38:	4605      	mov	r5, r0
 800bf3a:	d005      	beq.n	800bf48 <_strtod_l+0x88>
 800bf3c:	2f06      	cmp	r7, #6
 800bf3e:	d12c      	bne.n	800bf9a <_strtod_l+0xda>
 800bf40:	3601      	adds	r6, #1
 800bf42:	2300      	movs	r3, #0
 800bf44:	9617      	str	r6, [sp, #92]	; 0x5c
 800bf46:	930a      	str	r3, [sp, #40]	; 0x28
 800bf48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f040 8590 	bne.w	800ca70 <_strtod_l+0xbb0>
 800bf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf52:	b1eb      	cbz	r3, 800bf90 <_strtod_l+0xd0>
 800bf54:	4652      	mov	r2, sl
 800bf56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf5a:	ec43 2b10 	vmov	d0, r2, r3
 800bf5e:	b01d      	add	sp, #116	; 0x74
 800bf60:	ecbd 8b02 	vpop	{d8}
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	2a20      	cmp	r2, #32
 800bf6a:	d1cc      	bne.n	800bf06 <_strtod_l+0x46>
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf70:	e7be      	b.n	800bef0 <_strtod_l+0x30>
 800bf72:	2a2d      	cmp	r2, #45	; 0x2d
 800bf74:	d1c7      	bne.n	800bf06 <_strtod_l+0x46>
 800bf76:	2201      	movs	r2, #1
 800bf78:	920a      	str	r2, [sp, #40]	; 0x28
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf7e:	785b      	ldrb	r3, [r3, #1]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1c2      	bne.n	800bf0a <_strtod_l+0x4a>
 800bf84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f040 856e 	bne.w	800ca6c <_strtod_l+0xbac>
 800bf90:	4652      	mov	r2, sl
 800bf92:	465b      	mov	r3, fp
 800bf94:	e7e1      	b.n	800bf5a <_strtod_l+0x9a>
 800bf96:	2200      	movs	r2, #0
 800bf98:	e7ee      	b.n	800bf78 <_strtod_l+0xb8>
 800bf9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf9c:	b13a      	cbz	r2, 800bfae <_strtod_l+0xee>
 800bf9e:	2135      	movs	r1, #53	; 0x35
 800bfa0:	a81a      	add	r0, sp, #104	; 0x68
 800bfa2:	f001 ff6c 	bl	800de7e <__copybits>
 800bfa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f001 fb2b 	bl	800d604 <_Bfree>
 800bfae:	3f01      	subs	r7, #1
 800bfb0:	2f04      	cmp	r7, #4
 800bfb2:	d806      	bhi.n	800bfc2 <_strtod_l+0x102>
 800bfb4:	e8df f007 	tbb	[pc, r7]
 800bfb8:	1714030a 	.word	0x1714030a
 800bfbc:	0a          	.byte	0x0a
 800bfbd:	00          	.byte	0x00
 800bfbe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bfc2:	0728      	lsls	r0, r5, #28
 800bfc4:	d5c0      	bpl.n	800bf48 <_strtod_l+0x88>
 800bfc6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bfca:	e7bd      	b.n	800bf48 <_strtod_l+0x88>
 800bfcc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bfd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bfd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bfda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bfde:	e7f0      	b.n	800bfc2 <_strtod_l+0x102>
 800bfe0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c164 <_strtod_l+0x2a4>
 800bfe4:	e7ed      	b.n	800bfc2 <_strtod_l+0x102>
 800bfe6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bfea:	f04f 3aff 	mov.w	sl, #4294967295
 800bfee:	e7e8      	b.n	800bfc2 <_strtod_l+0x102>
 800bff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bff2:	1c5a      	adds	r2, r3, #1
 800bff4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bff6:	785b      	ldrb	r3, [r3, #1]
 800bff8:	2b30      	cmp	r3, #48	; 0x30
 800bffa:	d0f9      	beq.n	800bff0 <_strtod_l+0x130>
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d0a3      	beq.n	800bf48 <_strtod_l+0x88>
 800c000:	2301      	movs	r3, #1
 800c002:	f04f 0900 	mov.w	r9, #0
 800c006:	9304      	str	r3, [sp, #16]
 800c008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c00a:	9308      	str	r3, [sp, #32]
 800c00c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c010:	464f      	mov	r7, r9
 800c012:	220a      	movs	r2, #10
 800c014:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c016:	7806      	ldrb	r6, [r0, #0]
 800c018:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c01c:	b2d9      	uxtb	r1, r3
 800c01e:	2909      	cmp	r1, #9
 800c020:	d92a      	bls.n	800c078 <_strtod_l+0x1b8>
 800c022:	9905      	ldr	r1, [sp, #20]
 800c024:	462a      	mov	r2, r5
 800c026:	f7ff ff05 	bl	800be34 <strncmp>
 800c02a:	b398      	cbz	r0, 800c094 <_strtod_l+0x1d4>
 800c02c:	2000      	movs	r0, #0
 800c02e:	4632      	mov	r2, r6
 800c030:	463d      	mov	r5, r7
 800c032:	9005      	str	r0, [sp, #20]
 800c034:	4603      	mov	r3, r0
 800c036:	2a65      	cmp	r2, #101	; 0x65
 800c038:	d001      	beq.n	800c03e <_strtod_l+0x17e>
 800c03a:	2a45      	cmp	r2, #69	; 0x45
 800c03c:	d118      	bne.n	800c070 <_strtod_l+0x1b0>
 800c03e:	b91d      	cbnz	r5, 800c048 <_strtod_l+0x188>
 800c040:	9a04      	ldr	r2, [sp, #16]
 800c042:	4302      	orrs	r2, r0
 800c044:	d09e      	beq.n	800bf84 <_strtod_l+0xc4>
 800c046:	2500      	movs	r5, #0
 800c048:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c04c:	f108 0201 	add.w	r2, r8, #1
 800c050:	9217      	str	r2, [sp, #92]	; 0x5c
 800c052:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c056:	2a2b      	cmp	r2, #43	; 0x2b
 800c058:	d075      	beq.n	800c146 <_strtod_l+0x286>
 800c05a:	2a2d      	cmp	r2, #45	; 0x2d
 800c05c:	d07b      	beq.n	800c156 <_strtod_l+0x296>
 800c05e:	f04f 0c00 	mov.w	ip, #0
 800c062:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c066:	2909      	cmp	r1, #9
 800c068:	f240 8082 	bls.w	800c170 <_strtod_l+0x2b0>
 800c06c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c070:	2600      	movs	r6, #0
 800c072:	e09d      	b.n	800c1b0 <_strtod_l+0x2f0>
 800c074:	2300      	movs	r3, #0
 800c076:	e7c4      	b.n	800c002 <_strtod_l+0x142>
 800c078:	2f08      	cmp	r7, #8
 800c07a:	bfd8      	it	le
 800c07c:	9907      	ldrle	r1, [sp, #28]
 800c07e:	f100 0001 	add.w	r0, r0, #1
 800c082:	bfda      	itte	le
 800c084:	fb02 3301 	mlale	r3, r2, r1, r3
 800c088:	9307      	strle	r3, [sp, #28]
 800c08a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c08e:	3701      	adds	r7, #1
 800c090:	9017      	str	r0, [sp, #92]	; 0x5c
 800c092:	e7bf      	b.n	800c014 <_strtod_l+0x154>
 800c094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c096:	195a      	adds	r2, r3, r5
 800c098:	9217      	str	r2, [sp, #92]	; 0x5c
 800c09a:	5d5a      	ldrb	r2, [r3, r5]
 800c09c:	2f00      	cmp	r7, #0
 800c09e:	d037      	beq.n	800c110 <_strtod_l+0x250>
 800c0a0:	9005      	str	r0, [sp, #20]
 800c0a2:	463d      	mov	r5, r7
 800c0a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c0a8:	2b09      	cmp	r3, #9
 800c0aa:	d912      	bls.n	800c0d2 <_strtod_l+0x212>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e7c2      	b.n	800c036 <_strtod_l+0x176>
 800c0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0b6:	785a      	ldrb	r2, [r3, #1]
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	2a30      	cmp	r2, #48	; 0x30
 800c0bc:	d0f8      	beq.n	800c0b0 <_strtod_l+0x1f0>
 800c0be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c0c2:	2b08      	cmp	r3, #8
 800c0c4:	f200 84d9 	bhi.w	800ca7a <_strtod_l+0xbba>
 800c0c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0ca:	9005      	str	r0, [sp, #20]
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	9308      	str	r3, [sp, #32]
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	3a30      	subs	r2, #48	; 0x30
 800c0d4:	f100 0301 	add.w	r3, r0, #1
 800c0d8:	d014      	beq.n	800c104 <_strtod_l+0x244>
 800c0da:	9905      	ldr	r1, [sp, #20]
 800c0dc:	4419      	add	r1, r3
 800c0de:	9105      	str	r1, [sp, #20]
 800c0e0:	462b      	mov	r3, r5
 800c0e2:	eb00 0e05 	add.w	lr, r0, r5
 800c0e6:	210a      	movs	r1, #10
 800c0e8:	4573      	cmp	r3, lr
 800c0ea:	d113      	bne.n	800c114 <_strtod_l+0x254>
 800c0ec:	182b      	adds	r3, r5, r0
 800c0ee:	2b08      	cmp	r3, #8
 800c0f0:	f105 0501 	add.w	r5, r5, #1
 800c0f4:	4405      	add	r5, r0
 800c0f6:	dc1c      	bgt.n	800c132 <_strtod_l+0x272>
 800c0f8:	9907      	ldr	r1, [sp, #28]
 800c0fa:	230a      	movs	r3, #10
 800c0fc:	fb03 2301 	mla	r3, r3, r1, r2
 800c100:	9307      	str	r3, [sp, #28]
 800c102:	2300      	movs	r3, #0
 800c104:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c106:	1c51      	adds	r1, r2, #1
 800c108:	9117      	str	r1, [sp, #92]	; 0x5c
 800c10a:	7852      	ldrb	r2, [r2, #1]
 800c10c:	4618      	mov	r0, r3
 800c10e:	e7c9      	b.n	800c0a4 <_strtod_l+0x1e4>
 800c110:	4638      	mov	r0, r7
 800c112:	e7d2      	b.n	800c0ba <_strtod_l+0x1fa>
 800c114:	2b08      	cmp	r3, #8
 800c116:	dc04      	bgt.n	800c122 <_strtod_l+0x262>
 800c118:	9e07      	ldr	r6, [sp, #28]
 800c11a:	434e      	muls	r6, r1
 800c11c:	9607      	str	r6, [sp, #28]
 800c11e:	3301      	adds	r3, #1
 800c120:	e7e2      	b.n	800c0e8 <_strtod_l+0x228>
 800c122:	f103 0c01 	add.w	ip, r3, #1
 800c126:	f1bc 0f10 	cmp.w	ip, #16
 800c12a:	bfd8      	it	le
 800c12c:	fb01 f909 	mulle.w	r9, r1, r9
 800c130:	e7f5      	b.n	800c11e <_strtod_l+0x25e>
 800c132:	2d10      	cmp	r5, #16
 800c134:	bfdc      	itt	le
 800c136:	230a      	movle	r3, #10
 800c138:	fb03 2909 	mlale	r9, r3, r9, r2
 800c13c:	e7e1      	b.n	800c102 <_strtod_l+0x242>
 800c13e:	2300      	movs	r3, #0
 800c140:	9305      	str	r3, [sp, #20]
 800c142:	2301      	movs	r3, #1
 800c144:	e77c      	b.n	800c040 <_strtod_l+0x180>
 800c146:	f04f 0c00 	mov.w	ip, #0
 800c14a:	f108 0202 	add.w	r2, r8, #2
 800c14e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c150:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c154:	e785      	b.n	800c062 <_strtod_l+0x1a2>
 800c156:	f04f 0c01 	mov.w	ip, #1
 800c15a:	e7f6      	b.n	800c14a <_strtod_l+0x28a>
 800c15c:	0800f800 	.word	0x0800f800
 800c160:	0800f738 	.word	0x0800f738
 800c164:	7ff00000 	.word	0x7ff00000
 800c168:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c16a:	1c51      	adds	r1, r2, #1
 800c16c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c16e:	7852      	ldrb	r2, [r2, #1]
 800c170:	2a30      	cmp	r2, #48	; 0x30
 800c172:	d0f9      	beq.n	800c168 <_strtod_l+0x2a8>
 800c174:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c178:	2908      	cmp	r1, #8
 800c17a:	f63f af79 	bhi.w	800c070 <_strtod_l+0x1b0>
 800c17e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c182:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c184:	9206      	str	r2, [sp, #24]
 800c186:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c188:	1c51      	adds	r1, r2, #1
 800c18a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c18c:	7852      	ldrb	r2, [r2, #1]
 800c18e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c192:	2e09      	cmp	r6, #9
 800c194:	d937      	bls.n	800c206 <_strtod_l+0x346>
 800c196:	9e06      	ldr	r6, [sp, #24]
 800c198:	1b89      	subs	r1, r1, r6
 800c19a:	2908      	cmp	r1, #8
 800c19c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c1a0:	dc02      	bgt.n	800c1a8 <_strtod_l+0x2e8>
 800c1a2:	4576      	cmp	r6, lr
 800c1a4:	bfa8      	it	ge
 800c1a6:	4676      	movge	r6, lr
 800c1a8:	f1bc 0f00 	cmp.w	ip, #0
 800c1ac:	d000      	beq.n	800c1b0 <_strtod_l+0x2f0>
 800c1ae:	4276      	negs	r6, r6
 800c1b0:	2d00      	cmp	r5, #0
 800c1b2:	d14d      	bne.n	800c250 <_strtod_l+0x390>
 800c1b4:	9904      	ldr	r1, [sp, #16]
 800c1b6:	4301      	orrs	r1, r0
 800c1b8:	f47f aec6 	bne.w	800bf48 <_strtod_l+0x88>
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f47f aee1 	bne.w	800bf84 <_strtod_l+0xc4>
 800c1c2:	2a69      	cmp	r2, #105	; 0x69
 800c1c4:	d027      	beq.n	800c216 <_strtod_l+0x356>
 800c1c6:	dc24      	bgt.n	800c212 <_strtod_l+0x352>
 800c1c8:	2a49      	cmp	r2, #73	; 0x49
 800c1ca:	d024      	beq.n	800c216 <_strtod_l+0x356>
 800c1cc:	2a4e      	cmp	r2, #78	; 0x4e
 800c1ce:	f47f aed9 	bne.w	800bf84 <_strtod_l+0xc4>
 800c1d2:	499f      	ldr	r1, [pc, #636]	; (800c450 <_strtod_l+0x590>)
 800c1d4:	a817      	add	r0, sp, #92	; 0x5c
 800c1d6:	f001 f8e5 	bl	800d3a4 <__match>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	f43f aed2 	beq.w	800bf84 <_strtod_l+0xc4>
 800c1e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b28      	cmp	r3, #40	; 0x28
 800c1e6:	d12d      	bne.n	800c244 <_strtod_l+0x384>
 800c1e8:	499a      	ldr	r1, [pc, #616]	; (800c454 <_strtod_l+0x594>)
 800c1ea:	aa1a      	add	r2, sp, #104	; 0x68
 800c1ec:	a817      	add	r0, sp, #92	; 0x5c
 800c1ee:	f001 f8ed 	bl	800d3cc <__hexnan>
 800c1f2:	2805      	cmp	r0, #5
 800c1f4:	d126      	bne.n	800c244 <_strtod_l+0x384>
 800c1f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c1fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c200:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c204:	e6a0      	b.n	800bf48 <_strtod_l+0x88>
 800c206:	210a      	movs	r1, #10
 800c208:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c20c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c210:	e7b9      	b.n	800c186 <_strtod_l+0x2c6>
 800c212:	2a6e      	cmp	r2, #110	; 0x6e
 800c214:	e7db      	b.n	800c1ce <_strtod_l+0x30e>
 800c216:	4990      	ldr	r1, [pc, #576]	; (800c458 <_strtod_l+0x598>)
 800c218:	a817      	add	r0, sp, #92	; 0x5c
 800c21a:	f001 f8c3 	bl	800d3a4 <__match>
 800c21e:	2800      	cmp	r0, #0
 800c220:	f43f aeb0 	beq.w	800bf84 <_strtod_l+0xc4>
 800c224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c226:	498d      	ldr	r1, [pc, #564]	; (800c45c <_strtod_l+0x59c>)
 800c228:	3b01      	subs	r3, #1
 800c22a:	a817      	add	r0, sp, #92	; 0x5c
 800c22c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c22e:	f001 f8b9 	bl	800d3a4 <__match>
 800c232:	b910      	cbnz	r0, 800c23a <_strtod_l+0x37a>
 800c234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c236:	3301      	adds	r3, #1
 800c238:	9317      	str	r3, [sp, #92]	; 0x5c
 800c23a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c46c <_strtod_l+0x5ac>
 800c23e:	f04f 0a00 	mov.w	sl, #0
 800c242:	e681      	b.n	800bf48 <_strtod_l+0x88>
 800c244:	4886      	ldr	r0, [pc, #536]	; (800c460 <_strtod_l+0x5a0>)
 800c246:	f002 faff 	bl	800e848 <nan>
 800c24a:	ec5b ab10 	vmov	sl, fp, d0
 800c24e:	e67b      	b.n	800bf48 <_strtod_l+0x88>
 800c250:	9b05      	ldr	r3, [sp, #20]
 800c252:	9807      	ldr	r0, [sp, #28]
 800c254:	1af3      	subs	r3, r6, r3
 800c256:	2f00      	cmp	r7, #0
 800c258:	bf08      	it	eq
 800c25a:	462f      	moveq	r7, r5
 800c25c:	2d10      	cmp	r5, #16
 800c25e:	9306      	str	r3, [sp, #24]
 800c260:	46a8      	mov	r8, r5
 800c262:	bfa8      	it	ge
 800c264:	f04f 0810 	movge.w	r8, #16
 800c268:	f7f4 f924 	bl	80004b4 <__aeabi_ui2d>
 800c26c:	2d09      	cmp	r5, #9
 800c26e:	4682      	mov	sl, r0
 800c270:	468b      	mov	fp, r1
 800c272:	dd13      	ble.n	800c29c <_strtod_l+0x3dc>
 800c274:	4b7b      	ldr	r3, [pc, #492]	; (800c464 <_strtod_l+0x5a4>)
 800c276:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c27a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c27e:	f7f4 f993 	bl	80005a8 <__aeabi_dmul>
 800c282:	4682      	mov	sl, r0
 800c284:	4648      	mov	r0, r9
 800c286:	468b      	mov	fp, r1
 800c288:	f7f4 f914 	bl	80004b4 <__aeabi_ui2d>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4650      	mov	r0, sl
 800c292:	4659      	mov	r1, fp
 800c294:	f7f3 ffd2 	bl	800023c <__adddf3>
 800c298:	4682      	mov	sl, r0
 800c29a:	468b      	mov	fp, r1
 800c29c:	2d0f      	cmp	r5, #15
 800c29e:	dc38      	bgt.n	800c312 <_strtod_l+0x452>
 800c2a0:	9b06      	ldr	r3, [sp, #24]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f43f ae50 	beq.w	800bf48 <_strtod_l+0x88>
 800c2a8:	dd24      	ble.n	800c2f4 <_strtod_l+0x434>
 800c2aa:	2b16      	cmp	r3, #22
 800c2ac:	dc0b      	bgt.n	800c2c6 <_strtod_l+0x406>
 800c2ae:	496d      	ldr	r1, [pc, #436]	; (800c464 <_strtod_l+0x5a4>)
 800c2b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2b8:	4652      	mov	r2, sl
 800c2ba:	465b      	mov	r3, fp
 800c2bc:	f7f4 f974 	bl	80005a8 <__aeabi_dmul>
 800c2c0:	4682      	mov	sl, r0
 800c2c2:	468b      	mov	fp, r1
 800c2c4:	e640      	b.n	800bf48 <_strtod_l+0x88>
 800c2c6:	9a06      	ldr	r2, [sp, #24]
 800c2c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	db20      	blt.n	800c312 <_strtod_l+0x452>
 800c2d0:	4c64      	ldr	r4, [pc, #400]	; (800c464 <_strtod_l+0x5a4>)
 800c2d2:	f1c5 050f 	rsb	r5, r5, #15
 800c2d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c2da:	4652      	mov	r2, sl
 800c2dc:	465b      	mov	r3, fp
 800c2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2e2:	f7f4 f961 	bl	80005a8 <__aeabi_dmul>
 800c2e6:	9b06      	ldr	r3, [sp, #24]
 800c2e8:	1b5d      	subs	r5, r3, r5
 800c2ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c2ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c2f2:	e7e3      	b.n	800c2bc <_strtod_l+0x3fc>
 800c2f4:	9b06      	ldr	r3, [sp, #24]
 800c2f6:	3316      	adds	r3, #22
 800c2f8:	db0b      	blt.n	800c312 <_strtod_l+0x452>
 800c2fa:	9b05      	ldr	r3, [sp, #20]
 800c2fc:	1b9e      	subs	r6, r3, r6
 800c2fe:	4b59      	ldr	r3, [pc, #356]	; (800c464 <_strtod_l+0x5a4>)
 800c300:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c304:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c308:	4650      	mov	r0, sl
 800c30a:	4659      	mov	r1, fp
 800c30c:	f7f4 fa76 	bl	80007fc <__aeabi_ddiv>
 800c310:	e7d6      	b.n	800c2c0 <_strtod_l+0x400>
 800c312:	9b06      	ldr	r3, [sp, #24]
 800c314:	eba5 0808 	sub.w	r8, r5, r8
 800c318:	4498      	add	r8, r3
 800c31a:	f1b8 0f00 	cmp.w	r8, #0
 800c31e:	dd74      	ble.n	800c40a <_strtod_l+0x54a>
 800c320:	f018 030f 	ands.w	r3, r8, #15
 800c324:	d00a      	beq.n	800c33c <_strtod_l+0x47c>
 800c326:	494f      	ldr	r1, [pc, #316]	; (800c464 <_strtod_l+0x5a4>)
 800c328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c32c:	4652      	mov	r2, sl
 800c32e:	465b      	mov	r3, fp
 800c330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c334:	f7f4 f938 	bl	80005a8 <__aeabi_dmul>
 800c338:	4682      	mov	sl, r0
 800c33a:	468b      	mov	fp, r1
 800c33c:	f038 080f 	bics.w	r8, r8, #15
 800c340:	d04f      	beq.n	800c3e2 <_strtod_l+0x522>
 800c342:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c346:	dd22      	ble.n	800c38e <_strtod_l+0x4ce>
 800c348:	2500      	movs	r5, #0
 800c34a:	462e      	mov	r6, r5
 800c34c:	9507      	str	r5, [sp, #28]
 800c34e:	9505      	str	r5, [sp, #20]
 800c350:	2322      	movs	r3, #34	; 0x22
 800c352:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c46c <_strtod_l+0x5ac>
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	f04f 0a00 	mov.w	sl, #0
 800c35c:	9b07      	ldr	r3, [sp, #28]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f43f adf2 	beq.w	800bf48 <_strtod_l+0x88>
 800c364:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c366:	4620      	mov	r0, r4
 800c368:	f001 f94c 	bl	800d604 <_Bfree>
 800c36c:	9905      	ldr	r1, [sp, #20]
 800c36e:	4620      	mov	r0, r4
 800c370:	f001 f948 	bl	800d604 <_Bfree>
 800c374:	4631      	mov	r1, r6
 800c376:	4620      	mov	r0, r4
 800c378:	f001 f944 	bl	800d604 <_Bfree>
 800c37c:	9907      	ldr	r1, [sp, #28]
 800c37e:	4620      	mov	r0, r4
 800c380:	f001 f940 	bl	800d604 <_Bfree>
 800c384:	4629      	mov	r1, r5
 800c386:	4620      	mov	r0, r4
 800c388:	f001 f93c 	bl	800d604 <_Bfree>
 800c38c:	e5dc      	b.n	800bf48 <_strtod_l+0x88>
 800c38e:	4b36      	ldr	r3, [pc, #216]	; (800c468 <_strtod_l+0x5a8>)
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	2300      	movs	r3, #0
 800c394:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c398:	4650      	mov	r0, sl
 800c39a:	4659      	mov	r1, fp
 800c39c:	4699      	mov	r9, r3
 800c39e:	f1b8 0f01 	cmp.w	r8, #1
 800c3a2:	dc21      	bgt.n	800c3e8 <_strtod_l+0x528>
 800c3a4:	b10b      	cbz	r3, 800c3aa <_strtod_l+0x4ea>
 800c3a6:	4682      	mov	sl, r0
 800c3a8:	468b      	mov	fp, r1
 800c3aa:	4b2f      	ldr	r3, [pc, #188]	; (800c468 <_strtod_l+0x5a8>)
 800c3ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c3b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c3b4:	4652      	mov	r2, sl
 800c3b6:	465b      	mov	r3, fp
 800c3b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c3bc:	f7f4 f8f4 	bl	80005a8 <__aeabi_dmul>
 800c3c0:	4b2a      	ldr	r3, [pc, #168]	; (800c46c <_strtod_l+0x5ac>)
 800c3c2:	460a      	mov	r2, r1
 800c3c4:	400b      	ands	r3, r1
 800c3c6:	492a      	ldr	r1, [pc, #168]	; (800c470 <_strtod_l+0x5b0>)
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	4682      	mov	sl, r0
 800c3cc:	d8bc      	bhi.n	800c348 <_strtod_l+0x488>
 800c3ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c3d2:	428b      	cmp	r3, r1
 800c3d4:	bf86      	itte	hi
 800c3d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c474 <_strtod_l+0x5b4>
 800c3da:	f04f 3aff 	movhi.w	sl, #4294967295
 800c3de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	9304      	str	r3, [sp, #16]
 800c3e6:	e084      	b.n	800c4f2 <_strtod_l+0x632>
 800c3e8:	f018 0f01 	tst.w	r8, #1
 800c3ec:	d005      	beq.n	800c3fa <_strtod_l+0x53a>
 800c3ee:	9b04      	ldr	r3, [sp, #16]
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	f7f4 f8d8 	bl	80005a8 <__aeabi_dmul>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	9a04      	ldr	r2, [sp, #16]
 800c3fc:	3208      	adds	r2, #8
 800c3fe:	f109 0901 	add.w	r9, r9, #1
 800c402:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c406:	9204      	str	r2, [sp, #16]
 800c408:	e7c9      	b.n	800c39e <_strtod_l+0x4de>
 800c40a:	d0ea      	beq.n	800c3e2 <_strtod_l+0x522>
 800c40c:	f1c8 0800 	rsb	r8, r8, #0
 800c410:	f018 020f 	ands.w	r2, r8, #15
 800c414:	d00a      	beq.n	800c42c <_strtod_l+0x56c>
 800c416:	4b13      	ldr	r3, [pc, #76]	; (800c464 <_strtod_l+0x5a4>)
 800c418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c41c:	4650      	mov	r0, sl
 800c41e:	4659      	mov	r1, fp
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f7f4 f9ea 	bl	80007fc <__aeabi_ddiv>
 800c428:	4682      	mov	sl, r0
 800c42a:	468b      	mov	fp, r1
 800c42c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c430:	d0d7      	beq.n	800c3e2 <_strtod_l+0x522>
 800c432:	f1b8 0f1f 	cmp.w	r8, #31
 800c436:	dd1f      	ble.n	800c478 <_strtod_l+0x5b8>
 800c438:	2500      	movs	r5, #0
 800c43a:	462e      	mov	r6, r5
 800c43c:	9507      	str	r5, [sp, #28]
 800c43e:	9505      	str	r5, [sp, #20]
 800c440:	2322      	movs	r3, #34	; 0x22
 800c442:	f04f 0a00 	mov.w	sl, #0
 800c446:	f04f 0b00 	mov.w	fp, #0
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	e786      	b.n	800c35c <_strtod_l+0x49c>
 800c44e:	bf00      	nop
 800c450:	0800f735 	.word	0x0800f735
 800c454:	0800f74c 	.word	0x0800f74c
 800c458:	0800f72c 	.word	0x0800f72c
 800c45c:	0800f72f 	.word	0x0800f72f
 800c460:	0800f9f2 	.word	0x0800f9f2
 800c464:	0800f8b0 	.word	0x0800f8b0
 800c468:	0800f888 	.word	0x0800f888
 800c46c:	7ff00000 	.word	0x7ff00000
 800c470:	7ca00000 	.word	0x7ca00000
 800c474:	7fefffff 	.word	0x7fefffff
 800c478:	f018 0310 	ands.w	r3, r8, #16
 800c47c:	bf18      	it	ne
 800c47e:	236a      	movne	r3, #106	; 0x6a
 800c480:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c830 <_strtod_l+0x970>
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	4650      	mov	r0, sl
 800c488:	4659      	mov	r1, fp
 800c48a:	2300      	movs	r3, #0
 800c48c:	f018 0f01 	tst.w	r8, #1
 800c490:	d004      	beq.n	800c49c <_strtod_l+0x5dc>
 800c492:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c496:	f7f4 f887 	bl	80005a8 <__aeabi_dmul>
 800c49a:	2301      	movs	r3, #1
 800c49c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c4a0:	f109 0908 	add.w	r9, r9, #8
 800c4a4:	d1f2      	bne.n	800c48c <_strtod_l+0x5cc>
 800c4a6:	b10b      	cbz	r3, 800c4ac <_strtod_l+0x5ec>
 800c4a8:	4682      	mov	sl, r0
 800c4aa:	468b      	mov	fp, r1
 800c4ac:	9b04      	ldr	r3, [sp, #16]
 800c4ae:	b1c3      	cbz	r3, 800c4e2 <_strtod_l+0x622>
 800c4b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c4b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	4659      	mov	r1, fp
 800c4bc:	dd11      	ble.n	800c4e2 <_strtod_l+0x622>
 800c4be:	2b1f      	cmp	r3, #31
 800c4c0:	f340 8124 	ble.w	800c70c <_strtod_l+0x84c>
 800c4c4:	2b34      	cmp	r3, #52	; 0x34
 800c4c6:	bfde      	ittt	le
 800c4c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c4cc:	f04f 33ff 	movle.w	r3, #4294967295
 800c4d0:	fa03 f202 	lslle.w	r2, r3, r2
 800c4d4:	f04f 0a00 	mov.w	sl, #0
 800c4d8:	bfcc      	ite	gt
 800c4da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c4de:	ea02 0b01 	andle.w	fp, r2, r1
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4650      	mov	r0, sl
 800c4e8:	4659      	mov	r1, fp
 800c4ea:	f7f4 fac5 	bl	8000a78 <__aeabi_dcmpeq>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d1a2      	bne.n	800c438 <_strtod_l+0x578>
 800c4f2:	9b07      	ldr	r3, [sp, #28]
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	9908      	ldr	r1, [sp, #32]
 800c4f8:	462b      	mov	r3, r5
 800c4fa:	463a      	mov	r2, r7
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f001 f8e9 	bl	800d6d4 <__s2b>
 800c502:	9007      	str	r0, [sp, #28]
 800c504:	2800      	cmp	r0, #0
 800c506:	f43f af1f 	beq.w	800c348 <_strtod_l+0x488>
 800c50a:	9b05      	ldr	r3, [sp, #20]
 800c50c:	1b9e      	subs	r6, r3, r6
 800c50e:	9b06      	ldr	r3, [sp, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	bfb4      	ite	lt
 800c514:	4633      	movlt	r3, r6
 800c516:	2300      	movge	r3, #0
 800c518:	930c      	str	r3, [sp, #48]	; 0x30
 800c51a:	9b06      	ldr	r3, [sp, #24]
 800c51c:	2500      	movs	r5, #0
 800c51e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c522:	9312      	str	r3, [sp, #72]	; 0x48
 800c524:	462e      	mov	r6, r5
 800c526:	9b07      	ldr	r3, [sp, #28]
 800c528:	4620      	mov	r0, r4
 800c52a:	6859      	ldr	r1, [r3, #4]
 800c52c:	f001 f82a 	bl	800d584 <_Balloc>
 800c530:	9005      	str	r0, [sp, #20]
 800c532:	2800      	cmp	r0, #0
 800c534:	f43f af0c 	beq.w	800c350 <_strtod_l+0x490>
 800c538:	9b07      	ldr	r3, [sp, #28]
 800c53a:	691a      	ldr	r2, [r3, #16]
 800c53c:	3202      	adds	r2, #2
 800c53e:	f103 010c 	add.w	r1, r3, #12
 800c542:	0092      	lsls	r2, r2, #2
 800c544:	300c      	adds	r0, #12
 800c546:	f7ff fa57 	bl	800b9f8 <memcpy>
 800c54a:	ec4b ab10 	vmov	d0, sl, fp
 800c54e:	aa1a      	add	r2, sp, #104	; 0x68
 800c550:	a919      	add	r1, sp, #100	; 0x64
 800c552:	4620      	mov	r0, r4
 800c554:	f001 fc04 	bl	800dd60 <__d2b>
 800c558:	ec4b ab18 	vmov	d8, sl, fp
 800c55c:	9018      	str	r0, [sp, #96]	; 0x60
 800c55e:	2800      	cmp	r0, #0
 800c560:	f43f aef6 	beq.w	800c350 <_strtod_l+0x490>
 800c564:	2101      	movs	r1, #1
 800c566:	4620      	mov	r0, r4
 800c568:	f001 f94e 	bl	800d808 <__i2b>
 800c56c:	4606      	mov	r6, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	f43f aeee 	beq.w	800c350 <_strtod_l+0x490>
 800c574:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c576:	9904      	ldr	r1, [sp, #16]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bfab      	itete	ge
 800c57c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c57e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c580:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c582:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c586:	bfac      	ite	ge
 800c588:	eb03 0902 	addge.w	r9, r3, r2
 800c58c:	1ad7      	sublt	r7, r2, r3
 800c58e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c590:	eba3 0801 	sub.w	r8, r3, r1
 800c594:	4490      	add	r8, r2
 800c596:	4ba1      	ldr	r3, [pc, #644]	; (800c81c <_strtod_l+0x95c>)
 800c598:	f108 38ff 	add.w	r8, r8, #4294967295
 800c59c:	4598      	cmp	r8, r3
 800c59e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c5a2:	f280 80c7 	bge.w	800c734 <_strtod_l+0x874>
 800c5a6:	eba3 0308 	sub.w	r3, r3, r8
 800c5aa:	2b1f      	cmp	r3, #31
 800c5ac:	eba2 0203 	sub.w	r2, r2, r3
 800c5b0:	f04f 0101 	mov.w	r1, #1
 800c5b4:	f300 80b1 	bgt.w	800c71a <_strtod_l+0x85a>
 800c5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800c5bc:	930d      	str	r3, [sp, #52]	; 0x34
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9308      	str	r3, [sp, #32]
 800c5c2:	eb09 0802 	add.w	r8, r9, r2
 800c5c6:	9b04      	ldr	r3, [sp, #16]
 800c5c8:	45c1      	cmp	r9, r8
 800c5ca:	4417      	add	r7, r2
 800c5cc:	441f      	add	r7, r3
 800c5ce:	464b      	mov	r3, r9
 800c5d0:	bfa8      	it	ge
 800c5d2:	4643      	movge	r3, r8
 800c5d4:	42bb      	cmp	r3, r7
 800c5d6:	bfa8      	it	ge
 800c5d8:	463b      	movge	r3, r7
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	bfc2      	ittt	gt
 800c5de:	eba8 0803 	subgt.w	r8, r8, r3
 800c5e2:	1aff      	subgt	r7, r7, r3
 800c5e4:	eba9 0903 	subgt.w	r9, r9, r3
 800c5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dd17      	ble.n	800c61e <_strtod_l+0x75e>
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f001 f9c8 	bl	800d988 <__pow5mult>
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	f43f aea8 	beq.w	800c350 <_strtod_l+0x490>
 800c600:	4601      	mov	r1, r0
 800c602:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c604:	4620      	mov	r0, r4
 800c606:	f001 f915 	bl	800d834 <__multiply>
 800c60a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f43f ae9f 	beq.w	800c350 <_strtod_l+0x490>
 800c612:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c614:	4620      	mov	r0, r4
 800c616:	f000 fff5 	bl	800d604 <_Bfree>
 800c61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c61c:	9318      	str	r3, [sp, #96]	; 0x60
 800c61e:	f1b8 0f00 	cmp.w	r8, #0
 800c622:	f300 808c 	bgt.w	800c73e <_strtod_l+0x87e>
 800c626:	9b06      	ldr	r3, [sp, #24]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	dd08      	ble.n	800c63e <_strtod_l+0x77e>
 800c62c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c62e:	9905      	ldr	r1, [sp, #20]
 800c630:	4620      	mov	r0, r4
 800c632:	f001 f9a9 	bl	800d988 <__pow5mult>
 800c636:	9005      	str	r0, [sp, #20]
 800c638:	2800      	cmp	r0, #0
 800c63a:	f43f ae89 	beq.w	800c350 <_strtod_l+0x490>
 800c63e:	2f00      	cmp	r7, #0
 800c640:	dd08      	ble.n	800c654 <_strtod_l+0x794>
 800c642:	9905      	ldr	r1, [sp, #20]
 800c644:	463a      	mov	r2, r7
 800c646:	4620      	mov	r0, r4
 800c648:	f001 f9f8 	bl	800da3c <__lshift>
 800c64c:	9005      	str	r0, [sp, #20]
 800c64e:	2800      	cmp	r0, #0
 800c650:	f43f ae7e 	beq.w	800c350 <_strtod_l+0x490>
 800c654:	f1b9 0f00 	cmp.w	r9, #0
 800c658:	dd08      	ble.n	800c66c <_strtod_l+0x7ac>
 800c65a:	4631      	mov	r1, r6
 800c65c:	464a      	mov	r2, r9
 800c65e:	4620      	mov	r0, r4
 800c660:	f001 f9ec 	bl	800da3c <__lshift>
 800c664:	4606      	mov	r6, r0
 800c666:	2800      	cmp	r0, #0
 800c668:	f43f ae72 	beq.w	800c350 <_strtod_l+0x490>
 800c66c:	9a05      	ldr	r2, [sp, #20]
 800c66e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c670:	4620      	mov	r0, r4
 800c672:	f001 fa6f 	bl	800db54 <__mdiff>
 800c676:	4605      	mov	r5, r0
 800c678:	2800      	cmp	r0, #0
 800c67a:	f43f ae69 	beq.w	800c350 <_strtod_l+0x490>
 800c67e:	68c3      	ldr	r3, [r0, #12]
 800c680:	930b      	str	r3, [sp, #44]	; 0x2c
 800c682:	2300      	movs	r3, #0
 800c684:	60c3      	str	r3, [r0, #12]
 800c686:	4631      	mov	r1, r6
 800c688:	f001 fa48 	bl	800db1c <__mcmp>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	da60      	bge.n	800c752 <_strtod_l+0x892>
 800c690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c692:	ea53 030a 	orrs.w	r3, r3, sl
 800c696:	f040 8082 	bne.w	800c79e <_strtod_l+0x8de>
 800c69a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d17d      	bne.n	800c79e <_strtod_l+0x8de>
 800c6a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6a6:	0d1b      	lsrs	r3, r3, #20
 800c6a8:	051b      	lsls	r3, r3, #20
 800c6aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c6ae:	d976      	bls.n	800c79e <_strtod_l+0x8de>
 800c6b0:	696b      	ldr	r3, [r5, #20]
 800c6b2:	b913      	cbnz	r3, 800c6ba <_strtod_l+0x7fa>
 800c6b4:	692b      	ldr	r3, [r5, #16]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	dd71      	ble.n	800c79e <_strtod_l+0x8de>
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	2201      	movs	r2, #1
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f001 f9bc 	bl	800da3c <__lshift>
 800c6c4:	4631      	mov	r1, r6
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	f001 fa28 	bl	800db1c <__mcmp>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	dd66      	ble.n	800c79e <_strtod_l+0x8de>
 800c6d0:	9904      	ldr	r1, [sp, #16]
 800c6d2:	4a53      	ldr	r2, [pc, #332]	; (800c820 <_strtod_l+0x960>)
 800c6d4:	465b      	mov	r3, fp
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	f000 8081 	beq.w	800c7de <_strtod_l+0x91e>
 800c6dc:	ea02 010b 	and.w	r1, r2, fp
 800c6e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c6e4:	dc7b      	bgt.n	800c7de <_strtod_l+0x91e>
 800c6e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c6ea:	f77f aea9 	ble.w	800c440 <_strtod_l+0x580>
 800c6ee:	4b4d      	ldr	r3, [pc, #308]	; (800c824 <_strtod_l+0x964>)
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	4659      	mov	r1, fp
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f7f3 ff57 	bl	80005a8 <__aeabi_dmul>
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	4303      	orrs	r3, r0
 800c6fe:	bf08      	it	eq
 800c700:	2322      	moveq	r3, #34	; 0x22
 800c702:	4682      	mov	sl, r0
 800c704:	468b      	mov	fp, r1
 800c706:	bf08      	it	eq
 800c708:	6023      	streq	r3, [r4, #0]
 800c70a:	e62b      	b.n	800c364 <_strtod_l+0x4a4>
 800c70c:	f04f 32ff 	mov.w	r2, #4294967295
 800c710:	fa02 f303 	lsl.w	r3, r2, r3
 800c714:	ea03 0a0a 	and.w	sl, r3, sl
 800c718:	e6e3      	b.n	800c4e2 <_strtod_l+0x622>
 800c71a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c71e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c722:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c726:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c72a:	fa01 f308 	lsl.w	r3, r1, r8
 800c72e:	9308      	str	r3, [sp, #32]
 800c730:	910d      	str	r1, [sp, #52]	; 0x34
 800c732:	e746      	b.n	800c5c2 <_strtod_l+0x702>
 800c734:	2300      	movs	r3, #0
 800c736:	9308      	str	r3, [sp, #32]
 800c738:	2301      	movs	r3, #1
 800c73a:	930d      	str	r3, [sp, #52]	; 0x34
 800c73c:	e741      	b.n	800c5c2 <_strtod_l+0x702>
 800c73e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c740:	4642      	mov	r2, r8
 800c742:	4620      	mov	r0, r4
 800c744:	f001 f97a 	bl	800da3c <__lshift>
 800c748:	9018      	str	r0, [sp, #96]	; 0x60
 800c74a:	2800      	cmp	r0, #0
 800c74c:	f47f af6b 	bne.w	800c626 <_strtod_l+0x766>
 800c750:	e5fe      	b.n	800c350 <_strtod_l+0x490>
 800c752:	465f      	mov	r7, fp
 800c754:	d16e      	bne.n	800c834 <_strtod_l+0x974>
 800c756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c758:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c75c:	b342      	cbz	r2, 800c7b0 <_strtod_l+0x8f0>
 800c75e:	4a32      	ldr	r2, [pc, #200]	; (800c828 <_strtod_l+0x968>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d128      	bne.n	800c7b6 <_strtod_l+0x8f6>
 800c764:	9b04      	ldr	r3, [sp, #16]
 800c766:	4651      	mov	r1, sl
 800c768:	b1eb      	cbz	r3, 800c7a6 <_strtod_l+0x8e6>
 800c76a:	4b2d      	ldr	r3, [pc, #180]	; (800c820 <_strtod_l+0x960>)
 800c76c:	403b      	ands	r3, r7
 800c76e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c772:	f04f 32ff 	mov.w	r2, #4294967295
 800c776:	d819      	bhi.n	800c7ac <_strtod_l+0x8ec>
 800c778:	0d1b      	lsrs	r3, r3, #20
 800c77a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c77e:	fa02 f303 	lsl.w	r3, r2, r3
 800c782:	4299      	cmp	r1, r3
 800c784:	d117      	bne.n	800c7b6 <_strtod_l+0x8f6>
 800c786:	4b29      	ldr	r3, [pc, #164]	; (800c82c <_strtod_l+0x96c>)
 800c788:	429f      	cmp	r7, r3
 800c78a:	d102      	bne.n	800c792 <_strtod_l+0x8d2>
 800c78c:	3101      	adds	r1, #1
 800c78e:	f43f addf 	beq.w	800c350 <_strtod_l+0x490>
 800c792:	4b23      	ldr	r3, [pc, #140]	; (800c820 <_strtod_l+0x960>)
 800c794:	403b      	ands	r3, r7
 800c796:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c79a:	f04f 0a00 	mov.w	sl, #0
 800c79e:	9b04      	ldr	r3, [sp, #16]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1a4      	bne.n	800c6ee <_strtod_l+0x82e>
 800c7a4:	e5de      	b.n	800c364 <_strtod_l+0x4a4>
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7aa:	e7ea      	b.n	800c782 <_strtod_l+0x8c2>
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	e7e8      	b.n	800c782 <_strtod_l+0x8c2>
 800c7b0:	ea53 030a 	orrs.w	r3, r3, sl
 800c7b4:	d08c      	beq.n	800c6d0 <_strtod_l+0x810>
 800c7b6:	9b08      	ldr	r3, [sp, #32]
 800c7b8:	b1db      	cbz	r3, 800c7f2 <_strtod_l+0x932>
 800c7ba:	423b      	tst	r3, r7
 800c7bc:	d0ef      	beq.n	800c79e <_strtod_l+0x8de>
 800c7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7c0:	9a04      	ldr	r2, [sp, #16]
 800c7c2:	4650      	mov	r0, sl
 800c7c4:	4659      	mov	r1, fp
 800c7c6:	b1c3      	cbz	r3, 800c7fa <_strtod_l+0x93a>
 800c7c8:	f7ff fb5e 	bl	800be88 <sulp>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	ec51 0b18 	vmov	r0, r1, d8
 800c7d4:	f7f3 fd32 	bl	800023c <__adddf3>
 800c7d8:	4682      	mov	sl, r0
 800c7da:	468b      	mov	fp, r1
 800c7dc:	e7df      	b.n	800c79e <_strtod_l+0x8de>
 800c7de:	4013      	ands	r3, r2
 800c7e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c7e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c7e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c7ec:	f04f 3aff 	mov.w	sl, #4294967295
 800c7f0:	e7d5      	b.n	800c79e <_strtod_l+0x8de>
 800c7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7f4:	ea13 0f0a 	tst.w	r3, sl
 800c7f8:	e7e0      	b.n	800c7bc <_strtod_l+0x8fc>
 800c7fa:	f7ff fb45 	bl	800be88 <sulp>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	ec51 0b18 	vmov	r0, r1, d8
 800c806:	f7f3 fd17 	bl	8000238 <__aeabi_dsub>
 800c80a:	2200      	movs	r2, #0
 800c80c:	2300      	movs	r3, #0
 800c80e:	4682      	mov	sl, r0
 800c810:	468b      	mov	fp, r1
 800c812:	f7f4 f931 	bl	8000a78 <__aeabi_dcmpeq>
 800c816:	2800      	cmp	r0, #0
 800c818:	d0c1      	beq.n	800c79e <_strtod_l+0x8de>
 800c81a:	e611      	b.n	800c440 <_strtod_l+0x580>
 800c81c:	fffffc02 	.word	0xfffffc02
 800c820:	7ff00000 	.word	0x7ff00000
 800c824:	39500000 	.word	0x39500000
 800c828:	000fffff 	.word	0x000fffff
 800c82c:	7fefffff 	.word	0x7fefffff
 800c830:	0800f760 	.word	0x0800f760
 800c834:	4631      	mov	r1, r6
 800c836:	4628      	mov	r0, r5
 800c838:	f001 faee 	bl	800de18 <__ratio>
 800c83c:	ec59 8b10 	vmov	r8, r9, d0
 800c840:	ee10 0a10 	vmov	r0, s0
 800c844:	2200      	movs	r2, #0
 800c846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c84a:	4649      	mov	r1, r9
 800c84c:	f7f4 f928 	bl	8000aa0 <__aeabi_dcmple>
 800c850:	2800      	cmp	r0, #0
 800c852:	d07a      	beq.n	800c94a <_strtod_l+0xa8a>
 800c854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c856:	2b00      	cmp	r3, #0
 800c858:	d04a      	beq.n	800c8f0 <_strtod_l+0xa30>
 800c85a:	4b95      	ldr	r3, [pc, #596]	; (800cab0 <_strtod_l+0xbf0>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c862:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cab0 <_strtod_l+0xbf0>
 800c866:	f04f 0800 	mov.w	r8, #0
 800c86a:	4b92      	ldr	r3, [pc, #584]	; (800cab4 <_strtod_l+0xbf4>)
 800c86c:	403b      	ands	r3, r7
 800c86e:	930d      	str	r3, [sp, #52]	; 0x34
 800c870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c872:	4b91      	ldr	r3, [pc, #580]	; (800cab8 <_strtod_l+0xbf8>)
 800c874:	429a      	cmp	r2, r3
 800c876:	f040 80b0 	bne.w	800c9da <_strtod_l+0xb1a>
 800c87a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c87e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c882:	ec4b ab10 	vmov	d0, sl, fp
 800c886:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c88a:	f001 f9ed 	bl	800dc68 <__ulp>
 800c88e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c892:	ec53 2b10 	vmov	r2, r3, d0
 800c896:	f7f3 fe87 	bl	80005a8 <__aeabi_dmul>
 800c89a:	4652      	mov	r2, sl
 800c89c:	465b      	mov	r3, fp
 800c89e:	f7f3 fccd 	bl	800023c <__adddf3>
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4983      	ldr	r1, [pc, #524]	; (800cab4 <_strtod_l+0xbf4>)
 800c8a6:	4a85      	ldr	r2, [pc, #532]	; (800cabc <_strtod_l+0xbfc>)
 800c8a8:	4019      	ands	r1, r3
 800c8aa:	4291      	cmp	r1, r2
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	d960      	bls.n	800c972 <_strtod_l+0xab2>
 800c8b0:	ee18 3a90 	vmov	r3, s17
 800c8b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d104      	bne.n	800c8c6 <_strtod_l+0xa06>
 800c8bc:	ee18 3a10 	vmov	r3, s16
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	f43f ad45 	beq.w	800c350 <_strtod_l+0x490>
 800c8c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cac8 <_strtod_l+0xc08>
 800c8ca:	f04f 3aff 	mov.w	sl, #4294967295
 800c8ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 fe97 	bl	800d604 <_Bfree>
 800c8d6:	9905      	ldr	r1, [sp, #20]
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fe93 	bl	800d604 <_Bfree>
 800c8de:	4631      	mov	r1, r6
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fe8f 	bl	800d604 <_Bfree>
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f000 fe8b 	bl	800d604 <_Bfree>
 800c8ee:	e61a      	b.n	800c526 <_strtod_l+0x666>
 800c8f0:	f1ba 0f00 	cmp.w	sl, #0
 800c8f4:	d11b      	bne.n	800c92e <_strtod_l+0xa6e>
 800c8f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8fa:	b9f3      	cbnz	r3, 800c93a <_strtod_l+0xa7a>
 800c8fc:	4b6c      	ldr	r3, [pc, #432]	; (800cab0 <_strtod_l+0xbf0>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	f7f4 f8c2 	bl	8000a8c <__aeabi_dcmplt>
 800c908:	b9d0      	cbnz	r0, 800c940 <_strtod_l+0xa80>
 800c90a:	4640      	mov	r0, r8
 800c90c:	4649      	mov	r1, r9
 800c90e:	4b6c      	ldr	r3, [pc, #432]	; (800cac0 <_strtod_l+0xc00>)
 800c910:	2200      	movs	r2, #0
 800c912:	f7f3 fe49 	bl	80005a8 <__aeabi_dmul>
 800c916:	4680      	mov	r8, r0
 800c918:	4689      	mov	r9, r1
 800c91a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c91e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c922:	9315      	str	r3, [sp, #84]	; 0x54
 800c924:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c928:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c92c:	e79d      	b.n	800c86a <_strtod_l+0x9aa>
 800c92e:	f1ba 0f01 	cmp.w	sl, #1
 800c932:	d102      	bne.n	800c93a <_strtod_l+0xa7a>
 800c934:	2f00      	cmp	r7, #0
 800c936:	f43f ad83 	beq.w	800c440 <_strtod_l+0x580>
 800c93a:	4b62      	ldr	r3, [pc, #392]	; (800cac4 <_strtod_l+0xc04>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	e78e      	b.n	800c85e <_strtod_l+0x99e>
 800c940:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cac0 <_strtod_l+0xc00>
 800c944:	f04f 0800 	mov.w	r8, #0
 800c948:	e7e7      	b.n	800c91a <_strtod_l+0xa5a>
 800c94a:	4b5d      	ldr	r3, [pc, #372]	; (800cac0 <_strtod_l+0xc00>)
 800c94c:	4640      	mov	r0, r8
 800c94e:	4649      	mov	r1, r9
 800c950:	2200      	movs	r2, #0
 800c952:	f7f3 fe29 	bl	80005a8 <__aeabi_dmul>
 800c956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c958:	4680      	mov	r8, r0
 800c95a:	4689      	mov	r9, r1
 800c95c:	b933      	cbnz	r3, 800c96c <_strtod_l+0xaac>
 800c95e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c962:	900e      	str	r0, [sp, #56]	; 0x38
 800c964:	930f      	str	r3, [sp, #60]	; 0x3c
 800c966:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c96a:	e7dd      	b.n	800c928 <_strtod_l+0xa68>
 800c96c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c970:	e7f9      	b.n	800c966 <_strtod_l+0xaa6>
 800c972:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c976:	9b04      	ldr	r3, [sp, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1a8      	bne.n	800c8ce <_strtod_l+0xa0e>
 800c97c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c982:	0d1b      	lsrs	r3, r3, #20
 800c984:	051b      	lsls	r3, r3, #20
 800c986:	429a      	cmp	r2, r3
 800c988:	d1a1      	bne.n	800c8ce <_strtod_l+0xa0e>
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f4 f91b 	bl	8000bc8 <__aeabi_d2lz>
 800c992:	f7f3 fddb 	bl	800054c <__aeabi_l2d>
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	4640      	mov	r0, r8
 800c99c:	4649      	mov	r1, r9
 800c99e:	f7f3 fc4b 	bl	8000238 <__aeabi_dsub>
 800c9a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9a8:	ea43 030a 	orr.w	r3, r3, sl
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	4680      	mov	r8, r0
 800c9b0:	4689      	mov	r9, r1
 800c9b2:	d055      	beq.n	800ca60 <_strtod_l+0xba0>
 800c9b4:	a336      	add	r3, pc, #216	; (adr r3, 800ca90 <_strtod_l+0xbd0>)
 800c9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ba:	f7f4 f867 	bl	8000a8c <__aeabi_dcmplt>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	f47f acd0 	bne.w	800c364 <_strtod_l+0x4a4>
 800c9c4:	a334      	add	r3, pc, #208	; (adr r3, 800ca98 <_strtod_l+0xbd8>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f4 f87b 	bl	8000ac8 <__aeabi_dcmpgt>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	f43f af7b 	beq.w	800c8ce <_strtod_l+0xa0e>
 800c9d8:	e4c4      	b.n	800c364 <_strtod_l+0x4a4>
 800c9da:	9b04      	ldr	r3, [sp, #16]
 800c9dc:	b333      	cbz	r3, 800ca2c <_strtod_l+0xb6c>
 800c9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9e4:	d822      	bhi.n	800ca2c <_strtod_l+0xb6c>
 800c9e6:	a32e      	add	r3, pc, #184	; (adr r3, 800caa0 <_strtod_l+0xbe0>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	f7f4 f856 	bl	8000aa0 <__aeabi_dcmple>
 800c9f4:	b1a0      	cbz	r0, 800ca20 <_strtod_l+0xb60>
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	f7f4 f8ad 	bl	8000b58 <__aeabi_d2uiz>
 800c9fe:	2801      	cmp	r0, #1
 800ca00:	bf38      	it	cc
 800ca02:	2001      	movcc	r0, #1
 800ca04:	f7f3 fd56 	bl	80004b4 <__aeabi_ui2d>
 800ca08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca0a:	4680      	mov	r8, r0
 800ca0c:	4689      	mov	r9, r1
 800ca0e:	bb23      	cbnz	r3, 800ca5a <_strtod_l+0xb9a>
 800ca10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca14:	9010      	str	r0, [sp, #64]	; 0x40
 800ca16:	9311      	str	r3, [sp, #68]	; 0x44
 800ca18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ca20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca28:	1a9b      	subs	r3, r3, r2
 800ca2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca30:	eeb0 0a48 	vmov.f32	s0, s16
 800ca34:	eef0 0a68 	vmov.f32	s1, s17
 800ca38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca3c:	f001 f914 	bl	800dc68 <__ulp>
 800ca40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca44:	ec53 2b10 	vmov	r2, r3, d0
 800ca48:	f7f3 fdae 	bl	80005a8 <__aeabi_dmul>
 800ca4c:	ec53 2b18 	vmov	r2, r3, d8
 800ca50:	f7f3 fbf4 	bl	800023c <__adddf3>
 800ca54:	4682      	mov	sl, r0
 800ca56:	468b      	mov	fp, r1
 800ca58:	e78d      	b.n	800c976 <_strtod_l+0xab6>
 800ca5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ca5e:	e7db      	b.n	800ca18 <_strtod_l+0xb58>
 800ca60:	a311      	add	r3, pc, #68	; (adr r3, 800caa8 <_strtod_l+0xbe8>)
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	f7f4 f811 	bl	8000a8c <__aeabi_dcmplt>
 800ca6a:	e7b2      	b.n	800c9d2 <_strtod_l+0xb12>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	f7ff ba6b 	b.w	800bf50 <_strtod_l+0x90>
 800ca7a:	2a65      	cmp	r2, #101	; 0x65
 800ca7c:	f43f ab5f 	beq.w	800c13e <_strtod_l+0x27e>
 800ca80:	2a45      	cmp	r2, #69	; 0x45
 800ca82:	f43f ab5c 	beq.w	800c13e <_strtod_l+0x27e>
 800ca86:	2301      	movs	r3, #1
 800ca88:	f7ff bb94 	b.w	800c1b4 <_strtod_l+0x2f4>
 800ca8c:	f3af 8000 	nop.w
 800ca90:	94a03595 	.word	0x94a03595
 800ca94:	3fdfffff 	.word	0x3fdfffff
 800ca98:	35afe535 	.word	0x35afe535
 800ca9c:	3fe00000 	.word	0x3fe00000
 800caa0:	ffc00000 	.word	0xffc00000
 800caa4:	41dfffff 	.word	0x41dfffff
 800caa8:	94a03595 	.word	0x94a03595
 800caac:	3fcfffff 	.word	0x3fcfffff
 800cab0:	3ff00000 	.word	0x3ff00000
 800cab4:	7ff00000 	.word	0x7ff00000
 800cab8:	7fe00000 	.word	0x7fe00000
 800cabc:	7c9fffff 	.word	0x7c9fffff
 800cac0:	3fe00000 	.word	0x3fe00000
 800cac4:	bff00000 	.word	0xbff00000
 800cac8:	7fefffff 	.word	0x7fefffff

0800cacc <strtod>:
 800cacc:	460a      	mov	r2, r1
 800cace:	4601      	mov	r1, r0
 800cad0:	4802      	ldr	r0, [pc, #8]	; (800cadc <strtod+0x10>)
 800cad2:	4b03      	ldr	r3, [pc, #12]	; (800cae0 <strtod+0x14>)
 800cad4:	6800      	ldr	r0, [r0, #0]
 800cad6:	f7ff b9f3 	b.w	800bec0 <_strtod_l>
 800cada:	bf00      	nop
 800cadc:	20000024 	.word	0x20000024
 800cae0:	2000008c 	.word	0x2000008c

0800cae4 <_strtol_l.constprop.0>:
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caea:	d001      	beq.n	800caf0 <_strtol_l.constprop.0+0xc>
 800caec:	2b24      	cmp	r3, #36	; 0x24
 800caee:	d906      	bls.n	800cafe <_strtol_l.constprop.0+0x1a>
 800caf0:	f7fe fd28 	bl	800b544 <__errno>
 800caf4:	2316      	movs	r3, #22
 800caf6:	6003      	str	r3, [r0, #0]
 800caf8:	2000      	movs	r0, #0
 800cafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cbe4 <_strtol_l.constprop.0+0x100>
 800cb02:	460d      	mov	r5, r1
 800cb04:	462e      	mov	r6, r5
 800cb06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb0a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cb0e:	f017 0708 	ands.w	r7, r7, #8
 800cb12:	d1f7      	bne.n	800cb04 <_strtol_l.constprop.0+0x20>
 800cb14:	2c2d      	cmp	r4, #45	; 0x2d
 800cb16:	d132      	bne.n	800cb7e <_strtol_l.constprop.0+0x9a>
 800cb18:	782c      	ldrb	r4, [r5, #0]
 800cb1a:	2701      	movs	r7, #1
 800cb1c:	1cb5      	adds	r5, r6, #2
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d05b      	beq.n	800cbda <_strtol_l.constprop.0+0xf6>
 800cb22:	2b10      	cmp	r3, #16
 800cb24:	d109      	bne.n	800cb3a <_strtol_l.constprop.0+0x56>
 800cb26:	2c30      	cmp	r4, #48	; 0x30
 800cb28:	d107      	bne.n	800cb3a <_strtol_l.constprop.0+0x56>
 800cb2a:	782c      	ldrb	r4, [r5, #0]
 800cb2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb30:	2c58      	cmp	r4, #88	; 0x58
 800cb32:	d14d      	bne.n	800cbd0 <_strtol_l.constprop.0+0xec>
 800cb34:	786c      	ldrb	r4, [r5, #1]
 800cb36:	2310      	movs	r3, #16
 800cb38:	3502      	adds	r5, #2
 800cb3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb42:	f04f 0c00 	mov.w	ip, #0
 800cb46:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb4a:	4666      	mov	r6, ip
 800cb4c:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cb54:	f1be 0f09 	cmp.w	lr, #9
 800cb58:	d816      	bhi.n	800cb88 <_strtol_l.constprop.0+0xa4>
 800cb5a:	4674      	mov	r4, lr
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	dd24      	ble.n	800cbaa <_strtol_l.constprop.0+0xc6>
 800cb60:	f1bc 0f00 	cmp.w	ip, #0
 800cb64:	db1e      	blt.n	800cba4 <_strtol_l.constprop.0+0xc0>
 800cb66:	45b1      	cmp	r9, r6
 800cb68:	d31c      	bcc.n	800cba4 <_strtol_l.constprop.0+0xc0>
 800cb6a:	d101      	bne.n	800cb70 <_strtol_l.constprop.0+0x8c>
 800cb6c:	45a2      	cmp	sl, r4
 800cb6e:	db19      	blt.n	800cba4 <_strtol_l.constprop.0+0xc0>
 800cb70:	fb06 4603 	mla	r6, r6, r3, r4
 800cb74:	f04f 0c01 	mov.w	ip, #1
 800cb78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb7c:	e7e8      	b.n	800cb50 <_strtol_l.constprop.0+0x6c>
 800cb7e:	2c2b      	cmp	r4, #43	; 0x2b
 800cb80:	bf04      	itt	eq
 800cb82:	782c      	ldrbeq	r4, [r5, #0]
 800cb84:	1cb5      	addeq	r5, r6, #2
 800cb86:	e7ca      	b.n	800cb1e <_strtol_l.constprop.0+0x3a>
 800cb88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cb8c:	f1be 0f19 	cmp.w	lr, #25
 800cb90:	d801      	bhi.n	800cb96 <_strtol_l.constprop.0+0xb2>
 800cb92:	3c37      	subs	r4, #55	; 0x37
 800cb94:	e7e2      	b.n	800cb5c <_strtol_l.constprop.0+0x78>
 800cb96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cb9a:	f1be 0f19 	cmp.w	lr, #25
 800cb9e:	d804      	bhi.n	800cbaa <_strtol_l.constprop.0+0xc6>
 800cba0:	3c57      	subs	r4, #87	; 0x57
 800cba2:	e7db      	b.n	800cb5c <_strtol_l.constprop.0+0x78>
 800cba4:	f04f 3cff 	mov.w	ip, #4294967295
 800cba8:	e7e6      	b.n	800cb78 <_strtol_l.constprop.0+0x94>
 800cbaa:	f1bc 0f00 	cmp.w	ip, #0
 800cbae:	da05      	bge.n	800cbbc <_strtol_l.constprop.0+0xd8>
 800cbb0:	2322      	movs	r3, #34	; 0x22
 800cbb2:	6003      	str	r3, [r0, #0]
 800cbb4:	4646      	mov	r6, r8
 800cbb6:	b942      	cbnz	r2, 800cbca <_strtol_l.constprop.0+0xe6>
 800cbb8:	4630      	mov	r0, r6
 800cbba:	e79e      	b.n	800cafa <_strtol_l.constprop.0+0x16>
 800cbbc:	b107      	cbz	r7, 800cbc0 <_strtol_l.constprop.0+0xdc>
 800cbbe:	4276      	negs	r6, r6
 800cbc0:	2a00      	cmp	r2, #0
 800cbc2:	d0f9      	beq.n	800cbb8 <_strtol_l.constprop.0+0xd4>
 800cbc4:	f1bc 0f00 	cmp.w	ip, #0
 800cbc8:	d000      	beq.n	800cbcc <_strtol_l.constprop.0+0xe8>
 800cbca:	1e69      	subs	r1, r5, #1
 800cbcc:	6011      	str	r1, [r2, #0]
 800cbce:	e7f3      	b.n	800cbb8 <_strtol_l.constprop.0+0xd4>
 800cbd0:	2430      	movs	r4, #48	; 0x30
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1b1      	bne.n	800cb3a <_strtol_l.constprop.0+0x56>
 800cbd6:	2308      	movs	r3, #8
 800cbd8:	e7af      	b.n	800cb3a <_strtol_l.constprop.0+0x56>
 800cbda:	2c30      	cmp	r4, #48	; 0x30
 800cbdc:	d0a5      	beq.n	800cb2a <_strtol_l.constprop.0+0x46>
 800cbde:	230a      	movs	r3, #10
 800cbe0:	e7ab      	b.n	800cb3a <_strtol_l.constprop.0+0x56>
 800cbe2:	bf00      	nop
 800cbe4:	0800f5c5 	.word	0x0800f5c5

0800cbe8 <strtol>:
 800cbe8:	4613      	mov	r3, r2
 800cbea:	460a      	mov	r2, r1
 800cbec:	4601      	mov	r1, r0
 800cbee:	4802      	ldr	r0, [pc, #8]	; (800cbf8 <strtol+0x10>)
 800cbf0:	6800      	ldr	r0, [r0, #0]
 800cbf2:	f7ff bf77 	b.w	800cae4 <_strtol_l.constprop.0>
 800cbf6:	bf00      	nop
 800cbf8:	20000024 	.word	0x20000024

0800cbfc <_vsiprintf_r>:
 800cbfc:	b500      	push	{lr}
 800cbfe:	b09b      	sub	sp, #108	; 0x6c
 800cc00:	9100      	str	r1, [sp, #0]
 800cc02:	9104      	str	r1, [sp, #16]
 800cc04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc08:	9105      	str	r1, [sp, #20]
 800cc0a:	9102      	str	r1, [sp, #8]
 800cc0c:	4905      	ldr	r1, [pc, #20]	; (800cc24 <_vsiprintf_r+0x28>)
 800cc0e:	9103      	str	r1, [sp, #12]
 800cc10:	4669      	mov	r1, sp
 800cc12:	f001 fa19 	bl	800e048 <_svfiprintf_r>
 800cc16:	9b00      	ldr	r3, [sp, #0]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	b01b      	add	sp, #108	; 0x6c
 800cc1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc22:	bf00      	nop
 800cc24:	ffff0208 	.word	0xffff0208

0800cc28 <vsiprintf>:
 800cc28:	4613      	mov	r3, r2
 800cc2a:	460a      	mov	r2, r1
 800cc2c:	4601      	mov	r1, r0
 800cc2e:	4802      	ldr	r0, [pc, #8]	; (800cc38 <vsiprintf+0x10>)
 800cc30:	6800      	ldr	r0, [r0, #0]
 800cc32:	f7ff bfe3 	b.w	800cbfc <_vsiprintf_r>
 800cc36:	bf00      	nop
 800cc38:	20000024 	.word	0x20000024

0800cc3c <__swbuf_r>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	460e      	mov	r6, r1
 800cc40:	4614      	mov	r4, r2
 800cc42:	4605      	mov	r5, r0
 800cc44:	b118      	cbz	r0, 800cc4e <__swbuf_r+0x12>
 800cc46:	6983      	ldr	r3, [r0, #24]
 800cc48:	b90b      	cbnz	r3, 800cc4e <__swbuf_r+0x12>
 800cc4a:	f7fe fd9b 	bl	800b784 <__sinit>
 800cc4e:	4b21      	ldr	r3, [pc, #132]	; (800ccd4 <__swbuf_r+0x98>)
 800cc50:	429c      	cmp	r4, r3
 800cc52:	d12b      	bne.n	800ccac <__swbuf_r+0x70>
 800cc54:	686c      	ldr	r4, [r5, #4]
 800cc56:	69a3      	ldr	r3, [r4, #24]
 800cc58:	60a3      	str	r3, [r4, #8]
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	071a      	lsls	r2, r3, #28
 800cc5e:	d52f      	bpl.n	800ccc0 <__swbuf_r+0x84>
 800cc60:	6923      	ldr	r3, [r4, #16]
 800cc62:	b36b      	cbz	r3, 800ccc0 <__swbuf_r+0x84>
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	1ac0      	subs	r0, r0, r3
 800cc6a:	6963      	ldr	r3, [r4, #20]
 800cc6c:	b2f6      	uxtb	r6, r6
 800cc6e:	4283      	cmp	r3, r0
 800cc70:	4637      	mov	r7, r6
 800cc72:	dc04      	bgt.n	800cc7e <__swbuf_r+0x42>
 800cc74:	4621      	mov	r1, r4
 800cc76:	4628      	mov	r0, r5
 800cc78:	f7fe fcf0 	bl	800b65c <_fflush_r>
 800cc7c:	bb30      	cbnz	r0, 800cccc <__swbuf_r+0x90>
 800cc7e:	68a3      	ldr	r3, [r4, #8]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	60a3      	str	r3, [r4, #8]
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	6022      	str	r2, [r4, #0]
 800cc8a:	701e      	strb	r6, [r3, #0]
 800cc8c:	6963      	ldr	r3, [r4, #20]
 800cc8e:	3001      	adds	r0, #1
 800cc90:	4283      	cmp	r3, r0
 800cc92:	d004      	beq.n	800cc9e <__swbuf_r+0x62>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	07db      	lsls	r3, r3, #31
 800cc98:	d506      	bpl.n	800cca8 <__swbuf_r+0x6c>
 800cc9a:	2e0a      	cmp	r6, #10
 800cc9c:	d104      	bne.n	800cca8 <__swbuf_r+0x6c>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4628      	mov	r0, r5
 800cca2:	f7fe fcdb 	bl	800b65c <_fflush_r>
 800cca6:	b988      	cbnz	r0, 800cccc <__swbuf_r+0x90>
 800cca8:	4638      	mov	r0, r7
 800ccaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <__swbuf_r+0x9c>)
 800ccae:	429c      	cmp	r4, r3
 800ccb0:	d101      	bne.n	800ccb6 <__swbuf_r+0x7a>
 800ccb2:	68ac      	ldr	r4, [r5, #8]
 800ccb4:	e7cf      	b.n	800cc56 <__swbuf_r+0x1a>
 800ccb6:	4b09      	ldr	r3, [pc, #36]	; (800ccdc <__swbuf_r+0xa0>)
 800ccb8:	429c      	cmp	r4, r3
 800ccba:	bf08      	it	eq
 800ccbc:	68ec      	ldreq	r4, [r5, #12]
 800ccbe:	e7ca      	b.n	800cc56 <__swbuf_r+0x1a>
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f000 f81e 	bl	800cd04 <__swsetup_r>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d0cb      	beq.n	800cc64 <__swbuf_r+0x28>
 800cccc:	f04f 37ff 	mov.w	r7, #4294967295
 800ccd0:	e7ea      	b.n	800cca8 <__swbuf_r+0x6c>
 800ccd2:	bf00      	nop
 800ccd4:	0800f6e8 	.word	0x0800f6e8
 800ccd8:	0800f708 	.word	0x0800f708
 800ccdc:	0800f6c8 	.word	0x0800f6c8

0800cce0 <_write_r>:
 800cce0:	b538      	push	{r3, r4, r5, lr}
 800cce2:	4d07      	ldr	r5, [pc, #28]	; (800cd00 <_write_r+0x20>)
 800cce4:	4604      	mov	r4, r0
 800cce6:	4608      	mov	r0, r1
 800cce8:	4611      	mov	r1, r2
 800ccea:	2200      	movs	r2, #0
 800ccec:	602a      	str	r2, [r5, #0]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	f7f4 ff0e 	bl	8001b10 <_write>
 800ccf4:	1c43      	adds	r3, r0, #1
 800ccf6:	d102      	bne.n	800ccfe <_write_r+0x1e>
 800ccf8:	682b      	ldr	r3, [r5, #0]
 800ccfa:	b103      	cbz	r3, 800ccfe <_write_r+0x1e>
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	bd38      	pop	{r3, r4, r5, pc}
 800cd00:	20001764 	.word	0x20001764

0800cd04 <__swsetup_r>:
 800cd04:	4b32      	ldr	r3, [pc, #200]	; (800cdd0 <__swsetup_r+0xcc>)
 800cd06:	b570      	push	{r4, r5, r6, lr}
 800cd08:	681d      	ldr	r5, [r3, #0]
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	b125      	cbz	r5, 800cd1a <__swsetup_r+0x16>
 800cd10:	69ab      	ldr	r3, [r5, #24]
 800cd12:	b913      	cbnz	r3, 800cd1a <__swsetup_r+0x16>
 800cd14:	4628      	mov	r0, r5
 800cd16:	f7fe fd35 	bl	800b784 <__sinit>
 800cd1a:	4b2e      	ldr	r3, [pc, #184]	; (800cdd4 <__swsetup_r+0xd0>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d10f      	bne.n	800cd40 <__swsetup_r+0x3c>
 800cd20:	686c      	ldr	r4, [r5, #4]
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd28:	0719      	lsls	r1, r3, #28
 800cd2a:	d42c      	bmi.n	800cd86 <__swsetup_r+0x82>
 800cd2c:	06dd      	lsls	r5, r3, #27
 800cd2e:	d411      	bmi.n	800cd54 <__swsetup_r+0x50>
 800cd30:	2309      	movs	r3, #9
 800cd32:	6033      	str	r3, [r6, #0]
 800cd34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3e:	e03e      	b.n	800cdbe <__swsetup_r+0xba>
 800cd40:	4b25      	ldr	r3, [pc, #148]	; (800cdd8 <__swsetup_r+0xd4>)
 800cd42:	429c      	cmp	r4, r3
 800cd44:	d101      	bne.n	800cd4a <__swsetup_r+0x46>
 800cd46:	68ac      	ldr	r4, [r5, #8]
 800cd48:	e7eb      	b.n	800cd22 <__swsetup_r+0x1e>
 800cd4a:	4b24      	ldr	r3, [pc, #144]	; (800cddc <__swsetup_r+0xd8>)
 800cd4c:	429c      	cmp	r4, r3
 800cd4e:	bf08      	it	eq
 800cd50:	68ec      	ldreq	r4, [r5, #12]
 800cd52:	e7e6      	b.n	800cd22 <__swsetup_r+0x1e>
 800cd54:	0758      	lsls	r0, r3, #29
 800cd56:	d512      	bpl.n	800cd7e <__swsetup_r+0x7a>
 800cd58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd5a:	b141      	cbz	r1, 800cd6e <__swsetup_r+0x6a>
 800cd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd60:	4299      	cmp	r1, r3
 800cd62:	d002      	beq.n	800cd6a <__swsetup_r+0x66>
 800cd64:	4630      	mov	r0, r6
 800cd66:	f7fe fe77 	bl	800ba58 <_free_r>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd74:	81a3      	strh	r3, [r4, #12]
 800cd76:	2300      	movs	r3, #0
 800cd78:	6063      	str	r3, [r4, #4]
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	89a3      	ldrh	r3, [r4, #12]
 800cd80:	f043 0308 	orr.w	r3, r3, #8
 800cd84:	81a3      	strh	r3, [r4, #12]
 800cd86:	6923      	ldr	r3, [r4, #16]
 800cd88:	b94b      	cbnz	r3, 800cd9e <__swsetup_r+0x9a>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd94:	d003      	beq.n	800cd9e <__swsetup_r+0x9a>
 800cd96:	4621      	mov	r1, r4
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7fe fddd 	bl	800b958 <__smakebuf_r>
 800cd9e:	89a0      	ldrh	r0, [r4, #12]
 800cda0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cda4:	f010 0301 	ands.w	r3, r0, #1
 800cda8:	d00a      	beq.n	800cdc0 <__swsetup_r+0xbc>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	60a3      	str	r3, [r4, #8]
 800cdae:	6963      	ldr	r3, [r4, #20]
 800cdb0:	425b      	negs	r3, r3
 800cdb2:	61a3      	str	r3, [r4, #24]
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	b943      	cbnz	r3, 800cdca <__swsetup_r+0xc6>
 800cdb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdbc:	d1ba      	bne.n	800cd34 <__swsetup_r+0x30>
 800cdbe:	bd70      	pop	{r4, r5, r6, pc}
 800cdc0:	0781      	lsls	r1, r0, #30
 800cdc2:	bf58      	it	pl
 800cdc4:	6963      	ldrpl	r3, [r4, #20]
 800cdc6:	60a3      	str	r3, [r4, #8]
 800cdc8:	e7f4      	b.n	800cdb4 <__swsetup_r+0xb0>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e7f7      	b.n	800cdbe <__swsetup_r+0xba>
 800cdce:	bf00      	nop
 800cdd0:	20000024 	.word	0x20000024
 800cdd4:	0800f6e8 	.word	0x0800f6e8
 800cdd8:	0800f708 	.word	0x0800f708
 800cddc:	0800f6c8 	.word	0x0800f6c8

0800cde0 <_close_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	4d06      	ldr	r5, [pc, #24]	; (800cdfc <_close_r+0x1c>)
 800cde4:	2300      	movs	r3, #0
 800cde6:	4604      	mov	r4, r0
 800cde8:	4608      	mov	r0, r1
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	f7f8 f817 	bl	8004e1e <_close>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_close_r+0x1a>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_close_r+0x1a>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	20001764 	.word	0x20001764

0800ce00 <_fstat_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4d07      	ldr	r5, [pc, #28]	; (800ce20 <_fstat_r+0x20>)
 800ce04:	2300      	movs	r3, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	602b      	str	r3, [r5, #0]
 800ce0e:	f7f8 f812 	bl	8004e36 <_fstat>
 800ce12:	1c43      	adds	r3, r0, #1
 800ce14:	d102      	bne.n	800ce1c <_fstat_r+0x1c>
 800ce16:	682b      	ldr	r3, [r5, #0]
 800ce18:	b103      	cbz	r3, 800ce1c <_fstat_r+0x1c>
 800ce1a:	6023      	str	r3, [r4, #0]
 800ce1c:	bd38      	pop	{r3, r4, r5, pc}
 800ce1e:	bf00      	nop
 800ce20:	20001764 	.word	0x20001764

0800ce24 <rshift>:
 800ce24:	6903      	ldr	r3, [r0, #16]
 800ce26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce32:	f100 0414 	add.w	r4, r0, #20
 800ce36:	dd45      	ble.n	800cec4 <rshift+0xa0>
 800ce38:	f011 011f 	ands.w	r1, r1, #31
 800ce3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce44:	d10c      	bne.n	800ce60 <rshift+0x3c>
 800ce46:	f100 0710 	add.w	r7, r0, #16
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	42b1      	cmp	r1, r6
 800ce4e:	d334      	bcc.n	800ceba <rshift+0x96>
 800ce50:	1a9b      	subs	r3, r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	1eea      	subs	r2, r5, #3
 800ce56:	4296      	cmp	r6, r2
 800ce58:	bf38      	it	cc
 800ce5a:	2300      	movcc	r3, #0
 800ce5c:	4423      	add	r3, r4
 800ce5e:	e015      	b.n	800ce8c <rshift+0x68>
 800ce60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce64:	f1c1 0820 	rsb	r8, r1, #32
 800ce68:	40cf      	lsrs	r7, r1
 800ce6a:	f105 0e04 	add.w	lr, r5, #4
 800ce6e:	46a1      	mov	r9, r4
 800ce70:	4576      	cmp	r6, lr
 800ce72:	46f4      	mov	ip, lr
 800ce74:	d815      	bhi.n	800cea2 <rshift+0x7e>
 800ce76:	1a9a      	subs	r2, r3, r2
 800ce78:	0092      	lsls	r2, r2, #2
 800ce7a:	3a04      	subs	r2, #4
 800ce7c:	3501      	adds	r5, #1
 800ce7e:	42ae      	cmp	r6, r5
 800ce80:	bf38      	it	cc
 800ce82:	2200      	movcc	r2, #0
 800ce84:	18a3      	adds	r3, r4, r2
 800ce86:	50a7      	str	r7, [r4, r2]
 800ce88:	b107      	cbz	r7, 800ce8c <rshift+0x68>
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	1b1a      	subs	r2, r3, r4
 800ce8e:	42a3      	cmp	r3, r4
 800ce90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce94:	bf08      	it	eq
 800ce96:	2300      	moveq	r3, #0
 800ce98:	6102      	str	r2, [r0, #16]
 800ce9a:	bf08      	it	eq
 800ce9c:	6143      	streq	r3, [r0, #20]
 800ce9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cea2:	f8dc c000 	ldr.w	ip, [ip]
 800cea6:	fa0c fc08 	lsl.w	ip, ip, r8
 800ceaa:	ea4c 0707 	orr.w	r7, ip, r7
 800ceae:	f849 7b04 	str.w	r7, [r9], #4
 800ceb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ceb6:	40cf      	lsrs	r7, r1
 800ceb8:	e7da      	b.n	800ce70 <rshift+0x4c>
 800ceba:	f851 cb04 	ldr.w	ip, [r1], #4
 800cebe:	f847 cf04 	str.w	ip, [r7, #4]!
 800cec2:	e7c3      	b.n	800ce4c <rshift+0x28>
 800cec4:	4623      	mov	r3, r4
 800cec6:	e7e1      	b.n	800ce8c <rshift+0x68>

0800cec8 <__hexdig_fun>:
 800cec8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cecc:	2b09      	cmp	r3, #9
 800cece:	d802      	bhi.n	800ced6 <__hexdig_fun+0xe>
 800ced0:	3820      	subs	r0, #32
 800ced2:	b2c0      	uxtb	r0, r0
 800ced4:	4770      	bx	lr
 800ced6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ceda:	2b05      	cmp	r3, #5
 800cedc:	d801      	bhi.n	800cee2 <__hexdig_fun+0x1a>
 800cede:	3847      	subs	r0, #71	; 0x47
 800cee0:	e7f7      	b.n	800ced2 <__hexdig_fun+0xa>
 800cee2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cee6:	2b05      	cmp	r3, #5
 800cee8:	d801      	bhi.n	800ceee <__hexdig_fun+0x26>
 800ceea:	3827      	subs	r0, #39	; 0x27
 800ceec:	e7f1      	b.n	800ced2 <__hexdig_fun+0xa>
 800ceee:	2000      	movs	r0, #0
 800cef0:	4770      	bx	lr
	...

0800cef4 <__gethex>:
 800cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	ed2d 8b02 	vpush	{d8}
 800cefc:	b089      	sub	sp, #36	; 0x24
 800cefe:	ee08 0a10 	vmov	s16, r0
 800cf02:	9304      	str	r3, [sp, #16]
 800cf04:	4bb4      	ldr	r3, [pc, #720]	; (800d1d8 <__gethex+0x2e4>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	468b      	mov	fp, r1
 800cf0e:	4690      	mov	r8, r2
 800cf10:	f7f3 f936 	bl	8000180 <strlen>
 800cf14:	9b01      	ldr	r3, [sp, #4]
 800cf16:	f8db 2000 	ldr.w	r2, [fp]
 800cf1a:	4403      	add	r3, r0
 800cf1c:	4682      	mov	sl, r0
 800cf1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf22:	9305      	str	r3, [sp, #20]
 800cf24:	1c93      	adds	r3, r2, #2
 800cf26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf2e:	32fe      	adds	r2, #254	; 0xfe
 800cf30:	18d1      	adds	r1, r2, r3
 800cf32:	461f      	mov	r7, r3
 800cf34:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf38:	9100      	str	r1, [sp, #0]
 800cf3a:	2830      	cmp	r0, #48	; 0x30
 800cf3c:	d0f8      	beq.n	800cf30 <__gethex+0x3c>
 800cf3e:	f7ff ffc3 	bl	800cec8 <__hexdig_fun>
 800cf42:	4604      	mov	r4, r0
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d13a      	bne.n	800cfbe <__gethex+0xca>
 800cf48:	9901      	ldr	r1, [sp, #4]
 800cf4a:	4652      	mov	r2, sl
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7fe ff71 	bl	800be34 <strncmp>
 800cf52:	4605      	mov	r5, r0
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d168      	bne.n	800d02a <__gethex+0x136>
 800cf58:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf5c:	eb07 060a 	add.w	r6, r7, sl
 800cf60:	f7ff ffb2 	bl	800cec8 <__hexdig_fun>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d062      	beq.n	800d02e <__gethex+0x13a>
 800cf68:	4633      	mov	r3, r6
 800cf6a:	7818      	ldrb	r0, [r3, #0]
 800cf6c:	2830      	cmp	r0, #48	; 0x30
 800cf6e:	461f      	mov	r7, r3
 800cf70:	f103 0301 	add.w	r3, r3, #1
 800cf74:	d0f9      	beq.n	800cf6a <__gethex+0x76>
 800cf76:	f7ff ffa7 	bl	800cec8 <__hexdig_fun>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	fab0 f480 	clz	r4, r0
 800cf80:	0964      	lsrs	r4, r4, #5
 800cf82:	4635      	mov	r5, r6
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	463a      	mov	r2, r7
 800cf88:	4616      	mov	r6, r2
 800cf8a:	3201      	adds	r2, #1
 800cf8c:	7830      	ldrb	r0, [r6, #0]
 800cf8e:	f7ff ff9b 	bl	800cec8 <__hexdig_fun>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d1f8      	bne.n	800cf88 <__gethex+0x94>
 800cf96:	9901      	ldr	r1, [sp, #4]
 800cf98:	4652      	mov	r2, sl
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f7fe ff4a 	bl	800be34 <strncmp>
 800cfa0:	b980      	cbnz	r0, 800cfc4 <__gethex+0xd0>
 800cfa2:	b94d      	cbnz	r5, 800cfb8 <__gethex+0xc4>
 800cfa4:	eb06 050a 	add.w	r5, r6, sl
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	4616      	mov	r6, r2
 800cfac:	3201      	adds	r2, #1
 800cfae:	7830      	ldrb	r0, [r6, #0]
 800cfb0:	f7ff ff8a 	bl	800cec8 <__hexdig_fun>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1f8      	bne.n	800cfaa <__gethex+0xb6>
 800cfb8:	1bad      	subs	r5, r5, r6
 800cfba:	00ad      	lsls	r5, r5, #2
 800cfbc:	e004      	b.n	800cfc8 <__gethex+0xd4>
 800cfbe:	2400      	movs	r4, #0
 800cfc0:	4625      	mov	r5, r4
 800cfc2:	e7e0      	b.n	800cf86 <__gethex+0x92>
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	d1f7      	bne.n	800cfb8 <__gethex+0xc4>
 800cfc8:	7833      	ldrb	r3, [r6, #0]
 800cfca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfce:	2b50      	cmp	r3, #80	; 0x50
 800cfd0:	d13b      	bne.n	800d04a <__gethex+0x156>
 800cfd2:	7873      	ldrb	r3, [r6, #1]
 800cfd4:	2b2b      	cmp	r3, #43	; 0x2b
 800cfd6:	d02c      	beq.n	800d032 <__gethex+0x13e>
 800cfd8:	2b2d      	cmp	r3, #45	; 0x2d
 800cfda:	d02e      	beq.n	800d03a <__gethex+0x146>
 800cfdc:	1c71      	adds	r1, r6, #1
 800cfde:	f04f 0900 	mov.w	r9, #0
 800cfe2:	7808      	ldrb	r0, [r1, #0]
 800cfe4:	f7ff ff70 	bl	800cec8 <__hexdig_fun>
 800cfe8:	1e43      	subs	r3, r0, #1
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	2b18      	cmp	r3, #24
 800cfee:	d82c      	bhi.n	800d04a <__gethex+0x156>
 800cff0:	f1a0 0210 	sub.w	r2, r0, #16
 800cff4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cff8:	f7ff ff66 	bl	800cec8 <__hexdig_fun>
 800cffc:	1e43      	subs	r3, r0, #1
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b18      	cmp	r3, #24
 800d002:	d91d      	bls.n	800d040 <__gethex+0x14c>
 800d004:	f1b9 0f00 	cmp.w	r9, #0
 800d008:	d000      	beq.n	800d00c <__gethex+0x118>
 800d00a:	4252      	negs	r2, r2
 800d00c:	4415      	add	r5, r2
 800d00e:	f8cb 1000 	str.w	r1, [fp]
 800d012:	b1e4      	cbz	r4, 800d04e <__gethex+0x15a>
 800d014:	9b00      	ldr	r3, [sp, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	bf14      	ite	ne
 800d01a:	2700      	movne	r7, #0
 800d01c:	2706      	moveq	r7, #6
 800d01e:	4638      	mov	r0, r7
 800d020:	b009      	add	sp, #36	; 0x24
 800d022:	ecbd 8b02 	vpop	{d8}
 800d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02a:	463e      	mov	r6, r7
 800d02c:	4625      	mov	r5, r4
 800d02e:	2401      	movs	r4, #1
 800d030:	e7ca      	b.n	800cfc8 <__gethex+0xd4>
 800d032:	f04f 0900 	mov.w	r9, #0
 800d036:	1cb1      	adds	r1, r6, #2
 800d038:	e7d3      	b.n	800cfe2 <__gethex+0xee>
 800d03a:	f04f 0901 	mov.w	r9, #1
 800d03e:	e7fa      	b.n	800d036 <__gethex+0x142>
 800d040:	230a      	movs	r3, #10
 800d042:	fb03 0202 	mla	r2, r3, r2, r0
 800d046:	3a10      	subs	r2, #16
 800d048:	e7d4      	b.n	800cff4 <__gethex+0x100>
 800d04a:	4631      	mov	r1, r6
 800d04c:	e7df      	b.n	800d00e <__gethex+0x11a>
 800d04e:	1bf3      	subs	r3, r6, r7
 800d050:	3b01      	subs	r3, #1
 800d052:	4621      	mov	r1, r4
 800d054:	2b07      	cmp	r3, #7
 800d056:	dc0b      	bgt.n	800d070 <__gethex+0x17c>
 800d058:	ee18 0a10 	vmov	r0, s16
 800d05c:	f000 fa92 	bl	800d584 <_Balloc>
 800d060:	4604      	mov	r4, r0
 800d062:	b940      	cbnz	r0, 800d076 <__gethex+0x182>
 800d064:	4b5d      	ldr	r3, [pc, #372]	; (800d1dc <__gethex+0x2e8>)
 800d066:	4602      	mov	r2, r0
 800d068:	21de      	movs	r1, #222	; 0xde
 800d06a:	485d      	ldr	r0, [pc, #372]	; (800d1e0 <__gethex+0x2ec>)
 800d06c:	f001 fc02 	bl	800e874 <__assert_func>
 800d070:	3101      	adds	r1, #1
 800d072:	105b      	asrs	r3, r3, #1
 800d074:	e7ee      	b.n	800d054 <__gethex+0x160>
 800d076:	f100 0914 	add.w	r9, r0, #20
 800d07a:	f04f 0b00 	mov.w	fp, #0
 800d07e:	f1ca 0301 	rsb	r3, sl, #1
 800d082:	f8cd 9008 	str.w	r9, [sp, #8]
 800d086:	f8cd b000 	str.w	fp, [sp]
 800d08a:	9306      	str	r3, [sp, #24]
 800d08c:	42b7      	cmp	r7, r6
 800d08e:	d340      	bcc.n	800d112 <__gethex+0x21e>
 800d090:	9802      	ldr	r0, [sp, #8]
 800d092:	9b00      	ldr	r3, [sp, #0]
 800d094:	f840 3b04 	str.w	r3, [r0], #4
 800d098:	eba0 0009 	sub.w	r0, r0, r9
 800d09c:	1080      	asrs	r0, r0, #2
 800d09e:	0146      	lsls	r6, r0, #5
 800d0a0:	6120      	str	r0, [r4, #16]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 fb60 	bl	800d768 <__hi0bits>
 800d0a8:	1a30      	subs	r0, r6, r0
 800d0aa:	f8d8 6000 	ldr.w	r6, [r8]
 800d0ae:	42b0      	cmp	r0, r6
 800d0b0:	dd63      	ble.n	800d17a <__gethex+0x286>
 800d0b2:	1b87      	subs	r7, r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f000 ff04 	bl	800dec4 <__any_on>
 800d0bc:	4682      	mov	sl, r0
 800d0be:	b1a8      	cbz	r0, 800d0ec <__gethex+0x1f8>
 800d0c0:	1e7b      	subs	r3, r7, #1
 800d0c2:	1159      	asrs	r1, r3, #5
 800d0c4:	f003 021f 	and.w	r2, r3, #31
 800d0c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d0cc:	f04f 0a01 	mov.w	sl, #1
 800d0d0:	fa0a f202 	lsl.w	r2, sl, r2
 800d0d4:	420a      	tst	r2, r1
 800d0d6:	d009      	beq.n	800d0ec <__gethex+0x1f8>
 800d0d8:	4553      	cmp	r3, sl
 800d0da:	dd05      	ble.n	800d0e8 <__gethex+0x1f4>
 800d0dc:	1eb9      	subs	r1, r7, #2
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f000 fef0 	bl	800dec4 <__any_on>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d145      	bne.n	800d174 <__gethex+0x280>
 800d0e8:	f04f 0a02 	mov.w	sl, #2
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f7ff fe98 	bl	800ce24 <rshift>
 800d0f4:	443d      	add	r5, r7
 800d0f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0fa:	42ab      	cmp	r3, r5
 800d0fc:	da4c      	bge.n	800d198 <__gethex+0x2a4>
 800d0fe:	ee18 0a10 	vmov	r0, s16
 800d102:	4621      	mov	r1, r4
 800d104:	f000 fa7e 	bl	800d604 <_Bfree>
 800d108:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d10a:	2300      	movs	r3, #0
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	27a3      	movs	r7, #163	; 0xa3
 800d110:	e785      	b.n	800d01e <__gethex+0x12a>
 800d112:	1e73      	subs	r3, r6, #1
 800d114:	9a05      	ldr	r2, [sp, #20]
 800d116:	9303      	str	r3, [sp, #12]
 800d118:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d019      	beq.n	800d154 <__gethex+0x260>
 800d120:	f1bb 0f20 	cmp.w	fp, #32
 800d124:	d107      	bne.n	800d136 <__gethex+0x242>
 800d126:	9b02      	ldr	r3, [sp, #8]
 800d128:	9a00      	ldr	r2, [sp, #0]
 800d12a:	f843 2b04 	str.w	r2, [r3], #4
 800d12e:	9302      	str	r3, [sp, #8]
 800d130:	2300      	movs	r3, #0
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	469b      	mov	fp, r3
 800d136:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d13a:	f7ff fec5 	bl	800cec8 <__hexdig_fun>
 800d13e:	9b00      	ldr	r3, [sp, #0]
 800d140:	f000 000f 	and.w	r0, r0, #15
 800d144:	fa00 f00b 	lsl.w	r0, r0, fp
 800d148:	4303      	orrs	r3, r0
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	f10b 0b04 	add.w	fp, fp, #4
 800d150:	9b03      	ldr	r3, [sp, #12]
 800d152:	e00d      	b.n	800d170 <__gethex+0x27c>
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	9a06      	ldr	r2, [sp, #24]
 800d158:	4413      	add	r3, r2
 800d15a:	42bb      	cmp	r3, r7
 800d15c:	d3e0      	bcc.n	800d120 <__gethex+0x22c>
 800d15e:	4618      	mov	r0, r3
 800d160:	9901      	ldr	r1, [sp, #4]
 800d162:	9307      	str	r3, [sp, #28]
 800d164:	4652      	mov	r2, sl
 800d166:	f7fe fe65 	bl	800be34 <strncmp>
 800d16a:	9b07      	ldr	r3, [sp, #28]
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d1d7      	bne.n	800d120 <__gethex+0x22c>
 800d170:	461e      	mov	r6, r3
 800d172:	e78b      	b.n	800d08c <__gethex+0x198>
 800d174:	f04f 0a03 	mov.w	sl, #3
 800d178:	e7b8      	b.n	800d0ec <__gethex+0x1f8>
 800d17a:	da0a      	bge.n	800d192 <__gethex+0x29e>
 800d17c:	1a37      	subs	r7, r6, r0
 800d17e:	4621      	mov	r1, r4
 800d180:	ee18 0a10 	vmov	r0, s16
 800d184:	463a      	mov	r2, r7
 800d186:	f000 fc59 	bl	800da3c <__lshift>
 800d18a:	1bed      	subs	r5, r5, r7
 800d18c:	4604      	mov	r4, r0
 800d18e:	f100 0914 	add.w	r9, r0, #20
 800d192:	f04f 0a00 	mov.w	sl, #0
 800d196:	e7ae      	b.n	800d0f6 <__gethex+0x202>
 800d198:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d19c:	42a8      	cmp	r0, r5
 800d19e:	dd72      	ble.n	800d286 <__gethex+0x392>
 800d1a0:	1b45      	subs	r5, r0, r5
 800d1a2:	42ae      	cmp	r6, r5
 800d1a4:	dc36      	bgt.n	800d214 <__gethex+0x320>
 800d1a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d02a      	beq.n	800d204 <__gethex+0x310>
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d02c      	beq.n	800d20c <__gethex+0x318>
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d11c      	bne.n	800d1f0 <__gethex+0x2fc>
 800d1b6:	42ae      	cmp	r6, r5
 800d1b8:	d11a      	bne.n	800d1f0 <__gethex+0x2fc>
 800d1ba:	2e01      	cmp	r6, #1
 800d1bc:	d112      	bne.n	800d1e4 <__gethex+0x2f0>
 800d1be:	9a04      	ldr	r2, [sp, #16]
 800d1c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	6123      	str	r3, [r4, #16]
 800d1ca:	f8c9 3000 	str.w	r3, [r9]
 800d1ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1d0:	2762      	movs	r7, #98	; 0x62
 800d1d2:	601c      	str	r4, [r3, #0]
 800d1d4:	e723      	b.n	800d01e <__gethex+0x12a>
 800d1d6:	bf00      	nop
 800d1d8:	0800f800 	.word	0x0800f800
 800d1dc:	0800f788 	.word	0x0800f788
 800d1e0:	0800f799 	.word	0x0800f799
 800d1e4:	1e71      	subs	r1, r6, #1
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f000 fe6c 	bl	800dec4 <__any_on>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d1e6      	bne.n	800d1be <__gethex+0x2ca>
 800d1f0:	ee18 0a10 	vmov	r0, s16
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	f000 fa05 	bl	800d604 <_Bfree>
 800d1fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	6013      	str	r3, [r2, #0]
 800d200:	2750      	movs	r7, #80	; 0x50
 800d202:	e70c      	b.n	800d01e <__gethex+0x12a>
 800d204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1f2      	bne.n	800d1f0 <__gethex+0x2fc>
 800d20a:	e7d8      	b.n	800d1be <__gethex+0x2ca>
 800d20c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1d5      	bne.n	800d1be <__gethex+0x2ca>
 800d212:	e7ed      	b.n	800d1f0 <__gethex+0x2fc>
 800d214:	1e6f      	subs	r7, r5, #1
 800d216:	f1ba 0f00 	cmp.w	sl, #0
 800d21a:	d131      	bne.n	800d280 <__gethex+0x38c>
 800d21c:	b127      	cbz	r7, 800d228 <__gethex+0x334>
 800d21e:	4639      	mov	r1, r7
 800d220:	4620      	mov	r0, r4
 800d222:	f000 fe4f 	bl	800dec4 <__any_on>
 800d226:	4682      	mov	sl, r0
 800d228:	117b      	asrs	r3, r7, #5
 800d22a:	2101      	movs	r1, #1
 800d22c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d230:	f007 071f 	and.w	r7, r7, #31
 800d234:	fa01 f707 	lsl.w	r7, r1, r7
 800d238:	421f      	tst	r7, r3
 800d23a:	4629      	mov	r1, r5
 800d23c:	4620      	mov	r0, r4
 800d23e:	bf18      	it	ne
 800d240:	f04a 0a02 	orrne.w	sl, sl, #2
 800d244:	1b76      	subs	r6, r6, r5
 800d246:	f7ff fded 	bl	800ce24 <rshift>
 800d24a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d24e:	2702      	movs	r7, #2
 800d250:	f1ba 0f00 	cmp.w	sl, #0
 800d254:	d048      	beq.n	800d2e8 <__gethex+0x3f4>
 800d256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d015      	beq.n	800d28a <__gethex+0x396>
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d017      	beq.n	800d292 <__gethex+0x39e>
 800d262:	2b01      	cmp	r3, #1
 800d264:	d109      	bne.n	800d27a <__gethex+0x386>
 800d266:	f01a 0f02 	tst.w	sl, #2
 800d26a:	d006      	beq.n	800d27a <__gethex+0x386>
 800d26c:	f8d9 0000 	ldr.w	r0, [r9]
 800d270:	ea4a 0a00 	orr.w	sl, sl, r0
 800d274:	f01a 0f01 	tst.w	sl, #1
 800d278:	d10e      	bne.n	800d298 <__gethex+0x3a4>
 800d27a:	f047 0710 	orr.w	r7, r7, #16
 800d27e:	e033      	b.n	800d2e8 <__gethex+0x3f4>
 800d280:	f04f 0a01 	mov.w	sl, #1
 800d284:	e7d0      	b.n	800d228 <__gethex+0x334>
 800d286:	2701      	movs	r7, #1
 800d288:	e7e2      	b.n	800d250 <__gethex+0x35c>
 800d28a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d28c:	f1c3 0301 	rsb	r3, r3, #1
 800d290:	9315      	str	r3, [sp, #84]	; 0x54
 800d292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0f0      	beq.n	800d27a <__gethex+0x386>
 800d298:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d29c:	f104 0314 	add.w	r3, r4, #20
 800d2a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2a8:	f04f 0c00 	mov.w	ip, #0
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d2b6:	d01c      	beq.n	800d2f2 <__gethex+0x3fe>
 800d2b8:	3201      	adds	r2, #1
 800d2ba:	6002      	str	r2, [r0, #0]
 800d2bc:	2f02      	cmp	r7, #2
 800d2be:	f104 0314 	add.w	r3, r4, #20
 800d2c2:	d13f      	bne.n	800d344 <__gethex+0x450>
 800d2c4:	f8d8 2000 	ldr.w	r2, [r8]
 800d2c8:	3a01      	subs	r2, #1
 800d2ca:	42b2      	cmp	r2, r6
 800d2cc:	d10a      	bne.n	800d2e4 <__gethex+0x3f0>
 800d2ce:	1171      	asrs	r1, r6, #5
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2d6:	f006 061f 	and.w	r6, r6, #31
 800d2da:	fa02 f606 	lsl.w	r6, r2, r6
 800d2de:	421e      	tst	r6, r3
 800d2e0:	bf18      	it	ne
 800d2e2:	4617      	movne	r7, r2
 800d2e4:	f047 0720 	orr.w	r7, r7, #32
 800d2e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2ea:	601c      	str	r4, [r3, #0]
 800d2ec:	9b04      	ldr	r3, [sp, #16]
 800d2ee:	601d      	str	r5, [r3, #0]
 800d2f0:	e695      	b.n	800d01e <__gethex+0x12a>
 800d2f2:	4299      	cmp	r1, r3
 800d2f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2f8:	d8d8      	bhi.n	800d2ac <__gethex+0x3b8>
 800d2fa:	68a3      	ldr	r3, [r4, #8]
 800d2fc:	459b      	cmp	fp, r3
 800d2fe:	db19      	blt.n	800d334 <__gethex+0x440>
 800d300:	6861      	ldr	r1, [r4, #4]
 800d302:	ee18 0a10 	vmov	r0, s16
 800d306:	3101      	adds	r1, #1
 800d308:	f000 f93c 	bl	800d584 <_Balloc>
 800d30c:	4681      	mov	r9, r0
 800d30e:	b918      	cbnz	r0, 800d318 <__gethex+0x424>
 800d310:	4b1a      	ldr	r3, [pc, #104]	; (800d37c <__gethex+0x488>)
 800d312:	4602      	mov	r2, r0
 800d314:	2184      	movs	r1, #132	; 0x84
 800d316:	e6a8      	b.n	800d06a <__gethex+0x176>
 800d318:	6922      	ldr	r2, [r4, #16]
 800d31a:	3202      	adds	r2, #2
 800d31c:	f104 010c 	add.w	r1, r4, #12
 800d320:	0092      	lsls	r2, r2, #2
 800d322:	300c      	adds	r0, #12
 800d324:	f7fe fb68 	bl	800b9f8 <memcpy>
 800d328:	4621      	mov	r1, r4
 800d32a:	ee18 0a10 	vmov	r0, s16
 800d32e:	f000 f969 	bl	800d604 <_Bfree>
 800d332:	464c      	mov	r4, r9
 800d334:	6923      	ldr	r3, [r4, #16]
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d33c:	6122      	str	r2, [r4, #16]
 800d33e:	2201      	movs	r2, #1
 800d340:	615a      	str	r2, [r3, #20]
 800d342:	e7bb      	b.n	800d2bc <__gethex+0x3c8>
 800d344:	6922      	ldr	r2, [r4, #16]
 800d346:	455a      	cmp	r2, fp
 800d348:	dd0b      	ble.n	800d362 <__gethex+0x46e>
 800d34a:	2101      	movs	r1, #1
 800d34c:	4620      	mov	r0, r4
 800d34e:	f7ff fd69 	bl	800ce24 <rshift>
 800d352:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d356:	3501      	adds	r5, #1
 800d358:	42ab      	cmp	r3, r5
 800d35a:	f6ff aed0 	blt.w	800d0fe <__gethex+0x20a>
 800d35e:	2701      	movs	r7, #1
 800d360:	e7c0      	b.n	800d2e4 <__gethex+0x3f0>
 800d362:	f016 061f 	ands.w	r6, r6, #31
 800d366:	d0fa      	beq.n	800d35e <__gethex+0x46a>
 800d368:	4453      	add	r3, sl
 800d36a:	f1c6 0620 	rsb	r6, r6, #32
 800d36e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d372:	f000 f9f9 	bl	800d768 <__hi0bits>
 800d376:	42b0      	cmp	r0, r6
 800d378:	dbe7      	blt.n	800d34a <__gethex+0x456>
 800d37a:	e7f0      	b.n	800d35e <__gethex+0x46a>
 800d37c:	0800f788 	.word	0x0800f788

0800d380 <L_shift>:
 800d380:	f1c2 0208 	rsb	r2, r2, #8
 800d384:	0092      	lsls	r2, r2, #2
 800d386:	b570      	push	{r4, r5, r6, lr}
 800d388:	f1c2 0620 	rsb	r6, r2, #32
 800d38c:	6843      	ldr	r3, [r0, #4]
 800d38e:	6804      	ldr	r4, [r0, #0]
 800d390:	fa03 f506 	lsl.w	r5, r3, r6
 800d394:	432c      	orrs	r4, r5
 800d396:	40d3      	lsrs	r3, r2
 800d398:	6004      	str	r4, [r0, #0]
 800d39a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d39e:	4288      	cmp	r0, r1
 800d3a0:	d3f4      	bcc.n	800d38c <L_shift+0xc>
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}

0800d3a4 <__match>:
 800d3a4:	b530      	push	{r4, r5, lr}
 800d3a6:	6803      	ldr	r3, [r0, #0]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ae:	b914      	cbnz	r4, 800d3b6 <__match+0x12>
 800d3b0:	6003      	str	r3, [r0, #0]
 800d3b2:	2001      	movs	r0, #1
 800d3b4:	bd30      	pop	{r4, r5, pc}
 800d3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d3be:	2d19      	cmp	r5, #25
 800d3c0:	bf98      	it	ls
 800d3c2:	3220      	addls	r2, #32
 800d3c4:	42a2      	cmp	r2, r4
 800d3c6:	d0f0      	beq.n	800d3aa <__match+0x6>
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	e7f3      	b.n	800d3b4 <__match+0x10>

0800d3cc <__hexnan>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	680b      	ldr	r3, [r1, #0]
 800d3d2:	115e      	asrs	r6, r3, #5
 800d3d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3d8:	f013 031f 	ands.w	r3, r3, #31
 800d3dc:	b087      	sub	sp, #28
 800d3de:	bf18      	it	ne
 800d3e0:	3604      	addne	r6, #4
 800d3e2:	2500      	movs	r5, #0
 800d3e4:	1f37      	subs	r7, r6, #4
 800d3e6:	4690      	mov	r8, r2
 800d3e8:	6802      	ldr	r2, [r0, #0]
 800d3ea:	9301      	str	r3, [sp, #4]
 800d3ec:	4682      	mov	sl, r0
 800d3ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3f2:	46b9      	mov	r9, r7
 800d3f4:	463c      	mov	r4, r7
 800d3f6:	9502      	str	r5, [sp, #8]
 800d3f8:	46ab      	mov	fp, r5
 800d3fa:	7851      	ldrb	r1, [r2, #1]
 800d3fc:	1c53      	adds	r3, r2, #1
 800d3fe:	9303      	str	r3, [sp, #12]
 800d400:	b341      	cbz	r1, 800d454 <__hexnan+0x88>
 800d402:	4608      	mov	r0, r1
 800d404:	9205      	str	r2, [sp, #20]
 800d406:	9104      	str	r1, [sp, #16]
 800d408:	f7ff fd5e 	bl	800cec8 <__hexdig_fun>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d14f      	bne.n	800d4b0 <__hexnan+0xe4>
 800d410:	9904      	ldr	r1, [sp, #16]
 800d412:	9a05      	ldr	r2, [sp, #20]
 800d414:	2920      	cmp	r1, #32
 800d416:	d818      	bhi.n	800d44a <__hexnan+0x7e>
 800d418:	9b02      	ldr	r3, [sp, #8]
 800d41a:	459b      	cmp	fp, r3
 800d41c:	dd13      	ble.n	800d446 <__hexnan+0x7a>
 800d41e:	454c      	cmp	r4, r9
 800d420:	d206      	bcs.n	800d430 <__hexnan+0x64>
 800d422:	2d07      	cmp	r5, #7
 800d424:	dc04      	bgt.n	800d430 <__hexnan+0x64>
 800d426:	462a      	mov	r2, r5
 800d428:	4649      	mov	r1, r9
 800d42a:	4620      	mov	r0, r4
 800d42c:	f7ff ffa8 	bl	800d380 <L_shift>
 800d430:	4544      	cmp	r4, r8
 800d432:	d950      	bls.n	800d4d6 <__hexnan+0x10a>
 800d434:	2300      	movs	r3, #0
 800d436:	f1a4 0904 	sub.w	r9, r4, #4
 800d43a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d43e:	f8cd b008 	str.w	fp, [sp, #8]
 800d442:	464c      	mov	r4, r9
 800d444:	461d      	mov	r5, r3
 800d446:	9a03      	ldr	r2, [sp, #12]
 800d448:	e7d7      	b.n	800d3fa <__hexnan+0x2e>
 800d44a:	2929      	cmp	r1, #41	; 0x29
 800d44c:	d156      	bne.n	800d4fc <__hexnan+0x130>
 800d44e:	3202      	adds	r2, #2
 800d450:	f8ca 2000 	str.w	r2, [sl]
 800d454:	f1bb 0f00 	cmp.w	fp, #0
 800d458:	d050      	beq.n	800d4fc <__hexnan+0x130>
 800d45a:	454c      	cmp	r4, r9
 800d45c:	d206      	bcs.n	800d46c <__hexnan+0xa0>
 800d45e:	2d07      	cmp	r5, #7
 800d460:	dc04      	bgt.n	800d46c <__hexnan+0xa0>
 800d462:	462a      	mov	r2, r5
 800d464:	4649      	mov	r1, r9
 800d466:	4620      	mov	r0, r4
 800d468:	f7ff ff8a 	bl	800d380 <L_shift>
 800d46c:	4544      	cmp	r4, r8
 800d46e:	d934      	bls.n	800d4da <__hexnan+0x10e>
 800d470:	f1a8 0204 	sub.w	r2, r8, #4
 800d474:	4623      	mov	r3, r4
 800d476:	f853 1b04 	ldr.w	r1, [r3], #4
 800d47a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d47e:	429f      	cmp	r7, r3
 800d480:	d2f9      	bcs.n	800d476 <__hexnan+0xaa>
 800d482:	1b3b      	subs	r3, r7, r4
 800d484:	f023 0303 	bic.w	r3, r3, #3
 800d488:	3304      	adds	r3, #4
 800d48a:	3401      	adds	r4, #1
 800d48c:	3e03      	subs	r6, #3
 800d48e:	42b4      	cmp	r4, r6
 800d490:	bf88      	it	hi
 800d492:	2304      	movhi	r3, #4
 800d494:	4443      	add	r3, r8
 800d496:	2200      	movs	r2, #0
 800d498:	f843 2b04 	str.w	r2, [r3], #4
 800d49c:	429f      	cmp	r7, r3
 800d49e:	d2fb      	bcs.n	800d498 <__hexnan+0xcc>
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	b91b      	cbnz	r3, 800d4ac <__hexnan+0xe0>
 800d4a4:	4547      	cmp	r7, r8
 800d4a6:	d127      	bne.n	800d4f8 <__hexnan+0x12c>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	603b      	str	r3, [r7, #0]
 800d4ac:	2005      	movs	r0, #5
 800d4ae:	e026      	b.n	800d4fe <__hexnan+0x132>
 800d4b0:	3501      	adds	r5, #1
 800d4b2:	2d08      	cmp	r5, #8
 800d4b4:	f10b 0b01 	add.w	fp, fp, #1
 800d4b8:	dd06      	ble.n	800d4c8 <__hexnan+0xfc>
 800d4ba:	4544      	cmp	r4, r8
 800d4bc:	d9c3      	bls.n	800d446 <__hexnan+0x7a>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4c4:	2501      	movs	r5, #1
 800d4c6:	3c04      	subs	r4, #4
 800d4c8:	6822      	ldr	r2, [r4, #0]
 800d4ca:	f000 000f 	and.w	r0, r0, #15
 800d4ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d4d2:	6022      	str	r2, [r4, #0]
 800d4d4:	e7b7      	b.n	800d446 <__hexnan+0x7a>
 800d4d6:	2508      	movs	r5, #8
 800d4d8:	e7b5      	b.n	800d446 <__hexnan+0x7a>
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d0df      	beq.n	800d4a0 <__hexnan+0xd4>
 800d4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e4:	f1c3 0320 	rsb	r3, r3, #32
 800d4e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4f0:	401a      	ands	r2, r3
 800d4f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800d4f6:	e7d3      	b.n	800d4a0 <__hexnan+0xd4>
 800d4f8:	3f04      	subs	r7, #4
 800d4fa:	e7d1      	b.n	800d4a0 <__hexnan+0xd4>
 800d4fc:	2004      	movs	r0, #4
 800d4fe:	b007      	add	sp, #28
 800d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d504 <_isatty_r>:
 800d504:	b538      	push	{r3, r4, r5, lr}
 800d506:	4d06      	ldr	r5, [pc, #24]	; (800d520 <_isatty_r+0x1c>)
 800d508:	2300      	movs	r3, #0
 800d50a:	4604      	mov	r4, r0
 800d50c:	4608      	mov	r0, r1
 800d50e:	602b      	str	r3, [r5, #0]
 800d510:	f7f7 fca1 	bl	8004e56 <_isatty>
 800d514:	1c43      	adds	r3, r0, #1
 800d516:	d102      	bne.n	800d51e <_isatty_r+0x1a>
 800d518:	682b      	ldr	r3, [r5, #0]
 800d51a:	b103      	cbz	r3, 800d51e <_isatty_r+0x1a>
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	bd38      	pop	{r3, r4, r5, pc}
 800d520:	20001764 	.word	0x20001764

0800d524 <_lseek_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4d07      	ldr	r5, [pc, #28]	; (800d544 <_lseek_r+0x20>)
 800d528:	4604      	mov	r4, r0
 800d52a:	4608      	mov	r0, r1
 800d52c:	4611      	mov	r1, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	602a      	str	r2, [r5, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	f7f7 fc9a 	bl	8004e6c <_lseek>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_lseek_r+0x1e>
 800d53c:	682b      	ldr	r3, [r5, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_lseek_r+0x1e>
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	20001764 	.word	0x20001764

0800d548 <__ascii_mbtowc>:
 800d548:	b082      	sub	sp, #8
 800d54a:	b901      	cbnz	r1, 800d54e <__ascii_mbtowc+0x6>
 800d54c:	a901      	add	r1, sp, #4
 800d54e:	b142      	cbz	r2, 800d562 <__ascii_mbtowc+0x1a>
 800d550:	b14b      	cbz	r3, 800d566 <__ascii_mbtowc+0x1e>
 800d552:	7813      	ldrb	r3, [r2, #0]
 800d554:	600b      	str	r3, [r1, #0]
 800d556:	7812      	ldrb	r2, [r2, #0]
 800d558:	1e10      	subs	r0, r2, #0
 800d55a:	bf18      	it	ne
 800d55c:	2001      	movne	r0, #1
 800d55e:	b002      	add	sp, #8
 800d560:	4770      	bx	lr
 800d562:	4610      	mov	r0, r2
 800d564:	e7fb      	b.n	800d55e <__ascii_mbtowc+0x16>
 800d566:	f06f 0001 	mvn.w	r0, #1
 800d56a:	e7f8      	b.n	800d55e <__ascii_mbtowc+0x16>

0800d56c <__malloc_lock>:
 800d56c:	4801      	ldr	r0, [pc, #4]	; (800d574 <__malloc_lock+0x8>)
 800d56e:	f7fe b9cc 	b.w	800b90a <__retarget_lock_acquire_recursive>
 800d572:	bf00      	nop
 800d574:	20001756 	.word	0x20001756

0800d578 <__malloc_unlock>:
 800d578:	4801      	ldr	r0, [pc, #4]	; (800d580 <__malloc_unlock+0x8>)
 800d57a:	f7fe b9c7 	b.w	800b90c <__retarget_lock_release_recursive>
 800d57e:	bf00      	nop
 800d580:	20001756 	.word	0x20001756

0800d584 <_Balloc>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d588:	4604      	mov	r4, r0
 800d58a:	460d      	mov	r5, r1
 800d58c:	b976      	cbnz	r6, 800d5ac <_Balloc+0x28>
 800d58e:	2010      	movs	r0, #16
 800d590:	f7fe fa22 	bl	800b9d8 <malloc>
 800d594:	4602      	mov	r2, r0
 800d596:	6260      	str	r0, [r4, #36]	; 0x24
 800d598:	b920      	cbnz	r0, 800d5a4 <_Balloc+0x20>
 800d59a:	4b18      	ldr	r3, [pc, #96]	; (800d5fc <_Balloc+0x78>)
 800d59c:	4818      	ldr	r0, [pc, #96]	; (800d600 <_Balloc+0x7c>)
 800d59e:	2166      	movs	r1, #102	; 0x66
 800d5a0:	f001 f968 	bl	800e874 <__assert_func>
 800d5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5a8:	6006      	str	r6, [r0, #0]
 800d5aa:	60c6      	str	r6, [r0, #12]
 800d5ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5ae:	68f3      	ldr	r3, [r6, #12]
 800d5b0:	b183      	cbz	r3, 800d5d4 <_Balloc+0x50>
 800d5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5ba:	b9b8      	cbnz	r0, 800d5ec <_Balloc+0x68>
 800d5bc:	2101      	movs	r1, #1
 800d5be:	fa01 f605 	lsl.w	r6, r1, r5
 800d5c2:	1d72      	adds	r2, r6, #5
 800d5c4:	0092      	lsls	r2, r2, #2
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f000 fc9d 	bl	800df06 <_calloc_r>
 800d5cc:	b160      	cbz	r0, 800d5e8 <_Balloc+0x64>
 800d5ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5d2:	e00e      	b.n	800d5f2 <_Balloc+0x6e>
 800d5d4:	2221      	movs	r2, #33	; 0x21
 800d5d6:	2104      	movs	r1, #4
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 fc94 	bl	800df06 <_calloc_r>
 800d5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5e0:	60f0      	str	r0, [r6, #12]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1e4      	bne.n	800d5b2 <_Balloc+0x2e>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	6802      	ldr	r2, [r0, #0]
 800d5ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5f8:	e7f7      	b.n	800d5ea <_Balloc+0x66>
 800d5fa:	bf00      	nop
 800d5fc:	0800f814 	.word	0x0800f814
 800d600:	0800f82b 	.word	0x0800f82b

0800d604 <_Bfree>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d608:	4605      	mov	r5, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	b976      	cbnz	r6, 800d62c <_Bfree+0x28>
 800d60e:	2010      	movs	r0, #16
 800d610:	f7fe f9e2 	bl	800b9d8 <malloc>
 800d614:	4602      	mov	r2, r0
 800d616:	6268      	str	r0, [r5, #36]	; 0x24
 800d618:	b920      	cbnz	r0, 800d624 <_Bfree+0x20>
 800d61a:	4b09      	ldr	r3, [pc, #36]	; (800d640 <_Bfree+0x3c>)
 800d61c:	4809      	ldr	r0, [pc, #36]	; (800d644 <_Bfree+0x40>)
 800d61e:	218a      	movs	r1, #138	; 0x8a
 800d620:	f001 f928 	bl	800e874 <__assert_func>
 800d624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d628:	6006      	str	r6, [r0, #0]
 800d62a:	60c6      	str	r6, [r0, #12]
 800d62c:	b13c      	cbz	r4, 800d63e <_Bfree+0x3a>
 800d62e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d630:	6862      	ldr	r2, [r4, #4]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d638:	6021      	str	r1, [r4, #0]
 800d63a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	0800f814 	.word	0x0800f814
 800d644:	0800f82b 	.word	0x0800f82b

0800d648 <__multadd>:
 800d648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d64c:	690d      	ldr	r5, [r1, #16]
 800d64e:	4607      	mov	r7, r0
 800d650:	460c      	mov	r4, r1
 800d652:	461e      	mov	r6, r3
 800d654:	f101 0c14 	add.w	ip, r1, #20
 800d658:	2000      	movs	r0, #0
 800d65a:	f8dc 3000 	ldr.w	r3, [ip]
 800d65e:	b299      	uxth	r1, r3
 800d660:	fb02 6101 	mla	r1, r2, r1, r6
 800d664:	0c1e      	lsrs	r6, r3, #16
 800d666:	0c0b      	lsrs	r3, r1, #16
 800d668:	fb02 3306 	mla	r3, r2, r6, r3
 800d66c:	b289      	uxth	r1, r1
 800d66e:	3001      	adds	r0, #1
 800d670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d674:	4285      	cmp	r5, r0
 800d676:	f84c 1b04 	str.w	r1, [ip], #4
 800d67a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d67e:	dcec      	bgt.n	800d65a <__multadd+0x12>
 800d680:	b30e      	cbz	r6, 800d6c6 <__multadd+0x7e>
 800d682:	68a3      	ldr	r3, [r4, #8]
 800d684:	42ab      	cmp	r3, r5
 800d686:	dc19      	bgt.n	800d6bc <__multadd+0x74>
 800d688:	6861      	ldr	r1, [r4, #4]
 800d68a:	4638      	mov	r0, r7
 800d68c:	3101      	adds	r1, #1
 800d68e:	f7ff ff79 	bl	800d584 <_Balloc>
 800d692:	4680      	mov	r8, r0
 800d694:	b928      	cbnz	r0, 800d6a2 <__multadd+0x5a>
 800d696:	4602      	mov	r2, r0
 800d698:	4b0c      	ldr	r3, [pc, #48]	; (800d6cc <__multadd+0x84>)
 800d69a:	480d      	ldr	r0, [pc, #52]	; (800d6d0 <__multadd+0x88>)
 800d69c:	21b5      	movs	r1, #181	; 0xb5
 800d69e:	f001 f8e9 	bl	800e874 <__assert_func>
 800d6a2:	6922      	ldr	r2, [r4, #16]
 800d6a4:	3202      	adds	r2, #2
 800d6a6:	f104 010c 	add.w	r1, r4, #12
 800d6aa:	0092      	lsls	r2, r2, #2
 800d6ac:	300c      	adds	r0, #12
 800d6ae:	f7fe f9a3 	bl	800b9f8 <memcpy>
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f7ff ffa5 	bl	800d604 <_Bfree>
 800d6ba:	4644      	mov	r4, r8
 800d6bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6c0:	3501      	adds	r5, #1
 800d6c2:	615e      	str	r6, [r3, #20]
 800d6c4:	6125      	str	r5, [r4, #16]
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6cc:	0800f788 	.word	0x0800f788
 800d6d0:	0800f82b 	.word	0x0800f82b

0800d6d4 <__s2b>:
 800d6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6d8:	460c      	mov	r4, r1
 800d6da:	4615      	mov	r5, r2
 800d6dc:	461f      	mov	r7, r3
 800d6de:	2209      	movs	r2, #9
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	db09      	blt.n	800d704 <__s2b+0x30>
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f7ff ff47 	bl	800d584 <_Balloc>
 800d6f6:	b940      	cbnz	r0, 800d70a <__s2b+0x36>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	4b19      	ldr	r3, [pc, #100]	; (800d760 <__s2b+0x8c>)
 800d6fc:	4819      	ldr	r0, [pc, #100]	; (800d764 <__s2b+0x90>)
 800d6fe:	21ce      	movs	r1, #206	; 0xce
 800d700:	f001 f8b8 	bl	800e874 <__assert_func>
 800d704:	0052      	lsls	r2, r2, #1
 800d706:	3101      	adds	r1, #1
 800d708:	e7f0      	b.n	800d6ec <__s2b+0x18>
 800d70a:	9b08      	ldr	r3, [sp, #32]
 800d70c:	6143      	str	r3, [r0, #20]
 800d70e:	2d09      	cmp	r5, #9
 800d710:	f04f 0301 	mov.w	r3, #1
 800d714:	6103      	str	r3, [r0, #16]
 800d716:	dd16      	ble.n	800d746 <__s2b+0x72>
 800d718:	f104 0909 	add.w	r9, r4, #9
 800d71c:	46c8      	mov	r8, r9
 800d71e:	442c      	add	r4, r5
 800d720:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d724:	4601      	mov	r1, r0
 800d726:	3b30      	subs	r3, #48	; 0x30
 800d728:	220a      	movs	r2, #10
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff ff8c 	bl	800d648 <__multadd>
 800d730:	45a0      	cmp	r8, r4
 800d732:	d1f5      	bne.n	800d720 <__s2b+0x4c>
 800d734:	f1a5 0408 	sub.w	r4, r5, #8
 800d738:	444c      	add	r4, r9
 800d73a:	1b2d      	subs	r5, r5, r4
 800d73c:	1963      	adds	r3, r4, r5
 800d73e:	42bb      	cmp	r3, r7
 800d740:	db04      	blt.n	800d74c <__s2b+0x78>
 800d742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d746:	340a      	adds	r4, #10
 800d748:	2509      	movs	r5, #9
 800d74a:	e7f6      	b.n	800d73a <__s2b+0x66>
 800d74c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d750:	4601      	mov	r1, r0
 800d752:	3b30      	subs	r3, #48	; 0x30
 800d754:	220a      	movs	r2, #10
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ff76 	bl	800d648 <__multadd>
 800d75c:	e7ee      	b.n	800d73c <__s2b+0x68>
 800d75e:	bf00      	nop
 800d760:	0800f788 	.word	0x0800f788
 800d764:	0800f82b 	.word	0x0800f82b

0800d768 <__hi0bits>:
 800d768:	0c03      	lsrs	r3, r0, #16
 800d76a:	041b      	lsls	r3, r3, #16
 800d76c:	b9d3      	cbnz	r3, 800d7a4 <__hi0bits+0x3c>
 800d76e:	0400      	lsls	r0, r0, #16
 800d770:	2310      	movs	r3, #16
 800d772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d776:	bf04      	itt	eq
 800d778:	0200      	lsleq	r0, r0, #8
 800d77a:	3308      	addeq	r3, #8
 800d77c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d780:	bf04      	itt	eq
 800d782:	0100      	lsleq	r0, r0, #4
 800d784:	3304      	addeq	r3, #4
 800d786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d78a:	bf04      	itt	eq
 800d78c:	0080      	lsleq	r0, r0, #2
 800d78e:	3302      	addeq	r3, #2
 800d790:	2800      	cmp	r0, #0
 800d792:	db05      	blt.n	800d7a0 <__hi0bits+0x38>
 800d794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d798:	f103 0301 	add.w	r3, r3, #1
 800d79c:	bf08      	it	eq
 800d79e:	2320      	moveq	r3, #32
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	4770      	bx	lr
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e7e4      	b.n	800d772 <__hi0bits+0xa>

0800d7a8 <__lo0bits>:
 800d7a8:	6803      	ldr	r3, [r0, #0]
 800d7aa:	f013 0207 	ands.w	r2, r3, #7
 800d7ae:	4601      	mov	r1, r0
 800d7b0:	d00b      	beq.n	800d7ca <__lo0bits+0x22>
 800d7b2:	07da      	lsls	r2, r3, #31
 800d7b4:	d423      	bmi.n	800d7fe <__lo0bits+0x56>
 800d7b6:	0798      	lsls	r0, r3, #30
 800d7b8:	bf49      	itett	mi
 800d7ba:	085b      	lsrmi	r3, r3, #1
 800d7bc:	089b      	lsrpl	r3, r3, #2
 800d7be:	2001      	movmi	r0, #1
 800d7c0:	600b      	strmi	r3, [r1, #0]
 800d7c2:	bf5c      	itt	pl
 800d7c4:	600b      	strpl	r3, [r1, #0]
 800d7c6:	2002      	movpl	r0, #2
 800d7c8:	4770      	bx	lr
 800d7ca:	b298      	uxth	r0, r3
 800d7cc:	b9a8      	cbnz	r0, 800d7fa <__lo0bits+0x52>
 800d7ce:	0c1b      	lsrs	r3, r3, #16
 800d7d0:	2010      	movs	r0, #16
 800d7d2:	b2da      	uxtb	r2, r3
 800d7d4:	b90a      	cbnz	r2, 800d7da <__lo0bits+0x32>
 800d7d6:	3008      	adds	r0, #8
 800d7d8:	0a1b      	lsrs	r3, r3, #8
 800d7da:	071a      	lsls	r2, r3, #28
 800d7dc:	bf04      	itt	eq
 800d7de:	091b      	lsreq	r3, r3, #4
 800d7e0:	3004      	addeq	r0, #4
 800d7e2:	079a      	lsls	r2, r3, #30
 800d7e4:	bf04      	itt	eq
 800d7e6:	089b      	lsreq	r3, r3, #2
 800d7e8:	3002      	addeq	r0, #2
 800d7ea:	07da      	lsls	r2, r3, #31
 800d7ec:	d403      	bmi.n	800d7f6 <__lo0bits+0x4e>
 800d7ee:	085b      	lsrs	r3, r3, #1
 800d7f0:	f100 0001 	add.w	r0, r0, #1
 800d7f4:	d005      	beq.n	800d802 <__lo0bits+0x5a>
 800d7f6:	600b      	str	r3, [r1, #0]
 800d7f8:	4770      	bx	lr
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	e7e9      	b.n	800d7d2 <__lo0bits+0x2a>
 800d7fe:	2000      	movs	r0, #0
 800d800:	4770      	bx	lr
 800d802:	2020      	movs	r0, #32
 800d804:	4770      	bx	lr
	...

0800d808 <__i2b>:
 800d808:	b510      	push	{r4, lr}
 800d80a:	460c      	mov	r4, r1
 800d80c:	2101      	movs	r1, #1
 800d80e:	f7ff feb9 	bl	800d584 <_Balloc>
 800d812:	4602      	mov	r2, r0
 800d814:	b928      	cbnz	r0, 800d822 <__i2b+0x1a>
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <__i2b+0x24>)
 800d818:	4805      	ldr	r0, [pc, #20]	; (800d830 <__i2b+0x28>)
 800d81a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d81e:	f001 f829 	bl	800e874 <__assert_func>
 800d822:	2301      	movs	r3, #1
 800d824:	6144      	str	r4, [r0, #20]
 800d826:	6103      	str	r3, [r0, #16]
 800d828:	bd10      	pop	{r4, pc}
 800d82a:	bf00      	nop
 800d82c:	0800f788 	.word	0x0800f788
 800d830:	0800f82b 	.word	0x0800f82b

0800d834 <__multiply>:
 800d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	4691      	mov	r9, r2
 800d83a:	690a      	ldr	r2, [r1, #16]
 800d83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d840:	429a      	cmp	r2, r3
 800d842:	bfb8      	it	lt
 800d844:	460b      	movlt	r3, r1
 800d846:	460c      	mov	r4, r1
 800d848:	bfbc      	itt	lt
 800d84a:	464c      	movlt	r4, r9
 800d84c:	4699      	movlt	r9, r3
 800d84e:	6927      	ldr	r7, [r4, #16]
 800d850:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d854:	68a3      	ldr	r3, [r4, #8]
 800d856:	6861      	ldr	r1, [r4, #4]
 800d858:	eb07 060a 	add.w	r6, r7, sl
 800d85c:	42b3      	cmp	r3, r6
 800d85e:	b085      	sub	sp, #20
 800d860:	bfb8      	it	lt
 800d862:	3101      	addlt	r1, #1
 800d864:	f7ff fe8e 	bl	800d584 <_Balloc>
 800d868:	b930      	cbnz	r0, 800d878 <__multiply+0x44>
 800d86a:	4602      	mov	r2, r0
 800d86c:	4b44      	ldr	r3, [pc, #272]	; (800d980 <__multiply+0x14c>)
 800d86e:	4845      	ldr	r0, [pc, #276]	; (800d984 <__multiply+0x150>)
 800d870:	f240 115d 	movw	r1, #349	; 0x15d
 800d874:	f000 fffe 	bl	800e874 <__assert_func>
 800d878:	f100 0514 	add.w	r5, r0, #20
 800d87c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d880:	462b      	mov	r3, r5
 800d882:	2200      	movs	r2, #0
 800d884:	4543      	cmp	r3, r8
 800d886:	d321      	bcc.n	800d8cc <__multiply+0x98>
 800d888:	f104 0314 	add.w	r3, r4, #20
 800d88c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d890:	f109 0314 	add.w	r3, r9, #20
 800d894:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d898:	9202      	str	r2, [sp, #8]
 800d89a:	1b3a      	subs	r2, r7, r4
 800d89c:	3a15      	subs	r2, #21
 800d89e:	f022 0203 	bic.w	r2, r2, #3
 800d8a2:	3204      	adds	r2, #4
 800d8a4:	f104 0115 	add.w	r1, r4, #21
 800d8a8:	428f      	cmp	r7, r1
 800d8aa:	bf38      	it	cc
 800d8ac:	2204      	movcc	r2, #4
 800d8ae:	9201      	str	r2, [sp, #4]
 800d8b0:	9a02      	ldr	r2, [sp, #8]
 800d8b2:	9303      	str	r3, [sp, #12]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d80c      	bhi.n	800d8d2 <__multiply+0x9e>
 800d8b8:	2e00      	cmp	r6, #0
 800d8ba:	dd03      	ble.n	800d8c4 <__multiply+0x90>
 800d8bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d05a      	beq.n	800d97a <__multiply+0x146>
 800d8c4:	6106      	str	r6, [r0, #16]
 800d8c6:	b005      	add	sp, #20
 800d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8cc:	f843 2b04 	str.w	r2, [r3], #4
 800d8d0:	e7d8      	b.n	800d884 <__multiply+0x50>
 800d8d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8d6:	f1ba 0f00 	cmp.w	sl, #0
 800d8da:	d024      	beq.n	800d926 <__multiply+0xf2>
 800d8dc:	f104 0e14 	add.w	lr, r4, #20
 800d8e0:	46a9      	mov	r9, r5
 800d8e2:	f04f 0c00 	mov.w	ip, #0
 800d8e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d8ea:	f8d9 1000 	ldr.w	r1, [r9]
 800d8ee:	fa1f fb82 	uxth.w	fp, r2
 800d8f2:	b289      	uxth	r1, r1
 800d8f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d8f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d8fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d900:	4461      	add	r1, ip
 800d902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d906:	fb0a c20b 	mla	r2, sl, fp, ip
 800d90a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d90e:	b289      	uxth	r1, r1
 800d910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d914:	4577      	cmp	r7, lr
 800d916:	f849 1b04 	str.w	r1, [r9], #4
 800d91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d91e:	d8e2      	bhi.n	800d8e6 <__multiply+0xb2>
 800d920:	9a01      	ldr	r2, [sp, #4]
 800d922:	f845 c002 	str.w	ip, [r5, r2]
 800d926:	9a03      	ldr	r2, [sp, #12]
 800d928:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d92c:	3304      	adds	r3, #4
 800d92e:	f1b9 0f00 	cmp.w	r9, #0
 800d932:	d020      	beq.n	800d976 <__multiply+0x142>
 800d934:	6829      	ldr	r1, [r5, #0]
 800d936:	f104 0c14 	add.w	ip, r4, #20
 800d93a:	46ae      	mov	lr, r5
 800d93c:	f04f 0a00 	mov.w	sl, #0
 800d940:	f8bc b000 	ldrh.w	fp, [ip]
 800d944:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d948:	fb09 220b 	mla	r2, r9, fp, r2
 800d94c:	4492      	add	sl, r2
 800d94e:	b289      	uxth	r1, r1
 800d950:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d954:	f84e 1b04 	str.w	r1, [lr], #4
 800d958:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d95c:	f8be 1000 	ldrh.w	r1, [lr]
 800d960:	0c12      	lsrs	r2, r2, #16
 800d962:	fb09 1102 	mla	r1, r9, r2, r1
 800d966:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d96a:	4567      	cmp	r7, ip
 800d96c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d970:	d8e6      	bhi.n	800d940 <__multiply+0x10c>
 800d972:	9a01      	ldr	r2, [sp, #4]
 800d974:	50a9      	str	r1, [r5, r2]
 800d976:	3504      	adds	r5, #4
 800d978:	e79a      	b.n	800d8b0 <__multiply+0x7c>
 800d97a:	3e01      	subs	r6, #1
 800d97c:	e79c      	b.n	800d8b8 <__multiply+0x84>
 800d97e:	bf00      	nop
 800d980:	0800f788 	.word	0x0800f788
 800d984:	0800f82b 	.word	0x0800f82b

0800d988 <__pow5mult>:
 800d988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d98c:	4615      	mov	r5, r2
 800d98e:	f012 0203 	ands.w	r2, r2, #3
 800d992:	4606      	mov	r6, r0
 800d994:	460f      	mov	r7, r1
 800d996:	d007      	beq.n	800d9a8 <__pow5mult+0x20>
 800d998:	4c25      	ldr	r4, [pc, #148]	; (800da30 <__pow5mult+0xa8>)
 800d99a:	3a01      	subs	r2, #1
 800d99c:	2300      	movs	r3, #0
 800d99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9a2:	f7ff fe51 	bl	800d648 <__multadd>
 800d9a6:	4607      	mov	r7, r0
 800d9a8:	10ad      	asrs	r5, r5, #2
 800d9aa:	d03d      	beq.n	800da28 <__pow5mult+0xa0>
 800d9ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9ae:	b97c      	cbnz	r4, 800d9d0 <__pow5mult+0x48>
 800d9b0:	2010      	movs	r0, #16
 800d9b2:	f7fe f811 	bl	800b9d8 <malloc>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	6270      	str	r0, [r6, #36]	; 0x24
 800d9ba:	b928      	cbnz	r0, 800d9c8 <__pow5mult+0x40>
 800d9bc:	4b1d      	ldr	r3, [pc, #116]	; (800da34 <__pow5mult+0xac>)
 800d9be:	481e      	ldr	r0, [pc, #120]	; (800da38 <__pow5mult+0xb0>)
 800d9c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d9c4:	f000 ff56 	bl	800e874 <__assert_func>
 800d9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9cc:	6004      	str	r4, [r0, #0]
 800d9ce:	60c4      	str	r4, [r0, #12]
 800d9d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9d8:	b94c      	cbnz	r4, 800d9ee <__pow5mult+0x66>
 800d9da:	f240 2171 	movw	r1, #625	; 0x271
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f7ff ff12 	bl	800d808 <__i2b>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	6003      	str	r3, [r0, #0]
 800d9ee:	f04f 0900 	mov.w	r9, #0
 800d9f2:	07eb      	lsls	r3, r5, #31
 800d9f4:	d50a      	bpl.n	800da0c <__pow5mult+0x84>
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f7ff ff1a 	bl	800d834 <__multiply>
 800da00:	4639      	mov	r1, r7
 800da02:	4680      	mov	r8, r0
 800da04:	4630      	mov	r0, r6
 800da06:	f7ff fdfd 	bl	800d604 <_Bfree>
 800da0a:	4647      	mov	r7, r8
 800da0c:	106d      	asrs	r5, r5, #1
 800da0e:	d00b      	beq.n	800da28 <__pow5mult+0xa0>
 800da10:	6820      	ldr	r0, [r4, #0]
 800da12:	b938      	cbnz	r0, 800da24 <__pow5mult+0x9c>
 800da14:	4622      	mov	r2, r4
 800da16:	4621      	mov	r1, r4
 800da18:	4630      	mov	r0, r6
 800da1a:	f7ff ff0b 	bl	800d834 <__multiply>
 800da1e:	6020      	str	r0, [r4, #0]
 800da20:	f8c0 9000 	str.w	r9, [r0]
 800da24:	4604      	mov	r4, r0
 800da26:	e7e4      	b.n	800d9f2 <__pow5mult+0x6a>
 800da28:	4638      	mov	r0, r7
 800da2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da2e:	bf00      	nop
 800da30:	0800f978 	.word	0x0800f978
 800da34:	0800f814 	.word	0x0800f814
 800da38:	0800f82b 	.word	0x0800f82b

0800da3c <__lshift>:
 800da3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da40:	460c      	mov	r4, r1
 800da42:	6849      	ldr	r1, [r1, #4]
 800da44:	6923      	ldr	r3, [r4, #16]
 800da46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da4a:	68a3      	ldr	r3, [r4, #8]
 800da4c:	4607      	mov	r7, r0
 800da4e:	4691      	mov	r9, r2
 800da50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da54:	f108 0601 	add.w	r6, r8, #1
 800da58:	42b3      	cmp	r3, r6
 800da5a:	db0b      	blt.n	800da74 <__lshift+0x38>
 800da5c:	4638      	mov	r0, r7
 800da5e:	f7ff fd91 	bl	800d584 <_Balloc>
 800da62:	4605      	mov	r5, r0
 800da64:	b948      	cbnz	r0, 800da7a <__lshift+0x3e>
 800da66:	4602      	mov	r2, r0
 800da68:	4b2a      	ldr	r3, [pc, #168]	; (800db14 <__lshift+0xd8>)
 800da6a:	482b      	ldr	r0, [pc, #172]	; (800db18 <__lshift+0xdc>)
 800da6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da70:	f000 ff00 	bl	800e874 <__assert_func>
 800da74:	3101      	adds	r1, #1
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	e7ee      	b.n	800da58 <__lshift+0x1c>
 800da7a:	2300      	movs	r3, #0
 800da7c:	f100 0114 	add.w	r1, r0, #20
 800da80:	f100 0210 	add.w	r2, r0, #16
 800da84:	4618      	mov	r0, r3
 800da86:	4553      	cmp	r3, sl
 800da88:	db37      	blt.n	800dafa <__lshift+0xbe>
 800da8a:	6920      	ldr	r0, [r4, #16]
 800da8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da90:	f104 0314 	add.w	r3, r4, #20
 800da94:	f019 091f 	ands.w	r9, r9, #31
 800da98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800daa0:	d02f      	beq.n	800db02 <__lshift+0xc6>
 800daa2:	f1c9 0e20 	rsb	lr, r9, #32
 800daa6:	468a      	mov	sl, r1
 800daa8:	f04f 0c00 	mov.w	ip, #0
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	fa02 f209 	lsl.w	r2, r2, r9
 800dab2:	ea42 020c 	orr.w	r2, r2, ip
 800dab6:	f84a 2b04 	str.w	r2, [sl], #4
 800daba:	f853 2b04 	ldr.w	r2, [r3], #4
 800dabe:	4298      	cmp	r0, r3
 800dac0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dac4:	d8f2      	bhi.n	800daac <__lshift+0x70>
 800dac6:	1b03      	subs	r3, r0, r4
 800dac8:	3b15      	subs	r3, #21
 800daca:	f023 0303 	bic.w	r3, r3, #3
 800dace:	3304      	adds	r3, #4
 800dad0:	f104 0215 	add.w	r2, r4, #21
 800dad4:	4290      	cmp	r0, r2
 800dad6:	bf38      	it	cc
 800dad8:	2304      	movcc	r3, #4
 800dada:	f841 c003 	str.w	ip, [r1, r3]
 800dade:	f1bc 0f00 	cmp.w	ip, #0
 800dae2:	d001      	beq.n	800dae8 <__lshift+0xac>
 800dae4:	f108 0602 	add.w	r6, r8, #2
 800dae8:	3e01      	subs	r6, #1
 800daea:	4638      	mov	r0, r7
 800daec:	612e      	str	r6, [r5, #16]
 800daee:	4621      	mov	r1, r4
 800daf0:	f7ff fd88 	bl	800d604 <_Bfree>
 800daf4:	4628      	mov	r0, r5
 800daf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800dafe:	3301      	adds	r3, #1
 800db00:	e7c1      	b.n	800da86 <__lshift+0x4a>
 800db02:	3904      	subs	r1, #4
 800db04:	f853 2b04 	ldr.w	r2, [r3], #4
 800db08:	f841 2f04 	str.w	r2, [r1, #4]!
 800db0c:	4298      	cmp	r0, r3
 800db0e:	d8f9      	bhi.n	800db04 <__lshift+0xc8>
 800db10:	e7ea      	b.n	800dae8 <__lshift+0xac>
 800db12:	bf00      	nop
 800db14:	0800f788 	.word	0x0800f788
 800db18:	0800f82b 	.word	0x0800f82b

0800db1c <__mcmp>:
 800db1c:	b530      	push	{r4, r5, lr}
 800db1e:	6902      	ldr	r2, [r0, #16]
 800db20:	690c      	ldr	r4, [r1, #16]
 800db22:	1b12      	subs	r2, r2, r4
 800db24:	d10e      	bne.n	800db44 <__mcmp+0x28>
 800db26:	f100 0314 	add.w	r3, r0, #20
 800db2a:	3114      	adds	r1, #20
 800db2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db3c:	42a5      	cmp	r5, r4
 800db3e:	d003      	beq.n	800db48 <__mcmp+0x2c>
 800db40:	d305      	bcc.n	800db4e <__mcmp+0x32>
 800db42:	2201      	movs	r2, #1
 800db44:	4610      	mov	r0, r2
 800db46:	bd30      	pop	{r4, r5, pc}
 800db48:	4283      	cmp	r3, r0
 800db4a:	d3f3      	bcc.n	800db34 <__mcmp+0x18>
 800db4c:	e7fa      	b.n	800db44 <__mcmp+0x28>
 800db4e:	f04f 32ff 	mov.w	r2, #4294967295
 800db52:	e7f7      	b.n	800db44 <__mcmp+0x28>

0800db54 <__mdiff>:
 800db54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db58:	460c      	mov	r4, r1
 800db5a:	4606      	mov	r6, r0
 800db5c:	4611      	mov	r1, r2
 800db5e:	4620      	mov	r0, r4
 800db60:	4690      	mov	r8, r2
 800db62:	f7ff ffdb 	bl	800db1c <__mcmp>
 800db66:	1e05      	subs	r5, r0, #0
 800db68:	d110      	bne.n	800db8c <__mdiff+0x38>
 800db6a:	4629      	mov	r1, r5
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7ff fd09 	bl	800d584 <_Balloc>
 800db72:	b930      	cbnz	r0, 800db82 <__mdiff+0x2e>
 800db74:	4b3a      	ldr	r3, [pc, #232]	; (800dc60 <__mdiff+0x10c>)
 800db76:	4602      	mov	r2, r0
 800db78:	f240 2132 	movw	r1, #562	; 0x232
 800db7c:	4839      	ldr	r0, [pc, #228]	; (800dc64 <__mdiff+0x110>)
 800db7e:	f000 fe79 	bl	800e874 <__assert_func>
 800db82:	2301      	movs	r3, #1
 800db84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	bfa4      	itt	ge
 800db8e:	4643      	movge	r3, r8
 800db90:	46a0      	movge	r8, r4
 800db92:	4630      	mov	r0, r6
 800db94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db98:	bfa6      	itte	ge
 800db9a:	461c      	movge	r4, r3
 800db9c:	2500      	movge	r5, #0
 800db9e:	2501      	movlt	r5, #1
 800dba0:	f7ff fcf0 	bl	800d584 <_Balloc>
 800dba4:	b920      	cbnz	r0, 800dbb0 <__mdiff+0x5c>
 800dba6:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <__mdiff+0x10c>)
 800dba8:	4602      	mov	r2, r0
 800dbaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbae:	e7e5      	b.n	800db7c <__mdiff+0x28>
 800dbb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbb4:	6926      	ldr	r6, [r4, #16]
 800dbb6:	60c5      	str	r5, [r0, #12]
 800dbb8:	f104 0914 	add.w	r9, r4, #20
 800dbbc:	f108 0514 	add.w	r5, r8, #20
 800dbc0:	f100 0e14 	add.w	lr, r0, #20
 800dbc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbcc:	f108 0210 	add.w	r2, r8, #16
 800dbd0:	46f2      	mov	sl, lr
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dbdc:	fa1f f883 	uxth.w	r8, r3
 800dbe0:	fa11 f18b 	uxtah	r1, r1, fp
 800dbe4:	0c1b      	lsrs	r3, r3, #16
 800dbe6:	eba1 0808 	sub.w	r8, r1, r8
 800dbea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dbee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dbf2:	fa1f f888 	uxth.w	r8, r8
 800dbf6:	1419      	asrs	r1, r3, #16
 800dbf8:	454e      	cmp	r6, r9
 800dbfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dbfe:	f84a 3b04 	str.w	r3, [sl], #4
 800dc02:	d8e7      	bhi.n	800dbd4 <__mdiff+0x80>
 800dc04:	1b33      	subs	r3, r6, r4
 800dc06:	3b15      	subs	r3, #21
 800dc08:	f023 0303 	bic.w	r3, r3, #3
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	3415      	adds	r4, #21
 800dc10:	42a6      	cmp	r6, r4
 800dc12:	bf38      	it	cc
 800dc14:	2304      	movcc	r3, #4
 800dc16:	441d      	add	r5, r3
 800dc18:	4473      	add	r3, lr
 800dc1a:	469e      	mov	lr, r3
 800dc1c:	462e      	mov	r6, r5
 800dc1e:	4566      	cmp	r6, ip
 800dc20:	d30e      	bcc.n	800dc40 <__mdiff+0xec>
 800dc22:	f10c 0203 	add.w	r2, ip, #3
 800dc26:	1b52      	subs	r2, r2, r5
 800dc28:	f022 0203 	bic.w	r2, r2, #3
 800dc2c:	3d03      	subs	r5, #3
 800dc2e:	45ac      	cmp	ip, r5
 800dc30:	bf38      	it	cc
 800dc32:	2200      	movcc	r2, #0
 800dc34:	441a      	add	r2, r3
 800dc36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc3a:	b17b      	cbz	r3, 800dc5c <__mdiff+0x108>
 800dc3c:	6107      	str	r7, [r0, #16]
 800dc3e:	e7a3      	b.n	800db88 <__mdiff+0x34>
 800dc40:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc44:	fa11 f288 	uxtah	r2, r1, r8
 800dc48:	1414      	asrs	r4, r2, #16
 800dc4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc4e:	b292      	uxth	r2, r2
 800dc50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc54:	f84e 2b04 	str.w	r2, [lr], #4
 800dc58:	1421      	asrs	r1, r4, #16
 800dc5a:	e7e0      	b.n	800dc1e <__mdiff+0xca>
 800dc5c:	3f01      	subs	r7, #1
 800dc5e:	e7ea      	b.n	800dc36 <__mdiff+0xe2>
 800dc60:	0800f788 	.word	0x0800f788
 800dc64:	0800f82b 	.word	0x0800f82b

0800dc68 <__ulp>:
 800dc68:	b082      	sub	sp, #8
 800dc6a:	ed8d 0b00 	vstr	d0, [sp]
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	4912      	ldr	r1, [pc, #72]	; (800dcbc <__ulp+0x54>)
 800dc72:	4019      	ands	r1, r3
 800dc74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dc78:	2900      	cmp	r1, #0
 800dc7a:	dd05      	ble.n	800dc88 <__ulp+0x20>
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	ec43 2b10 	vmov	d0, r2, r3
 800dc84:	b002      	add	sp, #8
 800dc86:	4770      	bx	lr
 800dc88:	4249      	negs	r1, r1
 800dc8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dc8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dc92:	f04f 0200 	mov.w	r2, #0
 800dc96:	f04f 0300 	mov.w	r3, #0
 800dc9a:	da04      	bge.n	800dca6 <__ulp+0x3e>
 800dc9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dca0:	fa41 f300 	asr.w	r3, r1, r0
 800dca4:	e7ec      	b.n	800dc80 <__ulp+0x18>
 800dca6:	f1a0 0114 	sub.w	r1, r0, #20
 800dcaa:	291e      	cmp	r1, #30
 800dcac:	bfda      	itte	le
 800dcae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dcb2:	fa20 f101 	lsrle.w	r1, r0, r1
 800dcb6:	2101      	movgt	r1, #1
 800dcb8:	460a      	mov	r2, r1
 800dcba:	e7e1      	b.n	800dc80 <__ulp+0x18>
 800dcbc:	7ff00000 	.word	0x7ff00000

0800dcc0 <__b2d>:
 800dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc2:	6905      	ldr	r5, [r0, #16]
 800dcc4:	f100 0714 	add.w	r7, r0, #20
 800dcc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dccc:	1f2e      	subs	r6, r5, #4
 800dcce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f7ff fd48 	bl	800d768 <__hi0bits>
 800dcd8:	f1c0 0320 	rsb	r3, r0, #32
 800dcdc:	280a      	cmp	r0, #10
 800dcde:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd5c <__b2d+0x9c>
 800dce2:	600b      	str	r3, [r1, #0]
 800dce4:	dc14      	bgt.n	800dd10 <__b2d+0x50>
 800dce6:	f1c0 0e0b 	rsb	lr, r0, #11
 800dcea:	fa24 f10e 	lsr.w	r1, r4, lr
 800dcee:	42b7      	cmp	r7, r6
 800dcf0:	ea41 030c 	orr.w	r3, r1, ip
 800dcf4:	bf34      	ite	cc
 800dcf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dcfa:	2100      	movcs	r1, #0
 800dcfc:	3015      	adds	r0, #21
 800dcfe:	fa04 f000 	lsl.w	r0, r4, r0
 800dd02:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd06:	ea40 0201 	orr.w	r2, r0, r1
 800dd0a:	ec43 2b10 	vmov	d0, r2, r3
 800dd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd10:	42b7      	cmp	r7, r6
 800dd12:	bf3a      	itte	cc
 800dd14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd18:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd1c:	2100      	movcs	r1, #0
 800dd1e:	380b      	subs	r0, #11
 800dd20:	d017      	beq.n	800dd52 <__b2d+0x92>
 800dd22:	f1c0 0c20 	rsb	ip, r0, #32
 800dd26:	fa04 f500 	lsl.w	r5, r4, r0
 800dd2a:	42be      	cmp	r6, r7
 800dd2c:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd30:	ea45 0504 	orr.w	r5, r5, r4
 800dd34:	bf8c      	ite	hi
 800dd36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd3a:	2400      	movls	r4, #0
 800dd3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd40:	fa01 f000 	lsl.w	r0, r1, r0
 800dd44:	fa24 f40c 	lsr.w	r4, r4, ip
 800dd48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd4c:	ea40 0204 	orr.w	r2, r0, r4
 800dd50:	e7db      	b.n	800dd0a <__b2d+0x4a>
 800dd52:	ea44 030c 	orr.w	r3, r4, ip
 800dd56:	460a      	mov	r2, r1
 800dd58:	e7d7      	b.n	800dd0a <__b2d+0x4a>
 800dd5a:	bf00      	nop
 800dd5c:	3ff00000 	.word	0x3ff00000

0800dd60 <__d2b>:
 800dd60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd64:	4689      	mov	r9, r1
 800dd66:	2101      	movs	r1, #1
 800dd68:	ec57 6b10 	vmov	r6, r7, d0
 800dd6c:	4690      	mov	r8, r2
 800dd6e:	f7ff fc09 	bl	800d584 <_Balloc>
 800dd72:	4604      	mov	r4, r0
 800dd74:	b930      	cbnz	r0, 800dd84 <__d2b+0x24>
 800dd76:	4602      	mov	r2, r0
 800dd78:	4b25      	ldr	r3, [pc, #148]	; (800de10 <__d2b+0xb0>)
 800dd7a:	4826      	ldr	r0, [pc, #152]	; (800de14 <__d2b+0xb4>)
 800dd7c:	f240 310a 	movw	r1, #778	; 0x30a
 800dd80:	f000 fd78 	bl	800e874 <__assert_func>
 800dd84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd8c:	bb35      	cbnz	r5, 800dddc <__d2b+0x7c>
 800dd8e:	2e00      	cmp	r6, #0
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	d028      	beq.n	800dde6 <__d2b+0x86>
 800dd94:	4668      	mov	r0, sp
 800dd96:	9600      	str	r6, [sp, #0]
 800dd98:	f7ff fd06 	bl	800d7a8 <__lo0bits>
 800dd9c:	9900      	ldr	r1, [sp, #0]
 800dd9e:	b300      	cbz	r0, 800dde2 <__d2b+0x82>
 800dda0:	9a01      	ldr	r2, [sp, #4]
 800dda2:	f1c0 0320 	rsb	r3, r0, #32
 800dda6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddaa:	430b      	orrs	r3, r1
 800ddac:	40c2      	lsrs	r2, r0
 800ddae:	6163      	str	r3, [r4, #20]
 800ddb0:	9201      	str	r2, [sp, #4]
 800ddb2:	9b01      	ldr	r3, [sp, #4]
 800ddb4:	61a3      	str	r3, [r4, #24]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bf14      	ite	ne
 800ddba:	2202      	movne	r2, #2
 800ddbc:	2201      	moveq	r2, #1
 800ddbe:	6122      	str	r2, [r4, #16]
 800ddc0:	b1d5      	cbz	r5, 800ddf8 <__d2b+0x98>
 800ddc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddc6:	4405      	add	r5, r0
 800ddc8:	f8c9 5000 	str.w	r5, [r9]
 800ddcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddd0:	f8c8 0000 	str.w	r0, [r8]
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	b003      	add	sp, #12
 800ddd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dde0:	e7d5      	b.n	800dd8e <__d2b+0x2e>
 800dde2:	6161      	str	r1, [r4, #20]
 800dde4:	e7e5      	b.n	800ddb2 <__d2b+0x52>
 800dde6:	a801      	add	r0, sp, #4
 800dde8:	f7ff fcde 	bl	800d7a8 <__lo0bits>
 800ddec:	9b01      	ldr	r3, [sp, #4]
 800ddee:	6163      	str	r3, [r4, #20]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	6122      	str	r2, [r4, #16]
 800ddf4:	3020      	adds	r0, #32
 800ddf6:	e7e3      	b.n	800ddc0 <__d2b+0x60>
 800ddf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de00:	f8c9 0000 	str.w	r0, [r9]
 800de04:	6918      	ldr	r0, [r3, #16]
 800de06:	f7ff fcaf 	bl	800d768 <__hi0bits>
 800de0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de0e:	e7df      	b.n	800ddd0 <__d2b+0x70>
 800de10:	0800f788 	.word	0x0800f788
 800de14:	0800f82b 	.word	0x0800f82b

0800de18 <__ratio>:
 800de18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	4688      	mov	r8, r1
 800de1e:	4669      	mov	r1, sp
 800de20:	4681      	mov	r9, r0
 800de22:	f7ff ff4d 	bl	800dcc0 <__b2d>
 800de26:	a901      	add	r1, sp, #4
 800de28:	4640      	mov	r0, r8
 800de2a:	ec55 4b10 	vmov	r4, r5, d0
 800de2e:	f7ff ff47 	bl	800dcc0 <__b2d>
 800de32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de3a:	eba3 0c02 	sub.w	ip, r3, r2
 800de3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de48:	ec51 0b10 	vmov	r0, r1, d0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bfd6      	itet	le
 800de50:	460a      	movle	r2, r1
 800de52:	462a      	movgt	r2, r5
 800de54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de58:	468b      	mov	fp, r1
 800de5a:	462f      	mov	r7, r5
 800de5c:	bfd4      	ite	le
 800de5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de66:	4620      	mov	r0, r4
 800de68:	ee10 2a10 	vmov	r2, s0
 800de6c:	465b      	mov	r3, fp
 800de6e:	4639      	mov	r1, r7
 800de70:	f7f2 fcc4 	bl	80007fc <__aeabi_ddiv>
 800de74:	ec41 0b10 	vmov	d0, r0, r1
 800de78:	b003      	add	sp, #12
 800de7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de7e <__copybits>:
 800de7e:	3901      	subs	r1, #1
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	1149      	asrs	r1, r1, #5
 800de84:	6914      	ldr	r4, [r2, #16]
 800de86:	3101      	adds	r1, #1
 800de88:	f102 0314 	add.w	r3, r2, #20
 800de8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de94:	1f05      	subs	r5, r0, #4
 800de96:	42a3      	cmp	r3, r4
 800de98:	d30c      	bcc.n	800deb4 <__copybits+0x36>
 800de9a:	1aa3      	subs	r3, r4, r2
 800de9c:	3b11      	subs	r3, #17
 800de9e:	f023 0303 	bic.w	r3, r3, #3
 800dea2:	3211      	adds	r2, #17
 800dea4:	42a2      	cmp	r2, r4
 800dea6:	bf88      	it	hi
 800dea8:	2300      	movhi	r3, #0
 800deaa:	4418      	add	r0, r3
 800deac:	2300      	movs	r3, #0
 800deae:	4288      	cmp	r0, r1
 800deb0:	d305      	bcc.n	800debe <__copybits+0x40>
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800deb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800debc:	e7eb      	b.n	800de96 <__copybits+0x18>
 800debe:	f840 3b04 	str.w	r3, [r0], #4
 800dec2:	e7f4      	b.n	800deae <__copybits+0x30>

0800dec4 <__any_on>:
 800dec4:	f100 0214 	add.w	r2, r0, #20
 800dec8:	6900      	ldr	r0, [r0, #16]
 800deca:	114b      	asrs	r3, r1, #5
 800decc:	4298      	cmp	r0, r3
 800dece:	b510      	push	{r4, lr}
 800ded0:	db11      	blt.n	800def6 <__any_on+0x32>
 800ded2:	dd0a      	ble.n	800deea <__any_on+0x26>
 800ded4:	f011 011f 	ands.w	r1, r1, #31
 800ded8:	d007      	beq.n	800deea <__any_on+0x26>
 800deda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dede:	fa24 f001 	lsr.w	r0, r4, r1
 800dee2:	fa00 f101 	lsl.w	r1, r0, r1
 800dee6:	428c      	cmp	r4, r1
 800dee8:	d10b      	bne.n	800df02 <__any_on+0x3e>
 800deea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800deee:	4293      	cmp	r3, r2
 800def0:	d803      	bhi.n	800defa <__any_on+0x36>
 800def2:	2000      	movs	r0, #0
 800def4:	bd10      	pop	{r4, pc}
 800def6:	4603      	mov	r3, r0
 800def8:	e7f7      	b.n	800deea <__any_on+0x26>
 800defa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800defe:	2900      	cmp	r1, #0
 800df00:	d0f5      	beq.n	800deee <__any_on+0x2a>
 800df02:	2001      	movs	r0, #1
 800df04:	e7f6      	b.n	800def4 <__any_on+0x30>

0800df06 <_calloc_r>:
 800df06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df08:	fba1 2402 	umull	r2, r4, r1, r2
 800df0c:	b94c      	cbnz	r4, 800df22 <_calloc_r+0x1c>
 800df0e:	4611      	mov	r1, r2
 800df10:	9201      	str	r2, [sp, #4]
 800df12:	f7fd fe0d 	bl	800bb30 <_malloc_r>
 800df16:	9a01      	ldr	r2, [sp, #4]
 800df18:	4605      	mov	r5, r0
 800df1a:	b930      	cbnz	r0, 800df2a <_calloc_r+0x24>
 800df1c:	4628      	mov	r0, r5
 800df1e:	b003      	add	sp, #12
 800df20:	bd30      	pop	{r4, r5, pc}
 800df22:	220c      	movs	r2, #12
 800df24:	6002      	str	r2, [r0, #0]
 800df26:	2500      	movs	r5, #0
 800df28:	e7f8      	b.n	800df1c <_calloc_r+0x16>
 800df2a:	4621      	mov	r1, r4
 800df2c:	f7fd fd8c 	bl	800ba48 <memset>
 800df30:	e7f4      	b.n	800df1c <_calloc_r+0x16>

0800df32 <_realloc_r>:
 800df32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df36:	4680      	mov	r8, r0
 800df38:	4614      	mov	r4, r2
 800df3a:	460e      	mov	r6, r1
 800df3c:	b921      	cbnz	r1, 800df48 <_realloc_r+0x16>
 800df3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df42:	4611      	mov	r1, r2
 800df44:	f7fd bdf4 	b.w	800bb30 <_malloc_r>
 800df48:	b92a      	cbnz	r2, 800df56 <_realloc_r+0x24>
 800df4a:	f7fd fd85 	bl	800ba58 <_free_r>
 800df4e:	4625      	mov	r5, r4
 800df50:	4628      	mov	r0, r5
 800df52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df56:	f000 fcbd 	bl	800e8d4 <_malloc_usable_size_r>
 800df5a:	4284      	cmp	r4, r0
 800df5c:	4607      	mov	r7, r0
 800df5e:	d802      	bhi.n	800df66 <_realloc_r+0x34>
 800df60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df64:	d812      	bhi.n	800df8c <_realloc_r+0x5a>
 800df66:	4621      	mov	r1, r4
 800df68:	4640      	mov	r0, r8
 800df6a:	f7fd fde1 	bl	800bb30 <_malloc_r>
 800df6e:	4605      	mov	r5, r0
 800df70:	2800      	cmp	r0, #0
 800df72:	d0ed      	beq.n	800df50 <_realloc_r+0x1e>
 800df74:	42bc      	cmp	r4, r7
 800df76:	4622      	mov	r2, r4
 800df78:	4631      	mov	r1, r6
 800df7a:	bf28      	it	cs
 800df7c:	463a      	movcs	r2, r7
 800df7e:	f7fd fd3b 	bl	800b9f8 <memcpy>
 800df82:	4631      	mov	r1, r6
 800df84:	4640      	mov	r0, r8
 800df86:	f7fd fd67 	bl	800ba58 <_free_r>
 800df8a:	e7e1      	b.n	800df50 <_realloc_r+0x1e>
 800df8c:	4635      	mov	r5, r6
 800df8e:	e7df      	b.n	800df50 <_realloc_r+0x1e>

0800df90 <__ssputs_r>:
 800df90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df94:	688e      	ldr	r6, [r1, #8]
 800df96:	429e      	cmp	r6, r3
 800df98:	4682      	mov	sl, r0
 800df9a:	460c      	mov	r4, r1
 800df9c:	4690      	mov	r8, r2
 800df9e:	461f      	mov	r7, r3
 800dfa0:	d838      	bhi.n	800e014 <__ssputs_r+0x84>
 800dfa2:	898a      	ldrh	r2, [r1, #12]
 800dfa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfa8:	d032      	beq.n	800e010 <__ssputs_r+0x80>
 800dfaa:	6825      	ldr	r5, [r4, #0]
 800dfac:	6909      	ldr	r1, [r1, #16]
 800dfae:	eba5 0901 	sub.w	r9, r5, r1
 800dfb2:	6965      	ldr	r5, [r4, #20]
 800dfb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	444b      	add	r3, r9
 800dfc0:	106d      	asrs	r5, r5, #1
 800dfc2:	429d      	cmp	r5, r3
 800dfc4:	bf38      	it	cc
 800dfc6:	461d      	movcc	r5, r3
 800dfc8:	0553      	lsls	r3, r2, #21
 800dfca:	d531      	bpl.n	800e030 <__ssputs_r+0xa0>
 800dfcc:	4629      	mov	r1, r5
 800dfce:	f7fd fdaf 	bl	800bb30 <_malloc_r>
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	b950      	cbnz	r0, 800dfec <__ssputs_r+0x5c>
 800dfd6:	230c      	movs	r3, #12
 800dfd8:	f8ca 3000 	str.w	r3, [sl]
 800dfdc:	89a3      	ldrh	r3, [r4, #12]
 800dfde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe2:	81a3      	strh	r3, [r4, #12]
 800dfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfec:	6921      	ldr	r1, [r4, #16]
 800dfee:	464a      	mov	r2, r9
 800dff0:	f7fd fd02 	bl	800b9f8 <memcpy>
 800dff4:	89a3      	ldrh	r3, [r4, #12]
 800dff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dffe:	81a3      	strh	r3, [r4, #12]
 800e000:	6126      	str	r6, [r4, #16]
 800e002:	6165      	str	r5, [r4, #20]
 800e004:	444e      	add	r6, r9
 800e006:	eba5 0509 	sub.w	r5, r5, r9
 800e00a:	6026      	str	r6, [r4, #0]
 800e00c:	60a5      	str	r5, [r4, #8]
 800e00e:	463e      	mov	r6, r7
 800e010:	42be      	cmp	r6, r7
 800e012:	d900      	bls.n	800e016 <__ssputs_r+0x86>
 800e014:	463e      	mov	r6, r7
 800e016:	6820      	ldr	r0, [r4, #0]
 800e018:	4632      	mov	r2, r6
 800e01a:	4641      	mov	r1, r8
 800e01c:	f7fd fcfa 	bl	800ba14 <memmove>
 800e020:	68a3      	ldr	r3, [r4, #8]
 800e022:	1b9b      	subs	r3, r3, r6
 800e024:	60a3      	str	r3, [r4, #8]
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	4433      	add	r3, r6
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	2000      	movs	r0, #0
 800e02e:	e7db      	b.n	800dfe8 <__ssputs_r+0x58>
 800e030:	462a      	mov	r2, r5
 800e032:	f7ff ff7e 	bl	800df32 <_realloc_r>
 800e036:	4606      	mov	r6, r0
 800e038:	2800      	cmp	r0, #0
 800e03a:	d1e1      	bne.n	800e000 <__ssputs_r+0x70>
 800e03c:	6921      	ldr	r1, [r4, #16]
 800e03e:	4650      	mov	r0, sl
 800e040:	f7fd fd0a 	bl	800ba58 <_free_r>
 800e044:	e7c7      	b.n	800dfd6 <__ssputs_r+0x46>
	...

0800e048 <_svfiprintf_r>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	4698      	mov	r8, r3
 800e04e:	898b      	ldrh	r3, [r1, #12]
 800e050:	061b      	lsls	r3, r3, #24
 800e052:	b09d      	sub	sp, #116	; 0x74
 800e054:	4607      	mov	r7, r0
 800e056:	460d      	mov	r5, r1
 800e058:	4614      	mov	r4, r2
 800e05a:	d50e      	bpl.n	800e07a <_svfiprintf_r+0x32>
 800e05c:	690b      	ldr	r3, [r1, #16]
 800e05e:	b963      	cbnz	r3, 800e07a <_svfiprintf_r+0x32>
 800e060:	2140      	movs	r1, #64	; 0x40
 800e062:	f7fd fd65 	bl	800bb30 <_malloc_r>
 800e066:	6028      	str	r0, [r5, #0]
 800e068:	6128      	str	r0, [r5, #16]
 800e06a:	b920      	cbnz	r0, 800e076 <_svfiprintf_r+0x2e>
 800e06c:	230c      	movs	r3, #12
 800e06e:	603b      	str	r3, [r7, #0]
 800e070:	f04f 30ff 	mov.w	r0, #4294967295
 800e074:	e0d1      	b.n	800e21a <_svfiprintf_r+0x1d2>
 800e076:	2340      	movs	r3, #64	; 0x40
 800e078:	616b      	str	r3, [r5, #20]
 800e07a:	2300      	movs	r3, #0
 800e07c:	9309      	str	r3, [sp, #36]	; 0x24
 800e07e:	2320      	movs	r3, #32
 800e080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e084:	f8cd 800c 	str.w	r8, [sp, #12]
 800e088:	2330      	movs	r3, #48	; 0x30
 800e08a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e234 <_svfiprintf_r+0x1ec>
 800e08e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e092:	f04f 0901 	mov.w	r9, #1
 800e096:	4623      	mov	r3, r4
 800e098:	469a      	mov	sl, r3
 800e09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e09e:	b10a      	cbz	r2, 800e0a4 <_svfiprintf_r+0x5c>
 800e0a0:	2a25      	cmp	r2, #37	; 0x25
 800e0a2:	d1f9      	bne.n	800e098 <_svfiprintf_r+0x50>
 800e0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800e0a8:	d00b      	beq.n	800e0c2 <_svfiprintf_r+0x7a>
 800e0aa:	465b      	mov	r3, fp
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f7ff ff6d 	bl	800df90 <__ssputs_r>
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	f000 80aa 	beq.w	800e210 <_svfiprintf_r+0x1c8>
 800e0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0be:	445a      	add	r2, fp
 800e0c0:	9209      	str	r2, [sp, #36]	; 0x24
 800e0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f000 80a2 	beq.w	800e210 <_svfiprintf_r+0x1c8>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0d6:	f10a 0a01 	add.w	sl, sl, #1
 800e0da:	9304      	str	r3, [sp, #16]
 800e0dc:	9307      	str	r3, [sp, #28]
 800e0de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0e2:	931a      	str	r3, [sp, #104]	; 0x68
 800e0e4:	4654      	mov	r4, sl
 800e0e6:	2205      	movs	r2, #5
 800e0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ec:	4851      	ldr	r0, [pc, #324]	; (800e234 <_svfiprintf_r+0x1ec>)
 800e0ee:	f7f2 f84f 	bl	8000190 <memchr>
 800e0f2:	9a04      	ldr	r2, [sp, #16]
 800e0f4:	b9d8      	cbnz	r0, 800e12e <_svfiprintf_r+0xe6>
 800e0f6:	06d0      	lsls	r0, r2, #27
 800e0f8:	bf44      	itt	mi
 800e0fa:	2320      	movmi	r3, #32
 800e0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e100:	0711      	lsls	r1, r2, #28
 800e102:	bf44      	itt	mi
 800e104:	232b      	movmi	r3, #43	; 0x2b
 800e106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e10a:	f89a 3000 	ldrb.w	r3, [sl]
 800e10e:	2b2a      	cmp	r3, #42	; 0x2a
 800e110:	d015      	beq.n	800e13e <_svfiprintf_r+0xf6>
 800e112:	9a07      	ldr	r2, [sp, #28]
 800e114:	4654      	mov	r4, sl
 800e116:	2000      	movs	r0, #0
 800e118:	f04f 0c0a 	mov.w	ip, #10
 800e11c:	4621      	mov	r1, r4
 800e11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e122:	3b30      	subs	r3, #48	; 0x30
 800e124:	2b09      	cmp	r3, #9
 800e126:	d94e      	bls.n	800e1c6 <_svfiprintf_r+0x17e>
 800e128:	b1b0      	cbz	r0, 800e158 <_svfiprintf_r+0x110>
 800e12a:	9207      	str	r2, [sp, #28]
 800e12c:	e014      	b.n	800e158 <_svfiprintf_r+0x110>
 800e12e:	eba0 0308 	sub.w	r3, r0, r8
 800e132:	fa09 f303 	lsl.w	r3, r9, r3
 800e136:	4313      	orrs	r3, r2
 800e138:	9304      	str	r3, [sp, #16]
 800e13a:	46a2      	mov	sl, r4
 800e13c:	e7d2      	b.n	800e0e4 <_svfiprintf_r+0x9c>
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	1d19      	adds	r1, r3, #4
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	9103      	str	r1, [sp, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	bfbb      	ittet	lt
 800e14a:	425b      	neglt	r3, r3
 800e14c:	f042 0202 	orrlt.w	r2, r2, #2
 800e150:	9307      	strge	r3, [sp, #28]
 800e152:	9307      	strlt	r3, [sp, #28]
 800e154:	bfb8      	it	lt
 800e156:	9204      	strlt	r2, [sp, #16]
 800e158:	7823      	ldrb	r3, [r4, #0]
 800e15a:	2b2e      	cmp	r3, #46	; 0x2e
 800e15c:	d10c      	bne.n	800e178 <_svfiprintf_r+0x130>
 800e15e:	7863      	ldrb	r3, [r4, #1]
 800e160:	2b2a      	cmp	r3, #42	; 0x2a
 800e162:	d135      	bne.n	800e1d0 <_svfiprintf_r+0x188>
 800e164:	9b03      	ldr	r3, [sp, #12]
 800e166:	1d1a      	adds	r2, r3, #4
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	9203      	str	r2, [sp, #12]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	bfb8      	it	lt
 800e170:	f04f 33ff 	movlt.w	r3, #4294967295
 800e174:	3402      	adds	r4, #2
 800e176:	9305      	str	r3, [sp, #20]
 800e178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e244 <_svfiprintf_r+0x1fc>
 800e17c:	7821      	ldrb	r1, [r4, #0]
 800e17e:	2203      	movs	r2, #3
 800e180:	4650      	mov	r0, sl
 800e182:	f7f2 f805 	bl	8000190 <memchr>
 800e186:	b140      	cbz	r0, 800e19a <_svfiprintf_r+0x152>
 800e188:	2340      	movs	r3, #64	; 0x40
 800e18a:	eba0 000a 	sub.w	r0, r0, sl
 800e18e:	fa03 f000 	lsl.w	r0, r3, r0
 800e192:	9b04      	ldr	r3, [sp, #16]
 800e194:	4303      	orrs	r3, r0
 800e196:	3401      	adds	r4, #1
 800e198:	9304      	str	r3, [sp, #16]
 800e19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e19e:	4826      	ldr	r0, [pc, #152]	; (800e238 <_svfiprintf_r+0x1f0>)
 800e1a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1a4:	2206      	movs	r2, #6
 800e1a6:	f7f1 fff3 	bl	8000190 <memchr>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d038      	beq.n	800e220 <_svfiprintf_r+0x1d8>
 800e1ae:	4b23      	ldr	r3, [pc, #140]	; (800e23c <_svfiprintf_r+0x1f4>)
 800e1b0:	bb1b      	cbnz	r3, 800e1fa <_svfiprintf_r+0x1b2>
 800e1b2:	9b03      	ldr	r3, [sp, #12]
 800e1b4:	3307      	adds	r3, #7
 800e1b6:	f023 0307 	bic.w	r3, r3, #7
 800e1ba:	3308      	adds	r3, #8
 800e1bc:	9303      	str	r3, [sp, #12]
 800e1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1c0:	4433      	add	r3, r6
 800e1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1c4:	e767      	b.n	800e096 <_svfiprintf_r+0x4e>
 800e1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	2001      	movs	r0, #1
 800e1ce:	e7a5      	b.n	800e11c <_svfiprintf_r+0xd4>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	3401      	adds	r4, #1
 800e1d4:	9305      	str	r3, [sp, #20]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	f04f 0c0a 	mov.w	ip, #10
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1e2:	3a30      	subs	r2, #48	; 0x30
 800e1e4:	2a09      	cmp	r2, #9
 800e1e6:	d903      	bls.n	800e1f0 <_svfiprintf_r+0x1a8>
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d0c5      	beq.n	800e178 <_svfiprintf_r+0x130>
 800e1ec:	9105      	str	r1, [sp, #20]
 800e1ee:	e7c3      	b.n	800e178 <_svfiprintf_r+0x130>
 800e1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e7f0      	b.n	800e1dc <_svfiprintf_r+0x194>
 800e1fa:	ab03      	add	r3, sp, #12
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	462a      	mov	r2, r5
 800e200:	4b0f      	ldr	r3, [pc, #60]	; (800e240 <_svfiprintf_r+0x1f8>)
 800e202:	a904      	add	r1, sp, #16
 800e204:	4638      	mov	r0, r7
 800e206:	f3af 8000 	nop.w
 800e20a:	1c42      	adds	r2, r0, #1
 800e20c:	4606      	mov	r6, r0
 800e20e:	d1d6      	bne.n	800e1be <_svfiprintf_r+0x176>
 800e210:	89ab      	ldrh	r3, [r5, #12]
 800e212:	065b      	lsls	r3, r3, #25
 800e214:	f53f af2c 	bmi.w	800e070 <_svfiprintf_r+0x28>
 800e218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e21a:	b01d      	add	sp, #116	; 0x74
 800e21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e220:	ab03      	add	r3, sp, #12
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	462a      	mov	r2, r5
 800e226:	4b06      	ldr	r3, [pc, #24]	; (800e240 <_svfiprintf_r+0x1f8>)
 800e228:	a904      	add	r1, sp, #16
 800e22a:	4638      	mov	r0, r7
 800e22c:	f000 f9d4 	bl	800e5d8 <_printf_i>
 800e230:	e7eb      	b.n	800e20a <_svfiprintf_r+0x1c2>
 800e232:	bf00      	nop
 800e234:	0800f984 	.word	0x0800f984
 800e238:	0800f98e 	.word	0x0800f98e
 800e23c:	00000000 	.word	0x00000000
 800e240:	0800df91 	.word	0x0800df91
 800e244:	0800f98a 	.word	0x0800f98a

0800e248 <__sfputc_r>:
 800e248:	6893      	ldr	r3, [r2, #8]
 800e24a:	3b01      	subs	r3, #1
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	b410      	push	{r4}
 800e250:	6093      	str	r3, [r2, #8]
 800e252:	da08      	bge.n	800e266 <__sfputc_r+0x1e>
 800e254:	6994      	ldr	r4, [r2, #24]
 800e256:	42a3      	cmp	r3, r4
 800e258:	db01      	blt.n	800e25e <__sfputc_r+0x16>
 800e25a:	290a      	cmp	r1, #10
 800e25c:	d103      	bne.n	800e266 <__sfputc_r+0x1e>
 800e25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e262:	f7fe bceb 	b.w	800cc3c <__swbuf_r>
 800e266:	6813      	ldr	r3, [r2, #0]
 800e268:	1c58      	adds	r0, r3, #1
 800e26a:	6010      	str	r0, [r2, #0]
 800e26c:	7019      	strb	r1, [r3, #0]
 800e26e:	4608      	mov	r0, r1
 800e270:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e274:	4770      	bx	lr

0800e276 <__sfputs_r>:
 800e276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e278:	4606      	mov	r6, r0
 800e27a:	460f      	mov	r7, r1
 800e27c:	4614      	mov	r4, r2
 800e27e:	18d5      	adds	r5, r2, r3
 800e280:	42ac      	cmp	r4, r5
 800e282:	d101      	bne.n	800e288 <__sfputs_r+0x12>
 800e284:	2000      	movs	r0, #0
 800e286:	e007      	b.n	800e298 <__sfputs_r+0x22>
 800e288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e28c:	463a      	mov	r2, r7
 800e28e:	4630      	mov	r0, r6
 800e290:	f7ff ffda 	bl	800e248 <__sfputc_r>
 800e294:	1c43      	adds	r3, r0, #1
 800e296:	d1f3      	bne.n	800e280 <__sfputs_r+0xa>
 800e298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e29c <_vfiprintf_r>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	460d      	mov	r5, r1
 800e2a2:	b09d      	sub	sp, #116	; 0x74
 800e2a4:	4614      	mov	r4, r2
 800e2a6:	4698      	mov	r8, r3
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	b118      	cbz	r0, 800e2b4 <_vfiprintf_r+0x18>
 800e2ac:	6983      	ldr	r3, [r0, #24]
 800e2ae:	b90b      	cbnz	r3, 800e2b4 <_vfiprintf_r+0x18>
 800e2b0:	f7fd fa68 	bl	800b784 <__sinit>
 800e2b4:	4b89      	ldr	r3, [pc, #548]	; (800e4dc <_vfiprintf_r+0x240>)
 800e2b6:	429d      	cmp	r5, r3
 800e2b8:	d11b      	bne.n	800e2f2 <_vfiprintf_r+0x56>
 800e2ba:	6875      	ldr	r5, [r6, #4]
 800e2bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2be:	07d9      	lsls	r1, r3, #31
 800e2c0:	d405      	bmi.n	800e2ce <_vfiprintf_r+0x32>
 800e2c2:	89ab      	ldrh	r3, [r5, #12]
 800e2c4:	059a      	lsls	r2, r3, #22
 800e2c6:	d402      	bmi.n	800e2ce <_vfiprintf_r+0x32>
 800e2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2ca:	f7fd fb1e 	bl	800b90a <__retarget_lock_acquire_recursive>
 800e2ce:	89ab      	ldrh	r3, [r5, #12]
 800e2d0:	071b      	lsls	r3, r3, #28
 800e2d2:	d501      	bpl.n	800e2d8 <_vfiprintf_r+0x3c>
 800e2d4:	692b      	ldr	r3, [r5, #16]
 800e2d6:	b9eb      	cbnz	r3, 800e314 <_vfiprintf_r+0x78>
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7fe fd12 	bl	800cd04 <__swsetup_r>
 800e2e0:	b1c0      	cbz	r0, 800e314 <_vfiprintf_r+0x78>
 800e2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2e4:	07dc      	lsls	r4, r3, #31
 800e2e6:	d50e      	bpl.n	800e306 <_vfiprintf_r+0x6a>
 800e2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ec:	b01d      	add	sp, #116	; 0x74
 800e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f2:	4b7b      	ldr	r3, [pc, #492]	; (800e4e0 <_vfiprintf_r+0x244>)
 800e2f4:	429d      	cmp	r5, r3
 800e2f6:	d101      	bne.n	800e2fc <_vfiprintf_r+0x60>
 800e2f8:	68b5      	ldr	r5, [r6, #8]
 800e2fa:	e7df      	b.n	800e2bc <_vfiprintf_r+0x20>
 800e2fc:	4b79      	ldr	r3, [pc, #484]	; (800e4e4 <_vfiprintf_r+0x248>)
 800e2fe:	429d      	cmp	r5, r3
 800e300:	bf08      	it	eq
 800e302:	68f5      	ldreq	r5, [r6, #12]
 800e304:	e7da      	b.n	800e2bc <_vfiprintf_r+0x20>
 800e306:	89ab      	ldrh	r3, [r5, #12]
 800e308:	0598      	lsls	r0, r3, #22
 800e30a:	d4ed      	bmi.n	800e2e8 <_vfiprintf_r+0x4c>
 800e30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e30e:	f7fd fafd 	bl	800b90c <__retarget_lock_release_recursive>
 800e312:	e7e9      	b.n	800e2e8 <_vfiprintf_r+0x4c>
 800e314:	2300      	movs	r3, #0
 800e316:	9309      	str	r3, [sp, #36]	; 0x24
 800e318:	2320      	movs	r3, #32
 800e31a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e31e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e322:	2330      	movs	r3, #48	; 0x30
 800e324:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e4e8 <_vfiprintf_r+0x24c>
 800e328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e32c:	f04f 0901 	mov.w	r9, #1
 800e330:	4623      	mov	r3, r4
 800e332:	469a      	mov	sl, r3
 800e334:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e338:	b10a      	cbz	r2, 800e33e <_vfiprintf_r+0xa2>
 800e33a:	2a25      	cmp	r2, #37	; 0x25
 800e33c:	d1f9      	bne.n	800e332 <_vfiprintf_r+0x96>
 800e33e:	ebba 0b04 	subs.w	fp, sl, r4
 800e342:	d00b      	beq.n	800e35c <_vfiprintf_r+0xc0>
 800e344:	465b      	mov	r3, fp
 800e346:	4622      	mov	r2, r4
 800e348:	4629      	mov	r1, r5
 800e34a:	4630      	mov	r0, r6
 800e34c:	f7ff ff93 	bl	800e276 <__sfputs_r>
 800e350:	3001      	adds	r0, #1
 800e352:	f000 80aa 	beq.w	800e4aa <_vfiprintf_r+0x20e>
 800e356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e358:	445a      	add	r2, fp
 800e35a:	9209      	str	r2, [sp, #36]	; 0x24
 800e35c:	f89a 3000 	ldrb.w	r3, [sl]
 800e360:	2b00      	cmp	r3, #0
 800e362:	f000 80a2 	beq.w	800e4aa <_vfiprintf_r+0x20e>
 800e366:	2300      	movs	r3, #0
 800e368:	f04f 32ff 	mov.w	r2, #4294967295
 800e36c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e370:	f10a 0a01 	add.w	sl, sl, #1
 800e374:	9304      	str	r3, [sp, #16]
 800e376:	9307      	str	r3, [sp, #28]
 800e378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e37c:	931a      	str	r3, [sp, #104]	; 0x68
 800e37e:	4654      	mov	r4, sl
 800e380:	2205      	movs	r2, #5
 800e382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e386:	4858      	ldr	r0, [pc, #352]	; (800e4e8 <_vfiprintf_r+0x24c>)
 800e388:	f7f1 ff02 	bl	8000190 <memchr>
 800e38c:	9a04      	ldr	r2, [sp, #16]
 800e38e:	b9d8      	cbnz	r0, 800e3c8 <_vfiprintf_r+0x12c>
 800e390:	06d1      	lsls	r1, r2, #27
 800e392:	bf44      	itt	mi
 800e394:	2320      	movmi	r3, #32
 800e396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e39a:	0713      	lsls	r3, r2, #28
 800e39c:	bf44      	itt	mi
 800e39e:	232b      	movmi	r3, #43	; 0x2b
 800e3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e3aa:	d015      	beq.n	800e3d8 <_vfiprintf_r+0x13c>
 800e3ac:	9a07      	ldr	r2, [sp, #28]
 800e3ae:	4654      	mov	r4, sl
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	f04f 0c0a 	mov.w	ip, #10
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3bc:	3b30      	subs	r3, #48	; 0x30
 800e3be:	2b09      	cmp	r3, #9
 800e3c0:	d94e      	bls.n	800e460 <_vfiprintf_r+0x1c4>
 800e3c2:	b1b0      	cbz	r0, 800e3f2 <_vfiprintf_r+0x156>
 800e3c4:	9207      	str	r2, [sp, #28]
 800e3c6:	e014      	b.n	800e3f2 <_vfiprintf_r+0x156>
 800e3c8:	eba0 0308 	sub.w	r3, r0, r8
 800e3cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	9304      	str	r3, [sp, #16]
 800e3d4:	46a2      	mov	sl, r4
 800e3d6:	e7d2      	b.n	800e37e <_vfiprintf_r+0xe2>
 800e3d8:	9b03      	ldr	r3, [sp, #12]
 800e3da:	1d19      	adds	r1, r3, #4
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	9103      	str	r1, [sp, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	bfbb      	ittet	lt
 800e3e4:	425b      	neglt	r3, r3
 800e3e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ea:	9307      	strge	r3, [sp, #28]
 800e3ec:	9307      	strlt	r3, [sp, #28]
 800e3ee:	bfb8      	it	lt
 800e3f0:	9204      	strlt	r2, [sp, #16]
 800e3f2:	7823      	ldrb	r3, [r4, #0]
 800e3f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e3f6:	d10c      	bne.n	800e412 <_vfiprintf_r+0x176>
 800e3f8:	7863      	ldrb	r3, [r4, #1]
 800e3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e3fc:	d135      	bne.n	800e46a <_vfiprintf_r+0x1ce>
 800e3fe:	9b03      	ldr	r3, [sp, #12]
 800e400:	1d1a      	adds	r2, r3, #4
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	9203      	str	r2, [sp, #12]
 800e406:	2b00      	cmp	r3, #0
 800e408:	bfb8      	it	lt
 800e40a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e40e:	3402      	adds	r4, #2
 800e410:	9305      	str	r3, [sp, #20]
 800e412:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e4f8 <_vfiprintf_r+0x25c>
 800e416:	7821      	ldrb	r1, [r4, #0]
 800e418:	2203      	movs	r2, #3
 800e41a:	4650      	mov	r0, sl
 800e41c:	f7f1 feb8 	bl	8000190 <memchr>
 800e420:	b140      	cbz	r0, 800e434 <_vfiprintf_r+0x198>
 800e422:	2340      	movs	r3, #64	; 0x40
 800e424:	eba0 000a 	sub.w	r0, r0, sl
 800e428:	fa03 f000 	lsl.w	r0, r3, r0
 800e42c:	9b04      	ldr	r3, [sp, #16]
 800e42e:	4303      	orrs	r3, r0
 800e430:	3401      	adds	r4, #1
 800e432:	9304      	str	r3, [sp, #16]
 800e434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e438:	482c      	ldr	r0, [pc, #176]	; (800e4ec <_vfiprintf_r+0x250>)
 800e43a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e43e:	2206      	movs	r2, #6
 800e440:	f7f1 fea6 	bl	8000190 <memchr>
 800e444:	2800      	cmp	r0, #0
 800e446:	d03f      	beq.n	800e4c8 <_vfiprintf_r+0x22c>
 800e448:	4b29      	ldr	r3, [pc, #164]	; (800e4f0 <_vfiprintf_r+0x254>)
 800e44a:	bb1b      	cbnz	r3, 800e494 <_vfiprintf_r+0x1f8>
 800e44c:	9b03      	ldr	r3, [sp, #12]
 800e44e:	3307      	adds	r3, #7
 800e450:	f023 0307 	bic.w	r3, r3, #7
 800e454:	3308      	adds	r3, #8
 800e456:	9303      	str	r3, [sp, #12]
 800e458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e45a:	443b      	add	r3, r7
 800e45c:	9309      	str	r3, [sp, #36]	; 0x24
 800e45e:	e767      	b.n	800e330 <_vfiprintf_r+0x94>
 800e460:	fb0c 3202 	mla	r2, ip, r2, r3
 800e464:	460c      	mov	r4, r1
 800e466:	2001      	movs	r0, #1
 800e468:	e7a5      	b.n	800e3b6 <_vfiprintf_r+0x11a>
 800e46a:	2300      	movs	r3, #0
 800e46c:	3401      	adds	r4, #1
 800e46e:	9305      	str	r3, [sp, #20]
 800e470:	4619      	mov	r1, r3
 800e472:	f04f 0c0a 	mov.w	ip, #10
 800e476:	4620      	mov	r0, r4
 800e478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e47c:	3a30      	subs	r2, #48	; 0x30
 800e47e:	2a09      	cmp	r2, #9
 800e480:	d903      	bls.n	800e48a <_vfiprintf_r+0x1ee>
 800e482:	2b00      	cmp	r3, #0
 800e484:	d0c5      	beq.n	800e412 <_vfiprintf_r+0x176>
 800e486:	9105      	str	r1, [sp, #20]
 800e488:	e7c3      	b.n	800e412 <_vfiprintf_r+0x176>
 800e48a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e48e:	4604      	mov	r4, r0
 800e490:	2301      	movs	r3, #1
 800e492:	e7f0      	b.n	800e476 <_vfiprintf_r+0x1da>
 800e494:	ab03      	add	r3, sp, #12
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	462a      	mov	r2, r5
 800e49a:	4b16      	ldr	r3, [pc, #88]	; (800e4f4 <_vfiprintf_r+0x258>)
 800e49c:	a904      	add	r1, sp, #16
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f3af 8000 	nop.w
 800e4a4:	4607      	mov	r7, r0
 800e4a6:	1c78      	adds	r0, r7, #1
 800e4a8:	d1d6      	bne.n	800e458 <_vfiprintf_r+0x1bc>
 800e4aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4ac:	07d9      	lsls	r1, r3, #31
 800e4ae:	d405      	bmi.n	800e4bc <_vfiprintf_r+0x220>
 800e4b0:	89ab      	ldrh	r3, [r5, #12]
 800e4b2:	059a      	lsls	r2, r3, #22
 800e4b4:	d402      	bmi.n	800e4bc <_vfiprintf_r+0x220>
 800e4b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4b8:	f7fd fa28 	bl	800b90c <__retarget_lock_release_recursive>
 800e4bc:	89ab      	ldrh	r3, [r5, #12]
 800e4be:	065b      	lsls	r3, r3, #25
 800e4c0:	f53f af12 	bmi.w	800e2e8 <_vfiprintf_r+0x4c>
 800e4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4c6:	e711      	b.n	800e2ec <_vfiprintf_r+0x50>
 800e4c8:	ab03      	add	r3, sp, #12
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	462a      	mov	r2, r5
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <_vfiprintf_r+0x258>)
 800e4d0:	a904      	add	r1, sp, #16
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f000 f880 	bl	800e5d8 <_printf_i>
 800e4d8:	e7e4      	b.n	800e4a4 <_vfiprintf_r+0x208>
 800e4da:	bf00      	nop
 800e4dc:	0800f6e8 	.word	0x0800f6e8
 800e4e0:	0800f708 	.word	0x0800f708
 800e4e4:	0800f6c8 	.word	0x0800f6c8
 800e4e8:	0800f984 	.word	0x0800f984
 800e4ec:	0800f98e 	.word	0x0800f98e
 800e4f0:	00000000 	.word	0x00000000
 800e4f4:	0800e277 	.word	0x0800e277
 800e4f8:	0800f98a 	.word	0x0800f98a

0800e4fc <_printf_common>:
 800e4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e500:	4616      	mov	r6, r2
 800e502:	4699      	mov	r9, r3
 800e504:	688a      	ldr	r2, [r1, #8]
 800e506:	690b      	ldr	r3, [r1, #16]
 800e508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e50c:	4293      	cmp	r3, r2
 800e50e:	bfb8      	it	lt
 800e510:	4613      	movlt	r3, r2
 800e512:	6033      	str	r3, [r6, #0]
 800e514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e518:	4607      	mov	r7, r0
 800e51a:	460c      	mov	r4, r1
 800e51c:	b10a      	cbz	r2, 800e522 <_printf_common+0x26>
 800e51e:	3301      	adds	r3, #1
 800e520:	6033      	str	r3, [r6, #0]
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	0699      	lsls	r1, r3, #26
 800e526:	bf42      	ittt	mi
 800e528:	6833      	ldrmi	r3, [r6, #0]
 800e52a:	3302      	addmi	r3, #2
 800e52c:	6033      	strmi	r3, [r6, #0]
 800e52e:	6825      	ldr	r5, [r4, #0]
 800e530:	f015 0506 	ands.w	r5, r5, #6
 800e534:	d106      	bne.n	800e544 <_printf_common+0x48>
 800e536:	f104 0a19 	add.w	sl, r4, #25
 800e53a:	68e3      	ldr	r3, [r4, #12]
 800e53c:	6832      	ldr	r2, [r6, #0]
 800e53e:	1a9b      	subs	r3, r3, r2
 800e540:	42ab      	cmp	r3, r5
 800e542:	dc26      	bgt.n	800e592 <_printf_common+0x96>
 800e544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e548:	1e13      	subs	r3, r2, #0
 800e54a:	6822      	ldr	r2, [r4, #0]
 800e54c:	bf18      	it	ne
 800e54e:	2301      	movne	r3, #1
 800e550:	0692      	lsls	r2, r2, #26
 800e552:	d42b      	bmi.n	800e5ac <_printf_common+0xb0>
 800e554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e558:	4649      	mov	r1, r9
 800e55a:	4638      	mov	r0, r7
 800e55c:	47c0      	blx	r8
 800e55e:	3001      	adds	r0, #1
 800e560:	d01e      	beq.n	800e5a0 <_printf_common+0xa4>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	68e5      	ldr	r5, [r4, #12]
 800e566:	6832      	ldr	r2, [r6, #0]
 800e568:	f003 0306 	and.w	r3, r3, #6
 800e56c:	2b04      	cmp	r3, #4
 800e56e:	bf08      	it	eq
 800e570:	1aad      	subeq	r5, r5, r2
 800e572:	68a3      	ldr	r3, [r4, #8]
 800e574:	6922      	ldr	r2, [r4, #16]
 800e576:	bf0c      	ite	eq
 800e578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e57c:	2500      	movne	r5, #0
 800e57e:	4293      	cmp	r3, r2
 800e580:	bfc4      	itt	gt
 800e582:	1a9b      	subgt	r3, r3, r2
 800e584:	18ed      	addgt	r5, r5, r3
 800e586:	2600      	movs	r6, #0
 800e588:	341a      	adds	r4, #26
 800e58a:	42b5      	cmp	r5, r6
 800e58c:	d11a      	bne.n	800e5c4 <_printf_common+0xc8>
 800e58e:	2000      	movs	r0, #0
 800e590:	e008      	b.n	800e5a4 <_printf_common+0xa8>
 800e592:	2301      	movs	r3, #1
 800e594:	4652      	mov	r2, sl
 800e596:	4649      	mov	r1, r9
 800e598:	4638      	mov	r0, r7
 800e59a:	47c0      	blx	r8
 800e59c:	3001      	adds	r0, #1
 800e59e:	d103      	bne.n	800e5a8 <_printf_common+0xac>
 800e5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a8:	3501      	adds	r5, #1
 800e5aa:	e7c6      	b.n	800e53a <_printf_common+0x3e>
 800e5ac:	18e1      	adds	r1, r4, r3
 800e5ae:	1c5a      	adds	r2, r3, #1
 800e5b0:	2030      	movs	r0, #48	; 0x30
 800e5b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5b6:	4422      	add	r2, r4
 800e5b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5c0:	3302      	adds	r3, #2
 800e5c2:	e7c7      	b.n	800e554 <_printf_common+0x58>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	4649      	mov	r1, r9
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	47c0      	blx	r8
 800e5ce:	3001      	adds	r0, #1
 800e5d0:	d0e6      	beq.n	800e5a0 <_printf_common+0xa4>
 800e5d2:	3601      	adds	r6, #1
 800e5d4:	e7d9      	b.n	800e58a <_printf_common+0x8e>
	...

0800e5d8 <_printf_i>:
 800e5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5dc:	7e0f      	ldrb	r7, [r1, #24]
 800e5de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5e0:	2f78      	cmp	r7, #120	; 0x78
 800e5e2:	4691      	mov	r9, r2
 800e5e4:	4680      	mov	r8, r0
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	469a      	mov	sl, r3
 800e5ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5ee:	d807      	bhi.n	800e600 <_printf_i+0x28>
 800e5f0:	2f62      	cmp	r7, #98	; 0x62
 800e5f2:	d80a      	bhi.n	800e60a <_printf_i+0x32>
 800e5f4:	2f00      	cmp	r7, #0
 800e5f6:	f000 80d8 	beq.w	800e7aa <_printf_i+0x1d2>
 800e5fa:	2f58      	cmp	r7, #88	; 0x58
 800e5fc:	f000 80a3 	beq.w	800e746 <_printf_i+0x16e>
 800e600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e608:	e03a      	b.n	800e680 <_printf_i+0xa8>
 800e60a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e60e:	2b15      	cmp	r3, #21
 800e610:	d8f6      	bhi.n	800e600 <_printf_i+0x28>
 800e612:	a101      	add	r1, pc, #4	; (adr r1, 800e618 <_printf_i+0x40>)
 800e614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e618:	0800e671 	.word	0x0800e671
 800e61c:	0800e685 	.word	0x0800e685
 800e620:	0800e601 	.word	0x0800e601
 800e624:	0800e601 	.word	0x0800e601
 800e628:	0800e601 	.word	0x0800e601
 800e62c:	0800e601 	.word	0x0800e601
 800e630:	0800e685 	.word	0x0800e685
 800e634:	0800e601 	.word	0x0800e601
 800e638:	0800e601 	.word	0x0800e601
 800e63c:	0800e601 	.word	0x0800e601
 800e640:	0800e601 	.word	0x0800e601
 800e644:	0800e791 	.word	0x0800e791
 800e648:	0800e6b5 	.word	0x0800e6b5
 800e64c:	0800e773 	.word	0x0800e773
 800e650:	0800e601 	.word	0x0800e601
 800e654:	0800e601 	.word	0x0800e601
 800e658:	0800e7b3 	.word	0x0800e7b3
 800e65c:	0800e601 	.word	0x0800e601
 800e660:	0800e6b5 	.word	0x0800e6b5
 800e664:	0800e601 	.word	0x0800e601
 800e668:	0800e601 	.word	0x0800e601
 800e66c:	0800e77b 	.word	0x0800e77b
 800e670:	682b      	ldr	r3, [r5, #0]
 800e672:	1d1a      	adds	r2, r3, #4
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	602a      	str	r2, [r5, #0]
 800e678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e67c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e680:	2301      	movs	r3, #1
 800e682:	e0a3      	b.n	800e7cc <_printf_i+0x1f4>
 800e684:	6820      	ldr	r0, [r4, #0]
 800e686:	6829      	ldr	r1, [r5, #0]
 800e688:	0606      	lsls	r6, r0, #24
 800e68a:	f101 0304 	add.w	r3, r1, #4
 800e68e:	d50a      	bpl.n	800e6a6 <_printf_i+0xce>
 800e690:	680e      	ldr	r6, [r1, #0]
 800e692:	602b      	str	r3, [r5, #0]
 800e694:	2e00      	cmp	r6, #0
 800e696:	da03      	bge.n	800e6a0 <_printf_i+0xc8>
 800e698:	232d      	movs	r3, #45	; 0x2d
 800e69a:	4276      	negs	r6, r6
 800e69c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6a0:	485e      	ldr	r0, [pc, #376]	; (800e81c <_printf_i+0x244>)
 800e6a2:	230a      	movs	r3, #10
 800e6a4:	e019      	b.n	800e6da <_printf_i+0x102>
 800e6a6:	680e      	ldr	r6, [r1, #0]
 800e6a8:	602b      	str	r3, [r5, #0]
 800e6aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6ae:	bf18      	it	ne
 800e6b0:	b236      	sxthne	r6, r6
 800e6b2:	e7ef      	b.n	800e694 <_printf_i+0xbc>
 800e6b4:	682b      	ldr	r3, [r5, #0]
 800e6b6:	6820      	ldr	r0, [r4, #0]
 800e6b8:	1d19      	adds	r1, r3, #4
 800e6ba:	6029      	str	r1, [r5, #0]
 800e6bc:	0601      	lsls	r1, r0, #24
 800e6be:	d501      	bpl.n	800e6c4 <_printf_i+0xec>
 800e6c0:	681e      	ldr	r6, [r3, #0]
 800e6c2:	e002      	b.n	800e6ca <_printf_i+0xf2>
 800e6c4:	0646      	lsls	r6, r0, #25
 800e6c6:	d5fb      	bpl.n	800e6c0 <_printf_i+0xe8>
 800e6c8:	881e      	ldrh	r6, [r3, #0]
 800e6ca:	4854      	ldr	r0, [pc, #336]	; (800e81c <_printf_i+0x244>)
 800e6cc:	2f6f      	cmp	r7, #111	; 0x6f
 800e6ce:	bf0c      	ite	eq
 800e6d0:	2308      	moveq	r3, #8
 800e6d2:	230a      	movne	r3, #10
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6da:	6865      	ldr	r5, [r4, #4]
 800e6dc:	60a5      	str	r5, [r4, #8]
 800e6de:	2d00      	cmp	r5, #0
 800e6e0:	bfa2      	ittt	ge
 800e6e2:	6821      	ldrge	r1, [r4, #0]
 800e6e4:	f021 0104 	bicge.w	r1, r1, #4
 800e6e8:	6021      	strge	r1, [r4, #0]
 800e6ea:	b90e      	cbnz	r6, 800e6f0 <_printf_i+0x118>
 800e6ec:	2d00      	cmp	r5, #0
 800e6ee:	d04d      	beq.n	800e78c <_printf_i+0x1b4>
 800e6f0:	4615      	mov	r5, r2
 800e6f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6f6:	fb03 6711 	mls	r7, r3, r1, r6
 800e6fa:	5dc7      	ldrb	r7, [r0, r7]
 800e6fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e700:	4637      	mov	r7, r6
 800e702:	42bb      	cmp	r3, r7
 800e704:	460e      	mov	r6, r1
 800e706:	d9f4      	bls.n	800e6f2 <_printf_i+0x11a>
 800e708:	2b08      	cmp	r3, #8
 800e70a:	d10b      	bne.n	800e724 <_printf_i+0x14c>
 800e70c:	6823      	ldr	r3, [r4, #0]
 800e70e:	07de      	lsls	r6, r3, #31
 800e710:	d508      	bpl.n	800e724 <_printf_i+0x14c>
 800e712:	6923      	ldr	r3, [r4, #16]
 800e714:	6861      	ldr	r1, [r4, #4]
 800e716:	4299      	cmp	r1, r3
 800e718:	bfde      	ittt	le
 800e71a:	2330      	movle	r3, #48	; 0x30
 800e71c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e720:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e724:	1b52      	subs	r2, r2, r5
 800e726:	6122      	str	r2, [r4, #16]
 800e728:	f8cd a000 	str.w	sl, [sp]
 800e72c:	464b      	mov	r3, r9
 800e72e:	aa03      	add	r2, sp, #12
 800e730:	4621      	mov	r1, r4
 800e732:	4640      	mov	r0, r8
 800e734:	f7ff fee2 	bl	800e4fc <_printf_common>
 800e738:	3001      	adds	r0, #1
 800e73a:	d14c      	bne.n	800e7d6 <_printf_i+0x1fe>
 800e73c:	f04f 30ff 	mov.w	r0, #4294967295
 800e740:	b004      	add	sp, #16
 800e742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e746:	4835      	ldr	r0, [pc, #212]	; (800e81c <_printf_i+0x244>)
 800e748:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e74c:	6829      	ldr	r1, [r5, #0]
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	f851 6b04 	ldr.w	r6, [r1], #4
 800e754:	6029      	str	r1, [r5, #0]
 800e756:	061d      	lsls	r5, r3, #24
 800e758:	d514      	bpl.n	800e784 <_printf_i+0x1ac>
 800e75a:	07df      	lsls	r7, r3, #31
 800e75c:	bf44      	itt	mi
 800e75e:	f043 0320 	orrmi.w	r3, r3, #32
 800e762:	6023      	strmi	r3, [r4, #0]
 800e764:	b91e      	cbnz	r6, 800e76e <_printf_i+0x196>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	f023 0320 	bic.w	r3, r3, #32
 800e76c:	6023      	str	r3, [r4, #0]
 800e76e:	2310      	movs	r3, #16
 800e770:	e7b0      	b.n	800e6d4 <_printf_i+0xfc>
 800e772:	6823      	ldr	r3, [r4, #0]
 800e774:	f043 0320 	orr.w	r3, r3, #32
 800e778:	6023      	str	r3, [r4, #0]
 800e77a:	2378      	movs	r3, #120	; 0x78
 800e77c:	4828      	ldr	r0, [pc, #160]	; (800e820 <_printf_i+0x248>)
 800e77e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e782:	e7e3      	b.n	800e74c <_printf_i+0x174>
 800e784:	0659      	lsls	r1, r3, #25
 800e786:	bf48      	it	mi
 800e788:	b2b6      	uxthmi	r6, r6
 800e78a:	e7e6      	b.n	800e75a <_printf_i+0x182>
 800e78c:	4615      	mov	r5, r2
 800e78e:	e7bb      	b.n	800e708 <_printf_i+0x130>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	6826      	ldr	r6, [r4, #0]
 800e794:	6961      	ldr	r1, [r4, #20]
 800e796:	1d18      	adds	r0, r3, #4
 800e798:	6028      	str	r0, [r5, #0]
 800e79a:	0635      	lsls	r5, r6, #24
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	d501      	bpl.n	800e7a4 <_printf_i+0x1cc>
 800e7a0:	6019      	str	r1, [r3, #0]
 800e7a2:	e002      	b.n	800e7aa <_printf_i+0x1d2>
 800e7a4:	0670      	lsls	r0, r6, #25
 800e7a6:	d5fb      	bpl.n	800e7a0 <_printf_i+0x1c8>
 800e7a8:	8019      	strh	r1, [r3, #0]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	6123      	str	r3, [r4, #16]
 800e7ae:	4615      	mov	r5, r2
 800e7b0:	e7ba      	b.n	800e728 <_printf_i+0x150>
 800e7b2:	682b      	ldr	r3, [r5, #0]
 800e7b4:	1d1a      	adds	r2, r3, #4
 800e7b6:	602a      	str	r2, [r5, #0]
 800e7b8:	681d      	ldr	r5, [r3, #0]
 800e7ba:	6862      	ldr	r2, [r4, #4]
 800e7bc:	2100      	movs	r1, #0
 800e7be:	4628      	mov	r0, r5
 800e7c0:	f7f1 fce6 	bl	8000190 <memchr>
 800e7c4:	b108      	cbz	r0, 800e7ca <_printf_i+0x1f2>
 800e7c6:	1b40      	subs	r0, r0, r5
 800e7c8:	6060      	str	r0, [r4, #4]
 800e7ca:	6863      	ldr	r3, [r4, #4]
 800e7cc:	6123      	str	r3, [r4, #16]
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7d4:	e7a8      	b.n	800e728 <_printf_i+0x150>
 800e7d6:	6923      	ldr	r3, [r4, #16]
 800e7d8:	462a      	mov	r2, r5
 800e7da:	4649      	mov	r1, r9
 800e7dc:	4640      	mov	r0, r8
 800e7de:	47d0      	blx	sl
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	d0ab      	beq.n	800e73c <_printf_i+0x164>
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	079b      	lsls	r3, r3, #30
 800e7e8:	d413      	bmi.n	800e812 <_printf_i+0x23a>
 800e7ea:	68e0      	ldr	r0, [r4, #12]
 800e7ec:	9b03      	ldr	r3, [sp, #12]
 800e7ee:	4298      	cmp	r0, r3
 800e7f0:	bfb8      	it	lt
 800e7f2:	4618      	movlt	r0, r3
 800e7f4:	e7a4      	b.n	800e740 <_printf_i+0x168>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	4632      	mov	r2, r6
 800e7fa:	4649      	mov	r1, r9
 800e7fc:	4640      	mov	r0, r8
 800e7fe:	47d0      	blx	sl
 800e800:	3001      	adds	r0, #1
 800e802:	d09b      	beq.n	800e73c <_printf_i+0x164>
 800e804:	3501      	adds	r5, #1
 800e806:	68e3      	ldr	r3, [r4, #12]
 800e808:	9903      	ldr	r1, [sp, #12]
 800e80a:	1a5b      	subs	r3, r3, r1
 800e80c:	42ab      	cmp	r3, r5
 800e80e:	dcf2      	bgt.n	800e7f6 <_printf_i+0x21e>
 800e810:	e7eb      	b.n	800e7ea <_printf_i+0x212>
 800e812:	2500      	movs	r5, #0
 800e814:	f104 0619 	add.w	r6, r4, #25
 800e818:	e7f5      	b.n	800e806 <_printf_i+0x22e>
 800e81a:	bf00      	nop
 800e81c:	0800f995 	.word	0x0800f995
 800e820:	0800f9a6 	.word	0x0800f9a6

0800e824 <_read_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	4d07      	ldr	r5, [pc, #28]	; (800e844 <_read_r+0x20>)
 800e828:	4604      	mov	r4, r0
 800e82a:	4608      	mov	r0, r1
 800e82c:	4611      	mov	r1, r2
 800e82e:	2200      	movs	r2, #0
 800e830:	602a      	str	r2, [r5, #0]
 800e832:	461a      	mov	r2, r3
 800e834:	f7f6 fad6 	bl	8004de4 <_read>
 800e838:	1c43      	adds	r3, r0, #1
 800e83a:	d102      	bne.n	800e842 <_read_r+0x1e>
 800e83c:	682b      	ldr	r3, [r5, #0]
 800e83e:	b103      	cbz	r3, 800e842 <_read_r+0x1e>
 800e840:	6023      	str	r3, [r4, #0]
 800e842:	bd38      	pop	{r3, r4, r5, pc}
 800e844:	20001764 	.word	0x20001764

0800e848 <nan>:
 800e848:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e850 <nan+0x8>
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	00000000 	.word	0x00000000
 800e854:	7ff80000 	.word	0x7ff80000

0800e858 <__ascii_wctomb>:
 800e858:	b149      	cbz	r1, 800e86e <__ascii_wctomb+0x16>
 800e85a:	2aff      	cmp	r2, #255	; 0xff
 800e85c:	bf85      	ittet	hi
 800e85e:	238a      	movhi	r3, #138	; 0x8a
 800e860:	6003      	strhi	r3, [r0, #0]
 800e862:	700a      	strbls	r2, [r1, #0]
 800e864:	f04f 30ff 	movhi.w	r0, #4294967295
 800e868:	bf98      	it	ls
 800e86a:	2001      	movls	r0, #1
 800e86c:	4770      	bx	lr
 800e86e:	4608      	mov	r0, r1
 800e870:	4770      	bx	lr
	...

0800e874 <__assert_func>:
 800e874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e876:	4614      	mov	r4, r2
 800e878:	461a      	mov	r2, r3
 800e87a:	4b09      	ldr	r3, [pc, #36]	; (800e8a0 <__assert_func+0x2c>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4605      	mov	r5, r0
 800e880:	68d8      	ldr	r0, [r3, #12]
 800e882:	b14c      	cbz	r4, 800e898 <__assert_func+0x24>
 800e884:	4b07      	ldr	r3, [pc, #28]	; (800e8a4 <__assert_func+0x30>)
 800e886:	9100      	str	r1, [sp, #0]
 800e888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e88c:	4906      	ldr	r1, [pc, #24]	; (800e8a8 <__assert_func+0x34>)
 800e88e:	462b      	mov	r3, r5
 800e890:	f000 f80e 	bl	800e8b0 <fiprintf>
 800e894:	f000 f826 	bl	800e8e4 <abort>
 800e898:	4b04      	ldr	r3, [pc, #16]	; (800e8ac <__assert_func+0x38>)
 800e89a:	461c      	mov	r4, r3
 800e89c:	e7f3      	b.n	800e886 <__assert_func+0x12>
 800e89e:	bf00      	nop
 800e8a0:	20000024 	.word	0x20000024
 800e8a4:	0800f9b7 	.word	0x0800f9b7
 800e8a8:	0800f9c4 	.word	0x0800f9c4
 800e8ac:	0800f9f2 	.word	0x0800f9f2

0800e8b0 <fiprintf>:
 800e8b0:	b40e      	push	{r1, r2, r3}
 800e8b2:	b503      	push	{r0, r1, lr}
 800e8b4:	4601      	mov	r1, r0
 800e8b6:	ab03      	add	r3, sp, #12
 800e8b8:	4805      	ldr	r0, [pc, #20]	; (800e8d0 <fiprintf+0x20>)
 800e8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8be:	6800      	ldr	r0, [r0, #0]
 800e8c0:	9301      	str	r3, [sp, #4]
 800e8c2:	f7ff fceb 	bl	800e29c <_vfiprintf_r>
 800e8c6:	b002      	add	sp, #8
 800e8c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8cc:	b003      	add	sp, #12
 800e8ce:	4770      	bx	lr
 800e8d0:	20000024 	.word	0x20000024

0800e8d4 <_malloc_usable_size_r>:
 800e8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d8:	1f18      	subs	r0, r3, #4
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	bfbc      	itt	lt
 800e8de:	580b      	ldrlt	r3, [r1, r0]
 800e8e0:	18c0      	addlt	r0, r0, r3
 800e8e2:	4770      	bx	lr

0800e8e4 <abort>:
 800e8e4:	b508      	push	{r3, lr}
 800e8e6:	2006      	movs	r0, #6
 800e8e8:	f000 f82c 	bl	800e944 <raise>
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	f7f6 fa6f 	bl	8004dd0 <_exit>

0800e8f2 <_raise_r>:
 800e8f2:	291f      	cmp	r1, #31
 800e8f4:	b538      	push	{r3, r4, r5, lr}
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	460d      	mov	r5, r1
 800e8fa:	d904      	bls.n	800e906 <_raise_r+0x14>
 800e8fc:	2316      	movs	r3, #22
 800e8fe:	6003      	str	r3, [r0, #0]
 800e900:	f04f 30ff 	mov.w	r0, #4294967295
 800e904:	bd38      	pop	{r3, r4, r5, pc}
 800e906:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e908:	b112      	cbz	r2, 800e910 <_raise_r+0x1e>
 800e90a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e90e:	b94b      	cbnz	r3, 800e924 <_raise_r+0x32>
 800e910:	4620      	mov	r0, r4
 800e912:	f000 f831 	bl	800e978 <_getpid_r>
 800e916:	462a      	mov	r2, r5
 800e918:	4601      	mov	r1, r0
 800e91a:	4620      	mov	r0, r4
 800e91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e920:	f000 b818 	b.w	800e954 <_kill_r>
 800e924:	2b01      	cmp	r3, #1
 800e926:	d00a      	beq.n	800e93e <_raise_r+0x4c>
 800e928:	1c59      	adds	r1, r3, #1
 800e92a:	d103      	bne.n	800e934 <_raise_r+0x42>
 800e92c:	2316      	movs	r3, #22
 800e92e:	6003      	str	r3, [r0, #0]
 800e930:	2001      	movs	r0, #1
 800e932:	e7e7      	b.n	800e904 <_raise_r+0x12>
 800e934:	2400      	movs	r4, #0
 800e936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e93a:	4628      	mov	r0, r5
 800e93c:	4798      	blx	r3
 800e93e:	2000      	movs	r0, #0
 800e940:	e7e0      	b.n	800e904 <_raise_r+0x12>
	...

0800e944 <raise>:
 800e944:	4b02      	ldr	r3, [pc, #8]	; (800e950 <raise+0xc>)
 800e946:	4601      	mov	r1, r0
 800e948:	6818      	ldr	r0, [r3, #0]
 800e94a:	f7ff bfd2 	b.w	800e8f2 <_raise_r>
 800e94e:	bf00      	nop
 800e950:	20000024 	.word	0x20000024

0800e954 <_kill_r>:
 800e954:	b538      	push	{r3, r4, r5, lr}
 800e956:	4d07      	ldr	r5, [pc, #28]	; (800e974 <_kill_r+0x20>)
 800e958:	2300      	movs	r3, #0
 800e95a:	4604      	mov	r4, r0
 800e95c:	4608      	mov	r0, r1
 800e95e:	4611      	mov	r1, r2
 800e960:	602b      	str	r3, [r5, #0]
 800e962:	f7f6 fa25 	bl	8004db0 <_kill>
 800e966:	1c43      	adds	r3, r0, #1
 800e968:	d102      	bne.n	800e970 <_kill_r+0x1c>
 800e96a:	682b      	ldr	r3, [r5, #0]
 800e96c:	b103      	cbz	r3, 800e970 <_kill_r+0x1c>
 800e96e:	6023      	str	r3, [r4, #0]
 800e970:	bd38      	pop	{r3, r4, r5, pc}
 800e972:	bf00      	nop
 800e974:	20001764 	.word	0x20001764

0800e978 <_getpid_r>:
 800e978:	f7f6 ba12 	b.w	8004da0 <_getpid>

0800e97c <_init>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	bf00      	nop
 800e980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e982:	bc08      	pop	{r3}
 800e984:	469e      	mov	lr, r3
 800e986:	4770      	bx	lr

0800e988 <_fini>:
 800e988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98a:	bf00      	nop
 800e98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e98e:	bc08      	pop	{r3}
 800e990:	469e      	mov	lr, r3
 800e992:	4770      	bx	lr
